; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\RWR\AdvancedHTS.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
_DATA	SEGMENT
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_DATA	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
CONST	SEGMENT
_CURSOR_SIZE DD	03d851eb8r			; 0.065
_NEAR_CLIP DD	03f800000r			; 1
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	_atanf
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	?atan@@YAMM@Z					; atan
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?Yaw@VuEntity@@QBEMXZ				; VuEntity::Yaw
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	?mlSinCos@@YAXPAUmlTrig@@M@Z			; mlSinCos
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	?GetNextWP@WayPointClass@@QAEPAV1@XZ		; WayPointClass::GetNextWP
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ	; VirtualDisplay::CenterOriginInViewport
PUBLIC	?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ	; VirtualDisplay::ZeroRotationAboutOrigin
PUBLIC	?SetType@SensorClass@@UAEXW4SensorType@1@@Z	; SensorClass::SetType
PUBLIC	?SetPower@SensorClass@@UAEXH@Z			; SensorClass::SetPower
PUBLIC	?IsOn@SensorClass@@UAEHXZ			; SensorClass::IsOn
PUBLIC	?ExecModes@SensorClass@@UAEXHH@Z		; SensorClass::ExecModes
PUBLIC	?UpdateState@SensorClass@@UAEXHH@Z		; SensorClass::UpdateState
PUBLIC	?SetSeekerPos@SensorClass@@UAEXMM@Z		; SensorClass::SetSeekerPos
PUBLIC	?TargetUnderCursor@SensorClass@@UAE?AVVU_ID@@XZ	; SensorClass::TargetUnderCursor
PUBLIC	?GetDisplay@SensorClass@@UAEPAVVirtualDisplay@@XZ ; SensorClass::GetDisplay
PUBLIC	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
PUBLIC	?GetNext@GroundListElement@@QAEPAV1@XZ		; GroundListElement::GetNext
PUBLIC	?IsSet@GroundListElement@@QAEHH@Z		; GroundListElement::IsSet
PUBLIC	?GetFirstGroundElement@FireControlComputer@@QAEPAVGroundListElement@@XZ ; FireControlComputer::GetFirstGroundElement
PUBLIC	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ	; SimObjectType::BaseData
PUBLIC	?SetSubMode@HarmTargetingPod@@QAEXW4Submode@1@@Z ; HarmTargetingPod::SetSubMode
PUBLIC	?ClearDTSB@HarmTargetingPod@@IAEXXZ		; HarmTargetingPod::ClearDTSB
PUBLIC	??0AdvancedHarmTargetingPod@@QAE@HPAVSimMoverClass@@@Z ; AdvancedHarmTargetingPod::AdvancedHarmTargetingPod
PUBLIC	??1AdvancedHarmTargetingPod@@UAE@XZ		; AdvancedHarmTargetingPod::~AdvancedHarmTargetingPod
PUBLIC	?HADDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z ; AdvancedHarmTargetingPod::HADDisplay
PUBLIC	?HADExpDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z ; AdvancedHarmTargetingPod::HADExpDisplay
PUBLIC	?HASDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z ; AdvancedHarmTargetingPod::HASDisplay
PUBLIC	?POSDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z ; AdvancedHarmTargetingPod::POSDisplay
PUBLIC	?HandoffDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z ; AdvancedHarmTargetingPod::HandoffDisplay
PUBLIC	?DrawEmitter@AdvancedHarmTargetingPod@@AAEXPAVGroundListElement@@AAM11@Z ; AdvancedHarmTargetingPod::DrawEmitter
PUBLIC	?GetOsbPos@AdvancedHarmTargetingPod@@AAEXAAHAAM1@Z ; AdvancedHarmTargetingPod::GetOsbPos
PUBLIC	??_GAdvancedHarmTargetingPod@@UAEPAXI@Z		; AdvancedHarmTargetingPod::`scalar deleting destructor'
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_7AdvancedHarmTargetingPod@@6B@		; AdvancedHarmTargetingPod::`vftable'
PUBLIC	??_C@_04OGKJMPGK@?$CF02d?$AA@			; `string'
PUBLIC	??_C@_07COCHMHBB@?$CFd?3?$CF02d?$AA@		; `string'
PUBLIC	??_C@_0N@PKIKNCIH@?$CFd?3?$CF02d?3?$CF02d?$AA@	; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVDrawableClass@@@8			; DrawableClass `RTTI Type Descriptor'
PUBLIC	??_R3DrawableClass@@8				; DrawableClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DrawableClass@@8				; DrawableClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DrawableClass@@8			; DrawableClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVMfdDrawable@@@8				; MfdDrawable `RTTI Type Descriptor'
PUBLIC	??_R3MfdDrawable@@8				; MfdDrawable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MfdDrawable@@8				; MfdDrawable::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MfdDrawable@@8			; MfdDrawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@SensorClass@@8			; SensorClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSensorClass@@@8				; SensorClass `RTTI Type Descriptor'
PUBLIC	??_R3SensorClass@@8				; SensorClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SensorClass@@8				; SensorClass::`RTTI Base Class Array'
PUBLIC	??_R4AdvancedHarmTargetingPod@@6B@		; AdvancedHarmTargetingPod::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVAdvancedHarmTargetingPod@@@8		; AdvancedHarmTargetingPod `RTTI Type Descriptor'
PUBLIC	??_R3AdvancedHarmTargetingPod@@8		; AdvancedHarmTargetingPod::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AdvancedHarmTargetingPod@@8		; AdvancedHarmTargetingPod::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AdvancedHarmTargetingPod@@8	; AdvancedHarmTargetingPod::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@HarmTargetingPod@@8		; HarmTargetingPod::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVHarmTargetingPod@@@8			; HarmTargetingPod `RTTI Type Descriptor'
PUBLIC	??_R3HarmTargetingPod@@8			; HarmTargetingPod::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2HarmTargetingPod@@8			; HarmTargetingPod::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RwrClass@@8			; RwrClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVRwrClass@@@8				; RwrClass `RTTI Type Descriptor'
PUBLIC	??_R3RwrClass@@8				; RwrClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RwrClass@@8				; RwrClass::`RTTI Base Class Array'
PUBLIC	__real@00000000
PUBLIC	__real@392c987a
PUBLIC	__real@3a83126f
PUBLIC	__real@3d23d70a
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e19999a
PUBLIC	__real@3e800000
PUBLIC	__real@3e8f5c29
PUBLIC	__real@3ebd70a4
PUBLIC	__real@3ec28f5c
PUBLIC	__real@3ef5c28f
PUBLIC	__real@3efae148
PUBLIC	__real@3f000000
PUBLIC	__real@3f0ccccd
PUBLIC	__real@3f133333
PUBLIC	__real@3f333333
PUBLIC	__real@3f400000
PUBLIC	__real@3f800000
PUBLIC	__real@3faccccd
PUBLIC	__real@3fb33333
PUBLIC	__real@3fc90fdb
PUBLIC	__real@40000000
PUBLIC	__real@42700000
PUBLIC	__real@45610000
PUBLIC	__real@47a8c000
PUBLIC	__real@be800000
PUBLIC	__real@bf000000
PUBLIC	__real@bf0a3d71
PUBLIC	__real@bf0ccccd
PUBLIC	__real@bf0f5c29
PUBLIC	__real@bf800000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_sprintf:PROC
EXTRN	_abs:PROC
EXTRN	_atan:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_sin:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?GetLocation@WayPointClass@@QBEXPAM00@Z:PROC	; WayPointClass::GetLocation
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z:PROC ; VirtualDisplay::AdjustOriginInViewport
EXTRN	?AdjustRotationAboutOrigin@VirtualDisplay@@QAEXM@Z:PROC ; VirtualDisplay::AdjustRotationAboutOrigin
EXTRN	?GetTOF@MissileClass@@QAEMMMMMM@Z:PROC		; MissileClass::GetTOF
EXTRN	?SOIManager@SimVehicleClass@@QAEXW4SOI@1@@Z:PROC ; SimVehicleClass::SOIManager
EXTRN	?Distance@@YAMMMMM@Z:PROC			; Distance
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	?DisplayExit@DrawableClass@@UAEXXZ:PROC		; DrawableClass::DisplayExit
EXTRN	?GetButtonPos@DrawableClass@@QAEXHPAM0@Z:PROC	; DrawableClass::GetButtonPos
EXTRN	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z:PROC ; DrawableClass::GetMfdColor
EXTRN	?PushButton@MfdDrawable@@UAEXHH@Z:PROC		; MfdDrawable::PushButton
EXTRN	?ClearSensorTarget@SensorClass@@UAEXXZ:PROC	; SensorClass::ClearSensorTarget
EXTRN	?SetSensorTarget@SensorClass@@MAEXPAVSimObjectType@@@Z:PROC ; SensorClass::SetSensorTarget
EXTRN	?SetSensorTargetHack@SensorClass@@MAEXPAVFalconEntity@@@Z:PROC ; SensorClass::SetSensorTargetHack
EXTRN	?CheckLockedTarget@SensorClass@@MAEXXZ:PROC	; SensorClass::CheckLockedTarget
EXTRN	?DisplayInit@RwrClass@@UAEXPAVImageBuffer@@@Z:PROC ; RwrClass::DisplayInit
EXTRN	?DrawEmitterSymbol@RwrClass@@IAEXHH@Z:PROC	; RwrClass::DrawEmitterSymbol
EXTRN	?Display@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z:PROC ; HarmTargetingPod::Display
EXTRN	??0HarmTargetingPod@@QAE@HPAVSimMoverClass@@@Z:PROC ; HarmTargetingPod::HarmTargetingPod
EXTRN	??1HarmTargetingPod@@UAE@XZ:PROC		; HarmTargetingPod::~HarmTargetingPod
EXTRN	?GetAGCenter@HarmTargetingPod@@UAEXPAM0@Z:PROC	; HarmTargetingPod::GetAGCenter
EXTRN	?Exec@HarmTargetingPod@@UAEPAVSimObjectType@@PAV2@@Z:PROC ; HarmTargetingPod::Exec
EXTRN	?HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z:PROC ; HarmTargetingPod::HADDisplay
EXTRN	?HADExpDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z:PROC ; HarmTargetingPod::HADExpDisplay
EXTRN	?HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z:PROC ; HarmTargetingPod::HASDisplay
EXTRN	?POSDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z:PROC ; HarmTargetingPod::POSDisplay
EXTRN	?HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z:PROC ; HarmTargetingPod::HandoffDisplay
EXTRN	?ObjectDetected@HarmTargetingPod@@UAEHPAVFalconEntity@@HH@Z:PROC ; HarmTargetingPod::ObjectDetected
EXTRN	?SetDesiredTarget@HarmTargetingPod@@UAEXPAVSimObjectType@@@Z:PROC ; HarmTargetingPod::SetDesiredTarget
EXTRN	?UpdateDTSB@HarmTargetingPod@@IAEXHAAM0@Z:PROC	; HarmTargetingPod::UpdateDTSB
EXTRN	?BoxTargetDTSB@HarmTargetingPod@@IAEXHAAM0@Z:PROC ; HarmTargetingPod::BoxTargetDTSB
EXTRN	?ClearPOSTargets@HarmTargetingPod@@IAEXXZ:PROC	; HarmTargetingPod::ClearPOSTargets
EXTRN	?BuildPOSTargets@HarmTargetingPod@@IAEXXZ:PROC	; HarmTargetingPod::BuildPOSTargets
EXTRN	?FindWaypointNum@HarmTargetingPod@@IAEHPAVWayPointClass@@@Z:PROC ; HarmTargetingPod::FindWaypointNum
EXTRN	?IsInsideALIC@HarmTargetingPod@@IAE_NAAM0@Z:PROC ; HarmTargetingPod::IsInsideALIC
EXTRN	?IsInPriorityList@HarmTargetingPod@@IAE_NH@Z:PROC ; HarmTargetingPod::IsInPriorityList
EXTRN	??_EAdvancedHarmTargetingPod@@UAEPAXI@Z:PROC	; AdvancedHarmTargetingPod::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?SimLibElapsedTime@@3KA:DWORD			; SimLibElapsedTime
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?flash@HarmTargetingPod@@1HA:DWORD		; HarmTargetingPod::flash
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf0f5c29
CONST	SEGMENT
__real@bf0f5c29 DD 0bf0f5c29r			; -0.56
CONST	ENDS
;	COMDAT __real@bf0ccccd
CONST	SEGMENT
__real@bf0ccccd DD 0bf0ccccdr			; -0.55
CONST	ENDS
;	COMDAT __real@bf0a3d71
CONST	SEGMENT
__real@bf0a3d71 DD 0bf0a3d71r			; -0.54
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@be800000
CONST	SEGMENT
__real@be800000 DD 0be800000r			; -0.25
CONST	ENDS
;	COMDAT __real@47a8c000
CONST	SEGMENT
__real@47a8c000 DD 047a8c000r			; 86400
CONST	ENDS
;	COMDAT __real@45610000
CONST	SEGMENT
__real@45610000 DD 045610000r			; 3600
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3fb33333
CONST	SEGMENT
__real@3fb33333 DD 03fb33333r			; 1.4
CONST	ENDS
;	COMDAT __real@3faccccd
CONST	SEGMENT
__real@3faccccd DD 03faccccdr			; 1.35
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f133333
CONST	SEGMENT
__real@3f133333 DD 03f133333r			; 0.575
CONST	ENDS
;	COMDAT __real@3f0ccccd
CONST	SEGMENT
__real@3f0ccccd DD 03f0ccccdr			; 0.55
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3efae148
CONST	SEGMENT
__real@3efae148 DD 03efae148r			; 0.49
CONST	ENDS
;	COMDAT __real@3ef5c28f
CONST	SEGMENT
__real@3ef5c28f DD 03ef5c28fr			; 0.48
CONST	ENDS
;	COMDAT __real@3ec28f5c
CONST	SEGMENT
__real@3ec28f5c DD 03ec28f5cr			; 0.38
CONST	ENDS
;	COMDAT __real@3ebd70a4
CONST	SEGMENT
__real@3ebd70a4 DD 03ebd70a4r			; 0.37
CONST	ENDS
;	COMDAT __real@3e8f5c29
CONST	SEGMENT
__real@3e8f5c29 DD 03e8f5c29r			; 0.28
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3d23d70a
CONST	SEGMENT
__real@3d23d70a DD 03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@392c987a
CONST	SEGMENT
__real@392c987a DD 0392c987ar			; 0.0001646
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R2RwrClass@@8
rdata$r	SEGMENT
??_R2RwrClass@@8 DD FLAT:??_R1A@?0A@EA@RwrClass@@8	; RwrClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SensorClass@@8
	DD	FLAT:??_R1A@?0A@EA@MfdDrawable@@8
	DD	FLAT:??_R1A@?0A@EA@DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3RwrClass@@8
rdata$r	SEGMENT
??_R3RwrClass@@8 DD 00H					; RwrClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2RwrClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRwrClass@@@8
_DATA	SEGMENT
??_R0?AVRwrClass@@@8 DD FLAT:??_7type_info@@6B@		; RwrClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRwrClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@RwrClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RwrClass@@8 DD FLAT:??_R0?AVRwrClass@@@8	; RwrClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RwrClass@@8
rdata$r	ENDS
;	COMDAT ??_R2HarmTargetingPod@@8
rdata$r	SEGMENT
??_R2HarmTargetingPod@@8 DD FLAT:??_R1A@?0A@EA@HarmTargetingPod@@8 ; HarmTargetingPod::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@RwrClass@@8
	DD	FLAT:??_R1A@?0A@EA@SensorClass@@8
	DD	FLAT:??_R1A@?0A@EA@MfdDrawable@@8
	DD	FLAT:??_R1A@?0A@EA@DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3HarmTargetingPod@@8
rdata$r	SEGMENT
??_R3HarmTargetingPod@@8 DD 00H				; HarmTargetingPod::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2HarmTargetingPod@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVHarmTargetingPod@@@8
_DATA	SEGMENT
??_R0?AVHarmTargetingPod@@@8 DD FLAT:??_7type_info@@6B@	; HarmTargetingPod `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVHarmTargetingPod@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@HarmTargetingPod@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@HarmTargetingPod@@8 DD FLAT:??_R0?AVHarmTargetingPod@@@8 ; HarmTargetingPod::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3HarmTargetingPod@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AdvancedHarmTargetingPod@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AdvancedHarmTargetingPod@@8 DD FLAT:??_R0?AVAdvancedHarmTargetingPod@@@8 ; AdvancedHarmTargetingPod::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AdvancedHarmTargetingPod@@8
rdata$r	ENDS
;	COMDAT ??_R2AdvancedHarmTargetingPod@@8
rdata$r	SEGMENT
??_R2AdvancedHarmTargetingPod@@8 DD FLAT:??_R1A@?0A@EA@AdvancedHarmTargetingPod@@8 ; AdvancedHarmTargetingPod::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@HarmTargetingPod@@8
	DD	FLAT:??_R1A@?0A@EA@RwrClass@@8
	DD	FLAT:??_R1A@?0A@EA@SensorClass@@8
	DD	FLAT:??_R1A@?0A@EA@MfdDrawable@@8
	DD	FLAT:??_R1A@?0A@EA@DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3AdvancedHarmTargetingPod@@8
rdata$r	SEGMENT
??_R3AdvancedHarmTargetingPod@@8 DD 00H			; AdvancedHarmTargetingPod::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	06H
	DD	FLAT:??_R2AdvancedHarmTargetingPod@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAdvancedHarmTargetingPod@@@8
_DATA	SEGMENT
??_R0?AVAdvancedHarmTargetingPod@@@8 DD FLAT:??_7type_info@@6B@ ; AdvancedHarmTargetingPod `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAdvancedHarmTargetingPod@@', 00H
_DATA	ENDS
;	COMDAT ??_R4AdvancedHarmTargetingPod@@6B@
rdata$r	SEGMENT
??_R4AdvancedHarmTargetingPod@@6B@ DD 00H		; AdvancedHarmTargetingPod::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVAdvancedHarmTargetingPod@@@8
	DD	FLAT:??_R3AdvancedHarmTargetingPod@@8
rdata$r	ENDS
;	COMDAT ??_R2SensorClass@@8
rdata$r	SEGMENT
??_R2SensorClass@@8 DD FLAT:??_R1A@?0A@EA@SensorClass@@8 ; SensorClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@MfdDrawable@@8
	DD	FLAT:??_R1A@?0A@EA@DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3SensorClass@@8
rdata$r	SEGMENT
??_R3SensorClass@@8 DD 00H				; SensorClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2SensorClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSensorClass@@@8
_DATA	SEGMENT
??_R0?AVSensorClass@@@8 DD FLAT:??_7type_info@@6B@	; SensorClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSensorClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@SensorClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SensorClass@@8 DD FLAT:??_R0?AVSensorClass@@@8 ; SensorClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SensorClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@MfdDrawable@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MfdDrawable@@8 DD FLAT:??_R0?AVMfdDrawable@@@8 ; MfdDrawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MfdDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R2MfdDrawable@@8
rdata$r	SEGMENT
??_R2MfdDrawable@@8 DD FLAT:??_R1A@?0A@EA@MfdDrawable@@8 ; MfdDrawable::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3MfdDrawable@@8
rdata$r	SEGMENT
??_R3MfdDrawable@@8 DD 00H				; MfdDrawable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2MfdDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMfdDrawable@@@8
_DATA	SEGMENT
??_R0?AVMfdDrawable@@@8 DD FLAT:??_7type_info@@6B@	; MfdDrawable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMfdDrawable@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@DrawableClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DrawableClass@@8 DD FLAT:??_R0?AVDrawableClass@@@8 ; DrawableClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R2DrawableClass@@8
rdata$r	SEGMENT
??_R2DrawableClass@@8 DD FLAT:??_R1A@?0A@EA@DrawableClass@@8 ; DrawableClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DrawableClass@@8
rdata$r	SEGMENT
??_R3DrawableClass@@8 DD 00H				; DrawableClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDrawableClass@@@8
_DATA	SEGMENT
??_R0?AVDrawableClass@@@8 DD FLAT:??_7type_info@@6B@	; DrawableClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDrawableClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PKIKNCIH@?$CFd?3?$CF02d?3?$CF02d?$AA@
CONST	SEGMENT
??_C@_0N@PKIKNCIH@?$CFd?3?$CF02d?3?$CF02d?$AA@ DB '%d:%02d:%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07COCHMHBB@?$CFd?3?$CF02d?$AA@
CONST	SEGMENT
??_C@_07COCHMHBB@?$CFd?3?$CF02d?$AA@ DB '%d:%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OGKJMPGK@?$CF02d?$AA@
CONST	SEGMENT
??_C@_04OGKJMPGK@?$CF02d?$AA@ DB '%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ?TAIL_WING@?CC@??HADExpDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
CONST	SEGMENT
?TAIL_WING@?CC@??HADExpDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB DD 03ca3d70ar ; 0.02 ; `AdvancedHarmTargetingPod::HADExpDisplay'::`34'::TAIL_WING
CONST	ENDS
;	COMDAT ?WING@?CC@??HADExpDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
CONST	SEGMENT
?WING@?CC@??HADExpDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB DD 03d75c28fr ; 0.06 ; `AdvancedHarmTargetingPod::HADExpDisplay'::`34'::WING
CONST	ENDS
;	COMDAT ?TAIL@?CC@??HADExpDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
CONST	SEGMENT
?TAIL@?CC@??HADExpDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB DD 03da3d70ar ; 0.08 ; `AdvancedHarmTargetingPod::HADExpDisplay'::`34'::TAIL
CONST	ENDS
;	COMDAT ?NOSE@?CC@??HADExpDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
CONST	SEGMENT
?NOSE@?CC@??HADExpDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB DD 03ca3d70ar ; 0.02 ; `AdvancedHarmTargetingPod::HADExpDisplay'::`34'::NOSE
CONST	ENDS
;	COMDAT ??_7AdvancedHarmTargetingPod@@6B@
CONST	SEGMENT
??_7AdvancedHarmTargetingPod@@6B@ DD FLAT:??_R4AdvancedHarmTargetingPod@@6B@ ; AdvancedHarmTargetingPod::`vftable'
	DD	FLAT:??_EAdvancedHarmTargetingPod@@UAEPAXI@Z
	DD	FLAT:?Display@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z
	DD	FLAT:?DisplayInit@RwrClass@@UAEXPAVImageBuffer@@@Z
	DD	FLAT:?DisplayExit@DrawableClass@@UAEXXZ
	DD	FLAT:?GetDisplay@SensorClass@@UAEPAVVirtualDisplay@@XZ
	DD	FLAT:?PushButton@MfdDrawable@@UAEXHH@Z
	DD	FLAT:?SetType@SensorClass@@UAEXW4SensorType@1@@Z
	DD	FLAT:?SetPower@SensorClass@@UAEXH@Z
	DD	FLAT:?IsOn@SensorClass@@UAEHXZ
	DD	FLAT:?SetDesiredTarget@HarmTargetingPod@@UAEXPAVSimObjectType@@@Z
	DD	FLAT:?ClearSensorTarget@SensorClass@@UAEXXZ
	DD	FLAT:?Exec@HarmTargetingPod@@UAEPAVSimObjectType@@PAV2@@Z
	DD	FLAT:?ExecModes@SensorClass@@UAEXHH@Z
	DD	FLAT:?UpdateState@SensorClass@@UAEXHH@Z
	DD	FLAT:?SetSeekerPos@SensorClass@@UAEXMM@Z
	DD	FLAT:?TargetUnderCursor@SensorClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?SetSensorTarget@SensorClass@@MAEXPAVSimObjectType@@@Z
	DD	FLAT:?SetSensorTargetHack@SensorClass@@MAEXPAVFalconEntity@@@Z
	DD	FLAT:?CheckLockedTarget@SensorClass@@MAEXXZ
	DD	FLAT:?ObjectDetected@HarmTargetingPod@@UAEHPAVFalconEntity@@HH@Z
	DD	FLAT:?GetAGCenter@HarmTargetingPod@@UAEXPAM0@Z
	DD	FLAT:?HADDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z
	DD	FLAT:?HADExpDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z
	DD	FLAT:?HASDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z
	DD	FLAT:?POSDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z
	DD	FLAT:?HandoffDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$??0AdvancedHarmTargetingPod@@QAE@HPAVSimMoverClass@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AdvancedHarmTargetingPod@@QAE@HPAVSimMoverClass@@@Z$0
__ehfuncinfo$??0AdvancedHarmTargetingPod@@QAE@HPAVSimMoverClass@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0AdvancedHarmTargetingPod@@QAE@HPAVSimMoverClass@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GAdvancedHarmTargetingPod@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GAdvancedHarmTargetingPod@@UAEPAXI@Z PROC		; AdvancedHarmTargetingPod::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AdvancedHarmTargetingPod@@UAE@XZ	; AdvancedHarmTargetingPod::~AdvancedHarmTargetingPod
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GAdvancedHarmTargetingPod@@UAEPAXI@Z ENDP		; AdvancedHarmTargetingPod::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\advancedhts.cpp
_TEXT	SEGMENT
tv64 = -8						; size = 4
_this$ = -4						; size = 4
_OsbIndex$ = 8						; size = 4
_OsbPosX$ = 12						; size = 4
_OsbPosY$ = 16						; size = 4
?GetOsbPos@AdvancedHarmTargetingPod@@AAEXAAHAAM1@Z PROC	; AdvancedHarmTargetingPod::GetOsbPos
; _this$ = ecx

; 852  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 853  : 	switch ( OsbIndex )

	mov	eax, DWORD PTR _OsbIndex$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN4@GetOsbPos
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN3@GetOsbPos
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN2@GetOsbPos
	jmp	SHORT $LN1@GetOsbPos
$LN4@GetOsbPos:

; 854  : 	{
; 855  : 	case 0:
; 856  : 		GetButtonPos(16, &OsbPosX, &OsbPosY);

	mov	edx, DWORD PTR _OsbPosY$[ebp]
	push	edx
	mov	eax, DWORD PTR _OsbPosX$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetButtonPos@DrawableClass@@QAEXHPAM0@Z ; DrawableClass::GetButtonPos

; 857  : 		break;

	jmp	SHORT $LN7@GetOsbPos
$LN3@GetOsbPos:

; 858  : 
; 859  : 	case 1:
; 860  : 		GetButtonPos(17, &OsbPosX, &OsbPosY);

	mov	ecx, DWORD PTR _OsbPosY$[ebp]
	push	ecx
	mov	edx, DWORD PTR _OsbPosX$[ebp]
	push	edx
	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetButtonPos@DrawableClass@@QAEXHPAM0@Z ; DrawableClass::GetButtonPos

; 861  : 		break;

	jmp	SHORT $LN7@GetOsbPos
$LN2@GetOsbPos:

; 862  : 
; 863  : 	case 2:
; 864  : 		GetButtonPos(18, &OsbPosX, &OsbPosY);

	mov	eax, DWORD PTR _OsbPosY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _OsbPosX$[ebp]
	push	ecx
	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetButtonPos@DrawableClass@@QAEXHPAM0@Z ; DrawableClass::GetButtonPos

; 865  : 		break;

	jmp	SHORT $LN7@GetOsbPos
$LN1@GetOsbPos:

; 866  : 
; 867  : 	case 3:
; 868  : 	default:
; 869  : 		GetButtonPos(19, &OsbPosX, &OsbPosY);

	mov	edx, DWORD PTR _OsbPosY$[ebp]
	push	edx
	mov	eax, DWORD PTR _OsbPosX$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetButtonPos@DrawableClass@@QAEXHPAM0@Z ; DrawableClass::GetButtonPos
$LN7@GetOsbPos:

; 870  : 		break;
; 871  : 	}
; 872  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetOsbPos@AdvancedHarmTargetingPod@@AAEXAAHAAM1@Z ENDP	; AdvancedHarmTargetingPod::GetOsbPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\advancedhts.cpp
_TEXT	SEGMENT
_tmpColor$ = -24					; size = 4
tv130 = -20						; size = 4
tv69 = -16						; size = 4
_boxed$ = -12						; size = 4
_color$ = -8						; size = 4
_this$ = -4						; size = 4
_tmpElement$ = 8					; size = 4
_displayX$ = 12						; size = 4
_displayY$ = 16						; size = 4
_origDisplayY$ = 20					; size = 4
?DrawEmitter@AdvancedHarmTargetingPod@@AAEXPAVGroundListElement@@AAM11@Z PROC ; AdvancedHarmTargetingPod::DrawEmitter
; _this$ = ecx

; 803  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 804  : 	DWORD color;
; 805  : 	int	  boxed;
; 806  : 
; 807  : 	switch ( submode )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+168]
	mov	DWORD PTR tv69[ebp], ecx
	cmp	DWORD PTR tv69[ebp], 1
	je	SHORT $LN11@DrawEmitte
	cmp	DWORD PTR tv69[ebp], 2
	je	SHORT $LN10@DrawEmitte
	jmp	SHORT $LN9@DrawEmitte
$LN11@DrawEmitte:

; 808  : 	{
; 809  : 	case HAS:
; 810  : 		color = GetMfdColor(MFD_WHITY_GRAY);

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	mov	DWORD PTR _color$[ebp], eax

; 811  : 		boxed = 0;

	mov	DWORD PTR _boxed$[ebp], 0

; 812  : 		break;

	jmp	$LN12@DrawEmitte
$LN10@DrawEmitte:

; 813  : 
; 814  : 	case Handoff:
; 815  : 		color = GetMfdColor(MFD_WHITY_GRAY);

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	mov	DWORD PTR _color$[ebp], eax

; 816  : 		boxed = 2;

	mov	DWORD PTR _boxed$[ebp], 2

; 817  : 		break;

	jmp	$LN12@DrawEmitte
$LN9@DrawEmitte:

; 818  : 
; 819  : 	case HAD:
; 820  : 	default:
; 821  :         // Set the symbols draw intensity based on its state
; 822  : 		if ( origDisplayY - HTS_Y_OFFSET < 0 ) {

	mov	edx, DWORD PTR _origDisplayY$[ebp]
	movss	xmm0, DWORD PTR [edx]
	subss	xmm0, DWORD PTR __real@bf000000
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN8@DrawEmitte

; 823  : 			color = 0x00008000; 

	mov	DWORD PTR _color$[ebp], 32768		; 00008000H

; 824  : 			boxed = 0;

	mov	DWORD PTR _boxed$[ebp], 0
	jmp	$LN1@DrawEmitte
$LN8@DrawEmitte:

; 825  : 		} else if ( tmpElement->IsSet(GroundListElement::Launch) ) {

	push	16					; 00000010H
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?IsSet@GroundListElement@@QAEHH@Z	; GroundListElement::IsSet
	test	eax, eax
	je	SHORT $LN6@DrawEmitte

; 826  : 			color = GetMfdColor( MFD_RED ); 

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	mov	DWORD PTR _color$[ebp], eax

; 827  : 			boxed = flash ? 2 : 0;

	cmp	DWORD PTR ?flash@HarmTargetingPod@@1HA, 0 ; HarmTargetingPod::flash
	je	SHORT $LN16@DrawEmitte
	mov	DWORD PTR tv130[ebp], 2
	jmp	SHORT $LN17@DrawEmitte
$LN16@DrawEmitte:
	mov	DWORD PTR tv130[ebp], 0
$LN17@DrawEmitte:
	mov	eax, DWORD PTR tv130[ebp]
	mov	DWORD PTR _boxed$[ebp], eax
	jmp	SHORT $LN1@DrawEmitte
$LN6@DrawEmitte:

; 828  : 		} else if ( tmpElement->IsSet(GroundListElement::Track) ) {

	push	8
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?IsSet@GroundListElement@@QAEHH@Z	; GroundListElement::IsSet
	test	eax, eax
	je	SHORT $LN4@DrawEmitte

; 829  : 			color = GetMfdColor(MFD_RED); 

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	mov	DWORD PTR _color$[ebp], eax

; 830  : 			boxed = 2;

	mov	DWORD PTR _boxed$[ebp], 2
	jmp	SHORT $LN1@DrawEmitte
$LN4@DrawEmitte:

; 831  : 		} else if ( tmpElement->IsSet(GroundListElement::Radiate) ) {

	push	4
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?IsSet@GroundListElement@@QAEHH@Z	; GroundListElement::IsSet
	test	eax, eax
	je	SHORT $LN2@DrawEmitte

; 832  : 			color = GetMfdColor(MFD_YELLOW); 

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	mov	DWORD PTR _color$[ebp], eax

; 833  : 			boxed = 0;

	mov	DWORD PTR _boxed$[ebp], 0

; 834  : 		} else {

	jmp	SHORT $LN1@DrawEmitte
$LN2@DrawEmitte:

; 835  : 			color = 0x00008000;

	mov	DWORD PTR _color$[ebp], 32768		; 00008000H

; 836  : 			boxed = 0;

	mov	DWORD PTR _boxed$[ebp], 0
$LN1@DrawEmitte:
$LN12@DrawEmitte:

; 837  : 		}
; 838  : 
; 839  : 		break;
; 840  : 	}
; 841  : 
; 842  : 	// Adjust our display location and draw the emitter symbol
; 843  : 	DWORD tmpColor = display->Color();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+108]
	call	eax
	mov	DWORD PTR _tmpColor$[ebp], eax

; 844  : 	display->AdjustOriginInViewport (displayX, displayY);

	mov	ecx, DWORD PTR _displayY$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _displayX$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 845  : 	display->SetColor( color );

	mov	ecx, DWORD PTR _color$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 846  : 	DrawEmitterSymbol( tmpElement->symbol, boxed );

	mov	ecx, DWORD PTR _boxed$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tmpElement$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawEmitterSymbol@RwrClass@@IAEXHH@Z	; RwrClass::DrawEmitterSymbol

; 847  : 	display->SetColor( tmpColor );

	mov	ecx, DWORD PTR _tmpColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 848  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?DrawEmitter@AdvancedHarmTargetingPod@@AAEXPAVGroundListElement@@AAM11@Z ENDP ; AdvancedHarmTargetingPod::DrawEmitter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\advancedhts.cpp
_TEXT	SEGMENT
_trig$ = -136						; size = 8
tv829 = -128						; size = 4
_NormDisplayY$ = -124					; size = 4
tv831 = -120						; size = 4
_ey$ = -116						; size = 4
_y2$ = -112						; size = 4
_ex$ = -108						; size = 4
tv670 = -104						; size = 4
tv711 = -100						; size = 4
tv653 = -96						; size = 4
tv704 = -92						; size = 4
_x2$ = -88						; size = 4
_NormDisplayYNoOffset$ = -84				; size = 4
tv675 = -80						; size = 4
_NormDisplayX$ = -76					; size = 4
tv648 = -72						; size = 4
_alpha$ = -68						; size = 4
tv659 = -64						; size = 4
_range$ = -60						; size = 4
tv827 = -56						; size = 4
_alt$1 = -52						; size = 4
tv664 = -48						; size = 4
_FCC$ = -44						; size = 4
_elevation$ = -40					; size = 4
_phi$ = -36						; size = 4
_sinAng$ = -32						; size = 4
_cosAng$ = -28						; size = 4
_x$ = -24						; size = 4
_y$ = -20						; size = 4
_displayX$ = -16					; size = 4
_displayY$ = -12					; size = 4
_tmpElement$ = -8					; size = 4
_this$ = -4						; size = 4
_activeDisplay$ = 8					; size = 4
?HandoffDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z PROC ; AdvancedHarmTargetingPod::HandoffDisplay
; _this$ = ecx

; 454  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 455  : 	float			displayX, displayY, NormDisplayX, NormDisplayY, NormDisplayYNoOffset;
; 456  : 	float			x, y, x2, y2;
; 457  : 	float			cosAng, sinAng;
; 458  : 	float			range, alpha, ex, ey, phi, elevation;
; 459  : 	mlTrig			trig;
; 460  : 	FireControlComputer* FCC = ((SimVehicleClass*)platform)->GetFCC();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax+460]
	call	edx
	mov	DWORD PTR _FCC$[ebp], eax

; 461  : 	GroundListElement* tmpElement = NULL;

	mov	DWORD PTR _tmpElement$[ebp], 0

; 462  : 	
; 463  : 	// Let the base class do the basics
; 464  : 	HarmTargetingPod::HandoffDisplay( activeDisplay );

	mov	eax, DWORD PTR _activeDisplay$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z ; HarmTargetingPod::HandoffDisplay

; 465  : 
; 466  : 	display = activeDisplay; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _activeDisplay$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 467  : 
; 468  : 	// Set up the trig functions of our current heading
; 469  : 	mlSinCos (&trig, platform->Yaw());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 470  : 	cosAng = trig.cos;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _cosAng$[ebp], xmm0

; 471  : 	sinAng = trig.sin;

	movss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _sinAng$[ebp], xmm0

; 472  : 	
; 473  : 	// Draw only the locked target
; 474  : 	ClearDTSB(); // clear DTSB first

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearDTSB@HarmTargetingPod@@IAEXXZ	; HarmTargetingPod::ClearDTSB

; 475  : 
; 476  : 	if ( preHandoffMode == Has )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+224], 0
	jne	$LN12@HandoffDis

; 477  : 	{
; 478  : 		for (tmpElement = FCC->GetFirstGroundElement(); tmpElement; tmpElement = tmpElement->GetNext())

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetFirstGroundElement@FireControlComputer@@QAEPAVGroundListElement@@XZ ; FireControlComputer::GetFirstGroundElement
	mov	DWORD PTR _tmpElement$[ebp], eax
	jmp	SHORT $LN14@HandoffDis
$LN13@HandoffDis:
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?GetNext@GroundListElement@@QAEPAV1@XZ	; GroundListElement::GetNext
	mov	DWORD PTR _tmpElement$[ebp], eax
$LN14@HandoffDis:
	cmp	DWORD PTR _tmpElement$[ebp], 0
	je	$LN12@HandoffDis

; 479  : 		{
; 480  : 			if ( !lockedTarget || !lockedTarget->BaseData() || preHandoffMode == Pos )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN10@HandoffDis
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	test	eax, eax
	je	SHORT $LN10@HandoffDis
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+224], 1
	jne	SHORT $LN11@HandoffDis
$LN10@HandoffDis:

; 481  : 			{
; 482  : 				break;

	jmp	$LN12@HandoffDis
$LN11@HandoffDis:

; 483  : 			}
; 484  : 
; 485  : 			if (tmpElement->BaseObject() == NULL) { continue; }

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	test	eax, eax
	jne	SHORT $LN9@HandoffDis
	jmp	SHORT $LN13@HandoffDis
$LN9@HandoffDis:

; 486  : 
; 487  :             // Compute the world space oriented, display space scaled, ownship relative postion of the emitter
; 488  : 			y = (tmpElement->BaseObject()->XPos() - platform->XPos()) * FT_TO_NM / displayRange * HAS_DISPLAY_RADIUS;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv648[ebp]
	movss	xmm0, DWORD PTR tv648[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv827[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv653[ebp]
	movss	xmm0, DWORD PTR tv827[ebp]
	subss	xmm0, DWORD PTR tv653[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx+116]
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR _y$[ebp], xmm0

; 489  : 			x = (tmpElement->BaseObject()->YPos() - platform->YPos()) * FT_TO_NM / displayRange * HAS_DISPLAY_RADIUS;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv659[ebp]
	movss	xmm0, DWORD PTR tv659[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv829[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv664[ebp]
	movss	xmm0, DWORD PTR tv829[ebp]
	subss	xmm0, DWORD PTR tv664[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [eax+116]
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR _x$[ebp], xmm0

; 490  : 			float alt = (-platform->ZPos() - (-tmpElement->BaseObject()->ZPos())) * FT_TO_NM / displayRange * HAS_DISPLAY_RADIUS; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv670[ebp]
	movss	xmm0, DWORD PTR tv670[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	movss	DWORD PTR tv831[ebp], xmm0
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv675[ebp]
	movss	xmm0, DWORD PTR tv675[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR tv831[ebp]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@392c987a
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+116]
	divss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@3f400000
	movss	DWORD PTR _alt$1[ebp], xmm1

; 491  : 
; 492  : 			// Displaying azimuth/elevation like HAS mode
; 493  : 			x2 = x * x;

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR _x2$[ebp], xmm0

; 494  : 			y2 = y * y;

	movss	xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR _y2$[ebp], xmm0

; 495  : 			range = sqrt( x2 + y2 );

	movss	xmm0, DWORD PTR _x2$[ebp]
	addss	xmm0, DWORD PTR _y2$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _range$[ebp]

; 496  : 			alpha = atan ( alt / range );

	movss	xmm0, DWORD PTR _alt$1[ebp]
	divss	xmm0, DWORD PTR _range$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	fstp	DWORD PTR _alpha$[ebp]

; 497  : 			elevation = (1.0f - (alpha / HALF_PI)) * HAS_DISPLAY_RADIUS;

	movss	xmm0, DWORD PTR _alpha$[ebp]
	divss	xmm0, DWORD PTR __real@3fc90fdb
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@3f400000
	movss	DWORD PTR _elevation$[ebp], xmm1

; 498  : 
; 499  : 			NormDisplayX = cosAng * x - sinAng * y; 

	movss	xmm0, DWORD PTR _cosAng$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _sinAng$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _NormDisplayX$[ebp], xmm0

; 500  : 			NormDisplayYNoOffset = sinAng * x + cosAng * y;

	movss	xmm0, DWORD PTR _sinAng$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _cosAng$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _NormDisplayYNoOffset$[ebp], xmm0

; 501  : 			NormDisplayY = sinAng * x + cosAng * y + HTS_Y_OFFSET;

	movss	xmm0, DWORD PTR _sinAng$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _cosAng$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR _NormDisplayY$[ebp], xmm0

; 502  : 
; 503  : 			phi = atan ( NormDisplayX / NormDisplayYNoOffset );

	movss	xmm0, DWORD PTR _NormDisplayX$[ebp]
	divss	xmm0, DWORD PTR _NormDisplayYNoOffset$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	fstp	DWORD PTR _phi$[ebp]

; 504  : 			ex = elevation * sin(phi);

	push	ecx
	movss	xmm0, DWORD PTR _phi$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv704[ebp]
	movss	xmm0, DWORD PTR tv704[ebp]
	mulss	xmm0, DWORD PTR _elevation$[ebp]
	movss	DWORD PTR _ex$[ebp], xmm0

; 505  : 			ey = elevation * cos(phi);

	push	ecx
	movss	xmm0, DWORD PTR _phi$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv711[ebp]
	movss	xmm0, DWORD PTR tv711[ebp]
	mulss	xmm0, DWORD PTR _elevation$[ebp]
	movss	DWORD PTR _ey$[ebp], xmm0

; 506  : 			displayX = ex;

	movss	xmm0, DWORD PTR _ex$[ebp]
	movss	DWORD PTR _displayX$[ebp], xmm0

; 507  : 			displayY = ey + HTS_Y_OFFSET;

	movss	xmm0, DWORD PTR _ey$[ebp]
	addss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR _displayY$[ebp], xmm0

; 508  : 
; 509  : 			// Skip this one if its off screen
; 510  : 			//if ((fabs(displayX) > 1.0f) || (fabs(displayY) > 1.0f))
; 511  : 
; 512  : 			// RV - I-Hawk - Diplay only what's inside the ALIC video
; 513  : 			if ( !IsInsideALIC(displayX, displayY) ) { continue; }

	lea	eax, DWORD PTR _displayY$[ebp]
	push	eax
	lea	ecx, DWORD PTR _displayX$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsInsideALIC@HarmTargetingPod@@IAE_NAAM0@Z ; HarmTargetingPod::IsInsideALIC
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN8@HandoffDis
	jmp	$LN13@HandoffDis
$LN8@HandoffDis:

; 514  : 
; 515  : 			// although not drawing none-target emitters on main display, still keep DTSB updated
; 516  : 			display->AdjustOriginInViewport (displayX, displayY);

	push	ecx
	movss	xmm0, DWORD PTR _displayY$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _displayX$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 517  : 			UpdateDTSB ( tmpElement->symbol, displayX, displayY); 

	lea	ecx, DWORD PTR _displayY$[ebp]
	push	ecx
	lea	edx, DWORD PTR _displayX$[ebp]
	push	edx
	mov	eax, DWORD PTR _tmpElement$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateDTSB@HarmTargetingPod@@IAEXHAAM0@Z ; HarmTargetingPod::UpdateDTSB

; 518  : 			display->AdjustOriginInViewport (-displayX, -displayY);

	movss	xmm0, DWORD PTR _displayY$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _displayX$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 519  : 
; 520  : 			// Only show the locked up target (after we finished updating DTSB list)
; 521  : 			if ( tmpElement->BaseObject() != lockedTarget->BaseData() )	{ continue;	}

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	esi, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	esi, eax
	je	SHORT $LN7@HandoffDis
	jmp	$LN13@HandoffDis
$LN7@HandoffDis:

; 522  : 
; 523  : 			// JB 010726 Clear the designated target if behind the 3/9 line.
; 524  : 			if (NormDisplayY - HTS_Y_OFFSET < 0.0f)

	movss	xmm0, DWORD PTR _NormDisplayY$[ebp]
	subss	xmm0, DWORD PTR __real@bf000000
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN5@HandoffDis

; 525  : 			{
; 526  : 				if (lockedTarget && tmpElement->BaseObject() == lockedTarget->BaseData())

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN5@HandoffDis
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	esi, eax
	jne	SHORT $LN5@HandoffDis

; 527  : 				{
; 528  : 					FCC->dropTrackCmd = TRUE;

	mov	eax, DWORD PTR _FCC$[ebp]
	mov	BYTE PTR [eax+185], 1
$LN5@HandoffDis:

; 529  : 				}
; 530  : 			}
; 531  : 
; 532  : 			DrawEmitter ( tmpElement, displayX, displayY, displayY );

	lea	ecx, DWORD PTR _displayY$[ebp]
	push	ecx
	lea	edx, DWORD PTR _displayY$[ebp]
	push	edx
	lea	eax, DWORD PTR _displayX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawEmitter@AdvancedHarmTargetingPod@@AAEXPAVGroundListElement@@AAM11@Z ; AdvancedHarmTargetingPod::DrawEmitter

; 533  : 			BoxTargetDTSB ( tmpElement->symbol, displayX, displayY );

	lea	edx, DWORD PTR _displayY$[ebp]
	push	edx
	lea	eax, DWORD PTR _displayX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BoxTargetDTSB@HarmTargetingPod@@IAEXHAAM0@Z ; HarmTargetingPod::BoxTargetDTSB

; 534  : 			
; 535  : 			// Mark the locked target
; 536  : 			if (displayY - HTS_Y_OFFSET > 0 && lockedTarget && tmpElement->BaseObject() == lockedTarget->BaseData())

	movss	xmm0, DWORD PTR _displayY$[ebp]
	subss	xmm0, DWORD PTR __real@bf000000
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN4@HandoffDis
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	$LN4@HandoffDis
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	esi, eax
	jne	$LN4@HandoffDis

; 537  : 			{
; 538  : 				display->SetColor( GetMfdColor(MFD_WHITE) );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 539  : 				display->Line (-CURSOR_SIZE, -CURSOR_SIZE, -CURSOR_SIZE, CURSOR_SIZE);

	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 540  : 				display->Line ( CURSOR_SIZE, -CURSOR_SIZE,  CURSOR_SIZE, CURSOR_SIZE);

	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 541  : 				display->Line ( -CURSOR_SIZE, CURSOR_SIZE,  CURSOR_SIZE, CURSOR_SIZE);

	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 542  : 				display->Line ( -CURSOR_SIZE, -CURSOR_SIZE,  CURSOR_SIZE, -CURSOR_SIZE);

	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN4@HandoffDis:

; 543  : 			}
; 544  : 
; 545  : 			display->AdjustOriginInViewport (-displayX, -displayY);

	movss	xmm0, DWORD PTR _displayY$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _displayX$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 546  : 		}

	jmp	$LN13@HandoffDis
$LN12@HandoffDis:

; 547  : 	}
; 548  : 
; 549  : 	if ( !lockedTarget ) // Back to HAS mode

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 0
	jne	SHORT $LN3@HandoffDis

; 550  : 	{
; 551  : 		SetSubMode( HAS );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSubMode@HarmTargetingPod@@QAEXW4Submode@1@@Z ; HarmTargetingPod::SetSubMode

; 552  : 		((SimVehicleClass*)platform)->SOIManager(SimVehicleClass::SOI_WEAPON);

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?SOIManager@SimVehicleClass@@QAEXW4SOI@1@@Z ; SimVehicleClass::SOIManager

; 553  : 		handedoff = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+112], 0
$LN3@HandoffDis:

; 554  : 	}
; 555  : 
; 556  : 	// Check if 3 seconds past since the lock for handoff "delay"
; 557  : 	if ( handedoff == false )

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+112]
	test	eax, eax
	jne	SHORT $LN1@HandoffDis

; 558  : 	{
; 559  : 		if ( SimLibElapsedTime - handoffRefTime > 3 * SEC_TO_MSEC )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	edx, DWORD PTR [ecx+160]
	cmp	edx, 3000				; 00000bb8H
	jbe	SHORT $LN1@HandoffDis

; 560  : 		{
; 561  : 			handedoff = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+112], 1
$LN1@HandoffDis:

; 562  : 		}
; 563  : 	}
; 564  : 
; 565  : 	display->SetColor( 0xFF00FF00 );

	push	-16711936				; ff00ff00H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 566  : 
; 567  : 	// Adjust our viewport origin
; 568  : 	display->AdjustOriginInViewport (0.0f, HTS_Y_OFFSET);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 569  : 	
; 570  : 	// Reset our display parameters
; 571  : 	display->ZeroRotationAboutOrigin();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ ; VirtualDisplay::ZeroRotationAboutOrigin

; 572  : 	display->CenterOriginInViewport ();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 573  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?HandoffDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z ENDP ; AdvancedHarmTargetingPod::HandoffDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\advancedhts.cpp
_TEXT	SEGMENT
_wpZ$ = -196						; size = 4
tv1106 = -192						; size = 8
_FCC$ = -184						; size = 4
tv1056 = -180						; size = 4
_theWPnum$ = -176					; size = 4
tv1040 = -172						; size = 4
tv1292 = -168						; size = 4
tv1034 = -164						; size = 4
_days$ = -160						; size = 4
_wpY$ = -156						; size = 4
tv1296 = -152						; size = 4
_tempWP$ = -148						; size = 4
tv1131 = -144						; size = 4
tv1294 = -140						; size = 4
tv1298 = -136						; size = 4
tv1026 = -132						; size = 4
tv1125 = -128						; size = 4
tv1020 = -124						; size = 4
_wpX$ = -120						; size = 4
_theRange$ = -116					; size = 4
tv1103 = -112						; size = 4
_hours$ = -108						; size = 4
tv280 = -104						; size = 4
_zero$1 = -100						; size = 4
_OsbPosY$ = -96						; size = 4
_OsbPosX$ = -92						; size = 4
_OsbIndex$ = -88					; size = 4
_tempColor$ = -84					; size = 4
_Sms$ = -80						; size = 4
_dy$ = -76						; size = 4
_dx$ = -72						; size = 4
_tmpElement$ = -68					; size = 4
_boxed$ = -64						; size = 4
_seconds$ = -60						; size = 4
_minutes$ = -56						; size = 4
_LDLVerticalPos$ = -52					; size = 4
_temp$ = -48						; size = 4
_i$2 = -44						; size = 4
_ETA$ = -40						; size = 4
_playerAC$ = -36					; size = 4
_this$ = -32						; size = 4
_str$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_activeDisplay$ = 8					; size = 4
?POSDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z PROC ; AdvancedHarmTargetingPod::POSDisplay
; _this$ = ecx

; 577  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 578  : 	int OsbIndex;
; 579  : 	int boxed;
; 580  : 	int days, hours, minutes, seconds;
; 581  : 	DWORD tempColor;
; 582  : 	float OsbPosX, OsbPosY;
; 583  : 	float LDLVerticalPos = (ALICTOP + ALICBOTTOM) / 2.0f + 0.05f;

	movss	xmm0, DWORD PTR __real@3f133333
	movss	DWORD PTR _LDLVerticalPos$[ebp], xmm0

; 584  : 	float theRange;
; 585  : 	float dx, dy, ETA;
; 586  : 	float wpX, wpY, wpZ;
; 587  : 	float temp;
; 588  : 	GroundListElement* tmpElement = NULL;

	mov	DWORD PTR _tmpElement$[ebp], 0

; 589  : 	WayPointClass* tempWP = NULL;

	mov	DWORD PTR _tempWP$[ebp], 0

; 590  : 	int theWPnum;
; 591  : 	char str[24];
; 592  : 	FireControlComputer* FCC = ((SimVehicleClass*)platform)->GetFCC();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax+460]
	call	edx
	mov	DWORD PTR _FCC$[ebp], eax

; 593  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 594  : 	SMSClass* Sms;
; 595  : 
; 596  : 	if ( playerAC )

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	SHORT $LN22@POSDisplay

; 597  : 	{
; 598  : 		Sms = playerAC->Sms;

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+940]
	mov	DWORD PTR _Sms$[ebp], ecx
$LN22@POSDisplay:

; 599  : 	}
; 600  : 
; 601  : 	if ( Sms && !curMissile )

	cmp	DWORD PTR _Sms$[ebp], 0
	je	SHORT $LN21@POSDisplay
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+228], 0
	jne	SHORT $LN21@POSDisplay

; 602  : 	{
; 603  : 		curMissile = (MissileClass*)(Sms->GetCurrentWeapon());

	mov	eax, DWORD PTR _Sms$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _Sms$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+228], eax
$LN21@POSDisplay:

; 604  : 	}
; 605  : 
; 606  : 	display = activeDisplay; 

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _activeDisplay$[ebp]
	mov	DWORD PTR [edx+20], eax

; 607  : 	display->ZeroRotationAboutOrigin();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ ; VirtualDisplay::ZeroRotationAboutOrigin

; 608  : 	display->CenterOriginInViewport ();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 609  :     	
; 610  : 	// Let the base class do the basics
; 611  : 	HarmTargetingPod::POSDisplay( activeDisplay );

	mov	eax, DWORD PTR _activeDisplay$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?POSDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z ; HarmTargetingPod::POSDisplay

; 612  : 
; 613  : 	ClearDTSB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearDTSB@HarmTargetingPod@@IAEXXZ	; HarmTargetingPod::ClearDTSB

; 614  : 	ClearPOSTargets();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearPOSTargets@HarmTargetingPod@@IAEXXZ ; HarmTargetingPod::ClearPOSTargets

; 615  : 	BuildPOSTargets();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?BuildPOSTargets@HarmTargetingPod@@IAEXXZ ; HarmTargetingPod::BuildPOSTargets

; 616  : 
; 617  : 	OsbIndex = 0;

	mov	DWORD PTR _OsbIndex$[ebp], 0

; 618  : 	for ( int i = 0; i < MAX_POS_TARGETS; i++ )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN20@POSDisplay
$LN19@POSDisplay:
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$2[ebp], ecx
$LN20@POSDisplay:
	cmp	DWORD PTR _i$2[ebp], 4
	jge	$LN18@POSDisplay

; 619  : 	{
; 620  : 		if ( POSTargets[i] )

	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx*4+188], 0
	je	$LN17@POSDisplay

; 621  : 		{
; 622  : 			boxed = 0; 

	mov	DWORD PTR _boxed$[ebp], 0

; 623  : 			tmpElement = POSTargets[i]; 

	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+188]
	mov	DWORD PTR _tmpElement$[ebp], eax

; 624  : 			tempWP = POSTargetsWPs[i]; 

	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+204]
	mov	DWORD PTR _tempWP$[ebp], eax

; 625  : 			GetOsbPos(OsbIndex, OsbPosX, OsbPosY);

	lea	ecx, DWORD PTR _OsbPosY$[ebp]
	push	ecx
	lea	edx, DWORD PTR _OsbPosX$[ebp]
	push	edx
	lea	eax, DWORD PTR _OsbIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOsbPos@AdvancedHarmTargetingPod@@AAEXAAHAAM1@Z ; AdvancedHarmTargetingPod::GetOsbPos

; 626  : 			tempColor = display->Color();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+108]
	call	eax
	mov	DWORD PTR _tempColor$[ebp], eax

; 627  : 			display->SetColor (GetMfdColor(MFD_WHITY_GRAY)); // "whity" gray

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 628  : 
; 629  : 			// This one is the current target
; 630  : 			if ( i == POSTargetIndex && tmpElement && lockedTarget &&
; 631  : 				 tmpElement->BaseObject() == lockedTarget->BaseData() ) 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$2[ebp]
	cmp	edx, DWORD PTR [ecx+144]
	jne	$LN16@POSDisplay
	cmp	DWORD PTR _tmpElement$[ebp], 0
	je	$LN16@POSDisplay
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	$LN16@POSDisplay
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	esi, eax
	jne	$LN16@POSDisplay

; 632  : 			{
; 633  : 				curTarget = POSTargets[i];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+188]
	mov	DWORD PTR [edx+220], eax

; 634  : 				curTargetWP = POSTargetsWPs[i];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+edx*4+204]
	mov	DWORD PTR [ecx+232], edx

; 635  : 
; 636  : 				// If the target had not been handed off already, flash the box.
; 637  : 				if ( handedoff == false )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+112]
	test	ecx, ecx
	jne	SHORT $LN15@POSDisplay

; 638  : 				{
; 639  : 					boxed = flash ? 2:0;

	cmp	DWORD PTR ?flash@HarmTargetingPod@@1HA, 0 ; HarmTargetingPod::flash
	je	SHORT $LN25@POSDisplay
	mov	DWORD PTR tv280[ebp], 2
	jmp	SHORT $LN26@POSDisplay
$LN25@POSDisplay:
	mov	DWORD PTR tv280[ebp], 0
$LN26@POSDisplay:
	mov	edx, DWORD PTR tv280[ebp]
	mov	DWORD PTR _boxed$[ebp], edx

; 640  : 				}
; 641  : 
; 642  : 				else

	jmp	SHORT $LN14@POSDisplay
$LN15@POSDisplay:

; 643  : 				{
; 644  :                     boxed = 2; // Box it

	mov	DWORD PTR _boxed$[ebp], 2
$LN14@POSDisplay:

; 645  : 				}
; 646  : 				float zero = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _zero$1[ebp], xmm0

; 647  : 				UpdateDTSB ( curTarget->symbol, zero, zero ); // Get it into DTSB

	lea	eax, DWORD PTR _zero$1[ebp]
	push	eax
	lea	ecx, DWORD PTR _zero$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+220]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateDTSB@HarmTargetingPod@@IAEXHAAM0@Z ; HarmTargetingPod::UpdateDTSB

; 648  : 				display->AdjustOriginInViewport ( -0.55f, LDLVerticalPos - 0.1f + HTS_Y_OFFSET );

	movss	xmm0, DWORD PTR _LDLVerticalPos$[ebp]
	subss	xmm0, DWORD PTR __real@3dcccccd
	addss	xmm0, DWORD PTR __real@bf000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf0ccccd
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 649  : 				DrawEmitterSymbol( curTarget->symbol, boxed );

	mov	eax, DWORD PTR _boxed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+220]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawEmitterSymbol@RwrClass@@IAEXHH@Z	; RwrClass::DrawEmitterSymbol

; 650  : 				display->AdjustOriginInViewport ( 0.55f, -(LDLVerticalPos - 0.1f + HTS_Y_OFFSET) );

	movss	xmm0, DWORD PTR _LDLVerticalPos$[ebp]
	subss	xmm0, DWORD PTR __real@3dcccccd
	addss	xmm0, DWORD PTR __real@bf000000
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f0ccccd
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 651  : 
; 652  : 				// Get the waypoint number where this target is at, we need to display it
; 653  : 				// under the LSDL line
; 654  : 				theWPnum = FindWaypointNum ( curTargetWP ); 

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+232]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindWaypointNum@HarmTargetingPod@@IAEHPAVWayPointClass@@@Z ; HarmTargetingPod::FindWaypointNum
	mov	DWORD PTR _theWPnum$[ebp], eax

; 655  : 				sprintf (str, "%02d", theWPnum);

	mov	ecx, DWORD PTR _theWPnum$[ebp]
	push	ecx
	push	OFFSET ??_C@_04OGKJMPGK@?$CF02d?$AA@
	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 656  : 				display->TextCenter ( -0.54f, LDLVerticalPos - 0.15f + HTS_Y_OFFSET, str );

	push	0
	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	movss	xmm0, DWORD PTR _LDLVerticalPos$[ebp]
	subss	xmm0, DWORD PTR __real@3e19999a
	addss	xmm0, DWORD PTR __real@bf000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf0a3d71
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 657  : 
; 658  : 				// Get missile TOF. Should also be with the under-LSDL pre-launch info
; 659  : 				if ( curMissile && curTarget && curTarget->BaseObject() )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+228], 0
	je	$LN13@POSDisplay
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+220], 0
	je	$LN13@POSDisplay
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+220]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	test	eax, eax
	je	$LN13@POSDisplay

; 660  : 				{
; 661  : 					// Get the range to the tmpElement which is the current target "candidate"
; 662  : 					dx = fabs(playerAC->XPos() - curTarget->BaseObject()->XPos());

	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1020[ebp]
	movss	xmm0, DWORD PTR tv1020[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+220]
	movss	DWORD PTR tv1292[ebp], xmm0
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1026[ebp]
	movss	xmm0, DWORD PTR tv1292[ebp]
	subss	xmm0, DWORD PTR tv1026[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _dx$[ebp]

; 663  : 					dx *= dx;

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 664  : 					dy = fabs(playerAC->YPos() - curTarget->BaseObject()->YPos());

	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1034[ebp]
	movss	xmm0, DWORD PTR tv1034[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+220]
	movss	DWORD PTR tv1294[ebp], xmm0
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1040[ebp]
	movss	xmm0, DWORD PTR tv1294[ebp]
	subss	xmm0, DWORD PTR tv1040[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _dy$[ebp]

; 665  : 					dy *= dy;

	movss	xmm0, DWORD PTR _dy$[ebp]
	mulss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 666  : 					theRange = sqrt(dx + dy);

	movss	xmm0, DWORD PTR _dx$[ebp]
	addss	xmm0, DWORD PTR _dy$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _theRange$[ebp]

; 667  : 
; 668  : 					curTOF = curMissile->GetTOF( -playerAC->ZPos(), playerAC->GetVt(), 0.0f, 0.0f, theRange);

	push	ecx
	movss	xmm0, DWORD PTR _theRange$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1056[ebp]
	movss	xmm0, DWORD PTR tv1056[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+228]
	call	?GetTOF@MissileClass@@QAEMMMMMM@Z	; MissileClass::GetTOF
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+240]
$LN13@POSDisplay:

; 669  : 				}
; 670  : 
; 671  : 				if ( curTOF > 0.0f )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+240]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN12@POSDisplay

; 672  : 				{
; 673  : 					temp = curTOF;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+240]
	movss	DWORD PTR _temp$[ebp], xmm0

; 674  : 					minutes = FloatToInt32 ( temp / 60.0f );

	movss	xmm0, DWORD PTR _temp$[ebp]
	divss	xmm0, DWORD PTR __real@42700000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _minutes$[ebp], eax

; 675  : 					temp -= minutes * 60.0f;

	cvtsi2ss xmm0, DWORD PTR _minutes$[ebp]
	mulss	xmm0, DWORD PTR __real@42700000
	movss	xmm1, DWORD PTR _temp$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _temp$[ebp], xmm1

; 676  : 					seconds = FloatToInt32 ( temp );

	push	ecx
	movss	xmm0, DWORD PTR _temp$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _seconds$[ebp], eax

; 677  :                     sprintf ( str, "%d:%02d", abs(minutes), abs(seconds) );

	mov	edx, DWORD PTR _seconds$[ebp]
	push	edx
	call	_abs
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _minutes$[ebp]
	push	eax
	call	_abs
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_07COCHMHBB@?$CFd?3?$CF02d?$AA@
	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 678  :                     display->TextCenter ( -0.55f, LDLVerticalPos - 0.28f + HTS_Y_OFFSET, str );

	push	0
	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	movss	xmm0, DWORD PTR _LDLVerticalPos$[ebp]
	subss	xmm0, DWORD PTR __real@3e8f5c29
	addss	xmm0, DWORD PTR __real@bf000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf0ccccd
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx
$LN12@POSDisplay:

; 679  : 					
; 680  : 				}
; 681  : 
; 682  : 				// RV - I-Hawk - Get ETA - BTW I noticed the HUD ETA for waypoints is fucked up
; 683  : 				// and not following the DED ETA which is the accurate one... probably the WP
; 684  : 				// time arrival function is foobard (which is what the HUD is using)
; 685  : 
; 686  : 				// Here calculating same way as the DED
; 687  : 				curTargetWP->GetLocation ( &wpX, &wpY, &wpZ );

	lea	eax, DWORD PTR _wpZ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wpY$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wpX$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation

; 688  : 				ETA = (float)(SimLibElapsedTime / SEC_TO_MSEC) + FloatToInt32(Distance(
; 689  : 				playerAC->XPos(), playerAC->YPos(), wpX, wpY) 
; 690  : 				/ playerAC->GetVt());

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	DWORD PTR tv1103[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv1103[ebp]
	mov	edx, DWORD PTR tv1103[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv1106[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv1106[ebp]
	push	ecx
	movss	xmm1, DWORD PTR _wpY$[ebp]
	movss	DWORD PTR [esp], xmm1
	push	ecx
	movss	xmm1, DWORD PTR _wpX$[ebp]
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _playerAC$[ebp]
	movss	DWORD PTR tv1296[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Distance@@YAMMMMM@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv1125[ebp]
	movss	xmm0, DWORD PTR tv1125[ebp]
	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [edx+220]
	movss	DWORD PTR tv1298[ebp], xmm0
	call	eax
	fstp	DWORD PTR tv1131[ebp]
	movss	xmm0, DWORD PTR tv1298[ebp]
	divss	xmm0, DWORD PTR tv1131[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR tv1296[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _ETA$[ebp], xmm1

; 691  : 
; 692  : 				// Calculate ETA
; 693  : 				// Get rid of any days first
; 694  : 				days = FloatToInt32 ( ETA / 86400.0f );  // 86400 seconds in 24 hours

	movss	xmm0, DWORD PTR _ETA$[ebp]
	divss	xmm0, DWORD PTR __real@47a8c000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _days$[ebp], eax

; 695  : 				ETA -= days * 86400.0f;

	cvtsi2ss xmm0, DWORD PTR _days$[ebp]
	mulss	xmm0, DWORD PTR __real@47a8c000
	movss	xmm1, DWORD PTR _ETA$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _ETA$[ebp], xmm1

; 696  : 				hours = FloatToInt32 ( ETA / 3600.0f );

	movss	xmm0, DWORD PTR _ETA$[ebp]
	divss	xmm0, DWORD PTR __real@45610000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _hours$[ebp], eax

; 697  : 				ETA -= hours * 3600.0f;

	cvtsi2ss xmm0, DWORD PTR _hours$[ebp]
	mulss	xmm0, DWORD PTR __real@45610000
	movss	xmm1, DWORD PTR _ETA$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _ETA$[ebp], xmm1

; 698  : 				minutes = FloatToInt32 ( ETA / 60.0f );

	movss	xmm0, DWORD PTR _ETA$[ebp]
	divss	xmm0, DWORD PTR __real@42700000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _minutes$[ebp], eax

; 699  : 				ETA -= minutes * 60.0f;

	cvtsi2ss xmm0, DWORD PTR _minutes$[ebp]
	mulss	xmm0, DWORD PTR __real@42700000
	movss	xmm1, DWORD PTR _ETA$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _ETA$[ebp], xmm1

; 700  : 				seconds = FloatToInt32 ( ETA );

	push	ecx
	movss	xmm0, DWORD PTR _ETA$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _seconds$[ebp], eax

; 701  : 				sprintf ( str, "%d:%02d:%02d", abs(hours), abs(minutes), abs(seconds) );

	mov	ecx, DWORD PTR _seconds$[ebp]
	push	ecx
	call	_abs
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _minutes$[ebp]
	push	edx
	call	_abs
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _hours$[ebp]
	push	eax
	call	_abs
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0N@PKIKNCIH@?$CFd?3?$CF02d?3?$CF02d?$AA@
	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H

; 702  : 				display->TextCenter ( -0.56f, LDLVerticalPos - 0.37f + HTS_Y_OFFSET, str );

	push	0
	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	movss	xmm0, DWORD PTR _LDLVerticalPos$[ebp]
	subss	xmm0, DWORD PTR __real@3ebd70a4
	addss	xmm0, DWORD PTR __real@bf000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf0f5c29
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx
$LN16@POSDisplay:

; 703  : 			}
; 704  : 			display->AdjustOriginInViewport (OsbPosX + 0.1f, OsbPosY);

	push	ecx
	movss	xmm0, DWORD PTR _OsbPosY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _OsbPosX$[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 705  :             DrawEmitterSymbol( tmpElement->symbol, boxed );

	mov	ecx, DWORD PTR _boxed$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tmpElement$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawEmitterSymbol@RwrClass@@IAEXHH@Z	; RwrClass::DrawEmitterSymbol

; 706  : 			display->AdjustOriginInViewport (-(OsbPosX + 0.1f), -OsbPosY);

	movss	xmm0, DWORD PTR _OsbPosY$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _OsbPosX$[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 707  :             display->SetColor (tempColor);

	mov	edx, DWORD PTR _tempColor$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 708  : 			display->CenterOriginInViewport ();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 709  : 			OsbIndex++;

	mov	ecx, DWORD PTR _OsbIndex$[ebp]
	add	ecx, 1
	mov	DWORD PTR _OsbIndex$[ebp], ecx

; 710  : 		}
; 711  : 
; 712  : 		else

	jmp	SHORT $LN11@POSDisplay
$LN17@POSDisplay:

; 713  : 		{
; 714  : 			break;

	jmp	SHORT $LN18@POSDisplay
$LN11@POSDisplay:

; 715  : 		}
; 716  : 	}

	jmp	$LN19@POSDisplay
$LN18@POSDisplay:

; 717  : 
; 718  : 	// In case of a launch, save the target's symbol and WP
; 719  : 	if ( curMissile && curMissile->launchState != MissileClass::PreLaunch && lockedTarget )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+228], 0
	je	$LN9@POSDisplay
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	cmp	DWORD PTR [ecx+724], 0
	je	SHORT $LN9@POSDisplay
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN9@POSDisplay

; 720  : 	{
; 721  : 		// Stop tracking the missile
; 722  : 		curMissile = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+228], 0

; 723  : 
; 724  : 		// Backup info on the launched target, and launched waypoint, for TOF
; 725  : 		if (curTarget)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+220], 0
	je	SHORT $LN9@POSDisplay

; 726  : 		{
; 727  : 			prevTargteSymbol = curTarget->symbol;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+220]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+252], edx

; 728  : 			prevWPNum = FindWaypointNum ( curTargetWP );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindWaypointNum@HarmTargetingPod@@IAEHPAVWayPointClass@@@Z ; HarmTargetingPod::FindWaypointNum
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+256], eax

; 729  : 			prevTOF = curTOF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+240]
	mov	DWORD PTR [eax+244], edx

; 730  : 			missileLaunched = true; // update the flag

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+260], 1

; 731  : 			timer = SimLibElapsedTime;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [ecx+248], edx
$LN9@POSDisplay:

; 732  : 		}
; 733  : 	}
; 734  : 
; 735  : 	if ( missileLaunched ) // Handle the last launched missile data

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+260]
	test	ecx, ecx
	je	$LN8@POSDisplay

; 736  : 	{
; 737  : 		tempColor = display->Color();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+108]
	call	eax
	mov	DWORD PTR _tempColor$[ebp], eax

; 738  : 		display->SetColor(GetMfdColor(MFD_WHITY_GRAY));

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 739  : 		// Draw the emitter simbol above the LSDL line at the post-launch info slot is 
; 740  : 		display->AdjustOriginInViewport ( 0.5f, LDLVerticalPos + 0.1f + HTS_Y_OFFSET );

	movss	xmm0, DWORD PTR _LDLVerticalPos$[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	addss	xmm0, DWORD PTR __real@bf000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 741  : 		DrawEmitterSymbol( prevTargteSymbol, 0 );

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+252]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawEmitterSymbol@RwrClass@@IAEXHH@Z	; RwrClass::DrawEmitterSymbol

; 742  : 		display->AdjustOriginInViewport ( -0.5f, -(LDLVerticalPos + 0.1f + HTS_Y_OFFSET) );

	movss	xmm0, DWORD PTR _LDLVerticalPos$[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	addss	xmm0, DWORD PTR __real@bf000000
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 743  : 
; 744  : 		// Get the previous target waypoint number
; 745  : 		sprintf (str, "%02d", prevWPNum);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+256]
	push	eax
	push	OFFSET ??_C@_04OGKJMPGK@?$CF02d?$AA@
	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 746  : 		display->TextCenter ( 0.49f, LDLVerticalPos + 0.25f + HTS_Y_OFFSET, str );

	push	0
	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	movss	xmm0, DWORD PTR _LDLVerticalPos$[ebp]
	addss	xmm0, DWORD PTR __real@3e800000
	addss	xmm0, DWORD PTR __real@bf000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3efae148
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 747  : 
; 748  : 		// Get the launched missile TOF, it's just a "dummy" counter...
; 749  : 
; 750  : 		if ( prevTOF <= 0.0f )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+244]
	jb	SHORT $LN7@POSDisplay

; 751  : 		{
; 752  : 			prevTOF = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+244], xmm0

; 753  : 		}
; 754  : 
; 755  : 		else // Tick down the prevTOF 

	jmp	SHORT $LN5@POSDisplay
$LN7@POSDisplay:

; 756  : 		{
; 757  : 			if ( SimLibElapsedTime - timer > 1 * SEC_TO_MSEC )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	eax, DWORD PTR [edx+248]
	cmp	eax, 1000				; 000003e8H
	jbe	SHORT $LN5@POSDisplay

; 758  : 			{
; 759  : 				prevTOF -= 1.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+244]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+244], xmm0

; 760  : 				timer += 1 * SEC_TO_MSEC;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+248]
	add	ecx, 1000				; 000003e8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+248], ecx
$LN5@POSDisplay:

; 761  : 			}
; 762  :  		}
; 763  : 
; 764  : 		if ( prevTOF >= 0.0f )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+244]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN4@POSDisplay

; 765  : 		{
; 766  : 			temp = prevTOF;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+244]
	movss	DWORD PTR _temp$[ebp], xmm0

; 767  : 			minutes = FloatToInt32 ( temp / 60.0f );

	movss	xmm0, DWORD PTR _temp$[ebp]
	divss	xmm0, DWORD PTR __real@42700000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _minutes$[ebp], eax

; 768  : 			temp -= minutes * 60.0f;

	cvtsi2ss xmm0, DWORD PTR _minutes$[ebp]
	mulss	xmm0, DWORD PTR __real@42700000
	movss	xmm1, DWORD PTR _temp$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _temp$[ebp], xmm1

; 769  : 			seconds = FloatToInt32 ( temp );

	push	ecx
	movss	xmm0, DWORD PTR _temp$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _seconds$[ebp], eax

; 770  : 			sprintf ( str, "%d:%02d", abs(minutes), abs(seconds) );

	mov	edx, DWORD PTR _seconds$[ebp]
	push	edx
	call	_abs
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _minutes$[ebp]
	push	eax
	call	_abs
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_07COCHMHBB@?$CFd?3?$CF02d?$AA@
	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 771  : 			display->TextCenter ( 0.48f, LDLVerticalPos + 0.38f + HTS_Y_OFFSET, str );

	push	0
	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	movss	xmm0, DWORD PTR _LDLVerticalPos$[ebp]
	addss	xmm0, DWORD PTR __real@3ec28f5c
	addss	xmm0, DWORD PTR __real@bf000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3ef5c28f
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx
$LN4@POSDisplay:

; 772  : 		}
; 773  : 
; 774  : 		display->SetColor(tempColor);

	mov	eax, DWORD PTR _tempColor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax
$LN8@POSDisplay:

; 775  : 	}
; 776  : 
; 777  :     // RV - I-Hawk - If we have a locked target, go to handoff mode
; 778  : 	
; 779  : 	if ( lockedTarget && lockedTarget->BaseData() )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN1@POSDisplay
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	test	eax, eax
	je	SHORT $LN1@POSDisplay

; 780  : 	{
; 781  : 		preHandoffMode = Pos;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+224], 1

; 782  : 
; 783  : 		if ( handedoff == false ) // Tick the Handoff timer down

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+112]
	test	edx, edx
	jne	SHORT $LN1@POSDisplay

; 784  : 		{
; 785  : 			if ( SimLibElapsedTime - handoffRefTime > 3 * SEC_TO_MSEC )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	ecx, DWORD PTR [eax+160]
	cmp	ecx, 3000				; 00000bb8H
	jbe	SHORT $LN1@POSDisplay

; 786  : 			{
; 787  : 				handedoff = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+112], 1
$LN1@POSDisplay:

; 788  : 			}
; 789  : 		} 
; 790  : 	}
; 791  : 
; 792  : 	display->SetColor( 0xFF00FF00 );

	push	-16711936				; ff00ff00H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 793  : 
; 794  : 	// Adjust our viewport origin
; 795  : 	display->AdjustOriginInViewport (0.0f, HTS_Y_OFFSET);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 796  : 	
; 797  : 	// Reset our display parameters
; 798  : 	display->ZeroRotationAboutOrigin();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ ; VirtualDisplay::ZeroRotationAboutOrigin

; 799  : 	display->CenterOriginInViewport ();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 800  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?POSDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z ENDP ; AdvancedHarmTargetingPod::POSDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\advancedhts.cpp
_TEXT	SEGMENT
tv550 = -212						; size = 8
tv538 = -204						; size = 8
_trig$ = -196						; size = 8
tv611 = -188						; size = 4
tv543 = -184						; size = 4
tv594 = -180						; size = 4
_curTime$ = -176					; size = 4
tv702 = -172						; size = 4
_ey$ = -168						; size = 4
tv708 = -164						; size = 4
_ex$ = -160						; size = 4
tv589 = -156						; size = 4
tv652 = -152						; size = 4
tv572 = -148						; size = 4
tv645 = -144						; size = 4
tv548 = -140						; size = 4
_NormDisplayYNoOffset$ = -136				; size = 4
tv605 = -132						; size = 4
_NormDisplayX$ = -128					; size = 4
tv600 = -124						; size = 4
_alpha$ = -120						; size = 4
tv706 = -116						; size = 4
_range$ = -112						; size = 4
_trueRange$ = -108					; size = 4
_alt$1 = -104						; size = 4
tv704 = -100						; size = 4
_y2$ = -96						; size = 4
tv567 = -92						; size = 4
_x2$ = -88						; size = 4
tv562 = -84						; size = 4
tv710 = -80						; size = 4
tv616 = -76						; size = 4
tv577 = -72						; size = 4
_FCC$ = -68						; size = 4
_phi$ = -64						; size = 4
_NormDisplayY$ = -60					; size = 4
_elevation$ = -56					; size = 4
tv535 = -52						; size = 4
_cosAng$ = -48						; size = 4
_sinAng$ = -44						; size = 4
_rangeX$ = -40						; size = 4
_numOfDrawnTargets$ = -36				; size = 4
_rangeY$ = -32						; size = 4
_y$ = -28						; size = 4
tv545 = -22						; size = 2
_x$ = -20						; size = 4
_displayX$ = -16					; size = 4
_displayY$ = -12					; size = 4
_tmpElement$ = -8					; size = 4
_this$ = -4						; size = 4
_activeDisplay$ = 8					; size = 4
?HASDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z PROC ; AdvancedHarmTargetingPod::HASDisplay
; _this$ = ecx

; 340  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 341  : 	unsigned		numOfDrawnTargets, curTime;
; 342  : 	float			displayX, displayY, NormDisplayX, NormDisplayY, NormDisplayYNoOffset;
; 343  : 	float			x, y, x2, y2;
; 344  : 	float			cosAng, sinAng;
; 345  : 	float			range, alpha, ex, ey, phi, elevation;
; 346  : 	float			rangeX, rangeY, trueRange;
; 347  : 	GroundListElement*	tmpElement;
; 348  : 	mlTrig			trig;
; 349  : 	FireControlComputer* FCC = ((SimVehicleClass*)platform)->GetFCC();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax+460]
	call	edx
	mov	DWORD PTR _FCC$[ebp], eax

; 350  : 	
; 351  : 	// Let the base class do the basics
; 352  : 	HarmTargetingPod::HASDisplay( activeDisplay );

	mov	eax, DWORD PTR _activeDisplay$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z ; HarmTargetingPod::HASDisplay

; 353  : 
; 354  : 	// Set up the trig functions of our current heading
; 355  : 	mlSinCos (&trig, platform->Yaw());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _trig$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 356  : 	cosAng = trig.cos;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _cosAng$[ebp], xmm0

; 357  : 	sinAng = trig.sin;

	movss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _sinAng$[ebp], xmm0

; 358  : 	
; 359  : 	curTime = (unsigned)((SimLibElapsedTime - HASTimer) * MSEC_TO_SEC);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	ecx, DWORD PTR [eax+164]
	mov	DWORD PTR tv535[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv535[ebp]
	mov	edx, DWORD PTR tv535[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv538[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv538[ebp]
	mulss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR tv543[ebp], xmm0
	fld	DWORD PTR tv543[ebp]
	fnstcw	WORD PTR tv545[ebp]
	movzx	eax, WORD PTR tv545[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv548[ebp], eax
	fldcw	WORD PTR tv548[ebp]
	fistp	QWORD PTR tv550[ebp]
	fldcw	WORD PTR tv545[ebp]
	mov	eax, DWORD PTR tv550[ebp]
	mov	DWORD PTR _curTime$[ebp], eax

; 360  : 	// Draw all known emmitters
; 361  : 	ClearDTSB(); // clear DTSB first

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearDTSB@HarmTargetingPod@@IAEXXZ	; HarmTargetingPod::ClearDTSB

; 362  : 	numOfDrawnTargets = 0;

	mov	DWORD PTR _numOfDrawnTargets$[ebp], 0

; 363  : 	for (tmpElement = FCC->GetFirstGroundElement(); tmpElement; tmpElement = tmpElement->GetNext())

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetFirstGroundElement@FireControlComputer@@QAEPAVGroundListElement@@XZ ; FireControlComputer::GetFirstGroundElement
	mov	DWORD PTR _tmpElement$[ebp], eax
	jmp	SHORT $LN12@HASDisplay
$LN11@HASDisplay:
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?GetNext@GroundListElement@@QAEPAV1@XZ	; GroundListElement::GetNext
	mov	DWORD PTR _tmpElement$[ebp], eax
$LN12@HASDisplay:
	cmp	DWORD PTR _tmpElement$[ebp], 0
	je	$LN10@HASDisplay

; 364  : 	{
; 365  : 		if (tmpElement->BaseObject() == NULL) { continue; }

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	test	eax, eax
	jne	SHORT $LN9@HASDisplay
	jmp	SHORT $LN11@HASDisplay
$LN9@HASDisplay:

; 366  : 
; 367  : 		// Check if emitter is on priority list
; 368  : 		if ( !IsInPriorityList ( tmpElement->symbol ) )	{ continue;	}

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsInPriorityList@HarmTargetingPod@@IAE_NH@Z ; HarmTargetingPod::IsInPriorityList
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN8@HASDisplay
	jmp	SHORT $LN11@HASDisplay
$LN8@HASDisplay:

; 369  : 
; 370  : 		// Check if range is less than 60NM (no reason to get anything beyond...)
; 371  : 		rangeY = (tmpElement->BaseObject()->XPos() - platform->XPos()) * FT_TO_NM;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv562[ebp]
	movss	xmm0, DWORD PTR tv562[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv702[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv567[ebp]
	movss	xmm0, DWORD PTR tv702[ebp]
	subss	xmm0, DWORD PTR tv567[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	movss	DWORD PTR _rangeY$[ebp], xmm0

; 372  : 		rangeX = (tmpElement->BaseObject()->YPos() - platform->YPos()) * FT_TO_NM;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv572[ebp]
	movss	xmm0, DWORD PTR tv572[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv704[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv577[ebp]
	movss	xmm0, DWORD PTR tv704[ebp]
	subss	xmm0, DWORD PTR tv577[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	movss	DWORD PTR _rangeX$[ebp], xmm0

; 373  : 
; 374  : 		rangeY *= rangeY;

	movss	xmm0, DWORD PTR _rangeY$[ebp]
	mulss	xmm0, DWORD PTR _rangeY$[ebp]
	movss	DWORD PTR _rangeY$[ebp], xmm0

; 375  : 		rangeX *= rangeX;

	movss	xmm0, DWORD PTR _rangeX$[ebp]
	mulss	xmm0, DWORD PTR _rangeX$[ebp]
	movss	DWORD PTR _rangeX$[ebp], xmm0

; 376  : 		trueRange = sqrtf( rangeX + rangeY );

	movss	xmm0, DWORD PTR _rangeX$[ebp]
	addss	xmm0, DWORD PTR _rangeY$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _trueRange$[ebp]

; 377  : 
; 378  : 		if ( trueRange > 60.0f ) { continue; }

	movss	xmm0, DWORD PTR _trueRange$[ebp]
	comiss	xmm0, DWORD PTR __real@42700000
	jbe	SHORT $LN7@HASDisplay
	jmp	$LN11@HASDisplay
$LN7@HASDisplay:

; 379  : 
; 380  : 		// Compute the world space oriented, display space scaled, ownship relative postion of the emitter
; 381  : 		y = (tmpElement->BaseObject()->XPos() - platform->XPos()) * FT_TO_NM / displayRange * HAS_DISPLAY_RADIUS;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv589[ebp]
	movss	xmm0, DWORD PTR tv589[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv706[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv594[ebp]
	movss	xmm0, DWORD PTR tv706[ebp]
	subss	xmm0, DWORD PTR tv594[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx+116]
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR _y$[ebp], xmm0

; 382  : 		x = (tmpElement->BaseObject()->YPos() - platform->YPos()) * FT_TO_NM / displayRange * HAS_DISPLAY_RADIUS;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv600[ebp]
	movss	xmm0, DWORD PTR tv600[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv708[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv605[ebp]
	movss	xmm0, DWORD PTR tv708[ebp]
	subss	xmm0, DWORD PTR tv605[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [eax+116]
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR _x$[ebp], xmm0

; 383  : 		float alt = (-platform->ZPos() - (-tmpElement->BaseObject()->ZPos())) * FT_TO_NM / displayRange * HAS_DISPLAY_RADIUS; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv611[ebp]
	movss	xmm0, DWORD PTR tv611[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	movss	DWORD PTR tv710[ebp], xmm0
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv616[ebp]
	movss	xmm0, DWORD PTR tv616[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR tv710[ebp]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@392c987a
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+116]
	divss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@3f400000
	movss	DWORD PTR _alt$1[ebp], xmm1

; 384  : 
; 385  : 		// Now calculate elevation (and not range)
; 386  : 		x2 = x * x;

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR _x2$[ebp], xmm0

; 387  : 		y2 = y * y;

	movss	xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR _y2$[ebp], xmm0

; 388  : 		range = sqrt( x2 + y2 ); // Get range

	movss	xmm0, DWORD PTR _x2$[ebp]
	addss	xmm0, DWORD PTR _y2$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _range$[ebp]

; 389  : 		alpha = atan ( alt / range ); // Get the elevation angle

	movss	xmm0, DWORD PTR _alt$1[ebp]
	divss	xmm0, DWORD PTR _range$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	fstp	DWORD PTR _alpha$[ebp]

; 390  : 		elevation = (1.0f - (alpha / HALF_PI)) * HAS_DISPLAY_RADIUS;

	movss	xmm0, DWORD PTR _alpha$[ebp]
	divss	xmm0, DWORD PTR __real@3fc90fdb
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@3f400000
	movss	DWORD PTR _elevation$[ebp], xmm1

; 391  : 
; 392  : 		NormDisplayX = cosAng * x - sinAng * y; 

	movss	xmm0, DWORD PTR _cosAng$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _sinAng$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _NormDisplayX$[ebp], xmm0

; 393  : 		NormDisplayYNoOffset = sinAng * x + cosAng * y;

	movss	xmm0, DWORD PTR _sinAng$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _cosAng$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _NormDisplayYNoOffset$[ebp], xmm0

; 394  : 		NormDisplayY = sinAng * x + cosAng * y + HTS_Y_OFFSET;

	movss	xmm0, DWORD PTR _sinAng$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _cosAng$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR _NormDisplayY$[ebp], xmm0

; 395  : 
; 396  : 		phi = atan ( NormDisplayX / NormDisplayYNoOffset );

	movss	xmm0, DWORD PTR _NormDisplayX$[ebp]
	divss	xmm0, DWORD PTR _NormDisplayYNoOffset$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	fstp	DWORD PTR _phi$[ebp]

; 397  : 		ex = elevation * sin(phi);

	push	ecx
	movss	xmm0, DWORD PTR _phi$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv645[ebp]
	movss	xmm0, DWORD PTR tv645[ebp]
	mulss	xmm0, DWORD PTR _elevation$[ebp]
	movss	DWORD PTR _ex$[ebp], xmm0

; 398  : 		ey = elevation * cos(phi);

	push	ecx
	movss	xmm0, DWORD PTR _phi$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv652[ebp]
	movss	xmm0, DWORD PTR tv652[ebp]
	mulss	xmm0, DWORD PTR _elevation$[ebp]
	movss	DWORD PTR _ey$[ebp], xmm0

; 399  : 		displayX = ex * zoomFactor;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _ex$[ebp]
	mulss	xmm0, DWORD PTR [eax+152]
	movss	DWORD PTR _displayX$[ebp], xmm0

; 400  : 		displayY = ey * zoomFactor + HTS_Y_OFFSET;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _ey$[ebp]
	mulss	xmm0, DWORD PTR [ecx+152]
	addss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR _displayY$[ebp], xmm0

; 401  : 
; 402  : 		// RV - I-Hawk - Diplay only what's inside the ALIC video
; 403  : 		if ( !IsInsideALIC(displayX, displayY) ) { continue; }

	lea	edx, DWORD PTR _displayY$[ebp]
	push	edx
	lea	eax, DWORD PTR _displayX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsInsideALIC@HarmTargetingPod@@IAE_NAAM0@Z ; HarmTargetingPod::IsInsideALIC
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN6@HASDisplay
	jmp	$LN11@HASDisplay
$LN6@HASDisplay:

; 404  : 
; 405  : 		// What's behind the 3-9 line, display at ALIC bottom line
; 406  : 		if ( NormDisplayY < 0.0f + HTS_Y_OFFSET )

	movss	xmm0, DWORD PTR __real@bf000000
	comiss	xmm0, DWORD PTR _NormDisplayY$[ebp]
	jbe	SHORT $LN5@HASDisplay

; 407  : 		{
; 408  : 			displayY = 0.0f + HTS_Y_OFFSET;

	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR _displayY$[ebp], xmm0

; 409  : 			displayX = -displayX; // Switch sides when it gets inverted...

	movss	xmm0, DWORD PTR _displayX$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _displayX$[ebp], xmm0
$LN5@HASDisplay:

; 410  : 		}
; 411  : 
; 412  : 		// JB 010726 Clear the designated target if behind the 3/9 line.
; 413  : 		if (NormDisplayY - HTS_Y_OFFSET < 0.0f)

	movss	xmm0, DWORD PTR _NormDisplayY$[ebp]
	subss	xmm0, DWORD PTR __real@bf000000
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@HASDisplay

; 414  : 		{
; 415  : 			if (lockedTarget && tmpElement->BaseObject() == lockedTarget->BaseData())

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN3@HASDisplay
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	esi, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	esi, eax
	jne	SHORT $LN3@HASDisplay

; 416  : 			{
; 417  : 				FCC->dropTrackCmd = TRUE;

	mov	ecx, DWORD PTR _FCC$[ebp]
	mov	BYTE PTR [ecx+185], 1
$LN3@HASDisplay:

; 418  : 			}
; 419  : 		}
; 420  : 
; 421  : 		// Draw only emitters which their time had come to be shown according to the HAS timer
; 422  : 		if ( numOfDrawnTargets <= curTime )

	mov	edx, DWORD PTR _numOfDrawnTargets$[ebp]
	cmp	edx, DWORD PTR _curTime$[ebp]
	ja	SHORT $LN2@HASDisplay

; 423  : 		{
; 424  :  			DrawEmitter ( tmpElement, displayX, displayY, displayY );

	lea	eax, DWORD PTR _displayY$[ebp]
	push	eax
	lea	ecx, DWORD PTR _displayY$[ebp]
	push	ecx
	lea	edx, DWORD PTR _displayX$[ebp]
	push	edx
	mov	eax, DWORD PTR _tmpElement$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawEmitter@AdvancedHarmTargetingPod@@AAEXPAVGroundListElement@@AAM11@Z ; AdvancedHarmTargetingPod::DrawEmitter

; 425  : 			UpdateDTSB ( tmpElement->symbol, displayX, displayY );

	lea	ecx, DWORD PTR _displayY$[ebp]
	push	ecx
	lea	edx, DWORD PTR _displayX$[ebp]
	push	edx
	mov	eax, DWORD PTR _tmpElement$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateDTSB@HarmTargetingPod@@IAEXHAAM0@Z ; HarmTargetingPod::UpdateDTSB
$LN2@HASDisplay:

; 426  : 		}
; 427  : 
; 428  : 		numOfDrawnTargets++;

	mov	edx, DWORD PTR _numOfDrawnTargets$[ebp]
	add	edx, 1
	mov	DWORD PTR _numOfDrawnTargets$[ebp], edx

; 429  : 
; 430  : 		// Adjust bac display viewport as DrawEmitter function is changing the viewport!
; 431  : 		display->AdjustOriginInViewport (-displayX, -displayY);

	movss	xmm0, DWORD PTR _displayY$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _displayX$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 432  : 	}

	jmp	$LN11@HASDisplay
$LN10@HASDisplay:

; 433  : 
; 434  : 	HASNumTargets = numOfDrawnTargets; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _numOfDrawnTargets$[ebp]
	mov	DWORD PTR [ecx+148], edx

; 435  : 
; 436  : 	// RV - I-Hawk - If we have a locked target, go to handoff mode
; 437  : 	if ( lockedTarget && lockedTarget->BaseData() )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN1@HASDisplay
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	test	eax, eax
	je	SHORT $LN1@HASDisplay

; 438  : 	{
; 439  : 		SetSubMode( Handoff );

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSubMode@HarmTargetingPod@@QAEXW4Submode@1@@Z ; HarmTargetingPod::SetSubMode

; 440  : 		preHandoffMode = Has;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+224], 0

; 441  : 		handoffRefTime = SimLibElapsedTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [eax+160], ecx

; 442  : 		handedoff = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+112], 0
$LN1@HASDisplay:

; 443  : 	}
; 444  : 
; 445  : 	display->SetColor( 0xFF00FF00 ); 

	push	-16711936				; ff00ff00H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 446  : 
; 447  : 	// Reset our display parameters
; 448  : 	display->ZeroRotationAboutOrigin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ ; VirtualDisplay::ZeroRotationAboutOrigin

; 449  : 	display->CenterOriginInViewport ();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 450  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?HASDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z ENDP ; AdvancedHarmTargetingPod::HASDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\advancedhts.cpp
_TEXT	SEGMENT
_origDisplayX$ = -180					; size = 4
_offset2$ = -176					; size = 8
_offset$ = -168						; size = 8
_trig2$ = -160						; size = 8
_trig$ = -152						; size = 8
tv873 = -144						; size = 4
tv1023 = -140						; size = 4
tv935 = -136						; size = 4
tv894 = -132						; size = 4
tv1132 = -128						; size = 4
_offsetX$ = -124					; size = 4
tv1030 = -120						; size = 4
_offsetY$ = -116					; size = 4
tv941 = -112						; size = 4
_yawOffsetAng2$ = -108					; size = 4
tv901 = -104						; size = 4
_yawOffsetAng$ = -100					; size = 4
tv884 = -96						; size = 4
tv1065 = -92						; size = 4
tv868 = -88						; size = 4
tv1059 = -84						; size = 4
tv1130 = -80						; size = 4
_tempColor$ = -76					; size = 4
tv879 = -72						; size = 4
_EXP2OffsetX$ = -68					; size = 4
_FCC$ = -64						; size = 4
_EXP1OffsetY$ = -60					; size = 4
_origSinAng$ = -56					; size = 4
_EXP1OffsetX$ = -52					; size = 4
_origCosAng$ = -48					; size = 4
_origDisplayY$ = -44					; size = 4
_r$ = -40						; size = 4
_EXP2OffsetY$ = -36					; size = 4
_sinAng$ = -32						; size = 4
_cosAng$ = -28						; size = 4
_tmpElement$ = -24					; size = 4
_displayX$ = -20					; size = 4
_displayY$ = -16					; size = 4
_x$ = -12						; size = 4
_y$ = -8						; size = 4
_this$ = -4						; size = 4
_activeDisplay$ = 8					; size = 4
?HADExpDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z PROC ; AdvancedHarmTargetingPod::HADExpDisplay
; _this$ = ecx

; 154  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 	float			displayX, displayY;
; 156  : 	float			x, y;
; 157  : 	float			cosAng, sinAng, origCosAng, origSinAng;
; 158  :     float			EXP1OffsetX, EXP1OffsetY, EXP2OffsetX, EXP2OffsetY;
; 159  : 	float			yawOffsetAng;
; 160  : 	float			origDisplayX, origDisplayY;
; 161  : 	DWORD tempColor;
; 162  : 	GroundListElement*	tmpElement;
; 163  : 	mlTrig			trig, trig2;
; 164  : 	FireControlComputer* FCC = ((SimVehicleClass*)platform)->GetFCC();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax+460]
	call	edx
	mov	DWORD PTR _FCC$[ebp], eax

; 165  : 	
; 166  : 	// Let the base class do the basics
; 167  : 	HarmTargetingPod::HADExpDisplay( activeDisplay );

	mov	eax, DWORD PTR _activeDisplay$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HADExpDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z ; HarmTargetingPod::HADExpDisplay

; 168  : 
; 169  : 	// Set up the trig functions of our heading when entered zoom mode
; 170  : 	mlSinCos (&trig, yawBackup);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+100]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _trig$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 171  : 	cosAng = trig.cos;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _cosAng$[ebp], xmm0

; 172  : 	sinAng = trig.sin;

	movss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _sinAng$[ebp], xmm0

; 173  : 
; 174  : 	// Set up the trig functions of our heading 
; 175  : 	mlSinCos ( &trig2, platform->Yaw() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _trig2$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 176  : 	origCosAng = trig2.cos;

	movss	xmm0, DWORD PTR _trig2$[ebp+4]
	movss	DWORD PTR _origCosAng$[ebp], xmm0

; 177  : 	origSinAng = trig2.sin;

	movss	xmm0, DWORD PTR _trig2$[ebp]
	movss	DWORD PTR _origSinAng$[ebp], xmm0

; 178  : 
; 179  : 	// Draw all known emmitters
; 180  : 	for (tmpElement = FCC->GetFirstGroundElement(); tmpElement; tmpElement = tmpElement->GetNext())

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetFirstGroundElement@FireControlComputer@@QAEPAVGroundListElement@@XZ ; FireControlComputer::GetFirstGroundElement
	mov	DWORD PTR _tmpElement$[ebp], eax
	jmp	SHORT $LN14@HADExpDisp
$LN13@HADExpDisp:
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?GetNext@GroundListElement@@QAEPAV1@XZ	; GroundListElement::GetNext
	mov	DWORD PTR _tmpElement$[ebp], eax
$LN14@HADExpDisp:
	cmp	DWORD PTR _tmpElement$[ebp], 0
	je	$LN12@HADExpDisp

; 181  : 	{
; 182  : 	    if (tmpElement->BaseObject() == NULL) { continue; }

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	test	eax, eax
	jne	SHORT $LN11@HADExpDisp
	jmp	SHORT $LN13@HADExpDisp
$LN11@HADExpDisp:

; 183  : 
; 184  : 		// Check if emitter is on priority list
; 185  : 		if ( !IsInPriorityList ( tmpElement->symbol ) ) { continue; }

	mov	edx, DWORD PTR _tmpElement$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsInPriorityList@HarmTargetingPod@@IAE_NH@Z ; HarmTargetingPod::IsInPriorityList
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN10@HADExpDisp
	jmp	SHORT $LN13@HADExpDisp
$LN10@HADExpDisp:

; 186  : 
; 187  : 		// Hold original positions to keep track if locked target hadn't past 3-9 o'clock line
; 188  : 		y = (tmpElement->BaseObject()->XPos() - platform->XPos()) * FT_TO_NM / displayRange * HTS_DISPLAY_RADIUS;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv868[ebp]
	movss	xmm0, DWORD PTR tv868[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv1130[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv873[ebp]
	movss	xmm0, DWORD PTR tv1130[ebp]
	subss	xmm0, DWORD PTR tv873[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [eax+116]
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3fb33333
	movss	DWORD PTR _y$[ebp], xmm0

; 189  : 		x = (tmpElement->BaseObject()->YPos() - platform->YPos()) * FT_TO_NM / displayRange * HTS_DISPLAY_RADIUS;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv879[ebp]
	movss	xmm0, DWORD PTR tv879[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv1132[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv884[ebp]
	movss	xmm0, DWORD PTR tv1132[ebp]
	subss	xmm0, DWORD PTR tv884[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [edx+116]
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3fb33333
	movss	DWORD PTR _x$[ebp], xmm0

; 190  : 
; 191  : 		origDisplayX = origCosAng * x - origSinAng * y;

	movss	xmm0, DWORD PTR _origCosAng$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _origSinAng$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _origDisplayX$[ebp], xmm0

; 192  : 		origDisplayY = origSinAng * x + origCosAng * y + HTS_Y_OFFSET;

	movss	xmm0, DWORD PTR _origSinAng$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _origCosAng$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR _origDisplayY$[ebp], xmm0

; 193  : 
; 194  : 		// Compute the world space oriented, display space scaled, obacked up ownship relative position of the emitter
; 195  : 		y = (tmpElement->BaseObject()->XPos() - XPosBackup) * FT_TO_NM / displayRange * HTS_DISPLAY_RADIUS;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv894[ebp]
	movss	xmm0, DWORD PTR tv894[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+104]
	mulss	xmm0, DWORD PTR __real@392c987a
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx+116]
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3fb33333
	movss	DWORD PTR _y$[ebp], xmm0

; 196  : 		x = (tmpElement->BaseObject()->YPos() - YPosBackup) * FT_TO_NM / displayRange * HTS_DISPLAY_RADIUS;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv901[ebp]
	movss	xmm0, DWORD PTR tv901[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+108]
	mulss	xmm0, DWORD PTR __real@392c987a
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [eax+116]
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3fb33333
	movss	DWORD PTR _x$[ebp], xmm0

; 197  : 
; 198  : 		// Rotate it into heading up space and translate it down to deal with our vertical offset
; 199  : 		displayX = cosAng * x - sinAng * y;

	movss	xmm0, DWORD PTR _cosAng$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _sinAng$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _displayX$[ebp], xmm0

; 200  : 		displayY = sinAng * x + cosAng * y;

	movss	xmm0, DWORD PTR _sinAng$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _cosAng$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _displayY$[ebp], xmm0

; 201  : 		
; 202  : 		// Deal with the EXP1 offset
; 203  : 		EXP1OffsetX = 2.0f * HadOrigCursorX;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx+84]
	movss	DWORD PTR _EXP1OffsetX$[ebp], xmm0

; 204  : 		EXP1OffsetY = 2.0f * HadOrigCursorY;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+88]
	movss	DWORD PTR _EXP1OffsetY$[ebp], xmm0

; 205  : 		
; 206  : 		displayX -= EXP1OffsetX;

	movss	xmm0, DWORD PTR _displayX$[ebp]
	subss	xmm0, DWORD PTR _EXP1OffsetX$[ebp]
	movss	DWORD PTR _displayX$[ebp], xmm0

; 207  : 		displayY -= EXP1OffsetY;

	movss	xmm0, DWORD PTR _displayY$[ebp]
	subss	xmm0, DWORD PTR _EXP1OffsetY$[ebp]
	movss	DWORD PTR _displayY$[ebp], xmm0

; 208  : 
; 209  :         // Here also add the EXP2 offset if appropriate
; 210  : 		if ( HadZoomMode == EXP2 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+180], 2
	jne	$LN9@HADExpDisp

; 211  : 		{
; 212  : 			EXP2OffsetX = 2.0f * HadOrigCursorX + 2.0f * HadOrigCursorX2;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx+84]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [edx+92]
	addss	xmm0, xmm1
	movss	DWORD PTR _EXP2OffsetX$[ebp], xmm0

; 213  : 			EXP2OffsetY = 2.0f * HadOrigCursorY + 2.0f * HadOrigCursorY2;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+88]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [ecx+96]
	addss	xmm0, xmm1
	movss	DWORD PTR _EXP2OffsetY$[ebp], xmm0

; 214  : 
; 215  : 			EXP2OffsetY += 2.0f * HTS_Y_OFFSET;

	movss	xmm0, DWORD PTR _EXP2OffsetY$[ebp]
	addss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _EXP2OffsetY$[ebp], xmm0

; 216  : 
; 217  : 			if ( displayRange < 10 )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+116], 10			; 0000000aH
	jge	SHORT $LN7@HADExpDisp

; 218  : 			{
; 219  : 				EXP2OffsetY -= HTS_Y_OFFSET / 2.0f;

	movss	xmm0, DWORD PTR _EXP2OffsetY$[ebp]
	subss	xmm0, DWORD PTR __real@be800000
	movss	DWORD PTR _EXP2OffsetY$[ebp], xmm0

; 220  : 
; 221  : 				if ( displayRange < 5 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+116], 5
	jge	SHORT $LN7@HADExpDisp

; 222  : 				{
; 223  : 					EXP2OffsetY -= HTS_Y_OFFSET / 2.0f;

	movss	xmm0, DWORD PTR _EXP2OffsetY$[ebp]
	subss	xmm0, DWORD PTR __real@be800000
	movss	DWORD PTR _EXP2OffsetY$[ebp], xmm0
$LN7@HADExpDisp:

; 224  : 				}
; 225  : 			}
; 226  : 
; 227  : 			displayX -= EXP2OffsetX;

	movss	xmm0, DWORD PTR _displayX$[ebp]
	subss	xmm0, DWORD PTR _EXP2OffsetX$[ebp]
	movss	DWORD PTR _displayX$[ebp], xmm0

; 228  : 			displayY -= EXP2OffsetY;

	movss	xmm0, DWORD PTR _displayY$[ebp]
	subss	xmm0, DWORD PTR _EXP2OffsetY$[ebp]
	movss	DWORD PTR _displayY$[ebp], xmm0
$LN9@HADExpDisp:

; 229  : 		}
; 230  : 
; 231  : 		// Skip this one if its off screen
; 232  : 		if ((fabs(displayX) > 1.0f) || (fabs(displayY) > 1.0f)) { continue; }

	push	ecx
	movss	xmm0, DWORD PTR _displayX$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv935[ebp]
	movss	xmm0, DWORD PTR tv935[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	ja	SHORT $LN5@HADExpDisp
	push	ecx
	movss	xmm0, DWORD PTR _displayY$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv941[ebp]
	movss	xmm0, DWORD PTR tv941[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN6@HADExpDisp
$LN5@HADExpDisp:
	jmp	$LN13@HADExpDisp
$LN6@HADExpDisp:

; 233  : 
; 234  : 		// JB 010726 Clear the designated target if behind the 3/9 line.
; 235  : 		if ( origDisplayY - HTS_Y_OFFSET < 0 )

	movss	xmm0, DWORD PTR _origDisplayY$[ebp]
	subss	xmm0, DWORD PTR __real@bf000000
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@HADExpDisp

; 236  : 		{
; 237  : 			if ( lockedTarget && tmpElement->BaseObject() == lockedTarget->BaseData() )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN3@HADExpDisp
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	esi, eax
	jne	SHORT $LN3@HADExpDisp

; 238  : 			{
; 239  : 				FCC->dropTrackCmd = TRUE;

	mov	eax, DWORD PTR _FCC$[ebp]
	mov	BYTE PTR [eax+185], 1
$LN3@HADExpDisp:

; 240  : 			}
; 241  : 		}
; 242  : 
; 243  : 		DrawEmitter (tmpElement, displayX, displayY, origDisplayY);

	lea	ecx, DWORD PTR _origDisplayY$[ebp]
	push	ecx
	lea	edx, DWORD PTR _displayY$[ebp]
	push	edx
	lea	eax, DWORD PTR _displayX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawEmitter@AdvancedHarmTargetingPod@@AAEXPAVGroundListElement@@AAM11@Z ; AdvancedHarmTargetingPod::DrawEmitter

; 244  : 
; 245  : 		// Mark the locked target
; 246  :         if (origDisplayY - HTS_Y_OFFSET > 0 && lockedTarget && tmpElement->BaseObject() == lockedTarget->BaseData())

	movss	xmm0, DWORD PTR _origDisplayY$[ebp]
	subss	xmm0, DWORD PTR __real@bf000000
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN2@HADExpDisp
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	$LN2@HADExpDisp
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	esi, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	esi, eax
	jne	$LN2@HADExpDisp

; 247  : 		{
; 248  : 			tempColor = display->Color();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+108]
	call	eax
	mov	DWORD PTR _tempColor$[ebp], eax

; 249  : 			display->SetColor( GetMfdColor(MFD_WHITE) );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 250  : 			display->Line (-CURSOR_SIZE, -CURSOR_SIZE, -CURSOR_SIZE, CURSOR_SIZE);

	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 251  : 			display->Line ( CURSOR_SIZE, -CURSOR_SIZE,  CURSOR_SIZE, CURSOR_SIZE);

	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 252  : 			display->Line ( -CURSOR_SIZE, CURSOR_SIZE,  CURSOR_SIZE, CURSOR_SIZE);

	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 253  : 			display->Line ( -CURSOR_SIZE, -CURSOR_SIZE,  CURSOR_SIZE, -CURSOR_SIZE);

	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 254  : 			handedoff = true;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+112], 1
$LN2@HADExpDisp:

; 255  : 		}
; 256  : 
; 257  : 		display->AdjustOriginInViewport (-displayX, -displayY);

	movss	xmm0, DWORD PTR _displayY$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _displayX$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 258  : 		display->SetColor( 0xFF00FF00 );

	push	-16711936				; ff00ff00H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 259  : 	}

	jmp	$LN13@HADExpDisp
$LN12@HADExpDisp:

; 260  : 
; 261  : 	// Now draw the ownship symbol in relation to the zoomed area
; 262  : 	y = (platform->XPos() - XPosBackup) * FT_TO_NM / displayRange * HTS_DISPLAY_RADIUS;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1023[ebp]
	movss	xmm0, DWORD PTR tv1023[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+104]
	mulss	xmm0, DWORD PTR __real@392c987a
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [edx+116]
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3fb33333
	movss	DWORD PTR _y$[ebp], xmm0

; 263  : 	x = (platform->YPos() - YPosBackup) * FT_TO_NM / displayRange * HTS_DISPLAY_RADIUS;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1030[ebp]
	movss	xmm0, DWORD PTR tv1030[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+108]
	mulss	xmm0, DWORD PTR __real@392c987a
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [edx+116]
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3fb33333
	movss	DWORD PTR _x$[ebp], xmm0

; 264  : 
; 265  : 	// Rotate it into heading up space and translate it down to deal with our vertical offset
; 266  : 	displayX = cosAng * x - sinAng * y;

	movss	xmm0, DWORD PTR _cosAng$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _sinAng$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _displayX$[ebp], xmm0

; 267  : 	displayY = sinAng * x + cosAng * y;

	movss	xmm0, DWORD PTR _sinAng$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _cosAng$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _displayY$[ebp], xmm0

; 268  : 
; 269  : 	// Add the EXP1 offset
; 270  : 	displayX -= EXP1OffsetX;

	movss	xmm0, DWORD PTR _displayX$[ebp]
	subss	xmm0, DWORD PTR _EXP1OffsetX$[ebp]
	movss	DWORD PTR _displayX$[ebp], xmm0

; 271  : 	displayY -= EXP1OffsetY;

	movss	xmm0, DWORD PTR _displayY$[ebp]
	subss	xmm0, DWORD PTR _EXP1OffsetY$[ebp]
	movss	DWORD PTR _displayY$[ebp], xmm0

; 272  : 
; 273  : 	// Here also add the EXP2 offset if appropriate
; 274  : 	if ( HadZoomMode == EXP2 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+180], 2
	jne	SHORT $LN1@HADExpDisp

; 275  : 	{
; 276  : 		displayX -= EXP2OffsetX;

	movss	xmm0, DWORD PTR _displayX$[ebp]
	subss	xmm0, DWORD PTR _EXP2OffsetX$[ebp]
	movss	DWORD PTR _displayX$[ebp], xmm0

; 277  : 		displayY -= EXP2OffsetY;

	movss	xmm0, DWORD PTR _displayY$[ebp]
	subss	xmm0, DWORD PTR _EXP2OffsetY$[ebp]
	movss	DWORD PTR _displayY$[ebp], xmm0
$LN1@HADExpDisp:

; 278  : 	}
; 279  : 
; 280  : 	tempColor = display->Color();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+108]
	call	eax
	mov	DWORD PTR _tempColor$[ebp], eax

; 281  : 	display->AdjustOriginInViewport (displayX, displayY);

	push	ecx
	movss	xmm0, DWORD PTR _displayY$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _displayX$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 282  : 
; 283  : 	// RV - I-Hawk - Ownship "airplane" marker. Here the display is relatively "static" and the
; 284  : 	// only thing that moves and turn is the ownship AC marker
; 285  : 	display->SetColor( GetMfdColor( MFD_CYAN ) );

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 286  : 	static const float	NOSE	= 0.02f;
; 287  : 	static const float	TAIL	= 0.08f;
; 288  : 	static const float	WING	= 0.06f;
; 289  : 	static const float	TAIL_WING	= 0.02f;
; 290  : 
; 291  : 	yawOffsetAng = platform->Yaw() - yawBackup;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv1059[ebp]
	movss	xmm0, DWORD PTR tv1059[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+100]
	movss	DWORD PTR _yawOffsetAng$[ebp], xmm0

; 292  : 	float yawOffsetAng2 = yawBackup - platform->Yaw();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv1065[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+100]
	subss	xmm0, DWORD PTR tv1065[ebp]
	movss	DWORD PTR _yawOffsetAng2$[ebp], xmm0

; 293  : 	mlTrig offset, offset2;
; 294  : 	mlSinCos( &offset, yawOffsetAng );

	push	ecx
	movss	xmm0, DWORD PTR _yawOffsetAng$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _offset$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos

; 295  : 	mlSinCos( &offset2, yawOffsetAng2 );

	add	esp, 4
	movss	xmm0, DWORD PTR _yawOffsetAng2$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _offset2$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 296  : 
; 297  : 	sinAng = offset2.sin;

	movss	xmm0, DWORD PTR _offset2$[ebp]
	movss	DWORD PTR _sinAng$[ebp], xmm0

; 298  : 	cosAng = offset2.cos;

	movss	xmm0, DWORD PTR _offset2$[ebp+4]
	movss	DWORD PTR _cosAng$[ebp], xmm0

; 299  : 
; 300  : 	float r;
; 301  : 	float offsetX, offsetY;
; 302  : 
; 303  : 	r = WING * 0.7f;

	movss	xmm0, DWORD PTR ?WING@?CC@??HADExpDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	mulss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR _r$[ebp], xmm0

; 304  : 	x = r * cosAng;

	movss	xmm0, DWORD PTR _r$[ebp]
	mulss	xmm0, DWORD PTR _cosAng$[ebp]
	movss	DWORD PTR _x$[ebp], xmm0

; 305  : 	y = r * sinAng;

	movss	xmm0, DWORD PTR _r$[ebp]
	mulss	xmm0, DWORD PTR _sinAng$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 306  : 
; 307  : 	offsetY = 0.05f * cosAng;

	movss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR _cosAng$[ebp]
	movss	DWORD PTR _offsetY$[ebp], xmm0

; 308  : 	offsetX = 0.05f * sinAng;

	movss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR _sinAng$[ebp]
	movss	DWORD PTR _offsetX$[ebp], xmm0

; 309  : 
; 310  : 	display->Line(  x, y, -x, -y);

	movss	xmm0, DWORD PTR _y$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 311  : 
; 312  : 	r = TAIL_WING;

	movss	xmm0, DWORD PTR ?TAIL_WING@?CC@??HADExpDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR _r$[ebp], xmm0

; 313  : 	x = r * cosAng;

	movss	xmm0, DWORD PTR _r$[ebp]
	mulss	xmm0, DWORD PTR _cosAng$[ebp]
	movss	DWORD PTR _x$[ebp], xmm0

; 314  : 	y = r * sinAng;

	movss	xmm0, DWORD PTR _r$[ebp]
	mulss	xmm0, DWORD PTR _sinAng$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 315  : 
; 316  : 	offsetY = 0.04f * cosAng;

	movss	xmm0, DWORD PTR __real@3d23d70a
	mulss	xmm0, DWORD PTR _cosAng$[ebp]
	movss	DWORD PTR _offsetY$[ebp], xmm0

; 317  : 	offsetX = 0.04f * sinAng;

	movss	xmm0, DWORD PTR __real@3d23d70a
	mulss	xmm0, DWORD PTR _sinAng$[ebp]
	movss	DWORD PTR _offsetX$[ebp], xmm0

; 318  : 
; 319  : 	sinAng = offset.sin;

	movss	xmm0, DWORD PTR _offset$[ebp]
	movss	DWORD PTR _sinAng$[ebp], xmm0

; 320  : 	cosAng = offset.cos;

	movss	xmm0, DWORD PTR _offset$[ebp+4]
	movss	DWORD PTR _cosAng$[ebp], xmm0

; 321  : 
; 322  : 	r = (NOSE + TAIL) / 1.35f;

	movss	xmm0, DWORD PTR ?NOSE@?CC@??HADExpDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	addss	xmm0, DWORD PTR ?TAIL@?CC@??HADExpDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	divss	xmm0, DWORD PTR __real@3faccccd
	movss	DWORD PTR _r$[ebp], xmm0

; 323  : 	y = r * cosAng;

	movss	xmm0, DWORD PTR _r$[ebp]
	mulss	xmm0, DWORD PTR _cosAng$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 324  : 	x = r * sinAng;

	movss	xmm0, DWORD PTR _r$[ebp]
	mulss	xmm0, DWORD PTR _sinAng$[ebp]
	movss	DWORD PTR _x$[ebp], xmm0

; 325  : 	display->Line(  x, y, -x, -y);

	movss	xmm0, DWORD PTR _y$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 326  : 
; 327  : 	display->SetColor ( 0xFF00FF00 );

	push	-16711936				; ff00ff00H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 328  : 	display->AdjustOriginInViewport (-displayX, -displayY);

	movss	xmm0, DWORD PTR _displayY$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _displayX$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 329  : 
; 330  : 	// Adjust our viewport origin
; 331  : 	display->AdjustOriginInViewport (0.0f, HTS_Y_OFFSET);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 332  : 
; 333  : 	// Reset our display parameters
; 334  : 	display->ZeroRotationAboutOrigin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ ; VirtualDisplay::ZeroRotationAboutOrigin

; 335  : 	display->CenterOriginInViewport ();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 336  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?HADExpDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z ENDP ; AdvancedHarmTargetingPod::HADExpDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\advancedhts.cpp
_TEXT	SEGMENT
_trig$ = -112						; size = 8
tv739 = -104						; size = 4
tv732 = -100						; size = 4
_wpZ$ = -96						; size = 4
tv721 = -92						; size = 4
tv714 = -88						; size = 4
tv702 = -84						; size = 4
tv619 = -80						; size = 4
tv613 = -76						; size = 4
tv602 = -72						; size = 4
tv762 = -68						; size = 4
tv597 = -64						; size = 4
tv591 = -60						; size = 4
tv760 = -56						; size = 4
tv586 = -52						; size = 4
_FCC$ = -48						; size = 4
_cosAng$ = -44						; size = 4
_sinAng$ = -40						; size = 4
_wpY$ = -36						; size = 4
_wpX$ = -32						; size = 4
_y2$ = -28						; size = 4
_x2$ = -24						; size = 4
_displayX$ = -20					; size = 4
_curWaypoint$ = -16					; size = 4
_displayY$ = -12					; size = 4
_tmpElement$ = -8					; size = 4
_this$ = -4						; size = 4
_activeDisplay$ = 8					; size = 4
?HADDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z PROC ; AdvancedHarmTargetingPod::HADDisplay
; _this$ = ecx

; 58   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 	float			displayX, displayY;
; 60   : 	float			x2, y2;
; 61   : 	float			wpX, wpY, wpZ;
; 62   : 	float			cosAng, sinAng;
; 63   : 	WayPointClass	*curWaypoint;
; 64   : 	GroundListElement*	tmpElement;
; 65   : 	mlTrig			trig;
; 66   : 	FireControlComputer* FCC = ((SimVehicleClass*)platform)->GetFCC();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax+460]
	call	edx
	mov	DWORD PTR _FCC$[ebp], eax

; 67   : 	
; 68   : 	// Let the base class do the basics
; 69   : 	HarmTargetingPod::HADDisplay( activeDisplay );

	mov	eax, DWORD PTR _activeDisplay$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z ; HarmTargetingPod::HADDisplay

; 70   : 
; 71   : 	// Set up the trig functions of our current heading
; 72   : 	mlSinCos (&trig, platform->Yaw());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _trig$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 73   : 	cosAng = trig.cos;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _cosAng$[ebp], xmm0

; 74   : 	sinAng = trig.sin;

	movss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _sinAng$[ebp], xmm0

; 75   : 	
; 76   : 	// Draw all known emmitters
; 77   : 	for (tmpElement = FCC->GetFirstGroundElement(); tmpElement; tmpElement = tmpElement->GetNext())

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetFirstGroundElement@FireControlComputer@@QAEPAVGroundListElement@@XZ ; FireControlComputer::GetFirstGroundElement
	mov	DWORD PTR _tmpElement$[ebp], eax
	jmp	SHORT $LN13@HADDisplay
$LN12@HADDisplay:
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?GetNext@GroundListElement@@QAEPAV1@XZ	; GroundListElement::GetNext
	mov	DWORD PTR _tmpElement$[ebp], eax
$LN13@HADDisplay:
	cmp	DWORD PTR _tmpElement$[ebp], 0
	je	$LN11@HADDisplay

; 78   : 	{
; 79   : 		if (tmpElement->BaseObject() == NULL) { continue; }

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	test	eax, eax
	jne	SHORT $LN10@HADDisplay
	jmp	SHORT $LN12@HADDisplay
$LN10@HADDisplay:

; 80   : 
; 81   : 		// Check if emitter is on priority list
; 82   : 		if ( !IsInPriorityList ( tmpElement->symbol ) ) { continue; }

	mov	eax, DWORD PTR _tmpElement$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsInPriorityList@HarmTargetingPod@@IAE_NH@Z ; HarmTargetingPod::IsInPriorityList
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN9@HADDisplay
	jmp	SHORT $LN12@HADDisplay
$LN9@HADDisplay:

; 83   : 
; 84   : 		// Compute the world space oriented, display space scaled, ownship relative postion of the emitter
; 85   : 		y2 = (tmpElement->BaseObject()->XPos() - platform->XPos()) * FT_TO_NM / displayRange * HTS_DISPLAY_RADIUS;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv586[ebp]
	movss	xmm0, DWORD PTR tv586[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv760[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv591[ebp]
	movss	xmm0, DWORD PTR tv760[ebp]
	subss	xmm0, DWORD PTR tv591[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx+116]
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3fb33333
	movss	DWORD PTR _y2$[ebp], xmm0

; 86   : 		x2 = (tmpElement->BaseObject()->YPos() - platform->YPos()) * FT_TO_NM / displayRange * HTS_DISPLAY_RADIUS;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv597[ebp]
	movss	xmm0, DWORD PTR tv597[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv762[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv602[ebp]
	movss	xmm0, DWORD PTR tv762[ebp]
	subss	xmm0, DWORD PTR tv602[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [eax+116]
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3fb33333
	movss	DWORD PTR _x2$[ebp], xmm0

; 87   : 
; 88   : 		// Rotate it into heading up space and translate it down to deal with our vertical offset
; 89   : 		displayX = cosAng * x2 - sinAng * y2;

	movss	xmm0, DWORD PTR _cosAng$[ebp]
	mulss	xmm0, DWORD PTR _x2$[ebp]
	movss	xmm1, DWORD PTR _sinAng$[ebp]
	mulss	xmm1, DWORD PTR _y2$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _displayX$[ebp], xmm0

; 90   : 		displayY = sinAng * x2 + cosAng * y2 + HTS_Y_OFFSET;

	movss	xmm0, DWORD PTR _sinAng$[ebp]
	mulss	xmm0, DWORD PTR _x2$[ebp]
	movss	xmm1, DWORD PTR _cosAng$[ebp]
	mulss	xmm1, DWORD PTR _y2$[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR _displayY$[ebp], xmm0

; 91   : 
; 92   : 		// Skip this one if its off screen
; 93   : 		if ((fabs(displayX) > 1.0f) || (fabs(displayY) > 1.0f)) { continue; }

	push	ecx
	movss	xmm0, DWORD PTR _displayX$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv613[ebp]
	movss	xmm0, DWORD PTR tv613[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	ja	SHORT $LN7@HADDisplay
	push	ecx
	movss	xmm0, DWORD PTR _displayY$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv619[ebp]
	movss	xmm0, DWORD PTR tv619[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN8@HADDisplay
$LN7@HADDisplay:
	jmp	$LN12@HADDisplay
$LN8@HADDisplay:

; 94   : 
; 95   : 		// JB 010726 Clear the designated target if behind the 3/9 line.
; 96   : 		if (displayY - HTS_Y_OFFSET < 0)

	movss	xmm0, DWORD PTR _displayY$[ebp]
	subss	xmm0, DWORD PTR __real@bf000000
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN5@HADDisplay

; 97   : 		{
; 98   : 			if (lockedTarget && tmpElement->BaseObject() == lockedTarget->BaseData())

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN5@HADDisplay
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	esi, eax
	jne	SHORT $LN5@HADDisplay

; 99   : 			{
; 100  : 				FCC->dropTrackCmd = TRUE;

	mov	eax, DWORD PTR _FCC$[ebp]
	mov	BYTE PTR [eax+185], 1
$LN5@HADDisplay:

; 101  : 			}
; 102  : 		}
; 103  : 
; 104  : 		DrawEmitter ( tmpElement, displayX, displayY, displayY );

	lea	ecx, DWORD PTR _displayY$[ebp]
	push	ecx
	lea	edx, DWORD PTR _displayY$[ebp]
	push	edx
	lea	eax, DWORD PTR _displayX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawEmitter@AdvancedHarmTargetingPod@@AAEXPAVGroundListElement@@AAM11@Z ; AdvancedHarmTargetingPod::DrawEmitter

; 105  : 
; 106  : 		// Mark the locked target
; 107  : 		// Mark the locked target
; 108  : 		if (displayY - HTS_Y_OFFSET > 0 && lockedTarget && tmpElement->BaseObject() == lockedTarget->BaseData())

	movss	xmm0, DWORD PTR _displayY$[ebp]
	subss	xmm0, DWORD PTR __real@bf000000
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN4@HADDisplay
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	$LN4@HADDisplay
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	esi, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	esi, eax
	jne	$LN4@HADDisplay

; 109  : 		{
; 110  : 			display->SetColor( GetMfdColor(MFD_WHITE) );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 111  : 			display->Line (-CURSOR_SIZE, -CURSOR_SIZE, -CURSOR_SIZE, CURSOR_SIZE);

	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 112  : 			display->Line ( CURSOR_SIZE, -CURSOR_SIZE,  CURSOR_SIZE, CURSOR_SIZE);

	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 113  : 			display->Line ( -CURSOR_SIZE, CURSOR_SIZE,  CURSOR_SIZE, CURSOR_SIZE);

	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 114  : 			display->Line ( -CURSOR_SIZE, -CURSOR_SIZE,  CURSOR_SIZE, -CURSOR_SIZE);

	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 115  : 			handedoff = true; // Immediate hadnoff in HAD mode 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+112], 1
$LN4@HADDisplay:

; 116  : 		}
; 117  : 
; 118  : 		display->AdjustOriginInViewport (-displayX, -displayY);

	movss	xmm0, DWORD PTR _displayY$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _displayX$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 119  : 	}

	jmp	$LN12@HADDisplay
$LN11@HADDisplay:

; 120  : 
; 121  : 	// Adjust our viewport origin
; 122  : 	display->AdjustOriginInViewport (0.0f, HTS_Y_OFFSET);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 123  : 	
; 124  : 	// Draw the waypoints
; 125  : 	display->SetColor( 0xFF00FF00 );

	push	-16711936				; ff00ff00H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 126  : 	display->AdjustRotationAboutOrigin(-platform->Yaw());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv702[ebp]
	movss	xmm0, DWORD PTR tv702[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?AdjustRotationAboutOrigin@VirtualDisplay@@QAEXM@Z ; VirtualDisplay::AdjustRotationAboutOrigin

; 127  : 	curWaypoint = ((SimVehicleClass*)platform)->waypoint;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+732]
	mov	DWORD PTR _curWaypoint$[ebp], edx

; 128  : 	if (curWaypoint)

	cmp	DWORD PTR _curWaypoint$[ebp], 0
	je	$LN1@HADDisplay

; 129  : 	{
; 130  : 		curWaypoint->GetLocation (&wpX, &wpY, &wpZ);

	lea	eax, DWORD PTR _wpZ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wpY$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wpX$[ebp]
	push	edx
	mov	ecx, DWORD PTR _curWaypoint$[ebp]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation

; 131  : 		y2 = (wpX - platform->XPos()) * FT_TO_NM / displayRange * HTS_DISPLAY_RADIUS;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv714[ebp]
	movss	xmm0, DWORD PTR _wpX$[ebp]
	subss	xmm0, DWORD PTR tv714[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx+116]
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3fb33333
	movss	DWORD PTR _y2$[ebp], xmm0

; 132  : 		x2 = (wpY - platform->YPos()) * FT_TO_NM / displayRange * HTS_DISPLAY_RADIUS;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv721[ebp]
	movss	xmm0, DWORD PTR _wpY$[ebp]
	subss	xmm0, DWORD PTR tv721[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [eax+116]
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3fb33333
	movss	DWORD PTR _x2$[ebp], xmm0

; 133  : 		curWaypoint = curWaypoint->GetNextWP();

	mov	ecx, DWORD PTR _curWaypoint$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _curWaypoint$[ebp], eax
$LN2@HADDisplay:

; 134  : 
; 135  : 		while (curWaypoint)

	cmp	DWORD PTR _curWaypoint$[ebp], 0
	je	$LN1@HADDisplay

; 136  : 		{
; 137  : 			curWaypoint->GetLocation (&wpX, &wpY, &wpZ);

	lea	ecx, DWORD PTR _wpZ$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wpY$[ebp]
	push	edx
	lea	eax, DWORD PTR _wpX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _curWaypoint$[ebp]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation

; 138  : 			displayY = (wpX - platform->XPos()) * FT_TO_NM / displayRange * HTS_DISPLAY_RADIUS;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv732[ebp]
	movss	xmm0, DWORD PTR _wpX$[ebp]
	subss	xmm0, DWORD PTR tv732[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [edx+116]
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3fb33333
	movss	DWORD PTR _displayY$[ebp], xmm0

; 139  : 			displayX = (wpY - platform->YPos()) * FT_TO_NM / displayRange * HTS_DISPLAY_RADIUS;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv739[ebp]
	movss	xmm0, DWORD PTR _wpY$[ebp]
	subss	xmm0, DWORD PTR tv739[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx+116]
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3fb33333
	movss	DWORD PTR _displayX$[ebp], xmm0

; 140  : 			display->Line (x2, y2, displayX, displayY);

	push	ecx
	movss	xmm0, DWORD PTR _displayY$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _displayX$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y2$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x2$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 141  : 			x2 = displayX;

	movss	xmm0, DWORD PTR _displayX$[ebp]
	movss	DWORD PTR _x2$[ebp], xmm0

; 142  : 			y2 = displayY;

	movss	xmm0, DWORD PTR _displayY$[ebp]
	movss	DWORD PTR _y2$[ebp], xmm0

; 143  : 			curWaypoint = curWaypoint->GetNextWP();

	mov	ecx, DWORD PTR _curWaypoint$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _curWaypoint$[ebp], eax

; 144  : 		}

	jmp	$LN2@HADDisplay
$LN1@HADDisplay:

; 145  : 	}
; 146  : 
; 147  : 	// Reset our display parameters
; 148  : 	display->ZeroRotationAboutOrigin();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ ; VirtualDisplay::ZeroRotationAboutOrigin

; 149  : 	display->CenterOriginInViewport ();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 150  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?HADDisplay@AdvancedHarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z ENDP ; AdvancedHarmTargetingPod::HADDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\advancedhts.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1AdvancedHarmTargetingPod@@UAE@XZ PROC		; AdvancedHarmTargetingPod::~AdvancedHarmTargetingPod
; _this$ = ecx

; 53   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7AdvancedHarmTargetingPod@@6B@

; 54   : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1HarmTargetingPod@@UAE@XZ		; HarmTargetingPod::~HarmTargetingPod
	mov	esp, ebp
	pop	ebp
	ret	0
??1AdvancedHarmTargetingPod@@UAE@XZ ENDP		; AdvancedHarmTargetingPod::~AdvancedHarmTargetingPod
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\advancedhts.cpp
_TEXT	SEGMENT
_playerAC$ = -24					; size = 4
_Sms$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_idx$ = 8						; size = 4
_self$ = 12						; size = 4
??0AdvancedHarmTargetingPod@@QAE@HPAVSimMoverClass@@@Z PROC ; AdvancedHarmTargetingPod::AdvancedHarmTargetingPod
; _this$ = ecx

; 29   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0AdvancedHarmTargetingPod@@QAE@HPAVSimMoverClass@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _self$[ebp]
	push	eax
	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0HarmTargetingPod@@QAE@HPAVSimMoverClass@@@Z ; HarmTargetingPod::HarmTargetingPod
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7AdvancedHarmTargetingPod@@6B@

; 30   : 	curMissile = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+228], 0

; 31   : 	curTarget =  NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+220], 0

; 32   : 	curTargetWP = prevTargetWP = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+236], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+232], 0

; 33   : 	curTOF = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+240], xmm0

; 34   : 	timer = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+248], 0

; 35   : 	prevTOF = -1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax+244], xmm0

; 36   : 	prevTargteSymbol = prevWPNum = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+256], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+252], 0

; 37   : 	missileLaunched = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+260], 0

; 38   : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 39   : 	SMSClass* Sms;
; 40   : 
; 41   : 	if ( playerAC )

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	SHORT $LN1@AdvancedHa

; 42   : 	{
; 43   : 		Sms = playerAC->Sms;

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [ecx+940]
	mov	DWORD PTR _Sms$[ebp], edx

; 44   : 
; 45   : 		if ( Sms )

	cmp	DWORD PTR _Sms$[ebp], 0
	je	SHORT $LN1@AdvancedHa

; 46   : 		{
; 47   : 			curMissile = (MissileClass*)(Sms->GetCurrentWeapon());

	mov	eax, DWORD PTR _Sms$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _Sms$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+228], eax
$LN1@AdvancedHa:

; 48   : 		}
; 49   : 	}
; 50   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0AdvancedHarmTargetingPod@@QAE@HPAVSimMoverClass@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1HarmTargetingPod@@UAE@XZ		; HarmTargetingPod::~HarmTargetingPod
__ehhandler$??0AdvancedHarmTargetingPod@@QAE@HPAVSimMoverClass@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0AdvancedHarmTargetingPod@@QAE@HPAVSimMoverClass@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0AdvancedHarmTargetingPod@@QAE@HPAVSimMoverClass@@@Z ENDP ; AdvancedHarmTargetingPod::AdvancedHarmTargetingPod
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\harmpod.h
;	COMDAT ?ClearDTSB@HarmTargetingPod@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
?ClearDTSB@HarmTargetingPod@@IAEXXZ PROC		; HarmTargetingPod::ClearDTSB, COMDAT
; _this$ = ecx

; 146  : 	void			ClearDTSB ( void ) { for ( int i = 0; i < MAX_DTSB_TARGETS; i++ ) DTSBList[i] = 0; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@ClearDTSB
$LN2@ClearDTSB:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@ClearDTSB:
	cmp	DWORD PTR _i$1[ebp], 5
	jge	SHORT $LN4@ClearDTSB
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+124], 0
	jmp	SHORT $LN2@ClearDTSB
$LN4@ClearDTSB:
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearDTSB@HarmTargetingPod@@IAEXXZ ENDP		; HarmTargetingPod::ClearDTSB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\harmpod.h
;	COMDAT ?SetSubMode@HarmTargetingPod@@QAEXW4Submode@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_HarmMode$ = 8						; size = 4
?SetSubMode@HarmTargetingPod@@QAEXW4Submode@1@@Z PROC	; HarmTargetingPod::SetSubMode, COMDAT
; _this$ = ecx

; 85   : 	void			SetSubMode ( Submode HarmMode ) { submode = HarmMode; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _HarmMode$[ebp]
	mov	DWORD PTR [eax+168], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSubMode@HarmTargetingPod@@QAEXW4Submode@1@@Z ENDP	; HarmTargetingPod::SetSubMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\object.h
;	COMDAT ?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ PROC	; SimObjectType::BaseData, COMDAT
; _this$ = ecx

; 92   : 	FalconEntity* BaseData(void) { return baseData.get(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ENDP	; SimObjectType::BaseData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?GetFirstGroundElement@FireControlComputer@@QAEPAVGroundListElement@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFirstGroundElement@FireControlComputer@@QAEPAVGroundListElement@@XZ PROC ; FireControlComputer::GetFirstGroundElement, COMDAT
; _this$ = ecx

; 305  : 	GroundListElement *GetFirstGroundElement() { return grndlist; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+412]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstGroundElement@FireControlComputer@@QAEPAVGroundListElement@@XZ ENDP ; FireControlComputer::GetFirstGroundElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?IsSet@GroundListElement@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_flag$ = 8						; size = 4
?IsSet@GroundListElement@@QAEHH@Z PROC			; GroundListElement::IsSet, COMDAT
; _this$ = ecx

; 45   :     int IsSet (int flag) { return (flags & flag) ? 1 : 0; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsSet
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSet
$LN3@IsSet:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSet:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSet@GroundListElement@@QAEHH@Z ENDP			; GroundListElement::IsSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?GetNext@GroundListElement@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNext@GroundListElement@@QAEPAV1@XZ PROC		; GroundListElement::GetNext, COMDAT
; _this$ = ecx

; 30   :     GroundListElement *GetNext () { return next; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNext@GroundListElement@@QAEPAV1@XZ ENDP		; GroundListElement::GetNext
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ PROC ; GroundListElement::BaseObject, COMDAT
; _this$ = ecx

; 29   :     FalconEntity*	BaseObject(void) {return baseObject;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ENDP ; GroundListElement::BaseObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?GetDisplay@SensorClass@@UAEPAVVirtualDisplay@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDisplay@SensorClass@@UAEPAVVirtualDisplay@@XZ PROC	; SensorClass::GetDisplay, COMDAT
; _this$ = ecx

; 55   : 	VirtualDisplay*	GetDisplay(void)                        { return privateDisplay; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDisplay@SensorClass@@UAEPAVVirtualDisplay@@XZ ENDP	; SensorClass::GetDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?TargetUnderCursor@SensorClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?TargetUnderCursor@SensorClass@@UAE?AVVU_ID@@XZ PROC	; SensorClass::TargetUnderCursor, COMDAT
; _this$ = ecx

; 53   : 	virtual VU_ID TargetUnderCursor (void)                  { return targetUnderCursor; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [eax+40]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?TargetUnderCursor@SensorClass@@UAE?AVVU_ID@@XZ ENDP	; SensorClass::TargetUnderCursor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?SetSeekerPos@SensorClass@@UAEXMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newAz$ = 8						; size = 4
_newEl$ = 12						; size = 4
?SetSeekerPos@SensorClass@@UAEXMM@Z PROC		; SensorClass::SetSeekerPos, COMDAT
; _this$ = ecx

; 51   : 	virtual void SetSeekerPos (float newAz, float newEl)	{ seekerAzCenter = newAz; seekerElCenter = newEl; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _newAz$[ebp]
	movss	DWORD PTR [eax+56], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _newEl$[ebp]
	movss	DWORD PTR [ecx+60], xmm0
	mov	esp, ebp
	pop	ebp
	ret	8
?SetSeekerPos@SensorClass@@UAEXMM@Z ENDP		; SensorClass::SetSeekerPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?UpdateState@SensorClass@@UAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?UpdateState@SensorClass@@UAEXHH@Z PROC			; SensorClass::UpdateState, COMDAT
; _this$ = ecx

; 50   : 	virtual void UpdateState(int, int)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?UpdateState@SensorClass@@UAEXHH@Z ENDP			; SensorClass::UpdateState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?ExecModes@SensorClass@@UAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?ExecModes@SensorClass@@UAEXHH@Z PROC			; SensorClass::ExecModes, COMDAT
; _this$ = ecx

; 49   : 	virtual void ExecModes(int, int)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?ExecModes@SensorClass@@UAEXHH@Z ENDP			; SensorClass::ExecModes
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?IsOn@SensorClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOn@SensorClass@@UAEHXZ PROC				; SensorClass::IsOn, COMDAT
; _this$ = ecx

; 40   : 	virtual BOOL			IsOn(void)				{ return isOn; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsOn@SensorClass@@UAEHXZ ENDP				; SensorClass::IsOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?SetPower@SensorClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 4
?SetPower@SensorClass@@UAEXH@Z PROC			; SensorClass::SetPower, COMDAT
; _this$ = ecx

; 39   : 	virtual void	SetPower (BOOL state)	{ isOn = state; if (!isOn) ClearSensorTarget(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+52], ecx
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+52], 0
	jne	SHORT $LN2@SetPower
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
$LN2@SetPower:
	mov	esp, ebp
	pop	ebp
	ret	4
?SetPower@SensorClass@@UAEXH@Z ENDP			; SensorClass::SetPower
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?SetType@SensorClass@@UAEXW4SensorType@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_senstype$ = 8						; size = 4
?SetType@SensorClass@@UAEXW4SensorType@1@@Z PROC	; SensorClass::SetType, COMDAT
; _this$ = ecx

; 37   : 	virtual void	SetType(SensorType senstype)		{ sensorType = senstype; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _senstype$[ebp]
	mov	DWORD PTR [eax+68], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetType@SensorClass@@UAEXW4SensorType@1@@Z ENDP	; SensorClass::SetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ PROC	; VirtualDisplay::ZeroRotationAboutOrigin, COMDAT
; _this$ = ecx

; 144  :     void ZeroRotationAboutOrigin( void ) { dmatrix.rotation01 = dmatrix.rotation10 = 0.0f, dmatrix.rotation00 = dmatrix.rotation11 = 1.0f; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+84], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+80], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+88], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+76], xmm0
	mov	esp, ebp
	pop	ebp
	ret	0
?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ ENDP	; VirtualDisplay::ZeroRotationAboutOrigin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?CenterOriginInViewport@VirtualDisplay@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CenterOriginInViewport@VirtualDisplay@@QAEXXZ PROC	; VirtualDisplay::CenterOriginInViewport, COMDAT
; _this$ = ecx

; 143  : 	void CenterOriginInViewport( void )  { dmatrix.translationX = 0.0f; dmatrix.translationY = 0.0f; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+68], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+72], xmm0
	mov	esp, ebp
	pop	ebp
	ret	0
?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ENDP	; VirtualDisplay::CenterOriginInViewport
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetNextWP@WayPointClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNextWP@WayPointClass@@QAEPAV1@XZ PROC		; WayPointClass::GetNextWP, COMDAT
; _this$ = ecx

; 175  : 	WayPoint GetNextWP (void)						{ return NextWP; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextWP@WayPointClass@@QAEPAV1@XZ ENDP		; WayPointClass::GetNextWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?mlSinCos@@YAXPAUmlTrig@@M@Z
_TEXT	SEGMENT
_trig$ = 8						; size = 4
_angle$ = 12						; size = 4
?mlSinCos@@YAXPAUmlTrig@@M@Z PROC			; mlSinCos, COMDAT

; 12   : {

	push	ebp
	mov	ebp, esp

; 13   : #if defined(_MSC_VER)
; 14   : 	__asm 
; 15   : 	{
; 16   : 		__asm	mov     ecx, trig;

	mov	ecx, DWORD PTR _trig$[ebp]

; 17   : 		__asm	fld     dword ptr [angle];

	fld	DWORD PTR _angle$[ebp]

; 18   : 		__asm	fsincos;

	fsincos

; 19   : 		__asm	fstp    dword ptr [ecx]trig.cos;

	fstp	DWORD PTR [ecx+4]

; 20   : 		__asm	fstp    dword ptr [ecx]trig.sin;

	fstp	DWORD PTR [ecx]

; 21   : 	}
; 22   : #else
; 23   : 	trig->sin = (Float32)sin(angle);
; 24   : 	trig->cos = (Float32)cos(angle);
; 25   : #endif
; 26   : }

	pop	ebp
	ret	0
?mlSinCos@@YAXPAUmlTrig@@M@Z ENDP			; mlSinCos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Yaw@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Yaw@VuEntity@@QBEMXZ PROC				; VuEntity::Yaw, COMDAT
; _this$ = ecx

; 164  : 	SM_SCALAR Yaw() const { return orient_.yaw_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?Yaw@VuEntity@@QBEMXZ ENDP				; VuEntity::Yaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?atan@@YAMM@Z PROC					; atan, COMDAT

; 505  :         {return (atanf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atanf
	add	esp, 4
	pop	ebp
	ret	0
?atan@@YAMM@Z ENDP					; atan
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 404  :         {return ((float)atan((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_atanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
