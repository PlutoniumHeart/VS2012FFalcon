; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\RWR\PlayerRWR.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
_BSS	SEGMENT
_flash	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
_NEAR_CLIP DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
_DATA	SEGMENT
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_DATA	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?Yaw@VuEntity@@QBEMXZ				; VuEntity::Yaw
PUBLIC	?Roll@VuEntity@@QBEMXZ				; VuEntity::Roll
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	?IsSim@FalconEntity@@QAEHXZ			; FalconEntity::IsSim
PUBLIC	?mlSinCos@@YAXPAUmlTrig@@M@Z			; mlSinCos
PUBLIC	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
PUBLIC	?IsSetFlag@SimBaseClass@@QBEHH@Z		; SimBaseClass::IsSetFlag
PUBLIC	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
PUBLIC	?RdrCycleTime@SimBaseClass@@QAEMXZ		; SimBaseClass::RdrCycleTime
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	?SetType@SensorClass@@UAEXW4SensorType@1@@Z	; SensorClass::SetType
PUBLIC	?IsOn@SensorClass@@UAEHXZ			; SensorClass::IsOn
PUBLIC	?ExecModes@SensorClass@@UAEXHH@Z		; SensorClass::ExecModes
PUBLIC	?UpdateState@SensorClass@@UAEXHH@Z		; SensorClass::UpdateState
PUBLIC	?SetSeekerPos@SensorClass@@UAEXMM@Z		; SensorClass::SetSeekerPos
PUBLIC	?TargetUnderCursor@SensorClass@@UAE?AVVU_ID@@XZ	; SensorClass::TargetUnderCursor
PUBLIC	?GetDisplay@SensorClass@@UAEPAVVirtualDisplay@@XZ ; SensorClass::GetDisplay
PUBLIC	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ	; SimObjectType::BaseData
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ	; VirtualDisplay::CenterOriginInViewport
PUBLIC	?EWSPGM@AircraftClass@@QAE?AW4EWSPGMSwitch@1@XZ	; AircraftClass::EWSPGM
PUBLIC	?GetSpotTime@CampBaseClass@@QBEKXZ		; CampBaseClass::GetSpotTime
PUBLIC	?GetSpotted@CampBaseClass@@QBEFXZ		; CampBaseClass::GetSpotted
PUBLIC	?IsAggregate@CampBaseClass@@QAEHXZ		; CampBaseClass::IsAggregate
PUBLIC	?IsGCI@ObjectiveClass@@QAEHXZ			; ObjectiveClass::IsGCI
PUBLIC	?HasNCTR@ObjectiveClass@@QAEHXZ			; ObjectiveClass::HasNCTR
PUBLIC	?DisplayInCockpit@OTWDriverClass@@QAEHXZ	; OTWDriverClass::DisplayInCockpit
PUBLIC	??0PlayerRwrClass@@QAE@HPAVSimMoverClass@@@Z	; PlayerRwrClass::PlayerRwrClass
PUBLIC	??1PlayerRwrClass@@UAE@XZ			; PlayerRwrClass::~PlayerRwrClass
PUBLIC	?Exec@PlayerRwrClass@@UAEPAVSimObjectType@@PAV2@@Z ; PlayerRwrClass::Exec
PUBLIC	?Display@PlayerRwrClass@@UAEXPAVVirtualDisplay@@@Z ; PlayerRwrClass::Display
PUBLIC	?IsOn@PlayerRwrClass@@UAEHXZ			; PlayerRwrClass::IsOn
PUBLIC	?HasActivity@PlayerRwrClass@@QAEHXZ		; PlayerRwrClass::HasActivity
PUBLIC	?LaunchIndication@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::LaunchIndication
PUBLIC	?CheckEWS@PlayerRwrClass@@QAEXXZ		; PlayerRwrClass::CheckEWS
PUBLIC	?ShowUnknowns@PlayerRwrClass@@QAEHXZ		; PlayerRwrClass::ShowUnknowns
PUBLIC	?ShowNaval@PlayerRwrClass@@QAEHXZ		; PlayerRwrClass::ShowNaval
PUBLIC	?ShowSearch@PlayerRwrClass@@QAEHXZ		; PlayerRwrClass::ShowSearch
PUBLIC	?IsFiltered@PlayerRwrClass@@QAEHPAVFalconEntity@@@Z ; PlayerRwrClass::IsFiltered
PUBLIC	?ManualSelect@PlayerRwrClass@@QAEHXZ		; PlayerRwrClass::ManualSelect
PUBLIC	?LightSearch@PlayerRwrClass@@QAEHXZ		; PlayerRwrClass::LightSearch
PUBLIC	?LightUnknowns@PlayerRwrClass@@QAEHXZ		; PlayerRwrClass::LightUnknowns
PUBLIC	?TogglePriority@PlayerRwrClass@@UAEXXZ		; PlayerRwrClass::TogglePriority
PUBLIC	?ToggleTargetSep@PlayerRwrClass@@UAEXXZ		; PlayerRwrClass::ToggleTargetSep
PUBLIC	?ToggleUnknowns@PlayerRwrClass@@UAEXXZ		; PlayerRwrClass::ToggleUnknowns
PUBLIC	?ToggleNaval@PlayerRwrClass@@UAEXXZ		; PlayerRwrClass::ToggleNaval
PUBLIC	?ToggleSearch@PlayerRwrClass@@UAEXXZ		; PlayerRwrClass::ToggleSearch
PUBLIC	?SelectNextEmitter@PlayerRwrClass@@UAEXXZ	; PlayerRwrClass::SelectNextEmitter
PUBLIC	?ToggleLowAltPriority@PlayerRwrClass@@UAEXXZ	; PlayerRwrClass::ToggleLowAltPriority
PUBLIC	?ToggleAutoDrop@PlayerRwrClass@@UAEXXZ		; PlayerRwrClass::ToggleAutoDrop
PUBLIC	?AutoSelectAltitudePriority@PlayerRwrClass@@MAEXXZ ; PlayerRwrClass::AutoSelectAltitudePriority
PUBLIC	?DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z	; PlayerRwrClass::DrawStatusSymbol
PUBLIC	?DrawGrid@PlayerRwrClass@@IAEXXZ		; PlayerRwrClass::DrawGrid
PUBLIC	?DrawContact@PlayerRwrClass@@IAEXPAUDetectListElement@VehRwrClass@@@Z ; PlayerRwrClass::DrawContact
PUBLIC	?DoAudio@PlayerRwrClass@@IAEXPAUDetectListElement@VehRwrClass@@@Z ; PlayerRwrClass::DoAudio
PUBLIC	?DoAudio@PlayerRwrClass@@IAEXXZ			; PlayerRwrClass::DoAudio
PUBLIC	??_GPlayerRwrClass@@UAEPAXI@Z			; PlayerRwrClass::`scalar deleting destructor'
PUBLIC	?GetSeekerType@MissileClass@@QAEHXZ		; MissileClass::GetSeekerType
PUBLIC	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
PUBLIC	?PlayRWRSoundFX@@YAXHHMM@Z			; PlayRWRSoundFX
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_7PlayerRwrClass@@6B@				; PlayerRwrClass::`vftable'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R0?AVDrawableClass@@@8			; DrawableClass `RTTI Type Descriptor'
PUBLIC	??_R3DrawableClass@@8				; DrawableClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DrawableClass@@8				; DrawableClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DrawableClass@@8			; DrawableClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVMfdDrawable@@@8				; MfdDrawable `RTTI Type Descriptor'
PUBLIC	??_R3MfdDrawable@@8				; MfdDrawable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MfdDrawable@@8				; MfdDrawable::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MfdDrawable@@8			; MfdDrawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4PlayerRwrClass@@6B@			; PlayerRwrClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPlayerRwrClass@@@8			; PlayerRwrClass `RTTI Type Descriptor'
PUBLIC	??_R3PlayerRwrClass@@8				; PlayerRwrClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PlayerRwrClass@@8				; PlayerRwrClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PlayerRwrClass@@8			; PlayerRwrClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@VehRwrClass@@8			; VehRwrClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVVehRwrClass@@@8				; VehRwrClass `RTTI Type Descriptor'
PUBLIC	??_R3VehRwrClass@@8				; VehRwrClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VehRwrClass@@8				; VehRwrClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RwrClass@@8			; RwrClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVRwrClass@@@8				; RwrClass `RTTI Type Descriptor'
PUBLIC	??_R3RwrClass@@8				; RwrClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RwrClass@@8				; RwrClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SensorClass@@8			; SensorClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSensorClass@@@8				; SensorClass `RTTI Type Descriptor'
PUBLIC	??_R3SensorClass@@8				; SensorClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SensorClass@@8				; SensorClass::`RTTI Base Class Array'
PUBLIC	__real@00000000
PUBLIC	__real@3c8efa34
PUBLIC	__real@3d23d70a
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e800000
PUBLIC	__real@3f000000
PUBLIC	__real@3f0ccccd
PUBLIC	__real@3f333333
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f733333
PUBLIC	__real@3f800000
PUBLIC	__real@3fc00000
PUBLIC	__real@3fc90fd9
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@40060a91
PUBLIC	__real@40490fd9
PUBLIC	__real@41700000
PUBLIC	__real@447a0000
PUBLIC	__real@459c4000
PUBLIC	__real@45bb8000
PUBLIC	__real@be4ccccd
PUBLIC	__real@bf733333
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_fabs:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?F4IsBadReadPtr@@YA_NPBXI@Z:PROC		; F4IsBadReadPtr
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetFirst
EXTRN	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetNext
EXTRN	_F4SoundFXSetDist:PROC
EXTRN	?SetFlag@SimBaseClass@@QAEXH@Z:PROC		; SimBaseClass::SetFlag
EXTRN	?UnSetFlag@SimBaseClass@@QAEXH@Z:PROC		; SimBaseClass::UnSetFlag
EXTRN	?DisplayExit@DrawableClass@@UAEXXZ:PROC		; DrawableClass::DisplayExit
EXTRN	?PushButton@MfdDrawable@@UAEXHH@Z:PROC		; MfdDrawable::PushButton
EXTRN	?SetDesiredTarget@SensorClass@@UAEXPAVSimObjectType@@@Z:PROC ; SensorClass::SetDesiredTarget
EXTRN	?ClearSensorTarget@SensorClass@@UAEXXZ:PROC	; SensorClass::ClearSensorTarget
EXTRN	?SetSensorTarget@SensorClass@@MAEXPAVSimObjectType@@@Z:PROC ; SensorClass::SetSensorTarget
EXTRN	?SetSensorTargetHack@SensorClass@@MAEXPAVFalconEntity@@@Z:PROC ; SensorClass::SetSensorTargetHack
EXTRN	?CheckLockedTarget@SensorClass@@MAEXXZ:PROC	; SensorClass::CheckLockedTarget
EXTRN	?Camp_GetCurrentTime@@YAKXZ:PROC		; Camp_GetCurrentTime
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z:PROC ; VirtualDisplay::AdjustOriginInViewport
EXTRN	?DropEWS@AircraftClass@@QAEXXZ:PROC		; AircraftClass::DropEWS
EXTRN	?EWSChaffBurst@AircraftClass@@QAEXXZ:PROC	; AircraftClass::EWSChaffBurst
EXTRN	?EWSFlareBurst@AircraftClass@@QAEXXZ:PROC	; AircraftClass::EWSFlareBurst
EXTRN	?ReleaseManualProgram@AircraftClass@@QAEXXZ:PROC ; AircraftClass::ReleaseManualProgram
EXTRN	?HasPower@AircraftClass@@QAEHW4AvionicsPowerFlags@1@@Z:PROC ; AircraftClass::HasPower
EXTRN	?GetSpotted@CampBaseClass@@QAEHE@Z:PROC		; CampBaseClass::GetSpotted
EXTRN	?SetSpotted@CampBaseClass@@QAEXEKH@Z:PROC	; CampBaseClass::SetSpotted
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	?GetRoE@@YAHEEH@Z:PROC				; GetRoE
EXTRN	?GetEnemyTeam@@YAEE@Z:PROC			; GetEnemyTeam
EXTRN	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z:PROC ; OTWDriverClass::GetGroundLevel
EXTRN	?DisplayInit@RwrClass@@UAEXPAVImageBuffer@@@Z:PROC ; RwrClass::DisplayInit
EXTRN	?GetAGCenter@RwrClass@@UAEXPAM0@Z:PROC		; RwrClass::GetAGCenter
EXTRN	?CanDetectObject@RwrClass@@QAEHPAVSimObjectType@@@Z:PROC ; RwrClass::CanDetectObject
EXTRN	?CanSeeObject@RwrClass@@IAEHPAVSimObjectType@@@Z:PROC ; RwrClass::CanSeeObject
EXTRN	?BeingPainted@RwrClass@@IAEHPAVSimObjectType@@@Z:PROC ; RwrClass::BeingPainted
EXTRN	?CanDetectObject@RwrClass@@IAEHPAVFalconEntity@@@Z:PROC ; RwrClass::CanDetectObject
EXTRN	?DrawEmitterSymbol@RwrClass@@IAEXHH@Z:PROC	; RwrClass::DrawEmitterSymbol
EXTRN	??0VehRwrClass@@QAE@HPAVSimMoverClass@@@Z:PROC	; VehRwrClass::VehRwrClass
EXTRN	??1VehRwrClass@@UAE@XZ:PROC			; VehRwrClass::~VehRwrClass
EXTRN	?Exec@VehRwrClass@@UAEPAVSimObjectType@@PAV2@@Z:PROC ; VehRwrClass::Exec
EXTRN	?SetPower@VehRwrClass@@UAEXH@Z:PROC		; VehRwrClass::SetPower
EXTRN	?ObjectDetected@VehRwrClass@@UAEHPAVFalconEntity@@HH@Z:PROC ; VehRwrClass::ObjectDetected
EXTRN	?IsTracked@VehRwrClass@@QAEPAUDetectListElement@1@PAVFalconEntity@@@Z:PROC ; VehRwrClass::IsTracked
EXTRN	?SortDetectionList@VehRwrClass@@IAEXXZ:PROC	; VehRwrClass::SortDetectionList
EXTRN	?GetLethality@VehRwrClass@@MAEMPAVFalconEntity@@@Z:PROC ; VehRwrClass::GetLethality
EXTRN	??_EPlayerRwrClass@@UAEPAXI@Z:PROC		; PlayerRwrClass::`vector deleting destructor'
EXTRN	?RequestIntercept@@YAXPAVFlightClass@@HW4RequIntHint@@@Z:PROC ; RequestIntercept
EXTRN	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z:PROC ; FackClass::GetFault
EXTRN	?GetAxisValue@SIMLIB_IO_CLASS@@QAEHW4GameAxis_t@@@Z:PROC ; SIMLIB_IO_CLASS::GetAxisValue
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuxRealTime@@3KA:DWORD				; vuxRealTime
EXTRN	?SimLibMajorFrameTime@@3MA:DWORD		; SimLibMajorFrameTime
EXTRN	?SimLibElapsedTime@@3KA:DWORD			; SimLibElapsedTime
EXTRN	?g_bRealisticAvionics@@3_NA:BYTE		; g_bRealisticAvionics
EXTRN	?ReconLossTime@@3PAKA:BYTE			; ReconLossTime
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?EmitterList@@3PAVFalconPrivateList@@A:DWORD	; EmitterList
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?RadarDataTable@@3PAURadarDataType@@A:DWORD	; RadarDataTable
EXTRN	?radarDatFileTable@@3PAURadarDataSet@@A:DWORD	; radarDatFileTable
EXTRN	?TheCampaign@@3VCampaignClass@@A:BYTE		; TheCampaign
EXTRN	?cockpitFlightData@@3VFlightData@@A:BYTE	; cockpitFlightData
EXTRN	?g_bIFFRWR@@3_NA:BYTE				; g_bIFFRWR
EXTRN	?g_bRWR@@3_NA:BYTE				; g_bRWR
EXTRN	?IO@@3VSIMLIB_IO_CLASS@@A:BYTE			; IO
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA
_BSS	SEGMENT
?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA DD 050H DUP (?) ; `PlayerRwrClass::DrawGrid'::`2'::tick
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@bf733333
CONST	SEGMENT
__real@bf733333 DD 0bf733333r			; -0.95
CONST	ENDS
;	COMDAT __real@be4ccccd
CONST	SEGMENT
__real@be4ccccd DD 0be4ccccdr			; -0.2
CONST	ENDS
;	COMDAT __real@45bb8000
CONST	SEGMENT
__real@45bb8000 DD 045bb8000r			; 6000
CONST	ENDS
;	COMDAT __real@459c4000
CONST	SEGMENT
__real@459c4000 DD 0459c4000r			; 5000
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@40490fd9
CONST	SEGMENT
__real@40490fd9 DD 040490fd9r			; 3.14159
CONST	ENDS
;	COMDAT __real@40060a91
CONST	SEGMENT
__real@40060a91 DD 040060a91r			; 2.09439
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fc90fd9
CONST	SEGMENT
__real@3fc90fd9 DD 03fc90fd9r			; 1.5708
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f733333
CONST	SEGMENT
__real@3f733333 DD 03f733333r			; 0.95
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f0ccccd
CONST	SEGMENT
__real@3f0ccccd DD 03f0ccccdr			; 0.55
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3d23d70a
CONST	SEGMENT
__real@3d23d70a DD 03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R2SensorClass@@8
rdata$r	SEGMENT
??_R2SensorClass@@8 DD FLAT:??_R1A@?0A@EA@SensorClass@@8 ; SensorClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@MfdDrawable@@8
	DD	FLAT:??_R1A@?0A@EA@DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3SensorClass@@8
rdata$r	SEGMENT
??_R3SensorClass@@8 DD 00H				; SensorClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2SensorClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSensorClass@@@8
_DATA	SEGMENT
??_R0?AVSensorClass@@@8 DD FLAT:??_7type_info@@6B@	; SensorClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSensorClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@SensorClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SensorClass@@8 DD FLAT:??_R0?AVSensorClass@@@8 ; SensorClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SensorClass@@8
rdata$r	ENDS
;	COMDAT ??_R2RwrClass@@8
rdata$r	SEGMENT
??_R2RwrClass@@8 DD FLAT:??_R1A@?0A@EA@RwrClass@@8	; RwrClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SensorClass@@8
	DD	FLAT:??_R1A@?0A@EA@MfdDrawable@@8
	DD	FLAT:??_R1A@?0A@EA@DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3RwrClass@@8
rdata$r	SEGMENT
??_R3RwrClass@@8 DD 00H					; RwrClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2RwrClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRwrClass@@@8
_DATA	SEGMENT
??_R0?AVRwrClass@@@8 DD FLAT:??_7type_info@@6B@		; RwrClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRwrClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@RwrClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RwrClass@@8 DD FLAT:??_R0?AVRwrClass@@@8	; RwrClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RwrClass@@8
rdata$r	ENDS
;	COMDAT ??_R2VehRwrClass@@8
rdata$r	SEGMENT
??_R2VehRwrClass@@8 DD FLAT:??_R1A@?0A@EA@VehRwrClass@@8 ; VehRwrClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@RwrClass@@8
	DD	FLAT:??_R1A@?0A@EA@SensorClass@@8
	DD	FLAT:??_R1A@?0A@EA@MfdDrawable@@8
	DD	FLAT:??_R1A@?0A@EA@DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3VehRwrClass@@8
rdata$r	SEGMENT
??_R3VehRwrClass@@8 DD 00H				; VehRwrClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2VehRwrClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVehRwrClass@@@8
_DATA	SEGMENT
??_R0?AVVehRwrClass@@@8 DD FLAT:??_7type_info@@6B@	; VehRwrClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVehRwrClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@VehRwrClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VehRwrClass@@8 DD FLAT:??_R0?AVVehRwrClass@@@8 ; VehRwrClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VehRwrClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@PlayerRwrClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PlayerRwrClass@@8 DD FLAT:??_R0?AVPlayerRwrClass@@@8 ; PlayerRwrClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PlayerRwrClass@@8
rdata$r	ENDS
;	COMDAT ??_R2PlayerRwrClass@@8
rdata$r	SEGMENT
??_R2PlayerRwrClass@@8 DD FLAT:??_R1A@?0A@EA@PlayerRwrClass@@8 ; PlayerRwrClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@VehRwrClass@@8
	DD	FLAT:??_R1A@?0A@EA@RwrClass@@8
	DD	FLAT:??_R1A@?0A@EA@SensorClass@@8
	DD	FLAT:??_R1A@?0A@EA@MfdDrawable@@8
	DD	FLAT:??_R1A@?0A@EA@DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3PlayerRwrClass@@8
rdata$r	SEGMENT
??_R3PlayerRwrClass@@8 DD 00H				; PlayerRwrClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	06H
	DD	FLAT:??_R2PlayerRwrClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPlayerRwrClass@@@8
_DATA	SEGMENT
??_R0?AVPlayerRwrClass@@@8 DD FLAT:??_7type_info@@6B@	; PlayerRwrClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPlayerRwrClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4PlayerRwrClass@@6B@
rdata$r	SEGMENT
??_R4PlayerRwrClass@@6B@ DD 00H				; PlayerRwrClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPlayerRwrClass@@@8
	DD	FLAT:??_R3PlayerRwrClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@MfdDrawable@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MfdDrawable@@8 DD FLAT:??_R0?AVMfdDrawable@@@8 ; MfdDrawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MfdDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R2MfdDrawable@@8
rdata$r	SEGMENT
??_R2MfdDrawable@@8 DD FLAT:??_R1A@?0A@EA@MfdDrawable@@8 ; MfdDrawable::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3MfdDrawable@@8
rdata$r	SEGMENT
??_R3MfdDrawable@@8 DD 00H				; MfdDrawable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2MfdDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMfdDrawable@@@8
_DATA	SEGMENT
??_R0?AVMfdDrawable@@@8 DD FLAT:??_7type_info@@6B@	; MfdDrawable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMfdDrawable@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@DrawableClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DrawableClass@@8 DD FLAT:??_R0?AVDrawableClass@@@8 ; DrawableClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R2DrawableClass@@8
rdata$r	SEGMENT
??_R2DrawableClass@@8 DD FLAT:??_R1A@?0A@EA@DrawableClass@@8 ; DrawableClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DrawableClass@@8
rdata$r	SEGMENT
??_R3DrawableClass@@8 DD 00H				; DrawableClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDrawableClass@@@8
_DATA	SEGMENT
??_R0?AVDrawableClass@@@8 DD FLAT:??_7type_info@@6B@	; DrawableClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDrawableClass@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ?fpass@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4HA
_DATA	SEGMENT
?fpass@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4HA DD 01H	; `PlayerRwrClass::DrawGrid'::`2'::fpass
_DATA	ENDS
;	COMDAT ?HAT_SIZE@?1??DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z@4MB
CONST	SEGMENT
?HAT_SIZE@?1??DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z@4MB DD 03d75c28fr ; 0.06 ; `PlayerRwrClass::DrawStatusSymbol'::`2'::HAT_SIZE
CONST	ENDS
;	COMDAT ?MARK_SIZE@?1??DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z@4MB
CONST	SEGMENT
?MARK_SIZE@?1??DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z@4MB DD 03e19999ar ; 0.15 ; `PlayerRwrClass::DrawStatusSymbol'::`2'::MARK_SIZE
CONST	ENDS
;	COMDAT ??_7PlayerRwrClass@@6B@
CONST	SEGMENT
??_7PlayerRwrClass@@6B@ DD FLAT:??_R4PlayerRwrClass@@6B@ ; PlayerRwrClass::`vftable'
	DD	FLAT:??_EPlayerRwrClass@@UAEPAXI@Z
	DD	FLAT:?Display@PlayerRwrClass@@UAEXPAVVirtualDisplay@@@Z
	DD	FLAT:?DisplayInit@RwrClass@@UAEXPAVImageBuffer@@@Z
	DD	FLAT:?DisplayExit@DrawableClass@@UAEXXZ
	DD	FLAT:?GetDisplay@SensorClass@@UAEPAVVirtualDisplay@@XZ
	DD	FLAT:?PushButton@MfdDrawable@@UAEXHH@Z
	DD	FLAT:?SetType@SensorClass@@UAEXW4SensorType@1@@Z
	DD	FLAT:?SetPower@VehRwrClass@@UAEXH@Z
	DD	FLAT:?IsOn@PlayerRwrClass@@UAEHXZ
	DD	FLAT:?SetDesiredTarget@SensorClass@@UAEXPAVSimObjectType@@@Z
	DD	FLAT:?ClearSensorTarget@SensorClass@@UAEXXZ
	DD	FLAT:?Exec@PlayerRwrClass@@UAEPAVSimObjectType@@PAV2@@Z
	DD	FLAT:?ExecModes@SensorClass@@UAEXHH@Z
	DD	FLAT:?UpdateState@SensorClass@@UAEXHH@Z
	DD	FLAT:?SetSeekerPos@SensorClass@@UAEXMM@Z
	DD	FLAT:?TargetUnderCursor@SensorClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?SetSensorTarget@SensorClass@@MAEXPAVSimObjectType@@@Z
	DD	FLAT:?SetSensorTargetHack@SensorClass@@MAEXPAVFalconEntity@@@Z
	DD	FLAT:?CheckLockedTarget@SensorClass@@MAEXXZ
	DD	FLAT:?ObjectDetected@VehRwrClass@@UAEHPAVFalconEntity@@HH@Z
	DD	FLAT:?GetAGCenter@RwrClass@@UAEXPAM0@Z
	DD	FLAT:?GetLethality@VehRwrClass@@MAEMPAVFalconEntity@@@Z
	DD	FLAT:?TogglePriority@PlayerRwrClass@@UAEXXZ
	DD	FLAT:?ToggleTargetSep@PlayerRwrClass@@UAEXXZ
	DD	FLAT:?ToggleUnknowns@PlayerRwrClass@@UAEXXZ
	DD	FLAT:?ToggleNaval@PlayerRwrClass@@UAEXXZ
	DD	FLAT:?ToggleSearch@PlayerRwrClass@@UAEXXZ
	DD	FLAT:?SelectNextEmitter@PlayerRwrClass@@UAEXXZ
	DD	FLAT:?ToggleLowAltPriority@PlayerRwrClass@@UAEXXZ
	DD	FLAT:?ToggleAutoDrop@PlayerRwrClass@@UAEXXZ
	DD	FLAT:?AutoSelectAltitudePriority@PlayerRwrClass@@MAEXXZ
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?Exec@PlayerRwrClass@@UAEPAVSimObjectType@@PAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Exec@PlayerRwrClass@@UAEPAVSimObjectType@@PAV2@@Z$0
__ehfuncinfo$?Exec@PlayerRwrClass@@UAEPAVSimObjectType@@PAV2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Exec@PlayerRwrClass@@UAEPAVSimObjectType@@PAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\playerrwr.cpp
_TEXT	SEGMENT
_SfxID$ = 8						; size = 4
_Override$ = 12						; size = 4
_Vol$ = 16						; size = 4
_PScale$ = 20						; size = 4
?PlayRWRSoundFX@@YAXHHMM@Z PROC				; PlayRWRSoundFX

; 45   : {

	push	ebp
	mov	ebp, esp

; 46   :   	if(g_bRealisticAvionics  && SimDriver.GetPlayerAircraft())

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	$LN1@PlayRWRSou
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN1@PlayRWRSou

; 47   : 	{
; 48   : 		if (IO.AnalogIsUsed(AXIS_THREAT_VOLUME) == false)				// Retro 3Jan2004

	push	17					; 00000011H
	mov	ecx, OFFSET ?IO@@3VSIMLIB_IO_CLASS@@A	; IO
	call	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@PlayRWRSou

; 49   : 		{
; 50   : 			//make sure we don't hear it
; 51   : 			if(SimDriver.GetPlayerAircraft()->ThreatVolume == 8)

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	cmp	DWORD PTR [eax+880], 8
	jne	SHORT $LN3@PlayRWRSou

; 52   : 			{  // can't hear it, don't play it.
; 53   : 				return;

	jmp	SHORT $LN6@PlayRWRSou

; 54   : 			}
; 55   : 			else

	jmp	SHORT $LN2@PlayRWRSou
$LN3@PlayRWRSou:

; 56   : 				Vol = -(float)(SimDriver.GetPlayerAircraft()->ThreatVolume * 250);

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	edx, DWORD PTR [eax+880]
	imul	edx, 250				; 000000faH
	cvtsi2ss xmm0, edx
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _Vol$[ebp], xmm0
$LN2@PlayRWRSou:

; 57   : 		}
; 58   : 		else															// Retro 3Jan2004

	jmp	SHORT $LN1@PlayRWRSou
$LN4@PlayRWRSou:

; 59   : 		{
; 60   : 			// Retro 26Jan2004 - the axis is now reversed on default and scales linear to the axis
; 61   : 			//					- the user will have to shape it to logarithmic to use the throw efficiently
; 62   : 			Vol = -(float)(/*15000-*/IO.GetAxisValue(AXIS_THREAT_VOLUME))/1.5F;	// Retro 26Jan2004

	push	17					; 00000011H
	mov	ecx, OFFSET ?IO@@3VSIMLIB_IO_CLASS@@A	; IO
	call	?GetAxisValue@SIMLIB_IO_CLASS@@QAEHW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::GetAxisValue
	cvtsi2ss xmm0, eax
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR _Vol$[ebp], xmm0
$LN1@PlayRWRSou:

; 63   : 		}
; 64   : 	}
; 65   : 	F4SoundFXSetDist(SfxID,Override,Vol,PScale);

	push	ecx
	movss	xmm0, DWORD PTR _PScale$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Vol$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _Override$[ebp]
	push	eax
	mov	ecx, DWORD PTR _SfxID$[ebp]
	push	ecx
	call	_F4SoundFXSetDist
	add	esp, 16					; 00000010H
$LN6@PlayRWRSou:

; 66   : 
; 67   : }

	pop	ebp
	ret	0
?PlayRWRSoundFX@@YAXHHMM@Z ENDP				; PlayRWRSoundFX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simio.h
;	COMDAT ?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z PROC ; SIMLIB_IO_CLASS::AnalogIsUsed, COMDAT
; _this$ = ecx

; 237  : 	bool	AnalogIsUsed(GameAxis_t id) { return ( analog[id].isUsed); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _id$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [ecx+eax+12]
	mov	esp, ebp
	pop	ebp
	ret	4
?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ENDP ; SIMLIB_IO_CLASS::AnalogIsUsed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\missile.h
;	COMDAT ?GetSeekerType@MissileClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSeekerType@MissileClass@@QAEHXZ PROC		; MissileClass::GetSeekerType, COMDAT
; _this$ = ecx

; 264  : 	int GetSeekerType (void) { return inputData->seekerType;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+848]
	mov	eax, DWORD PTR [ecx+88]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSeekerType@MissileClass@@QAEHXZ ENDP		; MissileClass::GetSeekerType
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GPlayerRwrClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GPlayerRwrClass@@UAEPAXI@Z PROC			; PlayerRwrClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PlayerRwrClass@@UAE@XZ		; PlayerRwrClass::~PlayerRwrClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GPlayerRwrClass@@UAEPAXI@Z ENDP			; PlayerRwrClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\playerrwr.cpp
_TEXT	SEGMENT
tv324 = -16						; size = 4
_SEARCH_PERIOD$1 = -12					; size = 4
_this$ = -8						; size = 4
_i$ = -4						; size = 4
?DoAudio@PlayerRwrClass@@IAEXXZ PROC			; PlayerRwrClass::DoAudio
; _this$ = ecx

; 603  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 604  : 	if (!g_bRWR) // JB 010802

	movzx	eax, BYTE PTR ?g_bRWR@@3_NA		; g_bRWR
	test	eax, eax
	jne	SHORT $LN13@DoAudio

; 605  : 		return;

	jmp	$LN14@DoAudio
$LN13@DoAudio:

; 606  : 
; 607  : 	// TODO:  This should really be radar cycle time.  Can I get that reliably here?
; 608  : 	//static const int SEARCH_PERIOD = 12 * 1000;
; 609  :     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 610  : 
; 611  : 	for(i = 0; i < numContacts; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN12@DoAudio
$LN11@DoAudio:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN12@DoAudio:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+588]
	jge	$LN10@DoAudio

; 612  : 	{
; 613  : 		int SEARCH_PERIOD = (int)(((SimBaseClass*)detectionList[i].entity)->RdrCycleTime() * SEC_TO_MSEC);

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+76]
	call	?RdrCycleTime@SimBaseClass@@QAEMXZ	; SimBaseClass::RdrCycleTime
	fstp	DWORD PTR tv324[ebp]
	movss	xmm0, DWORD PTR tv324[ebp]
	mulss	xmm0, DWORD PTR __real@447a0000
	cvttss2si eax, xmm0
	mov	DWORD PTR _SEARCH_PERIOD$1[ebp], eax

; 614  : 		if (SEARCH_PERIOD == 0)

	cmp	DWORD PTR _SEARCH_PERIOD$1[ebp], 0
	jne	SHORT $LN9@DoAudio

; 615  : 			SEARCH_PERIOD = 6 * SEC_TO_MSEC;

	mov	DWORD PTR _SEARCH_PERIOD$1[ebp], 6000	; 00001770H
$LN9@DoAudio:

; 616  : 
; 617  : 
; 618  : 
; 619  : 		if (detectionList[i].playIt || (!detectionList[i].cantPlay && (!detectionList[i].entity->IsSim() || !detectionList[i].entity->IsDead()))) 

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+96]
	shr	eax, 9
	and	eax, 1
	jne	SHORT $LN6@DoAudio
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+96]
	shr	eax, 8
	and	eax, 1
	jne	$LN2@DoAudio
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+76]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN6@DoAudio
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+76]
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+eax+76]
	mov	eax, DWORD PTR [edx+212]
	call	eax
	test	eax, eax
	jne	$LN2@DoAudio
$LN6@DoAudio:

; 620  : 		{
; 621  : 			if ((detectionList[i].missileActivity) ||
; 622  : 				(detectionList[i].playIt) ||
; 623  : 				(detectionList[i].newDetection) ||
; 624  : 				(detectionList[i].selected && 
; 625  : 				((detectionList[i].isLocked) || 
; 626  : 				 ((SimLibElapsedTime - detectionList[i].lastPlayed) > (unsigned int) SEARCH_PERIOD))))

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+96]
	shr	eax, 2
	and	eax, 1
	jne	SHORT $LN3@DoAudio
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+96]
	shr	eax, 9
	and	eax, 1
	jne	SHORT $LN3@DoAudio
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+96]
	shr	eax, 4
	and	eax, 1
	jne	SHORT $LN3@DoAudio
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+96]
	shr	eax, 6
	and	eax, 1
	je	$LN2@DoAudio
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+96]
	and	eax, 1
	jne	SHORT $LN3@DoAudio
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	eax, DWORD PTR [edx+ecx+92]
	cmp	eax, DWORD PTR _SEARCH_PERIOD$1[ebp]
	jbe	$LN2@DoAudio
$LN3@DoAudio:

; 627  : 			{
; 628  : 				ShiAssert( detectionList[i].entity );
; 629  : 				ShiAssert( detectionList[i].radarData->RWRsound > 0 );
; 630  : 				//F4SoundFXSetDist( detectionList[i].radarData->RWRsound, FALSE, 0.0f, 1.0f );
; 631  : 				PlayRWRSoundFX( detectionList[i].radarData->RWRsound, FALSE, 0.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+80]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?PlayRWRSoundFX@@YAXHHMM@Z		; PlayRWRSoundFX
	add	esp, 16					; 00000010H

; 632  : 				detectionList[i].newDetection = FALSE;

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+96]
	and	ecx, -17				; ffffffefH
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+96], ecx

; 633  : 				detectionList[i].playIt = FALSE; // JB 010728

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+96]
	and	eax, -513				; fffffdffH
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+96], eax

; 634  : 
; 635  : 				if (!detectionList[i].missileActivity)

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+96]
	shr	edx, 2
	and	edx, 1
	jne	SHORT $LN2@DoAudio

; 636  : 					detectionList[i].lastPlayed = SimLibElapsedTime;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [ecx+eax+92], edx
$LN2@DoAudio:

; 637  : 			}
; 638  : 		}
; 639  : 	}

	jmp	$LN11@DoAudio
$LN10@DoAudio:

; 640  : 		
; 641  : 	if (newGuy)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+644], 0
	je	SHORT $LN1@DoAudio

; 642  : 	{
; 643  : 		//F4SoundFXSetDist( SFX_TWS_SEARCH, FALSE, 0.0f, 1.0f );
; 644  : 		// PlayRWRSoundFX( SFX_TWS_SEARCH, FALSE, 0.0f, 1.0f );
; 645  : 		PlayRWRSoundFX( detectionList[i].radarData->RWRsound, FALSE, 0.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+80]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?PlayRWRSoundFX@@YAXHHMM@Z		; PlayRWRSoundFX
	add	esp, 16					; 00000010H

; 646  : 		// ^ JPG 9 Dec 03 - Get rid of that annoying, unrealistic New Guy sound fx and play new guy sound FROM the actual emitter - TODO: play 3 bursts in 1.5 secs like RL
; 647  : 		newGuy = FALSE; 

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+644], 0
$LN1@DoAudio:
$LN14@DoAudio:

; 648  : 	}
; 649  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DoAudio@PlayerRwrClass@@IAEXXZ ENDP			; PlayerRwrClass::DoAudio
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\playerrwr.cpp
_TEXT	SEGMENT
tv452 = -76						; size = 8
tv442 = -68						; size = 8
tv422 = -60						; size = 4
tv415 = -56						; size = 4
tv409 = -52						; size = 4
tv404 = -48						; size = 4
tv373 = -44						; size = 4
tv448 = -40						; size = 4
tv438 = -36						; size = 4
tv225 = -32						; size = 4
tv164 = -28						; size = 4
tv184 = -24						; size = 4
_this$ = -20						; size = 4
_mode$ = -16						; size = 4
_SEARCH_PERIOD$ = -12					; size = 4
_sound$1 = -8						; size = 4
_radarfileData$ = -4					; size = 4
_record$ = 8						; size = 4
?DoAudio@PlayerRwrClass@@IAEXPAUDetectListElement@VehRwrClass@@@Z PROC ; PlayerRwrClass::DoAudio
; _this$ = ecx

; 652  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	DWORD PTR _this$[ebp], ecx

; 653  : 	if (!g_bRWR) // JB 010802

	movzx	eax, BYTE PTR ?g_bRWR@@3_NA		; g_bRWR
	test	eax, eax
	jne	SHORT $LN46@DoAudio

; 654  : 		return;

	jmp	$LN47@DoAudio
$LN46@DoAudio:

; 655  : 	RadarDataSet* radarfileData = &radarDatFileTable[record->radarData->RDRDataInd];

	mov	ecx, DWORD PTR _record$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, WORD PTR [edx+6]
	imul	eax, 180				; 000000b4H
	add	eax, DWORD PTR ?radarDatFileTable@@3PAURadarDataSet@@A ; radarDatFileTable
	mov	DWORD PTR _radarfileData$[ebp], eax

; 656  : 	
; 657  : 	// TODO:  This should really be radar cycle time.  Can I get that reliably here?
; 658  : 	float SEARCH_PERIOD = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _SEARCH_PERIOD$[ebp], xmm0

; 659  : 	if (((SimBaseClass*)record->entity)->IsSim())//this is a vhehicle not a battalion

	mov	ecx, DWORD PTR _record$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN45@DoAudio

; 660  : 	{
; 661  : 	SEARCH_PERIOD = ((SimBaseClass*)record->entity)->RdrCycleTime() * SEC_TO_MSEC;//me123

	mov	edx, DWORD PTR _record$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?RdrCycleTime@SimBaseClass@@QAEMXZ	; SimBaseClass::RdrCycleTime
	fstp	DWORD PTR tv373[ebp]
	movss	xmm0, DWORD PTR tv373[ebp]
	mulss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR _SEARCH_PERIOD$[ebp], xmm0
$LN45@DoAudio:

; 662  : 	}
; 663  : 	if (!SEARCH_PERIOD) SEARCH_PERIOD = 6* SEC_TO_MSEC;

	movss	xmm0, DWORD PTR _SEARCH_PERIOD$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN44@DoAudio
	movss	xmm0, DWORD PTR __real@45bb8000
	movss	DWORD PTR _SEARCH_PERIOD$[ebp], xmm0
$LN44@DoAudio:

; 664  : 
; 665  : 	int mode;
; 666  : 	if ( ((SimBaseClass*)record->entity)->IsSim() &&((BattalionClass*)((SimBaseClass*)record->entity)->GetCampaignObject()))

	mov	eax, DWORD PTR _record$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN43@DoAudio
	mov	ecx, DWORD PTR _record$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	test	eax, eax
	je	SHORT $LN43@DoAudio

; 667  : 	mode = ((BattalionClass*)((SimBaseClass*)record->entity)->GetCampaignObject())->GetRadarMode();

	mov	edx, DWORD PTR _record$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR tv164[ebp], eax
	mov	eax, DWORD PTR tv164[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv164[ebp]
	mov	eax, DWORD PTR [edx+128]
	call	eax
	mov	DWORD PTR _mode$[ebp], eax
	jmp	SHORT $LN42@DoAudio
$LN43@DoAudio:

; 668  : 	else mode = ((SimBaseClass*)record->entity)->GetRadarMode();

	mov	ecx, DWORD PTR _record$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _record$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+128]
	call	eax
	mov	DWORD PTR _mode$[ebp], eax
$LN42@DoAudio:

; 669  : 
; 670  : 		switch (mode)

	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR tv184[ebp], ecx
	mov	edx, DWORD PTR tv184[ebp]
	sub	edx, 1
	mov	DWORD PTR tv184[ebp], edx
	cmp	DWORD PTR tv184[ebp], 5
	ja	$LN31@DoAudio
	mov	eax, DWORD PTR tv184[ebp]
	jmp	DWORD PTR $LN51@DoAudio[eax*4]
$LN39@DoAudio:

; 671  : 			{
; 672  : 			case FEC_RADAR_SEARCH_1:
; 673  : 				SEARCH_PERIOD = (float)radarfileData->Sweeptimesearch1; //me123 from 120

	mov	ecx, DWORD PTR _radarfileData$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+60]
	movss	DWORD PTR _SEARCH_PERIOD$[ebp], xmm0

; 674  : 				break;

	jmp	$LN40@DoAudio
$LN38@DoAudio:

; 675  : 				
; 676  : 			case FEC_RADAR_SEARCH_2:
; 677  : 				SEARCH_PERIOD = (float)radarfileData->Sweeptimesearch2; //me123 from 60

	mov	edx, DWORD PTR _radarfileData$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+64]
	movss	DWORD PTR _SEARCH_PERIOD$[ebp], xmm0

; 678  : 				break;

	jmp	$LN40@DoAudio
$LN37@DoAudio:

; 679  : 				
; 680  : 			case FEC_RADAR_SEARCH_3:
; 681  : 				SEARCH_PERIOD = (float)radarfileData->Sweeptimesearch3; //me123 from 120

	mov	eax, DWORD PTR _radarfileData$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+68]
	movss	DWORD PTR _SEARCH_PERIOD$[ebp], xmm0

; 682  : 				break;

	jmp	$LN40@DoAudio
$LN36@DoAudio:

; 683  : 				
; 684  : 			case FEC_RADAR_SEARCH_100:
; 685  : 				if (record->isLocked)

	mov	ecx, DWORD PTR _record$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	and	edx, 1
	je	SHORT $LN35@DoAudio

; 686  : 				SEARCH_PERIOD = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _SEARCH_PERIOD$[ebp], xmm0

; 687  : 				else

	jmp	SHORT $LN34@DoAudio
$LN35@DoAudio:

; 688  : 				SEARCH_PERIOD = ((SimBaseClass*)record->entity)->RdrCycleTime() * SEC_TO_MSEC;

	mov	eax, DWORD PTR _record$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?RdrCycleTime@SimBaseClass@@QAEMXZ	; SimBaseClass::RdrCycleTime
	fstp	DWORD PTR tv404[ebp]
	movss	xmm0, DWORD PTR tv404[ebp]
	mulss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR _SEARCH_PERIOD$[ebp], xmm0
$LN34@DoAudio:

; 689  : 				break;

	jmp	$LN40@DoAudio
$LN33@DoAudio:

; 690  : 				
; 691  : 			case FEC_RADAR_AQUIRE:
; 692  : 				SEARCH_PERIOD = max (((SimBaseClass*)record->entity)->RdrCycleTime()* SEC_TO_MSEC, radarfileData->Sweeptimeacuire); //me123 from 1

	mov	ecx, DWORD PTR _record$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?RdrCycleTime@SimBaseClass@@QAEMXZ	; SimBaseClass::RdrCycleTime
	fstp	DWORD PTR tv409[ebp]
	movss	xmm0, DWORD PTR tv409[ebp]
	mulss	xmm0, DWORD PTR __real@447a0000
	mov	edx, DWORD PTR _radarfileData$[ebp]
	cvtsi2ss xmm1, DWORD PTR [edx+72]
	comiss	xmm0, xmm1
	jbe	SHORT $LN49@DoAudio
	mov	eax, DWORD PTR _record$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?RdrCycleTime@SimBaseClass@@QAEMXZ	; SimBaseClass::RdrCycleTime
	fstp	DWORD PTR tv415[ebp]
	movss	xmm0, DWORD PTR tv415[ebp]
	mulss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR tv225[ebp], xmm0
	jmp	SHORT $LN50@DoAudio
$LN49@DoAudio:
	mov	ecx, DWORD PTR _radarfileData$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+72]
	movss	DWORD PTR tv225[ebp], xmm0
$LN50@DoAudio:
	movss	xmm0, DWORD PTR tv225[ebp]
	movss	DWORD PTR _SEARCH_PERIOD$[ebp], xmm0

; 693  : 				break;

	jmp	SHORT $LN40@DoAudio
$LN32@DoAudio:

; 694  : 				
; 695  : 			case FEC_RADAR_GUIDE:
; 696  : 
; 697  : 				SEARCH_PERIOD = ((SimBaseClass*)record->entity)->RdrCycleTime() * SEC_TO_MSEC;

	mov	edx, DWORD PTR _record$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?RdrCycleTime@SimBaseClass@@QAEMXZ	; SimBaseClass::RdrCycleTime
	fstp	DWORD PTR tv422[ebp]
	movss	xmm0, DWORD PTR tv422[ebp]
	mulss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR _SEARCH_PERIOD$[ebp], xmm0
$LN31@DoAudio:
$LN40@DoAudio:

; 698  : 				break;
; 699  : 
; 700  : 				
; 701  : 			default:
; 702  : 				//this is A ACTIVE MISSILE BEING SUPPORTED BY THE LAUNCHER
; 703  : 				break;
; 704  : 			}
; 705  : // JB 010727 RP5 RWR
; 706  : // 2001-02-15 ADDED BY S.G. SO Dead stuff don't ping us... If where not a sim object or if a sim, if it's not dead, go on...
; 707  : 	if (record->playIt || (!record->cantPlay && (!record->entity->IsSim() || !record->entity->IsDead()))) 

	mov	eax, DWORD PTR _record$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	shr	ecx, 9
	and	ecx, 1
	jne	SHORT $LN28@DoAudio
	mov	edx, DWORD PTR _record$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 8
	and	eax, 1
	jne	$LN2@DoAudio
	mov	ecx, DWORD PTR _record$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN28@DoAudio
	mov	edx, DWORD PTR _record$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _record$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+212]
	call	eax
	test	eax, eax
	jne	$LN2@DoAudio
$LN28@DoAudio:

; 708  : 	{
; 709  : 		// Play all launches and the selected emitter
; 710  : 		if (//(record->missileActivity) ||
; 711  : 			//(record->playIt) || // JB 010727 RP5 RWR 2001-02-17 MODIFIED BY S.G. SO pressing HANDOFF plays the sound
; 712  : 			(record->newDetection) ||
; 713  : 			(record->selected && 
; 714  : 				//((record->isLocked)) || 
; 715  : 				 ((float)SimLibElapsedTime - (float)record->lastPlayed > SEARCH_PERIOD)))

	mov	ecx, DWORD PTR _record$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	shr	edx, 4
	and	edx, 1
	jne	SHORT $LN26@DoAudio
	mov	eax, DWORD PTR _record$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	shr	ecx, 6
	and	ecx, 1
	je	$LN2@DoAudio
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR tv438[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv438[ebp]
	mov	eax, DWORD PTR tv438[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv442[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv442[ebp]
	mov	ecx, DWORD PTR _record$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR tv448[ebp], edx
	cvtsi2sd xmm1, DWORD PTR tv448[ebp]
	mov	eax, DWORD PTR tv448[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv452[ebp], xmm1
	cvtsd2ss xmm1, QWORD PTR tv452[ebp]
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR _SEARCH_PERIOD$[ebp]
	jbe	$LN2@DoAudio
$LN26@DoAudio:

; 716  : 		{
; 717  : /*int testa = SFX_A50_Radar;//73
; 718  : int testb = SFX_BAR_LOCK;//152
; 719  : int testc =SFX_A50_AQUIRE_Radar;//196
; 720  : int testd =SFX_BAR_LOCK_AQUIRE;//227
; 721  : int teste =SFX_A50_search_Radar;//242
; 722  : int testf =SFX_BAR_LOCK_search;//273*/
; 723  : int sound =0;

	mov	DWORD PTR _sound$1[ebp], 0

; 724  : 			if (mode == FEC_RADAR_AQUIRE)

	cmp	DWORD PTR _mode$[ebp], 5
	jne	SHORT $LN25@DoAudio

; 725  : 			{
; 726  : 				if (radarfileData->Rwrsoundacuire) sound = radarfileData->Rwrsoundacuire;

	mov	ecx, DWORD PTR _radarfileData$[ebp]
	cmp	DWORD PTR [ecx+100], 0
	je	SHORT $LN24@DoAudio
	mov	edx, DWORD PTR _radarfileData$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR _sound$1[ebp], eax
	jmp	SHORT $LN23@DoAudio
$LN24@DoAudio:

; 727  : 				else sound = record->radarData->RWRsound;

	mov	ecx, DWORD PTR _record$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _sound$1[ebp], eax
$LN23@DoAudio:

; 728  : 
; 729  : 				//F4SoundFXSetDist( record->radarData->RWRsound, FALSE, 0.0f, 1.0f );// PLAY THE TRACKER
; 730  : 				PlayRWRSoundFX( record->radarData->RWRsound, FALSE, 0.0f, 1.0f );// PLAY THE TRACKER

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _record$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?PlayRWRSoundFX@@YAXHHMM@Z		; PlayRWRSoundFX
	add	esp, 16					; 00000010H
	jmp	$LN7@DoAudio
$LN25@DoAudio:

; 731  : 			}
; 732  : 			else if (mode == FEC_RADAR_SEARCH_1 || mode == FEC_RADAR_SEARCH_2 ||mode == FEC_RADAR_SEARCH_3)

	cmp	DWORD PTR _mode$[ebp], 2
	je	SHORT $LN20@DoAudio
	cmp	DWORD PTR _mode$[ebp], 3
	je	SHORT $LN20@DoAudio
	cmp	DWORD PTR _mode$[ebp], 4
	jne	$LN21@DoAudio
$LN20@DoAudio:

; 733  : 			{
; 734  : // 2002-03-01 Modified by MN - if symbol is "S" = Searchradar, and we don't show them, don't play them either
; 735  : 				if (mode == FEC_RADAR_SEARCH_1)

	cmp	DWORD PTR _mode$[ebp], 2
	jne	SHORT $LN17@DoAudio

; 736  : 				{
; 737  : 					if (radarfileData->Rwrsymbolsearch1 == RWRSYM_SEARCH && !ShowSearch())

	mov	ecx, DWORD PTR _radarfileData$[ebp]
	cmp	DWORD PTR [ecx+108], 17			; 00000011H
	jne	SHORT $LN18@DoAudio
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ShowSearch@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::ShowSearch
	test	eax, eax
	jne	SHORT $LN18@DoAudio

; 738  : 						return;

	jmp	$LN47@DoAudio
$LN18@DoAudio:

; 739  : 					if (radarfileData->Rwrsoundsearch1) 

	mov	edx, DWORD PTR _radarfileData$[ebp]
	cmp	DWORD PTR [edx+88], 0
	je	SHORT $LN17@DoAudio

; 740  : 						sound = radarfileData->Rwrsoundsearch1;

	mov	eax, DWORD PTR _radarfileData$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR _sound$1[ebp], ecx
$LN17@DoAudio:

; 741  : 				}
; 742  : 				if (mode == FEC_RADAR_SEARCH_2)

	cmp	DWORD PTR _mode$[ebp], 3
	jne	SHORT $LN14@DoAudio

; 743  : 				{
; 744  : 					if (radarfileData->Rwrsymbolsearch2 == RWRSYM_SEARCH && !ShowSearch())

	mov	edx, DWORD PTR _radarfileData$[ebp]
	cmp	DWORD PTR [edx+112], 17			; 00000011H
	jne	SHORT $LN15@DoAudio
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ShowSearch@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::ShowSearch
	test	eax, eax
	jne	SHORT $LN15@DoAudio

; 745  : 						return;

	jmp	$LN47@DoAudio
$LN15@DoAudio:

; 746  : 					if (radarfileData->Rwrsoundsearch2) 

	mov	eax, DWORD PTR _radarfileData$[ebp]
	cmp	DWORD PTR [eax+92], 0
	je	SHORT $LN14@DoAudio

; 747  : 						sound = radarfileData->Rwrsoundsearch2;

	mov	ecx, DWORD PTR _radarfileData$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	mov	DWORD PTR _sound$1[ebp], edx
$LN14@DoAudio:

; 748  : 				}
; 749  : 				if (mode == FEC_RADAR_SEARCH_3)

	cmp	DWORD PTR _mode$[ebp], 4
	jne	SHORT $LN11@DoAudio

; 750  : 				{
; 751  : 					if (radarfileData->Rwrsymbolsearch1 == RWRSYM_SEARCH && !ShowSearch())

	mov	eax, DWORD PTR _radarfileData$[ebp]
	cmp	DWORD PTR [eax+108], 17			; 00000011H
	jne	SHORT $LN12@DoAudio
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ShowSearch@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::ShowSearch
	test	eax, eax
	jne	SHORT $LN12@DoAudio

; 752  : 						return;

	jmp	$LN47@DoAudio
$LN12@DoAudio:

; 753  : 					if (radarfileData->Rwrsoundsearch3) 

	mov	ecx, DWORD PTR _radarfileData$[ebp]
	cmp	DWORD PTR [ecx+96], 0
	je	SHORT $LN11@DoAudio

; 754  : 						sound = radarfileData->Rwrsoundsearch3;

	mov	edx, DWORD PTR _radarfileData$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR _sound$1[ebp], eax
$LN11@DoAudio:

; 755  : 				}
; 756  : 			// no data file...
; 757  : 				assert(sound);
; 758  : 				if(!sound) sound = record->radarData->RWRsound;				

	cmp	DWORD PTR _sound$1[ebp], 0
	jne	SHORT $LN10@DoAudio
	mov	ecx, DWORD PTR _record$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _sound$1[ebp], eax
$LN10@DoAudio:

; 759  : 			}

	jmp	SHORT $LN7@DoAudio
$LN21@DoAudio:

; 760  : 			else if (mode == FEC_RADAR_GUIDE )

	cmp	DWORD PTR _mode$[ebp], 6
	jne	SHORT $LN7@DoAudio

; 761  : 			if (radarfileData->Rwrsoundguide) sound = radarfileData->Rwrsoundguide;

	mov	ecx, DWORD PTR _radarfileData$[ebp]
	cmp	DWORD PTR [ecx+104], 0
	je	SHORT $LN7@DoAudio
	mov	edx, DWORD PTR _radarfileData$[ebp]
	mov	eax, DWORD PTR [edx+104]
	mov	DWORD PTR _sound$1[ebp], eax
$LN7@DoAudio:

; 762  : 
; 763  : 			if (mode != FEC_RADAR_OFF || record->isLocked)

	cmp	DWORD PTR _mode$[ebp], 0
	jne	SHORT $LN5@DoAudio
	mov	ecx, DWORD PTR _record$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	and	edx, 1
	je	SHORT $LN2@DoAudio
$LN5@DoAudio:

; 764  : 			{
; 765  : 				if (!sound)  sound = record->radarData->RWRsound;

	cmp	DWORD PTR _sound$1[ebp], 0
	jne	SHORT $LN4@DoAudio
	mov	eax, DWORD PTR _record$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _sound$1[ebp], edx
$LN4@DoAudio:

; 766  : 
; 767  : 				ShiAssert( record->entity );
; 768  : 				ShiAssert( record->radarData->RWRsound > 0 );
; 769  : 				if (sound)

	cmp	DWORD PTR _sound$1[ebp], 0
	je	SHORT $LN3@DoAudio

; 770  : 				//F4SoundFXSetDist( sound, FALSE, 0.0f, 1.0f );
; 771  : 				PlayRWRSoundFX( sound, FALSE, 0.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	eax, DWORD PTR _sound$1[ebp]
	push	eax
	call	?PlayRWRSoundFX@@YAXHHMM@Z		; PlayRWRSoundFX
	add	esp, 16					; 00000010H
$LN3@DoAudio:

; 772  : 				
; 773  : 				record->newDetection = FALSE;

	mov	ecx, DWORD PTR _record$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	and	edx, -17				; ffffffefH
	mov	eax, DWORD PTR _record$[ebp]
	mov	DWORD PTR [eax+20], edx

; 774  : 				record->playIt = FALSE; // JB 010728

	mov	ecx, DWORD PTR _record$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	and	edx, -513				; fffffdffH
	mov	eax, DWORD PTR _record$[ebp]
	mov	DWORD PTR [eax+20], edx

; 775  : 
; 776  : 	// JB 010727 RP5 RWR
; 777  : 	// 2001-02-27 ADDED BY S.G. record->lastPlayed AS TWO FUNCTION NOW. ONE FOR THE PING LIKE BEFORE AND A TIMER FOR THE LAUNCH LIGHT WHEN 'record->missileActivity' IS SET
; 778  : 				if (!record->missileActivity)

	mov	ecx, DWORD PTR _record$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	shr	edx, 2
	and	edx, 1
	jne	SHORT $LN2@DoAudio

; 779  : 	// END OF ADDED SECTION
; 780  : 					record->lastPlayed = SimLibElapsedTime;

	mov	eax, DWORD PTR _record$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [eax+16], ecx
$LN2@DoAudio:

; 781  : 			}
; 782  : 		}
; 783  : 	}
; 784  : 
; 785  : 	if (newGuy)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+644], 0
	je	SHORT $LN1@DoAudio

; 786  : 	{
; 787  : 	//F4SoundFXSetDist( SFX_TWS_SEARCH, FALSE, 0.0f, 1.0f ); 
; 788  : 	//PlayRWRSoundFX( SFX_TWS_SEARCH, FALSE, 0.0f, 1.0f ); 
; 789  : 	PlayRWRSoundFX( record->radarData->RWRsound, FALSE, 0.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	eax, DWORD PTR _record$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?PlayRWRSoundFX@@YAXHHMM@Z		; PlayRWRSoundFX
	add	esp, 16					; 00000010H

; 790  : 	// ^ JPG 9 Dec 03 - Get rid of that annoying, unrealistic New Guy sound fx and play new guy sound FROM the actual emitter - TODO: play 3 bursts in 1.5 secs like RL
; 791  : 	newGuy = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+644], 0
$LN1@DoAudio:
$LN47@DoAudio:

; 792  : 	}
; 793  : }

	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN51@DoAudio:
	DD	$LN36@DoAudio
	DD	$LN39@DoAudio
	DD	$LN38@DoAudio
	DD	$LN37@DoAudio
	DD	$LN33@DoAudio
	DD	$LN32@DoAudio
?DoAudio@PlayerRwrClass@@IAEXPAUDetectListElement@VehRwrClass@@@Z ENDP ; PlayerRwrClass::DoAudio
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\playerrwr.cpp
_TEXT	SEGMENT
_trig$ = -48						; size = 8
_yPos$ = -40						; size = 4
_angle$ = -36						; size = 4
tv373 = -32						; size = 4
tv240 = -28						; size = 4
_xPos$ = -24						; size = 4
_radius$ = -20						; size = 4
_mode$1 = -16						; size = 4
_symbol$2 = -12						; size = 4
_this$ = -8						; size = 4
_radarfileData$ = -4					; size = 4
_record$ = 8						; size = 4
?DrawContact@PlayerRwrClass@@IAEXPAUDetectListElement@VehRwrClass@@@Z PROC ; PlayerRwrClass::DrawContact
; _this$ = ecx

; 462  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 463  : 	if (!g_bRWR) // JB 010802

	movzx	eax, BYTE PTR ?g_bRWR@@3_NA		; g_bRWR
	test	eax, eax
	jne	SHORT $LN31@DrawContac

; 464  : 		return;

	jmp	$LN32@DrawContac
$LN31@DrawContac:

; 465  : 	RadarDataSet* radarfileData = &radarDatFileTable[record->radarData->RDRDataInd];

	mov	ecx, DWORD PTR _record$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, WORD PTR [edx+6]
	imul	eax, 180				; 000000b4H
	add	eax, DWORD PTR ?radarDatFileTable@@3PAURadarDataSet@@A ; radarDatFileTable
	mov	DWORD PTR _radarfileData$[ebp], eax

; 466  : 	float	xPos, yPos, angle, radius;
; 467  : 	mlTrig	trig;
; 468  : 	
; 469  : 	ShiAssert( record->entity );
; 470  : 
; 471  : 	if (record->entity && !record->cantPlay)

	mov	ecx, DWORD PTR _record$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	$LN1@DrawContac
	mov	edx, DWORD PTR _record$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 8
	and	eax, 1
	jne	$LN1@DrawContac

; 472  : 	{
; 473  : 		angle = record->bearing - platform->Yaw();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv373[ebp]
	mov	edx, DWORD PTR _record$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	subss	xmm0, DWORD PTR tv373[ebp]
	movss	DWORD PTR _angle$[ebp], xmm0

; 474  : 		mlSinCos( &trig, angle );

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 475  : 
; 476  : // JB 010727 RP5 RWR
; 477  : // 2001-02-20 MOFIFIED BY S.G. SO WE CONVERT LOCKED TARGET LETHALITY TO SOME VALID NUMBER
; 478  : //		radius = (1.0F - record->lethality) * 0.95f;	// 0.95 keeps things from leaking off the edge of the display
; 479  : 		if (record->lethality > 1.0)

	mov	ecx, DWORD PTR _record$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+24]
	comisd	xmm0, QWORD PTR __real@3ff0000000000000
	jbe	SHORT $LN29@DrawContac

; 480  : 			radius = (2.0F - record->lethality) * 0.95f;	// 0.95 keeps things from leaking off the edge of the display

	mov	edx, DWORD PTR _record$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR [edx+24]
	mulss	xmm0, DWORD PTR __real@3f733333
	movss	DWORD PTR _radius$[ebp], xmm0

; 481  : 		else

	jmp	SHORT $LN28@DrawContac
$LN29@DrawContac:

; 482  : 			radius = (1.0F - record->lethality) * 0.95f;	// 0.95 keeps things from leaking off the edge of the display

	mov	eax, DWORD PTR _record$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR __real@3f733333
	movss	DWORD PTR _radius$[ebp], xmm0
$LN28@DrawContac:

; 483  : // END OF MODIFIED SECTION
; 484  : 
; 485  : 		xPos  = radius * trig.sin;

	movss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _xPos$[ebp], xmm0

; 486  : 		yPos  = radius * trig.cos;

	movss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _yPos$[ebp], xmm0

; 487  : 
; 488  : 		// Flip this display is we are upside down
; 489  : 		xPos *= flipFactor;

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+612]
	mulss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR _xPos$[ebp], xmm0

; 490  : 
; 491  : 		// Establish the 2D drawing transform
; 492  : 		display->CenterOriginInViewport();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 493  : 		display->AdjustOriginInViewport( xPos, yPos );

	push	ecx
	movss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 494  : 
; 495  : 		// Draw the emitter symbol
; 496  : 		// JB 010727 Draw 'F' for friendly aircraft
; 497  : 		if (g_bIFFRWR && (record->radarData->RWRsymbol == RWRSYM_ADVANCED_INTERCEPTOR ||
; 498  : 			record->radarData->RWRsymbol == RWRSYM_BASIC_INTERCEPTOR) &&
; 499  : 			!GetRoE(record->entity->GetTeam(),platform->GetTeam(), ROE_AIR_ENGAGE))

	movzx	ecx, BYTE PTR ?g_bIFFRWR@@3_NA		; g_bIFFRWR
	test	ecx, ecx
	je	SHORT $LN27@DrawContac
	mov	edx, DWORD PTR _record$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, WORD PTR [eax+4]
	cmp	ecx, 2
	je	SHORT $LN26@DrawContac
	mov	edx, DWORD PTR _record$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, WORD PTR [eax+4]
	cmp	ecx, 3
	jne	SHORT $LN27@DrawContac
$LN26@DrawContac:
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _record$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _record$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN27@DrawContac

; 500  : 		{
; 501  : 			DrawEmitterSymbol(RWRSYM_F);

	push	0
	push	70					; 00000046H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawEmitterSymbol@RwrClass@@IAEXHH@Z	; RwrClass::DrawEmitterSymbol
$LN27@DrawContac:

; 502  : 		}
; 503  : 
; 504  : // 2002-03-01 Modified by MN - if symbol is "S" = Searchradar, and we don't want them, don't draw them ;-)
; 505  : // 2002-03-03 don't display anything if "symbol" stays -1 (also no new detection arcs or such...)
; 506  : 		int mode, symbol = -1;

	mov	DWORD PTR _symbol$2[ebp], -1

; 507  : 
; 508  : 		if ( ((SimBaseClass*)record->entity)->IsSim() &&((BattalionClass*)((SimBaseClass*)record->entity)->GetCampaignObject()))

	mov	edx, DWORD PTR _record$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN25@DrawContac
	mov	eax, DWORD PTR _record$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	test	eax, eax
	je	SHORT $LN25@DrawContac

; 509  : 			mode = ((BattalionClass*)((SimBaseClass*)record->entity)->GetCampaignObject())->GetRadarMode();

	mov	ecx, DWORD PTR _record$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR tv240[ebp], eax
	mov	edx, DWORD PTR tv240[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv240[ebp]
	mov	edx, DWORD PTR [eax+128]
	call	edx
	mov	DWORD PTR _mode$1[ebp], eax

; 510  : 		else 

	jmp	SHORT $LN24@DrawContac
$LN25@DrawContac:

; 511  : 			mode = ((SimBaseClass*)record->entity)->GetRadarMode();

	mov	eax, DWORD PTR _record$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _record$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+128]
	call	edx
	mov	DWORD PTR _mode$1[ebp], eax
$LN24@DrawContac:

; 512  : 
; 513  : 		if (mode == FEC_RADAR_SEARCH_1 && radarfileData->Rwrsymbolsearch1)

	cmp	DWORD PTR _mode$1[ebp], 2
	jne	SHORT $LN23@DrawContac
	mov	eax, DWORD PTR _radarfileData$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN23@DrawContac

; 514  : 		{
; 515  : 			if ((radarfileData->Rwrsymbolsearch1 != RWRSYM_SEARCH) || 
; 516  : 				radarfileData->Rwrsymbolsearch1 == RWRSYM_SEARCH && ShowSearch())

	mov	ecx, DWORD PTR _radarfileData$[ebp]
	cmp	DWORD PTR [ecx+108], 17			; 00000011H
	jne	SHORT $LN21@DrawContac
	mov	edx, DWORD PTR _radarfileData$[ebp]
	cmp	DWORD PTR [edx+108], 17			; 00000011H
	jne	SHORT $LN22@DrawContac
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ShowSearch@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::ShowSearch
	test	eax, eax
	je	SHORT $LN22@DrawContac
$LN21@DrawContac:

; 517  : 					symbol = radarfileData->Rwrsymbolsearch1;

	mov	eax, DWORD PTR _radarfileData$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR _symbol$2[ebp], ecx
$LN22@DrawContac:

; 518  : 		}

	jmp	$LN8@DrawContac
$LN23@DrawContac:

; 519  : 		else if (mode == FEC_RADAR_SEARCH_2&& radarfileData->Rwrsymbolsearch2 )

	cmp	DWORD PTR _mode$1[ebp], 3
	jne	SHORT $LN19@DrawContac
	mov	edx, DWORD PTR _radarfileData$[ebp]
	cmp	DWORD PTR [edx+112], 0
	je	SHORT $LN19@DrawContac

; 520  : 		{
; 521  : 			if ((radarfileData->Rwrsymbolsearch2 != RWRSYM_SEARCH) || 
; 522  : 				radarfileData->Rwrsymbolsearch2 == RWRSYM_SEARCH && ShowSearch())

	mov	eax, DWORD PTR _radarfileData$[ebp]
	cmp	DWORD PTR [eax+112], 17			; 00000011H
	jne	SHORT $LN17@DrawContac
	mov	ecx, DWORD PTR _radarfileData$[ebp]
	cmp	DWORD PTR [ecx+112], 17			; 00000011H
	jne	SHORT $LN18@DrawContac
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ShowSearch@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::ShowSearch
	test	eax, eax
	je	SHORT $LN18@DrawContac
$LN17@DrawContac:

; 523  : 					symbol = radarfileData->Rwrsymbolsearch2;

	mov	edx, DWORD PTR _radarfileData$[ebp]
	mov	eax, DWORD PTR [edx+112]
	mov	DWORD PTR _symbol$2[ebp], eax
$LN18@DrawContac:

; 524  : 		}

	jmp	SHORT $LN8@DrawContac
$LN19@DrawContac:

; 525  : 		else if (mode == FEC_RADAR_SEARCH_3&& radarfileData->Rwrsymbolsearch3 )

	cmp	DWORD PTR _mode$1[ebp], 4
	jne	SHORT $LN15@DrawContac
	mov	ecx, DWORD PTR _radarfileData$[ebp]
	cmp	DWORD PTR [ecx+116], 0
	je	SHORT $LN15@DrawContac

; 526  : 		{
; 527  : 			if ((radarfileData->Rwrsymbolsearch3 != RWRSYM_SEARCH) || 
; 528  : 				radarfileData->Rwrsymbolsearch3 == RWRSYM_SEARCH && ShowSearch())

	mov	edx, DWORD PTR _radarfileData$[ebp]
	cmp	DWORD PTR [edx+116], 17			; 00000011H
	jne	SHORT $LN13@DrawContac
	mov	eax, DWORD PTR _radarfileData$[ebp]
	cmp	DWORD PTR [eax+116], 17			; 00000011H
	jne	SHORT $LN14@DrawContac
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ShowSearch@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::ShowSearch
	test	eax, eax
	je	SHORT $LN14@DrawContac
$LN13@DrawContac:

; 529  : 					symbol = radarfileData->Rwrsymbolsearch3;

	mov	ecx, DWORD PTR _radarfileData$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	DWORD PTR _symbol$2[ebp], edx
$LN14@DrawContac:

; 530  : 		}

	jmp	SHORT $LN8@DrawContac
$LN15@DrawContac:

; 531  : 		else if (mode == FEC_RADAR_AQUIRE && radarfileData->Rwrsymbolacuire)

	cmp	DWORD PTR _mode$1[ebp], 5
	jne	SHORT $LN11@DrawContac
	mov	eax, DWORD PTR _radarfileData$[ebp]
	cmp	DWORD PTR [eax+120], 0
	je	SHORT $LN11@DrawContac

; 532  : 					symbol = radarfileData->Rwrsymbolacuire;

	mov	ecx, DWORD PTR _radarfileData$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR _symbol$2[ebp], edx
	jmp	SHORT $LN8@DrawContac
$LN11@DrawContac:

; 533  : 		else if (mode == FEC_RADAR_GUIDE && radarfileData->Rwrsymbolguide)

	cmp	DWORD PTR _mode$1[ebp], 6
	jne	SHORT $LN9@DrawContac
	mov	eax, DWORD PTR _radarfileData$[ebp]
	cmp	DWORD PTR [eax+124], 0
	je	SHORT $LN9@DrawContac

; 534  : 					symbol = radarfileData->Rwrsymbolguide;

	mov	ecx, DWORD PTR _radarfileData$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	mov	DWORD PTR _symbol$2[ebp], edx
	jmp	SHORT $LN8@DrawContac
$LN9@DrawContac:

; 535  : 		else symbol = record->radarData->RWRsymbol;

	mov	eax, DWORD PTR _record$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, WORD PTR [ecx+4]
	mov	DWORD PTR _symbol$2[ebp], edx
$LN8@DrawContac:

; 536  : 
; 537  : 		if (symbol == -1)

	cmp	DWORD PTR _symbol$2[ebp], -1
	jne	SHORT $LN7@DrawContac

; 538  : 			return;

	jmp	$LN32@DrawContac
$LN7@DrawContac:

; 539  : 
; 540  : 		DrawEmitterSymbol(symbol);

	push	0
	mov	eax, DWORD PTR _symbol$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawEmitterSymbol@RwrClass@@IAEXHH@Z	; RwrClass::DrawEmitterSymbol

; 541  : 
; 542  : 		// Mark targets with locks on us
; 543  : 		if (record->missileActivity) {

	mov	ecx, DWORD PTR _record$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	shr	edx, 2
	and	edx, 1
	je	SHORT $LN4@DrawContac

; 544  : 			if (record->missileLaunch)

	mov	eax, DWORD PTR _record$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	shr	ecx, 3
	and	ecx, 1
	je	SHORT $LN5@DrawContac

; 545  : 				DrawStatusSymbol( MissileLaunch );

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z ; PlayerRwrClass::DrawStatusSymbol

; 546  : 			else 

	jmp	SHORT $LN4@DrawContac
$LN5@DrawContac:

; 547  : 				DrawStatusSymbol( MissileActivity );

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z ; PlayerRwrClass::DrawStatusSymbol
$LN4@DrawContac:

; 548  : 		}
; 549  : 
; 550  : 		// Mark the "designated" emitter (the one for which we're playing sound)
; 551  : 		if (record->selected)

	mov	edx, DWORD PTR _record$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 6
	and	eax, 1
	je	SHORT $LN3@DrawContac

; 552  : 			DrawStatusSymbol( Diamond );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z ; PlayerRwrClass::DrawStatusSymbol
$LN3@DrawContac:

; 553  : 
; 554  : 		// JB 010727
; 555  : 		if (record->newDetectionDisplay)

	mov	ecx, DWORD PTR _record$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	shr	edx, 5
	and	edx, 1
	je	SHORT $LN2@DrawContac

; 556  : 			DrawStatusSymbol(NewDetection);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z ; PlayerRwrClass::DrawStatusSymbol
$LN2@DrawContac:

; 557  : 		
; 558  : 		// RV - ERD - CTD FIX - it seems a missing casting to base object 
; 559  : 		//if((record->entity->IsAirplane())&& (symbol >= 65)) // Cobra - Put hat on a/c special symbols
; 560  : 		if((((SimBaseClass*)record->entity)->IsAirplane())&& (symbol >= 65)) // Cobra - Put hat on a/c special symbols

	mov	eax, DWORD PTR _record$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _record$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+192]
	call	edx
	test	eax, eax
	je	SHORT $LN1@DrawContac
	cmp	DWORD PTR _symbol$2[ebp], 65		; 00000041H
	jl	SHORT $LN1@DrawContac

; 561  : 			DrawStatusSymbol(Hat);

	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z ; PlayerRwrClass::DrawStatusSymbol
$LN1@DrawContac:
$LN32@DrawContac:

; 562  : 	}
; 563  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?DrawContact@PlayerRwrClass@@IAEXPAUDetectListElement@VehRwrClass@@@Z ENDP ; PlayerRwrClass::DrawContact
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\playerrwr.cpp
_TEXT	SEGMENT
_trig$1 = -20						; size = 8
_ang$2 = -12						; size = 4
_this$ = -8						; size = 4
_i$ = -4						; size = 4
?DrawGrid@PlayerRwrClass@@IAEXXZ PROC			; PlayerRwrClass::DrawGrid
; _this$ = ecx

; 796  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 797  : 	static int		fpass = TRUE;
; 798  : 	static float	tick[40][2];
; 799  : 	int				i;
; 800  : 	
; 801  : 	// The first time through, we compute some stuff
; 802  : 	// (It'd be more efficient to precompute a static array, but its easier to write this way)
; 803  : 	// An intermediate solution would be a simple class with one global instance and a constructor.
; 804  : 	if (fpass)

	cmp	DWORD PTR ?fpass@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4HA, 0
	je	$LN6@DrawGrid

; 805  : 	{
; 806  : 		float			ang;
; 807  : 		mlTrig			trig;
; 808  : 
; 809  : 		fpass = FALSE;

	mov	DWORD PTR ?fpass@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4HA, 0

; 810  : 
; 811  : 		for (i=0; i<5; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@DrawGrid
$LN7@DrawGrid:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@DrawGrid:
	cmp	DWORD PTR _i$[ebp], 5
	jge	$LN6@DrawGrid

; 812  : 		{
; 813  : 			ang = (i+1) * 15.0F * DTR;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR __real@41700000
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR _ang$2[ebp], xmm0

; 814  : 			mlSinCos (&trig, ang);

	push	ecx
	movss	xmm0, DWORD PTR _ang$2[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _trig$1[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 815  : 			tick[i*2][0] = 0.95F * trig.cos;

	movss	xmm0, DWORD PTR __real@3f733333
	mulss	xmm0, DWORD PTR _trig$1[ebp+4]
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, 4
	imul	ecx, 0
	movss	DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[ecx+eax*8], xmm0

; 816  : 			tick[i*2][1] = 0.95F * trig.sin;

	movss	xmm0, DWORD PTR __real@3f733333
	mulss	xmm0, DWORD PTR _trig$1[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 1
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[eax+edx*8], xmm0

; 817  : 			
; 818  : 			if (i != 2)

	cmp	DWORD PTR _i$[ebp], 2
	je	SHORT $LN5@DrawGrid

; 819  : 			{
; 820  : 				tick[i*2+1][0] = 0.80F * trig.cos;

	movss	xmm0, DWORD PTR __real@3f4ccccd
	mulss	xmm0, DWORD PTR _trig$1[ebp+4]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 1
	mov	edx, 4
	imul	edx, 0
	movss	DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[edx+ecx*8+8], xmm0

; 821  : 				tick[i*2+1][1] = 0.80F * trig.sin;

	movss	xmm0, DWORD PTR __real@3f4ccccd
	mulss	xmm0, DWORD PTR _trig$1[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[ecx+eax*8+8], xmm0

; 822  : 			}
; 823  : 			else

	jmp	SHORT $LN4@DrawGrid
$LN5@DrawGrid:

; 824  : 			{
; 825  : 				tick[i*2+1][0] = 0.70F * trig.cos;

	movss	xmm0, DWORD PTR __real@3f333333
	mulss	xmm0, DWORD PTR _trig$1[ebp+4]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 1
	mov	eax, 4
	imul	eax, 0
	movss	DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[eax+edx*8+8], xmm0

; 826  : 				tick[i*2+1][1] = 0.70F * trig.sin;

	movss	xmm0, DWORD PTR __real@3f333333
	mulss	xmm0, DWORD PTR _trig$1[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[edx+ecx*8+8], xmm0
$LN4@DrawGrid:

; 827  : 			}
; 828  : 			
; 829  : 			// Get the other quadrants
; 830  : 			tick [10 + i*2][0] =  tick[i*2][0];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 1
	mov	esi, 4
	imul	esi, 0
	mov	eax, DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[ecx+eax*8]
	mov	DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[esi+edx*8+80], eax

; 831  : 			tick [10 + i*2][1] = -tick[i*2][1];

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[edx+ecx*8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[ecx+eax*8+80], xmm0

; 832  : 			tick [11 + i*2][0] =  tick[i*2+1][0];

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 1
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 1
	mov	esi, 4
	imul	esi, 0
	mov	edx, DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[eax+edx*8+8]
	mov	DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[esi+ecx*8+88], edx

; 833  : 			tick [11 + i*2][1] = -tick[i*2+1][1];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[ecx+eax*8+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 1
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[eax+edx*8+88], xmm0

; 834  : 			
; 835  : 			tick [20 + i*2][0] = -tick[i*2][0];

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 1
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[edx+ecx*8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, 4
	imul	ecx, 0
	movss	DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[ecx+eax*8+160], xmm0

; 836  : 			tick [20 + i*2][1] = -tick[i*2][1];

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 1
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[eax+edx*8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[edx+ecx*8+160], xmm0

; 837  : 			tick [21 + i*2][0] = -tick[i*2+1][0];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[ecx+eax*8+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 1
	mov	eax, 4
	imul	eax, 0
	movss	DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[eax+edx*8+168], xmm0

; 838  : 			tick [21 + i*2][1] = -tick[i*2+1][1];

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[edx+ecx*8+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[ecx+eax*8+168], xmm0

; 839  : 			
; 840  : 			tick [30 + i*2][0] = -tick[i*2][0];

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 1
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[eax+edx*8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 1
	mov	edx, 4
	imul	edx, 0
	movss	DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[edx+ecx*8+240], xmm0

; 841  : 			tick [30 + i*2][1] =  tick[i*2][1];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 1
	mov	esi, 4
	shl	esi, 0
	mov	eax, DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[ecx+eax*8]
	mov	DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[esi+edx*8+240], eax

; 842  : 			tick [31 + i*2][0] = -tick[i*2+1][0];

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 1
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[edx+ecx*8+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, 4
	imul	ecx, 0
	movss	DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[ecx+eax*8+248], xmm0

; 843  : 			tick [31 + i*2][1] =  tick[i*2+1][1];

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 1
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 1
	mov	esi, 4
	shl	esi, 0
	mov	edx, DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[eax+edx*8+8]
	mov	DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[esi+ecx*8+248], edx

; 844  : 		}

	jmp	$LN7@DrawGrid
$LN6@DrawGrid:

; 845  : 	}
; 846  : 	
; 847  : 	// Now draw the three concentric circles
; 848  : 	display->Circle (0.0F, 0.0F, 0.95F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f733333
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+48]
	call	edx

; 849  : 	display->Circle (0.0F, 0.0F, 0.55F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f0ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+48]
	call	edx

; 850  : 	display->Circle (0.0F, 0.0F, 0.25F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+48]
	call	edx

; 851  : 
; 852  : 	// Draw the radial lines
; 853  : 	display->Line (0.0F, 0.95F, 0.0F, 0.2F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f733333
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 854  : 	display->Line (0.0F, -0.95F, 0.0F, -0.2F);

	push	ecx
	movss	xmm0, DWORD PTR __real@be4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf733333
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 855  : 	display->Line (0.95F, 0.0F, 0.2F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f733333
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 856  : 	display->Line (-0.95F, 0.0F, -0.2F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@be4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf733333
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 857  : 	
; 858  : 	// Draw the tick marks
; 859  : 	for (i=0; i<20; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@DrawGrid
$LN2@DrawGrid:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@DrawGrid:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jge	$LN1@DrawGrid

; 860  : 		display->Line (tick[i*2][0], tick[i*2][1], tick[i*2+1][0], tick[i*2+1][1]);

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[edx+ecx*8+8]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[ecx+eax*8+8]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 1
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[eax+edx*8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 1
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR ?tick@?1??DrawGrid@PlayerRwrClass@@IAEXXZ@4PAY01MA[edx+ecx*8]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 861  : 	}

	jmp	$LN2@DrawGrid
$LN1@DrawGrid:

; 862  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawGrid@PlayerRwrClass@@IAEXXZ ENDP			; PlayerRwrClass::DrawGrid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\playerrwr.cpp
_TEXT	SEGMENT
tv64 = -8						; size = 4
_this$ = -4						; size = 4
_symbol$ = 8						; size = 4
?DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z PROC		; PlayerRwrClass::DrawStatusSymbol
; _this$ = ecx

; 567  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 568  : 	static const float	MARK_SIZE = 0.15f;
; 569  : 	//MI
; 570  : 	static const float  HAT_SIZE = 0.06f;
; 571  : 	switch (symbol)

	mov	eax, DWORD PTR _symbol$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 4
	ja	$LN7@DrawStatus
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN11@DrawStatus[edx*4]
$LN6@DrawStatus:

; 572  : 	{
; 573  : 	  case Diamond:			// For designation
; 574  : 		display->Line(0.0F, MARK_SIZE, MARK_SIZE, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?MARK_SIZE@?1??DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?MARK_SIZE@?1??DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 575  : 		display->Line(0.0F, MARK_SIZE,-MARK_SIZE, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?MARK_SIZE@?1??DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?MARK_SIZE@?1??DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 576  : 		display->Line(0.0F,-MARK_SIZE, MARK_SIZE, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?MARK_SIZE@?1??DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z@4MB
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?MARK_SIZE@?1??DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 577  : 		display->Line(0.0F,-MARK_SIZE,-MARK_SIZE, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?MARK_SIZE@?1??DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?MARK_SIZE@?1??DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 578  : 		break;

	jmp	$LN7@DrawStatus
$LN5@DrawStatus:

; 579  : 		
; 580  : 		// JB 010727
; 581  : 		case NewDetection:
; 582  : 		display->Arc(0.0, 0.0, MARK_SIZE, float(180.0 * DTR), 0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40490fd9
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?MARK_SIZE@?1??DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+52]
	call	edx

; 583  : 		break;

	jmp	$LN7@DrawStatus
$LN4@DrawStatus:

; 584  : 
; 585  : 	  case MissileActivity:	// LAUNCH && !entity->IsMissile()
; 586  : 		  {
; 587  : 			  if (flash)  break;

	cmp	DWORD PTR _flash, 0
	je	SHORT $LN3@DrawStatus
	jmp	$LN7@DrawStatus
$LN3@DrawStatus:

; 588  : 		  }
; 589  : 	  case MissileLaunch:	// LAUNCH && entity->IsMissile()
; 590  : 		  {
; 591  : 			  display->Circle (0.0F, 0.0F, MARK_SIZE);

	push	ecx
	movss	xmm0, DWORD PTR ?MARK_SIZE@?1??DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+48]
	call	edx

; 592  : 		  }
; 593  : 		break;

	jmp	$LN7@DrawStatus
$LN1@DrawStatus:

; 594  : 	  case Hat:
; 595  : 		  display->Line(0.0F, HAT_SIZE + 0.04F, HAT_SIZE, 0.04F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3d23d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?HAT_SIZE@?1??DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z@4MB
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?HAT_SIZE@?1??DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z@4MB
	addss	xmm0, DWORD PTR __real@3d23d70a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 596  : 		  display->Line(0.0F, HAT_SIZE + 0.04F,-HAT_SIZE, 0.04F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3d23d70a
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?HAT_SIZE@?1??DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?HAT_SIZE@?1??DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z@4MB
	addss	xmm0, DWORD PTR __real@3d23d70a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx
$LN7@DrawStatus:

; 597  : 		  break;
; 598  : 	}
; 599  : }

	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN11@DrawStatus:
	DD	$LN6@DrawStatus
	DD	$LN3@DrawStatus
	DD	$LN4@DrawStatus
	DD	$LN5@DrawStatus
	DD	$LN1@DrawStatus
?DrawStatusSymbol@PlayerRwrClass@@IAEXH@Z ENDP		; PlayerRwrClass::DrawStatusSymbol
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\playerrwr.cpp
_TEXT	SEGMENT
tv166 = -20						; size = 4
tv173 = -16						; size = 4
tv161 = -12						; size = 4
_agl$ = -8						; size = 4
_this$ = -4						; size = 4
?AutoSelectAltitudePriority@PlayerRwrClass@@MAEXXZ PROC	; PlayerRwrClass::AutoSelectAltitudePriority
; _this$ = ecx

; 383  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 384  : 	ShiAssert( platform );
; 385  : 
; 386  : 	// Remember:  Z is negative up.
; 387  : 	float agl = OTWDriver.GetGroundLevel(platform->XPos(), platform->YPos()) - platform->ZPos();

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	fstp	DWORD PTR tv161[ebp]
	movss	xmm0, DWORD PTR tv161[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv173[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv166[ebp]
	movss	xmm0, DWORD PTR tv173[ebp]
	subss	xmm0, DWORD PTR tv166[ebp]
	movss	DWORD PTR _agl$[ebp], xmm0

; 388  : 
; 389  : 	if (agl > 6000.0f) {

	movss	xmm0, DWORD PTR _agl$[ebp]
	comiss	xmm0, DWORD PTR __real@45bb8000
	jbe	SHORT $LN3@AutoSelect

; 390  : 		lowAltPriority = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], 0
	jmp	SHORT $LN1@AutoSelect
$LN3@AutoSelect:

; 391  : 	} else if (agl < 5000.0f) {

	movss	xmm0, DWORD PTR __real@459c4000
	comiss	xmm0, DWORD PTR _agl$[ebp]
	jbe	SHORT $LN1@AutoSelect

; 392  : 		lowAltPriority = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], 1
$LN1@AutoSelect:

; 393  : 	}
; 394  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AutoSelectAltitudePriority@PlayerRwrClass@@MAEXXZ ENDP	; PlayerRwrClass::AutoSelectAltitudePriority
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\playerrwr.h
;	COMDAT ?ToggleAutoDrop@PlayerRwrClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToggleAutoDrop@PlayerRwrClass@@UAEXXZ PROC		; PlayerRwrClass::ToggleAutoDrop, COMDAT
; _this$ = ecx

; 57   : 	virtual void ToggleAutoDrop(void)			{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleAutoDrop@PlayerRwrClass@@UAEXXZ ENDP		; PlayerRwrClass::ToggleAutoDrop
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\playerrwr.h
;	COMDAT ?ToggleLowAltPriority@PlayerRwrClass@@UAEXXZ
_TEXT	SEGMENT
tv75 = -8						; size = 4
_this$ = -4						; size = 4
?ToggleLowAltPriority@PlayerRwrClass@@UAEXXZ PROC	; PlayerRwrClass::ToggleLowAltPriority, COMDAT
; _this$ = ecx

; 56   : 	virtual void ToggleLowAltPriority (void)	{lowAltPriority	= !lowAltPriority;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+592], 0
	jne	SHORT $LN3@ToggleLowA
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@ToggleLowA
$LN3@ToggleLowA:
	mov	DWORD PTR tv75[ebp], 0
$LN4@ToggleLowA:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv75[ebp]
	mov	DWORD PTR [ecx+592], edx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleLowAltPriority@PlayerRwrClass@@UAEXXZ ENDP	; PlayerRwrClass::ToggleLowAltPriority
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\playerrwr.cpp
_TEXT	SEGMENT
_foundSelected$ = -24					; size = 4
_last$ = -20						; size = 4
tv77 = -16						; size = 4
_drawn$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?SelectNextEmitter@PlayerRwrClass@@UAEXXZ PROC		; PlayerRwrClass::SelectNextEmitter
; _this$ = ecx

; 944  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 945  : 	int	foundSelected = FALSE;

	mov	DWORD PTR _foundSelected$[ebp], 0

; 946  : 	int	drawn;
; 947  : 	int	last;
; 948  : 	int i;
; 949  : 
; 950  : 
; 951  : 	// Decide how many contacts are being drawn
; 952  : 	if (priorityMode) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+620], 0
	je	SHORT $LN8@SelectNext

; 953  : 		last = min (PriorityContacts, numContacts);

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+588], 5
	jle	SHORT $LN11@SelectNext
	mov	DWORD PTR tv77[ebp], 5
	jmp	SHORT $LN12@SelectNext
$LN11@SelectNext:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+588]
	mov	DWORD PTR tv77[ebp], eax
$LN12@SelectNext:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR _last$[ebp], ecx

; 954  : 	} else {

	jmp	SHORT $LN7@SelectNext
$LN8@SelectNext:

; 955  : 		last = numContacts;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+588]
	mov	DWORD PTR _last$[ebp], eax
$LN7@SelectNext:

; 956  : 	}
; 957  : 	
; 958  : 	// Loop through the (drawn) contacts
; 959  : 	for (i=0, drawn = 0; i<numContacts && drawn < last; i++)

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _drawn$[ebp], 0
	jmp	SHORT $LN6@SelectNext
$LN5@SelectNext:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@SelectNext:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+588]
	jge	$LN4@SelectNext
	mov	ecx, DWORD PTR _drawn$[ebp]
	cmp	ecx, DWORD PTR _last$[ebp]
	jge	$LN4@SelectNext

; 960  : 	{
; 961  : 		if (IsFiltered (detectionList[i].entity))

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+76]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsFiltered@PlayerRwrClass@@QAEHPAVFalconEntity@@@Z ; PlayerRwrClass::IsFiltered
	test	eax, eax
	je	SHORT $LN3@SelectNext

; 962  : 		{
; 963  : 			continue;

	jmp	SHORT $LN5@SelectNext
$LN3@SelectNext:

; 964  : 		}
; 965  : 
; 966  : 		// This one will draw
; 967  : 		drawn++;

	mov	edx, DWORD PTR _drawn$[ebp]
	add	edx, 1
	mov	DWORD PTR _drawn$[ebp], edx

; 968  : 
; 969  : 		// If this is the selected target, clear its flag
; 970  : 		if (detectionList[i].selected) {

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+96]
	shr	edx, 6
	and	edx, 1
	je	SHORT $LN2@SelectNext

; 971  : 			detectionList[i].selected = 0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+96]
	and	edx, -65				; ffffffbfH
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+96], edx

; 972  : 			foundSelected = TRUE;

	mov	DWORD PTR _foundSelected$[ebp], 1

; 973  : 			continue;

	jmp	$LN5@SelectNext
$LN2@SelectNext:

; 974  : 		}
; 975  : 
; 976  : 		// If we've already passed the previously selected target, then make this the new one
; 977  : 		if (foundSelected) {

	cmp	DWORD PTR _foundSelected$[ebp], 0
	je	SHORT $LN1@SelectNext

; 978  : 			detectionList[i].selected = 1;

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+96]
	or	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+96], ecx

; 979  : // JB 010727 RP5 RWR
; 980  : // 2001-02-15 ADDED BY S.G. SO THE SOUND PLAYS RIGHT AWAY...
; 981  : 			detectionList[i].playIt = 1;

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+96]
	or	eax, 512				; 00000200H
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+96], eax

; 982  : // END OF ADDED SECTION
; 983  : 			return;

	jmp	SHORT $LN9@SelectNext
$LN1@SelectNext:

; 984  : 		}
; 985  : 	}

	jmp	$LN5@SelectNext
$LN4@SelectNext:

; 986  : 
; 987  : 	// If we get here, we didn't find a "next" selected target, so select the first contact
; 988  : 	detectionList[0].selected = 1;

	mov	eax, 32					; 00000020H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+96]
	or	edx, 64					; 00000040H
	mov	eax, 32					; 00000020H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+96], edx

; 989  : 
; 990  : // JB 010727 RP5 RWR
; 991  : // 2001-02-15 ADDED BY S.G. SO THE SOUND PLAYS RIGHT AWAY...
; 992  : 	detectionList[0].playIt = 1;

	mov	edx, 32					; 00000020H
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+96]
	or	ecx, 512				; 00000200H
	mov	edx, 32					; 00000020H
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+96], ecx
$LN9@SelectNext:

; 993  : // END OF ADDED SECTION
; 994  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SelectNextEmitter@PlayerRwrClass@@UAEXXZ ENDP		; PlayerRwrClass::SelectNextEmitter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\playerrwr.h
;	COMDAT ?ToggleSearch@PlayerRwrClass@@UAEXXZ
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?ToggleSearch@PlayerRwrClass@@UAEXXZ PROC		; PlayerRwrClass::ToggleSearch, COMDAT
; _this$ = ecx

; 54   : 	virtual void ToggleSearch (void)			{showSearch		= !showSearch;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+636], 0
	jne	SHORT $LN3@ToggleSear
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@ToggleSear
$LN3@ToggleSear:
	mov	DWORD PTR tv67[ebp], 0
$LN4@ToggleSear:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR [ecx+636], edx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleSearch@PlayerRwrClass@@UAEXXZ ENDP		; PlayerRwrClass::ToggleSearch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\playerrwr.h
;	COMDAT ?ToggleNaval@PlayerRwrClass@@UAEXXZ
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?ToggleNaval@PlayerRwrClass@@UAEXXZ PROC		; PlayerRwrClass::ToggleNaval, COMDAT
; _this$ = ecx

; 53   : 	virtual void ToggleNaval (void)				{showNaval		= !showNaval;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+632], 0
	jne	SHORT $LN3@ToggleNava
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@ToggleNava
$LN3@ToggleNava:
	mov	DWORD PTR tv67[ebp], 0
$LN4@ToggleNava:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR [ecx+632], edx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleNaval@PlayerRwrClass@@UAEXXZ ENDP		; PlayerRwrClass::ToggleNaval
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\playerrwr.h
;	COMDAT ?ToggleUnknowns@PlayerRwrClass@@UAEXXZ
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?ToggleUnknowns@PlayerRwrClass@@UAEXXZ PROC		; PlayerRwrClass::ToggleUnknowns, COMDAT
; _this$ = ecx

; 52   : 	virtual void ToggleUnknowns (void)			{showUnknowns	= !showUnknowns;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+628], 0
	jne	SHORT $LN3@ToggleUnkn
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@ToggleUnkn
$LN3@ToggleUnkn:
	mov	DWORD PTR tv67[ebp], 0
$LN4@ToggleUnkn:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR [ecx+628], edx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleUnknowns@PlayerRwrClass@@UAEXXZ ENDP		; PlayerRwrClass::ToggleUnknowns
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\playerrwr.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToggleTargetSep@PlayerRwrClass@@UAEXXZ PROC		; PlayerRwrClass::ToggleTargetSep
; _this$ = ecx

; 891  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 892  :    if (targetSep < FloatToInt32(5.0F * SEC_TO_MSEC))

	push	ecx
	movss	xmm0, DWORD PTR __real@459c4000
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+624], eax
	jge	SHORT $LN1@ToggleTarg

; 893  :       targetSep = FloatToInt32(5.0F * SEC_TO_MSEC);

	push	ecx
	movss	xmm0, DWORD PTR __real@459c4000
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+624], eax
$LN1@ToggleTarg:

; 894  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleTargetSep@PlayerRwrClass@@UAEXXZ ENDP		; PlayerRwrClass::ToggleTargetSep
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\playerrwr.h
;	COMDAT ?TogglePriority@PlayerRwrClass@@UAEXXZ
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?TogglePriority@PlayerRwrClass@@UAEXXZ PROC		; PlayerRwrClass::TogglePriority, COMDAT
; _this$ = ecx

; 50   : 	virtual void TogglePriority (void)			{priorityMode	= !priorityMode;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+620], 0
	jne	SHORT $LN3@TogglePrio
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@TogglePrio
$LN3@TogglePrio:
	mov	DWORD PTR tv67[ebp], 0
$LN4@TogglePrio:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR [ecx+620], edx
	mov	esp, ebp
	pop	ebp
	ret	0
?TogglePriority@PlayerRwrClass@@UAEXXZ ENDP		; PlayerRwrClass::TogglePriority
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\playerrwr.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
?LightUnknowns@PlayerRwrClass@@QAEHXZ PROC		; PlayerRwrClass::LightUnknowns
; _this$ = ecx

; 918  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 919  : 	// Take the easy way if the search button is pushed
; 920  : 	if (ShowUnknowns()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ShowUnknowns@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::ShowUnknowns
	test	eax, eax
	je	SHORT $LN6@LightUnkno

; 921  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN7@LightUnkno
$LN6@LightUnkno:

; 922  : 	}
; 923  : 
; 924  : 	// Take the easy way if it isn't time to flash
; 925  : 	if (flash) {

	cmp	DWORD PTR _flash, 0
	je	SHORT $LN5@LightUnkno

; 926  : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN7@LightUnkno
$LN5@LightUnkno:

; 927  : 	}
; 928  : 
; 929  : 	// Okay, now we gotta look
; 930  : 	for (int i=0; i<numContacts; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@LightUnkno
$LN3@LightUnkno:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@LightUnkno:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$1[ebp]
	cmp	edx, DWORD PTR [ecx+588]
	jge	SHORT $LN2@LightUnkno

; 931  : 	{
; 932  : 		if (detectionList[i].radarData->RWRsymbol == RWRSYM_UNKNOWN) {

	mov	eax, DWORD PTR _i$1[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+80]
	movsx	eax, WORD PTR [edx+4]
	cmp	eax, 1
	jne	SHORT $LN1@LightUnkno

; 933  : 			// We found one, so light the light
; 934  : 			return TRUE;

	mov	eax, 1
	jmp	SHORT $LN7@LightUnkno
$LN1@LightUnkno:

; 935  : 		}
; 936  : 	}

	jmp	SHORT $LN3@LightUnkno
$LN2@LightUnkno:

; 937  : 
; 938  : 	// If we got here, we didn't find any unknown radars in our hit list
; 939  : 	return FALSE;

	xor	eax, eax
$LN7@LightUnkno:

; 940  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?LightUnknowns@PlayerRwrClass@@QAEHXZ ENDP		; PlayerRwrClass::LightUnknowns
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\playerrwr.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
?LightSearch@PlayerRwrClass@@QAEHXZ PROC		; PlayerRwrClass::LightSearch
; _this$ = ecx

; 866  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 867  : 	// Take the easy way if the search button is pushed
; 868  : 	if (ShowSearch()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ShowSearch@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::ShowSearch
	test	eax, eax
	je	SHORT $LN6@LightSearc

; 869  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN7@LightSearc
$LN6@LightSearc:

; 870  : 	}
; 871  : 
; 872  : 	// Take the easy way if it isn't time to flash
; 873  : 	if (flash) {

	cmp	DWORD PTR _flash, 0
	je	SHORT $LN5@LightSearc

; 874  : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN7@LightSearc
$LN5@LightSearc:

; 875  : 	}
; 876  : 
; 877  : 	// Okay, now we gotta look
; 878  : 	for (int i=0; i<numContacts; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@LightSearc
$LN3@LightSearc:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@LightSearc:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$1[ebp]
	cmp	edx, DWORD PTR [ecx+588]
	jge	SHORT $LN2@LightSearc

; 879  : 	{
; 880  : 		if (detectionList[i].radarData->RWRsymbol == RWRSYM_SEARCH) {

	mov	eax, DWORD PTR _i$1[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+80]
	movsx	eax, WORD PTR [edx+4]
	cmp	eax, 17					; 00000011H
	jne	SHORT $LN1@LightSearc

; 881  : 			// We found one, so light the light
; 882  : 			return TRUE;

	mov	eax, 1
	jmp	SHORT $LN7@LightSearc
$LN1@LightSearc:

; 883  : 		}
; 884  : 	}

	jmp	SHORT $LN3@LightSearc
$LN2@LightSearc:

; 885  : 
; 886  : 	// If we got here, we didn't find any search radars in our hit list
; 887  : 	return FALSE;

	xor	eax, eax
$LN7@LightSearc:

; 888  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?LightSearch@PlayerRwrClass@@QAEHXZ ENDP		; PlayerRwrClass::LightSearch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\playerrwr.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv75 = -4						; size = 4
?ManualSelect@PlayerRwrClass@@QAEHXZ PROC		; PlayerRwrClass::ManualSelect
; _this$ = ecx

; 897  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 898  : #if 1
; 899  : 	return !detectionList[0].selected;

	mov	eax, 32					; 00000020H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+96]
	shr	edx, 6
	and	edx, 1
	jne	SHORT $LN3@ManualSele
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@ManualSele
$LN3@ManualSele:
	mov	DWORD PTR tv75[ebp], 0
$LN4@ManualSele:
	mov	eax, DWORD PTR tv75[ebp]

; 900  : #else
; 901  : 	// Lets look through the list
; 902  : 	// TODO:  Set a flag for this and the other lights during EXEC
; 903  : 	for (int i=0; i<numContacts; i++)
; 904  : 	{
; 905  : 		if (detectionList[i].selected) {
; 906  : 			// We found one, so light the light
; 907  : 			return TRUE;
; 908  : 		}
; 909  : 	}
; 910  : 
; 911  : 	// If we got here, we didn't find a manually selected emitter
; 912  : 	return FALSE;
; 913  : #endif
; 914  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ManualSelect@PlayerRwrClass@@QAEHXZ ENDP		; PlayerRwrClass::ManualSelect
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\playerrwr.cpp
_TEXT	SEGMENT
tv149 = -12						; size = 4
_this$ = -8						; size = 4
_radarData$ = -4					; size = 4
_entity$ = 8						; size = 4
?IsFiltered@PlayerRwrClass@@QAEHPAVFalconEntity@@@Z PROC ; PlayerRwrClass::IsFiltered
; _this$ = ecx

; 1001 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1002 : 	RadarDataType
; 1003 : 		*radarData = NULL;

	mov	DWORD PTR _radarData$[ebp], 0

; 1004 : 		
; 1005 : 	if (entity)

	cmp	DWORD PTR _entity$[ebp], 0
	je	$LN5@IsFiltered

; 1006 : 	{
; 1007 : 		if (GetLethality (entity) <= 0.0f)

	mov	eax, DWORD PTR _entity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	call	eax
	fstp	DWORD PTR tv149[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv149[ebp]
	jb	SHORT $LN6@IsFiltered

; 1008 : 		{
; 1009 : 			return TRUE;

	mov	eax, 1
	jmp	$LN8@IsFiltered
$LN6@IsFiltered:

; 1010 : 		}
; 1011 : 
; 1012 : 		radarData = &RadarDataTable[entity->GetRadarType()];

	mov	ecx, DWORD PTR _entity$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _entity$[ebp]
	mov	eax, DWORD PTR [edx+292]
	call	eax
	imul	eax, 58					; 0000003aH
	add	eax, DWORD PTR ?RadarDataTable@@3PAURadarDataType@@A ; RadarDataTable
	mov	DWORD PTR _radarData$[ebp], eax

; 1013 : 
; 1014 : 		if (radarData)

	je	$LN5@IsFiltered

; 1015 : 		{
; 1016 : 			if (!ShowUnknowns() && 
; 1017 : 				(radarData->RWRsymbol == RWRSYM_UNKNOWN ||
; 1018 : 				 radarData->RWRsymbol == RWRSYM_UNK1||
; 1019 : 				 radarData->RWRsymbol == RWRSYM_UNK2||
; 1020 : 				 radarData->RWRsymbol == RWRSYM_UNK3))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ShowUnknowns@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::ShowUnknowns
	test	eax, eax
	jne	SHORT $LN4@IsFiltered
	mov	ecx, DWORD PTR _radarData$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	cmp	edx, 1
	je	SHORT $LN3@IsFiltered
	mov	eax, DWORD PTR _radarData$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	cmp	ecx, 27					; 0000001bH
	je	SHORT $LN3@IsFiltered
	mov	edx, DWORD PTR _radarData$[ebp]
	movsx	eax, WORD PTR [edx+4]
	cmp	eax, 28					; 0000001cH
	je	SHORT $LN3@IsFiltered
	mov	ecx, DWORD PTR _radarData$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	cmp	edx, 29					; 0000001dH
	jne	SHORT $LN4@IsFiltered
$LN3@IsFiltered:

; 1021 : 			{
; 1022 : 				return TRUE;

	mov	eax, 1
	jmp	SHORT $LN8@IsFiltered
$LN4@IsFiltered:

; 1023 : 			}
; 1024 : 
; 1025 : 			if (!ShowSearch() && (radarData->RWRsymbol == RWRSYM_SEARCH ))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ShowSearch@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::ShowSearch
	test	eax, eax
	jne	SHORT $LN2@IsFiltered
	mov	eax, DWORD PTR _radarData$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	cmp	ecx, 17					; 00000011H
	jne	SHORT $LN2@IsFiltered

; 1026 : 			{
; 1027 : 				return TRUE;

	mov	eax, 1
	jmp	SHORT $LN8@IsFiltered
$LN2@IsFiltered:

; 1028 : 			}
; 1029 : 
; 1030 : 			if (!ShowNaval() && (radarData->RWRsymbol == RWRSYM_NAVAL))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ShowNaval@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::ShowNaval
	test	eax, eax
	jne	SHORT $LN1@IsFiltered
	mov	edx, DWORD PTR _radarData$[ebp]
	movsx	eax, WORD PTR [edx+4]
	cmp	eax, 18					; 00000012H
	jne	SHORT $LN1@IsFiltered

; 1031 : 			{
; 1032 : 				return TRUE;

	mov	eax, 1
	jmp	SHORT $LN8@IsFiltered
$LN1@IsFiltered:

; 1033 : 			}
; 1034 : 
; 1035 : 			return FALSE;

	xor	eax, eax
	jmp	SHORT $LN8@IsFiltered
$LN5@IsFiltered:

; 1036 : 		}
; 1037 : 	}
; 1038 : 
; 1039 : 	return TRUE;

	mov	eax, 1
$LN8@IsFiltered:

; 1040 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsFiltered@PlayerRwrClass@@QAEHPAVFalconEntity@@@Z ENDP ; PlayerRwrClass::IsFiltered
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\playerrwr.h
;	COMDAT ?ShowSearch@PlayerRwrClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ShowSearch@PlayerRwrClass@@QAEHXZ PROC			; PlayerRwrClass::ShowSearch, COMDAT
; _this$ = ecx

; 43   : 	int ShowSearch (void)		{return showSearch;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+636]
	mov	esp, ebp
	pop	ebp
	ret	0
?ShowSearch@PlayerRwrClass@@QAEHXZ ENDP			; PlayerRwrClass::ShowSearch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\playerrwr.h
;	COMDAT ?ShowNaval@PlayerRwrClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ShowNaval@PlayerRwrClass@@QAEHXZ PROC			; PlayerRwrClass::ShowNaval, COMDAT
; _this$ = ecx

; 42   : 	int ShowNaval (void)		{return showNaval;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+632]
	mov	esp, ebp
	pop	ebp
	ret	0
?ShowNaval@PlayerRwrClass@@QAEHXZ ENDP			; PlayerRwrClass::ShowNaval
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\playerrwr.h
;	COMDAT ?ShowUnknowns@PlayerRwrClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ShowUnknowns@PlayerRwrClass@@QAEHXZ PROC		; PlayerRwrClass::ShowUnknowns, COMDAT
; _this$ = ecx

; 41   : 	int ShowUnknowns (void)		{return showUnknowns;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+628]
	mov	esp, ebp
	pop	ebp
	ret	0
?ShowUnknowns@PlayerRwrClass@@QAEHXZ ENDP		; PlayerRwrClass::ShowUnknowns
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\playerrwr.cpp
_TEXT	SEGMENT
tv562 = -92						; size = 8
tv547 = -84						; size = 8
tv527 = -76						; size = 8
tv512 = -68						; size = 8
tv560 = -60						; size = 4
tv555 = -56						; size = 4
tv632 = -52						; size = 4
tv525 = -48						; size = 4
tv520 = -44						; size = 4
tv630 = -40						; size = 4
tv354 = -36						; size = 4
tv268 = -32						; size = 4
tv543 = -28						; size = 4
tv225 = -24						; size = 4
tv508 = -20						; size = 4
tv180 = -16						; size = 4
tv93 = -12						; size = 4
_this$ = -8						; size = 4
tv557 = -4						; size = 2
tv522 = -2						; size = 2
?CheckEWS@PlayerRwrClass@@QAEXXZ PROC			; PlayerRwrClass::CheckEWS
; _this$ = ecx

; 1046 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1047 : 	if (!g_bRWR) // JB 010802

	movzx	eax, BYTE PTR ?g_bRWR@@3_NA		; g_bRWR
	test	eax, eax
	jne	SHORT $LN28@CheckEWS

; 1048 : 		return;

	jmp	$LN29@CheckEWS
$LN28@CheckEWS:

; 1049 : 
; 1050 : 	if (F4IsBadReadPtr(SimDriver.GetPlayerAircraft(), sizeof(AircraftClass))) // JB 010408 CTD

	push	3624					; 00000e28H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN27@CheckEWS

; 1051 : 		return;

	jmp	$LN29@CheckEWS
$LN27@CheckEWS:

; 1052 : 
; 1053 : 	//Check for Power and Failure
; 1054 : 	if(!SimDriver.GetPlayerAircraft()->HasPower(AircraftClass::UFCPower) ||
; 1055 : 		SimDriver.GetPlayerAircraft()->mFaults->GetFault(FaultClass::ufc_fault) ||
; 1056 : 		SimDriver.GetPlayerAircraft()->IsExploding())

	push	8
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?HasPower@AircraftClass@@QAEHW4AvionicsPowerFlags@1@@Z ; AircraftClass::HasPower
	test	eax, eax
	je	SHORT $LN25@CheckEWS
	push	28					; 0000001cH
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN25@CheckEWS
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR tv93[ebp], eax
	mov	edx, DWORD PTR tv93[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv93[ebp]
	mov	edx, DWORD PTR [eax+208]
	call	edx
	test	eax, eax
	je	SHORT $LN26@CheckEWS
$LN25@CheckEWS:

; 1057 : 		return;

	jmp	$LN29@CheckEWS
$LN26@CheckEWS:

; 1058 : 
; 1059 : 	if(LaunchIndication() && /*!InEWSLoop &&*/ !LaunchDetected)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LaunchIndication@PlayerRwrClass@@QAEHXZ ; PlayerRwrClass::LaunchIndication
	test	eax, eax
	je	$LN22@CheckEWS
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+608]
	test	ecx, ecx
	jne	$LN22@CheckEWS

; 1060 : 	{
; 1061 : 		//F4SoundFXSetDist(SFX_BB_COUNTER, TRUE, 0.0f, 1.0f );
; 1062 : 		PlayRWRSoundFX(SFX_BB_COUNTER, TRUE, 0.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	1
	push	180					; 000000b4H
	call	?PlayRWRSoundFX@@YAXHHMM@Z		; PlayRWRSoundFX
	add	esp, 16					; 00000010H

; 1063 : 		if (SimDriver.GetPlayerAircraft()->EWSPGM() == AircraftClass::EWSPGMSwitch::Auto)

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?EWSPGM@AircraftClass@@QAE?AW4EWSPGMSwitch@1@XZ ; AircraftClass::EWSPGM
	cmp	eax, 4
	jne	SHORT $LN23@CheckEWS

; 1064 : 		{
; 1065 : 			InEWSLoop = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+600], 1

; 1066 : 			SimDriver.GetPlayerAircraft()->DropEWS();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?DropEWS@AircraftClass@@QAEXXZ		; AircraftClass::DropEWS
$LN23@CheckEWS:

; 1067 : 		}
; 1068 : 		if(OTWDriver.pCockpitManager->mpIcp->iCHAFF_BQ[SimDriver.GetPlayerAircraft()->EWSProgNum] > 1 ||
; 1069 : 			OTWDriver.pCockpitManager->mpIcp->iFLARE_BQ[SimDriver.GetPlayerAircraft()->EWSProgNum] > 1)

	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	esi, DWORD PTR [eax+688]
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, DWORD PTR [eax+1500]
	cmp	DWORD PTR [esi+ecx*4+500], 1
	ja	SHORT $LN21@CheckEWS
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	esi, DWORD PTR [edx+688]
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	eax, DWORD PTR [eax+1500]
	cmp	DWORD PTR [esi+eax*4+540], 1
	jbe	SHORT $LN22@CheckEWS
$LN21@CheckEWS:

; 1070 : 		{	
; 1071 : 			LaunchDetected = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+608], 1
$LN22@CheckEWS:

; 1072 : 		}
; 1073 : 	}
; 1074 : 	if(!LaunchIndication())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LaunchIndication@PlayerRwrClass@@QAEHXZ ; PlayerRwrClass::LaunchIndication
	test	eax, eax
	jne	SHORT $LN20@CheckEWS

; 1075 : 		LaunchDetected = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+608], 0
$LN20@CheckEWS:

; 1076 : 	if(InEWSLoop && !SimDriver.GetPlayerAircraft()->IsExploding())

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+600]
	test	ecx, ecx
	je	$LN14@CheckEWS
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR tv180[ebp], eax
	mov	edx, DWORD PTR tv180[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv180[ebp]
	mov	edx, DWORD PTR [eax+208]
	call	edx
	test	eax, eax
	jne	$LN14@CheckEWS

; 1077 : 	{
; 1078 : 		if((unsigned int)SimDriver.GetPlayerAircraft()->ChaffCount >= OTWDriver.pCockpitManager->mpIcp->iCHAFF_BQ[SimDriver.GetPlayerAircraft()->EWSProgNum] &&
; 1079 : 			SimDriver.GetPlayerAircraft()->ChaffSalvoCount > 0 && !ChaffCheck)

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	esi, eax
	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	edi, DWORD PTR [eax+688]
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, DWORD PTR [eax+1500]
	mov	edx, DWORD PTR [esi+1020]
	cmp	edx, DWORD PTR [edi+ecx*4+500]
	jb	$LN18@CheckEWS
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	cmp	DWORD PTR [eax+1024], 0
	jle	$LN18@CheckEWS
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+609]
	test	ecx, ecx
	jne	$LN18@CheckEWS

; 1080 : 		{
; 1081 : 			//Set our timer
; 1082 : 			SimDriver.GetPlayerAircraft()->ChaffBurstInterval = (VU_TIME)(SimLibElapsedTime + (OTWDriver.pCockpitManager->mpIcp->fCHAFF_SI[SimDriver.GetPlayerAircraft()->EWSProgNum] * CampaignSeconds));

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR tv508[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv508[ebp]
	mov	eax, DWORD PTR tv508[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv512[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv512[ebp]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	esi, DWORD PTR [ecx+688]
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	movss	DWORD PTR tv630[ebp], xmm0
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	edx, DWORD PTR [eax+1500]
	movss	xmm0, DWORD PTR [esi+edx*4+600]
	mulss	xmm0, DWORD PTR __real@447a0000
	movss	xmm1, DWORD PTR tv630[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv520[ebp], xmm1
	fld	DWORD PTR tv520[ebp]
	fnstcw	WORD PTR tv522[ebp]
	movzx	eax, WORD PTR tv522[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv525[ebp], eax
	fldcw	WORD PTR tv525[ebp]
	fistp	QWORD PTR tv527[ebp]
	fldcw	WORD PTR tv522[ebp]
	mov	esi, DWORD PTR tv527[ebp]
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR [eax+1032], esi

; 1083 : 			//Reset our count
; 1084 : 			SimDriver.GetPlayerAircraft()->ChaffCount = 0;

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR [eax+1020], 0

; 1085 : 			//Mark us with one less to go
; 1086 : 			SimDriver.GetPlayerAircraft()->ChaffSalvoCount--;

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	add	eax, 1024				; 00000400H
	mov	DWORD PTR tv225[ebp], eax
	mov	eax, DWORD PTR tv225[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR tv225[ebp]
	mov	DWORD PTR [edx], ecx

; 1087 : 			//We've been here already
; 1088 : 			ChaffCheck = TRUE;							

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+609], 1
$LN18@CheckEWS:

; 1089 : 		}
; 1090 : 		if((unsigned int)SimDriver.GetPlayerAircraft()->FlareCount >= OTWDriver.pCockpitManager->mpIcp->iFLARE_BQ[SimDriver.GetPlayerAircraft()->EWSProgNum] &&
; 1091 : 			SimDriver.GetPlayerAircraft()->FlareSalvoCount > 0 && !FlareCheck)

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	esi, eax
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	edi, DWORD PTR [ecx+688]
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	edx, DWORD PTR [eax+1500]
	mov	eax, DWORD PTR [esi+1016]
	cmp	eax, DWORD PTR [edi+edx*4+540]
	jb	$LN17@CheckEWS
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	cmp	DWORD PTR [eax+1028], 0
	jle	$LN17@CheckEWS
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+610]
	test	edx, edx
	jne	$LN17@CheckEWS

; 1092 : 		{
; 1093 : 			//Reset our count
; 1094 : 			SimDriver.GetPlayerAircraft()->FlareCount = 0;

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR [eax+1016], 0

; 1095 : 			//Set our timer
; 1096 : 			SimDriver.GetPlayerAircraft()->FlareBurstInterval = (VU_TIME)(SimLibElapsedTime + (OTWDriver.pCockpitManager->mpIcp->fFLARE_SI[SimDriver.GetPlayerAircraft()->EWSProgNum] * CampaignSeconds));

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR tv543[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv543[ebp]
	mov	ecx, DWORD PTR tv543[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv547[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv547[ebp]
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	esi, DWORD PTR [edx+688]
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	movss	DWORD PTR tv632[ebp], xmm0
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	eax, DWORD PTR [eax+1500]
	movss	xmm0, DWORD PTR [esi+eax*4+640]
	mulss	xmm0, DWORD PTR __real@447a0000
	movss	xmm1, DWORD PTR tv632[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv555[ebp], xmm1
	fld	DWORD PTR tv555[ebp]
	fnstcw	WORD PTR tv557[ebp]
	movzx	eax, WORD PTR tv557[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv560[ebp], eax
	fldcw	WORD PTR tv560[ebp]
	fistp	QWORD PTR tv562[ebp]
	fldcw	WORD PTR tv557[ebp]
	mov	esi, DWORD PTR tv562[ebp]
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR [eax+1036], esi

; 1097 : 			//Mark us with one less to go
; 1098 : 			SimDriver.GetPlayerAircraft()->FlareSalvoCount--;

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	add	eax, 1028				; 00000404H
	mov	DWORD PTR tv268[ebp], eax
	mov	ecx, DWORD PTR tv268[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, 1
	mov	eax, DWORD PTR tv268[ebp]
	mov	DWORD PTR [eax], edx

; 1099 : 			//We've been here already
; 1100 : 			FlareCheck = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+610], 1
$LN17@CheckEWS:

; 1101 : 		}
; 1102 : 		if(SimLibElapsedTime >= SimDriver.GetPlayerAircraft()->ChaffBurstInterval && 
; 1103 : 			((unsigned int)SimDriver.GetPlayerAircraft()->ChaffCount < OTWDriver.pCockpitManager->mpIcp->iCHAFF_BQ[SimDriver.GetPlayerAircraft()->EWSProgNum]))

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	edx, DWORD PTR [eax+1032]
	jb	SHORT $LN16@CheckEWS
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	esi, eax
	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	edi, DWORD PTR [eax+688]
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, DWORD PTR [eax+1500]
	mov	edx, DWORD PTR [esi+1020]
	cmp	edx, DWORD PTR [edi+ecx*4+500]
	jae	SHORT $LN16@CheckEWS

; 1104 : 		{					
; 1105 : 			SimDriver.GetPlayerAircraft()->EWSChaffBurst();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?EWSChaffBurst@AircraftClass@@QAEXXZ	; AircraftClass::EWSChaffBurst

; 1106 : 			ChaffCheck = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+609], 0
$LN16@CheckEWS:

; 1107 : 		}
; 1108 : 		if(SimLibElapsedTime >= SimDriver.GetPlayerAircraft()->FlareBurstInterval &&
; 1109 : 			((unsigned int)SimDriver.GetPlayerAircraft()->FlareCount < OTWDriver.pCockpitManager->mpIcp->iFLARE_BQ[SimDriver.GetPlayerAircraft()->EWSProgNum]))

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	ecx, DWORD PTR [eax+1036]
	jb	SHORT $LN15@CheckEWS
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	esi, eax
	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	edi, DWORD PTR [edx+688]
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	eax, DWORD PTR [eax+1500]
	mov	ecx, DWORD PTR [esi+1016]
	cmp	ecx, DWORD PTR [edi+eax*4+540]
	jae	SHORT $LN15@CheckEWS

; 1110 : 		{
; 1111 : 			SimDriver.GetPlayerAircraft()->EWSFlareBurst();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?EWSFlareBurst@AircraftClass@@QAEXXZ	; AircraftClass::EWSFlareBurst

; 1112 : 			FlareCheck = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+610], 0
$LN15@CheckEWS:

; 1113 : 		}
; 1114 : 		if(SimDriver.GetPlayerAircraft()->FlareCount == OTWDriver.pCockpitManager->mpIcp->iFLARE_BQ[SimDriver.GetPlayerAircraft()->EWSProgNum] &&
; 1115 : 			SimDriver.GetPlayerAircraft()->ChaffCount == OTWDriver.pCockpitManager->mpIcp->iCHAFF_BQ[SimDriver.GetPlayerAircraft()->EWSProgNum] &&
; 1116 : 			SimDriver.GetPlayerAircraft()->ChaffSalvoCount <= 0 && SimDriver.GetPlayerAircraft()->FlareSalvoCount <= 0)

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	esi, eax
	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	edi, DWORD PTR [eax+688]
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, DWORD PTR [eax+1500]
	mov	edx, DWORD PTR [esi+1016]
	cmp	edx, DWORD PTR [edi+ecx*4+540]
	jne	SHORT $LN14@CheckEWS
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	esi, eax
	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	edi, DWORD PTR [eax+688]
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, DWORD PTR [eax+1500]
	mov	edx, DWORD PTR [esi+1020]
	cmp	edx, DWORD PTR [edi+ecx*4+500]
	jne	SHORT $LN14@CheckEWS
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	cmp	DWORD PTR [eax+1024], 0
	jg	SHORT $LN14@CheckEWS
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	cmp	DWORD PTR [eax+1028], 0
	jg	SHORT $LN14@CheckEWS

; 1117 : 		{
; 1118 : 			InEWSLoop = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+600], 0
$LN14@CheckEWS:

; 1119 : 		}
; 1120 : 	}
; 1121 : 
; 1122 : 	if(OTWDriver.pCockpitManager->mpIcp->EWS_JAMMER_ON)

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	edx, DWORD PTR [ecx+688]
	movzx	eax, BYTE PTR [edx+483]
	test	eax, eax
	je	$LN1@CheckEWS

; 1123 : 	{ 
; 1124 : 		if(HasActivity())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasActivity@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::HasActivity
	test	eax, eax
	je	$LN12@CheckEWS

; 1125 : 		{
; 1126 : 			//turn on ECM when getting locked up
; 1127 : 			if (SimDriver.GetPlayerAircraft()->HasSPJamming() && !SimDriver.GetPlayerAircraft()->mFaults->GetFault(FaultClass::blkr_fault) &&
; 1128 : 				!SimDriver.GetPlayerAircraft()->ManualECM)

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR tv354[ebp], eax
	mov	ecx, DWORD PTR tv354[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv354[ebp]
	mov	eax, DWORD PTR [edx+276]
	call	eax
	test	eax, eax
	je	$LN5@CheckEWS
	push	1
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN5@CheckEWS
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	movzx	ecx, BYTE PTR [eax+1012]
	test	ecx, ecx
	jne	$LN5@CheckEWS

; 1129 : 			{
; 1130 : 				if(SimDriver.GetPlayerAircraft()->HasPower(AircraftClass::EWSJammerPower))

	push	8192					; 00002000H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?HasPower@AircraftClass@@QAEHW4AvionicsPowerFlags@1@@Z ; AircraftClass::HasPower
	test	eax, eax
	je	$LN5@CheckEWS

; 1131 : 				{
; 1132 : 					if(!SimDriver.GetPlayerAircraft()->IsSetFlag(ECM_ON))

	push	2
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	jne	$LN5@CheckEWS

; 1133 : 					{
; 1134 : 						//Only if fully auto
; 1135 : 						if(SimDriver.GetPlayerAircraft()->EWSPGM() == AircraftClass::EWSPGMSwitch::Auto)

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?EWSPGM@AircraftClass@@QAE?AW4EWSPGMSwitch@1@XZ ; AircraftClass::EWSPGM
	cmp	eax, 4
	jne	SHORT $LN8@CheckEWS

; 1136 : 						{
; 1137 : 							SimDriver.GetPlayerAircraft()->SetFlag(ECM_ON);

	push	2
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?SetFlag@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetFlag
	jmp	SHORT $LN5@CheckEWS
$LN8@CheckEWS:

; 1138 : 						}
; 1139 : 
; 1140 : 						else if(SimDriver.GetPlayerAircraft()->EWSPGM() == AircraftClass::EWSPGMSwitch::Semi)	//ask if we want turn it on

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?EWSPGM@AircraftClass@@QAE?AW4EWSPGMSwitch@1@XZ ; AircraftClass::EWSPGM
	cmp	eax, 3
	jne	SHORT $LN5@CheckEWS

; 1141 : 						{
; 1142 : 							if(!SaidJammer)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+601]
	test	eax, eax
	jne	SHORT $LN5@CheckEWS

; 1143 : 							{
; 1144 : 								//F4SoundFXSetDist(SFX_BB_JAMMER, TRUE, 0.0f, 1.0f );
; 1145 : 								PlayRWRSoundFX(SFX_BB_JAMMER, TRUE, 0.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	1
	push	50					; 00000032H
	call	?PlayRWRSoundFX@@YAXHHMM@Z		; PlayRWRSoundFX
	add	esp, 16					; 00000010H

; 1146 : 								SaidJammer = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+601], 1
$LN5@CheckEWS:

; 1147 : 							}
; 1148 : 						}
; 1149 : 					}
; 1150 : 				}
; 1151 : 			}
; 1152 : 		}
; 1153 : 		else

	jmp	SHORT $LN1@CheckEWS
$LN12@CheckEWS:

; 1154 : 		{ 
; 1155 : 			if(!SimDriver.GetPlayerAircraft()->ManualECM && SimDriver.GetPlayerAircraft()->EWSPGM() == AircraftClass::EWSPGMSwitch::Auto)

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	movzx	edx, BYTE PTR [eax+1012]
	test	edx, edx
	jne	SHORT $LN2@CheckEWS
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?EWSPGM@AircraftClass@@QAE?AW4EWSPGMSwitch@1@XZ ; AircraftClass::EWSPGM
	cmp	eax, 4
	jne	SHORT $LN2@CheckEWS

; 1156 : 			{
; 1157 : 				// Can't turn off ECM w/ ECM pod broken
; 1158 : 				if (!SimDriver.GetPlayerAircraft()->mFaults->GetFault(FaultClass::epod_fault))

	push	10					; 0000000aH
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN2@CheckEWS

; 1159 : 					SimDriver.GetPlayerAircraft()->UnSetFlag(ECM_ON);

	push	2
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?UnSetFlag@SimBaseClass@@QAEXH@Z	; SimBaseClass::UnSetFlag
$LN2@CheckEWS:

; 1160 : 			}
; 1161 : 			if(SaidJammer)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+601]
	test	ecx, ecx
	je	SHORT $LN1@CheckEWS

; 1162 : 				SaidJammer = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+601], 0
$LN1@CheckEWS:
$LN29@CheckEWS:

; 1163 : 		}
; 1164 : 	}
; 1165 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckEWS@PlayerRwrClass@@QAEXXZ ENDP			; PlayerRwrClass::CheckEWS
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\playerrwr.h
;	COMDAT ?LaunchIndication@PlayerRwrClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LaunchIndication@PlayerRwrClass@@QAEHXZ PROC		; PlayerRwrClass::LaunchIndication, COMDAT
; _this$ = ecx

; 28   : 	int LaunchIndication (void) {return missileActivity;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+640]
	mov	esp, ebp
	pop	ebp
	ret	0
?LaunchIndication@PlayerRwrClass@@QAEHXZ ENDP		; PlayerRwrClass::LaunchIndication
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\playerrwr.h
;	COMDAT ?HasActivity@PlayerRwrClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv73 = -4						; size = 4
?HasActivity@PlayerRwrClass@@QAEHXZ PROC		; PlayerRwrClass::HasActivity, COMDAT
; _this$ = ecx

; 27   : 	int HasActivity (void)		{return detectionList[0].entity != NULL;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 32					; 00000020H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+76], 0
	je	SHORT $LN3@HasActivit
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN4@HasActivit
$LN3@HasActivit:
	mov	DWORD PTR tv73[ebp], 0
$LN4@HasActivit:
	mov	eax, DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?HasActivity@PlayerRwrClass@@QAEHXZ ENDP		; PlayerRwrClass::HasActivity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\playerrwr.cpp
_TEXT	SEGMENT
tv86 = -8						; size = 4
_this$ = -4						; size = 4
?IsOn@PlayerRwrClass@@UAEHXZ PROC			; PlayerRwrClass::IsOn
; _this$ = ecx

; 1168 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1169 : 	if (!g_bRWR) // JB 010802

	movzx	eax, BYTE PTR ?g_bRWR@@3_NA		; g_bRWR
	test	eax, eax
	jne	SHORT $LN1@IsOn

; 1170 : 		return false;

	xor	eax, eax
	jmp	SHORT $LN2@IsOn
$LN1@IsOn:

; 1171 : 
; 1172 :     return (((AircraftClass*)platform)->HasPower(AircraftClass::RwrPower) && VehRwrClass::IsOn()); 

	push	131072					; 00020000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?HasPower@AircraftClass@@QAEHW4AvionicsPowerFlags@1@@Z ; AircraftClass::HasPower
	test	eax, eax
	je	SHORT $LN4@IsOn
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsOn@SensorClass@@UAEHXZ		; SensorClass::IsOn
	test	eax, eax
	je	SHORT $LN4@IsOn
	mov	DWORD PTR tv86[ebp], 1
	jmp	SHORT $LN5@IsOn
$LN4@IsOn:
	mov	DWORD PTR tv86[ebp], 0
$LN5@IsOn:
	mov	eax, DWORD PTR tv86[ebp]
$LN2@IsOn:

; 1173 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsOn@PlayerRwrClass@@UAEHXZ ENDP			; PlayerRwrClass::IsOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\playerrwr.cpp
_TEXT	SEGMENT
_Element$1 = -40					; size = 4
tv322 = -36						; size = 4
tv312 = -32						; size = 4
tv246 = -28						; size = 4
_last$ = -24						; size = 4
tv152 = -20						; size = 4
_drawn$ = -16						; size = 4
_mode$2 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_activeDisplay$ = 8					; size = 4
?Display@PlayerRwrClass@@UAEXPAVVirtualDisplay@@@Z PROC	; PlayerRwrClass::Display
; _this$ = ecx

; 398  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 399  : 	int i, last, drawn;
; 400  : 
; 401  : 	if (!g_bRWR) // JB 010802

	movzx	eax, BYTE PTR ?g_bRWR@@3_NA		; g_bRWR
	test	eax, eax
	jne	SHORT $LN16@Display

; 402  : 		return;

	jmp	$LN17@Display
$LN16@Display:

; 403  : 	
; 404  :  	// Make the sensor/MFD system happy
; 405  : 	display = activeDisplay;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _activeDisplay$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 406  : 	
; 407  : 	// Do we need to draw our own reference grid?
; 408  : 	if(mGridVisible) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+616], 0
	je	SHORT $LN15@Display

; 409  : 		DrawGrid();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawGrid@PlayerRwrClass@@IAEXXZ	; PlayerRwrClass::DrawGrid
$LN15@Display:

; 410  : 	}
; 411  : 
; 412  : 	// Do we draw flashing things this frame?
; 413  : 	flash = vuxRealTime & 0x200;

	mov	ecx, DWORD PTR ?vuxRealTime@@3KA	; vuxRealTime
	and	ecx, 512				; 00000200H
	mov	DWORD PTR _flash, ecx

; 414  : 	
; 415  : 	// See if we need to switch between rightsideup and upsidedown presentations
; 416  : 	if (flipFactor > 0) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+612], 0
	jle	SHORT $LN14@Display

; 417  : 		// We're currently in normal mode
; 418  : 		if ( fabs(platform->Roll()) > 120.0f * DTR ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	push	ecx
	fstp	DWORD PTR [esp]
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv312[ebp]
	movss	xmm0, DWORD PTR tv312[ebp]
	comiss	xmm0, DWORD PTR __real@40060a91
	jbe	SHORT $LN13@Display

; 419  : 			// switch to upsidedown mode
; 420  : 			flipFactor = -1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+612], -1
$LN13@Display:

; 421  : 		}
; 422  : 	} else {

	jmp	SHORT $LN11@Display
$LN14@Display:

; 423  : 		// We're currently in upsidedown mode
; 424  : 		if ( fabs(platform->Roll()) < 90.0f * DTR ) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	push	ecx
	fstp	DWORD PTR [esp]
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv322[ebp]
	movss	xmm0, DWORD PTR __real@3fc90fd9
	comiss	xmm0, DWORD PTR tv322[ebp]
	jbe	SHORT $LN11@Display

; 425  : 			// switch to normal mode
; 426  : 			flipFactor = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+612], 1
$LN11@Display:

; 427  : 		}
; 428  : 	}
; 429  : 	
; 430  : 	// Decide how many contacts to present
; 431  : 	if (priorityMode == TRUE) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+620], 1
	jne	SHORT $LN10@Display

; 432  : 		last = min (PriorityContacts, numContacts);

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+588], 5
	jle	SHORT $LN19@Display
	mov	DWORD PTR tv152[ebp], 5
	jmp	SHORT $LN20@Display
$LN19@Display:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	DWORD PTR tv152[ebp], ecx
$LN20@Display:
	mov	edx, DWORD PTR tv152[ebp]
	mov	DWORD PTR _last$[ebp], edx

; 433  : 	} else {

	jmp	SHORT $LN9@Display
$LN10@Display:

; 434  : 		last = numContacts;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	DWORD PTR _last$[ebp], ecx
$LN9@Display:

; 435  : 	}
; 436  : 	
; 437  : 	// Draw them
; 438  : 	for (i=0, drawn = 0; i<numContacts && drawn < last; i++)

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _drawn$[ebp], 0
	jmp	SHORT $LN8@Display
$LN7@Display:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN8@Display:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+588]
	jge	$LN6@Display
	mov	edx, DWORD PTR _drawn$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	$LN6@Display

; 439  : 	{
; 440  : 		if (IsFiltered (detectionList[i].entity))

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+76]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsFiltered@PlayerRwrClass@@QAEHPAVFalconEntity@@@Z ; PlayerRwrClass::IsFiltered
	test	eax, eax
	je	SHORT $LN5@Display

; 441  : 		{
; 442  : 			continue;

	jmp	SHORT $LN7@Display
$LN5@Display:

; 443  : 		}
; 444  : 		int mode =0;

	mov	DWORD PTR _mode$2[ebp], 0

; 445  : 		DetectListElement* Element;
; 446  : 		Element = &detectionList[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+76]
	mov	DWORD PTR _Element$1[ebp], edx

; 447  : 		if ( ((SimBaseClass*)detectionList[i].entity)->IsSim() &&((BattalionClass*)((SimBaseClass*)detectionList[i].entity)->GetCampaignObject()))

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+eax+76]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN4@Display
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+76]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	test	eax, eax
	je	SHORT $LN4@Display

; 448  : 		mode = ((BattalionClass*)((SimBaseClass*)detectionList[i].entity)->GetCampaignObject())->GetRadarMode();

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+76]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR tv246[ebp], eax
	mov	eax, DWORD PTR tv246[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv246[ebp]
	mov	eax, DWORD PTR [edx+128]
	call	eax
	mov	DWORD PTR _mode$2[ebp], eax
	jmp	SHORT $LN3@Display
$LN4@Display:

; 449  : 		else mode = ((SimBaseClass*)detectionList[i].entity)->GetRadarMode();

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+76]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+ecx+76]
	mov	edx, DWORD PTR [eax+128]
	call	edx
	mov	DWORD PTR _mode$2[ebp], eax
$LN3@Display:

; 450  : 		if (mode != FEC_RADAR_OFF|| Element->isLocked)

	cmp	DWORD PTR _mode$2[ebp], 0
	jne	SHORT $LN1@Display
	mov	eax, DWORD PTR _Element$1[ebp]
	mov	ecx, DWORD PTR [eax+20]
	and	ecx, 1
	je	SHORT $LN2@Display
$LN1@Display:

; 451  : 		{
; 452  : 		drawn++;

	mov	edx, DWORD PTR _drawn$[ebp]
	add	edx, 1
	mov	DWORD PTR _drawn$[ebp], edx

; 453  : 		DrawContact( &detectionList[i] );

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+76]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawContact@PlayerRwrClass@@IAEXPAUDetectListElement@VehRwrClass@@@Z ; PlayerRwrClass::DrawContact
$LN2@Display:

; 454  : 		}
; 455  : 	}

	jmp	$LN7@Display
$LN6@Display:

; 456  : 	
; 457  : 	display->CenterOriginInViewport();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport
$LN17@Display:

; 458  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Display@PlayerRwrClass@@UAEXPAVVirtualDisplay@@@Z ENDP	; PlayerRwrClass::Display
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\playerrwr.cpp
_TEXT	SEGMENT
tv750 = -160						; size = 8
_emitters$ = -152					; size = 12
_curSimObj$ = -140					; size = 4
tv966 = -136						; size = 4
tv968 = -132						; size = 4
$T2 = -128						; size = 4
tv759 = -124						; size = 4
tv137 = -120						; size = 4
tv746 = -116						; size = 4
tv459 = -112						; size = 4
_localData$ = -108					; size = 4
_nextEmitter$ = -104					; size = 4
_spotted$ = -100					; size = 4
_enemy$ = -96						; size = 4
tv387 = -92						; size = 4
_pingType$ = -88					; size = 4
_nextPingTime$ = -84					; size = 4
_platformCampObj$ = -80					; size = 4
_count$ = -76						; size = 4
_who$ = -69						; size = 1
_curObj$ = -68						; size = 4
_listElement$ = -64					; size = 4
_curEmitter$ = -60					; size = 4
_i$ = -56						; size = 4
_this$ = -52						; size = 4
_roea$ = -48						; size = 32
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_targetList$ = 8					; size = 4
?Exec@PlayerRwrClass@@UAEPAVSimObjectType@@PAV2@@Z PROC	; PlayerRwrClass::Exec
; _this$ = ecx

; 97   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Exec@PlayerRwrClass@@UAEPAVSimObjectType@@PAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 148				; 00000094H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 	SimObjectType* curObj;
; 99   : 	SimBaseClass* curSimObj;
; 100  : 	SimObjectLocalData* localData;
; 101  : 	VuListIterator emitters (EmitterList);

	mov	eax, DWORD PTR ?EmitterList@@3PAVFalconPrivateList@@A ; EmitterList
	push	eax
	lea	ecx, DWORD PTR _emitters$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 102  : 	CampBaseClass *curEmitter, *nextEmitter;
; 103  : 	int pingType;
; 104  : 	int nextPingTime;
; 105  : 	DetectListElement* listElement;
; 106  : 
; 107  : 	// Select low or high altitude priority
; 108  : 	AutoSelectAltitudePriority();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+120]
	call	eax

; 109  : 	
; 110  : 	
; 111  : 	// Call our parent class's Exec to do basic house keeping
; 112  : 	VehRwrClass::Exec(targetList);

	mov	ecx, DWORD PTR _targetList$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Exec@VehRwrClass@@UAEPAVSimObjectType@@PAV2@@Z ; VehRwrClass::Exec

; 113  : 	
; 114  : 	
; 115  : 	// Check the target list for 'pings'
; 116  : 	curObj = targetList;

	mov	edx, DWORD PTR _targetList$[ebp]
	mov	DWORD PTR _curObj$[ebp], edx
$LN58@Exec:

; 117  : 	//me123 this is only search spikes
; 118  : 	//while (curObj) // JB 010221 CTD
; 119  : 	//while (curObj && !F4IsBadCodePtr((FARPROC) curObj)) // JB 010221 CTD
; 120  : 	while (curObj && !F4IsBadReadPtr(curObj, sizeof(SimObjectType))) // JB 010318 CTD

	cmp	DWORD PTR _curObj$[ebp], 0
	je	$LN57@Exec
	push	24					; 00000018H
	mov	eax, DWORD PTR _curObj$[ebp]
	push	eax
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN57@Exec

; 121  : 	{
; 122  : 		// if ((curObj->BaseData ()) && (curObj->BaseData()->IsSim()) && (curObj->BaseData()->GetRadarType())) // JB 010221 CTD
; 123  : 		//if ((curObj->BaseData()) && !F4IsBadCodePtr((FARPROC) curObj->BaseData()) && (curObj->BaseData()->IsSim()) && (curObj->BaseData()->GetRadarType())) // JB 010221 CTD
; 124  : 		if ((curObj->BaseData()) && !F4IsBadReadPtr(curObj->BaseData(), sizeof(FalconEntity)) && (curObj->BaseData()->IsSim()) && (curObj->BaseData()->GetRadarType())) // JB 010318 CTD

	mov	ecx, DWORD PTR _curObj$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	test	eax, eax
	je	$LN49@Exec
	push	144					; 00000090H
	mov	ecx, DWORD PTR _curObj$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	push	eax
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	$LN49@Exec
	mov	ecx, DWORD PTR _curObj$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	$LN49@Exec
	mov	ecx, DWORD PTR _curObj$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv137[ebp], eax
	mov	eax, DWORD PTR tv137[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv137[ebp]
	mov	eax, DWORD PTR [edx+292]
	call	eax
	test	eax, eax
	je	$LN49@Exec

; 125  : 		{
; 126  : 			// Localize the info
; 127  : 			curSimObj = (SimBaseClass*)curObj->BaseData();

	mov	ecx, DWORD PTR _curObj$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR _curSimObj$[ebp], eax

; 128  : 			localData = curObj->localData;

	mov	ecx, DWORD PTR _curObj$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _localData$[ebp], edx

; 129  : 			
; 130  : 			// Is it time to hear this one again?
; 131  : 
; 132  : 			if (SimLibElapsedTime > localData->sensorLoopCount[RWR] + 0.95F * curSimObj->RdrCycleTime() * SEC_TO_MSEC )

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR tv746[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv746[ebp]
	mov	ecx, DWORD PTR tv746[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv750[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv750[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _localData$[ebp]
	cvtsi2ss xmm1, DWORD PTR [eax+edx+164]
	mov	ecx, DWORD PTR _curSimObj$[ebp]
	movss	DWORD PTR tv966[ebp], xmm0
	movss	DWORD PTR tv968[ebp], xmm1
	call	?RdrCycleTime@SimBaseClass@@QAEMXZ	; SimBaseClass::RdrCycleTime
	fstp	DWORD PTR tv759[ebp]
	movss	xmm0, DWORD PTR tv759[ebp]
	mulss	xmm0, DWORD PTR __real@3f733333
	mulss	xmm0, DWORD PTR __real@447a0000
	movss	xmm1, DWORD PTR tv968[ebp]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv966[ebp]
	comiss	xmm0, xmm1
	jbe	$LN49@Exec

; 133  : 			{
; 134  : 				// Can we hear it?
; 135  : 				if (!IsFiltered (curObj->BaseData()))

	mov	ecx, DWORD PTR _curObj$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsFiltered@PlayerRwrClass@@QAEHPAVFalconEntity@@@Z ; PlayerRwrClass::IsFiltered
	test	eax, eax
	jne	$LN49@Exec

; 136  : 				{
; 137  : 					if (/*curObj->localData->range <= 5 * NM_TO_FT && curObj->localData->ataFrom < 60.0f * DTR &&//me123 addet range check*/
; 138  : 						CanSeeObject(curObj) && BeingPainted(curObj) && CanDetectObject(curObj))

	mov	ecx, DWORD PTR _curObj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CanSeeObject@RwrClass@@IAEHPAVSimObjectType@@@Z ; RwrClass::CanSeeObject
	test	eax, eax
	je	$LN53@Exec
	mov	edx, DWORD PTR _curObj$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BeingPainted@RwrClass@@IAEHPAVSimObjectType@@@Z ; RwrClass::BeingPainted
	test	eax, eax
	je	$LN53@Exec
	mov	eax, DWORD PTR _curObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CanDetectObject@RwrClass@@QAEHPAVSimObjectType@@@Z ; RwrClass::CanDetectObject
	test	eax, eax
	je	$LN53@Exec

; 139  : 					{
; 140  : 						if (ObjectDetected(curObj->BaseData(), Track_Ping) && newGuy >= 0)

	push	0
	push	1
	mov	ecx, DWORD PTR _curObj$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	test	eax, eax
	je	SHORT $LN52@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+644], 0
	jl	SHORT $LN52@Exec

; 141  : 						{
; 142  : 							newGuy = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+644], 1
$LN52@Exec:

; 143  : 						}
; 144  : 						localData->sensorLoopCount[RWR] = SimLibElapsedTime;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _localData$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [ecx+eax+164], edx

; 145  : 
; 146  : 						// Find and update the last hit time for this object.
; 147  : 						listElement = IsTracked (curObj->BaseData());

	mov	ecx, DWORD PTR _curObj$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsTracked@VehRwrClass@@QAEPAUDetectListElement@1@PAVFalconEntity@@@Z ; VehRwrClass::IsTracked
	mov	DWORD PTR _listElement$[ebp], eax

; 148  : 						if (listElement) {

	cmp	DWORD PTR _listElement$[ebp], 0
	je	SHORT $LN51@Exec

; 149  : 							listElement->lastHit = SimLibElapsedTime;

	mov	eax, DWORD PTR _listElement$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [eax+12], ecx

; 150  : // JB 010727 RP5 RWR
; 151  : // 2001-02-15 ADDED BY S.G. SO THE NEW cantPlay field IS ZEROED SINCE IT CAN SEE/DETECT IT
; 152  : 							listElement->cantPlay = 0;

	mov	edx, DWORD PTR _listElement$[ebp]
	mov	eax, DWORD PTR [edx+20]
	and	eax, -257				; fffffeffH
	mov	ecx, DWORD PTR _listElement$[ebp]
	mov	DWORD PTR [ecx+20], eax
$LN51@Exec:

; 153  : 						}
; 154  : 					}
; 155  : 					else {

	jmp	SHORT $LN49@Exec
$LN53@Exec:

; 156  : 						listElement = IsTracked (curObj->BaseData());

	mov	ecx, DWORD PTR _curObj$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsTracked@VehRwrClass@@QAEPAUDetectListElement@1@PAVFalconEntity@@@Z ; VehRwrClass::IsTracked
	mov	DWORD PTR _listElement$[ebp], eax

; 157  : 						if (listElement)

	cmp	DWORD PTR _listElement$[ebp], 0
	je	SHORT $LN49@Exec

; 158  : 							listElement->cantPlay = 1;

	mov	edx, DWORD PTR _listElement$[ebp]
	mov	eax, DWORD PTR [edx+20]
	or	eax, 256				; 00000100H
	mov	ecx, DWORD PTR _listElement$[ebp]
	mov	DWORD PTR [ecx+20], eax
$LN49@Exec:

; 159  : 					}
; 160  : // END OF ADDED SECTION
; 161  : /*
; 162  : 						if (listElement)
; 163  : 							listElement->lastHit = SimLibElapsedTime;
; 164  : 					}
; 165  : */
; 166  : 				}
; 167  : 			}
; 168  : 		}
; 169  : 		curObj = curObj->next;

	mov	edx, DWORD PTR _curObj$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _curObj$[ebp], eax

; 170  : 	}

	jmp	$LN58@Exec
$LN57@Exec:

; 171  : 	if (newGuy < 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+644], 0
	jge	SHORT $LN48@Exec

; 172  : 		newGuy = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+644], 0
$LN48@Exec:

; 173  : 	
; 174  : 	
; 175  : // 2001-03-19 ADDED BY S.G. SO THE PLAYER IS DETECTED BY GROUND RADAR AS WELL (INIT CODE)
; 176  : 	Team who;
; 177  : 	int i, enemy, roea[NUM_TEAMS];
; 178  : 	int spotted = 0;

	mov	DWORD PTR _spotted$[ebp], 0

; 179  : 	CampBaseClass *platformCampObj;
; 180  : 
; 181  : 	platformCampObj = platform->GetCampaignObject();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _platformCampObj$[ebp], eax

; 182  : 	who = platformCampObj->GetTeam();

	mov	ecx, DWORD PTR _platformCampObj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _platformCampObj$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	mov	BYTE PTR _who$[ebp], al

; 183  : 	enemy = GetEnemyTeam(who);

	movzx	ecx, BYTE PTR _who$[ebp]
	push	ecx
	call	?GetEnemyTeam@@YAEE@Z			; GetEnemyTeam
	add	esp, 4
	movzx	edx, al
	mov	DWORD PTR _enemy$[ebp], edx

; 184  : 
; 185  : 	if ((Camp_GetCurrentTime() - platformCampObj->GetSpotTime() <= ReconLossTime[platformCampObj->GetMovementType()] / 8 && ((platformCampObj->GetSpotted() >> enemy) & 0x01)))

	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	mov	esi, eax
	mov	ecx, DWORD PTR _platformCampObj$[ebp]
	call	?GetSpotTime@CampBaseClass@@QBEKXZ	; CampBaseClass::GetSpotTime
	sub	esi, eax
	mov	eax, DWORD PTR _platformCampObj$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _platformCampObj$[ebp]
	mov	eax, DWORD PTR [edx+228]
	call	eax
	mov	ecx, DWORD PTR ?ReconLossTime@@3PAKA[eax*4]
	shr	ecx, 3
	cmp	esi, ecx
	ja	SHORT $LN47@Exec
	mov	ecx, DWORD PTR _platformCampObj$[ebp]
	call	?GetSpotted@CampBaseClass@@QBEFXZ	; CampBaseClass::GetSpotted
	movsx	edx, ax
	mov	ecx, DWORD PTR _enemy$[ebp]
	sar	edx, cl
	and	edx, 1
	je	SHORT $LN47@Exec

; 186  : 		spotted = 1;

	mov	DWORD PTR _spotted$[ebp], 1

; 187  : 	else {

	jmp	SHORT $LN43@Exec
$LN47@Exec:

; 188  : 		// No need to initialize if spotted is at 1 because it won't use the array in that case.
; 189  : 		for (i=0; i < NUM_TEAMS; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN45@Exec
$LN44@Exec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN45@Exec:
	cmp	DWORD PTR _i$[ebp], 8
	jge	SHORT $LN43@Exec

; 190  : 			roea[i] = GetRoE(who, i, ROE_AIR_FIRE);

	push	5
	movzx	ecx, BYTE PTR _i$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _who$[ebp]
	push	edx
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _roea$[ebp+ecx*4], eax
	jmp	SHORT $LN44@Exec
$LN43@Exec:

; 191  : 	}
; 192  : // END OF ADDED SECTION
; 193  : 
; 194  : 	// Check the emitter list
; 195  : 	curEmitter = (CampBaseClass*)emitters.GetFirst();

	lea	ecx, DWORD PTR _emitters$[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _curEmitter$[ebp], eax
$LN64@Exec:

; 196  : 	while (curEmitter){

	cmp	DWORD PTR _curEmitter$[ebp], 0
	je	$LN41@Exec

; 197  : 		// FRB - CTD's Here
; 198  : 		if(F4IsBadReadPtr(curEmitter,sizeof(CampBaseClass)))

	push	184					; 000000b8H
	mov	edx, DWORD PTR _curEmitter$[ebp]
	push	edx
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN40@Exec

; 199  : 			continue;

	jmp	SHORT $LN64@Exec
$LN40@Exec:

; 200  : 		nextEmitter = static_cast<CampBaseClass*>(emitters.GetNext());

	lea	ecx, DWORD PTR _emitters$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _nextEmitter$[ebp], eax

; 201  : 		if (!nextEmitter)

	cmp	DWORD PTR _nextEmitter$[ebp], 0
	jne	SHORT $LN39@Exec

; 202  : 			break;

	jmp	$LN41@Exec
$LN39@Exec:

; 203  : 		if(F4IsBadReadPtr(nextEmitter,sizeof(CampBaseClass)))

	push	184					; 000000b8H
	mov	ecx, DWORD PTR _nextEmitter$[ebp]
	push	ecx
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN38@Exec

; 204  : 			break;

	jmp	$LN41@Exec
$LN38@Exec:

; 205  : 		// Check if aggregated unit can detect
; 206  : 		if (
; 207  : 			!IsFiltered (curEmitter) &&
; 208  : 			// 2001-03-06 MODIFIED BY S.G. SO OBJECTIVES 
; 209  : 			// ARE ALWAYS CHECKED, WETHER OR NOT THEY ARE AGGREGATED...
; 210  : 			//curEmitter->IsAggregate() &&                    // A campaign thing
; 211  : 			//(curEmitter->IsAggregate() || curEmitter->IsObjective()) && 
; 212  : 			// A campaign thing or an objective (sim objectives have no sensor routine 
; 213  : 			// so they can never make it to the contact list by themself)
; 214  : 			(
; 215  : 				(curEmitter->IsObjective() && curEmitter->GetElectronicDetectionRange(Air) != 0) || 
; 216  : 				// An objective (sim objectives have no sensor routine
; 217  : 				// so they can never make it to the contact list by themself)
; 218  : 				// that has a working radar or a campaign thing
; 219  : 				curEmitter->IsAggregate()
; 220  : 			) && 
; 221  : 			curEmitter->CanDetect(platform) &&              // That has us spotted
; 222  : 			curEmitter->GetRadarMode() != FEC_RADAR_OFF &&  // And is emmitting
; 223  : 			CanDetectObject (curEmitter)                    // And there is line of sight
; 224  : 		){

	mov	eax, DWORD PTR _curEmitter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsFiltered@PlayerRwrClass@@QAEHPAVFalconEntity@@@Z ; PlayerRwrClass::IsFiltered
	test	eax, eax
	jne	$LN33@Exec
	mov	ecx, DWORD PTR _curEmitter$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _curEmitter$[ebp]
	mov	eax, DWORD PTR [edx+236]
	call	eax
	test	eax, eax
	je	SHORT $LN35@Exec
	push	5
	mov	ecx, DWORD PTR _curEmitter$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _curEmitter$[ebp]
	mov	eax, DWORD PTR [edx+420]
	call	eax
	test	eax, eax
	jne	SHORT $LN36@Exec
$LN35@Exec:
	mov	ecx, DWORD PTR _curEmitter$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	je	$LN33@Exec
$LN36@Exec:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _curEmitter$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _curEmitter$[ebp]
	mov	eax, DWORD PTR [edx+424]
	call	eax
	test	eax, eax
	je	$LN33@Exec
	mov	ecx, DWORD PTR _curEmitter$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _curEmitter$[ebp]
	mov	eax, DWORD PTR [edx+128]
	call	eax
	test	eax, eax
	je	$LN33@Exec
	mov	ecx, DWORD PTR _curEmitter$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CanDetectObject@RwrClass@@IAEHPAVFalconEntity@@@Z ; RwrClass::CanDetectObject
	test	eax, eax
	je	$LN33@Exec

; 225  : 			// What type of hit is this?
; 226  : 			switch (curEmitter->GetRadarMode())

	mov	edx, DWORD PTR _curEmitter$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _curEmitter$[ebp]
	mov	edx, DWORD PTR [eax+128]
	call	edx
	mov	DWORD PTR tv387[ebp], eax
	mov	eax, DWORD PTR tv387[ebp]
	sub	eax, 1
	mov	DWORD PTR tv387[ebp], eax
	cmp	DWORD PTR tv387[ebp], 5
	ja	SHORT $LN26@Exec
	mov	ecx, DWORD PTR tv387[ebp]
	jmp	DWORD PTR $LN66@Exec[ecx*4]
$LN32@Exec:

; 227  : 			{
; 228  : 			case FEC_RADAR_SEARCH_1:
; 229  : 				pingType = Track_Ping;

	mov	DWORD PTR _pingType$[ebp], 1

; 230  : 				nextPingTime = 40 * SEC_TO_MSEC; //me123 from 120

	mov	DWORD PTR _nextPingTime$[ebp], 40000	; 00009c40H

; 231  : 				break;

	jmp	SHORT $LN33@Exec
$LN31@Exec:

; 232  : 				
; 233  : 			case FEC_RADAR_SEARCH_2:
; 234  : 				pingType = Track_Ping;

	mov	DWORD PTR _pingType$[ebp], 1

; 235  : 				nextPingTime = 25 * SEC_TO_MSEC; //me123 from 60

	mov	DWORD PTR _nextPingTime$[ebp], 25000	; 000061a8H

; 236  : 				break;

	jmp	SHORT $LN33@Exec
$LN30@Exec:

; 237  : 				
; 238  : 			case FEC_RADAR_SEARCH_3:
; 239  : 				pingType = Track_Ping;

	mov	DWORD PTR _pingType$[ebp], 1

; 240  : 				nextPingTime = 10 * SEC_TO_MSEC; //me123 from 120

	mov	DWORD PTR _nextPingTime$[ebp], 10000	; 00002710H

; 241  : 				break;

	jmp	SHORT $LN33@Exec
$LN29@Exec:

; 242  : 				
; 243  : 			case FEC_RADAR_SEARCH_100:
; 244  : 				pingType = Track_Ping;

	mov	DWORD PTR _pingType$[ebp], 1

; 245  : 				nextPingTime = 3 * SEC_TO_MSEC; //me123 from 1

	mov	DWORD PTR _nextPingTime$[ebp], 3000	; 00000bb8H

; 246  : 				break;

	jmp	SHORT $LN33@Exec
$LN28@Exec:

; 247  : 				
; 248  : 			case FEC_RADAR_AQUIRE:
; 249  : 				pingType = Track_Ping;

	mov	DWORD PTR _pingType$[ebp], 1

; 250  : 				nextPingTime = 2 * SEC_TO_MSEC; //me123 from 1

	mov	DWORD PTR _nextPingTime$[ebp], 2000	; 000007d0H

; 251  : 				break;

	jmp	SHORT $LN33@Exec
$LN27@Exec:

; 252  : 				
; 253  : 			case FEC_RADAR_GUIDE:
; 254  : 				pingType = Track_Ping;

	mov	DWORD PTR _pingType$[ebp], 1

; 255  : 				nextPingTime = (int)(0.5f * SEC_TO_MSEC); 

	mov	DWORD PTR _nextPingTime$[ebp], 500	; 000001f4H

; 256  : 				break;

	jmp	SHORT $LN33@Exec
$LN26@Exec:

; 257  : 				
; 258  : 			default:
; 259  : 				pingType = Track_Ping;

	mov	DWORD PTR _pingType$[ebp], 1

; 260  : 				nextPingTime = 6000 * SEC_TO_MSEC; //me123 from 120

	mov	DWORD PTR _nextPingTime$[ebp], 6000000	; 005b8d80H
$LN33@Exec:

; 261  : 				break;
; 262  : 			}
; 263  : 			// 2002-03-21 REMOVED BY S.G. In accordance with RIK, this code doesn't belong here
; 264  : 			//if(!curEmitter->IsSim() && 
; 265  : 			// curEmitter->GetRadarMode()> FEC_RADAR_SEARCH_1 &&
; 266  : 			// curEmitter->GetRadarMode() != FEC_RADAR_SEARCH_100)
; 267  : 			//	((BattalionClass*)(SimBaseClass*)curEmitter)->SetRadarMode(FEC_RADAR_SEARCH_1);
; 268  : 			// Add it to the list (if the list isn't full)
; 269  : 			//if (ObjectDetected(curEmitter, pingType))
; 270  : 			//{
; 271  : 				// newGuy = TRUE;
; 272  : 			//}
; 273  : 		}
; 274  : 
; 275  : // 2001-03-19 ADDED BY S.G. SO THE PLAYER IS DETECTED BY GROUND RADAR AS WELL...
; 276  : 		// Don't even start testing if we have been spotted in the last ReconLossTime[GetMovementType()]/8 and we're not on a SEAD missiom
; 277  : 		if (!spotted) {

	cmp	DWORD PTR _spotted$[ebp], 0
	jne	$LN23@Exec

; 278  : 			if (roea[curEmitter->GetTeam()] == ROE_ALLOWED) {

	mov	edx, DWORD PTR _curEmitter$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _curEmitter$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	cmp	DWORD PTR _roea$[ebp+eax*4], 1
	jne	$LN23@Exec

; 279  : 				// This Code is OUR "Check to see if we've been detected by OBJECTIVE ground radar"
; 280  : 				// No need to test for unit ground radar since they'll do it themselve...
; 281  : 				// plus we let CanDetect handle stealth flights
; 282  : 				// Stop testing once we got spotted
; 283  : 				if (curEmitter->IsObjective() && curEmitter->CanDetect(platformCampObj) && ((ObjectiveClass *)curEmitter)->IsGCI()) {

	mov	ecx, DWORD PTR _curEmitter$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _curEmitter$[ebp]
	mov	eax, DWORD PTR [edx+236]
	call	eax
	test	eax, eax
	je	$LN23@Exec
	mov	ecx, DWORD PTR _platformCampObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _curEmitter$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _curEmitter$[ebp]
	mov	edx, DWORD PTR [eax+424]
	call	edx
	test	eax, eax
	je	SHORT $LN23@Exec
	mov	ecx, DWORD PTR _curEmitter$[ebp]
	call	?IsGCI@ObjectiveClass@@QAEHXZ		; ObjectiveClass::IsGCI
	test	eax, eax
	je	SHORT $LN23@Exec

; 284  : 					if (!platformCampObj->GetSpotted(enemy))

	movzx	eax, BYTE PTR _enemy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _platformCampObj$[ebp]
	call	?GetSpotted@CampBaseClass@@QAEHE@Z	; CampBaseClass::GetSpotted
	test	eax, eax
	jne	SHORT $LN22@Exec

; 285  : 						RequestIntercept((Flight)platform->GetCampaignObject(), enemy);

	push	0
	mov	ecx, DWORD PTR _enemy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	push	eax
	call	?RequestIntercept@@YAXPAVFlightClass@@HW4RequIntHint@@@Z ; RequestIntercept
	add	esp, 12					; 0000000cH
$LN22@Exec:

; 286  : 					platformCampObj->SetSpotted(enemy, TheCampaign.CurrentTime, ((ObjectiveClass *)curEmitter)->HasNCTR() != 0); // 2002-02-11 MODIFIED BY S.G. Ground objective radar can identify me

	mov	ecx, DWORD PTR _curEmitter$[ebp]
	call	?HasNCTR@ObjectiveClass@@QAEHXZ		; ObjectiveClass::HasNCTR
	test	eax, eax
	je	SHORT $LN61@Exec
	mov	DWORD PTR tv459[ebp], 1
	jmp	SHORT $LN62@Exec
$LN61@Exec:
	mov	DWORD PTR tv459[ebp], 0
$LN62@Exec:
	mov	eax, DWORD PTR tv459[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	push	ecx
	movzx	edx, BYTE PTR _enemy$[ebp]
	push	edx
	mov	ecx, DWORD PTR _platformCampObj$[ebp]
	call	?SetSpotted@CampBaseClass@@QAEXEKH@Z	; CampBaseClass::SetSpotted

; 287  : 					spotted = 1;

	mov	DWORD PTR _spotted$[ebp], 1
$LN23@Exec:

; 288  : 				}
; 289  : 			}
; 290  : 		}
; 291  : // END OF ADDED SECTION
; 292  : 
; 293  : 		curEmitter = nextEmitter;//(CampBaseClass*)emitters.GetNext();

	mov	eax, DWORD PTR _nextEmitter$[ebp]
	mov	DWORD PTR _curEmitter$[ebp], eax

; 294  : 	}

	jmp	$LN64@Exec
$LN41@Exec:

; 295  : 	
; 296  : 	
; 297  : 	// Now make a pass through the detected list to decide who's important and play audio
; 298  :    missileActivity = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+640], 0

; 299  : 	if (OTWDriver.DisplayInCockpit()) {

	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?DisplayInCockpit@OTWDriverClass@@QAEHXZ ; OTWDriverClass::DisplayInCockpit
	test	eax, eax
	je	$LN21@Exec

; 300  : 		for (i = 0; i<numContacts; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN20@Exec
$LN19@Exec:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN20@Exec:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+588]
	jge	$LN18@Exec

; 301  : 		{
; 302  : 			if (detectionList[i].missileActivity) {

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+96]
	shr	ecx, 2
	and	ecx, 1
	je	SHORT $LN16@Exec

; 303  : // 2000-09-03 S.G. SO ARH DON'T GET A LAUNCH WARNING
; 304  : 				// JB 010118 added check of detectionList[i].entity
; 305  : 				if (detectionList[i].entity && (!((MissileClass *)detectionList[i].entity)->IsMissile() || ((MissileClass *)detectionList[i].entity)->GetSeekerType() != SensorClass::Radar))

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx+76], 0
	je	SHORT $LN16@Exec
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+76]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+ecx+76]
	mov	edx, DWORD PTR [eax+156]
	call	edx
	test	eax, eax
	je	SHORT $LN15@Exec
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+eax+76]
	call	?GetSeekerType@MissileClass@@QAEHXZ	; MissileClass::GetSeekerType
	cmp	eax, 1
	je	SHORT $LN16@Exec
$LN15@Exec:

; 306  : 				{
; 307  : // END OF ADDED SECTION (PLUS INDENTATION OF NEXT LINE)
; 308  : 					missileActivity = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+640], 1
$LN16@Exec:

; 309  : 				}
; 310  :          }
; 311  : 			
; 312  : 			listElement = &detectionList[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+76]
	mov	DWORD PTR _listElement$[ebp], edx

; 313  : 			listElement->lethality = GetLethality( listElement->entity );

	mov	eax, DWORD PTR _listElement$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+84]
	call	edx
	mov	eax, DWORD PTR _listElement$[ebp]
	fstp	DWORD PTR [eax+24]

; 314  : 			
; 315  : 			// Special handling to implement "Target Separation"
; 316  : 			if (targetSep && i!=0) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+624], 0
	je	SHORT $LN14@Exec
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN14@Exec

; 317  : 				listElement->lethality *= 0.5f;

	mov	edx, DWORD PTR _listElement$[ebp]
	movss	xmm0, DWORD PTR [edx+24]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _listElement$[ebp]
	movss	DWORD PTR [eax+24], xmm0
$LN14@Exec:

; 318  : 			}
; 319  : 
; 320  : // JB 010727 RP5 RWR			
; 321  : // 2001-02-19 ADDED BY S.G. SO TARGET WITH A LOCK HAVE AN INCREASE IN LETHALITY (THIS ROUTINE IS FOR THE PLAYER ONLY ANYWAY)
; 322  : 			if (listElement->isLocked)

	mov	ecx, DWORD PTR _listElement$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	and	edx, 1
	je	SHORT $LN13@Exec

; 323  : 				listElement->lethality += 1.0F;

	mov	eax, DWORD PTR _listElement$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR _listElement$[ebp]
	movss	DWORD PTR [ecx+24], xmm0
$LN13@Exec:

; 324  : // END OF ADDED SECTION
; 325  : 
; 326  : 			//ResortList( listElement ); // JB 010718
; 327  : 			DoAudio( listElement );

	mov	edx, DWORD PTR _listElement$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoAudio@PlayerRwrClass@@IAEXPAUDetectListElement@VehRwrClass@@@Z ; PlayerRwrClass::DoAudio

; 328  : 		}

	jmp	$LN19@Exec
$LN18@Exec:

; 329  : 
; 330  : 		SortDetectionList(); // JB 010718

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SortDetectionList@VehRwrClass@@IAEXXZ	; VehRwrClass::SortDetectionList
$LN21@Exec:

; 331  : 		//DoAudio(); // JB 010718 Alternate DoAudio location
; 332  : 	}
; 333  : 
; 334  : 	//MI extracting RWR	
; 335  : 	int count;
; 336  : 	for (i = 0, count = 0; i<numContacts && count < 40; i++)

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _count$[ebp], 0
	jmp	SHORT $LN12@Exec
$LN11@Exec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN12@Exec:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+588]
	jge	$LN10@Exec
	cmp	DWORD PTR _count$[ebp], 40		; 00000028H
	jge	$LN10@Exec

; 337  : 	{
; 338  : 		// let see what should be drawn
; 339  : 		if (!IsFiltered (detectionList[i].entity))

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+76]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsFiltered@PlayerRwrClass@@QAEHPAVFalconEntity@@@Z ; PlayerRwrClass::IsFiltered
	test	eax, eax
	jne	$LN9@Exec

; 340  : 		{
; 341  : 			cockpitFlightData.RWRsymbol[count] = detectionList[i].radarData->RWRsymbol; // Which symbol shows up on the RWR

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+80]
	movsx	eax, WORD PTR [edx+4]
	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR ?cockpitFlightData@@3VFlightData@@A[ecx*4+784], eax

; 342  : 			cockpitFlightData.bearing[count] = detectionList[i].bearing;

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+edx+84]
	mov	DWORD PTR ?cockpitFlightData@@3VFlightData@@A[eax*4+864], edx

; 343  : 			cockpitFlightData.missileActivity[count] = detectionList[i].missileActivity;  // Is launching on us (active OR beam rider)

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+96]
	shr	edx, 2
	and	edx, 1
	mov	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR ?cockpitFlightData@@3VFlightData@@A[eax*4+944], edx

; 344  : 			cockpitFlightData.missileLaunch[count] = detectionList[i].missileLaunch;  // Is launching on us (active OR beam rider)

	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+96]
	shr	eax, 3
	and	eax, 1
	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR ?cockpitFlightData@@3VFlightData@@A[ecx*4+1024], eax

; 345  : 			cockpitFlightData.selected[count] = detectionList[i].selected;  // Is launching on us (active OR beam rider)

	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+96]
	shr	ecx, 6
	and	ecx, 1
	mov	edx, DWORD PTR _count$[ebp]
	mov	DWORD PTR ?cockpitFlightData@@3VFlightData@@A[edx*4+1104], ecx

; 346  : 			cockpitFlightData.lethality[count] = detectionList[i].lethality;  // Is launching on us (active OR beam rider)

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax+100]
	mov	DWORD PTR ?cockpitFlightData@@3VFlightData@@A[ecx*4+1184], eax

; 347  : 			count++;

	mov	ecx, DWORD PTR _count$[ebp]
	add	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
$LN9@Exec:

; 348  : 		}
; 349  : 	}

	jmp	$LN11@Exec
$LN10@Exec:

; 350  : 	cockpitFlightData.RwrObjectCount = count;	

	mov	edx, DWORD PTR _count$[ebp]
	mov	DWORD PTR ?cockpitFlightData@@3VFlightData@@A+780, edx

; 351  : 	
; 352  :    // Check timeout on target sep
; 353  :    if (targetSep > 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+624], 0
	jle	SHORT $LN7@Exec

; 354  :    {
; 355  :       targetSep -= FloatToInt32(SimLibMajorFrameTime * SEC_TO_MSEC);

	movss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@447a0000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+624]
	sub	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+624], edx

; 356  :       if (targetSep < 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+624], 0
	jge	SHORT $LN7@Exec

; 357  :          targetSep = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+624], 0
$LN7@Exec:

; 358  :    }
; 359  : 
; 360  :    //MI EWS check, only do this if we have auto chaff/flare
; 361  : 	if(g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	$LN1@Exec

; 362  : 	{
; 363  : 		if(ReleaseManual)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+604], 0
	je	SHORT $LN5@Exec

; 364  : 		{
; 365  : 			if(SimDriver.GetPlayerAircraft())

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN4@Exec

; 366  : 				SimDriver.GetPlayerAircraft()->ReleaseManualProgram();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?ReleaseManualProgram@AircraftClass@@QAEXXZ ; AircraftClass::ReleaseManualProgram
$LN4@Exec:

; 367  : 		}

	jmp	SHORT $LN1@Exec
$LN5@Exec:

; 368  : 		else if(SimDriver.GetPlayerAircraft() && SimDriver.GetPlayerAircraft()->HasPower(AircraftClass::EWSRWRPower))

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN1@Exec
	push	4096					; 00001000H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?HasPower@AircraftClass@@QAEHW4AvionicsPowerFlags@1@@Z ; AircraftClass::HasPower
	test	eax, eax
	je	SHORT $LN1@Exec

; 369  : 		{
; 370  : 			if(SimDriver.GetPlayerAircraft()->EWSPGM() != AircraftClass::EWSPGMSwitch::Off &&
; 371  : 				SimDriver.GetPlayerAircraft()->EWSPGM() != AircraftClass::EWSPGMSwitch::Stby &&
; 372  : 				SimDriver.GetPlayerAircraft()->EWSPGM() != AircraftClass::EWSPGMSwitch::Man)

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?EWSPGM@AircraftClass@@QAE?AW4EWSPGMSwitch@1@XZ ; AircraftClass::EWSPGM
	test	eax, eax
	je	SHORT $LN1@Exec
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?EWSPGM@AircraftClass@@QAE?AW4EWSPGMSwitch@1@XZ ; AircraftClass::EWSPGM
	cmp	eax, 1
	je	SHORT $LN1@Exec
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?EWSPGM@AircraftClass@@QAE?AW4EWSPGMSwitch@1@XZ ; AircraftClass::EWSPGM
	cmp	eax, 2
	je	SHORT $LN1@Exec

; 373  : 				//SimDriver.GetPlayerAircraft()->EWSPGM() != AircraftClass::EWSPGMSwitch::Semi)
; 374  : 				CheckEWS();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckEWS@PlayerRwrClass@@QAEXXZ	; PlayerRwrClass::CheckEWS
$LN1@Exec:

; 375  : 		}
; 376  : 	}
; 377  : 	
; 378  : 	return NULL;

	mov	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _emitters$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T2[ebp]

; 379  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
$LN66@Exec:
	DD	$LN29@Exec
	DD	$LN32@Exec
	DD	$LN31@Exec
	DD	$LN30@Exec
	DD	$LN28@Exec
	DD	$LN27@Exec
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Exec@PlayerRwrClass@@UAEPAVSimObjectType@@PAV2@@Z$0:
	lea	ecx, DWORD PTR _emitters$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?Exec@PlayerRwrClass@@UAEPAVSimObjectType@@PAV2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-156]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Exec@PlayerRwrClass@@UAEPAVSimObjectType@@PAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Exec@PlayerRwrClass@@UAEPAVSimObjectType@@PAV2@@Z ENDP	; PlayerRwrClass::Exec
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\playerrwr.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1PlayerRwrClass@@UAE@XZ PROC				; PlayerRwrClass::~PlayerRwrClass
; _this$ = ecx

; 92   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PlayerRwrClass@@6B@

; 93   : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1VehRwrClass@@UAE@XZ			; VehRwrClass::~VehRwrClass
	mov	esp, ebp
	pop	ebp
	ret	0
??1PlayerRwrClass@@UAE@XZ ENDP				; PlayerRwrClass::~PlayerRwrClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\playerrwr.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_idx$ = 8						; size = 4
_self$ = 12						; size = 4
??0PlayerRwrClass@@QAE@HPAVSimMoverClass@@@Z PROC	; PlayerRwrClass::PlayerRwrClass
; _this$ = ecx

; 70   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _self$[ebp]
	push	eax
	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0VehRwrClass@@QAE@HPAVSimMoverClass@@@Z ; VehRwrClass::VehRwrClass
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7PlayerRwrClass@@6B@

; 71   : 	flipFactor      = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+612], 1

; 72   : 	mGridVisible    = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+616], 1

; 73   : 
; 74   : 	priorityMode    = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+620], 1

; 75   : 	targetSep       = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+624], 0

; 76   : 	showUnknowns    = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+628], 0

; 77   : 	showNaval       = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+632], 0

; 78   : 	showSearch      = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 0

; 79   : 	dropPattern     = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+596], 0

; 80   :    missileActivity = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+640], 0

; 81   :    newGuy          = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+644], -1

; 82   :    //MI EWS stuff
; 83   :    InEWSLoop = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+600], 0

; 84   :    LaunchDetected = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+608], 0

; 85   :    ChaffCheck = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+609], 0

; 86   :    FlareCheck = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+610], 0

; 87   :    SaidJammer = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+601], 0

; 88   :    ReleaseManual = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+604], 0

; 89   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0PlayerRwrClass@@QAE@HPAVSimMoverClass@@@Z ENDP	; PlayerRwrClass::PlayerRwrClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\otwdrive.h
;	COMDAT ?DisplayInCockpit@OTWDriverClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DisplayInCockpit@OTWDriverClass@@QAEHXZ PROC		; OTWDriverClass::DisplayInCockpit, COMDAT
; _this$ = ecx

; 244  : 		inline BOOL DisplayInCockpit( void ){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 245  : 			if (mOTWDisplayMode >= ModeHud && mOTWDisplayMode <= ModePadlockEFOV )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32328], 1
	jl	SHORT $LN1@DisplayInC
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+32328], 5
	jg	SHORT $LN1@DisplayInC

; 246  : 		  		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN2@DisplayInC
$LN1@DisplayInC:

; 247  : 			return FALSE;

	xor	eax, eax
$LN2@DisplayInC:

; 248  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?DisplayInCockpit@OTWDriverClass@@QAEHXZ ENDP		; OTWDriverClass::DisplayInCockpit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?HasNCTR@ObjectiveClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasNCTR@ObjectiveClass@@QAEHXZ PROC			; ObjectiveClass::HasNCTR, COMDAT
; _this$ = ecx

; 195  : 	int HasNCTR (void)										{ return (int)(O_HAS_NCTR & obj_data.obj_flags); }	// 2002-02-13 ADDED BY S.G.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+192]
	and	eax, 2097152				; 00200000H
	mov	esp, ebp
	pop	ebp
	ret	0
?HasNCTR@ObjectiveClass@@QAEHXZ ENDP			; ObjectiveClass::HasNCTR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\objectiv.h
;	COMDAT ?IsGCI@ObjectiveClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGCI@ObjectiveClass@@QAEHXZ PROC			; ObjectiveClass::IsGCI, COMDAT
; _this$ = ecx

; 194  : 	int IsGCI (void)										{ return (int)(O_IS_GCI & obj_data.obj_flags); }	// 2002-02-13 ADDED BY S.G.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+192]
	and	eax, 4194304				; 00400000H
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGCI@ObjectiveClass@@QAEHXZ ENDP			; ObjectiveClass::IsGCI
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?IsAggregate@CampBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAggregate@CampBaseClass@@QAEHXZ PROC			; CampBaseClass::IsAggregate, COMDAT
; _this$ = ecx

; 278  : 	int IsAggregate (void)						{	return local_flags & CBC_AGGREGATE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+156]
	and	eax, 128				; 00000080H
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAggregate@CampBaseClass@@QAEHXZ ENDP			; CampBaseClass::IsAggregate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetSpotted@CampBaseClass@@QBEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSpotted@CampBaseClass@@QBEFXZ PROC			; CampBaseClass::GetSpotted, COMDAT
; _this$ = ecx

; 137  : 	short GetSpotted() const 					{	return spotted; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+148]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSpotted@CampBaseClass@@QBEFXZ ENDP			; CampBaseClass::GetSpotted
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetSpotTime@CampBaseClass@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSpotTime@CampBaseClass@@QBEKXZ PROC			; CampBaseClass::GetSpotTime, COMDAT
; _this$ = ecx

; 136  : 	CampaignTime GetSpotTime() const			{	return spotTime; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+144]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSpotTime@CampBaseClass@@QBEKXZ ENDP			; CampBaseClass::GetSpotTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?EWSPGM@AircraftClass@@QAE?AW4EWSPGMSwitch@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EWSPGM@AircraftClass@@QAE?AW4EWSPGMSwitch@1@XZ PROC	; AircraftClass::EWSPGM, COMDAT
; _this$ = ecx

; 543  : 	EWSPGMSwitch EWSPGM() { return EWSPgm; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1496]
	mov	esp, ebp
	pop	ebp
	ret	0
?EWSPGM@AircraftClass@@QAE?AW4EWSPGMSwitch@1@XZ ENDP	; AircraftClass::EWSPGM
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?CenterOriginInViewport@VirtualDisplay@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CenterOriginInViewport@VirtualDisplay@@QAEXXZ PROC	; VirtualDisplay::CenterOriginInViewport, COMDAT
; _this$ = ecx

; 143  : 	void CenterOriginInViewport( void )  { dmatrix.translationX = 0.0f; dmatrix.translationY = 0.0f; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+68], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+72], xmm0
	mov	esp, ebp
	pop	ebp
	ret	0
?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ENDP	; VirtualDisplay::CenterOriginInViewport
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\object.h
;	COMDAT ?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ PROC	; SimObjectType::BaseData, COMDAT
; _this$ = ecx

; 92   : 	FalconEntity* BaseData(void) { return baseData.get(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ENDP	; SimObjectType::BaseData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?GetDisplay@SensorClass@@UAEPAVVirtualDisplay@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDisplay@SensorClass@@UAEPAVVirtualDisplay@@XZ PROC	; SensorClass::GetDisplay, COMDAT
; _this$ = ecx

; 55   : 	VirtualDisplay*	GetDisplay(void)                        { return privateDisplay; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDisplay@SensorClass@@UAEPAVVirtualDisplay@@XZ ENDP	; SensorClass::GetDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?TargetUnderCursor@SensorClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?TargetUnderCursor@SensorClass@@UAE?AVVU_ID@@XZ PROC	; SensorClass::TargetUnderCursor, COMDAT
; _this$ = ecx

; 53   : 	virtual VU_ID TargetUnderCursor (void)                  { return targetUnderCursor; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [eax+40]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?TargetUnderCursor@SensorClass@@UAE?AVVU_ID@@XZ ENDP	; SensorClass::TargetUnderCursor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?SetSeekerPos@SensorClass@@UAEXMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newAz$ = 8						; size = 4
_newEl$ = 12						; size = 4
?SetSeekerPos@SensorClass@@UAEXMM@Z PROC		; SensorClass::SetSeekerPos, COMDAT
; _this$ = ecx

; 51   : 	virtual void SetSeekerPos (float newAz, float newEl)	{ seekerAzCenter = newAz; seekerElCenter = newEl; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _newAz$[ebp]
	movss	DWORD PTR [eax+56], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _newEl$[ebp]
	movss	DWORD PTR [ecx+60], xmm0
	mov	esp, ebp
	pop	ebp
	ret	8
?SetSeekerPos@SensorClass@@UAEXMM@Z ENDP		; SensorClass::SetSeekerPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?UpdateState@SensorClass@@UAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?UpdateState@SensorClass@@UAEXHH@Z PROC			; SensorClass::UpdateState, COMDAT
; _this$ = ecx

; 50   : 	virtual void UpdateState(int, int)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?UpdateState@SensorClass@@UAEXHH@Z ENDP			; SensorClass::UpdateState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?ExecModes@SensorClass@@UAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?ExecModes@SensorClass@@UAEXHH@Z PROC			; SensorClass::ExecModes, COMDAT
; _this$ = ecx

; 49   : 	virtual void ExecModes(int, int)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?ExecModes@SensorClass@@UAEXHH@Z ENDP			; SensorClass::ExecModes
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?IsOn@SensorClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOn@SensorClass@@UAEHXZ PROC				; SensorClass::IsOn, COMDAT
; _this$ = ecx

; 40   : 	virtual BOOL			IsOn(void)				{ return isOn; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsOn@SensorClass@@UAEHXZ ENDP				; SensorClass::IsOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?SetType@SensorClass@@UAEXW4SensorType@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_senstype$ = 8						; size = 4
?SetType@SensorClass@@UAEXW4SensorType@1@@Z PROC	; SensorClass::SetType, COMDAT
; _this$ = ecx

; 37   : 	virtual void	SetType(SensorType senstype)		{ sensorType = senstype; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _senstype$[ebp]
	mov	DWORD PTR [eax+68], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetType@SensorClass@@UAEXW4SensorType@1@@Z ENDP	; SensorClass::SetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?RdrCycleTime@SimBaseClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RdrCycleTime@SimBaseClass@@QAEMXZ PROC			; SimBaseClass::RdrCycleTime, COMDAT
; _this$ = ecx

; 224  : 	float RdrCycleTime (void) {return specialData.rdrCycleTime;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+168]
	mov	esp, ebp
	pop	ebp
	ret	0
?RdrCycleTime@SimBaseClass@@QAEMXZ ENDP			; SimBaseClass::RdrCycleTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ PROC ; SimBaseClass::GetCampaignObject, COMDAT
; _this$ = ecx

; 212  : 	CampBaseClass *GetCampaignObject (void) { return campaignObject.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ENDP ; SimBaseClass::GetCampaignObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsSetFlag@SimBaseClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFlag@SimBaseClass@@QBEHH@Z PROC			; SimBaseClass::IsSetFlag, COMDAT
; _this$ = ecx

; 178  : 	int  IsSetFlag(int flag) const { return ((specialData.flags & flag) ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsSetFlag
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSetFlag
$LN3@IsSetFlag:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSetFlag:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFlag@SimBaseClass@@QBEHH@Z ENDP			; SimBaseClass::IsSetFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ PROC ; VuBin<CampBaseClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ENDP ; VuBin<CampBaseClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?mlSinCos@@YAXPAUmlTrig@@M@Z
_TEXT	SEGMENT
_trig$ = 8						; size = 4
_angle$ = 12						; size = 4
?mlSinCos@@YAXPAUmlTrig@@M@Z PROC			; mlSinCos, COMDAT

; 12   : {

	push	ebp
	mov	ebp, esp

; 13   : #if defined(_MSC_VER)
; 14   : 	__asm 
; 15   : 	{
; 16   : 		__asm	mov     ecx, trig;

	mov	ecx, DWORD PTR _trig$[ebp]

; 17   : 		__asm	fld     dword ptr [angle];

	fld	DWORD PTR _angle$[ebp]

; 18   : 		__asm	fsincos;

	fsincos

; 19   : 		__asm	fstp    dword ptr [ecx]trig.cos;

	fstp	DWORD PTR [ecx+4]

; 20   : 		__asm	fstp    dword ptr [ecx]trig.sin;

	fstp	DWORD PTR [ecx]

; 21   : 	}
; 22   : #else
; 23   : 	trig->sin = (Float32)sin(angle);
; 24   : 	trig->cos = (Float32)cos(angle);
; 25   : #endif
; 26   : }

	pop	ebp
	ret	0
?mlSinCos@@YAXPAUmlTrig@@M@Z ENDP			; mlSinCos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSim@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsSim@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsSim, COMDAT
; _this$ = ecx

; 103  : 		{return (falconType & FalconSimEntity) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	and	ecx, 2
	je	SHORT $LN3@IsSim
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSim
$LN3@IsSim:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSim:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSim@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Roll@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Roll@VuEntity@@QBEMXZ PROC				; VuEntity::Roll, COMDAT
; _this$ = ecx

; 166  : 	SM_SCALAR Roll() const { return orient_.roll_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+68]
	mov	esp, ebp
	pop	ebp
	ret	0
?Roll@VuEntity@@QBEMXZ ENDP				; VuEntity::Roll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Yaw@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Yaw@VuEntity@@QBEMXZ PROC				; VuEntity::Yaw, COMDAT
; _this$ = ecx

; 164  : 	SM_SCALAR Yaw() const { return orient_.yaw_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?Yaw@VuEntity@@QBEMXZ ENDP				; VuEntity::Yaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
