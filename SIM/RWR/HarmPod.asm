; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\RWR\HarmPod.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?RANGE_POSITION@@3MB				; RANGE_POSITION
PUBLIC	?RANGE_MIDPOINT@@3MB				; RANGE_MIDPOINT
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?flash@HarmTargetingPod@@1HA			; HarmTargetingPod::flash
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
_BSS	SEGMENT
?flash@HarmTargetingPod@@1HA DD 01H DUP (?)		; HarmTargetingPod::flash
_BSS	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
_DATA	SEGMENT
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_DATA	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
CONST	SEGMENT
?RANGE_POSITION@@3MB DD 0bf4ccccdr		; -0.8	; RANGE_POSITION
?RANGE_MIDPOINT@@3MB DD 03ee66666r		; 0.45	; RANGE_MIDPOINT
_NEAR_CLIP DD	03f800000r			; 1
_L_2	DD	03f317218r			; 0.693147
_CURSOR_SIZE DD	03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	_atanf
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	?atan@@YAMM@Z					; atan
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?Yaw@VuEntity@@QBEMXZ				; VuEntity::Yaw
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	?IsSim@FalconEntity@@QAEHXZ			; FalconEntity::IsSim
PUBLIC	?mlSinCos@@YAXPAUmlTrig@@M@Z			; mlSinCos
PUBLIC	?RdrCycleTime@SimBaseClass@@QAEMXZ		; SimBaseClass::RdrCycleTime
PUBLIC	?RdrRng@SimBaseClass@@QAEMXZ			; SimBaseClass::RdrRng
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ		; VuBin<SimWeaponClass>::operator bool
PUBLIC	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
PUBLIC	?GetWPAction@WayPointClass@@QAEHXZ		; WayPointClass::GetWPAction
PUBLIC	?GetNextWP@WayPointClass@@QAEPAV1@XZ		; WayPointClass::GetNextWP
PUBLIC	?GetPrevWP@WayPointClass@@QAEPAV1@XZ		; WayPointClass::GetPrevWP
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ	; VirtualDisplay::CenterOriginInViewport
PUBLIC	?GetSOI@SimVehicleClass@@QAE?AW4SOI@1@XZ	; SimVehicleClass::GetSOI
PUBLIC	?IsAggregate@CampBaseClass@@QAEHXZ		; CampBaseClass::IsAggregate
PUBLIC	?SetType@SensorClass@@UAEXW4SensorType@1@@Z	; SensorClass::SetType
PUBLIC	?SetPower@SensorClass@@UAEXH@Z			; SensorClass::SetPower
PUBLIC	?IsOn@SensorClass@@UAEHXZ			; SensorClass::IsOn
PUBLIC	?ExecModes@SensorClass@@UAEXHH@Z		; SensorClass::ExecModes
PUBLIC	?UpdateState@SensorClass@@UAEXHH@Z		; SensorClass::UpdateState
PUBLIC	?SetSeekerPos@SensorClass@@UAEXMM@Z		; SensorClass::SetSeekerPos
PUBLIC	?TargetUnderCursor@SensorClass@@UAE?AVVU_ID@@XZ	; SensorClass::TargetUnderCursor
PUBLIC	?GetDisplay@SensorClass@@UAEPAVVirtualDisplay@@XZ ; SensorClass::GetDisplay
PUBLIC	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
PUBLIC	?GetNext@GroundListElement@@QAEPAV1@XZ		; GroundListElement::GetNext
PUBLIC	?SetFlag@GroundListElement@@QAEXH@Z		; GroundListElement::SetFlag
PUBLIC	?IsSet@GroundListElement@@QAEHH@Z		; GroundListElement::IsSet
PUBLIC	?ClearFlag@GroundListElement@@QAEXH@Z		; GroundListElement::ClearFlag
PUBLIC	?GetFirstGroundElement@FireControlComputer@@QAEPAVGroundListElement@@XZ ; FireControlComputer::GetFirstGroundElement
PUBLIC	?AddGroundElement@FireControlComputer@@QAEXPAVGroundListElement@@@Z ; FireControlComputer::AddGroundElement
PUBLIC	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ	; SimObjectType::BaseData
PUBLIC	??0HarmTargetingPod@@QAE@HPAVSimMoverClass@@@Z	; HarmTargetingPod::HarmTargetingPod
PUBLIC	??1HarmTargetingPod@@UAE@XZ			; HarmTargetingPod::~HarmTargetingPod
PUBLIC	?GetAGCenter@HarmTargetingPod@@UAEXPAM0@Z	; HarmTargetingPod::GetAGCenter
PUBLIC	?Exec@HarmTargetingPod@@UAEPAVSimObjectType@@PAV2@@Z ; HarmTargetingPod::Exec
PUBLIC	?HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z ; HarmTargetingPod::HADDisplay
PUBLIC	?HADExpDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z ; HarmTargetingPod::HADExpDisplay
PUBLIC	?HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z ; HarmTargetingPod::HASDisplay
PUBLIC	?POSDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z ; HarmTargetingPod::POSDisplay
PUBLIC	?HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z ; HarmTargetingPod::HandoffDisplay
PUBLIC	?ObjectDetected@HarmTargetingPod@@UAEHPAVFalconEntity@@HH@Z ; HarmTargetingPod::ObjectDetected
PUBLIC	?IncreaseRange@HarmTargetingPod@@QAEXXZ		; HarmTargetingPod::IncreaseRange
PUBLIC	?DecreaseRange@HarmTargetingPod@@QAEXXZ		; HarmTargetingPod::DecreaseRange
PUBLIC	?ToggleZoomMode@HarmTargetingPod@@QAEXXZ	; HarmTargetingPod::ToggleZoomMode
PUBLIC	?ToggleHADZoomMode@HarmTargetingPod@@QAEXXZ	; HarmTargetingPod::ToggleHADZoomMode
PUBLIC	?LockTargetUnderCursor@HarmTargetingPod@@QAEXXZ	; HarmTargetingPod::LockTargetUnderCursor
PUBLIC	?BoresightTarget@HarmTargetingPod@@QAEXXZ	; HarmTargetingPod::BoresightTarget
PUBLIC	?NextTarget@HarmTargetingPod@@QAEXXZ		; HarmTargetingPod::NextTarget
PUBLIC	?PrevTarget@HarmTargetingPod@@QAEXXZ		; HarmTargetingPod::PrevTarget
PUBLIC	?SetDesiredTarget@HarmTargetingPod@@UAEXPAVSimObjectType@@@Z ; HarmTargetingPod::SetDesiredTarget
PUBLIC	?FindIDUnderCursor@HarmTargetingPod@@QAE?AVVU_ID@@XZ ; HarmTargetingPod::FindIDUnderCursor
PUBLIC	?FindTargetUnderCursor@HarmTargetingPod@@QAEPAVGroundListElement@@XZ ; HarmTargetingPod::FindTargetUnderCursor
PUBLIC	?FindHASTargetUnderCursor@HarmTargetingPod@@QAEPAVGroundListElement@@XZ ; HarmTargetingPod::FindHASTargetUnderCursor
PUBLIC	?FindPOSTarget@HarmTargetingPod@@QAEPAVGroundListElement@@XZ ; HarmTargetingPod::FindPOSTarget
PUBLIC	?LockPOSTarget@HarmTargetingPod@@QAEXXZ		; HarmTargetingPod::LockPOSTarget
PUBLIC	?SetPOSTargetIndex@HarmTargetingPod@@QAEXH@Z	; HarmTargetingPod::SetPOSTargetIndex
PUBLIC	?GetFilterMode@HarmTargetingPod@@QAE?AW4HASFilterMode@1@XZ ; HarmTargetingPod::GetFilterMode
PUBLIC	?SaveHadCursorPos@HarmTargetingPod@@QAEXXZ	; HarmTargetingPod::SaveHadCursorPos
PUBLIC	?ResetHadCursorPos@HarmTargetingPod@@QAEXXZ	; HarmTargetingPod::ResetHadCursorPos
PUBLIC	?FindEmmitter@HarmTargetingPod@@IAEPAVGroundListElement@@PAVFalconEntity@@@Z ; HarmTargetingPod::FindEmmitter
PUBLIC	?LockListElement@HarmTargetingPod@@IAEXPAVGroundListElement@@@Z ; HarmTargetingPod::LockListElement
PUBLIC	?DrawWEZ@HarmTargetingPod@@IAEXPAVMissileClass@@@Z ; HarmTargetingPod::DrawWEZ
PUBLIC	?DrawDTSBBox@HarmTargetingPod@@IAEXXZ		; HarmTargetingPod::DrawDTSBBox
PUBLIC	?UpdateDTSB@HarmTargetingPod@@IAEXHAAM0@Z	; HarmTargetingPod::UpdateDTSB
PUBLIC	?ClearDTSB@HarmTargetingPod@@IAEXXZ		; HarmTargetingPod::ClearDTSB
PUBLIC	?BoxTargetDTSB@HarmTargetingPod@@IAEXHAAM0@Z	; HarmTargetingPod::BoxTargetDTSB
PUBLIC	?ClearPOSTargets@HarmTargetingPod@@IAEXXZ	; HarmTargetingPod::ClearPOSTargets
PUBLIC	?BuildPOSTargets@HarmTargetingPod@@IAEXXZ	; HarmTargetingPod::BuildPOSTargets
PUBLIC	?FindWaypointNum@HarmTargetingPod@@IAEHPAVWayPointClass@@@Z ; HarmTargetingPod::FindWaypointNum
PUBLIC	?IsInsideALIC@HarmTargetingPod@@IAE_NAAM0@Z	; HarmTargetingPod::IsInsideALIC
PUBLIC	?IsInPriorityList@HarmTargetingPod@@IAE_NH@Z	; HarmTargetingPod::IsInPriorityList
PUBLIC	??_GHarmTargetingPod@@UAEPAXI@Z			; HarmTargetingPod::`scalar deleting destructor'
PUBLIC	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
PUBLIC	?GetCurWezAngle@@YAXHAAM000@Z			; GetCurWezAngle
PUBLIC	?GetCurWezValue@@YAXHAAM000@Z			; GetCurWezValue
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_7HarmTargetingPod@@6B@			; HarmTargetingPod::`vftable'
PUBLIC	??_C@_03GOOLIKIF@?$CF3d?$AA@			; `string'
PUBLIC	??_C@_05GJNDEMGI@SCT?91?$AA@			; `string'
PUBLIC	??_C@_07COCHMHBB@?$CFd?3?$CF02d?$AA@		; `string'
PUBLIC	??_C@_03KDFFCEML@RDY?$AA@			; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVDrawableClass@@@8			; DrawableClass `RTTI Type Descriptor'
PUBLIC	??_R3DrawableClass@@8				; DrawableClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DrawableClass@@8				; DrawableClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DrawableClass@@8			; DrawableClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVMfdDrawable@@@8				; MfdDrawable `RTTI Type Descriptor'
PUBLIC	??_R3MfdDrawable@@8				; MfdDrawable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MfdDrawable@@8				; MfdDrawable::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MfdDrawable@@8			; MfdDrawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@SensorClass@@8			; SensorClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSensorClass@@@8				; SensorClass `RTTI Type Descriptor'
PUBLIC	??_R3SensorClass@@8				; SensorClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SensorClass@@8				; SensorClass::`RTTI Base Class Array'
PUBLIC	??_R4HarmTargetingPod@@6B@			; HarmTargetingPod::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVHarmTargetingPod@@@8			; HarmTargetingPod `RTTI Type Descriptor'
PUBLIC	??_R3HarmTargetingPod@@8			; HarmTargetingPod::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2HarmTargetingPod@@8			; HarmTargetingPod::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@HarmTargetingPod@@8		; HarmTargetingPod::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@RwrClass@@8			; RwrClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVRwrClass@@@8				; RwrClass `RTTI Type Descriptor'
PUBLIC	??_R3RwrClass@@8				; RwrClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RwrClass@@8				; RwrClass::`RTTI Base Class Array'
PUBLIC	__real@00000000
PUBLIC	__real@392c987a
PUBLIC	__real@3ba3d70a
PUBLIC	__real@3ca3d70a
PUBLIC	__real@3d23d70a
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3d75c28f
PUBLIC	__real@3d800000
PUBLIC	__real@3d851eb8
PUBLIC	__real@3da3d70a
PUBLIC	__real@3dae147b
PUBLIC	__real@3db33333
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e000000
PUBLIC	__real@3e19999a
PUBLIC	__real@3e3126e9
PUBLIC	__real@3e3851ec
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e841893
PUBLIC	__real@3e99999a
PUBLIC	__real@3eb33333
PUBLIC	__real@3ed81062
PUBLIC	__real@3eec8b44
PUBLIC	__real@3f000000
PUBLIC	__real@3f0ccccc
PUBLIC	__real@3f0ccccd
PUBLIC	__real@3f19999a
PUBLIC	__real@3f245a1d
PUBLIC	__real@3f266666
PUBLIC	__real@3f28f5c3
PUBLIC	__real@3f333333
PUBLIC	__real@3f3851ec
PUBLIC	__real@3f400000
PUBLIC	__real@3f441893
PUBLIC	__real@3f59999a
PUBLIC	__real@3f5db22d
PUBLIC	__real@3f67ef9e
PUBLIC	__real@3f6c8b44
PUBLIC	__real@3f733333
PUBLIC	__real@3f747ae1
PUBLIC	__real@3f75c28f
PUBLIC	__real@3f770a3d
PUBLIC	__real@3f7be76d
PUBLIC	__real@3f800000
PUBLIC	__real@3f866666
PUBLIC	__real@3f933333
PUBLIC	__real@3f9c28f6
PUBLIC	__real@3f9ccccd
PUBLIC	__real@3fb33333
PUBLIC	__real@3fc00000
PUBLIC	__real@3fc90fd9
PUBLIC	__real@3fc90fdb
PUBLIC	__real@40000000
PUBLIC	__real@40200000
PUBLIC	__real@40400000
PUBLIC	__real@40490fd9
PUBLIC	__real@40800000
PUBLIC	__real@409996c6
PUBLIC	__real@41000000
PUBLIC	__real@41180000
PUBLIC	__real@41200000
PUBLIC	__real@41300000
PUBLIC	__real@41400000
PUBLIC	__real@41cc0000
PUBLIC	__real@41f00000
PUBLIC	__real@42700000
PUBLIC	__real@447a0000
PUBLIC	__real@45bde1b0
PUBLIC	__real@461c4000
PUBLIC	__real@49742400
PUBLIC	__real@bc23d70a
PUBLIC	__real@bd75c28f
PUBLIC	__real@bd800000
PUBLIC	__real@bd99999a
PUBLIC	__real@bda3d70a
PUBLIC	__real@bdae147b
PUBLIC	__real@be3126e9
PUBLIC	__real@be4ccccd
PUBLIC	__real@be800000
PUBLIC	__real@becccccd
PUBLIC	__real@bf000000
PUBLIC	__real@bf400000
PUBLIC	__real@bf441893
PUBLIC	__real@bf4ccccd
PUBLIC	__real@bf733333
PUBLIC	__real@bf800000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_sprintf:PROC
EXTRN	_atan:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_sin:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetFirst
EXTRN	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetNext
EXTRN	?GetLocation@WayPointClass@@QBEXPAM00@Z:PROC	; WayPointClass::GetLocation
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z:PROC ; VirtualDisplay::AdjustOriginInViewport
EXTRN	?GetRMax@MissileClass@@QAEMMMMMM@Z:PROC		; MissileClass::GetRMax
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	?DisplayExit@DrawableClass@@UAEXXZ:PROC		; DrawableClass::DisplayExit
EXTRN	?DrawBorder@DrawableClass@@QAEXXZ:PROC		; DrawableClass::DrawBorder
EXTRN	?GetButtonPos@DrawableClass@@QAEXHPAM0@Z:PROC	; DrawableClass::GetButtonPos
EXTRN	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z:PROC ; DrawableClass::GetMfdColor
EXTRN	?PushButton@MfdDrawable@@UAEXHH@Z:PROC		; MfdDrawable::PushButton
EXTRN	?ClearSensorTarget@SensorClass@@UAEXXZ:PROC	; SensorClass::ClearSensorTarget
EXTRN	?SetSensorTarget@SensorClass@@MAEXPAVSimObjectType@@@Z:PROC ; SensorClass::SetSensorTarget
EXTRN	?SetSensorTargetHack@SensorClass@@MAEXPAVFalconEntity@@@Z:PROC ; SensorClass::SetSensorTargetHack
EXTRN	?CheckLockedTarget@SensorClass@@MAEXXZ:PROC	; SensorClass::CheckLockedTarget
EXTRN	??0GroundListElement@@QAE@PAVFalconEntity@@@Z:PROC ; GroundListElement::GroundListElement
EXTRN	?HandoffBaseObject@GroundListElement@@QAEXXZ:PROC ; GroundListElement::HandoffBaseObject
EXTRN	?UpdatePlanned@FireControlComputer@@QAEXXZ:PROC	; FireControlComputer::UpdatePlanned
EXTRN	??0RwrClass@@QAE@HPAVSimMoverClass@@@Z:PROC	; RwrClass::RwrClass
EXTRN	??1RwrClass@@UAE@XZ:PROC			; RwrClass::~RwrClass
EXTRN	?DisplayInit@RwrClass@@UAEXPAVImageBuffer@@@Z:PROC ; RwrClass::DisplayInit
EXTRN	?CanDetectObject@RwrClass@@QAEHPAVSimObjectType@@@Z:PROC ; RwrClass::CanDetectObject
EXTRN	?BeingPainted@RwrClass@@IAEHPAVSimObjectType@@@Z:PROC ; RwrClass::BeingPainted
EXTRN	?CanDetectObject@RwrClass@@IAEHPAVFalconEntity@@@Z:PROC ; RwrClass::CanDetectObject
EXTRN	?DrawEmitterSymbol@RwrClass@@IAEXHH@Z:PROC	; RwrClass::DrawEmitterSymbol
EXTRN	?Display@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z:PROC ; HarmTargetingPod::Display
EXTRN	??_EHarmTargetingPod@@UAEPAXI@Z:PROC		; HarmTargetingPod::`vector deleting destructor'
EXTRN	?GetAreaFloorAndCeiling@OTWDriverClass@@QAEXPAM0@Z:PROC ; OTWDriverClass::GetAreaFloorAndCeiling
EXTRN	?CheckLOS@OTWDriverClass@@QAEHPAVFalconEntity@@0@Z:PROC ; OTWDriverClass::CheckLOS
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuxRealTime@@3KA:DWORD				; vuxRealTime
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	?SimLibMajorFrameTime@@3MA:DWORD		; SimLibMajorFrameTime
EXTRN	?SimLibElapsedTime@@3KA:DWORD			; SimLibElapsedTime
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?EmitterList@@3PAVFalconPrivateList@@A:DWORD	; EmitterList
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?g_bRealisticAvionics@@3_NA:BYTE		; g_bRealisticAvionics
EXTRN	?TrackUpdateTime@RadarClass@@2KB:DWORD		; RadarClass::TrackUpdateTime
EXTRN	?RADIATE_CYCLE@RwrClass@@2HB:DWORD		; RwrClass::RADIATE_CYCLE
EXTRN	?TRACK_CYCLE@RwrClass@@2HB:DWORD		; RwrClass::TRACK_CYCLE
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?IO@@3VSIMLIB_IO_CLASS@@A:BYTE			; IO
EXTRN	?g_fCursorSpeed@@3MA:DWORD			; g_fCursorSpeed
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?HorizontalRangeLine@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
_BSS	SEGMENT
?HorizontalRangeLine@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB DD 01H DUP (?) ; `HarmTargetingPod::HASDisplay'::`6'::HorizontalRangeLine
_BSS	ENDS
;	COMDAT ?$S1@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA
_BSS	SEGMENT
?$S1@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA DD 01H DUP (?) ; `HarmTargetingPod::HASDisplay'::`6'::$S1
_BSS	ENDS
;	COMDAT ?VerticalRangeLineTOP@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
_BSS	SEGMENT
?VerticalRangeLineTOP@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB DD 01H DUP (?) ; `HarmTargetingPod::HASDisplay'::`6'::VerticalRangeLineTOP
_BSS	ENDS
;	COMDAT ?VerticalRangeLineBottom@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
_BSS	SEGMENT
?VerticalRangeLineBottom@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB DD 01H DUP (?) ; `HarmTargetingPod::HASDisplay'::`6'::VerticalRangeLineBottom
_BSS	ENDS
;	COMDAT ?horizontalLinesSpace@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
_BSS	SEGMENT
?horizontalLinesSpace@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB DD 01H DUP (?) ; `HarmTargetingPod::HASDisplay'::`6'::horizontalLinesSpace
_BSS	ENDS
;	COMDAT ?verticalLinesSpace@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
_BSS	SEGMENT
?verticalLinesSpace@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB DD 01H DUP (?) ; `HarmTargetingPod::HASDisplay'::`6'::verticalLinesSpace
_BSS	ENDS
;	COMDAT ?verticalHandoffLineTop@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
_BSS	SEGMENT
?verticalHandoffLineTop@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB DD 01H DUP (?) ; `HarmTargetingPod::HandoffDisplay'::`2'::verticalHandoffLineTop
_BSS	ENDS
;	COMDAT ?$S2@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA
_BSS	SEGMENT
?$S2@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA DD 01H DUP (?) ; `HarmTargetingPod::HandoffDisplay'::`2'::$S2
_BSS	ENDS
;	COMDAT ?verticalHandoffLineBottom@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
_BSS	SEGMENT
?verticalHandoffLineBottom@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB DD 01H DUP (?) ; `HarmTargetingPod::HandoffDisplay'::`2'::verticalHandoffLineBottom
_BSS	ENDS
;	COMDAT ?horizontalHandoffLine@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
_BSS	SEGMENT
?horizontalHandoffLine@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB DD 01H DUP (?) ; `HarmTargetingPod::HandoffDisplay'::`2'::horizontalHandoffLine
_BSS	ENDS
;	COMDAT ?horizontalEdges@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
_BSS	SEGMENT
?horizontalEdges@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB DD 01H DUP (?) ; `HarmTargetingPod::HandoffDisplay'::`2'::horizontalEdges
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf733333
CONST	SEGMENT
__real@bf733333 DD 0bf733333r			; -0.95
CONST	ENDS
;	COMDAT __real@bf4ccccd
CONST	SEGMENT
__real@bf4ccccd DD 0bf4ccccdr			; -0.8
CONST	ENDS
;	COMDAT __real@bf441893
CONST	SEGMENT
__real@bf441893 DD 0bf441893r			; -0.766
CONST	ENDS
;	COMDAT __real@bf400000
CONST	SEGMENT
__real@bf400000 DD 0bf400000r			; -0.75
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@becccccd
CONST	SEGMENT
__real@becccccd DD 0becccccdr			; -0.4
CONST	ENDS
;	COMDAT __real@be800000
CONST	SEGMENT
__real@be800000 DD 0be800000r			; -0.25
CONST	ENDS
;	COMDAT __real@be4ccccd
CONST	SEGMENT
__real@be4ccccd DD 0be4ccccdr			; -0.2
CONST	ENDS
;	COMDAT __real@be3126e9
CONST	SEGMENT
__real@be3126e9 DD 0be3126e9r			; -0.173
CONST	ENDS
;	COMDAT __real@bdae147b
CONST	SEGMENT
__real@bdae147b DD 0bdae147br			; -0.085
CONST	ENDS
;	COMDAT __real@bda3d70a
CONST	SEGMENT
__real@bda3d70a DD 0bda3d70ar			; -0.08
CONST	ENDS
;	COMDAT __real@bd99999a
CONST	SEGMENT
__real@bd99999a DD 0bd99999ar			; -0.075
CONST	ENDS
;	COMDAT __real@bd800000
CONST	SEGMENT
__real@bd800000 DD 0bd800000r			; -0.0625
CONST	ENDS
;	COMDAT __real@bd75c28f
CONST	SEGMENT
__real@bd75c28f DD 0bd75c28fr			; -0.06
CONST	ENDS
;	COMDAT __real@bc23d70a
CONST	SEGMENT
__real@bc23d70a DD 0bc23d70ar			; -0.01
CONST	ENDS
;	COMDAT __real@49742400
CONST	SEGMENT
__real@49742400 DD 049742400r			; 1e+006
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@45bde1b0
CONST	SEGMENT
__real@45bde1b0 DD 045bde1b0r			; 6076.21
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@41cc0000
CONST	SEGMENT
__real@41cc0000 DD 041cc0000r			; 25.5
CONST	ENDS
;	COMDAT __real@41400000
CONST	SEGMENT
__real@41400000 DD 041400000r			; 12
CONST	ENDS
;	COMDAT __real@41300000
CONST	SEGMENT
__real@41300000 DD 041300000r			; 11
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@41180000
CONST	SEGMENT
__real@41180000 DD 041180000r			; 9.5
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@409996c6
CONST	SEGMENT
__real@409996c6 DD 0409996c6r			; 4.79965
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40490fd9
CONST	SEGMENT
__real@40490fd9 DD 040490fd9r			; 3.14159
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40200000
CONST	SEGMENT
__real@40200000 DD 040200000r			; 2.5
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3fc90fd9
CONST	SEGMENT
__real@3fc90fd9 DD 03fc90fd9r			; 1.5708
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3fb33333
CONST	SEGMENT
__real@3fb33333 DD 03fb33333r			; 1.4
CONST	ENDS
;	COMDAT __real@3f9ccccd
CONST	SEGMENT
__real@3f9ccccd DD 03f9ccccdr			; 1.225
CONST	ENDS
;	COMDAT __real@3f9c28f6
CONST	SEGMENT
__real@3f9c28f6 DD 03f9c28f6r			; 1.22
CONST	ENDS
;	COMDAT __real@3f933333
CONST	SEGMENT
__real@3f933333 DD 03f933333r			; 1.15
CONST	ENDS
;	COMDAT __real@3f866666
CONST	SEGMENT
__real@3f866666 DD 03f866666r			; 1.05
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7be76d
CONST	SEGMENT
__real@3f7be76d DD 03f7be76dr			; 0.984
CONST	ENDS
;	COMDAT __real@3f770a3d
CONST	SEGMENT
__real@3f770a3d DD 03f770a3dr			; 0.965
CONST	ENDS
;	COMDAT __real@3f75c28f
CONST	SEGMENT
__real@3f75c28f DD 03f75c28fr			; 0.96
CONST	ENDS
;	COMDAT __real@3f747ae1
CONST	SEGMENT
__real@3f747ae1 DD 03f747ae1r			; 0.955
CONST	ENDS
;	COMDAT __real@3f733333
CONST	SEGMENT
__real@3f733333 DD 03f733333r			; 0.95
CONST	ENDS
;	COMDAT __real@3f6c8b44
CONST	SEGMENT
__real@3f6c8b44 DD 03f6c8b44r			; 0.924
CONST	ENDS
;	COMDAT __real@3f67ef9e
CONST	SEGMENT
__real@3f67ef9e DD 03f67ef9er			; 0.906
CONST	ENDS
;	COMDAT __real@3f5db22d
CONST	SEGMENT
__real@3f5db22d DD 03f5db22dr			; 0.866
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT __real@3f441893
CONST	SEGMENT
__real@3f441893 DD 03f441893r			; 0.766
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f3851ec
CONST	SEGMENT
__real@3f3851ec DD 03f3851ecr			; 0.72
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f28f5c3
CONST	SEGMENT
__real@3f28f5c3 DD 03f28f5c3r			; 0.66
CONST	ENDS
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT __real@3f245a1d
CONST	SEGMENT
__real@3f245a1d DD 03f245a1dr			; 0.642
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f0ccccd
CONST	SEGMENT
__real@3f0ccccd DD 03f0ccccdr			; 0.55
CONST	ENDS
;	COMDAT __real@3f0ccccc
CONST	SEGMENT
__real@3f0ccccc DD 03f0cccccr			; 0.55
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3eec8b44
CONST	SEGMENT
__real@3eec8b44 DD 03eec8b44r			; 0.462
CONST	ENDS
;	COMDAT __real@3ed81062
CONST	SEGMENT
__real@3ed81062 DD 03ed81062r			; 0.422
CONST	ENDS
;	COMDAT __real@3eb33333
CONST	SEGMENT
__real@3eb33333 DD 03eb33333r			; 0.35
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e841893
CONST	SEGMENT
__real@3e841893 DD 03e841893r			; 0.258
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e3851ec
CONST	SEGMENT
__real@3e3851ec DD 03e3851ecr			; 0.18
CONST	ENDS
;	COMDAT __real@3e3126e9
CONST	SEGMENT
__real@3e3126e9 DD 03e3126e9r			; 0.173
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3e000000
CONST	SEGMENT
__real@3e000000 DD 03e000000r			; 0.125
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3db33333
CONST	SEGMENT
__real@3db33333 DD 03db33333r			; 0.0875
CONST	ENDS
;	COMDAT __real@3dae147b
CONST	SEGMENT
__real@3dae147b DD 03dae147br			; 0.085
CONST	ENDS
;	COMDAT __real@3da3d70a
CONST	SEGMENT
__real@3da3d70a DD 03da3d70ar			; 0.08
CONST	ENDS
;	COMDAT __real@3d851eb8
CONST	SEGMENT
__real@3d851eb8 DD 03d851eb8r			; 0.065
CONST	ENDS
;	COMDAT __real@3d800000
CONST	SEGMENT
__real@3d800000 DD 03d800000r			; 0.0625
CONST	ENDS
;	COMDAT __real@3d75c28f
CONST	SEGMENT
__real@3d75c28f DD 03d75c28fr			; 0.06
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3d23d70a
CONST	SEGMENT
__real@3d23d70a DD 03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT __real@3ca3d70a
CONST	SEGMENT
__real@3ca3d70a DD 03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT __real@3ba3d70a
CONST	SEGMENT
__real@3ba3d70a DD 03ba3d70ar			; 0.005
CONST	ENDS
;	COMDAT __real@392c987a
CONST	SEGMENT
__real@392c987a DD 0392c987ar			; 0.0001646
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R2RwrClass@@8
rdata$r	SEGMENT
??_R2RwrClass@@8 DD FLAT:??_R1A@?0A@EA@RwrClass@@8	; RwrClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SensorClass@@8
	DD	FLAT:??_R1A@?0A@EA@MfdDrawable@@8
	DD	FLAT:??_R1A@?0A@EA@DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3RwrClass@@8
rdata$r	SEGMENT
??_R3RwrClass@@8 DD 00H					; RwrClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2RwrClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRwrClass@@@8
_DATA	SEGMENT
??_R0?AVRwrClass@@@8 DD FLAT:??_7type_info@@6B@		; RwrClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRwrClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@RwrClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RwrClass@@8 DD FLAT:??_R0?AVRwrClass@@@8	; RwrClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RwrClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@HarmTargetingPod@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@HarmTargetingPod@@8 DD FLAT:??_R0?AVHarmTargetingPod@@@8 ; HarmTargetingPod::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3HarmTargetingPod@@8
rdata$r	ENDS
;	COMDAT ??_R2HarmTargetingPod@@8
rdata$r	SEGMENT
??_R2HarmTargetingPod@@8 DD FLAT:??_R1A@?0A@EA@HarmTargetingPod@@8 ; HarmTargetingPod::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@RwrClass@@8
	DD	FLAT:??_R1A@?0A@EA@SensorClass@@8
	DD	FLAT:??_R1A@?0A@EA@MfdDrawable@@8
	DD	FLAT:??_R1A@?0A@EA@DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3HarmTargetingPod@@8
rdata$r	SEGMENT
??_R3HarmTargetingPod@@8 DD 00H				; HarmTargetingPod::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2HarmTargetingPod@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVHarmTargetingPod@@@8
_DATA	SEGMENT
??_R0?AVHarmTargetingPod@@@8 DD FLAT:??_7type_info@@6B@	; HarmTargetingPod `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVHarmTargetingPod@@', 00H
_DATA	ENDS
;	COMDAT ??_R4HarmTargetingPod@@6B@
rdata$r	SEGMENT
??_R4HarmTargetingPod@@6B@ DD 00H			; HarmTargetingPod::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVHarmTargetingPod@@@8
	DD	FLAT:??_R3HarmTargetingPod@@8
rdata$r	ENDS
;	COMDAT ??_R2SensorClass@@8
rdata$r	SEGMENT
??_R2SensorClass@@8 DD FLAT:??_R1A@?0A@EA@SensorClass@@8 ; SensorClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@MfdDrawable@@8
	DD	FLAT:??_R1A@?0A@EA@DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3SensorClass@@8
rdata$r	SEGMENT
??_R3SensorClass@@8 DD 00H				; SensorClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2SensorClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSensorClass@@@8
_DATA	SEGMENT
??_R0?AVSensorClass@@@8 DD FLAT:??_7type_info@@6B@	; SensorClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSensorClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@SensorClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SensorClass@@8 DD FLAT:??_R0?AVSensorClass@@@8 ; SensorClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SensorClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@MfdDrawable@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MfdDrawable@@8 DD FLAT:??_R0?AVMfdDrawable@@@8 ; MfdDrawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MfdDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R2MfdDrawable@@8
rdata$r	SEGMENT
??_R2MfdDrawable@@8 DD FLAT:??_R1A@?0A@EA@MfdDrawable@@8 ; MfdDrawable::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3MfdDrawable@@8
rdata$r	SEGMENT
??_R3MfdDrawable@@8 DD 00H				; MfdDrawable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2MfdDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMfdDrawable@@@8
_DATA	SEGMENT
??_R0?AVMfdDrawable@@@8 DD FLAT:??_7type_info@@6B@	; MfdDrawable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMfdDrawable@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@DrawableClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DrawableClass@@8 DD FLAT:??_R0?AVDrawableClass@@@8 ; DrawableClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R2DrawableClass@@8
rdata$r	SEGMENT
??_R2DrawableClass@@8 DD FLAT:??_R1A@?0A@EA@DrawableClass@@8 ; DrawableClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DrawableClass@@8
rdata$r	SEGMENT
??_R3DrawableClass@@8 DD 00H				; DrawableClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDrawableClass@@@8
_DATA	SEGMENT
??_R0?AVDrawableClass@@@8 DD FLAT:??_7type_info@@6B@	; DrawableClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDrawableClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ?DTSBBottom@?4??DrawDTSBBox@HarmTargetingPod@@IAEXXZ@4MB
CONST	SEGMENT
?DTSBBottom@?4??DrawDTSBBox@HarmTargetingPod@@IAEXXZ@4MB DD 03f933333r ; 1.15 ; `HarmTargetingPod::DrawDTSBBox'::`5'::DTSBBottom
CONST	ENDS
;	COMDAT ?DTSBTop@?4??DrawDTSBBox@HarmTargetingPod@@IAEXXZ@4MB
CONST	SEGMENT
?DTSBTop@?4??DrawDTSBBox@HarmTargetingPod@@IAEXXZ@4MB DD 03fa66666r ; 1.3 ; `HarmTargetingPod::DrawDTSBBox'::`5'::DTSBTop
CONST	ENDS
;	COMDAT ?DTSBSide@?4??DrawDTSBBox@HarmTargetingPod@@IAEXXZ@4MB
CONST	SEGMENT
?DTSBSide@?4??DrawDTSBBox@HarmTargetingPod@@IAEXXZ@4MB DD 03f266666r ; 0.65 ; `HarmTargetingPod::DrawDTSBBox'::`5'::DTSBSide
CONST	ENDS
;	COMDAT ??_C@_03KDFFCEML@RDY?$AA@
CONST	SEGMENT
??_C@_03KDFFCEML@RDY?$AA@ DB 'RDY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07COCHMHBB@?$CFd?3?$CF02d?$AA@
CONST	SEGMENT
??_C@_07COCHMHBB@?$CFd?3?$CF02d?$AA@ DB '%d:%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05GJNDEMGI@SCT?91?$AA@
CONST	SEGMENT
??_C@_05GJNDEMGI@SCT?91?$AA@ DB 'SCT-1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GOOLIKIF@?$CF3d?$AA@
CONST	SEGMENT
??_C@_03GOOLIKIF@?$CF3d?$AA@ DB '%3d', 00H		; `string'
CONST	ENDS
;	COMDAT ?TAIL_WING@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
CONST	SEGMENT
?TAIL_WING@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB DD 03ca3d70ar ; 0.02 ; `HarmTargetingPod::HADDisplay'::`2'::TAIL_WING
CONST	ENDS
;	COMDAT ?WING@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
CONST	SEGMENT
?WING@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB DD 03d75c28fr ; 0.06 ; `HarmTargetingPod::HADDisplay'::`2'::WING
CONST	ENDS
;	COMDAT ?TAIL@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
CONST	SEGMENT
?TAIL@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB DD 03da3d70ar ; 0.08 ; `HarmTargetingPod::HADDisplay'::`2'::TAIL
CONST	ENDS
;	COMDAT ?NOSE@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
CONST	SEGMENT
?NOSE@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB DD 03ca3d70ar ; 0.02 ; `HarmTargetingPod::HADDisplay'::`2'::NOSE
CONST	ENDS
;	COMDAT ?arrowW@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
CONST	SEGMENT
?arrowW@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB DD 03d315b57r ; 0.0433 ; `HarmTargetingPod::HADDisplay'::`2'::arrowW
CONST	ENDS
;	COMDAT ?arrowH@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
CONST	SEGMENT
?arrowH@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB DD 03d19999ar ; 0.0375 ; `HarmTargetingPod::HADDisplay'::`2'::arrowH
CONST	ENDS
;	COMDAT ??_7HarmTargetingPod@@6B@
CONST	SEGMENT
??_7HarmTargetingPod@@6B@ DD FLAT:??_R4HarmTargetingPod@@6B@ ; HarmTargetingPod::`vftable'
	DD	FLAT:??_EHarmTargetingPod@@UAEPAXI@Z
	DD	FLAT:?Display@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z
	DD	FLAT:?DisplayInit@RwrClass@@UAEXPAVImageBuffer@@@Z
	DD	FLAT:?DisplayExit@DrawableClass@@UAEXXZ
	DD	FLAT:?GetDisplay@SensorClass@@UAEPAVVirtualDisplay@@XZ
	DD	FLAT:?PushButton@MfdDrawable@@UAEXHH@Z
	DD	FLAT:?SetType@SensorClass@@UAEXW4SensorType@1@@Z
	DD	FLAT:?SetPower@SensorClass@@UAEXH@Z
	DD	FLAT:?IsOn@SensorClass@@UAEHXZ
	DD	FLAT:?SetDesiredTarget@HarmTargetingPod@@UAEXPAVSimObjectType@@@Z
	DD	FLAT:?ClearSensorTarget@SensorClass@@UAEXXZ
	DD	FLAT:?Exec@HarmTargetingPod@@UAEPAVSimObjectType@@PAV2@@Z
	DD	FLAT:?ExecModes@SensorClass@@UAEXHH@Z
	DD	FLAT:?UpdateState@SensorClass@@UAEXHH@Z
	DD	FLAT:?SetSeekerPos@SensorClass@@UAEXMM@Z
	DD	FLAT:?TargetUnderCursor@SensorClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?SetSensorTarget@SensorClass@@MAEXPAVSimObjectType@@@Z
	DD	FLAT:?SetSensorTargetHack@SensorClass@@MAEXPAVFalconEntity@@@Z
	DD	FLAT:?CheckLockedTarget@SensorClass@@MAEXXZ
	DD	FLAT:?ObjectDetected@HarmTargetingPod@@UAEHPAVFalconEntity@@HH@Z
	DD	FLAT:?GetAGCenter@HarmTargetingPod@@UAEXPAM0@Z
	DD	FLAT:?HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z
	DD	FLAT:?HADExpDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z
	DD	FLAT:?HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z
	DD	FLAT:?POSDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z
	DD	FLAT:?HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?SetDesiredTarget@HarmTargetingPod@@UAEXPAVSimObjectType@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetDesiredTarget@HarmTargetingPod@@UAEXPAVSimObjectType@@@Z$0
__unwindtable$?ObjectDetected@HarmTargetingPod@@UAEHPAVFalconEntity@@HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ObjectDetected@HarmTargetingPod@@UAEHPAVFalconEntity@@HH@Z$0
__unwindtable$?Exec@HarmTargetingPod@@UAEPAVSimObjectType@@PAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Exec@HarmTargetingPod@@UAEPAVSimObjectType@@PAV2@@Z$0
__unwindtable$??0HarmTargetingPod@@QAE@HPAVSimMoverClass@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0HarmTargetingPod@@QAE@HPAVSimMoverClass@@@Z$0
__ehfuncinfo$?SetDesiredTarget@HarmTargetingPod@@UAEXPAVSimObjectType@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetDesiredTarget@HarmTargetingPod@@UAEXPAVSimObjectType@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ObjectDetected@HarmTargetingPod@@UAEHPAVFalconEntity@@HH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ObjectDetected@HarmTargetingPod@@UAEHPAVFalconEntity@@HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Exec@HarmTargetingPod@@UAEPAVSimObjectType@@PAV2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Exec@HarmTargetingPod@@UAEPAVSimObjectType@@PAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0HarmTargetingPod@@QAE@HPAVSimMoverClass@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0HarmTargetingPod@@QAE@HPAVSimMoverClass@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
tv64 = -8						; size = 4
_scale$ = -4						; size = 4
_i$ = 8							; size = 4
_curX$ = 12						; size = 4
_curY$ = 16						; size = 4
_nextX$ = 20						; size = 4
_nextY$ = 24						; size = 4
?GetCurWezValue@@YAXHAAM000@Z PROC			; GetCurWezValue

; 1976 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1977 : 	float scale = 1.22f;

	movss	xmm0, DWORD PTR __real@3f9c28f6
	movss	DWORD PTR _scale$[ebp], xmm0

; 1978 : 
; 1979 : 	switch (i)

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 7
	ja	$LN9@GetCurWezV
	mov	ecx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN13@GetCurWezV[ecx*4]
$LN8@GetCurWezV:

; 1980 : 	{
; 1981 : 	case 0: 
; 1982 : 		curX = nextX;

	mov	edx, DWORD PTR _curX$[ebp]
	mov	eax, DWORD PTR _nextX$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 1983 : 		curY = nextY;

	mov	edx, DWORD PTR _curY$[ebp]
	mov	eax, DWORD PTR _nextY$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 1984 : 		nextX = 0.35f * scale;

	movss	xmm0, DWORD PTR __real@3eb33333
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	edx, DWORD PTR _nextX$[ebp]
	movss	DWORD PTR [edx], xmm0

; 1985 : 		nextY = 0.1f * scale;

	movss	xmm0, DWORD PTR __real@3dcccccd
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, DWORD PTR _nextY$[ebp]
	movss	DWORD PTR [eax], xmm0

; 1986 : 		break;

	jmp	$LN9@GetCurWezV
$LN7@GetCurWezV:

; 1987 : 
; 1988 : 	case 1: 
; 1989 : 		curX = nextX;

	mov	ecx, DWORD PTR _curX$[ebp]
	mov	edx, DWORD PTR _nextX$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 1990 : 		curY = nextY;

	mov	ecx, DWORD PTR _curY$[ebp]
	mov	edx, DWORD PTR _nextY$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 1991 : 		nextX = 0.55f * scale;

	movss	xmm0, DWORD PTR __real@3f0ccccd
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR _nextX$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1992 : 		nextY = 0.18f * scale;

	movss	xmm0, DWORD PTR __real@3e3851ec
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	edx, DWORD PTR _nextY$[ebp]
	movss	DWORD PTR [edx], xmm0

; 1993 : 		break;

	jmp	$LN9@GetCurWezV
$LN6@GetCurWezV:

; 1994 : 
; 1995 : 	case 2: 
; 1996 : 		curX = nextX;

	mov	eax, DWORD PTR _curX$[ebp]
	mov	ecx, DWORD PTR _nextX$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 1997 : 		curY = nextY;

	mov	eax, DWORD PTR _curY$[ebp]
	mov	ecx, DWORD PTR _nextY$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 1998 : 		nextX = 0.65f * scale;

	movss	xmm0, DWORD PTR __real@3f266666
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, DWORD PTR _nextX$[ebp]
	movss	DWORD PTR [eax], xmm0

; 1999 : 		nextY = 0.3f * scale;

	movss	xmm0, DWORD PTR __real@3e99999a
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR _nextY$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 2000 : 		break;

	jmp	$LN9@GetCurWezV
$LN5@GetCurWezV:

; 2001 : 
; 2002 : 	case 3: 
; 2003 : 		curX = nextX;

	mov	edx, DWORD PTR _curX$[ebp]
	mov	eax, DWORD PTR _nextX$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 2004 : 		curY = nextY;

	mov	edx, DWORD PTR _curY$[ebp]
	mov	eax, DWORD PTR _nextY$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 2005 : 		nextX = 0.72f * scale;

	movss	xmm0, DWORD PTR __real@3f3851ec
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	edx, DWORD PTR _nextX$[ebp]
	movss	DWORD PTR [edx], xmm0

; 2006 : 		nextY = 0.65f * scale;

	movss	xmm0, DWORD PTR __real@3f266666
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, DWORD PTR _nextY$[ebp]
	movss	DWORD PTR [eax], xmm0

; 2007 : 		break;

	jmp	$LN9@GetCurWezV
$LN4@GetCurWezV:

; 2008 : 
; 2009 : 	case 4: 
; 2010 : 		curX = nextX;

	mov	ecx, DWORD PTR _curX$[ebp]
	mov	edx, DWORD PTR _nextX$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 2011 : 		curY = nextY;

	mov	ecx, DWORD PTR _curY$[ebp]
	mov	edx, DWORD PTR _nextY$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 2012 : 		nextX = 0.6f * scale;

	movss	xmm0, DWORD PTR __real@3f19999a
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR _nextX$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 2013 : 		nextY = 0.85f * scale;

	movss	xmm0, DWORD PTR __real@3f59999a
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	edx, DWORD PTR _nextY$[ebp]
	movss	DWORD PTR [edx], xmm0

; 2014 : 		break;

	jmp	$LN9@GetCurWezV
$LN3@GetCurWezV:

; 2015 : 
; 2016 : 	case 5: 
; 2017 : 		curX = nextX;

	mov	eax, DWORD PTR _curX$[ebp]
	mov	ecx, DWORD PTR _nextX$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 2018 : 		curY = nextY;

	mov	eax, DWORD PTR _curY$[ebp]
	mov	ecx, DWORD PTR _nextY$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 2019 : 		nextX = 0.2f * scale;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, DWORD PTR _nextX$[ebp]
	movss	DWORD PTR [eax], xmm0

; 2020 : 		nextY = 0.95f * scale;

	movss	xmm0, DWORD PTR __real@3f733333
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR _nextY$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 2021 : 		break;

	jmp	SHORT $LN9@GetCurWezV
$LN2@GetCurWezV:

; 2022 : 
; 2023 : 	case 6: 
; 2024 : 		curX = nextX;

	mov	edx, DWORD PTR _curX$[ebp]
	mov	eax, DWORD PTR _nextX$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 2025 : 		curY = nextY;

	mov	edx, DWORD PTR _curY$[ebp]
	mov	eax, DWORD PTR _nextY$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 2026 : 		nextX = 0.05f * scale;

	movss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	edx, DWORD PTR _nextX$[ebp]
	movss	DWORD PTR [edx], xmm0

; 2027 : 		nextY = 0.955f * scale;

	movss	xmm0, DWORD PTR __real@3f747ae1
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, DWORD PTR _nextY$[ebp]
	movss	DWORD PTR [eax], xmm0

; 2028 : 		break;

	jmp	SHORT $LN9@GetCurWezV
$LN1@GetCurWezV:

; 2029 : 
; 2030 : 	case 7: 
; 2031 : 		curX = nextX;

	mov	ecx, DWORD PTR _curX$[ebp]
	mov	edx, DWORD PTR _nextX$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 2032 : 		curY = nextY;

	mov	ecx, DWORD PTR _curY$[ebp]
	mov	edx, DWORD PTR _nextY$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 2033 : 		nextX = 0.0f * scale;

	movss	xmm0, DWORD PTR __real@00000000
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR _nextX$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 2034 : 		nextY = 0.96f * scale;

	movss	xmm0, DWORD PTR __real@3f75c28f
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	edx, DWORD PTR _nextY$[ebp]
	movss	DWORD PTR [edx], xmm0
$LN9@GetCurWezV:

; 2035 : 		break;
; 2036 : 	}
; 2037 : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN13@GetCurWezV:
	DD	$LN8@GetCurWezV
	DD	$LN7@GetCurWezV
	DD	$LN6@GetCurWezV
	DD	$LN5@GetCurWezV
	DD	$LN4@GetCurWezV
	DD	$LN3@GetCurWezV
	DD	$LN2@GetCurWezV
	DD	$LN1@GetCurWezV
?GetCurWezValue@@YAXHAAM000@Z ENDP			; GetCurWezValue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
tv64 = -4						; size = 4
_i$ = 8							; size = 4
_angleX$ = 12						; size = 4
_angleY$ = 16						; size = 4
_offsetX$ = 20						; size = 4
_offsetY$ = 24						; size = 4
?GetCurWezAngle@@YAXHAAM000@Z PROC			; GetCurWezAngle

; 1914 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1915 : 	switch (i)

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 7
	ja	$LN9@GetCurWezA
	mov	ecx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN13@GetCurWezA[ecx*4]
$LN8@GetCurWezA:

; 1916 : 	{
; 1917 : 	case 0: // angle is 310
; 1918 : 		angleX = 0.642f;

	mov	edx, DWORD PTR _angleX$[ebp]
	movss	xmm0, DWORD PTR __real@3f245a1d
	movss	DWORD PTR [edx], xmm0

; 1919 : 		offsetX = 0.065f;

	mov	eax, DWORD PTR _offsetX$[ebp]
	movss	xmm0, DWORD PTR __real@3d851eb8
	movss	DWORD PTR [eax], xmm0

; 1920 : 		angleY = -0.766f;

	mov	ecx, DWORD PTR _angleY$[ebp]
	movss	xmm0, DWORD PTR __real@bf441893
	movss	DWORD PTR [ecx], xmm0

; 1921 : 		offsetY = -0.01f;

	mov	edx, DWORD PTR _offsetY$[ebp]
	movss	xmm0, DWORD PTR __real@bc23d70a
	movss	DWORD PTR [edx], xmm0

; 1922 : 		break;

	jmp	$LN9@GetCurWezA
$LN7@GetCurWezA:

; 1923 : 
; 1924 : 	case 1: // angle is 330
; 1925 : 		angleX = 0.866f;

	mov	eax, DWORD PTR _angleX$[ebp]
	movss	xmm0, DWORD PTR __real@3f5db22d
	movss	DWORD PTR [eax], xmm0

; 1926 : 		offsetX = 0.085f;

	mov	ecx, DWORD PTR _offsetX$[ebp]
	movss	xmm0, DWORD PTR __real@3dae147b
	movss	DWORD PTR [ecx], xmm0

; 1927 : 		angleY = -0.5f;

	mov	edx, DWORD PTR _angleY$[ebp]
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [edx], xmm0

; 1928 : 		offsetY = -0.01f;

	mov	eax, DWORD PTR _offsetY$[ebp]
	movss	xmm0, DWORD PTR __real@bc23d70a
	movss	DWORD PTR [eax], xmm0

; 1929 : 		break;

	jmp	$LN9@GetCurWezA
$LN6@GetCurWezA:

; 1930 : 
; 1931 : 	case 2: // angle is 350
; 1932 : 		angleX = 0.984f;

	mov	ecx, DWORD PTR _angleX$[ebp]
	movss	xmm0, DWORD PTR __real@3f7be76d
	movss	DWORD PTR [ecx], xmm0

; 1933 : 		offsetX = 0.08f;

	mov	edx, DWORD PTR _offsetX$[ebp]
	movss	xmm0, DWORD PTR __real@3da3d70a
	movss	DWORD PTR [edx], xmm0

; 1934 : 		angleY = -0.173f;

	mov	eax, DWORD PTR _angleY$[ebp]
	movss	xmm0, DWORD PTR __real@be3126e9
	movss	DWORD PTR [eax], xmm0

; 1935 : 		offsetY = 0.0f;

	mov	ecx, DWORD PTR _offsetY$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx], xmm0

; 1936 : 		break;

	jmp	$LN9@GetCurWezA
$LN5@GetCurWezA:

; 1937 : 
; 1938 : 	case 3: // angle is 015
; 1939 : 		angleX = 0.965f;

	mov	edx, DWORD PTR _angleX$[ebp]
	movss	xmm0, DWORD PTR __real@3f770a3d
	movss	DWORD PTR [edx], xmm0

; 1940 : 		offsetX = 0.125f;

	mov	eax, DWORD PTR _offsetX$[ebp]
	movss	xmm0, DWORD PTR __real@3e000000
	movss	DWORD PTR [eax], xmm0

; 1941 : 		angleY = 0.258f;

	mov	ecx, DWORD PTR _angleY$[ebp]
	movss	xmm0, DWORD PTR __real@3e841893
	movss	DWORD PTR [ecx], xmm0

; 1942 : 		offsetY = 0.0f;

	mov	edx, DWORD PTR _offsetY$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx], xmm0

; 1943 : 		break;

	jmp	$LN9@GetCurWezA
$LN4@GetCurWezA:

; 1944 : 
; 1945 : 	case 4: // angle is 040
; 1946 : 		angleX = 0.766f;

	mov	eax, DWORD PTR _angleX$[ebp]
	movss	xmm0, DWORD PTR __real@3f441893
	movss	DWORD PTR [eax], xmm0

; 1947 : 		offsetX = 0.085f;

	mov	ecx, DWORD PTR _offsetX$[ebp]
	movss	xmm0, DWORD PTR __real@3dae147b
	movss	DWORD PTR [ecx], xmm0

; 1948 : 		angleY = 0.642f;

	mov	edx, DWORD PTR _angleY$[ebp]
	movss	xmm0, DWORD PTR __real@3f245a1d
	movss	DWORD PTR [edx], xmm0

; 1949 : 		offsetY = 0.02f;

	mov	eax, DWORD PTR _offsetY$[ebp]
	movss	xmm0, DWORD PTR __real@3ca3d70a
	movss	DWORD PTR [eax], xmm0

; 1950 : 		break;

	jmp	$LN9@GetCurWezA
$LN3@GetCurWezA:

; 1951 : 
; 1952 : 	case 5: // angle is 065
; 1953 : 		angleX = 0.422f;

	mov	ecx, DWORD PTR _angleX$[ebp]
	movss	xmm0, DWORD PTR __real@3ed81062
	movss	DWORD PTR [ecx], xmm0

; 1954 : 		offsetX = 0.0f;

	mov	edx, DWORD PTR _offsetX$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx], xmm0

; 1955 : 		angleY = 0.906f;

	mov	eax, DWORD PTR _angleY$[ebp]
	movss	xmm0, DWORD PTR __real@3f67ef9e
	movss	DWORD PTR [eax], xmm0

; 1956 : 		offsetY = -0.06f;

	mov	ecx, DWORD PTR _offsetY$[ebp]
	movss	xmm0, DWORD PTR __real@bd75c28f
	movss	DWORD PTR [ecx], xmm0

; 1957 : 		break;

	jmp	SHORT $LN9@GetCurWezA
$LN2@GetCurWezA:

; 1958 : 
; 1959 : 	case 6: // angle is 080
; 1960 : 		angleX = 0.173f;

	mov	edx, DWORD PTR _angleX$[ebp]
	movss	xmm0, DWORD PTR __real@3e3126e9
	movss	DWORD PTR [edx], xmm0

; 1961 : 		offsetX = 0.0f;

	mov	eax, DWORD PTR _offsetX$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1962 : 		angleY = 0.984f;

	mov	ecx, DWORD PTR _angleY$[ebp]
	movss	xmm0, DWORD PTR __real@3f7be76d
	movss	DWORD PTR [ecx], xmm0

; 1963 : 		offsetY = -0.075f;

	mov	edx, DWORD PTR _offsetY$[ebp]
	movss	xmm0, DWORD PTR __real@bd99999a
	movss	DWORD PTR [edx], xmm0

; 1964 : 		break;

	jmp	SHORT $LN9@GetCurWezA
$LN1@GetCurWezA:

; 1965 : 
; 1966 : 	case 7: // angle is 090
; 1967 : 		angleX = 0.0f;

	mov	eax, DWORD PTR _angleX$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1968 : 		offsetX = 0.0f;

	mov	ecx, DWORD PTR _offsetX$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx], xmm0

; 1969 : 		angleY = 1.0f;

	mov	edx, DWORD PTR _angleY$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx], xmm0

; 1970 : 		offsetY = -0.085f;

	mov	eax, DWORD PTR _offsetY$[ebp]
	movss	xmm0, DWORD PTR __real@bdae147b
	movss	DWORD PTR [eax], xmm0
$LN9@GetCurWezA:

; 1971 : 		break;
; 1972 : 	}
; 1973 : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN13@GetCurWezA:
	DD	$LN8@GetCurWezA
	DD	$LN7@GetCurWezA
	DD	$LN6@GetCurWezA
	DD	$LN5@GetCurWezA
	DD	$LN4@GetCurWezA
	DD	$LN3@GetCurWezA
	DD	$LN2@GetCurWezA
	DD	$LN1@GetCurWezA
?GetCurWezAngle@@YAXHAAM000@Z ENDP			; GetCurWezAngle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simio.h
;	COMDAT ?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z PROC ; SIMLIB_IO_CLASS::AnalogIsUsed, COMDAT
; _this$ = ecx

; 237  : 	bool	AnalogIsUsed(GameAxis_t id) { return ( analog[id].isUsed); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _id$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [ecx+eax+12]
	mov	esp, ebp
	pop	ebp
	ret	4
?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ENDP ; SIMLIB_IO_CLASS::AnalogIsUsed
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GHarmTargetingPod@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GHarmTargetingPod@@UAEPAXI@Z PROC			; HarmTargetingPod::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1HarmTargetingPod@@UAE@XZ		; HarmTargetingPod::~HarmTargetingPod
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GHarmTargetingPod@@UAEPAXI@Z ENDP			; HarmTargetingPod::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_curMode$ = -12						; size = 4
_this$ = -8						; size = 4
tv66 = -4						; size = 4
_symbol$ = 8						; size = 4
?IsInPriorityList@HarmTargetingPod@@IAE_NH@Z PROC	; HarmTargetingPod::IsInPriorityList
; _this$ = ecx

; 1816 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1817 : 	HASFilterMode curMode = GetFilterMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFilterMode@HarmTargetingPod@@QAE?AW4HASFilterMode@1@XZ ; HarmTargetingPod::GetFilterMode
	mov	DWORD PTR _curMode$[ebp], eax

; 1818 : 
; 1819 : 	switch ( curMode )

	mov	eax, DWORD PTR _curMode$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 1
	je	SHORT $LN15@IsInPriori
	cmp	DWORD PTR tv66[ebp], 2
	je	SHORT $LN10@IsInPriori
	cmp	DWORD PTR tv66[ebp], 3
	je	SHORT $LN5@IsInPriori

; 1820 : 	{
; 1821 : 	case ALL: // Return always true here
; 1822 : 	default:
; 1823 : 		return true;

	mov	al, 1
	jmp	$LN19@IsInPriori

; 1824 : 		break;

	jmp	$LN19@IsInPriori
$LN15@IsInPriori:

; 1825 : 
; 1826 : 	case HP: // Get only high priority threats, basically only SAMs and AAA radars
; 1827 : 		if ( symbol < RWRSYM_HAWK ||
; 1828 : 			(symbol > 23 && symbol != 111 && symbol != 112 &&
; 1829 :              symbol != 117) && 
; 1830 : 			 symbol != RWRSYM_KSAM ||
; 1831 : 			 symbol == RWRSYM_SEARCH )

	cmp	DWORD PTR _symbol$[ebp], 5
	jl	SHORT $LN13@IsInPriori
	cmp	DWORD PTR _symbol$[ebp], 23		; 00000017H
	jle	SHORT $LN12@IsInPriori
	cmp	DWORD PTR _symbol$[ebp], 111		; 0000006fH
	je	SHORT $LN12@IsInPriori
	cmp	DWORD PTR _symbol$[ebp], 112		; 00000070H
	je	SHORT $LN12@IsInPriori
	cmp	DWORD PTR _symbol$[ebp], 117		; 00000075H
	je	SHORT $LN12@IsInPriori
	cmp	DWORD PTR _symbol$[ebp], 30		; 0000001eH
	jne	SHORT $LN13@IsInPriori
$LN12@IsInPriori:
	cmp	DWORD PTR _symbol$[ebp], 17		; 00000011H
	jne	SHORT $LN14@IsInPriori
$LN13@IsInPriori:

; 1832 : 		{
; 1833 : 			return false;

	xor	al, al
	jmp	$LN19@IsInPriori

; 1834 : 		}
; 1835 : 
; 1836 : 		else

	jmp	SHORT $LN11@IsInPriori
$LN14@IsInPriori:

; 1837 : 		{
; 1838 : 			return true;

	mov	al, 1
	jmp	SHORT $LN19@IsInPriori
$LN11@IsInPriori:

; 1839 : 		}
; 1840 : 
; 1841 : 		break;

	jmp	SHORT $LN19@IsInPriori
$LN10@IsInPriori:

; 1842 : 
; 1843 : 	case HA: // Get only high altitude threats, basically all large SAMs
; 1844 : 
; 1845 : 		if ( (symbol >= RWRSYM_HAWK && symbol <= RWRSYM_SA6) ||
; 1846 : 			 symbol == RWRSYM_SA10 ||
; 1847 :              symbol == RWRSYM_NIKE ||
; 1848 : 			 symbol == 111 ||
; 1849 : 			 symbol == 112 ||
; 1850 : 			 symbol == 117 )

	cmp	DWORD PTR _symbol$[ebp], 5
	jl	SHORT $LN7@IsInPriori
	cmp	DWORD PTR _symbol$[ebp], 11		; 0000000bH
	jle	SHORT $LN8@IsInPriori
$LN7@IsInPriori:
	cmp	DWORD PTR _symbol$[ebp], 14		; 0000000eH
	je	SHORT $LN8@IsInPriori
	cmp	DWORD PTR _symbol$[ebp], 21		; 00000015H
	je	SHORT $LN8@IsInPriori
	cmp	DWORD PTR _symbol$[ebp], 111		; 0000006fH
	je	SHORT $LN8@IsInPriori
	cmp	DWORD PTR _symbol$[ebp], 112		; 00000070H
	je	SHORT $LN8@IsInPriori
	cmp	DWORD PTR _symbol$[ebp], 117		; 00000075H
	jne	SHORT $LN9@IsInPriori
$LN8@IsInPriori:

; 1851 : 		{
; 1852 : 			return true;

	mov	al, 1
	jmp	SHORT $LN19@IsInPriori

; 1853 : 		}
; 1854 : 
; 1855 : 		else

	jmp	SHORT $LN6@IsInPriori
$LN9@IsInPriori:

; 1856 : 		{
; 1857 : 			return false;

	xor	al, al
	jmp	SHORT $LN19@IsInPriori
$LN6@IsInPriori:

; 1858 : 		}
; 1859 : 
; 1860 : 		break;

	jmp	SHORT $LN19@IsInPriori
$LN5@IsInPriori:

; 1861 : 
; 1862 : 	case LA: // Get only low altitude threats, basically all small SAMs and AAA
; 1863 : 
; 1864 : 		if ( symbol == RWRSYM_SA8 ||
; 1865 : 			 symbol == RWRSYM_SA9 ||
; 1866 : 			 symbol == RWRSYM_SA13 ||
; 1867 :              symbol == RWRSYM_AAA ||
; 1868 : 			 symbol == RWRSYM_CHAPARAL ||
; 1869 : 			 symbol == RWRSYM_CHAPARAL || 
; 1870 : 			 symbol == RWRSYM_SA15 ||
; 1871 : 			 ( symbol >= 21 && symbol <= 23 ) ||
; 1872 : 			 symbol == RWRSYM_KSAM
; 1873 : 			)

	cmp	DWORD PTR _symbol$[ebp], 12		; 0000000cH
	je	SHORT $LN3@IsInPriori
	cmp	DWORD PTR _symbol$[ebp], 13		; 0000000dH
	je	SHORT $LN3@IsInPriori
	cmp	DWORD PTR _symbol$[ebp], 15		; 0000000fH
	je	SHORT $LN3@IsInPriori
	cmp	DWORD PTR _symbol$[ebp], 16		; 00000010H
	je	SHORT $LN3@IsInPriori
	cmp	DWORD PTR _symbol$[ebp], 19		; 00000013H
	je	SHORT $LN3@IsInPriori
	cmp	DWORD PTR _symbol$[ebp], 19		; 00000013H
	je	SHORT $LN3@IsInPriori
	cmp	DWORD PTR _symbol$[ebp], 20		; 00000014H
	je	SHORT $LN3@IsInPriori
	cmp	DWORD PTR _symbol$[ebp], 21		; 00000015H
	jl	SHORT $LN2@IsInPriori
	cmp	DWORD PTR _symbol$[ebp], 23		; 00000017H
	jle	SHORT $LN3@IsInPriori
$LN2@IsInPriori:
	cmp	DWORD PTR _symbol$[ebp], 30		; 0000001eH
	jne	SHORT $LN4@IsInPriori
$LN3@IsInPriori:

; 1874 : 		{
; 1875 : 			return true;

	mov	al, 1
	jmp	SHORT $LN19@IsInPriori

; 1876 : 		}
; 1877 : 
; 1878 : 		else

	jmp	SHORT $LN19@IsInPriori
$LN4@IsInPriori:

; 1879 : 		{
; 1880 : 			return false;

	xor	al, al
$LN19@IsInPriori:

; 1881 : 		}
; 1882 : 
; 1883 : 		break;
; 1884 : 
; 1885 : 	}
; 1886 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsInPriorityList@HarmTargetingPod@@IAE_NH@Z ENDP	; HarmTargetingPod::IsInPriorityList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
tv84 = -8						; size = 4
_this$ = -4						; size = 4
_displayX$ = 8						; size = 4
_displayY$ = 12						; size = 4
?IsInsideALIC@HarmTargetingPod@@IAE_NAAM0@Z PROC	; HarmTargetingPod::IsInsideALIC
; _this$ = ecx

; 1565 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1566 : 	if ( fabs(displayX) > (0.75f * zoomFactor) || displayY > ((1.05f + HTS_Y_OFFSET) * zoomFactor) ||
; 1567 : 	     displayY < ((-0.3f + HTS_Y_OFFSET) * zoomFactor) )

	mov	eax, DWORD PTR _displayX$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv84[ebp]
	movss	xmm0, DWORD PTR tv84[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3f400000
	mulss	xmm1, DWORD PTR [ecx+152]
	comiss	xmm0, xmm1
	ja	SHORT $LN2@IsInsideAL
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f0ccccc
	mulss	xmm0, DWORD PTR [edx+152]
	mov	eax, DWORD PTR _displayY$[ebp]
	movss	xmm1, DWORD PTR [eax]
	comiss	xmm1, xmm0
	ja	SHORT $LN2@IsInsideAL
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf4ccccd
	mulss	xmm0, DWORD PTR [ecx+152]
	mov	edx, DWORD PTR _displayY$[ebp]
	comiss	xmm0, DWORD PTR [edx]
	jbe	SHORT $LN3@IsInsideAL
$LN2@IsInsideAL:

; 1568 : 	{
; 1569 : 		return false;

	xor	al, al
	jmp	SHORT $LN1@IsInsideAL

; 1570 : 	}
; 1571 : 
; 1572 : 	else

	jmp	SHORT $LN1@IsInsideAL
$LN3@IsInsideAL:

; 1573 : 	{
; 1574 :         return true;

	mov	al, 1
$LN1@IsInsideAL:

; 1575 : 	}
; 1576 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?IsInsideALIC@HarmTargetingPod@@IAE_NAAM0@Z ENDP	; HarmTargetingPod::IsInsideALIC
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_WPnum$ = -8						; size = 4
_tempWaypoint$ = -4					; size = 4
_theWP$ = 8						; size = 4
?FindWaypointNum@HarmTargetingPod@@IAEHPAVWayPointClass@@@Z PROC ; HarmTargetingPod::FindWaypointNum
; _this$ = ecx

; 1796 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1797 : 	int WPnum;
; 1798 :     WayPointClass* tempWaypoint;
; 1799 : 
; 1800 : 	tempWaypoint = ((SimVehicleClass*)platform)->waypoint;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+732]
	mov	DWORD PTR _tempWaypoint$[ebp], edx

; 1801 : 
; 1802 : 	if ( !tempWaypoint ) return -1;

	cmp	DWORD PTR _tempWaypoint$[ebp], 0
	jne	SHORT $LN3@FindWaypoi
	or	eax, -1
	jmp	SHORT $LN4@FindWaypoi
$LN3@FindWaypoi:

; 1803 : 
; 1804 : 	WPnum = 1;

	mov	DWORD PTR _WPnum$[ebp], 1
$LN2@FindWaypoi:

; 1805 : 	while (tempWaypoint && tempWaypoint != theWP)

	cmp	DWORD PTR _tempWaypoint$[ebp], 0
	je	SHORT $LN1@FindWaypoi
	mov	eax, DWORD PTR _tempWaypoint$[ebp]
	cmp	eax, DWORD PTR _theWP$[ebp]
	je	SHORT $LN1@FindWaypoi

; 1806 : 	{
; 1807 : 		tempWaypoint = tempWaypoint->GetNextWP();

	mov	ecx, DWORD PTR _tempWaypoint$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _tempWaypoint$[ebp], eax

; 1808 : 		WPnum++;

	mov	ecx, DWORD PTR _WPnum$[ebp]
	add	ecx, 1
	mov	DWORD PTR _WPnum$[ebp], ecx

; 1809 : 	}

	jmp	SHORT $LN2@FindWaypoi
$LN1@FindWaypoi:

; 1810 : 
; 1811 : 	return WPnum;

	mov	eax, DWORD PTR _WPnum$[ebp]
$LN4@FindWaypoi:

; 1812 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?FindWaypointNum@HarmTargetingPod@@IAEHPAVWayPointClass@@@Z ENDP ; HarmTargetingPod::FindWaypointNum
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_wpZ$ = -144						; size = 4
tv442 = -140						; size = 4
_lastValidWP$ = -136					; size = 4
tv515 = -132						; size = 4
tv476 = -128						; size = 4
_firstFreeTargetIndex$ = -124				; size = 4
tv519 = -120						; size = 4
_wpX$ = -116						; size = 4
tv469 = -112						; size = 4
tv517 = -108						; size = 4
tv457 = -104						; size = 4
tv432 = -100						; size = 4
_wpY$ = -96						; size = 4
tv427 = -92						; size = 4
tv451 = -88						; size = 4
tv437 = -84						; size = 4
_waypointY$ = -80					; size = 4
_waypointX$ = -76					; size = 4
_displayX$ = -72					; size = 4
tv294 = -68						; size = 4
_bestSoFar$ = -64					; size = 4
_delta$ = -60						; size = 4
_FCC$ = -56						; size = 4
_firstValidWP$ = -52					; size = 4
_displayY$ = -48					; size = 4
_trig$ = -44						; size = 8
_choice$ = -36						; size = 4
_tempIndex$ = -32					; size = 4
_y$ = -28						; size = 4
_x$ = -24						; size = 4
_curWaypoint$ = -20					; size = 4
_tmpElement$ = -16					; size = 4
_tempWP$ = -12						; size = 4
_curTargetFound$ = -5					; size = 1
_this$ = -4						; size = 4
?BuildPOSTargets@HarmTargetingPod@@IAEXXZ PROC		; HarmTargetingPod::BuildPOSTargets
; _this$ = ecx

; 1241 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1242 : 	GroundListElement		*tmpElement;
; 1243 : 	GroundListElement		*choice		= NULL;

	mov	DWORD PTR _choice$[ebp], 0

; 1244 : 	float			bestSoFar; // very small value from waypoint
; 1245 : 	mlTrig			trig;
; 1246 : 	float			wpX, wpY, wpZ;
; 1247 : 	float			x, y;
; 1248 : 	float			displayX, displayY;
; 1249 : 	float			delta;
; 1250 : 	float			waypointX, waypointY;
; 1251 : 	int				firstFreeTargetIndex;
; 1252 : 	WayPointClass	*curWaypoint;
; 1253 : 	WayPointClass	*tempWP, *firstValidWP, *lastValidWP;
; 1254 : 	FireControlComputer* FCC = ((SimVehicleClass*)platform)->GetFCC();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax+460]
	call	edx
	mov	DWORD PTR _FCC$[ebp], eax

; 1255 : 	bool			curTargetFound = false;

	mov	BYTE PTR _curTargetFound$[ebp], 0

; 1256 : 
; 1257 : 	curWaypoint = ((SimVehicleClass*)platform)->curWaypoint; // Get the current waypoint

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+728]
	mov	DWORD PTR _curWaypoint$[ebp], edx

; 1258 : 
; 1259 : 	if ( !curWaypoint ) return; // Don't do anything if waypoint is NULL

	cmp	DWORD PTR _curWaypoint$[ebp], 0
	jne	SHORT $LN26@BuildPOSTa
	jmp	$LN27@BuildPOSTa
$LN26@BuildPOSTa:

; 1260 : 
; 1261 : 	if ( POSTargets[MAX_POS_TARGETS -1] ) return; // Don't bother if POS targets list already full

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+188], 0
	je	SHORT $LN25@BuildPOSTa
	jmp	$LN27@BuildPOSTa
$LN25@BuildPOSTa:

; 1262 : 
; 1263 : 	// Now the purpose is to get to first valid waypoint and last valid waypoint, then
; 1264 : 	// start to build a PB list in between
; 1265 : 	if ( curWaypoint->GetWPAction() == WP_TAKEOFF ) // check if the current is the Take-off WP

	mov	ecx, DWORD PTR _curWaypoint$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 1
	jne	SHORT $LN24@BuildPOSTa

; 1266 : 	{
; 1267 : 		if ( curWaypoint->GetNextWP() ) // Validate next one isn't NULL

	mov	ecx, DWORD PTR _curWaypoint$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	test	eax, eax
	je	SHORT $LN23@BuildPOSTa

; 1268 : 		{
; 1269 : 			firstValidWP = curWaypoint->GetNextWP(); // Mark next one as the first valid WP 

	mov	ecx, DWORD PTR _curWaypoint$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _firstValidWP$[ebp], eax

; 1270 : 		}
; 1271 : 
; 1272 : 		else 

	jmp	SHORT $LN22@BuildPOSTa
$LN23@BuildPOSTa:

; 1273 : 		{
; 1274 : 			return;

	jmp	$LN27@BuildPOSTa
$LN22@BuildPOSTa:

; 1275 : 		}
; 1276 : 	}
; 1277 : 
; 1278 : 	else // Find the first waypoint

	jmp	SHORT $LN21@BuildPOSTa
$LN24@BuildPOSTa:

; 1279 : 	{
; 1280 :         while ( curWaypoint->GetPrevWP() && (curWaypoint->GetPrevWP())->GetWPAction() != WP_TAKEOFF ) 

	mov	ecx, DWORD PTR _curWaypoint$[ebp]
	call	?GetPrevWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetPrevWP
	test	eax, eax
	je	SHORT $LN19@BuildPOSTa
	mov	ecx, DWORD PTR _curWaypoint$[ebp]
	call	?GetPrevWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetPrevWP
	mov	ecx, eax
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 1
	je	SHORT $LN19@BuildPOSTa

; 1281 : 		{
; 1282 : 			curWaypoint = curWaypoint->GetPrevWP();

	mov	ecx, DWORD PTR _curWaypoint$[ebp]
	call	?GetPrevWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetPrevWP
	mov	DWORD PTR _curWaypoint$[ebp], eax

; 1283 : 		}

	jmp	SHORT $LN24@BuildPOSTa
$LN19@BuildPOSTa:

; 1284 : 
; 1285 : 		firstValidWP = curWaypoint;

	mov	edx, DWORD PTR _curWaypoint$[ebp]
	mov	DWORD PTR _firstValidWP$[ebp], edx
$LN21@BuildPOSTa:

; 1286 : 	}
; 1287 : 
; 1288 : 	tempWP = firstValidWP;

	mov	eax, DWORD PTR _firstValidWP$[ebp]
	mov	DWORD PTR _tempWP$[ebp], eax
$LN18@BuildPOSTa:

; 1289 : 
; 1290 : 	// Now move on to find the last valid WP
; 1291 : 	while ( tempWP->GetNextWP() && (tempWP->GetNextWP())->GetWPAction() != WP_LAND )

	mov	ecx, DWORD PTR _tempWP$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	test	eax, eax
	je	SHORT $LN17@BuildPOSTa
	mov	ecx, DWORD PTR _tempWP$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	ecx, eax
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 7
	je	SHORT $LN17@BuildPOSTa

; 1292 : 	{
; 1293 : 		tempWP = tempWP->GetNextWP();

	mov	ecx, DWORD PTR _tempWP$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _tempWP$[ebp], eax

; 1294 : 	}

	jmp	SHORT $LN18@BuildPOSTa
$LN17@BuildPOSTa:

; 1295 : 
; 1296 : 	lastValidWP = tempWP;

	mov	ecx, DWORD PTR _tempWP$[ebp]
	mov	DWORD PTR _lastValidWP$[ebp], ecx

; 1297 : 
; 1298 : 	firstFreeTargetIndex = 0;

	mov	DWORD PTR _firstFreeTargetIndex$[ebp], 0

; 1299 : 
; 1300 : 	int tempIndex = firstFreeTargetIndex;

	mov	edx, DWORD PTR _firstFreeTargetIndex$[ebp]
	mov	DWORD PTR _tempIndex$[ebp], edx

; 1301 : 
; 1302 : 	for ( tempWP = firstValidWP; tempWP != lastValidWP->GetNextWP(); tempWP = tempWP->GetNextWP() )

	mov	eax, DWORD PTR _firstValidWP$[ebp]
	mov	DWORD PTR _tempWP$[ebp], eax
	jmp	SHORT $LN16@BuildPOSTa
$LN15@BuildPOSTa:
	mov	ecx, DWORD PTR _tempWP$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _tempWP$[ebp], eax
$LN16@BuildPOSTa:
	mov	ecx, DWORD PTR _lastValidWP$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	cmp	DWORD PTR _tempWP$[ebp], eax
	je	$LN14@BuildPOSTa

; 1303 : 	{
; 1304 : 		mlSinCos (&trig, platform->Yaw());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _trig$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 1305 : 
; 1306 : 		tempWP->GetLocation (&wpX, &wpY, &wpZ);

	lea	eax, DWORD PTR _wpZ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wpY$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wpX$[ebp]
	push	edx
	mov	ecx, DWORD PTR _tempWP$[ebp]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation

; 1307 : 	
; 1308 : 		// Walk our list looking for the thing in range and nearest the waypoint
; 1309 : 		bestSoFar = 0.005f;

	movss	xmm0, DWORD PTR __real@3ba3d70a
	movss	DWORD PTR _bestSoFar$[ebp], xmm0

; 1310 : 		choice = NULL;

	mov	DWORD PTR _choice$[ebp], 0

; 1311 : 
; 1312 : 		for (tmpElement	= FCC->GetFirstGroundElement(); tmpElement; tmpElement = tmpElement->GetNext())

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetFirstGroundElement@FireControlComputer@@QAEPAVGroundListElement@@XZ ; FireControlComputer::GetFirstGroundElement
	mov	DWORD PTR _tmpElement$[ebp], eax
	jmp	SHORT $LN13@BuildPOSTa
$LN12@BuildPOSTa:
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?GetNext@GroundListElement@@QAEPAV1@XZ	; GroundListElement::GetNext
	mov	DWORD PTR _tmpElement$[ebp], eax
$LN13@BuildPOSTa:
	cmp	DWORD PTR _tmpElement$[ebp], 0
	je	$LN11@BuildPOSTa

; 1313 : 		{
; 1314 : 			if (tmpElement->BaseObject() == NULL) continue;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	test	eax, eax
	jne	SHORT $LN10@BuildPOSTa
	jmp	SHORT $LN12@BuildPOSTa
$LN10@BuildPOSTa:

; 1315 : 
; 1316 : 			// Although not displaying anything, still using the display variables...
; 1317 : 			// Convert to normalized display space with heading up
; 1318 : 			y = (tmpElement->BaseObject()->XPos() - platform->XPos()) * FT_TO_NM / 30.0f * HTS_DISPLAY_RADIUS;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv427[ebp]
	movss	xmm0, DWORD PTR tv427[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv515[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv432[ebp]
	movss	xmm0, DWORD PTR tv515[ebp]
	subss	xmm0, DWORD PTR tv432[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	divss	xmm0, DWORD PTR __real@41f00000
	mulss	xmm0, DWORD PTR __real@3fb33333
	movss	DWORD PTR _y$[ebp], xmm0

; 1319 : 			x = (tmpElement->BaseObject()->YPos() - platform->YPos()) * FT_TO_NM / 30.0f * HTS_DISPLAY_RADIUS;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv437[ebp]
	movss	xmm0, DWORD PTR tv437[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv517[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv442[ebp]
	movss	xmm0, DWORD PTR tv517[ebp]
	subss	xmm0, DWORD PTR tv442[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	divss	xmm0, DWORD PTR __real@41f00000
	mulss	xmm0, DWORD PTR __real@3fb33333
	movss	DWORD PTR _x$[ebp], xmm0

; 1320 : 			displayX = trig.cos * x - trig.sin * y;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _displayX$[ebp], xmm0

; 1321 : 			displayY = trig.sin * x + trig.cos * y;

	movss	xmm0, DWORD PTR _trig$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp+4]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _displayY$[ebp], xmm0

; 1322 : 
; 1323 : 			// Now get the waypoint's position
; 1324 : 			y = (wpX - platform->XPos()) * FT_TO_NM / 30.0f * HTS_DISPLAY_RADIUS;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv451[ebp]
	movss	xmm0, DWORD PTR _wpX$[ebp]
	subss	xmm0, DWORD PTR tv451[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	divss	xmm0, DWORD PTR __real@41f00000
	mulss	xmm0, DWORD PTR __real@3fb33333
	movss	DWORD PTR _y$[ebp], xmm0

; 1325 : 			x = (wpY - platform->YPos()) * FT_TO_NM / 30.0f * HTS_DISPLAY_RADIUS;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv457[ebp]
	movss	xmm0, DWORD PTR _wpY$[ebp]
	subss	xmm0, DWORD PTR tv457[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	divss	xmm0, DWORD PTR __real@41f00000
	mulss	xmm0, DWORD PTR __real@3fb33333
	movss	DWORD PTR _x$[ebp], xmm0

; 1326 : 			waypointX = trig.cos * x - trig.sin * y;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _waypointX$[ebp], xmm0

; 1327 : 			waypointY = trig.sin * x + trig.cos * y;

	movss	xmm0, DWORD PTR _trig$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp+4]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _waypointY$[ebp], xmm0

; 1328 : 			
; 1329 : 			// See if this is the closest to the waypoint so far (must be smaller than 0.0005f anyway)
; 1330 : 			delta = (float)max( fabs(displayX - waypointX), fabs(displayY - waypointY) );

	movss	xmm0, DWORD PTR _displayX$[ebp]
	subss	xmm0, DWORD PTR _waypointX$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv469[ebp]
	movss	xmm0, DWORD PTR tv469[ebp]
	movss	xmm1, DWORD PTR _displayY$[ebp]
	subss	xmm1, DWORD PTR _waypointY$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv519[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv476[ebp]
	movss	xmm0, DWORD PTR tv519[ebp]
	comiss	xmm0, DWORD PTR tv476[ebp]
	jbe	SHORT $LN29@BuildPOSTa
	movss	xmm0, DWORD PTR _displayX$[ebp]
	subss	xmm0, DWORD PTR _waypointX$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv294[ebp]
	jmp	SHORT $LN30@BuildPOSTa
$LN29@BuildPOSTa:
	movss	xmm0, DWORD PTR _displayY$[ebp]
	subss	xmm0, DWORD PTR _waypointY$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv294[ebp]
$LN30@BuildPOSTa:
	movss	xmm0, DWORD PTR tv294[ebp]
	movss	DWORD PTR _delta$[ebp], xmm0

; 1331 : 			if (delta < bestSoFar) {

	movss	xmm0, DWORD PTR _bestSoFar$[ebp]
	comiss	xmm0, DWORD PTR _delta$[ebp]
	jbe	SHORT $LN9@BuildPOSTa

; 1332 : 				bestSoFar = delta;

	movss	xmm0, DWORD PTR _delta$[ebp]
	movss	DWORD PTR _bestSoFar$[ebp], xmm0

; 1333 : 				choice = tmpElement;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	mov	DWORD PTR _choice$[ebp], ecx
$LN9@BuildPOSTa:

; 1334 : 			}
; 1335 : 
; 1336 : 			if ( !curTargetFound && curTarget && curTarget->BaseObject() )

	movzx	edx, BYTE PTR _curTargetFound$[ebp]
	test	edx, edx
	jne	SHORT $LN7@BuildPOSTa
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+220], 0
	je	SHORT $LN7@BuildPOSTa
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+220]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	test	eax, eax
	je	SHORT $LN7@BuildPOSTa

; 1337 : 			{
; 1338 : 				if ( tmpElement == curTarget || tmpElement->BaseObject() == curTarget->BaseObject() )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _tmpElement$[ebp]
	cmp	eax, DWORD PTR [edx+220]
	je	SHORT $LN6@BuildPOSTa
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+220]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	cmp	esi, eax
	jne	SHORT $LN7@BuildPOSTa
$LN6@BuildPOSTa:

; 1339 : 				{
; 1340 : 					curTargetFound = true;

	mov	BYTE PTR _curTargetFound$[ebp], 1
$LN7@BuildPOSTa:

; 1341 : 				}
; 1342 : 			}
; 1343 : 
; 1344 : 			if ( lockedTarget && lockedTarget->BaseData() == tmpElement->BaseObject() )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN4@BuildPOSTa
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	esi, eax
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	cmp	esi, eax
	jne	SHORT $LN4@BuildPOSTa

; 1345 : 			{
; 1346 : 				if ( displayY < 0.0f )

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _displayY$[ebp]
	jbe	SHORT $LN4@BuildPOSTa

; 1347 : 				{
; 1348 : 					FCC->dropTrackCmd = TRUE;

	mov	ecx, DWORD PTR _FCC$[ebp]
	mov	BYTE PTR [ecx+185], 1
$LN4@BuildPOSTa:

; 1349 : 				}
; 1350 : 			}
; 1351 : 		}

	jmp	$LN12@BuildPOSTa
$LN11@BuildPOSTa:

; 1352 : 
; 1353 :         // If choice is not NULL, we got a matching element
; 1354 : 		if ( choice )

	cmp	DWORD PTR _choice$[ebp], 0
	je	SHORT $LN2@BuildPOSTa

; 1355 : 		{
; 1356 :             POSTargets[tempIndex] = choice;

	mov	edx, DWORD PTR _tempIndex$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _choice$[ebp]
	mov	DWORD PTR [eax+edx*4+188], ecx

; 1357 : 			POSTargetsWPs[tempIndex] = tempWP;

	mov	edx, DWORD PTR _tempIndex$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _tempWP$[ebp]
	mov	DWORD PTR [eax+edx*4+204], ecx

; 1358 : 			tempIndex++;

	mov	edx, DWORD PTR _tempIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _tempIndex$[ebp], edx

; 1359 : 			if ( tempIndex > MAX_POS_TARGETS - 1 ) // list is full, get out...

	cmp	DWORD PTR _tempIndex$[ebp], 3
	jle	SHORT $LN2@BuildPOSTa

; 1360 : 			{
; 1361 : 				break;

	jmp	SHORT $LN14@BuildPOSTa
$LN2@BuildPOSTa:

; 1362 : 			}
; 1363 : 		}
; 1364 : 
; 1365 : 		if ( !curTargetFound ) // If the cur target no longer alive, NULL the curTarget pointer

	movzx	eax, BYTE PTR _curTargetFound$[ebp]
	test	eax, eax
	jne	SHORT $LN1@BuildPOSTa

; 1366 : 		{
; 1367 : 			curTarget = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+220], 0
$LN1@BuildPOSTa:

; 1368 : 		}
; 1369 : 	}

	jmp	$LN15@BuildPOSTa
$LN14@BuildPOSTa:
$LN27@BuildPOSTa:

; 1370 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?BuildPOSTargets@HarmTargetingPod@@IAEXXZ ENDP		; HarmTargetingPod::BuildPOSTargets
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
?ClearPOSTargets@HarmTargetingPod@@IAEXXZ PROC		; HarmTargetingPod::ClearPOSTargets
; _this$ = ecx

; 1775 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1776 : 	for ( int i = 0; i < MAX_POS_TARGETS; i++ )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@ClearPOSTa
$LN2@ClearPOSTa:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@ClearPOSTa:
	cmp	DWORD PTR _i$1[ebp], 4
	jge	SHORT $LN4@ClearPOSTa

; 1777 : 	{
; 1778 : 		POSTargets[i] = NULL;

	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+188], 0

; 1779 : 		POSTargetsWPs[i] = NULL;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+204], 0

; 1780 : 	}

	jmp	SHORT $LN2@ClearPOSTa
$LN4@ClearPOSTa:

; 1781 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ClearPOSTargets@HarmTargetingPod@@IAEXXZ ENDP		; HarmTargetingPod::ClearPOSTargets
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_tempColor$1 = -28					; size = 4
_horizontalSpace$ = -24					; size = 4
_verticalPos$ = -20					; size = 4
_horizontalPos$ = -16					; size = 4
_i$ = -12						; size = 4
_this$ = -8						; size = 4
_found$ = -1						; size = 1
_symbol$ = 8						; size = 4
_displayX$ = 12						; size = 4
_displayY$ = 16						; size = 4
?BoxTargetDTSB@HarmTargetingPod@@IAEXHAAM0@Z PROC	; HarmTargetingPod::BoxTargetDTSB
; _this$ = ecx

; 1720 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 1721 : 	float verticalPos = 1.225f; // vertical center of DTSB box

	movss	xmm0, DWORD PTR __real@3f9ccccd
	movss	DWORD PTR _verticalPos$[ebp], xmm0

; 1722 : 	float horizontalPos = -0.5f; // first slot to write into (starting from left to right) 

	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR _horizontalPos$[ebp], xmm0

; 1723 : 	float horizontalSpace = 0.2f; // space between symbols in the box 

	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _horizontalSpace$[ebp], xmm0

; 1724 : 	int i;
; 1725 : 	bool found = false;

	mov	BYTE PTR _found$[ebp], 0

; 1726 : 
; 1727 : 	// Get into list only a "worthy" symbol, SAM or search radar
; 1728 : 	if ( !IsInPriorityList ( symbol ) )

	mov	eax, DWORD PTR _symbol$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsInPriorityList@HarmTargetingPod@@IAE_NH@Z ; HarmTargetingPod::IsInPriorityList
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN8@BoxTargetD

; 1729 : 	{
; 1730 : 		return;

	jmp	$LN9@BoxTargetD
$LN8@BoxTargetD:

; 1731 : 	}
; 1732 : 
; 1733 : 	// Do not draw unknown threats into DTSB
; 1734 : 	if ( symbol == RWRSYM_UNKNOWN ||
; 1735 : 		 symbol == RWRSYM_UNK1 ||
; 1736 : 		 symbol == RWRSYM_UNK2 ||
; 1737 : 		 symbol == RWRSYM_UNK3 ||
; 1738 : 		 symbol == RWRSYM_MIB_F_U ||
; 1739 : 		 symbol == RWRSYM_VS ||
; 1740 : 		 symbol == RWRSYM_MIB_F_S ||
; 1741 : 		 symbol == RWRSYM_MIB_BW_S
; 1742 : 		 )

	cmp	DWORD PTR _symbol$[ebp], 1
	je	SHORT $LN6@BoxTargetD
	cmp	DWORD PTR _symbol$[ebp], 27		; 0000001bH
	je	SHORT $LN6@BoxTargetD
	cmp	DWORD PTR _symbol$[ebp], 28		; 0000001cH
	je	SHORT $LN6@BoxTargetD
	cmp	DWORD PTR _symbol$[ebp], 29		; 0000001dH
	je	SHORT $LN6@BoxTargetD
	cmp	DWORD PTR _symbol$[ebp], 60		; 0000003cH
	je	SHORT $LN6@BoxTargetD
	cmp	DWORD PTR _symbol$[ebp], 53		; 00000035H
	je	SHORT $LN6@BoxTargetD
	cmp	DWORD PTR _symbol$[ebp], 57		; 00000039H
	je	SHORT $LN6@BoxTargetD
	cmp	DWORD PTR _symbol$[ebp], 62		; 0000003eH
	jne	SHORT $LN7@BoxTargetD
$LN6@BoxTargetD:

; 1743 : 	{
; 1744 : 		return;

	jmp	$LN9@BoxTargetD
$LN7@BoxTargetD:

; 1745 : 	}
; 1746 : 
; 1747 : 	for ( i = 0; i < 5; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@BoxTargetD
$LN4@BoxTargetD:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN5@BoxTargetD:
	cmp	DWORD PTR _i$[ebp], 5
	jge	SHORT $LN3@BoxTargetD

; 1748 : 	{
; 1749 : 		if ( DTSBList[i] == symbol )

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+124]
	cmp	edx, DWORD PTR _symbol$[ebp]
	jne	SHORT $LN2@BoxTargetD

; 1750 : 		{
; 1751 : 			found = true;

	mov	BYTE PTR _found$[ebp], 1

; 1752 : 			break;

	jmp	SHORT $LN3@BoxTargetD
$LN2@BoxTargetD:

; 1753 : 		}
; 1754 : 
; 1755 : 		horizontalPos += horizontalSpace; 

	movss	xmm0, DWORD PTR _horizontalPos$[ebp]
	addss	xmm0, DWORD PTR _horizontalSpace$[ebp]
	movss	DWORD PTR _horizontalPos$[ebp], xmm0

; 1756 : 	}

	jmp	SHORT $LN4@BoxTargetD
$LN3@BoxTargetD:

; 1757 : 
; 1758 : 	if ( found )

	movzx	eax, BYTE PTR _found$[ebp]
	test	eax, eax
	je	$LN1@BoxTargetD

; 1759 : 	{
; 1760 : 		// Adjust the display according to the correct slot position on the box
; 1761 : 		display->AdjustOriginInViewport ( -displayX + horizontalPos, -displayY + verticalPos + HTS_Y_OFFSET );

	mov	ecx, DWORD PTR _displayY$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	addss	xmm0, DWORD PTR _verticalPos$[ebp]
	addss	xmm0, DWORD PTR __real@bf000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _displayX$[ebp]
	movss	xmm0, DWORD PTR [edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	addss	xmm0, DWORD PTR _horizontalPos$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 1762 : 		DWORD tempColor = display->Color();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+108]
	call	eax
	mov	DWORD PTR _tempColor$1[ebp], eax

; 1763 : 		display->SetColor (GetMfdColor(MFD_WHITY_GRAY)); // "whity" gray

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 1764 : 
; 1765 : 		DrawEmitterSymbol( symbol, 2 ); // Draw the symbol in a box

	push	2
	mov	ecx, DWORD PTR _symbol$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawEmitterSymbol@RwrClass@@IAEXHH@Z	; RwrClass::DrawEmitterSymbol

; 1766 : 
; 1767 : 		// Reset the display back
; 1768 : 		display->SetColor (tempColor);

	mov	edx, DWORD PTR _tempColor$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 1769 : 		display->AdjustOriginInViewport ( displayX - horizontalPos, +displayY - verticalPos - HTS_Y_OFFSET );

	mov	eax, DWORD PTR _displayY$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR _verticalPos$[ebp]
	subss	xmm0, DWORD PTR __real@bf000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _displayX$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR _horizontalPos$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport
$LN1@BoxTargetD:
$LN9@BoxTargetD:

; 1770 : 	}
; 1771 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?BoxTargetDTSB@HarmTargetingPod@@IAEXHAAM0@Z ENDP	; HarmTargetingPod::BoxTargetDTSB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\harmpod.h
;	COMDAT ?ClearDTSB@HarmTargetingPod@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
?ClearDTSB@HarmTargetingPod@@IAEXXZ PROC		; HarmTargetingPod::ClearDTSB, COMDAT
; _this$ = ecx

; 146  : 	void			ClearDTSB ( void ) { for ( int i = 0; i < MAX_DTSB_TARGETS; i++ ) DTSBList[i] = 0; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@ClearDTSB
$LN2@ClearDTSB:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@ClearDTSB:
	cmp	DWORD PTR _i$1[ebp], 5
	jge	SHORT $LN4@ClearDTSB
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+124], 0
	jmp	SHORT $LN2@ClearDTSB
$LN4@ClearDTSB:
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearDTSB@HarmTargetingPod@@IAEXXZ ENDP		; HarmTargetingPod::ClearDTSB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_tempColor$ = -24					; size = 4
_horizontalSpace$ = -20					; size = 4
_verticalPos$ = -16					; size = 4
_horizontalPos$ = -12					; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_symbol$ = 8						; size = 4
_displayX$ = 12						; size = 4
_displayY$ = 16						; size = 4
?UpdateDTSB@HarmTargetingPod@@IAEXHAAM0@Z PROC		; HarmTargetingPod::UpdateDTSB
; _this$ = ecx

; 1649 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1650 : 	float verticalPos = 1.225f; // vertical center of DTSB box

	movss	xmm0, DWORD PTR __real@3f9ccccd
	movss	DWORD PTR _verticalPos$[ebp], xmm0

; 1651 : 	float horizontalPos = -0.5f; // first slot to write into (starting from left to right) 

	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR _horizontalPos$[ebp], xmm0

; 1652 : 	float horizontalSpace = 0.2f; // space between symbols in the box 

	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _horizontalSpace$[ebp], xmm0

; 1653 : 	int i;
; 1654 : 
; 1655 : 	if ( zoomFactor > 1.0f ) // no DTSB in zoomed mode

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+152]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN11@UpdateDTSB

; 1656 : 	{
; 1657 : 		return;

	jmp	$LN12@UpdateDTSB
$LN11@UpdateDTSB:

; 1658 : 	}
; 1659 : 
; 1660 : 	if ( DTSBList[MAX_DTSB_TARGETS - 1] ) // list is already full, no place for you, sorry...

	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx+124], 0
	je	SHORT $LN10@UpdateDTSB

; 1661 : 	{
; 1662 : 		return;

	jmp	$LN12@UpdateDTSB
$LN10@UpdateDTSB:

; 1663 : 	}
; 1664 : 
; 1665 : 	// Get into list only a "worthy" symbol, SAM or search radar
; 1666 : 	if ( !IsInPriorityList ( symbol ) )

	mov	eax, DWORD PTR _symbol$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsInPriorityList@HarmTargetingPod@@IAE_NH@Z ; HarmTargetingPod::IsInPriorityList
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN9@UpdateDTSB

; 1667 : 	{
; 1668 : 		return;

	jmp	$LN12@UpdateDTSB
$LN9@UpdateDTSB:

; 1669 : 	}
; 1670 : 
; 1671 : 	// Do not draw unknown threats into DTSB
; 1672 : 	if ( symbol == RWRSYM_UNKNOWN ||
; 1673 : 		 symbol == RWRSYM_UNK1 ||
; 1674 : 		 symbol == RWRSYM_UNK2 ||
; 1675 : 		 symbol == RWRSYM_UNK3 ||
; 1676 : 		 symbol == RWRSYM_MIB_F_U ||
; 1677 : 		 symbol == RWRSYM_VS ||
; 1678 : 		 symbol == RWRSYM_MIB_F_S ||
; 1679 : 		 symbol == RWRSYM_MIB_BW_S
; 1680 : 		 )

	cmp	DWORD PTR _symbol$[ebp], 1
	je	SHORT $LN7@UpdateDTSB
	cmp	DWORD PTR _symbol$[ebp], 27		; 0000001bH
	je	SHORT $LN7@UpdateDTSB
	cmp	DWORD PTR _symbol$[ebp], 28		; 0000001cH
	je	SHORT $LN7@UpdateDTSB
	cmp	DWORD PTR _symbol$[ebp], 29		; 0000001dH
	je	SHORT $LN7@UpdateDTSB
	cmp	DWORD PTR _symbol$[ebp], 60		; 0000003cH
	je	SHORT $LN7@UpdateDTSB
	cmp	DWORD PTR _symbol$[ebp], 53		; 00000035H
	je	SHORT $LN7@UpdateDTSB
	cmp	DWORD PTR _symbol$[ebp], 57		; 00000039H
	je	SHORT $LN7@UpdateDTSB
	cmp	DWORD PTR _symbol$[ebp], 62		; 0000003eH
	jne	SHORT $LN8@UpdateDTSB
$LN7@UpdateDTSB:

; 1681 : 	{
; 1682 : 		return;

	jmp	$LN12@UpdateDTSB
$LN8@UpdateDTSB:

; 1683 : 	}
; 1684 : 
; 1685 : 	// Start filling the DTSB list
; 1686 : 	// Look for first open slot
; 1687 : 	for ( i = 0; i < MAX_DTSB_TARGETS; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@UpdateDTSB
$LN5@UpdateDTSB:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN6@UpdateDTSB:
	cmp	DWORD PTR _i$[ebp], 5
	jge	SHORT $LN4@UpdateDTSB

; 1688 : 	{
; 1689 : 		if ( DTSBList[i] ) // this position is already taken...

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+124], 0
	je	SHORT $LN3@UpdateDTSB

; 1690 : 		{
; 1691 : 			if ( DTSBList[i] == symbol ) // symbol is already on the list... return

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+124]
	cmp	ecx, DWORD PTR _symbol$[ebp]
	jne	SHORT $LN2@UpdateDTSB

; 1692 : 			{
; 1693 : 				return;

	jmp	$LN12@UpdateDTSB
$LN2@UpdateDTSB:

; 1694 : 			}
; 1695 : 
; 1696 : 			horizontalPos += horizontalSpace; // jump one slot to the right

	movss	xmm0, DWORD PTR _horizontalPos$[ebp]
	addss	xmm0, DWORD PTR _horizontalSpace$[ebp]
	movss	DWORD PTR _horizontalPos$[ebp], xmm0

; 1697 : 			continue;

	jmp	SHORT $LN5@UpdateDTSB

; 1698 : 		}
; 1699 : 
; 1700 : 		else

	jmp	SHORT $LN1@UpdateDTSB
$LN3@UpdateDTSB:

; 1701 : 		{
; 1702 : 			break;

	jmp	SHORT $LN4@UpdateDTSB
$LN1@UpdateDTSB:

; 1703 : 		}
; 1704 : 	}

	jmp	SHORT $LN5@UpdateDTSB
$LN4@UpdateDTSB:

; 1705 : 
; 1706 : 	// Adjust the display according to the correct slot position on the box
; 1707 : 	display->AdjustOriginInViewport ( -displayX + horizontalPos, -displayY + verticalPos + HTS_Y_OFFSET );

	mov	edx, DWORD PTR _displayY$[ebp]
	movss	xmm0, DWORD PTR [edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	addss	xmm0, DWORD PTR _verticalPos$[ebp]
	addss	xmm0, DWORD PTR __real@bf000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _displayX$[ebp]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	addss	xmm0, DWORD PTR _horizontalPos$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 1708 : 	DWORD tempColor = display->Color();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+108]
	call	eax
	mov	DWORD PTR _tempColor$[ebp], eax

; 1709 : 	display->SetColor (GetMfdColor(MFD_WHITY_GRAY)); // "whity" gray

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 1710 : 
; 1711 : 	DrawEmitterSymbol( symbol, 0 ); // Draw the symbol in the box

	push	0
	mov	ecx, DWORD PTR _symbol$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawEmitterSymbol@RwrClass@@IAEXHH@Z	; RwrClass::DrawEmitterSymbol

; 1712 : 	DTSBList[i] = symbol; // Add the symbol to the list

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _symbol$[ebp]
	mov	DWORD PTR [eax+edx*4+124], ecx

; 1713 : 
; 1714 :     // Reset the display back
; 1715 : 	display->SetColor (tempColor);

	mov	edx, DWORD PTR _tempColor$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 1716 : 	display->AdjustOriginInViewport ( displayX - horizontalPos, +displayY - verticalPos - HTS_Y_OFFSET );

	mov	eax, DWORD PTR _displayY$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR _verticalPos$[ebp]
	subss	xmm0, DWORD PTR __real@bf000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _displayX$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR _horizontalPos$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport
$LN12@UpdateDTSB:

; 1717 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?UpdateDTSB@HarmTargetingPod@@IAEXHAAM0@Z ENDP		; HarmTargetingPod::UpdateDTSB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_tempColor$ = -8					; size = 4
_this$ = -4						; size = 4
?DrawDTSBBox@HarmTargetingPod@@IAEXXZ PROC		; HarmTargetingPod::DrawDTSBBox
; _this$ = ecx

; 1628 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1629 : 	if ( zoomFactor > 1.0f ) // No do in a zoom mode

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+152]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN1@DrawDTSBBo

; 1630 : 	{
; 1631 : 		return;

	jmp	$LN2@DrawDTSBBo
$LN1@DrawDTSBBo:

; 1632 : 	}
; 1633 : 
; 1634 : 	DWORD tempColor = display->Color();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+108]
	call	eax
	mov	DWORD PTR _tempColor$[ebp], eax

; 1635 : 
; 1636 : 	display->SetColor(GetMfdColor(MFD_BRIGHT_GREEN)); // Bright green

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 1637 : 	static const float	DTSBSide	= 0.65f;
; 1638 : 	static const float	DTSBTop		= 1.3f;
; 1639 : 	static const float	DTSBBottom	= 1.15f;
; 1640 : 	display->Line( -DTSBSide,   DTSBTop,  DTSBSide,  DTSBTop );

	push	ecx
	movss	xmm0, DWORD PTR ?DTSBTop@?4??DrawDTSBBox@HarmTargetingPod@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?DTSBSide@?4??DrawDTSBBox@HarmTargetingPod@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?DTSBTop@?4??DrawDTSBBox@HarmTargetingPod@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?DTSBSide@?4??DrawDTSBBox@HarmTargetingPod@@IAEXXZ@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1641 : 	display->Line( -DTSBSide,   DTSBTop,  -DTSBSide,  DTSBBottom );

	push	ecx
	movss	xmm0, DWORD PTR ?DTSBBottom@?4??DrawDTSBBox@HarmTargetingPod@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?DTSBSide@?4??DrawDTSBBox@HarmTargetingPod@@IAEXXZ@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?DTSBTop@?4??DrawDTSBBox@HarmTargetingPod@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?DTSBSide@?4??DrawDTSBBox@HarmTargetingPod@@IAEXXZ@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1642 : 	display->Line( -DTSBSide,   DTSBBottom,  DTSBSide,  DTSBBottom );

	push	ecx
	movss	xmm0, DWORD PTR ?DTSBBottom@?4??DrawDTSBBox@HarmTargetingPod@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?DTSBSide@?4??DrawDTSBBox@HarmTargetingPod@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?DTSBBottom@?4??DrawDTSBBox@HarmTargetingPod@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?DTSBSide@?4??DrawDTSBBox@HarmTargetingPod@@IAEXXZ@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1643 : 	display->Line( DTSBSide,   DTSBTop,  DTSBSide,  DTSBBottom );

	push	ecx
	movss	xmm0, DWORD PTR ?DTSBBottom@?4??DrawDTSBBox@HarmTargetingPod@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?DTSBSide@?4??DrawDTSBBox@HarmTargetingPod@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?DTSBTop@?4??DrawDTSBBox@HarmTargetingPod@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?DTSBSide@?4??DrawDTSBBox@HarmTargetingPod@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1644 : 
; 1645 : 	display->SetColor(tempColor);

	mov	ecx, DWORD PTR _tempColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax
$LN2@DrawDTSBBo:

; 1646 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawDTSBBox@HarmTargetingPod@@IAEXXZ ENDP		; HarmTargetingPod::DrawDTSBBox
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_curAngle$1 = -136					; size = 4
_scale$2 = -132						; size = 4
_footprintRatio$ = -128					; size = 4
tv525 = -124						; size = 4
tv548 = -120						; size = 4
tv571 = -116						; size = 4
_offsetY$ = -112					; size = 4
_mnRng$ = -108						; size = 4
_angleY$ = -104						; size = 4
tv584 = -100						; size = 4
_offsetX$ = -96						; size = 4
tv561 = -92						; size = 4
_angleX$ = -88						; size = 4
tv538 = -84						; size = 4
_draw$3 = -80						; size = 4
_latRng$ = -76						; size = 4
_scaleMaxRange$4 = -72					; size = 4
_stepX$ = -68						; size = 4
_stepY$ = -64						; size = 4
_scale$5 = -60						; size = 4
_cur2X$ = -56						; size = 4
_i$6 = -52						; size = 4
_i$7 = -48						; size = 4
_cur2Y$ = -44						; size = 4
_j$8 = -40						; size = 4
_mxRng$ = -36						; size = 4
_next2X$ = -32						; size = 4
_next2Y$ = -28						; size = 4
_footprintRad$ = -24					; size = 4
_nextX$ = -20						; size = 4
_curY$ = -16						; size = 4
_nextY$ = -12						; size = 4
_curX$ = -8						; size = 4
_this$ = -4						; size = 4
_theMissile$ = 8					; size = 4
?DrawWEZ@HarmTargetingPod@@IAEXPAVMissileClass@@@Z PROC	; HarmTargetingPod::DrawWEZ
; _this$ = ecx

; 715  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	mov	DWORD PTR _this$[ebp], ecx

; 716  : 	float curX, curY, nextX, nextY, angleX, angleY, offsetX, offsetY;
; 717  : 	float cur2X, cur2Y, next2X, next2Y, stepX, stepY;
; 718  : 	
; 719  : 	// If we don't have a missile, quit now
; 720  : 	if (!theMissile ) {

	cmp	DWORD PTR _theMissile$[ebp], 0
	jne	SHORT $LN13@DrawWEZ

; 721  : 		return;

	jmp	$LN14@DrawWEZ
$LN13@DrawWEZ:

; 722  : 	}
; 723  : 
; 724  : 	display->AdjustOriginInViewport (0.0f, HTS_Y_OFFSET);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 725  : 
; 726  : 	// This would be very nice, but would require correct data (and a missile)
; 727  : 	float mxRng  =  theMissile->GetRMax (-platform->ZPos(), platform->GetVt(),   0.0f,     0.0f, 0.0f) * FT_TO_NM;

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv525[ebp]
	movss	xmm0, DWORD PTR tv525[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _theMissile$[ebp]
	call	?GetRMax@MissileClass@@QAEMMMMMM@Z	; MissileClass::GetRMax
	fstp	DWORD PTR tv538[ebp]
	movss	xmm0, DWORD PTR tv538[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	movss	DWORD PTR _mxRng$[ebp], xmm0

; 728  : 	float mnRng  = -theMissile->GetRMax (-platform->ZPos(), platform->GetVt(), 180.0f*DTR, 0.0f, 180.0f*DTR) * FT_TO_NM;

	push	ecx
	movss	xmm0, DWORD PTR __real@40490fd9
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40490fd9
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv548[ebp]
	movss	xmm0, DWORD PTR tv548[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _theMissile$[ebp]
	call	?GetRMax@MissileClass@@QAEMMMMMM@Z	; MissileClass::GetRMax
	fstp	DWORD PTR tv561[ebp]
	movss	xmm0, DWORD PTR tv561[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@392c987a
	movss	DWORD PTR _mnRng$[ebp], xmm0

; 729  : 	float latRng =  theMissile->GetRMax (-platform->ZPos(), platform->GetVt(),  90.0f*DTR, 0.0f,  90.0f*DTR) * FT_TO_NM;

	push	ecx
	movss	xmm0, DWORD PTR __real@3fc90fd9
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3fc90fd9
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv571[ebp]
	movss	xmm0, DWORD PTR tv571[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _theMissile$[ebp]
	call	?GetRMax@MissileClass@@QAEMMMMMM@Z	; MissileClass::GetRMax
	fstp	DWORD PTR tv584[ebp]
	movss	xmm0, DWORD PTR tv584[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	movss	DWORD PTR _latRng$[ebp], xmm0

; 730  : 	float footprintRatio = 2.0f * latRng/(mxRng - mnRng);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _latRng$[ebp]
	movss	xmm1, DWORD PTR _mxRng$[ebp]
	subss	xmm1, DWORD PTR _mnRng$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _footprintRatio$[ebp], xmm0

; 731  : 
; 732  : 	// Shrink the displayed WEZ a little to represent a good launch zone instead of strictly Rmax
; 733  : 	//mnRng *= 0.8f;
; 734  : 
; 735  : 	// RV - I-Hawk - Make it a little bigger... it's too small
; 736  : 	mxRng *= 1.15f;

	movss	xmm0, DWORD PTR _mxRng$[ebp]
	mulss	xmm0, DWORD PTR __real@3f933333
	movss	DWORD PTR _mxRng$[ebp], xmm0

; 737  : 
; 738  : 	//	float footprintCtr =  (mxRng * ( 1.8f ))  / (2.0f * displayRange) ;
; 739  : 	float footprintRad = mxRng  / displayRange;

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+116]
	movss	xmm1, DWORD PTR _mxRng$[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _footprintRad$[ebp], xmm1

; 740  : 
; 741  : 	// RV - I-Hawk - White color
; 742  : 	display->SetColor( GetMfdColor(MFD_WHITY_GRAY) ); // MFD_WHITE

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 743  : 
; 744  : 	// RV - I-Hawk - Changing the way the WEZ is draw. No more circles or arcs but interpolated
; 745  : 	// curves of a circle, but with offsets at some point...
; 746  : 	// If the WEZ is too big for the current display scale, draw at MFD edges and use dashes
; 747  : 	if (footprintRad > 0.7f) 

	movss	xmm0, DWORD PTR _footprintRad$[ebp]
	comiss	xmm0, DWORD PTR __real@3f333333
	jbe	$LN12@DrawWEZ

; 748  : 	{
; 749  : 		footprintRad = 0.75f;

	movss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR _footprintRad$[ebp], xmm0

; 750  : 		display->SetColor( GetMfdColor(MFD_YELLOW) ); // MFD_WHITE

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 751  : 
; 752  : 		float scale = (float)(displayRange / 60);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+116]
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _scale$2[ebp], xmm0

; 753  : 
; 754  : 		curX = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _curX$[ebp], xmm0

; 755  : 		curY = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _curY$[ebp], xmm0

; 756  : 		nextX = 0.0625f;

	movss	xmm0, DWORD PTR __real@3d800000
	movss	DWORD PTR _nextX$[ebp], xmm0

; 757  : 		nextY = -0.0625f;

	movss	xmm0, DWORD PTR __real@bd800000
	movss	DWORD PTR _nextY$[ebp], xmm0

; 758  : 		display->Line ( curX, curY, nextX, nextY );

	push	ecx
	movss	xmm0, DWORD PTR _nextY$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _nextX$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _curY$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _curX$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 759  : 		display->Line ( curX, curY, -nextX, nextY );

	push	ecx
	movss	xmm0, DWORD PTR _nextY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _nextX$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _curY$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _curX$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 760  : 
; 761  : 		for ( int i = 0; i < 8; i++ )

	mov	DWORD PTR _i$7[ebp], 0
	jmp	SHORT $LN11@DrawWEZ
$LN10@DrawWEZ:
	mov	ecx, DWORD PTR _i$7[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$7[ebp], ecx
$LN11@DrawWEZ:
	cmp	DWORD PTR _i$7[ebp], 8
	jge	$LN9@DrawWEZ

; 762  : 		{
; 763  : 			// get some preset values, as this footprint is constant
; 764  : 			GetCurWezValue( i, curX, curY, nextX, nextY );  

	lea	edx, DWORD PTR _nextY$[ebp]
	push	edx
	lea	eax, DWORD PTR _nextX$[ebp]
	push	eax
	lea	ecx, DWORD PTR _curY$[ebp]
	push	ecx
	lea	edx, DWORD PTR _curX$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$7[ebp]
	push	eax
	call	?GetCurWezValue@@YAXHAAM000@Z		; GetCurWezValue
	add	esp, 20					; 00000014H

; 765  : 
; 766  : 			// Cutting the line into 4 pieces, to make it look dashed...
; 767  : 			stepX = (nextX - curX) / 4.0f;

	movss	xmm0, DWORD PTR _nextX$[ebp]
	subss	xmm0, DWORD PTR _curX$[ebp]
	divss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR _stepX$[ebp], xmm0

; 768  : 			stepY = (nextY - curY) / 4.0f;

	movss	xmm0, DWORD PTR _nextY$[ebp]
	subss	xmm0, DWORD PTR _curY$[ebp]
	divss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR _stepY$[ebp], xmm0

; 769  : 			cur2X = curX;

	movss	xmm0, DWORD PTR _curX$[ebp]
	movss	DWORD PTR _cur2X$[ebp], xmm0

; 770  : 			cur2Y = curY;

	movss	xmm0, DWORD PTR _curY$[ebp]
	movss	DWORD PTR _cur2Y$[ebp], xmm0

; 771  : 			next2X = cur2X + stepX;

	movss	xmm0, DWORD PTR _cur2X$[ebp]
	addss	xmm0, DWORD PTR _stepX$[ebp]
	movss	DWORD PTR _next2X$[ebp], xmm0

; 772  : 			next2Y = cur2Y + stepY;

	movss	xmm0, DWORD PTR _cur2Y$[ebp]
	addss	xmm0, DWORD PTR _stepY$[ebp]
	movss	DWORD PTR _next2Y$[ebp], xmm0

; 773  : 
; 774  : 			for ( int j = 0; j < 4; j++ )

	mov	DWORD PTR _j$8[ebp], 0
	jmp	SHORT $LN8@DrawWEZ
$LN7@DrawWEZ:
	mov	ecx, DWORD PTR _j$8[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$8[ebp], ecx
$LN8@DrawWEZ:
	cmp	DWORD PTR _j$8[ebp], 4
	jge	$LN6@DrawWEZ

; 775  : 			{
; 776  : 				int draw = j & 1;  

	mov	edx, DWORD PTR _j$8[ebp]
	and	edx, 1
	mov	DWORD PTR _draw$3[ebp], edx

; 777  : 
; 778  : 				if ( draw )

	je	$LN5@DrawWEZ

; 779  : 				{
; 780  : 					display->Line( cur2X, cur2Y, next2X, next2Y );

	push	ecx
	movss	xmm0, DWORD PTR _next2Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _next2X$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _cur2Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _cur2X$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 781  : 					display->Line( -cur2X, cur2Y, -next2X, next2Y );

	push	ecx
	movss	xmm0, DWORD PTR _next2Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _next2X$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _cur2Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _cur2X$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx
$LN5@DrawWEZ:

; 782  : 				}
; 783  : 
; 784  : 				cur2X = next2X;

	movss	xmm0, DWORD PTR _next2X$[ebp]
	movss	DWORD PTR _cur2X$[ebp], xmm0

; 785  : 				cur2Y = next2Y;

	movss	xmm0, DWORD PTR _next2Y$[ebp]
	movss	DWORD PTR _cur2Y$[ebp], xmm0

; 786  : 				next2X += stepX;

	movss	xmm0, DWORD PTR _next2X$[ebp]
	addss	xmm0, DWORD PTR _stepX$[ebp]
	movss	DWORD PTR _next2X$[ebp], xmm0

; 787  : 				next2Y += stepY;

	movss	xmm0, DWORD PTR _next2Y$[ebp]
	addss	xmm0, DWORD PTR _stepY$[ebp]
	movss	DWORD PTR _next2Y$[ebp], xmm0

; 788  : 			}

	jmp	$LN7@DrawWEZ
$LN6@DrawWEZ:

; 789  : 		}

	jmp	$LN10@DrawWEZ
$LN9@DrawWEZ:

; 790  : 	}
; 791  : 	else

	jmp	$LN1@DrawWEZ
$LN12@DrawWEZ:

; 792  : 	{
; 793  : 		//display->Circle (  0.0f, footprintCtr, /*footprintRatio*footprintRad,*/ footprintRad);
; 794  : 
; 795  : 		// Some scaling values... 
; 796  : 		float scaleMaxRange = mxRng / 25.5f; // Scale for missiles range compared to AGM-88 as a reference

	movss	xmm0, DWORD PTR _mxRng$[ebp]
	divss	xmm0, DWORD PTR __real@41cc0000
	movss	DWORD PTR _scaleMaxRange$4[ebp], xmm0

; 797  : 		float scale = (float)((float)displayRange / 60.0f); // Scale for display range compared to 60NM

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+116]
	divss	xmm0, DWORD PTR __real@42700000
	movss	DWORD PTR _scale$5[ebp], xmm0

; 798  : 
; 799  : 		curX = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _curX$[ebp], xmm0

; 800  : 		curY = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _curY$[ebp], xmm0

; 801  : 		nextX = (footprintRad / 8.0f);

	movss	xmm0, DWORD PTR _footprintRad$[ebp]
	divss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR _nextX$[ebp], xmm0

; 802  : 		nextY = -(footprintRad / 8.0f);

	movss	xmm0, DWORD PTR _footprintRad$[ebp]
	divss	xmm0, DWORD PTR __real@41000000
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _nextY$[ebp], xmm0

; 803  : 		display->Line ( curX, curY, nextX, nextY );

	push	ecx
	movss	xmm0, DWORD PTR _nextY$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _nextX$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _curY$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _curX$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 804  : 		display->Line ( curX, curY, -nextX, nextY );

	push	ecx
	movss	xmm0, DWORD PTR _nextY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _nextX$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _curY$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _curX$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 805  : 		curX = nextX;

	movss	xmm0, DWORD PTR _nextX$[ebp]
	movss	DWORD PTR _curX$[ebp], xmm0

; 806  : 		curY = nextY;

	movss	xmm0, DWORD PTR _nextY$[ebp]
	movss	DWORD PTR _curY$[ebp], xmm0

; 807  : 
; 808  : 		float curAngle = 275.0f * DTR;

	movss	xmm0, DWORD PTR __real@409996c6
	movss	DWORD PTR _curAngle$1[ebp], xmm0

; 809  : 
; 810  : 		for ( int i = 0; i < 8; i++ )

	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN3@DrawWEZ
$LN2@DrawWEZ:
	mov	ecx, DWORD PTR _i$6[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$6[ebp], ecx
$LN3@DrawWEZ:
	cmp	DWORD PTR _i$6[ebp], 8
	jge	$LN1@DrawWEZ

; 811  : 		{
; 812  : 			// Get preset trig values (already calculated by hand in such function), as the angles are always the same
; 813  : 			GetCurWezAngle( i, angleX, angleY, offsetX, offsetY );

	lea	edx, DWORD PTR _offsetY$[ebp]
	push	edx
	lea	eax, DWORD PTR _offsetX$[ebp]
	push	eax
	lea	ecx, DWORD PTR _angleY$[ebp]
	push	ecx
	lea	edx, DWORD PTR _angleX$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$6[ebp]
	push	eax
	call	?GetCurWezAngle@@YAXHAAM000@Z		; GetCurWezAngle
	add	esp, 20					; 00000014H

; 814  : 			nextX = footprintRad * angleX + offsetX / scale * scaleMaxRange ; 

	movss	xmm0, DWORD PTR _footprintRad$[ebp]
	mulss	xmm0, DWORD PTR _angleX$[ebp]
	movss	xmm1, DWORD PTR _offsetX$[ebp]
	divss	xmm1, DWORD PTR _scale$5[ebp]
	mulss	xmm1, DWORD PTR _scaleMaxRange$4[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _nextX$[ebp], xmm0

; 815  : 			nextY = scaleMaxRange * ( footprintRad * angleY + offsetY / scale - (HTS_Y_OFFSET / 1.25f / scale) );

	movss	xmm0, DWORD PTR _footprintRad$[ebp]
	mulss	xmm0, DWORD PTR _angleY$[ebp]
	movss	xmm1, DWORD PTR _offsetY$[ebp]
	divss	xmm1, DWORD PTR _scale$5[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@becccccd
	divss	xmm1, DWORD PTR _scale$5[ebp]
	subss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _scaleMaxRange$4[ebp]
	movss	DWORD PTR _nextY$[ebp], xmm0

; 816  : 
; 817  : 			display->Line ( curX, curY, nextX, nextY );

	push	ecx
	movss	xmm0, DWORD PTR _nextY$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _nextX$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _curY$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _curX$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 818  : 			display->Line ( -curX, curY, -nextX, nextY );

	push	ecx
	movss	xmm0, DWORD PTR _nextY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _nextX$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _curY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _curX$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 819  : 			curX = nextX;

	movss	xmm0, DWORD PTR _nextX$[ebp]
	movss	DWORD PTR _curX$[ebp], xmm0

; 820  : 			curY = nextY;

	movss	xmm0, DWORD PTR _nextY$[ebp]
	movss	DWORD PTR _curY$[ebp], xmm0

; 821  : 		}

	jmp	$LN2@DrawWEZ
$LN1@DrawWEZ:

; 822  : 	}
; 823  : 
; 824  : 	// Restore the default full intensity green color
; 825  : 	display->SetColor( 0xFF00FF00 );

	push	-16711936				; ff00ff00H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 826  : 	display->AdjustOriginInViewport (0.0f, -HTS_Y_OFFSET);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport
$LN14@DrawWEZ:

; 827  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?DrawWEZ@HarmTargetingPod@@IAEXPAVMissileClass@@@Z ENDP	; HarmTargetingPod::DrawWEZ
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_obj$ = -4						; size = 4
_choice$ = 8						; size = 4
?LockListElement@HarmTargetingPod@@IAEXPAVGroundListElement@@@Z PROC ; HarmTargetingPod::LockListElement
; _this$ = ecx

; 1492 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1493 : 	SimObjectType	*obj;
; 1494 : 
; 1495 : 	// If we have a candidate, look for it in the platform's target list
; 1496 : 	if (choice)

	cmp	DWORD PTR _choice$[ebp], 0
	je	SHORT $LN7@LockListEl

; 1497 : 	{
; 1498 : 		for (obj = platform->targetList; obj; obj = obj->next)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+660]
	mov	DWORD PTR _obj$[ebp], edx
	jmp	SHORT $LN5@LockListEl
$LN4@LockListEl:
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _obj$[ebp], ecx
$LN5@LockListEl:
	cmp	DWORD PTR _obj$[ebp], 0
	je	SHORT $LN3@LockListEl

; 1499 : 		{
; 1500 : 			if (obj->BaseData() == choice->BaseObject())

	mov	ecx, DWORD PTR _obj$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	esi, eax
	mov	ecx, DWORD PTR _choice$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	cmp	esi, eax
	jne	SHORT $LN2@LockListEl

; 1501 : 			{
; 1502 : 				// We found a match!
; 1503 : 				SetSensorTarget( obj );

	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax

; 1504 : 				break;

	jmp	SHORT $LN3@LockListEl
$LN2@LockListEl:

; 1505 : 			}
; 1506 : 		}

	jmp	SHORT $LN4@LockListEl
$LN3@LockListEl:

; 1507 : 
; 1508 : 		// If we didn't find it in the target list, force the issue anyway...
; 1509 : 		if (!obj)

	cmp	DWORD PTR _obj$[ebp], 0
	jne	SHORT $LN7@LockListEl

; 1510 : 		{
; 1511 : 			SetSensorTargetHack( choice->BaseObject() );

	mov	ecx, DWORD PTR _choice$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
$LN7@LockListEl:

; 1512 : 		}
; 1513 : 	}
; 1514 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?LockListElement@HarmTargetingPod@@IAEXPAVGroundListElement@@@Z ENDP ; HarmTargetingPod::LockListElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_FCC$ = -12						; size = 4
_this$ = -8						; size = 4
_tmpElement$ = -4					; size = 4
_entity$ = 8						; size = 4
?FindEmmitter@HarmTargetingPod@@IAEPAVGroundListElement@@PAVFalconEntity@@@Z PROC ; HarmTargetingPod::FindEmmitter
; _this$ = ecx

; 1421 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1422 : 	FireControlComputer* FCC = ((SimVehicleClass*)platform)->GetFCC();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax+460]
	call	edx
	mov	DWORD PTR _FCC$[ebp], eax

; 1423 : 	GroundListElement* tmpElement = FCC->GetFirstGroundElement();

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetFirstGroundElement@FireControlComputer@@QAEPAVGroundListElement@@XZ ; FireControlComputer::GetFirstGroundElement
	mov	DWORD PTR _tmpElement$[ebp], eax
$LN3@FindEmmitt:

; 1424 : 	
; 1425 : 	while (tmpElement)

	cmp	DWORD PTR _tmpElement$[ebp], 0
	je	SHORT $LN2@FindEmmitt

; 1426 : 	{
; 1427 : 		if (tmpElement->BaseObject() == entity) { break; }

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	cmp	eax, DWORD PTR _entity$[ebp]
	jne	SHORT $LN1@FindEmmitt
	jmp	SHORT $LN2@FindEmmitt
$LN1@FindEmmitt:

; 1428 : 
; 1429 : 		tmpElement = tmpElement->GetNext();

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?GetNext@GroundListElement@@QAEPAV1@XZ	; GroundListElement::GetNext
	mov	DWORD PTR _tmpElement$[ebp], eax

; 1430 : 	}

	jmp	SHORT $LN3@FindEmmitt
$LN2@FindEmmitt:

; 1431 : 	
; 1432 : 	return (tmpElement);

	mov	eax, DWORD PTR _tmpElement$[ebp]

; 1433 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?FindEmmitter@HarmTargetingPod@@IAEPAVGroundListElement@@PAVFalconEntity@@@Z ENDP ; HarmTargetingPod::FindEmmitter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ResetHadCursorPos@HarmTargetingPod@@QAEXXZ PROC	; HarmTargetingPod::ResetHadCursorPos
; _this$ = ecx

; 1908 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1909 : 	HadOrigCursorX = HadOrigCursorY = yawBackup = XPosBackup = YPosBackup = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+108], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+104], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+100], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+88], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+84], xmm0

; 1910 : 	HadOrigCursorX2 = HadOrigCursorY2 = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+96], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+92], xmm0

; 1911 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ResetHadCursorPos@HarmTargetingPod@@QAEXXZ ENDP	; HarmTargetingPod::ResetHadCursorPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SaveHadCursorPos@HarmTargetingPod@@QAEXXZ PROC		; HarmTargetingPod::SaveHadCursorPos
; _this$ = ecx

; 1889 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1890 : 	// We switched to EXP1 zoom mode, save yaw... if EXP2 no need as orientation of AC already saved from EXP1
; 1891 : 	if ( HadZoomMode == EXP1 ) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+180], 1
	jne	SHORT $LN2@SaveHadCur

; 1892 : 	{
; 1893 :         HadOrigCursorX = cursorX;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR [ecx+84], eax

; 1894 : 		HadOrigCursorY = cursorY;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	DWORD PTR [ecx+88], eax

; 1895 : 		yawBackup = platform->Yaw();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+100]

; 1896 : 		XPosBackup = platform->XPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+104]

; 1897 : 		YPosBackup = platform->YPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+108]
$LN2@SaveHadCur:

; 1898 : 	}
; 1899 : 
; 1900 : 	if ( HadZoomMode == EXP2 )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+180], 2
	jne	SHORT $LN1@SaveHadCur

; 1901 : 	{
; 1902 : 		HadOrigCursorX2 = cursorX;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR [edx+92], ecx

; 1903 : 		HadOrigCursorY2 = cursorY;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR [edx+96], ecx
$LN1@SaveHadCur:

; 1904 : 	}
; 1905 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SaveHadCursorPos@HarmTargetingPod@@QAEXXZ ENDP		; HarmTargetingPod::SaveHadCursorPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\harmpod.h
;	COMDAT ?GetFilterMode@HarmTargetingPod@@QAE?AW4HASFilterMode@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFilterMode@HarmTargetingPod@@QAE?AW4HASFilterMode@1@XZ PROC ; HarmTargetingPod::GetFilterMode, COMDAT
; _this$ = ecx

; 108  : 	HASFilterMode	GetFilterMode ( void ) { return filterMode; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+184]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFilterMode@HarmTargetingPod@@QAE?AW4HASFilterMode@1@XZ ENDP ; HarmTargetingPod::GetFilterMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?SetPOSTargetIndex@HarmTargetingPod@@QAEXH@Z PROC	; HarmTargetingPod::SetPOSTargetIndex
; _this$ = ecx

; 1784 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1785 : 	if ( index < 0 || index > 3 )

	cmp	DWORD PTR _index$[ebp], 0
	jl	SHORT $LN1@SetPOSTarg
	cmp	DWORD PTR _index$[ebp], 3
	jle	SHORT $LN2@SetPOSTarg
$LN1@SetPOSTarg:

; 1786 : 	{
; 1787 : 		POSTargetIndex = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+144], -1

; 1788 : 		return;

	jmp	SHORT $LN3@SetPOSTarg
$LN2@SetPOSTarg:

; 1789 : 	}
; 1790 : 
; 1791 : 	POSTargetIndex = index;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _index$[ebp]
	mov	DWORD PTR [ecx+144], edx
$LN3@SetPOSTarg:

; 1792 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetPOSTargetIndex@HarmTargetingPod@@QAEXH@Z ENDP	; HarmTargetingPod::SetPOSTargetIndex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_FCC$1 = -12						; size = 4
_choice$ = -8						; size = 4
_this$ = -4						; size = 4
?LockPOSTarget@HarmTargetingPod@@QAEXXZ PROC		; HarmTargetingPod::LockPOSTarget
; _this$ = ecx

; 97   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 	GroundListElement	*choice = FindPOSTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindPOSTarget@HarmTargetingPod@@QAEPAVGroundListElement@@XZ ; HarmTargetingPod::FindPOSTarget
	mov	DWORD PTR _choice$[ebp], eax

; 99   : 
; 100  : 	handedoff = false; // Reset the handed off flag

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+112], 0

; 101  : 	handoffRefTime = SimLibElapsedTime; // assign the current time to the Handoff timer

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [ecx+160], edx

; 102  : 
; 103  : 	// Will lock the sensor on the related entity (no change if NULL)
; 104  : 	if ( choice )

	cmp	DWORD PTR _choice$[ebp], 0
	je	SHORT $LN3@LockPOSTar

; 105  : 	{
; 106  :         LockListElement( choice );

	mov	eax, DWORD PTR _choice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LockListElement@HarmTargetingPod@@IAEXPAVGroundListElement@@@Z ; HarmTargetingPod::LockListElement

; 107  : 	}
; 108  : 
; 109  : 	else

	jmp	SHORT $LN4@LockPOSTar
$LN3@LockPOSTar:

; 110  : 	{
; 111  : 		FireControlComputer* FCC = ((SimVehicleClass*)platform) -> GetFCC();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR [edx+460]
	call	eax
	mov	DWORD PTR _FCC$1[ebp], eax

; 112  : 
; 113  : 		if ( FCC )

	cmp	DWORD PTR _FCC$1[ebp], 0
	je	SHORT $LN4@LockPOSTar

; 114  : 		{
; 115  : 			FCC->dropTrackCmd = TRUE;

	mov	ecx, DWORD PTR _FCC$1[ebp]
	mov	BYTE PTR [ecx+185], 1
$LN4@LockPOSTar:

; 116  : 		}
; 117  : 	}
; 118  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?LockPOSTarget@HarmTargetingPod@@QAEXXZ ENDP		; HarmTargetingPod::LockPOSTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FindPOSTarget@HarmTargetingPod@@QAEPAVGroundListElement@@XZ PROC ; HarmTargetingPod::FindPOSTarget
; _this$ = ecx

; 1225 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1226 : 	if ( POSTargetIndex >= 0 && POSTargetIndex <= 3  )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+144], 0
	jl	SHORT $LN2@FindPOSTar
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+144], 3
	jg	SHORT $LN2@FindPOSTar

; 1227 : 	{
; 1228 : 		return POSTargets[POSTargetIndex];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+144]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+188]
	jmp	SHORT $LN3@FindPOSTar

; 1229 : 	}
; 1230 : 
; 1231 : 	else

	jmp	SHORT $LN3@FindPOSTar
$LN2@FindPOSTar:

; 1232 : 	{
; 1233 : 		return NULL;

	xor	eax, eax
$LN3@FindPOSTar:

; 1234 : 	}
; 1235 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FindPOSTarget@HarmTargetingPod@@QAEPAVGroundListElement@@XZ ENDP ; HarmTargetingPod::FindPOSTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
tv343 = -144						; size = 4
_FCC$ = -140						; size = 4
tv425 = -136						; size = 4
tv452 = -132						; size = 4
tv454 = -128						; size = 4
_y2$ = -124						; size = 4
tv417 = -120						; size = 4
tv365 = -116						; size = 4
_ey$ = -112						; size = 4
tv348 = -108						; size = 4
_ex$ = -104						; size = 4
_x2$ = -100						; size = 4
tv404 = -96						; size = 4
tv370 = -92						; size = 4
tv397 = -88						; size = 4
tv359 = -84						; size = 4
_alpha$ = -80						; size = 4
tv354 = -76						; size = 4
_range$ = -72						; size = 4
tv448 = -68						; size = 4
_alt$ = -64						; size = 4
tv450 = -60						; size = 4
_trig$ = -56						; size = 8
_phi$ = -48						; size = 4
_choice$ = -44						; size = 4
_elevation$ = -40					; size = 4
_delta$ = -36						; size = 4
tv273 = -32						; size = 4
_bestSoFar$ = -28					; size = 4
_displayY$ = -24					; size = 4
_y$ = -20						; size = 4
_displayX$ = -16					; size = 4
_x$ = -12						; size = 4
_tmpElement$ = -8					; size = 4
_this$ = -4						; size = 4
?FindHASTargetUnderCursor@HarmTargetingPod@@QAEPAVGroundListElement@@XZ PROC ; HarmTargetingPod::FindHASTargetUnderCursor
; _this$ = ecx

; 1162 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	mov	DWORD PTR _this$[ebp], ecx

; 1163 : 	GroundListElement		*tmpElement;
; 1164 : 	GroundListElement		*choice		= NULL;

	mov	DWORD PTR _choice$[ebp], 0

; 1165 : 	float			bestSoFar	= 10.0f;

	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR _bestSoFar$[ebp], xmm0

; 1166 : 	float			x, y, x2, y2;
; 1167 : 	float			displayX, displayY;
; 1168 : 	float			alt, range, elevation, phi, alpha, ex, ey; 
; 1169 : 	mlTrig			trig;
; 1170 : 	float			delta;
; 1171 : 	
; 1172 : 	mlSinCos (&trig, platform->Yaw());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 1173 : 
; 1174 : 	FireControlComputer* FCC = ((SimVehicleClass*)platform)->GetFCC();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+460]
	call	eax
	mov	DWORD PTR _FCC$[ebp], eax

; 1175 : 	
; 1176 : 	// Walk our list looking for the thing in range and nearest the center of the cursors
; 1177 : 	for (tmpElement	= FCC->GetFirstGroundElement(); tmpElement; tmpElement = tmpElement->GetNext())

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetFirstGroundElement@FireControlComputer@@QAEPAVGroundListElement@@XZ ; FireControlComputer::GetFirstGroundElement
	mov	DWORD PTR _tmpElement$[ebp], eax
	jmp	SHORT $LN8@FindHASTar
$LN7@FindHASTar:
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?GetNext@GroundListElement@@QAEPAV1@XZ	; GroundListElement::GetNext
	mov	DWORD PTR _tmpElement$[ebp], eax
$LN8@FindHASTar:
	cmp	DWORD PTR _tmpElement$[ebp], 0
	je	$LN6@FindHASTar

; 1178 : 	{
; 1179 : 	    if (tmpElement->BaseObject() == NULL) continue;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	test	eax, eax
	jne	SHORT $LN5@FindHASTar
	jmp	SHORT $LN7@FindHASTar
$LN5@FindHASTar:

; 1180 : 
; 1181 : 		if ( !IsInPriorityList ( tmpElement->symbol ) )

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsInPriorityList@HarmTargetingPod@@IAE_NH@Z ; HarmTargetingPod::IsInPriorityList
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@FindHASTar

; 1182 : 		{
; 1183 : 			continue;

	jmp	SHORT $LN7@FindHASTar
$LN4@FindHASTar:

; 1184 : 		}
; 1185 : 
; 1186 : 		// Convert to normalized display space with heading up
; 1187 : 		y = (tmpElement->BaseObject()->XPos() - platform->XPos()) * FT_TO_NM / displayRange * HAS_DISPLAY_RADIUS;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv343[ebp]
	movss	xmm0, DWORD PTR tv343[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv448[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv348[ebp]
	movss	xmm0, DWORD PTR tv448[ebp]
	subss	xmm0, DWORD PTR tv348[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [edx+116]
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR _y$[ebp], xmm0

; 1188 : 		x = (tmpElement->BaseObject()->YPos() - platform->YPos()) * FT_TO_NM / displayRange * HAS_DISPLAY_RADIUS;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv354[ebp]
	movss	xmm0, DWORD PTR tv354[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv450[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv359[ebp]
	movss	xmm0, DWORD PTR tv450[ebp]
	subss	xmm0, DWORD PTR tv359[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx+116]
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR _x$[ebp], xmm0

; 1189 : 		alt = (-platform->ZPos() - (-tmpElement->BaseObject()->ZPos())) * FT_TO_NM / displayRange * HAS_DISPLAY_RADIUS; 

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv365[ebp]
	movss	xmm0, DWORD PTR tv365[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	movss	DWORD PTR tv452[ebp], xmm0
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv370[ebp]
	movss	xmm0, DWORD PTR tv370[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR tv452[ebp]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@392c987a
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+116]
	divss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@3f400000
	movss	DWORD PTR _alt$[ebp], xmm1

; 1190 : 		x2 = x * x;

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR _x2$[ebp], xmm0

; 1191 : 		y2 = y * y;

	movss	xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR _y2$[ebp], xmm0

; 1192 : 		range = sqrt( x2 + y2 );

	movss	xmm0, DWORD PTR _x2$[ebp]
	addss	xmm0, DWORD PTR _y2$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _range$[ebp]

; 1193 : 		alpha = atan ( alt / range );

	movss	xmm0, DWORD PTR _alt$[ebp]
	divss	xmm0, DWORD PTR _range$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	fstp	DWORD PTR _alpha$[ebp]

; 1194 : 		elevation = (1.0f - (alpha / (PI/2.0f))) * HAS_DISPLAY_RADIUS;

	movss	xmm0, DWORD PTR _alpha$[ebp]
	divss	xmm0, DWORD PTR __real@3fc90fdb
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@3f400000
	movss	DWORD PTR _elevation$[ebp], xmm1

; 1195 : 
; 1196 : 		displayX = trig.cos * x - trig.sin * y;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _displayX$[ebp], xmm0

; 1197 : 		displayY = trig.sin * x + trig.cos * y;

	movss	xmm0, DWORD PTR _trig$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp+4]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _displayY$[ebp], xmm0

; 1198 :         
; 1199 : 		phi = atan ( displayX / displayY );

	movss	xmm0, DWORD PTR _displayX$[ebp]
	divss	xmm0, DWORD PTR _displayY$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	fstp	DWORD PTR _phi$[ebp]

; 1200 : 		ex = elevation * sin(phi);

	push	ecx
	movss	xmm0, DWORD PTR _phi$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv397[ebp]
	movss	xmm0, DWORD PTR tv397[ebp]
	mulss	xmm0, DWORD PTR _elevation$[ebp]
	movss	DWORD PTR _ex$[ebp], xmm0

; 1201 : 		ey = elevation * cos(phi);

	push	ecx
	movss	xmm0, DWORD PTR _phi$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv404[ebp]
	movss	xmm0, DWORD PTR tv404[ebp]
	mulss	xmm0, DWORD PTR _elevation$[ebp]
	movss	DWORD PTR _ey$[ebp], xmm0

; 1202 : 		displayX = ex * zoomFactor;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _ex$[ebp]
	mulss	xmm0, DWORD PTR [ecx+152]
	movss	DWORD PTR _displayX$[ebp], xmm0

; 1203 : 		displayY = ey * zoomFactor; 

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _ey$[ebp]
	mulss	xmm0, DWORD PTR [edx+152]
	movss	DWORD PTR _displayY$[ebp], xmm0

; 1204 : 		
; 1205 : 		// See if this is the closest to the cursor point so far
; 1206 : 		delta = (float)max( fabs(displayX - cursorX), fabs(displayY - cursorY) );

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _displayX$[ebp]
	subss	xmm0, DWORD PTR [eax+76]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv417[ebp]
	movss	xmm0, DWORD PTR tv417[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _displayY$[ebp]
	subss	xmm1, DWORD PTR [ecx+80]
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv454[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv425[ebp]
	movss	xmm0, DWORD PTR tv454[ebp]
	comiss	xmm0, DWORD PTR tv425[ebp]
	jbe	SHORT $LN11@FindHASTar
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _displayX$[ebp]
	subss	xmm0, DWORD PTR [edx+76]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv273[ebp]
	jmp	SHORT $LN12@FindHASTar
$LN11@FindHASTar:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _displayY$[ebp]
	subss	xmm0, DWORD PTR [eax+80]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv273[ebp]
$LN12@FindHASTar:
	movss	xmm0, DWORD PTR tv273[ebp]
	movss	DWORD PTR _delta$[ebp], xmm0

; 1207 : 		if (delta < bestSoFar) {

	movss	xmm0, DWORD PTR _bestSoFar$[ebp]
	comiss	xmm0, DWORD PTR _delta$[ebp]
	jbe	SHORT $LN3@FindHASTar

; 1208 : 			bestSoFar = delta;

	movss	xmm0, DWORD PTR _delta$[ebp]
	movss	DWORD PTR _bestSoFar$[ebp], xmm0

; 1209 : 			choice = tmpElement;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	mov	DWORD PTR _choice$[ebp], ecx
$LN3@FindHASTar:

; 1210 : 		}
; 1211 : 	}

	jmp	$LN7@FindHASTar
$LN6@FindHASTar:

; 1212 : 	
; 1213 : 	// See if this is inside the cursor region
; 1214 : 	if ( bestSoFar < (CURSOR_SIZE * zoomFactor) )

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	mulss	xmm0, DWORD PTR [edx+152]
	comiss	xmm0, DWORD PTR _bestSoFar$[ebp]
	jbe	SHORT $LN2@FindHASTar

; 1215 : 	{
; 1216 : 		return choice;

	mov	eax, DWORD PTR _choice$[ebp]
	jmp	SHORT $LN1@FindHASTar

; 1217 : 	}
; 1218 : 	else

	jmp	SHORT $LN1@FindHASTar
$LN2@FindHASTar:

; 1219 : 	{
; 1220 : 		return NULL;

	xor	eax, eax
$LN1@FindHASTar:

; 1221 : 	}
; 1222 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FindHASTargetUnderCursor@HarmTargetingPod@@QAEPAVGroundListElement@@XZ ENDP ; HarmTargetingPod::FindHASTargetUnderCursor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_trig$ = -116						; size = 8
tv417 = -108						; size = 4
tv443 = -104						; size = 4
tv409 = -100						; size = 4
_EXP2OffsetX$ = -96					; size = 4
_EXP1OffsetY$ = -92					; size = 4
_EXP1OffsetX$ = -88					; size = 4
tv372 = -84						; size = 4
tv365 = -80						; size = 4
tv355 = -76						; size = 4
tv441 = -72						; size = 4
tv350 = -68						; size = 4
tv344 = -64						; size = 4
tv439 = -60						; size = 4
tv339 = -56						; size = 4
_FCC$ = -52						; size = 4
_choice$ = -48						; size = 4
_delta$ = -44						; size = 4
tv297 = -40						; size = 4
tv149 = -36						; size = 4
_bestSoFar$ = -32					; size = 4
_y$ = -28						; size = 4
_x$ = -24						; size = 4
_displayX$ = -20					; size = 4
_EXP2OffsetY$ = -16					; size = 4
_displayY$ = -12					; size = 4
_tmpElement$ = -8					; size = 4
_this$ = -4						; size = 4
?FindTargetUnderCursor@HarmTargetingPod@@QAEPAVGroundListElement@@XZ PROC ; HarmTargetingPod::FindTargetUnderCursor
; _this$ = ecx

; 1054 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	mov	DWORD PTR _this$[ebp], ecx

; 1055 : 	GroundListElement		*tmpElement;
; 1056 : 	GroundListElement		*choice		= NULL;

	mov	DWORD PTR _choice$[ebp], 0

; 1057 : 	float			bestSoFar	= 10.0f;

	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR _bestSoFar$[ebp], xmm0

; 1058 : 	float			x, y;
; 1059 : 	float			displayX, displayY;
; 1060 : 	mlTrig			trig;
; 1061 : 	float			delta;
; 1062 : 	float			EXP1OffsetX, EXP1OffsetY, EXP2OffsetX, EXP2OffsetY;
; 1063 : 
; 1064 : 	if ( HadZoomMode == NORM )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+180], 0
	jne	SHORT $LN19@FindTarget

; 1065 : 	{
; 1066 :         mlSinCos (&trig, platform->Yaw());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _trig$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8
	jmp	SHORT $LN17@FindTarget
$LN19@FindTarget:

; 1067 : 	}
; 1068 : 
; 1069 : 	else if ( HadZoomMode == EXP1 || HadZoomMode == EXP2 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+180], 1
	je	SHORT $LN16@FindTarget
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+180], 2
	jne	SHORT $LN17@FindTarget
$LN16@FindTarget:

; 1070 : 	{
; 1071 : 		mlSinCos (&trig, yawBackup);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+100]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8
$LN17@FindTarget:

; 1072 : 	}
; 1073 : 
; 1074 : 	FireControlComputer* FCC = ((SimVehicleClass*)platform)->GetFCC();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR [edx+460]
	call	eax
	mov	DWORD PTR _FCC$[ebp], eax

; 1075 : 	
; 1076 : 	// Walk our list looking for the thing in range and nearest the center of the cursors
; 1077 : 	for (tmpElement	= FCC->GetFirstGroundElement(); tmpElement; tmpElement = tmpElement->GetNext())

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetFirstGroundElement@FireControlComputer@@QAEPAVGroundListElement@@XZ ; FireControlComputer::GetFirstGroundElement
	mov	DWORD PTR _tmpElement$[ebp], eax
	jmp	SHORT $LN15@FindTarget
$LN14@FindTarget:
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?GetNext@GroundListElement@@QAEPAV1@XZ	; GroundListElement::GetNext
	mov	DWORD PTR _tmpElement$[ebp], eax
$LN15@FindTarget:
	cmp	DWORD PTR _tmpElement$[ebp], 0
	je	$LN13@FindTarget

; 1078 : 	{
; 1079 : 	    if (tmpElement->BaseObject() == NULL) continue;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	test	eax, eax
	jne	SHORT $LN12@FindTarget
	jmp	SHORT $LN14@FindTarget
$LN12@FindTarget:

; 1080 : 
; 1081 : 		if ( !IsInPriorityList ( tmpElement->symbol ) )

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsInPriorityList@HarmTargetingPod@@IAE_NH@Z ; HarmTargetingPod::IsInPriorityList
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN11@FindTarget

; 1082 : 		{
; 1083 : 			continue;

	jmp	SHORT $LN14@FindTarget
$LN11@FindTarget:

; 1084 : 		}
; 1085 : 
; 1086 : 		switch ( HadZoomMode )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+180]
	mov	DWORD PTR tv149[ebp], edx
	cmp	DWORD PTR tv149[ebp], 0
	jle	SHORT $LN8@FindTarget
	cmp	DWORD PTR tv149[ebp], 2
	jle	$LN7@FindTarget
$LN8@FindTarget:

; 1087 : 		{
; 1088 : 		case NORM:
; 1089 : 		default:
; 1090 : 			// Convert to normalized display space with heading up
; 1091 : 			y = (tmpElement->BaseObject()->XPos() - platform->XPos()) * FT_TO_NM / displayRange * HTS_DISPLAY_RADIUS;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv339[ebp]
	movss	xmm0, DWORD PTR tv339[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv439[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv344[ebp]
	movss	xmm0, DWORD PTR tv439[ebp]
	subss	xmm0, DWORD PTR tv344[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx+116]
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3fb33333
	movss	DWORD PTR _y$[ebp], xmm0

; 1092 : 			x = (tmpElement->BaseObject()->YPos() - platform->YPos()) * FT_TO_NM / displayRange * HTS_DISPLAY_RADIUS;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv350[ebp]
	movss	xmm0, DWORD PTR tv350[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv441[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv355[ebp]
	movss	xmm0, DWORD PTR tv441[ebp]
	subss	xmm0, DWORD PTR tv355[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [eax+116]
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3fb33333
	movss	DWORD PTR _x$[ebp], xmm0

; 1093 : 			displayX = trig.cos * x - trig.sin * y;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _displayX$[ebp], xmm0

; 1094 : 			displayY = trig.sin * x + trig.cos * y;

	movss	xmm0, DWORD PTR _trig$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp+4]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _displayY$[ebp], xmm0

; 1095 : 			break;

	jmp	$LN9@FindTarget
$LN7@FindTarget:

; 1096 : 
; 1097 : 		// RV - I-Hawk - if in zoom modes, do the right offsets
; 1098 : 		case EXP1:
; 1099 : 		case EXP2:
; 1100 : 			// Compute the world space oriented, display space scaled, obacked up ownship relative position of the emitter
; 1101 : 			y = (tmpElement->BaseObject()->XPos() - XPosBackup) * FT_TO_NM / displayRange * HTS_DISPLAY_RADIUS;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv365[ebp]
	movss	xmm0, DWORD PTR tv365[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+104]
	mulss	xmm0, DWORD PTR __real@392c987a
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [edx+116]
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3fb33333
	movss	DWORD PTR _y$[ebp], xmm0

; 1102 : 			x = (tmpElement->BaseObject()->YPos() - YPosBackup) * FT_TO_NM / displayRange * HTS_DISPLAY_RADIUS;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv372[ebp]
	movss	xmm0, DWORD PTR tv372[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+108]
	mulss	xmm0, DWORD PTR __real@392c987a
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx+116]
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3fb33333
	movss	DWORD PTR _x$[ebp], xmm0

; 1103 : 
; 1104 : 			// Rotate it into heading up space and translate it down to deal with our vertical offset
; 1105 : 			displayX = trig.cos * x - trig.sin * y;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _displayX$[ebp], xmm0

; 1106 : 			displayY = trig.sin * x + trig.cos * y;

	movss	xmm0, DWORD PTR _trig$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp+4]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _displayY$[ebp], xmm0

; 1107 : 		
; 1108 : 			// Deal with the EXP1 offset
; 1109 : 			EXP1OffsetX = 2.0f * HadOrigCursorX;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+84]
	movss	DWORD PTR _EXP1OffsetX$[ebp], xmm0

; 1110 : 			EXP1OffsetY = 2.0f * HadOrigCursorY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+88]
	movss	DWORD PTR _EXP1OffsetY$[ebp], xmm0

; 1111 : 			
; 1112 : 			displayX -= EXP1OffsetX;

	movss	xmm0, DWORD PTR _displayX$[ebp]
	subss	xmm0, DWORD PTR _EXP1OffsetX$[ebp]
	movss	DWORD PTR _displayX$[ebp], xmm0

; 1113 : 			displayY -= EXP1OffsetY;

	movss	xmm0, DWORD PTR _displayY$[ebp]
	subss	xmm0, DWORD PTR _EXP1OffsetY$[ebp]
	movss	DWORD PTR _displayY$[ebp], xmm0

; 1114 : 
; 1115 : 			displayY -= HTS_Y_OFFSET;

	movss	xmm0, DWORD PTR _displayY$[ebp]
	subss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR _displayY$[ebp], xmm0

; 1116 : 
; 1117 : 			// Here also add the EXP2 offset
; 1118 : 			if ( HadZoomMode == EXP2 )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+180], 2
	jne	$LN6@FindTarget

; 1119 : 			{
; 1120 : 				EXP2OffsetX = 2.0f * HadOrigCursorX + 2.0f * HadOrigCursorX2;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+84]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [eax+92]
	addss	xmm0, xmm1
	movss	DWORD PTR _EXP2OffsetX$[ebp], xmm0

; 1121 : 				EXP2OffsetY = 2.0f * HadOrigCursorY + 2.0f * HadOrigCursorY2;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx+88]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [edx+96]
	addss	xmm0, xmm1
	movss	DWORD PTR _EXP2OffsetY$[ebp], xmm0

; 1122 : 
; 1123 : 				EXP2OffsetY += 2.0f * HTS_Y_OFFSET;

	movss	xmm0, DWORD PTR _EXP2OffsetY$[ebp]
	addss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _EXP2OffsetY$[ebp], xmm0

; 1124 : 
; 1125 : 				if ( displayRange < 10 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+116], 10			; 0000000aH
	jge	SHORT $LN4@FindTarget

; 1126 : 				{
; 1127 : 					EXP2OffsetY -= HTS_Y_OFFSET / 2.0f;

	movss	xmm0, DWORD PTR _EXP2OffsetY$[ebp]
	subss	xmm0, DWORD PTR __real@be800000
	movss	DWORD PTR _EXP2OffsetY$[ebp], xmm0

; 1128 : 
; 1129 : 					if ( displayRange < 5 )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+116], 5
	jge	SHORT $LN4@FindTarget

; 1130 : 					{
; 1131 : 						EXP2OffsetY -= HTS_Y_OFFSET / 2.0f;

	movss	xmm0, DWORD PTR _EXP2OffsetY$[ebp]
	subss	xmm0, DWORD PTR __real@be800000
	movss	DWORD PTR _EXP2OffsetY$[ebp], xmm0
$LN4@FindTarget:

; 1132 : 					}
; 1133 : 				}
; 1134 : 
; 1135 : 				displayX -= EXP2OffsetX;

	movss	xmm0, DWORD PTR _displayX$[ebp]
	subss	xmm0, DWORD PTR _EXP2OffsetX$[ebp]
	movss	DWORD PTR _displayX$[ebp], xmm0

; 1136 : 				displayY -= EXP2OffsetY;

	movss	xmm0, DWORD PTR _displayY$[ebp]
	subss	xmm0, DWORD PTR _EXP2OffsetY$[ebp]
	movss	DWORD PTR _displayY$[ebp], xmm0
$LN6@FindTarget:
$LN9@FindTarget:

; 1137 : 			}
; 1138 : 
; 1139 :             break;
; 1140 : 		}
; 1141 : 		
; 1142 : 		// See if this is the closest to the cursor point so far
; 1143 : 		delta = (float)max( fabs(displayX - cursorX), fabs(displayY - cursorY) );

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _displayX$[ebp]
	subss	xmm0, DWORD PTR [edx+76]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv409[ebp]
	movss	xmm0, DWORD PTR tv409[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _displayY$[ebp]
	subss	xmm1, DWORD PTR [eax+80]
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv443[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv417[ebp]
	movss	xmm0, DWORD PTR tv443[ebp]
	comiss	xmm0, DWORD PTR tv417[ebp]
	jbe	SHORT $LN22@FindTarget
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _displayX$[ebp]
	subss	xmm0, DWORD PTR [ecx+76]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv297[ebp]
	jmp	SHORT $LN23@FindTarget
$LN22@FindTarget:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _displayY$[ebp]
	subss	xmm0, DWORD PTR [edx+80]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv297[ebp]
$LN23@FindTarget:
	movss	xmm0, DWORD PTR tv297[ebp]
	movss	DWORD PTR _delta$[ebp], xmm0

; 1144 : 		if (delta < bestSoFar) {

	movss	xmm0, DWORD PTR _bestSoFar$[ebp]
	comiss	xmm0, DWORD PTR _delta$[ebp]
	jbe	SHORT $LN3@FindTarget

; 1145 : 			bestSoFar = delta;

	movss	xmm0, DWORD PTR _delta$[ebp]
	movss	DWORD PTR _bestSoFar$[ebp], xmm0

; 1146 : 			choice = tmpElement;

	mov	eax, DWORD PTR _tmpElement$[ebp]
	mov	DWORD PTR _choice$[ebp], eax
$LN3@FindTarget:

; 1147 : 		}
; 1148 : 	}

	jmp	$LN14@FindTarget
$LN13@FindTarget:

; 1149 : 	
; 1150 : 	// See if this is inside the cursor region
; 1151 : 	if ( bestSoFar < (CURSOR_SIZE) )

	movss	xmm0, DWORD PTR _CURSOR_SIZE
	comiss	xmm0, DWORD PTR _bestSoFar$[ebp]
	jbe	SHORT $LN2@FindTarget

; 1152 : 	{
; 1153 : 		return choice;

	mov	eax, DWORD PTR _choice$[ebp]
	jmp	SHORT $LN1@FindTarget

; 1154 : 	}
; 1155 : 	else

	jmp	SHORT $LN1@FindTarget
$LN2@FindTarget:

; 1156 : 	{
; 1157 : 		return NULL;

	xor	eax, eax
$LN1@FindTarget:

; 1158 : 	}
; 1159 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FindTargetUnderCursor@HarmTargetingPod@@QAEPAVGroundListElement@@XZ ENDP ; HarmTargetingPod::FindTargetUnderCursor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
$T1 = -24						; size = 8
_tgtId$ = -16						; size = 8
_this$ = -8						; size = 4
_choice$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?FindIDUnderCursor@HarmTargetingPod@@QAE?AVVU_ID@@XZ PROC ; HarmTargetingPod::FindIDUnderCursor
; _this$ = ecx

; 1041 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1042 : 	GroundListElement	*choice = FindTargetUnderCursor();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindTargetUnderCursor@HarmTargetingPod@@QAEPAVGroundListElement@@XZ ; HarmTargetingPod::FindTargetUnderCursor
	mov	DWORD PTR _choice$[ebp], eax

; 1043 : 	VU_ID tgtId = FalconNullId;

	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR _tgtId$[ebp], eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR _tgtId$[ebp+4], ecx

; 1044 : 
; 1045 :     if (choice && choice->BaseObject())

	cmp	DWORD PTR _choice$[ebp], 0
	je	SHORT $LN1@FindIDUnde
	mov	ecx, DWORD PTR _choice$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	test	eax, eax
	je	SHORT $LN1@FindIDUnde

; 1046 : 	{
; 1047 : 		tgtId = choice->BaseObject()->Id();

	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _choice$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _tgtId$[ebp], ecx
	mov	DWORD PTR _tgtId$[ebp+4], edx
$LN1@FindIDUnde:

; 1048 : 	}
; 1049 : 
; 1050 :    return tgtId;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _tgtId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _tgtId$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1051 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?FindIDUnderCursor@HarmTargetingPod@@QAE?AVVU_ID@@XZ ENDP ; HarmTargetingPod::FindIDUnderCursor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
$T2 = -36						; size = 4
tv141 = -32						; size = 4
$T3 = -28						; size = 4
_FCC$ = -24						; size = 4
_this$ = -20						; size = 4
_tmpElement$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_newTarget$ = 8						; size = 4
?SetDesiredTarget@HarmTargetingPod@@UAEXPAVSimObjectType@@@Z PROC ; HarmTargetingPod::SetDesiredTarget
; _this$ = ecx

; 330  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetDesiredTarget@HarmTargetingPod@@UAEXPAVSimObjectType@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 331  : 	FireControlComputer* FCC = ((SimVehicleClass*)platform) -> GetFCC();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax+460]
	call	edx
	mov	DWORD PTR _FCC$[ebp], eax

; 332  : 	GroundListElement* tmpElement = FCC->GetFirstGroundElement();

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetFirstGroundElement@FireControlComputer@@QAEPAVGroundListElement@@XZ ; FireControlComputer::GetFirstGroundElement
	mov	DWORD PTR _tmpElement$[ebp], eax
$LN4@SetDesired:

; 333  : 	
; 334  : 	// Before we tell the sensor about the target, make sure we see it
; 335  : 	while (tmpElement)

	cmp	DWORD PTR _tmpElement$[ebp], 0
	je	SHORT $LN3@SetDesired

; 336  : 	{
; 337  : 		if (tmpElement->BaseObject() == newTarget->BaseData())

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	esi, eax
	mov	ecx, DWORD PTR _newTarget$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	esi, eax
	jne	SHORT $LN2@SetDesired

; 338  : 		{
; 339  : 			// Okay, we found it, so take the lock
; 340  : 			SetSensorTarget( newTarget );

	mov	eax, DWORD PTR _newTarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax

; 341  : 			break;

	jmp	SHORT $LN3@SetDesired
$LN2@SetDesired:

; 342  : 		}
; 343  : 		tmpElement = tmpElement->GetNext();

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?GetNext@GroundListElement@@QAEPAV1@XZ	; GroundListElement::GetNext
	mov	DWORD PTR _tmpElement$[ebp], eax

; 344  : 	}

	jmp	SHORT $LN4@SetDesired
$LN3@SetDesired:

; 345  : 
; 346  :    // NOTE: when called from the AI ground attack routine this will create the element if not found !
; 347  :    if (!tmpElement)

	cmp	DWORD PTR _tmpElement$[ebp], 0
	jne	SHORT $LN5@SetDesired

; 348  :    {
; 349  : 		tmpElement = new GroundListElement( newTarget->BaseData() );

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN7@SetDesired
	mov	ecx, DWORD PTR _newTarget$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0GroundListElement@@QAE@PAVFalconEntity@@@Z ; GroundListElement::GroundListElement
	mov	DWORD PTR tv141[ebp], eax
	jmp	SHORT $LN8@SetDesired
$LN7@SetDesired:
	mov	DWORD PTR tv141[ebp], 0
$LN8@SetDesired:
	mov	ecx, DWORD PTR tv141[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _tmpElement$[ebp], edx

; 350  : 		tmpElement->next = FCC->GetFirstGroundElement();

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetFirstGroundElement@FireControlComputer@@QAEPAVGroundListElement@@XZ ; FireControlComputer::GetFirstGroundElement
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	mov	DWORD PTR [ecx], eax

; 351  : 		FCC->grndlist = tmpElement;

	mov	edx, DWORD PTR _FCC$[ebp]
	mov	eax, DWORD PTR _tmpElement$[ebp]
	mov	DWORD PTR [edx+412], eax

; 352  : 		SetSensorTarget( newTarget );

	mov	ecx, DWORD PTR _newTarget$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+64]
	call	edx
$LN5@SetDesired:

; 353  :    }
; 354  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetDesiredTarget@HarmTargetingPod@@UAEXPAVSimObjectType@@@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SetDesiredTarget@HarmTargetingPod@@UAEXPAVSimObjectType@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetDesiredTarget@HarmTargetingPod@@UAEXPAVSimObjectType@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetDesiredTarget@HarmTargetingPod@@UAEXPAVSimObjectType@@@Z ENDP ; HarmTargetingPod::SetDesiredTarget
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_trig$ = -104						; size = 8
tv338 = -96						; size = 4
tv372 = -92						; size = 4
tv333 = -88						; size = 4
tv328 = -84						; size = 4
tv370 = -80						; size = 4
tv323 = -76						; size = 4
_FCC$ = -72						; size = 4
tv299 = -68						; size = 4
tv368 = -64						; size = 4
tv294 = -60						; size = 4
tv289 = -56						; size = 4
tv366 = -52						; size = 4
tv284 = -48						; size = 4
_choice$ = -44						; size = 4
_bestSoFar$ = -40					; size = 4
_currentRange$ = -36					; size = 4
_range$ = -32						; size = 4
_displayX$ = -28					; size = 4
_currentElement$ = -24					; size = 4
_displayY$ = -20					; size = 4
_dy$ = -16						; size = 4
_dx$ = -12						; size = 4
_tmpElement$ = -8					; size = 4
_this$ = -4						; size = 4
?PrevTarget@HarmTargetingPod@@QAEXXZ PROC		; HarmTargetingPod::PrevTarget
; _this$ = ecx

; 255  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	mov	DWORD PTR _this$[ebp], ecx

; 256  : 	GroundListElement	*tmpElement;
; 257  : 	GroundListElement	*choice		= NULL;

	mov	DWORD PTR _choice$[ebp], 0

; 258  : 	float			bestSoFar	= -1.0f;

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _bestSoFar$[ebp], xmm0

; 259  : 	float			dx, dy;
; 260  : 	float			displayX, displayY;
; 261  : 	mlTrig			trig;
; 262  : 	float			range;
; 263  : 	float			currentRange;
; 264  : 	GroundListElement	*currentElement;
; 265  : 
; 266  : 	// Get data on our current target (if any)
; 267  : 	if (lockedTarget) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	$LN10@PrevTarget

; 268  : 		currentElement = FindEmmitter( lockedTarget->BaseData() );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindEmmitter@HarmTargetingPod@@IAEPAVGroundListElement@@PAVFalconEntity@@@Z ; HarmTargetingPod::FindEmmitter
	mov	DWORD PTR _currentElement$[ebp], eax

; 269  : 		dx = currentElement->BaseObject()->XPos() - platform->XPos();

	mov	ecx, DWORD PTR _currentElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv284[ebp]
	movss	xmm0, DWORD PTR tv284[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv366[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv289[ebp]
	movss	xmm0, DWORD PTR tv366[ebp]
	subss	xmm0, DWORD PTR tv289[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 270  : 		dy = currentElement->BaseObject()->YPos() - platform->YPos();

	mov	ecx, DWORD PTR _currentElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv294[ebp]
	movss	xmm0, DWORD PTR tv294[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv368[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv299[ebp]
	movss	xmm0, DWORD PTR tv368[ebp]
	subss	xmm0, DWORD PTR tv299[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 271  : 		currentRange = (float)sqrt( dx*dx + dy*dy );

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _currentRange$[ebp]

; 272  : 	}
; 273  : 	else 

	jmp	SHORT $LN9@PrevTarget
$LN10@PrevTarget:

; 274  : 	{
; 275  : 		currentElement = NULL;

	mov	DWORD PTR _currentElement$[ebp], 0

; 276  : 		currentRange = 1e6f;

	movss	xmm0, DWORD PTR __real@49742400
	movss	DWORD PTR _currentRange$[ebp], xmm0
$LN9@PrevTarget:

; 277  : 	}
; 278  : 
; 279  : 	// Set up the trig functions of our current heading
; 280  : 	mlSinCos (&trig, platform->Yaw());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _trig$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 281  : 
; 282  : 	FireControlComputer* FCC = ((SimVehicleClass*)platform) -> GetFCC();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax+460]
	call	edx
	mov	DWORD PTR _FCC$[ebp], eax

; 283  : 
; 284  : 	// Walk our list looking for the farthest thing in range but nearer than our current target
; 285  : 	for (tmpElement	= FCC->GetFirstGroundElement(); tmpElement; tmpElement = tmpElement->GetNext())

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetFirstGroundElement@FireControlComputer@@QAEPAVGroundListElement@@XZ ; FireControlComputer::GetFirstGroundElement
	mov	DWORD PTR _tmpElement$[ebp], eax
	jmp	SHORT $LN8@PrevTarget
$LN7@PrevTarget:
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?GetNext@GroundListElement@@QAEPAV1@XZ	; GroundListElement::GetNext
	mov	DWORD PTR _tmpElement$[ebp], eax
$LN8@PrevTarget:
	cmp	DWORD PTR _tmpElement$[ebp], 0
	je	$LN6@PrevTarget

; 286  : 	{
; 287  : 	    if (tmpElement -> BaseObject() == NULL) continue;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	test	eax, eax
	jne	SHORT $LN5@PrevTarget
	jmp	SHORT $LN7@PrevTarget
$LN5@PrevTarget:

; 288  : 		// Figure the relative geometry we need
; 289  : 		dx = tmpElement->BaseObject()->XPos() - platform->XPos();

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv323[ebp]
	movss	xmm0, DWORD PTR tv323[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv370[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv328[ebp]
	movss	xmm0, DWORD PTR tv370[ebp]
	subss	xmm0, DWORD PTR tv328[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 290  : 		dy = tmpElement->BaseObject()->YPos() - platform->YPos();

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv333[ebp]
	movss	xmm0, DWORD PTR tv333[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv372[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv338[ebp]
	movss	xmm0, DWORD PTR tv372[ebp]
	subss	xmm0, DWORD PTR tv338[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 291  : 
; 292  : 		// Rotate it into heading up space
; 293  : 		displayX = trig.cos * dy - trig.sin * dy;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	mulss	xmm0, DWORD PTR _dy$[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _displayX$[ebp], xmm0

; 294  : 		displayY = trig.sin * dx + trig.cos * dx;

	movss	xmm0, DWORD PTR _trig$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp+4]
	mulss	xmm1, DWORD PTR _dx$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _displayY$[ebp], xmm0

; 295  : 
; 296  : 		// Scale and shift for display range
; 297  : 		displayX *= FT_TO_NM / displayRange * HTS_DISPLAY_RADIUS;

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+116]
	movss	xmm1, DWORD PTR __real@392c987a
	divss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@3fb33333
	mulss	xmm1, DWORD PTR _displayX$[ebp]
	movss	DWORD PTR _displayX$[ebp], xmm1

; 298  : 		displayY *= FT_TO_NM / displayRange * HTS_DISPLAY_RADIUS;

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+116]
	movss	xmm1, DWORD PTR __real@392c987a
	divss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@3fb33333
	mulss	xmm1, DWORD PTR _displayY$[ebp]
	movss	DWORD PTR _displayY$[ebp], xmm1

; 299  : 		displayY += HTS_Y_OFFSET;

	movss	xmm0, DWORD PTR _displayY$[ebp]
	addss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR _displayY$[ebp], xmm0

; 300  : 
; 301  : 		//if ((fabs(displayX) > 1.0f) || (fabs(displayY) > 1.0f)) 
; 302  : 		// RV - I-Hawk - Diplay only what's inside the ALIC video
; 303  : 		if ( !IsInsideALIC(displayX, displayY) ) 

	lea	ecx, DWORD PTR _displayY$[ebp]
	push	ecx
	lea	edx, DWORD PTR _displayX$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsInsideALIC@HarmTargetingPod@@IAE_NAAM0@Z ; HarmTargetingPod::IsInsideALIC
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@PrevTarget

; 304  : 		{
; 305  : 			continue;

	jmp	$LN7@PrevTarget
$LN4@PrevTarget:

; 306  : 		}
; 307  : 
; 308  : 		range = (float)sqrt( dx*dx + dy*dy );

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _range$[ebp]

; 309  : 
; 310  : 		// Skip it if its too far
; 311  : 		if (range > currentRange) {

	movss	xmm0, DWORD PTR _range$[ebp]
	comiss	xmm0, DWORD PTR _currentRange$[ebp]
	jbe	SHORT $LN3@PrevTarget

; 312  : 			continue;

	jmp	$LN7@PrevTarget
$LN3@PrevTarget:

; 313  : 		}
; 314  : 
; 315  : 		// Is it our best candidate so far?
; 316  : 		if (range > bestSoFar) {

	movss	xmm0, DWORD PTR _range$[ebp]
	comiss	xmm0, DWORD PTR _bestSoFar$[ebp]
	jbe	SHORT $LN1@PrevTarget

; 317  : 			// Don't choose the same one we've already got
; 318  : 			if (tmpElement != currentElement) {

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	cmp	ecx, DWORD PTR _currentElement$[ebp]
	je	SHORT $LN1@PrevTarget

; 319  : 				bestSoFar = range;

	movss	xmm0, DWORD PTR _range$[ebp]
	movss	DWORD PTR _bestSoFar$[ebp], xmm0

; 320  : 				choice = tmpElement;

	mov	edx, DWORD PTR _tmpElement$[ebp]
	mov	DWORD PTR _choice$[ebp], edx
$LN1@PrevTarget:

; 321  : 			}
; 322  : 		}
; 323  : 	}

	jmp	$LN7@PrevTarget
$LN6@PrevTarget:

; 324  : 
; 325  : 	// Will lock the sensor on the related entity (no change if NULL)
; 326  : 	LockListElement( choice );

	mov	eax, DWORD PTR _choice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LockListElement@HarmTargetingPod@@IAEXPAVGroundListElement@@@Z ; HarmTargetingPod::LockListElement

; 327  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PrevTarget@HarmTargetingPod@@QAEXXZ ENDP		; HarmTargetingPod::PrevTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_trig$ = -104						; size = 8
tv338 = -96						; size = 4
tv372 = -92						; size = 4
tv333 = -88						; size = 4
tv328 = -84						; size = 4
tv370 = -80						; size = 4
tv323 = -76						; size = 4
_FCC$ = -72						; size = 4
tv299 = -68						; size = 4
tv368 = -64						; size = 4
tv294 = -60						; size = 4
tv289 = -56						; size = 4
tv366 = -52						; size = 4
tv284 = -48						; size = 4
_choice$ = -44						; size = 4
_bestSoFar$ = -40					; size = 4
_currentRange$ = -36					; size = 4
_range$ = -32						; size = 4
_displayX$ = -28					; size = 4
_currentElement$ = -24					; size = 4
_displayY$ = -20					; size = 4
_dy$ = -16						; size = 4
_dx$ = -12						; size = 4
_tmpElement$ = -8					; size = 4
_this$ = -4						; size = 4
?NextTarget@HarmTargetingPod@@QAEXXZ PROC		; HarmTargetingPod::NextTarget
; _this$ = ecx

; 178  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	mov	DWORD PTR _this$[ebp], ecx

; 179  : 	GroundListElement	*tmpElement;
; 180  : 	GroundListElement	*choice		= NULL;

	mov	DWORD PTR _choice$[ebp], 0

; 181  : 	float			bestSoFar	= 1e6f;

	movss	xmm0, DWORD PTR __real@49742400
	movss	DWORD PTR _bestSoFar$[ebp], xmm0

; 182  : 	float			dx, dy;
; 183  : 	float			displayX, displayY;
; 184  : 	mlTrig			trig;
; 185  : 	float			range;
; 186  : 	float			currentRange;
; 187  : 	GroundListElement		*currentElement;
; 188  : 
; 189  : 
; 190  : 	// Get data on our current target (if any)
; 191  : 	if (lockedTarget) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	$LN10@NextTarget

; 192  : 		currentElement = FindEmmitter( lockedTarget->BaseData() );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindEmmitter@HarmTargetingPod@@IAEPAVGroundListElement@@PAVFalconEntity@@@Z ; HarmTargetingPod::FindEmmitter
	mov	DWORD PTR _currentElement$[ebp], eax

; 193  : 		dx = currentElement->BaseObject()->XPos() - platform->XPos();

	mov	ecx, DWORD PTR _currentElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv284[ebp]
	movss	xmm0, DWORD PTR tv284[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv366[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv289[ebp]
	movss	xmm0, DWORD PTR tv366[ebp]
	subss	xmm0, DWORD PTR tv289[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 194  : 		dy = currentElement->BaseObject()->YPos() - platform->YPos();

	mov	ecx, DWORD PTR _currentElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv294[ebp]
	movss	xmm0, DWORD PTR tv294[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv368[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv299[ebp]
	movss	xmm0, DWORD PTR tv368[ebp]
	subss	xmm0, DWORD PTR tv299[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 195  : 		currentRange = (float)sqrt( dx*dx + dy*dy );

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _currentRange$[ebp]

; 196  : 	}
; 197  : 	else 

	jmp	SHORT $LN9@NextTarget
$LN10@NextTarget:

; 198  : 	{
; 199  : 		currentElement = NULL;

	mov	DWORD PTR _currentElement$[ebp], 0

; 200  : 		currentRange = -1.0f;

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _currentRange$[ebp], xmm0
$LN9@NextTarget:

; 201  : 	}
; 202  : 
; 203  : 	// Set up the trig functions of our current heading
; 204  : 	mlSinCos (&trig, platform->Yaw());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _trig$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 205  : 
; 206  : 	FireControlComputer* FCC = ((SimVehicleClass*)platform) -> GetFCC();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax+460]
	call	edx
	mov	DWORD PTR _FCC$[ebp], eax

; 207  : 
; 208  : 	// Walk our list looking for the nearest thing in range but farther than our current target
; 209  : 	for (tmpElement	= FCC->GetFirstGroundElement(); tmpElement; tmpElement = tmpElement->GetNext())

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetFirstGroundElement@FireControlComputer@@QAEPAVGroundListElement@@XZ ; FireControlComputer::GetFirstGroundElement
	mov	DWORD PTR _tmpElement$[ebp], eax
	jmp	SHORT $LN8@NextTarget
$LN7@NextTarget:
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?GetNext@GroundListElement@@QAEPAV1@XZ	; GroundListElement::GetNext
	mov	DWORD PTR _tmpElement$[ebp], eax
$LN8@NextTarget:
	cmp	DWORD PTR _tmpElement$[ebp], 0
	je	$LN6@NextTarget

; 210  : 	{
; 211  : 	    if (tmpElement -> BaseObject() == NULL) continue;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	test	eax, eax
	jne	SHORT $LN5@NextTarget
	jmp	SHORT $LN7@NextTarget
$LN5@NextTarget:

; 212  : 
; 213  : 		// Figure the relative geometry we need
; 214  : 		dx = tmpElement->BaseObject()->XPos() - platform->XPos();

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv323[ebp]
	movss	xmm0, DWORD PTR tv323[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv370[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv328[ebp]
	movss	xmm0, DWORD PTR tv370[ebp]
	subss	xmm0, DWORD PTR tv328[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 215  : 		dy = tmpElement->BaseObject()->YPos() - platform->YPos();

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv333[ebp]
	movss	xmm0, DWORD PTR tv333[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv372[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv338[ebp]
	movss	xmm0, DWORD PTR tv372[ebp]
	subss	xmm0, DWORD PTR tv338[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 216  : 
; 217  : 		// Rotate it into heading up space
; 218  : 		displayX = trig.cos * dy - trig.sin * dy;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	mulss	xmm0, DWORD PTR _dy$[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _displayX$[ebp], xmm0

; 219  : 		displayY = trig.sin * dx + trig.cos * dx;

	movss	xmm0, DWORD PTR _trig$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp+4]
	mulss	xmm1, DWORD PTR _dx$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _displayY$[ebp], xmm0

; 220  : 
; 221  : 		// Scale and shift for display range
; 222  : 		displayX *= FT_TO_NM / displayRange * HTS_DISPLAY_RADIUS;

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+116]
	movss	xmm1, DWORD PTR __real@392c987a
	divss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@3fb33333
	mulss	xmm1, DWORD PTR _displayX$[ebp]
	movss	DWORD PTR _displayX$[ebp], xmm1

; 223  : 		displayY *= FT_TO_NM / displayRange * HTS_DISPLAY_RADIUS;

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+116]
	movss	xmm1, DWORD PTR __real@392c987a
	divss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@3fb33333
	mulss	xmm1, DWORD PTR _displayY$[ebp]
	movss	DWORD PTR _displayY$[ebp], xmm1

; 224  : 		displayY += HTS_Y_OFFSET;

	movss	xmm0, DWORD PTR _displayY$[ebp]
	addss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR _displayY$[ebp], xmm0

; 225  : 
; 226  : 		//if ((fabs(displayX) > 1.0f) || (fabs(displayY) > 1.0f)) 
; 227  : 		// RV - I-Hawk - Diplay only what's inside the ALIC video
; 228  : 		if ( !IsInsideALIC(displayX, displayY) ) 

	lea	ecx, DWORD PTR _displayY$[ebp]
	push	ecx
	lea	edx, DWORD PTR _displayX$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsInsideALIC@HarmTargetingPod@@IAE_NAAM0@Z ; HarmTargetingPod::IsInsideALIC
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@NextTarget

; 229  : 		{
; 230  : 			continue;

	jmp	$LN7@NextTarget
$LN4@NextTarget:

; 231  : 		}
; 232  : 
; 233  : 		range = (float)sqrt( dx*dx + dy*dy );

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _range$[ebp]

; 234  : 
; 235  : 		// Skip it if its too close
; 236  : 		if (range < currentRange) {

	movss	xmm0, DWORD PTR _currentRange$[ebp]
	comiss	xmm0, DWORD PTR _range$[ebp]
	jbe	SHORT $LN3@NextTarget

; 237  : 			continue;

	jmp	$LN7@NextTarget
$LN3@NextTarget:

; 238  : 		}
; 239  : 
; 240  : 		// Is it our best candidate so far?
; 241  : 		if (range < bestSoFar) {

	movss	xmm0, DWORD PTR _bestSoFar$[ebp]
	comiss	xmm0, DWORD PTR _range$[ebp]
	jbe	SHORT $LN1@NextTarget

; 242  : 			// Don't choose the same one we've already got
; 243  : 			if (tmpElement != currentElement) {

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	cmp	ecx, DWORD PTR _currentElement$[ebp]
	je	SHORT $LN1@NextTarget

; 244  : 				bestSoFar = range;

	movss	xmm0, DWORD PTR _range$[ebp]
	movss	DWORD PTR _bestSoFar$[ebp], xmm0

; 245  : 				choice = tmpElement;

	mov	edx, DWORD PTR _tmpElement$[ebp]
	mov	DWORD PTR _choice$[ebp], edx
$LN1@NextTarget:

; 246  : 			}
; 247  : 		}
; 248  : 	} 

	jmp	$LN7@NextTarget
$LN6@NextTarget:

; 249  : 
; 250  : 	// Will lock the sensor on the related entity (no change if NULL)
; 251  : 	LockListElement( choice );

	mov	eax, DWORD PTR _choice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LockListElement@HarmTargetingPod@@IAEXPAVGroundListElement@@@Z ; HarmTargetingPod::LockListElement

; 252  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?NextTarget@HarmTargetingPod@@QAEXXZ ENDP		; HarmTargetingPod::NextTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_trig$ = -108						; size = 8
tv351 = -100						; size = 4
tv378 = -96						; size = 4
_atz$ = -92						; size = 4
_aty$ = -88						; size = 4
_atx$ = -84						; size = 4
tv340 = -80						; size = 4
tv376 = -76						; size = 4
tv335 = -72						; size = 4
tv330 = -68						; size = 4
tv374 = -64						; size = 4
tv325 = -60						; size = 4
tv320 = -56						; size = 4
tv372 = -52						; size = 4
tv315 = -48						; size = 4
_FCC$ = -44						; size = 4
_choice$ = -40						; size = 4
_bestSoFar$ = -36					; size = 4
_cosATA$ = -32						; size = 4
_displayX$ = -28					; size = 4
_dz$ = -24						; size = 4
_displayY$ = -20					; size = 4
_dx$ = -16						; size = 4
_dy$ = -12						; size = 4
_tmpElement$ = -8					; size = 4
_this$ = -4						; size = 4
?BoresightTarget@HarmTargetingPod@@QAEXXZ PROC		; HarmTargetingPod::BoresightTarget
; _this$ = ecx

; 121  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	mov	DWORD PTR _this$[ebp], ecx

; 122  :     GroundListElement	*tmpElement;
; 123  : 	GroundListElement	*choice		= NULL;

	mov	DWORD PTR _choice$[ebp], 0

; 124  : 	float			bestSoFar	= 0.5f;

	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _bestSoFar$[ebp], xmm0

; 125  : 	float			dx, dy, dz;
; 126  : 	float			cosATA;
; 127  : 	float			displayX, displayY;
; 128  : 	mlTrig			trig;
; 129  : 
; 130  : 
; 131  : 	// Convienience synonym for the "At" vector of the platform...
; 132  : 	const float atx	= platform->dmx[0][0];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	movss	DWORD PTR _atx$[ebp], xmm0

; 133  : 	const float aty	= platform->dmx[0][1];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	movss	DWORD PTR _aty$[ebp], xmm0

; 134  : 	const float atz	= platform->dmx[0][2];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [ecx+edx]
	movss	DWORD PTR _atz$[ebp], xmm0

; 135  : 
; 136  : 	// Set up the trig functions of our current heading
; 137  : 	mlSinCos (&trig, platform->Yaw());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 138  : 
; 139  : 	FireControlComputer* FCC = ((SimVehicleClass*)platform) -> GetFCC();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+460]
	call	eax
	mov	DWORD PTR _FCC$[ebp], eax

; 140  : 	// Walk our list looking for the thing in range and nearest our nose
; 141  : 	for (tmpElement	= FCC->GetFirstGroundElement(); tmpElement; tmpElement = tmpElement->GetNext())

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetFirstGroundElement@FireControlComputer@@QAEPAVGroundListElement@@XZ ; FireControlComputer::GetFirstGroundElement
	mov	DWORD PTR _tmpElement$[ebp], eax
	jmp	SHORT $LN6@BoresightT
$LN5@BoresightT:
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?GetNext@GroundListElement@@QAEPAV1@XZ	; GroundListElement::GetNext
	mov	DWORD PTR _tmpElement$[ebp], eax
$LN6@BoresightT:
	cmp	DWORD PTR _tmpElement$[ebp], 0
	je	$LN4@BoresightT

; 142  : 	{
; 143  : 	    if (tmpElement -> BaseObject() == NULL) continue;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	test	eax, eax
	jne	SHORT $LN3@BoresightT
	jmp	SHORT $LN5@BoresightT
$LN3@BoresightT:

; 144  : 		// Figure the relative geometry we need
; 145  : 		dx = tmpElement->BaseObject()->XPos() - platform->XPos();

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv315[ebp]
	movss	xmm0, DWORD PTR tv315[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv372[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv320[ebp]
	movss	xmm0, DWORD PTR tv372[ebp]
	subss	xmm0, DWORD PTR tv320[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 146  : 		dy = tmpElement->BaseObject()->YPos() - platform->YPos();

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv325[ebp]
	movss	xmm0, DWORD PTR tv325[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv374[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv330[ebp]
	movss	xmm0, DWORD PTR tv374[ebp]
	subss	xmm0, DWORD PTR tv330[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 147  : 		dz = tmpElement->BaseObject()->ZPos() - platform->ZPos();

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv335[ebp]
	movss	xmm0, DWORD PTR tv335[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv376[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv340[ebp]
	movss	xmm0, DWORD PTR tv376[ebp]
	subss	xmm0, DWORD PTR tv340[ebp]
	movss	DWORD PTR _dz$[ebp], xmm0

; 148  : 		cosATA = (atx*dx + aty*dy + atz*dz) / (float)sqrt(dx*dx+dy*dy+dz*dz);

	movss	xmm0, DWORD PTR _atx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _aty$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _atz$[ebp]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dx$[ebp]
	mulss	xmm1, DWORD PTR _dx$[ebp]
	movss	xmm2, DWORD PTR _dy$[ebp]
	mulss	xmm2, DWORD PTR _dy$[ebp]
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR _dz$[ebp]
	mulss	xmm2, DWORD PTR _dz$[ebp]
	addss	xmm1, xmm2
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv378[ebp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv351[ebp]
	movss	xmm0, DWORD PTR tv378[ebp]
	divss	xmm0, DWORD PTR tv351[ebp]
	movss	DWORD PTR _cosATA$[ebp], xmm0

; 149  : 
; 150  : 		// Rotate it into heading up space
; 151  : 		displayX = trig.cos * dy - trig.sin * dy;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	mulss	xmm0, DWORD PTR _dy$[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _displayX$[ebp], xmm0

; 152  : 		displayY = trig.sin * dx + trig.cos * dx;

	movss	xmm0, DWORD PTR _trig$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp+4]
	mulss	xmm1, DWORD PTR _dx$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _displayY$[ebp], xmm0

; 153  : 
; 154  : 		// Scale and shift for display range
; 155  : 		displayX *= FT_TO_NM / displayRange * HTS_DISPLAY_RADIUS;

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+116]
	movss	xmm1, DWORD PTR __real@392c987a
	divss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@3fb33333
	mulss	xmm1, DWORD PTR _displayX$[ebp]
	movss	DWORD PTR _displayX$[ebp], xmm1

; 156  : 		displayY *= FT_TO_NM / displayRange * HTS_DISPLAY_RADIUS;

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+116]
	movss	xmm1, DWORD PTR __real@392c987a
	divss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@3fb33333
	mulss	xmm1, DWORD PTR _displayY$[ebp]
	movss	DWORD PTR _displayY$[ebp], xmm1

; 157  : 		displayY += HTS_Y_OFFSET;

	movss	xmm0, DWORD PTR _displayY$[ebp]
	addss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR _displayY$[ebp], xmm0

; 158  : 
; 159  : 		//if ((fabs(displayX) > 1.0f) || (fabs(displayY) > 1.0f)) 
; 160  : 		// RV - I-Hawk - Diplay only what's inside the ALIC video
; 161  : 		if ( !IsInsideALIC(displayX, displayY) ) 

	lea	eax, DWORD PTR _displayY$[ebp]
	push	eax
	lea	ecx, DWORD PTR _displayX$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsInsideALIC@HarmTargetingPod@@IAE_NAAM0@Z ; HarmTargetingPod::IsInsideALIC
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@BoresightT

; 162  : 		{
; 163  : 			continue;

	jmp	$LN5@BoresightT
$LN2@BoresightT:

; 164  : 		}
; 165  : 
; 166  : 		// Is it our best candidate so far?
; 167  : 		if (cosATA > bestSoFar) {

	movss	xmm0, DWORD PTR _cosATA$[ebp]
	comiss	xmm0, DWORD PTR _bestSoFar$[ebp]
	jbe	SHORT $LN1@BoresightT

; 168  : 			bestSoFar = cosATA;

	movss	xmm0, DWORD PTR _cosATA$[ebp]
	movss	DWORD PTR _bestSoFar$[ebp], xmm0

; 169  : 			choice = tmpElement;

	mov	eax, DWORD PTR _tmpElement$[ebp]
	mov	DWORD PTR _choice$[ebp], eax
$LN1@BoresightT:

; 170  : 		}
; 171  : 	}

	jmp	$LN5@BoresightT
$LN4@BoresightT:

; 172  : 
; 173  : 	// Will lock the sensor on the related entity (no change if NULL)
; 174  : 	LockListElement( choice );

	mov	ecx, DWORD PTR _choice$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LockListElement@HarmTargetingPod@@IAEXPAVGroundListElement@@@Z ; HarmTargetingPod::LockListElement

; 175  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?BoresightTarget@HarmTargetingPod@@QAEXXZ ENDP		; HarmTargetingPod::BoresightTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_FCC$ = -12						; size = 4
_choice$ = -8						; size = 4
_this$ = -4						; size = 4
?LockTargetUnderCursor@HarmTargetingPod@@QAEXXZ PROC	; HarmTargetingPod::LockTargetUnderCursor
; _this$ = ecx

; 75   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 76   : 	FireControlComputer* FCC = ((SimVehicleClass*)platform) -> GetFCC();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax+460]
	call	edx
	mov	DWORD PTR _FCC$[ebp], eax

; 77   : 	GroundListElement	*choice;
; 78   : 
; 79   : 	// RV - I-Hawk - Seperating lock modes by system submode, as HAS using elevation for position
; 80   : 	// calculation, and HAD using range (and has some special expended modes)
; 81   : 	if ( submode == HAS )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+168], 1
	jne	SHORT $LN2@LockTarget

; 82   : 	{
; 83   : 		choice = FindHASTargetUnderCursor();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindHASTargetUnderCursor@HarmTargetingPod@@QAEPAVGroundListElement@@XZ ; HarmTargetingPod::FindHASTargetUnderCursor
	mov	DWORD PTR _choice$[ebp], eax

; 84   : 	}
; 85   : 
; 86   : 	else // submode = HAD

	jmp	SHORT $LN1@LockTarget
$LN2@LockTarget:

; 87   : 	{
; 88   :         choice = FindTargetUnderCursor();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindTargetUnderCursor@HarmTargetingPod@@QAEPAVGroundListElement@@XZ ; HarmTargetingPod::FindTargetUnderCursor
	mov	DWORD PTR _choice$[ebp], eax
$LN1@LockTarget:

; 89   : 	}
; 90   : 
; 91   : 	// Will lock the sensor on the related entity (no change if NULL)
; 92   : 	LockListElement( choice );

	mov	ecx, DWORD PTR _choice$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LockListElement@HarmTargetingPod@@IAEXPAVGroundListElement@@@Z ; HarmTargetingPod::LockListElement

; 93   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?LockTargetUnderCursor@HarmTargetingPod@@QAEXXZ ENDP	; HarmTargetingPod::LockTargetUnderCursor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
tv65 = -8						; size = 4
_this$ = -4						; size = 4
?ToggleHADZoomMode@HarmTargetingPod@@QAEXXZ PROC	; HarmTargetingPod::ToggleHADZoomMode
; _this$ = ecx

; 1602 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1603 : 	switch ( HadZoomMode )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+180]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 0
	je	SHORT $LN3@ToggleHADZ
	cmp	DWORD PTR tv65[ebp], 1
	je	SHORT $LN2@ToggleHADZ
	jmp	SHORT $LN1@ToggleHADZ
$LN3@ToggleHADZ:

; 1604 : 	{
; 1605 : 	case NORM:
; 1606 : 		HadZoomMode = EXP1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], 1

; 1607 : 		SaveHadCursorPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveHadCursorPos@HarmTargetingPod@@QAEXXZ ; HarmTargetingPod::SaveHadCursorPos

; 1608 : 		displayRange /= 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+116]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 1609 : 		break;

	jmp	SHORT $LN6@ToggleHADZ
$LN2@ToggleHADZ:

; 1610 : 
; 1611 : 	case EXP1:
; 1612 : 		HadZoomMode = EXP2;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], 2

; 1613 : 		SaveHadCursorPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveHadCursorPos@HarmTargetingPod@@QAEXXZ ; HarmTargetingPod::SaveHadCursorPos

; 1614 : 		displayRange /= 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+116]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 1615 : 		break;

	jmp	SHORT $LN6@ToggleHADZ
$LN1@ToggleHADZ:

; 1616 : 	
; 1617 : 	case EXP2:
; 1618 : 	default:
; 1619 : 		HadZoomMode = NORM;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], 0

; 1620 : 		ResetHadCursorPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetHadCursorPos@HarmTargetingPod@@QAEXXZ ; HarmTargetingPod::ResetHadCursorPos

; 1621 : 		displayRange = trueDisplayRange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR [eax+116], edx
$LN6@ToggleHADZ:

; 1622 : 		break;
; 1623 : 	}
; 1624 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleHADZoomMode@HarmTargetingPod@@QAEXXZ ENDP	; HarmTargetingPod::ToggleHADZoomMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
tv65 = -8						; size = 4
_this$ = -4						; size = 4
?ToggleZoomMode@HarmTargetingPod@@QAEXXZ PROC		; HarmTargetingPod::ToggleZoomMode
; _this$ = ecx

; 1580 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1581 : 	switch ( zoomMode )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 0
	je	SHORT $LN2@ToggleZoom
	jmp	SHORT $LN1@ToggleZoom
$LN2@ToggleZoom:

; 1582 : 	{
; 1583 : 	case Wide:
; 1584 : 		zoomMode = Center;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+176], 1

; 1585 : 		zoomFactor = 2.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [eax+152], xmm0

; 1586 : 		displayRange /= 2;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+116]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+116], eax

; 1587 : 		break;

	jmp	SHORT $LN3@ToggleZoom
$LN1@ToggleZoom:

; 1588 : 
; 1589 : 	case Center:
; 1590 : 	default:
; 1591 : 		zoomMode = Wide;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+176], 0

; 1592 : 		zoomFactor = 1.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+152], xmm0

; 1593 : 		displayRange *= 2;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+116], eax
$LN3@ToggleZoom:

; 1594 : 		break;
; 1595 : 	}
; 1596 : 
; 1597 : 	// TODO: Implement Right/Left zooming ability for HTS HAS mode
; 1598 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleZoomMode@HarmTargetingPod@@QAEXXZ ENDP		; HarmTargetingPod::ToggleZoomMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DecreaseRange@HarmTargetingPod@@QAEXXZ PROC		; HarmTargetingPod::DecreaseRange
; _this$ = ecx

; 1542 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1543 : 	if ( trueDisplayRange <= 10 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+120], 10			; 0000000aH
	jg	SHORT $LN2@DecreaseRa

; 1544 : 	{
; 1545 : 		return;

	jmp	SHORT $LN3@DecreaseRa
$LN2@DecreaseRa:

; 1546 : 	}
; 1547 : 
; 1548 : 	if ( trueDisplayRange == 15 ) 

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+120], 15			; 0000000fH
	jne	SHORT $LN1@DecreaseRa

; 1549 : 	{
; 1550 : 		trueDisplayRange = 8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+120], 8

; 1551 : 		displayRange = trueDisplayRange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR [eax+116], edx

; 1552 : 		zoomMode = Wide;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+176], 0

; 1553 : 		zoomFactor = 1.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+152], xmm0

; 1554 : 		return;

	jmp	SHORT $LN3@DecreaseRa
$LN1@DecreaseRa:

; 1555 : 	}
; 1556 : 
; 1557 : 	trueDisplayRange /= 2;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+120]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+120], eax

; 1558 : 	displayRange = trueDisplayRange;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR [edx+116], ecx

; 1559 : 	zoomMode = Wide;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+176], 0

; 1560 : 	zoomFactor = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+152], xmm0
$LN3@DecreaseRa:

; 1561 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DecreaseRange@HarmTargetingPod@@QAEXXZ ENDP		; HarmTargetingPod::DecreaseRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IncreaseRange@HarmTargetingPod@@QAEXXZ PROC		; HarmTargetingPod::IncreaseRange
; _this$ = ecx

; 1518 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1519 : 	if ( trueDisplayRange >= 115 ) // Don't go over 120NM

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+120], 115		; 00000073H
	jl	SHORT $LN2@IncreaseRa

; 1520 : 	{
; 1521 : 		return;

	jmp	SHORT $LN3@IncreaseRa
$LN2@IncreaseRa:

; 1522 : 	}
; 1523 : 
; 1524 : 	// The range is integer, so when getting down from 15 it becomes 8, so if 8 get it back to 15
; 1525 : 	// instead of multiplying
; 1526 : 	if ( trueDisplayRange == 8 ) 

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+120], 8
	jne	SHORT $LN1@IncreaseRa

; 1527 : 	{
; 1528 : 		trueDisplayRange = 15;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+120], 15			; 0000000fH

; 1529 : 		displayRange = trueDisplayRange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR [eax+116], edx

; 1530 : 		zoomMode = Wide;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+176], 0

; 1531 : 		zoomFactor = 1.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+152], xmm0

; 1532 : 		return;

	jmp	SHORT $LN3@IncreaseRa
$LN1@IncreaseRa:

; 1533 : 	}
; 1534 : 
; 1535 : 	trueDisplayRange *= 2;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+120]
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+120], eax

; 1536 : 	displayRange = trueDisplayRange;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR [edx+116], ecx

; 1537 : 	zoomMode = Wide;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+176], 0

; 1538 : 	zoomFactor = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+152], xmm0
$LN3@IncreaseRa:

; 1539 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IncreaseRange@HarmTargetingPod@@QAEXXZ ENDP		; HarmTargetingPod::IncreaseRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_FCC$2 = -44						; size = 4
$T3 = -40						; size = 4
_retval$ = -36						; size = 4
tv129 = -32						; size = 4
$T4 = -28						; size = 4
_this$ = -24						; size = 4
tv133 = -20						; size = 4
_tmpElement$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_newEmmitter$ = 8					; size = 4
_trackType$ = 12					; size = 4
_dummy$ = 16						; size = 4
?ObjectDetected@HarmTargetingPod@@UAEHPAVFalconEntity@@HH@Z PROC ; HarmTargetingPod::ObjectDetected
; _this$ = ecx

; 1437 : {	

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ObjectDetected@HarmTargetingPod@@UAEHPAVFalconEntity@@HH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1438 :     int					retval = FALSE;

	mov	DWORD PTR _retval$[ebp], 0

; 1439 : 	GroundListElement	*tmpElement;
; 1440 : 
; 1441 : 	// We're only tracking ground things right now...
; 1442 : 	if (newEmmitter->OnGround())

	mov	eax, DWORD PTR _newEmmitter$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _newEmmitter$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	je	$LN9@ObjectDete

; 1443 : 	{
; 1444 : 		// See if this one is already in our list
; 1445 : 		tmpElement = FindEmmitter( newEmmitter );

	mov	ecx, DWORD PTR _newEmmitter$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindEmmitter@HarmTargetingPod@@IAEPAVGroundListElement@@PAVFalconEntity@@@Z ; HarmTargetingPod::FindEmmitter
	mov	DWORD PTR _tmpElement$[ebp], eax

; 1446 : 		if (!tmpElement)

	cmp	DWORD PTR _tmpElement$[ebp], 0
	jne	SHORT $LN8@ObjectDete

; 1447 : 		{
; 1448 : 		    FireControlComputer* FCC = ((SimVehicleClass*)platform)->GetFCC();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+460]
	call	eax
	mov	DWORD PTR _FCC$2[ebp], eax

; 1449 : 
; 1450 : 			// Add the new one at the head;
; 1451 : 			tmpElement = new GroundListElement( newEmmitter );

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN12@ObjectDete
	mov	ecx, DWORD PTR _newEmmitter$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0GroundListElement@@QAE@PAVFalconEntity@@@Z ; GroundListElement::GroundListElement
	mov	DWORD PTR tv129[ebp], eax
	jmp	SHORT $LN13@ObjectDete
$LN12@ObjectDete:
	mov	DWORD PTR tv129[ebp], 0
$LN13@ObjectDete:
	mov	edx, DWORD PTR tv129[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _tmpElement$[ebp], eax

; 1452 : 			FCC->AddGroundElement(tmpElement);

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _FCC$2[ebp]
	call	?AddGroundElement@FireControlComputer@@QAEXPAVGroundListElement@@@Z ; FireControlComputer::AddGroundElement

; 1453 : 
; 1454 : 			retval = TRUE;

	mov	DWORD PTR _retval$[ebp], 1
$LN8@ObjectDete:

; 1455 : 		}
; 1456 : 
; 1457 :         // Make sure it is marked as checked
; 1458 : 		tmpElement->ClearFlag(GroundListElement::UnChecked);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?ClearFlag@GroundListElement@@QAEXH@Z	; GroundListElement::ClearFlag

; 1459 : 
; 1460 : 		switch (trackType) {

	mov	edx, DWORD PTR _trackType$[ebp]
	mov	DWORD PTR tv133[ebp], edx
	mov	eax, DWORD PTR tv133[ebp]
	sub	eax, 2
	mov	DWORD PTR tv133[ebp], eax
	cmp	DWORD PTR tv133[ebp], 3
	ja	SHORT $LN1@ObjectDete
	mov	ecx, DWORD PTR tv133[ebp]
	jmp	DWORD PTR $LN16@ObjectDete[ecx*4]
$LN5@ObjectDete:

; 1461 : 		  // Note:  It is intentional that these cases fall through...
; 1462 : 		  case Track_Unlock:
; 1463 : 		      tmpElement->ClearFlag(GroundListElement::Track);

	push	8
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?ClearFlag@GroundListElement@@QAEXH@Z	; GroundListElement::ClearFlag
$LN4@ObjectDete:

; 1464 : 
; 1465 : 		  case Track_LaunchEnd:
; 1466 : 		      tmpElement->ClearFlag(GroundListElement::Launch);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?ClearFlag@GroundListElement@@QAEXH@Z	; GroundListElement::ClearFlag

; 1467 : 
; 1468 : 		  // Break here....
; 1469 : 			break;

	jmp	SHORT $LN6@ObjectDete
$LN3@ObjectDete:

; 1470 : 
; 1471 : 		  // Note:  It is intentional that these cases fall through...
; 1472 : 		  case Track_Launch:
; 1473 : 		      tmpElement->SetFlag(GroundListElement::Launch);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?SetFlag@GroundListElement@@QAEXH@Z	; GroundListElement::SetFlag
$LN2@ObjectDete:

; 1474 : 
; 1475 : 		  case Track_Lock:
; 1476 : 			tmpElement->SetFlag(GroundListElement::Track);

	push	8
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?SetFlag@GroundListElement@@QAEXH@Z	; GroundListElement::SetFlag
$LN1@ObjectDete:

; 1477 : 
; 1478 : 		  default:
; 1479 : 			tmpElement->SetFlag(GroundListElement::Radiate);

	push	4
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?SetFlag@GroundListElement@@QAEXH@Z	; GroundListElement::SetFlag
$LN6@ObjectDete:

; 1480 : 		}
; 1481 : 
; 1482 : 		// Update the hit time;
; 1483 : 		tmpElement->lastHit = SimLibElapsedTime;

	mov	edx, DWORD PTR _tmpElement$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [edx+16], eax
$LN9@ObjectDete:

; 1484 : 	}
; 1485 : 
; 1486 :    return retval;

	mov	eax, DWORD PTR _retval$[ebp]

; 1487 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN16@ObjectDete:
	DD	$LN5@ObjectDete
	DD	$LN2@ObjectDete
	DD	$LN4@ObjectDete
	DD	$LN3@ObjectDete
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ObjectDetected@HarmTargetingPod@@UAEHPAVFalconEntity@@HH@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ObjectDetected@HarmTargetingPod@@UAEHPAVFalconEntity@@HH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ObjectDetected@HarmTargetingPod@@UAEHPAVFalconEntity@@HH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ObjectDetected@HarmTargetingPod@@UAEHPAVFalconEntity@@HH@Z ENDP ; HarmTargetingPod::ObjectDetected
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_tempColor$ = -32					; size = 4
_ALICSide$ = -28					; size = 4
_ALICBottom$ = -24					; size = 4
_ALICTop$ = -20						; size = 4
tv432 = -16						; size = 4
_topLineoffset$ = -12					; size = 4
_bottomLineoffset$ = -8					; size = 4
_this$ = -4						; size = 4
_activeDisplay$ = 8					; size = 4
?HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z PROC ; HarmTargetingPod::HandoffDisplay
; _this$ = ecx

; 607  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 608  : 	display = activeDisplay;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _activeDisplay$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 609  : 
; 610  : 	// Do we draw flashing things this frame ?
; 611  : 	flash = vuxRealTime & 0x200;

	mov	edx, DWORD PTR ?vuxRealTime@@3KA	; vuxRealTime
	and	edx, 512				; 00000200H
	mov	DWORD PTR ?flash@HarmTargetingPod@@1HA, edx ; HarmTargetingPod::flash

; 612  : 	
; 613  : 	display->SetColor( 0xFF00FF00 );

	push	-16711936				; ff00ff00H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 614  : 
; 615  : 	display->AdjustOriginInViewport (0.0f, HTS_Y_OFFSET);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 616  : 
; 617  : 	DrawDTSBBox(); // RV - I-Hawk - Draw the DTSB box

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawDTSBBox@HarmTargetingPod@@IAEXXZ	; HarmTargetingPod::DrawDTSBBox

; 618  : 
; 619  : 	DWORD tempColor = display->Color();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+108]
	call	eax
	mov	DWORD PTR _tempColor$[ebp], eax

; 620  : 
; 621  : 	// Draw the Handoff display lines
; 622  : 
; 623  : 	float ALICSide   = ALICSIDE * zoomFactor;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f400000
	mulss	xmm0, DWORD PTR [ecx+152]
	movss	DWORD PTR _ALICSide$[ebp], xmm0

; 624  : 	float ALICTop    = ALICTOP * zoomFactor;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f866666
	mulss	xmm0, DWORD PTR [edx+152]
	movss	DWORD PTR _ALICTop$[ebp], xmm0

; 625  : 	float ALICBottom = ALICBOTTOM * zoomFactor;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	mulss	xmm0, DWORD PTR [eax+152]
	movss	DWORD PTR _ALICBottom$[ebp], xmm0

; 626  : 
; 627  : 	display->SetColor(GetMfdColor(MFD_WHITY_GRAY));

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 628  : 	static const float verticalHandoffLineTop = ALICTop + 0.05f; 

	mov	ecx, DWORD PTR ?$S2@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA
	and	ecx, 1
	jne	SHORT $LN8@HandoffDis
	mov	edx, DWORD PTR ?$S2@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA
	or	edx, 1
	mov	DWORD PTR ?$S2@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA, edx
	movss	xmm0, DWORD PTR _ALICTop$[ebp]
	addss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR ?verticalHandoffLineTop@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB, xmm0
$LN8@HandoffDis:

; 629  : 	static const float verticalHandoffLineBottom = ( ALICBottom + (0.1f * zoomFactor) );

	mov	eax, DWORD PTR ?$S2@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA
	and	eax, 2
	jne	SHORT $LN7@HandoffDis
	mov	ecx, DWORD PTR ?$S2@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA
	or	ecx, 2
	mov	DWORD PTR ?$S2@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA, ecx
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3dcccccd
	mulss	xmm0, DWORD PTR [edx+152]
	addss	xmm0, DWORD PTR _ALICBottom$[ebp]
	movss	DWORD PTR ?verticalHandoffLineBottom@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB, xmm0
$LN7@HandoffDis:

; 630  : 	static const float horizontalHandoffLine = (verticalHandoffLineTop + verticalHandoffLineBottom)	/ 2.0f;

	mov	eax, DWORD PTR ?$S2@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA
	and	eax, 4
	jne	SHORT $LN6@HandoffDis
	mov	ecx, DWORD PTR ?$S2@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA
	or	ecx, 4
	mov	DWORD PTR ?$S2@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA, ecx
	movss	xmm0, DWORD PTR ?verticalHandoffLineTop@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	addss	xmm0, DWORD PTR ?verticalHandoffLineBottom@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR ?horizontalHandoffLine@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB, xmm0
$LN6@HandoffDis:

; 631  : 	static const float horizontalEdges = ALICSide * 0.66f;

	mov	edx, DWORD PTR ?$S2@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA
	and	edx, 8
	jne	SHORT $LN5@HandoffDis
	mov	eax, DWORD PTR ?$S2@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA
	or	eax, 8
	mov	DWORD PTR ?$S2@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA, eax
	movss	xmm0, DWORD PTR _ALICSide$[ebp]
	mulss	xmm0, DWORD PTR __real@3f28f5c3
	movss	DWORD PTR ?horizontalEdges@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB, xmm0
$LN5@HandoffDis:

; 632  : 	float topLineoffset = horizontalHandoffLine + (0.05f * zoomFactor);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR [ecx+152]
	addss	xmm0, DWORD PTR ?horizontalHandoffLine@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR _topLineoffset$[ebp], xmm0

; 633  : 	float bottomLineoffset = horizontalHandoffLine - (0.05f * zoomFactor);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR [edx+152]
	movss	xmm1, DWORD PTR ?horizontalHandoffLine@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	subss	xmm1, xmm0
	movss	DWORD PTR _bottomLineoffset$[ebp], xmm1

; 634  : 
; 635  : 	// The lines
; 636  : 	display->Line ( -(horizontalEdges), horizontalHandoffLine, -(0.05f * zoomFactor), horizontalHandoffLine ); 

	push	ecx
	movss	xmm0, DWORD PTR ?horizontalHandoffLine@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR [eax+152]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?horizontalHandoffLine@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?horizontalEdges@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 637  : 	display->Line ( (horizontalEdges), horizontalHandoffLine, (0.05f * zoomFactor), horizontalHandoffLine );

	push	ecx
	movss	xmm0, DWORD PTR ?horizontalHandoffLine@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR [ecx+152]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?horizontalHandoffLine@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?horizontalEdges@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 638  : 	display->Line ( 0.0f, verticalHandoffLineTop, 0.0f, topLineoffset ); 

	push	ecx
	movss	xmm0, DWORD PTR _topLineoffset$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?verticalHandoffLineTop@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 639  : 	display->Line ( 0.0f, verticalHandoffLineBottom, 0.0f, bottomLineoffset );

	push	ecx
	movss	xmm0, DWORD PTR _bottomLineoffset$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?verticalHandoffLineBottom@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 640  : 
; 641  : 	// The small lines at the edges
; 642  : 	display->Line ( -(0.05f * zoomFactor), verticalHandoffLineTop, (0.05f * zoomFactor), verticalHandoffLineTop );

	push	ecx
	movss	xmm0, DWORD PTR ?verticalHandoffLineTop@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR [ecx+152]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?verticalHandoffLineTop@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR [edx+152]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 643  : 	display->Line ( -(0.05f * zoomFactor), verticalHandoffLineBottom, (0.05f * zoomFactor), verticalHandoffLineBottom );

	push	ecx
	movss	xmm0, DWORD PTR ?verticalHandoffLineBottom@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR [eax+152]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?verticalHandoffLineBottom@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR [ecx+152]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 644  : 	display->Line ( -(horizontalEdges), topLineoffset, -(horizontalEdges), bottomLineoffset );

	push	ecx
	movss	xmm0, DWORD PTR _bottomLineoffset$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?horizontalEdges@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _topLineoffset$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?horizontalEdges@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 645  : 	display->Line ( (horizontalEdges), topLineoffset, (horizontalEdges), bottomLineoffset );

	push	ecx
	movss	xmm0, DWORD PTR _bottomLineoffset$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?horizontalEdges@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _topLineoffset$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?horizontalEdges@?1??HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 646  : 
; 647  : 	if ( handedoff == true ) // Write RDY only if info been handed off to the missile

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+112]
	cmp	edx, 1
	jne	SHORT $LN4@HandoffDis

; 648  : 	{
; 649  :         // Write "READY" at bottom of display
; 650  : 		display->SetColor(GetMfdColor(MFD_WHITY_GRAY)); // "whity" gray...

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 651  : 		display->TextCenter(0.0F, -0.2F, "RDY");

	push	0
	push	OFFSET ??_C@_03KDFFCEML@RDY?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@be4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx
$LN4@HandoffDis:

; 652  : 	}
; 653  : 
; 654  : 	display->SetColor(tempColor);

	mov	eax, DWORD PTR _tempColor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 655  : 	display->AdjustOriginInViewport (0.0f, -HTS_Y_OFFSET);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 656  :     display->CenterOriginInViewport();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 657  : 
; 658  : 	//MI
; 659  : 	if(g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN1@HandoffDis

; 660  : 	{
; 661  : 		if(((AircraftClass*)platform)->Sms->curWeapon && ((AircraftClass*)platform)->Sms->curWeapon->IsMissile())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	ecx, DWORD PTR [edx+940]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@HandoffDis
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	ecx, DWORD PTR [edx+940]
	add	ecx, 164				; 000000a4H
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	DWORD PTR tv432[ebp], eax
	mov	eax, DWORD PTR tv432[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv432[ebp]
	mov	eax, DWORD PTR [edx+156]
	call	eax
	test	eax, eax
	je	SHORT $LN1@HandoffDis

; 662  : 		{
; 663  : 			if(((AircraftClass*)SimDriver.GetPlayerAircraft())->GetSOI() == SimVehicleClass::SOI_WEAPON)

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?GetSOI@SimVehicleClass@@QAE?AW4SOI@1@XZ ; SimVehicleClass::GetSOI
	cmp	eax, 2
	jne	SHORT $LN1@HandoffDis

; 664  : 			{  
; 665  : 				DrawBorder(); // JPO SOI

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawBorder@DrawableClass@@QAEXXZ	; DrawableClass::DrawBorder
$LN1@HandoffDis:

; 666  : 			}  
; 667  : 		}
; 668  : 	}
; 669  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?HandoffDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z ENDP ; HarmTargetingPod::HandoffDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_ALICSide$ = -28					; size = 4
_tempColor$ = -24					; size = 4
_ALICBottom$ = -20					; size = 4
_ALICTop$ = -16						; size = 4
tv242 = -12						; size = 4
_LDLVerticalPos$ = -8					; size = 4
_this$ = -4						; size = 4
_activeDisplay$ = 8					; size = 4
?POSDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z PROC ; HarmTargetingPod::POSDisplay
; _this$ = ecx

; 673  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 674  : 	display = activeDisplay;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _activeDisplay$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 675  : 
; 676  : 	// Do we draw flashing things this frame ?
; 677  : 	flash = vuxRealTime & 0x200;

	mov	edx, DWORD PTR ?vuxRealTime@@3KA	; vuxRealTime
	and	edx, 512				; 00000200H
	mov	DWORD PTR ?flash@HarmTargetingPod@@1HA, edx ; HarmTargetingPod::flash

; 678  : 	
; 679  : 	display->SetColor( 0xFF00FF00 );

	push	-16711936				; ff00ff00H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 680  : 
; 681  : 	display->AdjustOriginInViewport (0.0f, HTS_Y_OFFSET);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 682  : 
; 683  : 	DrawDTSBBox(); // RV - I-Hawk - Draw the DTSB box

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawDTSBBox@HarmTargetingPod@@IAEXXZ	; HarmTargetingPod::DrawDTSBBox

; 684  : 
; 685  : 	float ALICSide   = ALICSIDE * zoomFactor;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f400000
	mulss	xmm0, DWORD PTR [ecx+152]
	movss	DWORD PTR _ALICSide$[ebp], xmm0

; 686  : 	float ALICTop    = ALICTOP * zoomFactor;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f866666
	mulss	xmm0, DWORD PTR [edx+152]
	movss	DWORD PTR _ALICTop$[ebp], xmm0

; 687  : 	float ALICBottom = ALICBOTTOM * zoomFactor;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	mulss	xmm0, DWORD PTR [eax+152]
	movss	DWORD PTR _ALICBottom$[ebp], xmm0

; 688  : 
; 689  : 	// Draw the LSDL line
; 690  : 	DWORD tempColor = display->Color();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+108]
	call	eax
	mov	DWORD PTR _tempColor$[ebp], eax

; 691  : 
; 692  : 	display->SetColor(GetMfdColor(MFD_BRIGHT_GREEN)); // Bright green

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 693  : 	float LDLVerticalPos = (ALICTop + ALICBottom) / 2.0f + (0.05f * zoomFactor);

	movss	xmm0, DWORD PTR _ALICTop$[ebp]
	addss	xmm0, DWORD PTR _ALICBottom$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3d4ccccd
	mulss	xmm1, DWORD PTR [ecx+152]
	addss	xmm0, xmm1
	movss	DWORD PTR _LDLVerticalPos$[ebp], xmm0

; 694  : 	display->Line( -(0.85f * zoomFactor), LDLVerticalPos, (0.85f * zoomFactor), LDLVerticalPos );  

	push	ecx
	movss	xmm0, DWORD PTR _LDLVerticalPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f59999a
	mulss	xmm0, DWORD PTR [edx+152]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _LDLVerticalPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f59999a
	mulss	xmm0, DWORD PTR [eax+152]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 695  : 
; 696  : 	display->SetColor(tempColor);

	mov	ecx, DWORD PTR _tempColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 697  : 
; 698  : 	display->CenterOriginInViewport();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 699  : 
; 700  : 	//MI
; 701  : 	if(g_bRealisticAvionics)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	SHORT $LN1@POSDisplay

; 702  : 	{
; 703  : 		if(((AircraftClass*)platform)->Sms->curWeapon && ((AircraftClass*)platform)->Sms->curWeapon->IsMissile())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR [ecx+940]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@POSDisplay
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR [ecx+940]
	add	ecx, 164				; 000000a4H
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	DWORD PTR tv242[ebp], eax
	mov	edx, DWORD PTR tv242[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv242[ebp]
	mov	edx, DWORD PTR [eax+156]
	call	edx
	test	eax, eax
	je	SHORT $LN1@POSDisplay

; 704  : 		{
; 705  : 			if(((AircraftClass*)SimDriver.GetPlayerAircraft())->GetSOI() == SimVehicleClass::SOI_WEAPON)

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?GetSOI@SimVehicleClass@@QAE?AW4SOI@1@XZ ; SimVehicleClass::GetSOI
	cmp	eax, 2
	jne	SHORT $LN1@POSDisplay

; 706  : 			{  
; 707  : 				DrawBorder(); // JPO SOI

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawBorder@DrawableClass@@QAEXXZ	; DrawableClass::DrawBorder
$LN1@POSDisplay:

; 708  : 			}  
; 709  : 		}
; 710  : 	}
; 711  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?POSDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z ENDP ; HarmTargetingPod::POSDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
tv758 = -72						; size = 4
_seconds$ = -68						; size = 4
_minutes$ = -64						; size = 4
tv580 = -60						; size = 4
_tempColor$ = -56					; size = 4
_temp$ = -52						; size = 4
_pos$1 = -48						; size = 4
_ALICBottom$ = -44					; size = 4
_pos$2 = -40						; size = 4
_ALICTop$ = -36						; size = 4
_pos$3 = -32						; size = 4
_pos$4 = -28						; size = 4
_ALICSpace$ = -24					; size = 4
_ALICSide$ = -20					; size = 4
_this$ = -16						; size = 4
_str$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_activeDisplay$ = 8					; size = 4
?HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z PROC ; HarmTargetingPod::HASDisplay
; _this$ = ecx

; 503  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 504  : 	static const float arrowH = 0.0375f;
; 505  : 	static const float arrowW = 0.0433f;
; 506  : 	int minutes, seconds;
; 507  : 
; 508  : 	display = activeDisplay;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _activeDisplay$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 509  : 
; 510  : 	// Do we draw flashing things this frame ?
; 511  : 	flash = vuxRealTime & 0x200;

	mov	edx, DWORD PTR ?vuxRealTime@@3KA	; vuxRealTime
	and	edx, 512				; 00000200H
	mov	DWORD PTR ?flash@HarmTargetingPod@@1HA, edx ; HarmTargetingPod::flash

; 512  : 	
; 513  : 	display->SetColor( 0xFF00FF00 );

	push	-16711936				; ff00ff00H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 514  : 
; 515  : 	display->AdjustOriginInViewport (0.0f, HTS_Y_OFFSET);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 516  : 
; 517  : 	DrawDTSBBox(); // RV - I-Hawk - Draw the DTSB box

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawDTSBBox@HarmTargetingPod@@IAEXXZ	; HarmTargetingPod::DrawDTSBBox

; 518  : 
; 519  : 	// RV - I-Hawk - Draw the ALIC video box
; 520  : 	DWORD tempColor = display->Color();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+108]
	call	eax
	mov	DWORD PTR _tempColor$[ebp], eax

; 521  : 	display->SetColor(GetMfdColor(MFD_RED));

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 522  : 	
; 523  : 	float ALICSide   = ALICSIDE * zoomFactor;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f400000
	mulss	xmm0, DWORD PTR [ecx+152]
	movss	DWORD PTR _ALICSide$[ebp], xmm0

; 524  : 	float ALICTop    = ALICTOP * zoomFactor;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f866666
	mulss	xmm0, DWORD PTR [edx+152]
	movss	DWORD PTR _ALICTop$[ebp], xmm0

; 525  : 	float ALICBottom = ALICBOTTOM * zoomFactor;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	mulss	xmm0, DWORD PTR [eax+152]
	movss	DWORD PTR _ALICBottom$[ebp], xmm0

; 526  : 
; 527  : 	// Lines are dashed
; 528  : 	float ALICSpace = ALICSide / 8.0f; 

	movss	xmm0, DWORD PTR _ALICSide$[ebp]
	divss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR _ALICSpace$[ebp], xmm0

; 529  : 
; 530  : 	for ( float pos = -(ALICSide); pos < ALICSide ; pos += 2.0f * ALICSpace )

	movss	xmm0, DWORD PTR _ALICSide$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _pos$4[ebp], xmm0
	jmp	SHORT $LN21@HASDisplay
$LN20@HASDisplay:
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _ALICSpace$[ebp]
	addss	xmm0, DWORD PTR _pos$4[ebp]
	movss	DWORD PTR _pos$4[ebp], xmm0
$LN21@HASDisplay:
	movss	xmm0, DWORD PTR _ALICSide$[ebp]
	comiss	xmm0, DWORD PTR _pos$4[ebp]
	jbe	$LN19@HASDisplay

; 531  : 	{
; 532  :         display->Line( pos,   ALICTop,  pos + ALICSpace,  ALICTop );

	push	ecx
	movss	xmm0, DWORD PTR _ALICTop$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pos$4[ebp]
	addss	xmm0, DWORD PTR _ALICSpace$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ALICTop$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$4[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 533  : 		display->Line( pos,   ALICBottom,  pos + ALICSpace,  ALICBottom );

	push	ecx
	movss	xmm0, DWORD PTR _ALICBottom$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pos$4[ebp]
	addss	xmm0, DWORD PTR _ALICSpace$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ALICBottom$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$4[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 534  : 	}

	jmp	$LN20@HASDisplay
$LN19@HASDisplay:

; 535  : 
; 536  :     ALICSpace = (ALICTop - ALICBottom) / 12.0f; 

	movss	xmm0, DWORD PTR _ALICTop$[ebp]
	subss	xmm0, DWORD PTR _ALICBottom$[ebp]
	divss	xmm0, DWORD PTR __real@41400000
	movss	DWORD PTR _ALICSpace$[ebp], xmm0

; 537  : 
; 538  : 	for ( float pos = ALICBottom; pos < (ALICTop-(0.0875f * zoomFactor)); pos += 2.0f * ALICSpace )

	movss	xmm0, DWORD PTR _ALICBottom$[ebp]
	movss	DWORD PTR _pos$3[ebp], xmm0
	jmp	SHORT $LN18@HASDisplay
$LN17@HASDisplay:
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _ALICSpace$[ebp]
	addss	xmm0, DWORD PTR _pos$3[ebp]
	movss	DWORD PTR _pos$3[ebp], xmm0
$LN18@HASDisplay:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3db33333
	mulss	xmm0, DWORD PTR [ecx+152]
	movss	xmm1, DWORD PTR _ALICTop$[ebp]
	subss	xmm1, xmm0
	comiss	xmm1, DWORD PTR _pos$3[ebp]
	jbe	$LN16@HASDisplay

; 539  : 	{
; 540  :         display->Line( -(ALICSide),   pos,  -(ALICSide) ,  pos + ALICSpace );

	movss	xmm0, DWORD PTR _pos$3[ebp]
	addss	xmm0, DWORD PTR _ALICSpace$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _ALICSide$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$3[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _ALICSide$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 541  : 		display->Line( ALICSide,   pos,  ALICSide,  pos + ALICSpace );

	movss	xmm0, DWORD PTR _pos$3[ebp]
	addss	xmm0, DWORD PTR _ALICSpace$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ALICSide$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$3[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ALICSide$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 542  : 	}

	jmp	$LN17@HASDisplay
$LN16@HASDisplay:

; 543  : 
; 544  : 	// Draw the ALIC range lines 
; 545  : 	display->SetColor(GetMfdColor(MFD_WHITY_GRAY));

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 546  : 	static const float HorizontalRangeLine = ( ALICTop / 11.0f ) * 9.5f; 

	mov	ecx, DWORD PTR ?$S1@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA
	and	ecx, 1
	jne	SHORT $LN15@HASDisplay
	mov	edx, DWORD PTR ?$S1@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA
	or	edx, 1
	mov	DWORD PTR ?$S1@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA, edx
	movss	xmm0, DWORD PTR _ALICTop$[ebp]
	divss	xmm0, DWORD PTR __real@41300000
	mulss	xmm0, DWORD PTR __real@41180000
	movss	DWORD PTR ?HorizontalRangeLine@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB, xmm0
$LN15@HASDisplay:

; 547  : 	static const float VerticalRangeLineTOP = ( ALICTop + (0.05f * zoomFactor) );

	mov	eax, DWORD PTR ?$S1@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA
	and	eax, 2
	jne	SHORT $LN14@HASDisplay
	mov	ecx, DWORD PTR ?$S1@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA
	or	ecx, 2
	mov	DWORD PTR ?$S1@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA, ecx
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR [edx+152]
	addss	xmm0, DWORD PTR _ALICTop$[ebp]
	movss	DWORD PTR ?VerticalRangeLineTOP@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB, xmm0
$LN14@HASDisplay:

; 548  : 	static const float VerticalRangeLineBottom = ( ALICBottom + (0.1f * zoomFactor) );

	mov	eax, DWORD PTR ?$S1@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA
	and	eax, 4
	jne	SHORT $LN13@HASDisplay
	mov	ecx, DWORD PTR ?$S1@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA
	or	ecx, 4
	mov	DWORD PTR ?$S1@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA, ecx
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3dcccccd
	mulss	xmm0, DWORD PTR [edx+152]
	addss	xmm0, DWORD PTR _ALICBottom$[ebp]
	movss	DWORD PTR ?VerticalRangeLineBottom@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB, xmm0
$LN13@HASDisplay:

; 549  : 	display->Line ( ALICSide, HorizontalRangeLine, -ALICSide, HorizontalRangeLine ); 

	push	ecx
	movss	xmm0, DWORD PTR ?HorizontalRangeLine@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _ALICSide$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?HorizontalRangeLine@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ALICSide$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 550  : 	display->Line ( 0.0f, VerticalRangeLineTOP, 0.0f, VerticalRangeLineBottom );

	push	ecx
	movss	xmm0, DWORD PTR ?VerticalRangeLineBottom@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?VerticalRangeLineTOP@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 551  : 
; 552  : 	static const float horizontalLinesSpace = ALICSide / 3.0f; 

	mov	eax, DWORD PTR ?$S1@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA
	and	eax, 8
	jne	SHORT $LN12@HASDisplay
	mov	ecx, DWORD PTR ?$S1@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA
	or	ecx, 8
	mov	DWORD PTR ?$S1@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA, ecx
	movss	xmm0, DWORD PTR _ALICSide$[ebp]
	divss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR ?horizontalLinesSpace@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB, xmm0
$LN12@HASDisplay:

; 553  : 	static const float verticalLinesSpace = (HorizontalRangeLine - VerticalRangeLineBottom) / 4.0f;

	mov	edx, DWORD PTR ?$S1@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA
	and	edx, 16					; 00000010H
	jne	SHORT $LN11@HASDisplay
	mov	eax, DWORD PTR ?$S1@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA
	or	eax, 16					; 00000010H
	mov	DWORD PTR ?$S1@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4IA, eax
	movss	xmm0, DWORD PTR ?HorizontalRangeLine@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	subss	xmm0, DWORD PTR ?VerticalRangeLineBottom@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	divss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR ?verticalLinesSpace@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB, xmm0
$LN11@HASDisplay:

; 554  : 	for ( float pos = -ALICSide; pos <= ALICSide; pos += horizontalLinesSpace )

	movss	xmm0, DWORD PTR _ALICSide$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _pos$2[ebp], xmm0
	jmp	SHORT $LN10@HASDisplay
$LN9@HASDisplay:
	movss	xmm0, DWORD PTR _pos$2[ebp]
	addss	xmm0, DWORD PTR ?horizontalLinesSpace@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR _pos$2[ebp], xmm0
$LN10@HASDisplay:
	movss	xmm0, DWORD PTR _ALICSide$[ebp]
	comiss	xmm0, DWORD PTR _pos$2[ebp]
	jb	$LN8@HASDisplay

; 555  : 	{
; 556  : 		if ( fabs(pos) < (0.05f * zoomFactor)) continue; // no need to draw at the middle

	push	ecx
	movss	xmm0, DWORD PTR _pos$2[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv758[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR [ecx+152]
	comiss	xmm0, DWORD PTR tv758[ebp]
	jbe	SHORT $LN7@HASDisplay
	jmp	SHORT $LN9@HASDisplay
$LN7@HASDisplay:

; 557  :         display->Line( pos,   HorizontalRangeLine + (0.04f * zoomFactor),  pos ,  HorizontalRangeLine - (0.04f * zoomFactor) );

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3d23d70a
	mulss	xmm0, DWORD PTR [edx+152]
	movss	xmm1, DWORD PTR ?HorizontalRangeLine@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	ecx
	movss	xmm0, DWORD PTR _pos$2[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3d23d70a
	mulss	xmm0, DWORD PTR [eax+152]
	addss	xmm0, DWORD PTR ?HorizontalRangeLine@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$2[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 558  : 	}

	jmp	$LN9@HASDisplay
$LN8@HASDisplay:

; 559  : 
; 560  : 	for ( float pos = VerticalRangeLineBottom + verticalLinesSpace; pos <= VerticalRangeLineTOP - (0.2f * zoomFactor); pos += verticalLinesSpace )

	movss	xmm0, DWORD PTR ?VerticalRangeLineBottom@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	addss	xmm0, DWORD PTR ?verticalLinesSpace@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR _pos$1[ebp], xmm0
	jmp	SHORT $LN6@HASDisplay
$LN5@HASDisplay:
	movss	xmm0, DWORD PTR _pos$1[ebp]
	addss	xmm0, DWORD PTR ?verticalLinesSpace@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR _pos$1[ebp], xmm0
$LN6@HASDisplay:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3e4ccccd
	mulss	xmm0, DWORD PTR [ecx+152]
	movss	xmm1, DWORD PTR ?VerticalRangeLineTOP@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	subss	xmm1, xmm0
	comiss	xmm1, DWORD PTR _pos$1[ebp]
	jb	SHORT $LN4@HASDisplay

; 561  : 	{
; 562  : 		display->Line( (0.04f * zoomFactor) ,   pos ,  -(0.04f * zoomFactor) ,  pos );

	push	ecx
	movss	xmm0, DWORD PTR _pos$1[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3d23d70a
	mulss	xmm0, DWORD PTR [edx+152]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$1[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3d23d70a
	mulss	xmm0, DWORD PTR [eax+152]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 563  : 	}

	jmp	$LN5@HASDisplay
$LN4@HASDisplay:

; 564  : 
; 565  : 	// Write SCT-1 near the top range line
; 566  : 	display->TextCenter ( 0.15f, VerticalRangeLineTOP + 0.05f, "SCT-1", 0 );

	push	0
	push	OFFSET ??_C@_05GJNDEMGI@SCT?91?$AA@
	movss	xmm0, DWORD PTR ?VerticalRangeLineTOP@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	addss	xmm0, DWORD PTR __real@3d4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3e19999a
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 567  : 
; 568  : 	// Now we will draw the system worst scan time. each target takes 1 second until drawn, so
; 569  : 	// according to updated number of targets currently to be drawn we can decide search time
; 570  : 	int temp = HASNumTargets; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	DWORD PTR _temp$[ebp], edx

; 571  : 	minutes = temp / 60;

	mov	eax, DWORD PTR _temp$[ebp]
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	mov	DWORD PTR _minutes$[ebp], eax

; 572  : 	temp -= minutes * 60;

	mov	edx, DWORD PTR _minutes$[ebp]
	imul	edx, 60					; 0000003cH
	mov	eax, DWORD PTR _temp$[ebp]
	sub	eax, edx
	mov	DWORD PTR _temp$[ebp], eax

; 573  : 	seconds = temp;

	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _seconds$[ebp], ecx

; 574  : 	char str[8];
; 575  : 	sprintf ( str, "%d:%02d", minutes, seconds );

	mov	edx, DWORD PTR _seconds$[ebp]
	push	edx
	mov	eax, DWORD PTR _minutes$[ebp]
	push	eax
	push	OFFSET ??_C@_07COCHMHBB@?$CFd?3?$CF02d?$AA@
	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 576  : 	display->TextCenter ( -0.25f, VerticalRangeLineTOP + 0.05f, str, 0 );

	push	0
	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	movss	xmm0, DWORD PTR ?VerticalRangeLineTOP@?5??HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	addss	xmm0, DWORD PTR __real@3d4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@be800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 577  : 
; 578  : 	display->SetColor(tempColor);

	mov	eax, DWORD PTR _tempColor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 579  : 	display->AdjustOriginInViewport (0.0f, -HTS_Y_OFFSET);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 580  : 
; 581  : 	// Draw the cursors
; 582  : 	tempColor = display->Color();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+108]
	call	eax
	mov	DWORD PTR _tempColor$[ebp], eax

; 583  : 	display->SetColor( GetMfdColor( MFD_WHITE ) );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 584  : 	display->AdjustOriginInViewport (cursorX, cursorY + HTS_Y_OFFSET);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+80]
	addss	xmm0, DWORD PTR __real@bf000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+76]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 585  : 	display->Line (-CURSOR_SIZE, CURSOR_SIZE, CURSOR_SIZE, CURSOR_SIZE);

	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 586  : 	display->Line ( -CURSOR_SIZE, -CURSOR_SIZE,  CURSOR_SIZE, -CURSOR_SIZE);

	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 587  : 	display->CenterOriginInViewport ();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 588  : 	display->SetColor( tempColor );

	mov	edx, DWORD PTR _tempColor$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 589  : 	
; 590  : 	display->CenterOriginInViewport();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 591  : 
; 592  : 	//MI
; 593  : 	if(g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	SHORT $LN1@HASDisplay

; 594  : 	{
; 595  : 		if(((AircraftClass*)platform)->Sms->curWeapon && ((AircraftClass*)platform)->Sms->curWeapon->IsMissile())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+940]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@HASDisplay
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+940]
	add	ecx, 164				; 000000a4H
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	DWORD PTR tv580[ebp], eax
	mov	ecx, DWORD PTR tv580[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv580[ebp]
	mov	eax, DWORD PTR [edx+156]
	call	eax
	test	eax, eax
	je	SHORT $LN1@HASDisplay

; 596  : 		{
; 597  : 			if(((AircraftClass*)SimDriver.GetPlayerAircraft())->GetSOI() == SimVehicleClass::SOI_WEAPON)

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?GetSOI@SimVehicleClass@@QAE?AW4SOI@1@XZ ; SimVehicleClass::GetSOI
	cmp	eax, 2
	jne	SHORT $LN1@HASDisplay

; 598  : 			{  
; 599  : 				DrawBorder(); // JPO SOI

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawBorder@DrawableClass@@QAEXXZ	; DrawableClass::DrawBorder
$LN1@HASDisplay:

; 600  : 			}  
; 601  : 		}
; 602  : 	}
; 603  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?HASDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z ENDP ; HarmTargetingPod::HASDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_tempColor$ = -12					; size = 4
tv255 = -8						; size = 4
_this$ = -4						; size = 4
_activeDisplay$ = 8					; size = 4
?HADExpDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z PROC ; HarmTargetingPod::HADExpDisplay
; _this$ = ecx

; 464  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 465  : 	static const float arrowH = 0.0375f;
; 466  : 	static const float arrowW = 0.0433f;
; 467  : 
; 468  : 	display = activeDisplay;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _activeDisplay$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 469  : 
; 470  : 	// Do we draw flashing things this frame ?
; 471  : 	flash = vuxRealTime & 0x200;

	mov	edx, DWORD PTR ?vuxRealTime@@3KA	; vuxRealTime
	and	edx, 512				; 00000200H
	mov	DWORD PTR ?flash@HarmTargetingPod@@1HA, edx ; HarmTargetingPod::flash

; 472  : 	
; 473  : 	display->SetColor( 0xFF00FF00 );

	push	-16711936				; ff00ff00H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 474  : 
; 475  : 	DWORD tempColor = display->Color();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+108]
	call	edx
	mov	DWORD PTR _tempColor$[ebp], eax

; 476  : 
; 477  : 	// Draw the cursors
; 478  : 	display->SetColor( GetMfdColor( MFD_WHITE ) );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 479  : 	display->AdjustOriginInViewport ((cursorX * zoomFactor), (cursorY + HTS_Y_OFFSET) * zoomFactor);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+80]
	addss	xmm0, DWORD PTR __real@bf000000
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+152]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+76]
	mulss	xmm0, DWORD PTR [eax+152]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 480  : 	display->Line (-CURSOR_SIZE, CURSOR_SIZE, CURSOR_SIZE, CURSOR_SIZE);

	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 481  : 	display->Line ( -CURSOR_SIZE, -CURSOR_SIZE,  CURSOR_SIZE, -CURSOR_SIZE);

	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 482  : 	display->CenterOriginInViewport ();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 483  : 	display->SetColor( tempColor );

	mov	edx, DWORD PTR _tempColor$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 484  : 	
; 485  : 	display->CenterOriginInViewport();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 486  : 
; 487  : 	//MI
; 488  : 	if(g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	$LN1@HADExpDisp

; 489  : 	{
; 490  : 		if(((AircraftClass*)platform)->Sms->curWeapon && ((AircraftClass*)platform)->Sms->curWeapon->IsMissile())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+940]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@HADExpDisp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+940]
	add	ecx, 164				; 000000a4H
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	DWORD PTR tv255[ebp], eax
	mov	ecx, DWORD PTR tv255[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv255[ebp]
	mov	eax, DWORD PTR [edx+156]
	call	eax
	test	eax, eax
	je	SHORT $LN1@HADExpDisp

; 491  : 		{
; 492  : 			if(((AircraftClass*)SimDriver.GetPlayerAircraft())->GetSOI() == SimVehicleClass::SOI_WEAPON)

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?GetSOI@SimVehicleClass@@QAE?AW4SOI@1@XZ ; SimVehicleClass::GetSOI
	cmp	eax, 2
	jne	SHORT $LN1@HADExpDisp

; 493  : 			{  
; 494  : 				display->SetColor(GetMfdColor(MFD_GREEN));

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 495  : 				DrawBorder(); // JPO SOI

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawBorder@DrawableClass@@QAEXXZ	; DrawableClass::DrawBorder
$LN1@HADExpDisp:

; 496  : 			}  
; 497  : 		}
; 498  : 	}
; 499  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?HADExpDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z ENDP ; HarmTargetingPod::HADExpDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_largeArcRad$ = -56					; size = 4
_ymid$ = -52						; size = 4
_x19$ = -48						; size = 4
_secondArcRad$ = -44					; size = 4
tv654 = -40						; size = 4
_y19$ = -36						; size = 4
_x18$ = -32						; size = 4
_y18$ = -28						; size = 4
_tempColor$ = -24					; size = 4
_firstArcRad$ = -20					; size = 4
_this$ = -16						; size = 4
_str$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_activeDisplay$ = 8					; size = 4
?HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z PROC ; HarmTargetingPod::HADDisplay
; _this$ = ecx

; 358  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 359  : 	static const float arrowH = 0.0375f;
; 360  : 	static const float arrowW = 0.0433f;
; 361  : 
; 362  : 	display = activeDisplay;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _activeDisplay$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 363  : 
; 364  : 	// Do we draw flashing things this frame ?
; 365  : 	flash = vuxRealTime & 0x200;

	mov	edx, DWORD PTR ?vuxRealTime@@3KA	; vuxRealTime
	and	edx, 512				; 00000200H
	mov	DWORD PTR ?flash@HarmTargetingPod@@1HA, edx ; HarmTargetingPod::flash

; 366  : 	
; 367  : 	display->SetColor( 0xFF00FF00 );

	push	-16711936				; ff00ff00H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 368  : 
; 369  : 	display->AdjustOriginInViewport (0.0f, HTS_Y_OFFSET);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 370  : 
; 371  : 	// Ownship "airplane" marker
; 372  : 	DWORD tempColor = display->Color();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+108]
	call	eax
	mov	DWORD PTR _tempColor$[ebp], eax

; 373  : 	display->SetColor( GetMfdColor( MFD_CYAN ) );

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 374  : 	static const float	NOSE	= 0.02f;
; 375  : 	static const float	TAIL	= 0.08f;
; 376  : 	static const float	WING	= 0.06f;
; 377  : 	static const float	TAIL_WING	= 0.02f;
; 378  : 	display->Line( -WING,   0.00f,  WING,  0.00f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?WING@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?WING@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 379  : 	display->Line( -TAIL_WING,   -0.08f,  TAIL_WING,  -0.08f );

	push	ecx
	movss	xmm0, DWORD PTR __real@bda3d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?TAIL_WING@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bda3d70a
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?TAIL_WING@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 380  : 	display->Line(  0.00f, -TAIL,   0.00f,  NOSE );

	push	ecx
	movss	xmm0, DWORD PTR ?NOSE@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?TAIL@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 381  : 
; 382  : 	// JB Draw 180 degree lines
; 383  : 	//display->SetColor( 0xFF004000 );
; 384  : 	//display->Line((float) -.95, 0.0, -WING - WING, 0.0);
; 385  : 	//display->Line(WING + WING, 0.0, (float) .95, 0.0);
; 386  : 	//display->Arc(0.0, 0.0, WING + WING, 180 * DTR, 0);
; 387  : 	//display->SetColor( 0xFF00FF00 );
; 388  : 
; 389  : 	// Diplay the HAD mode blue circles at 1/3s of current range
; 390  : 	float largeArcRad = 1.0f * HTS_DISPLAY_RADIUS ;

	movss	xmm0, DWORD PTR __real@3fb33333
	movss	DWORD PTR _largeArcRad$[ebp], xmm0

; 391  : 	float secondArcRad = 0.66f * HTS_DISPLAY_RADIUS;

	movss	xmm0, DWORD PTR __real@3f6c8b44
	movss	DWORD PTR _secondArcRad$[ebp], xmm0

; 392  : 	float firstArcRad =  0.33f * HTS_DISPLAY_RADIUS;

	movss	xmm0, DWORD PTR __real@3eec8b44
	movss	DWORD PTR _firstArcRad$[ebp], xmm0

; 393  : 
; 394  : 	display->SetColor( GetMfdColor( MFD_BLUE ) );

	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 395  : 	display->Circle ( 0.0f, 0.0f, largeArcRad );

	push	ecx
	movss	xmm0, DWORD PTR _largeArcRad$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 396  : 	display->Circle ( 0.0f, 0.0f, secondArcRad );

	push	ecx
	movss	xmm0, DWORD PTR _secondArcRad$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 397  : 	display->Circle ( 0.0f, 0.0f, firstArcRad );

	push	ecx
	movss	xmm0, DWORD PTR _firstArcRad$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 398  : 
; 399  : 	display->Line ( 0.0f, firstArcRad, 0.0f, firstArcRad + 0.06f );

	movss	xmm0, DWORD PTR _firstArcRad$[ebp]
	addss	xmm0, DWORD PTR __real@3d75c28f
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _firstArcRad$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 400  : 	display->Line ( firstArcRad, 0.0f, firstArcRad + 0.06f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _firstArcRad$[ebp]
	addss	xmm0, DWORD PTR __real@3d75c28f
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _firstArcRad$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 401  : 	display->Line ( 0.0f, -firstArcRad, 0.0f, -(firstArcRad + 0.06f) );

	movss	xmm0, DWORD PTR _firstArcRad$[ebp]
	addss	xmm0, DWORD PTR __real@3d75c28f
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _firstArcRad$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 402  : 	display->Line ( -firstArcRad, 0.0f, -(firstArcRad + 0.06f), 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _firstArcRad$[ebp]
	addss	xmm0, DWORD PTR __real@3d75c28f
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _firstArcRad$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 403  : 
; 404  : 	display->SetColor ( tempColor );

	mov	ecx, DWORD PTR _tempColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 405  : 	display->AdjustOriginInViewport (0.0f, -HTS_Y_OFFSET);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 406  : 
; 407  : 	// Display the missile effective footprint
; 408  : 	ShiAssert( platform->IsAirplane() );
; 409  : 	if (((AircraftClass*)platform)->Sms->curWeapon &&
; 410  : 	((AircraftClass*)platform)->Sms->curWeaponType == wtAgm88)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+940]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@HADDisplay
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+940]
	cmp	DWORD PTR [ecx+148], 3
	jne	SHORT $LN4@HADDisplay

; 411  : 	{
; 412  : 		ShiAssert( ((AircraftClass*)platform)->Sms->curWeapon->IsMissile() );
; 413  : 		DrawWEZ( (MissileClass*)((AircraftClass*)platform)->Sms->GetCurrentWeapon() );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+940]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawWEZ@HarmTargetingPod@@IAEXPAVMissileClass@@@Z ; HarmTargetingPod::DrawWEZ
$LN4@HADDisplay:

; 414  : 	}
; 415  : 
; 416  : 	// Draw the cursors
; 417  :     tempColor = display->Color();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+108]
	call	eax
	mov	DWORD PTR _tempColor$[ebp], eax

; 418  : 	display->SetColor( GetMfdColor( MFD_WHITE ) );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 419  : 	display->AdjustOriginInViewport ((cursorX * zoomFactor), (cursorY + HTS_Y_OFFSET) * zoomFactor);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+80]
	addss	xmm0, DWORD PTR __real@bf000000
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+152]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+76]
	mulss	xmm0, DWORD PTR [ecx+152]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 420  : 	display->Line (-CURSOR_SIZE, CURSOR_SIZE, CURSOR_SIZE, CURSOR_SIZE);

	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 421  : 	display->Line ( -CURSOR_SIZE, -CURSOR_SIZE,  CURSOR_SIZE, -CURSOR_SIZE);

	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 422  : 	display->CenterOriginInViewport ();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 423  : 	display->SetColor( tempColor );

	mov	ecx, DWORD PTR _tempColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 424  : 	
; 425  : 	float x18, y18;
; 426  : 	float x19, y19;
; 427  : 	GetButtonPos(18, &x18, &y18);

	lea	ecx, DWORD PTR _y18$[ebp]
	push	ecx
	lea	edx, DWORD PTR _x18$[ebp]
	push	edx
	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetButtonPos@DrawableClass@@QAEXHPAM0@Z ; DrawableClass::GetButtonPos

; 428  : 	GetButtonPos(19, &x19, &y19);

	lea	eax, DWORD PTR _y19$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x19$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetButtonPos@DrawableClass@@QAEXHPAM0@Z ; DrawableClass::GetButtonPos

; 429  : 	float ymid = y18 + (y19-y18)/2;

	movss	xmm0, DWORD PTR _y19$[ebp]
	subss	xmm0, DWORD PTR _y18$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR _y18$[ebp]
	movss	DWORD PTR _ymid$[ebp], xmm0

; 430  : 	
; 431  : 	// Add range and arrows
; 432  : 	char str[8];
; 433  : 	sprintf(str,"%3d",trueDisplayRange);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+120]
	push	eax
	push	OFFSET ??_C@_03GOOLIKIF@?$CF3d?$AA@
	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 434  : 	ShiAssert (strlen(str) < sizeof(str));
; 435  : 	display->TextLeftVertical(x18, ymid, str);

	push	0
	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _ymid$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x18$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+64]
	call	edx

; 436  : 	
; 437  : 	// up arrow
; 438  : 	display->AdjustOriginInViewport(x19 + arrowW, y19 + arrowH/2);

	movss	xmm0, DWORD PTR ?arrowH@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	divss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR _y19$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x19$[ebp]
	addss	xmm0, DWORD PTR ?arrowW@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 439  : 	display->Tri (0.0F, arrowH, arrowW, -arrowH, -arrowW, -arrowH);

	movss	xmm0, DWORD PTR ?arrowH@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?arrowW@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?arrowH@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?arrowW@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?arrowH@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 440  : 	
; 441  : 	// down arrow
; 442  : 	display->CenterOriginInViewport ();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 443  : 	display->AdjustOriginInViewport( x18 + arrowW, y18 - arrowH/2);

	movss	xmm0, DWORD PTR ?arrowH@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR _y18$[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	xmm0, DWORD PTR _x18$[ebp]
	addss	xmm0, DWORD PTR ?arrowW@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 444  : 	display->Tri (0.0F, -arrowH, arrowW, arrowH, -arrowW, arrowH);

	push	ecx
	movss	xmm0, DWORD PTR ?arrowH@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?arrowW@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?arrowH@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?arrowW@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?arrowH@?1??HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+36]
	call	edx

; 445  : 
; 446  : 	display->CenterOriginInViewport();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 447  : 
; 448  : 	//MI
; 449  : 	if(g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	$LN1@HADDisplay

; 450  : 	{
; 451  : 		if(((AircraftClass*)platform)->Sms->curWeapon && ((AircraftClass*)platform)->Sms->curWeapon->IsMissile())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+940]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@HADDisplay
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+940]
	add	ecx, 164				; 000000a4H
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	DWORD PTR tv654[ebp], eax
	mov	ecx, DWORD PTR tv654[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv654[ebp]
	mov	eax, DWORD PTR [edx+156]
	call	eax
	test	eax, eax
	je	SHORT $LN1@HADDisplay

; 452  : 		{
; 453  : 			if(((AircraftClass*)SimDriver.GetPlayerAircraft())->GetSOI() == SimVehicleClass::SOI_WEAPON)

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?GetSOI@SimVehicleClass@@QAE?AW4SOI@1@XZ ; SimVehicleClass::GetSOI
	cmp	eax, 2
	jne	SHORT $LN1@HADDisplay

; 454  : 			{  
; 455  : 				display->SetColor(GetMfdColor(MFD_GREEN));

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 456  : 				DrawBorder(); // JPO SOI

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawBorder@DrawableClass@@QAEXXZ	; DrawableClass::DrawBorder
$LN1@HADDisplay:

; 457  : 			}  
; 458  : 		}
; 459  : 	}
; 460  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?HADDisplay@HarmTargetingPod@@UAEXPAVVirtualDisplay@@@Z ENDP ; HarmTargetingPod::HADDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
tv690 = -248						; size = 8
tv700 = -240						; size = 8
tv805 = -232						; size = 8
tv709 = -224						; size = 8
tv795 = -216						; size = 8
tv739 = -208						; size = 8
_bottom$2 = -200					; size = 4
_emitters$ = -196					; size = 12
_next$3 = -184						; size = 4
tv813 = -180						; size = 4
tv842 = -176						; size = 4
tv840 = -172						; size = 4
tv844 = -168						; size = 4
_next$4 = -164						; size = 4
tv818 = -160						; size = 4
tv838 = -156						; size = 4
$T5 = -152						; size = 4
tv748 = -148						; size = 4
tv826 = -144						; size = 4
_top$6 = -140						; size = 4
_prevElement$ = -136					; size = 4
tv801 = -132						; size = 4
tv229 = -128						; size = 4
tv791 = -124						; size = 4
tv261 = -120						; size = 4
_localData$ = -116					; size = 4
tv269 = -112						; size = 4
tv735 = -108						; size = 4
tv247 = -104						; size = 4
tv207 = -100						; size = 4
tv276 = -96						; size = 4
tv705 = -92						; size = 4
tv268 = -88						; size = 4
tv696 = -84						; size = 4
tv252 = -80						; size = 4
tv686 = -76						; size = 4
tv236 = -72						; size = 4
tv284 = -68						; size = 4
tv224 = -64						; size = 4
tv283 = -60						; size = 4
tv337 = -56						; size = 4
_trackType$ = -52					; size = 4
_yMove$ = -48						; size = 4
tv460 = -44						; size = 4
_xMove$ = -40						; size = 4
_curSimObj$ = -36					; size = 4
_curObj$7 = -32						; size = 4
_FCC$ = -28						; size = 4
_curEmitter$8 = -24					; size = 4
_tmpElement$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
?Exec@HarmTargetingPod@@UAEPAVSimObjectType@@PAV2@@Z PROC ; HarmTargetingPod::Exec
; _this$ = ecx

; 832  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Exec@HarmTargetingPod@@UAEPAVSimObjectType@@PAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 236				; 000000ecH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 833  : 	FireControlComputer* FCC = ((SimVehicleClass*)platform)->GetFCC();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax+460]
	call	edx
	mov	DWORD PTR _FCC$[ebp], eax

; 834  : 	GroundListElement* tmpElement;
; 835  : 	GroundListElement* prevElement = NULL;

	mov	DWORD PTR _prevElement$[ebp], 0

; 836  : 	SimBaseClass* curSimObj;
; 837  : 	SimObjectLocalData* localData;
; 838  : 	VuListIterator emitters (EmitterList);

	mov	eax, DWORD PTR ?EmitterList@@3PAVFalconPrivateList@@A ; EmitterList
	push	eax
	lea	ecx, DWORD PTR _emitters$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 839  : 	int trackType;
; 840  : 
; 841  : 	float xMove = 0.0F, yMove = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _xMove$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _yMove$[ebp], xmm0

; 842  : 
; 843  : 	if ((FCC->cursorXCmd != 0) || (FCC->cursorYCmd != 0))

	mov	ecx, DWORD PTR _FCC$[ebp]
	cmp	DWORD PTR [ecx+196], 0
	jne	SHORT $LN43@Exec
	mov	edx, DWORD PTR _FCC$[ebp]
	cmp	DWORD PTR [edx+200], 0
	je	SHORT $LN41@Exec
$LN43@Exec:

; 844  : 		if ((IO.AnalogIsUsed(AXIS_CURSOR_X) == true) && (IO.AnalogIsUsed(AXIS_CURSOR_Y) == true))

	push	11					; 0000000bH
	mov	ecx, OFFSET ?IO@@3VSIMLIB_IO_CLASS@@A	; IO
	call	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN42@Exec
	push	12					; 0000000cH
	mov	ecx, OFFSET ?IO@@3VSIMLIB_IO_CLASS@@A	; IO
	call	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
	movzx	ecx, al
	cmp	ecx, 1
	jne	SHORT $LN42@Exec

; 845  : 		{
; 846  : 			yMove = (float)FCC->cursorYCmd / 10000.0F;

	mov	edx, DWORD PTR _FCC$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+200]
	divss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR _yMove$[ebp], xmm0

; 847  : 			xMove = (float)FCC->cursorXCmd / 10000.0F;

	mov	eax, DWORD PTR _FCC$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+196]
	divss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR _xMove$[ebp], xmm0

; 848  : 		}
; 849  : 		else

	jmp	SHORT $LN41@Exec
$LN42@Exec:

; 850  : 		{
; 851  : 			yMove = (float)FCC->cursorYCmd;

	mov	ecx, DWORD PTR _FCC$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+200]
	movss	DWORD PTR _yMove$[ebp], xmm0

; 852  : 			xMove = (float)FCC->cursorXCmd;

	mov	edx, DWORD PTR _FCC$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+196]
	movss	DWORD PTR _xMove$[ebp], xmm0
$LN41@Exec:

; 853  : 		}
; 854  : 
; 855  : 	// Validate our locked target
; 856  : 	CheckLockedTarget();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 857  : 
; 858  : 	// Cursor Control
; 859  : 	//MI
; 860  : 	if(!g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	jne	SHORT $LN40@Exec

; 861  : 	{
; 862  : 		cursorX += xMove * g_fCursorSpeed * HTS_CURSOR_RATE * zoomFactor * SimLibMajorFrameTime;

	movss	xmm0, DWORD PTR _xMove$[ebp]
	mulss	xmm0, DWORD PTR ?g_fCursorSpeed@@3MA
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+152]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+76]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+76], xmm0

; 863  : 		cursorY += yMove * g_fCursorSpeed * HTS_CURSOR_RATE * zoomFactor * SimLibMajorFrameTime;

	movss	xmm0, DWORD PTR _yMove$[ebp]
	mulss	xmm0, DWORD PTR ?g_fCursorSpeed@@3MA
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+152]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+80]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+80], xmm0

; 864  : 	}
; 865  : 
; 866  : 	else

	jmp	SHORT $LN38@Exec
$LN40@Exec:

; 867  : 	{
; 868  : 		if(((AircraftClass*)SimDriver.GetPlayerAircraft()) && ((AircraftClass*)SimDriver.GetPlayerAircraft())->GetSOI() == SimVehicleClass::SOI_WEAPON)

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN38@Exec
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?GetSOI@SimVehicleClass@@QAE?AW4SOI@1@XZ ; SimVehicleClass::GetSOI
	cmp	eax, 2
	jne	SHORT $LN38@Exec

; 869  : 		{
; 870  : 			cursorX += xMove * g_fCursorSpeed * HTS_CURSOR_RATE * SimLibMajorFrameTime;

	movss	xmm0, DWORD PTR _xMove$[ebp]
	mulss	xmm0, DWORD PTR ?g_fCursorSpeed@@3MA
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+76]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+76], xmm0

; 871  : 			cursorY += yMove * g_fCursorSpeed * HTS_CURSOR_RATE * SimLibMajorFrameTime;

	movss	xmm0, DWORD PTR _yMove$[ebp]
	mulss	xmm0, DWORD PTR ?g_fCursorSpeed@@3MA
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+80]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+80], xmm0
$LN38@Exec:

; 872  : 		}
; 873  : 	}
; 874  : 
; 875  : 	if ( submode == HAS )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+168], 1
	jne	$LN37@Exec

; 876  : 	{
; 877  :     cursorX = min ( max (cursorX, -(0.75f) * zoomFactor), (0.75f * zoomFactor));

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+76]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@bf400000
	mulss	xmm1, DWORD PTR [edx+152]
	comiss	xmm0, xmm1
	jbe	SHORT $LN47@Exec
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+76]
	movss	DWORD PTR tv207[ebp], xmm0
	jmp	SHORT $LN48@Exec
$LN47@Exec:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf400000
	mulss	xmm0, DWORD PTR [ecx+152]
	movss	DWORD PTR tv207[ebp], xmm0
$LN48@Exec:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f400000
	mulss	xmm0, DWORD PTR [edx+152]
	comiss	xmm0, DWORD PTR tv207[ebp]
	jbe	SHORT $LN51@Exec
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+76]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@bf400000
	mulss	xmm1, DWORD PTR [ecx+152]
	comiss	xmm0, xmm1
	jbe	SHORT $LN49@Exec
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+76]
	movss	DWORD PTR tv224[ebp], xmm0
	jmp	SHORT $LN50@Exec
$LN49@Exec:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf400000
	mulss	xmm0, DWORD PTR [eax+152]
	movss	DWORD PTR tv224[ebp], xmm0
$LN50@Exec:
	movss	xmm0, DWORD PTR tv224[ebp]
	movss	DWORD PTR tv229[ebp], xmm0
	jmp	SHORT $LN52@Exec
$LN51@Exec:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f400000
	mulss	xmm0, DWORD PTR [ecx+152]
	movss	DWORD PTR tv229[ebp], xmm0
$LN52@Exec:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv229[ebp]
	movss	DWORD PTR [edx+76], xmm0

; 878  : 		cursorY = min ( max (cursorY, 0.0f), (1.05f * zoomFactor));

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+80]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN53@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+80]
	movss	DWORD PTR tv236[ebp], xmm0
	jmp	SHORT $LN54@Exec
$LN53@Exec:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv236[ebp], xmm0
$LN54@Exec:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f866666
	mulss	xmm0, DWORD PTR [edx+152]
	comiss	xmm0, DWORD PTR tv236[ebp]
	jbe	SHORT $LN57@Exec
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+80]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN55@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+80]
	movss	DWORD PTR tv247[ebp], xmm0
	jmp	SHORT $LN56@Exec
$LN55@Exec:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv247[ebp], xmm0
$LN56@Exec:
	movss	xmm0, DWORD PTR tv247[ebp]
	movss	DWORD PTR tv252[ebp], xmm0
	jmp	SHORT $LN58@Exec
$LN57@Exec:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f866666
	mulss	xmm0, DWORD PTR [edx+152]
	movss	DWORD PTR tv252[ebp], xmm0
$LN58@Exec:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv252[ebp]
	movss	DWORD PTR [eax+80], xmm0
	jmp	$LN35@Exec
$LN37@Exec:

; 879  : 	}
; 880  : 
; 881  : 	else if ( submode == HAD )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+168], 5
	jne	$LN35@Exec

; 882  : 	{
; 883  : 		cursorX = min ( max (cursorX, -(0.95f)), 0.95f );

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+76]
	comiss	xmm0, DWORD PTR __real@bf733333
	jbe	SHORT $LN59@Exec
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+76]
	movss	DWORD PTR tv261[ebp], xmm0
	jmp	SHORT $LN60@Exec
$LN59@Exec:
	movss	xmm0, DWORD PTR __real@bf733333
	movss	DWORD PTR tv261[ebp], xmm0
$LN60@Exec:
	movss	xmm0, DWORD PTR __real@3f733333
	comiss	xmm0, DWORD PTR tv261[ebp]
	jbe	SHORT $LN63@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+76]
	comiss	xmm0, DWORD PTR __real@bf733333
	jbe	SHORT $LN61@Exec
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+76]
	movss	DWORD PTR tv268[ebp], xmm0
	jmp	SHORT $LN62@Exec
$LN61@Exec:
	movss	xmm0, DWORD PTR __real@bf733333
	movss	DWORD PTR tv268[ebp], xmm0
$LN62@Exec:
	movss	xmm0, DWORD PTR tv268[ebp]
	movss	DWORD PTR tv269[ebp], xmm0
	jmp	SHORT $LN64@Exec
$LN63@Exec:
	movss	xmm0, DWORD PTR __real@3f733333
	movss	DWORD PTR tv269[ebp], xmm0
$LN64@Exec:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv269[ebp]
	movss	DWORD PTR [eax+76], xmm0

; 884  : 		cursorY = min ( max (cursorY, -0.5f), 1.5f );

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+80]
	comiss	xmm0, DWORD PTR __real@bf000000
	jbe	SHORT $LN65@Exec
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+80]
	movss	DWORD PTR tv276[ebp], xmm0
	jmp	SHORT $LN66@Exec
$LN65@Exec:
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR tv276[ebp], xmm0
$LN66@Exec:
	movss	xmm0, DWORD PTR __real@3fc00000
	comiss	xmm0, DWORD PTR tv276[ebp]
	jbe	SHORT $LN69@Exec
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+80]
	comiss	xmm0, DWORD PTR __real@bf000000
	jbe	SHORT $LN67@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+80]
	movss	DWORD PTR tv283[ebp], xmm0
	jmp	SHORT $LN68@Exec
$LN67@Exec:
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR tv283[ebp], xmm0
$LN68@Exec:
	movss	xmm0, DWORD PTR tv283[ebp]
	movss	DWORD PTR tv284[ebp], xmm0
	jmp	SHORT $LN70@Exec
$LN69@Exec:
	movss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR tv284[ebp], xmm0
$LN70@Exec:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv284[ebp]
	movss	DWORD PTR [edx+80], xmm0
$LN35@Exec:

; 885  : 	}
; 886  : 
; 887  : 	FCC->UpdatePlanned();

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?UpdatePlanned@FireControlComputer@@QAEXXZ ; FireControlComputer::UpdatePlanned

; 888  : 	tmpElement = FCC->GetFirstGroundElement();

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetFirstGroundElement@FireControlComputer@@QAEPAVGroundListElement@@XZ ; FireControlComputer::GetFirstGroundElement
	mov	DWORD PTR _tmpElement$[ebp], eax
$LN72@Exec:

; 889  : 	// Go through the list of emmitters and update the data
; 890  : 	while (tmpElement)

	cmp	DWORD PTR _tmpElement$[ebp], 0
	je	$LN33@Exec

; 891  : 	{
; 892  : 		// Handle sim/camp hand off
; 893  : 		tmpElement->HandoffBaseObject();

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?HandoffBaseObject@GroundListElement@@QAEXXZ ; GroundListElement::HandoffBaseObject

; 894  : 
; 895  : 		// Removed?  (We really shouldn't do this -- once detected, things shouldn't disappear, just never emit)
; 896  : 		if (!tmpElement->BaseObject())

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	test	eax, eax
	jne	SHORT $LN32@Exec

; 897  : 		{
; 898  : 		    tmpElement = tmpElement->next;

	mov	eax, DWORD PTR _tmpElement$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tmpElement$[ebp], ecx

; 899  : 			continue;

	jmp	SHORT $LN72@Exec
$LN32@Exec:

; 900  : 		}
; 901  : 		
; 902  : 		// Time out our guidance flag
; 903  : 		if (SimLibElapsedTime > tmpElement->lastHit + RadarClass::TrackUpdateTime * 2.5f)

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR tv686[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv686[ebp]
	mov	eax, DWORD PTR tv686[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv690[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv690[ebp]
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR tv696[ebp], edx
	cvtsi2sd xmm1, DWORD PTR tv696[ebp]
	mov	eax, DWORD PTR tv696[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv700[ebp], xmm1
	cvtsd2ss xmm1, QWORD PTR tv700[ebp]
	mov	ecx, DWORD PTR ?TrackUpdateTime@RadarClass@@2KB ; RadarClass::TrackUpdateTime
	mov	DWORD PTR tv705[ebp], ecx
	cvtsi2sd xmm2, DWORD PTR tv705[ebp]
	mov	edx, DWORD PTR tv705[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm2, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv709[ebp], xmm2
	cvtsd2ss xmm2, QWORD PTR tv709[ebp]
	mulss	xmm2, DWORD PTR __real@40200000
	addss	xmm1, xmm2
	comiss	xmm0, xmm1
	jbe	SHORT $LN31@Exec

; 904  : 		{
; 905  : 		    tmpElement->ClearFlag(GroundListElement::Launch);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?ClearFlag@GroundListElement@@QAEXH@Z	; GroundListElement::ClearFlag
$LN31@Exec:

; 906  : 		}
; 907  : 		
; 908  : 		// Time out our track flag
; 909  : 		if (SimLibElapsedTime > tmpElement->lastHit + TRACK_CYCLE)

	mov	eax, DWORD PTR _tmpElement$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, DWORD PTR ?TRACK_CYCLE@RwrClass@@2HB ; RwrClass::TRACK_CYCLE
	cmp	DWORD PTR ?SimLibElapsedTime@@3KA, ecx	; SimLibElapsedTime
	jbe	SHORT $LN30@Exec

; 910  : 		{
; 911  : 		    tmpElement->ClearFlag(GroundListElement::Track);

	push	8
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?ClearFlag@GroundListElement@@QAEXH@Z	; GroundListElement::ClearFlag
$LN30@Exec:

; 912  : 		}
; 913  : 		
; 914  : 		// Time out our radiate flag
; 915  : 		if (SimLibElapsedTime > tmpElement->lastHit + RADIATE_CYCLE)

	mov	edx, DWORD PTR _tmpElement$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, DWORD PTR ?RADIATE_CYCLE@RwrClass@@2HB ; RwrClass::RADIATE_CYCLE
	cmp	DWORD PTR ?SimLibElapsedTime@@3KA, eax	; SimLibElapsedTime
	jbe	SHORT $LN29@Exec

; 916  : 		{
; 917  : 		    tmpElement->ClearFlag(GroundListElement::Radiate);

	push	4
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?ClearFlag@GroundListElement@@QAEXH@Z	; GroundListElement::ClearFlag
$LN29@Exec:

; 918  : 		}
; 919  : 		
; 920  : 		prevElement = tmpElement;

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	mov	DWORD PTR _prevElement$[ebp], ecx

; 921  : 		tmpElement = tmpElement->next;

	mov	edx, DWORD PTR _tmpElement$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _tmpElement$[ebp], eax

; 922  : 	}

	jmp	$LN72@Exec
$LN33@Exec:

; 923  : 
; 924  : 	// Walk our list marking things as unchecked
; 925  : 	for (tmpElement = FCC->GetFirstGroundElement(); tmpElement; tmpElement = tmpElement->GetNext())

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetFirstGroundElement@FireControlComputer@@QAEPAVGroundListElement@@XZ ; FireControlComputer::GetFirstGroundElement
	mov	DWORD PTR _tmpElement$[ebp], eax
	jmp	SHORT $LN28@Exec
$LN27@Exec:
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?GetNext@GroundListElement@@QAEPAV1@XZ	; GroundListElement::GetNext
	mov	DWORD PTR _tmpElement$[ebp], eax
$LN28@Exec:
	cmp	DWORD PTR _tmpElement$[ebp], 0
	je	SHORT $LN26@Exec

; 926  : 	{
; 927  : 	    tmpElement->SetFlag(GroundListElement::UnChecked);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?SetFlag@GroundListElement@@QAEXH@Z	; GroundListElement::SetFlag

; 928  :     }

	jmp	SHORT $LN27@Exec
$LN26@Exec:

; 929  : 
; 930  : 	// Check the target list for 'pings'
; 931  : 	for (SimObjectType *curObj = platform->targetList, *next; curObj != NULL; curObj = next)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+660]
	mov	DWORD PTR _curObj$7[ebp], eax
	jmp	SHORT $LN25@Exec
$LN24@Exec:
	mov	ecx, DWORD PTR _next$4[ebp]
	mov	DWORD PTR _curObj$7[ebp], ecx
$LN25@Exec:
	cmp	DWORD PTR _curObj$7[ebp], 0
	je	$LN23@Exec

; 932  : 	{
; 933  : 		next = curObj->next;

	mov	edx, DWORD PTR _curObj$7[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _next$4[ebp], eax

; 934  : 		// sfr: taking my chances
; 935  : 		/*if (F4IsBadReadPtr(curObj, sizeof(SimObjectType)) || F4IsBadCodePtr((FARPROC) curObj->BaseData()))
; 936  : 		{
; 937  : 			// JB 010318 CTD
; 938  : 			curObj = curObj->next;
; 939  : 			continue;
; 940  : 		} */
; 941  : 
; 942  : 		if (curObj->BaseData()->IsSim() && curObj->BaseData()->GetRadarType())

	mov	ecx, DWORD PTR _curObj$7[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	$LN18@Exec
	mov	ecx, DWORD PTR _curObj$7[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv337[ebp], eax
	mov	ecx, DWORD PTR tv337[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv337[ebp]
	mov	eax, DWORD PTR [edx+292]
	call	eax
	test	eax, eax
	je	$LN18@Exec

; 943  : 		{
; 944  : 			// Localize the info
; 945  : 			curSimObj = (SimBaseClass*)curObj->BaseData();

	mov	ecx, DWORD PTR _curObj$7[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR _curSimObj$[ebp], eax

; 946  : 			localData = curObj->localData;

	mov	ecx, DWORD PTR _curObj$7[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _localData$[ebp], edx

; 947  : 			
; 948  : 			// Is it time to hear this one again?
; 949  : 			if (SimLibElapsedTime > localData->sensorLoopCount[HTS] + curSimObj->RdrCycleTime() * SEC_TO_MSEC)

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR tv735[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv735[ebp]
	mov	ecx, DWORD PTR tv735[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv739[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv739[ebp]
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _localData$[ebp]
	cvtsi2ss xmm1, DWORD PTR [eax+edx+164]
	mov	ecx, DWORD PTR _curSimObj$[ebp]
	movss	DWORD PTR tv838[ebp], xmm0
	movss	DWORD PTR tv840[ebp], xmm1
	call	?RdrCycleTime@SimBaseClass@@QAEMXZ	; SimBaseClass::RdrCycleTime
	fstp	DWORD PTR tv748[ebp]
	movss	xmm0, DWORD PTR tv748[ebp]
	mulss	xmm0, DWORD PTR __real@447a0000
	movss	xmm1, DWORD PTR tv840[ebp]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv838[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN21@Exec

; 950  : 			{
; 951  : 				// Can we hear it?
; 952  : 				if (BeingPainted(curObj) && CanDetectObject(curObj))

	mov	ecx, DWORD PTR _curObj$7[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BeingPainted@RwrClass@@IAEHPAVSimObjectType@@@Z ; RwrClass::BeingPainted
	test	eax, eax
	je	SHORT $LN20@Exec
	mov	edx, DWORD PTR _curObj$7[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CanDetectObject@RwrClass@@QAEHPAVSimObjectType@@@Z ; RwrClass::CanDetectObject
	test	eax, eax
	je	SHORT $LN20@Exec

; 953  : 				{
; 954  : 					ObjectDetected(curObj->BaseData(), Track_Ping);

	push	0
	push	1
	mov	ecx, DWORD PTR _curObj$7[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax

; 955  : 					localData->sensorLoopCount[HTS] = SimLibElapsedTime;

	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _localData$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [edx+ecx+164], eax
$LN20@Exec:

; 956  : 				}
; 957  : 			}
; 958  : 			else

	jmp	SHORT $LN18@Exec
$LN21@Exec:

; 959  : 			{
; 960  : 			    tmpElement = FindEmmitter( curSimObj );

	mov	ecx, DWORD PTR _curSimObj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindEmmitter@HarmTargetingPod@@IAEPAVGroundListElement@@PAVFalconEntity@@@Z ; HarmTargetingPod::FindEmmitter
	mov	DWORD PTR _tmpElement$[ebp], eax

; 961  : 				if (tmpElement){

	cmp	DWORD PTR _tmpElement$[ebp], 0
	je	SHORT $LN18@Exec

; 962  : 					tmpElement->ClearFlag(GroundListElement::UnChecked);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?ClearFlag@GroundListElement@@QAEXH@Z	; GroundListElement::ClearFlag
$LN18@Exec:

; 963  : 				}
; 964  : 			}
; 965  : 		}
; 966  : 	}

	jmp	$LN24@Exec
$LN23@Exec:

; 967  : 	
; 968  : 	// Check the emitter list
; 969  : 	for ( CampBaseClass *curEmitter = (CampBaseClass*)emitters.GetFirst(), *next; 

	lea	ecx, DWORD PTR _emitters$[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _curEmitter$8[ebp], eax

; 970  : 		  curEmitter; 

	jmp	SHORT $LN17@Exec
$LN16@Exec:

; 971  : 		  curEmitter = next )

	mov	edx, DWORD PTR _next$3[ebp]
	mov	DWORD PTR _curEmitter$8[ebp], edx
$LN17@Exec:
	cmp	DWORD PTR _curEmitter$8[ebp], 0
	je	$LN15@Exec

; 972  : 	{
; 973  : 		next = static_cast<CampBaseClass*>(emitters.GetNext());

	lea	ecx, DWORD PTR _emitters$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _next$3[ebp], eax

; 974  : 
; 975  : 		// Check if aggregated unit can detect
; 976  : 		if (
; 977  : 			curEmitter->IsAggregate() &&                      // A campaign thing
; 978  : 			curEmitter->CanDetect(platform) &&                // That has us spotted
; 979  : 			curEmitter->GetRadarMode() != FEC_RADAR_OFF &&    // And is emmitting
; 980  : 			// JB 011016 CanDetectObject (platform))          // And there is line of sight
; 981  : 			CanDetectObject(curEmitter)                       // And there is line of sight // JB 011016 
; 982  : 			)

	mov	ecx, DWORD PTR _curEmitter$8[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	je	$LN14@Exec
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _curEmitter$8[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _curEmitter$8[ebp]
	mov	edx, DWORD PTR [eax+424]
	call	edx
	test	eax, eax
	je	$LN14@Exec
	mov	eax, DWORD PTR _curEmitter$8[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _curEmitter$8[ebp]
	mov	eax, DWORD PTR [edx+128]
	call	eax
	test	eax, eax
	je	SHORT $LN14@Exec
	mov	ecx, DWORD PTR _curEmitter$8[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CanDetectObject@RwrClass@@IAEHPAVFalconEntity@@@Z ; RwrClass::CanDetectObject
	test	eax, eax
	je	SHORT $LN14@Exec

; 983  : 		{
; 984  : 			// What type of hit is this?
; 985  : 			switch (curEmitter->GetRadarMode())

	mov	edx, DWORD PTR _curEmitter$8[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _curEmitter$8[ebp]
	mov	edx, DWORD PTR [eax+128]
	call	edx
	mov	DWORD PTR tv460[ebp], eax
	mov	eax, DWORD PTR tv460[ebp]
	sub	eax, 1
	mov	DWORD PTR tv460[ebp], eax
	cmp	DWORD PTR tv460[ebp], 5
	ja	SHORT $LN8@Exec
	mov	ecx, DWORD PTR tv460[ebp]
	jmp	DWORD PTR $LN74@Exec[ecx*4]
$LN11@Exec:

; 986  : 			{
; 987  : 			  case FEC_RADAR_SEARCH_1:
; 988  : 			  case FEC_RADAR_SEARCH_2:
; 989  : 			  case FEC_RADAR_SEARCH_3:
; 990  : 			  case FEC_RADAR_SEARCH_100:
; 991  : 				trackType = Track_Ping;

	mov	DWORD PTR _trackType$[ebp], 1

; 992  : 				break;

	jmp	SHORT $LN12@Exec
$LN10@Exec:

; 993  : 				
; 994  : 			  case FEC_RADAR_AQUIRE:
; 995  : 				trackType = Track_Lock;

	mov	DWORD PTR _trackType$[ebp], 3

; 996  : 				break;

	jmp	SHORT $LN12@Exec
$LN9@Exec:

; 997  : 				
; 998  : 			  case FEC_RADAR_GUIDE:
; 999  : 				trackType = Track_Launch;

	mov	DWORD PTR _trackType$[ebp], 5

; 1000 : 				break;

	jmp	SHORT $LN12@Exec
$LN8@Exec:

; 1001 : 				
; 1002 : 			  default:
; 1003 : 				// Probably means its off...
; 1004 : 				trackType = Track_Unlock;

	mov	DWORD PTR _trackType$[ebp], 2
$LN12@Exec:

; 1005 : 				break;
; 1006 : 			}
; 1007 : 			
; 1008 : 			// Add it to the list (if the list isn't full)
; 1009 : 			ObjectDetected(curEmitter, trackType);

	push	0
	mov	edx, DWORD PTR _trackType$[ebp]
	push	edx
	mov	eax, DWORD PTR _curEmitter$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
$LN14@Exec:

; 1010 : 		}
; 1011 : 	}

	jmp	$LN16@Exec
$LN15@Exec:

; 1012 : 
; 1013 : 	// Walk our list looking for unchecked Sim things
; 1014 : 	for (tmpElement = FCC->GetFirstGroundElement(); tmpElement; tmpElement = tmpElement->GetNext())

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetFirstGroundElement@FireControlComputer@@QAEPAVGroundListElement@@XZ ; FireControlComputer::GetFirstGroundElement
	mov	DWORD PTR _tmpElement$[ebp], eax
	jmp	SHORT $LN7@Exec
$LN6@Exec:
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?GetNext@GroundListElement@@QAEPAV1@XZ	; GroundListElement::GetNext
	mov	DWORD PTR _tmpElement$[ebp], eax
$LN7@Exec:
	cmp	DWORD PTR _tmpElement$[ebp], 0
	je	$LN5@Exec

; 1015 : 	{
; 1016 : 		if ( tmpElement->BaseObject() &&
; 1017 : 		     tmpElement->BaseObject()->IsSim() &&
; 1018 : 		     (tmpElement->IsSet(GroundListElement::UnChecked)) &&
; 1019 : 			 SimLibElapsedTime > 
; 1020 : 			 tmpElement->lastHit + ((SimBaseClass*)(tmpElement->BaseObject()))->RdrCycleTime() * SEC_TO_MSEC
; 1021 : 			)

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	test	eax, eax
	je	$LN2@Exec
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	$LN2@Exec
	push	32					; 00000020H
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?IsSet@GroundListElement@@QAEHH@Z	; GroundListElement::IsSet
	test	eax, eax
	je	$LN2@Exec
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR tv791[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv791[ebp]
	mov	edx, DWORD PTR tv791[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv795[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv795[ebp]
	mov	eax, DWORD PTR _tmpElement$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv801[ebp], ecx
	cvtsi2sd xmm1, DWORD PTR tv801[ebp]
	mov	edx, DWORD PTR tv801[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv805[ebp], xmm1
	cvtsd2ss xmm1, QWORD PTR tv805[ebp]
	mov	ecx, DWORD PTR _tmpElement$[ebp]
	movss	DWORD PTR tv842[ebp], xmm0
	movss	DWORD PTR tv844[ebp], xmm1
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	ecx, eax
	call	?RdrCycleTime@SimBaseClass@@QAEMXZ	; SimBaseClass::RdrCycleTime
	fstp	DWORD PTR tv813[ebp]
	movss	xmm0, DWORD PTR tv813[ebp]
	mulss	xmm0, DWORD PTR __real@447a0000
	movss	xmm1, DWORD PTR tv844[ebp]
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv842[ebp]
	comiss	xmm0, xmm1
	jbe	$LN2@Exec

; 1022 : 		{
; 1023 : 			curSimObj = (SimBaseClass*)(tmpElement->BaseObject());

	mov	ecx, DWORD PTR _tmpElement$[ebp]
	call	?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ; GroundListElement::BaseObject
	mov	DWORD PTR _curSimObj$[ebp], eax

; 1024 : 			if (curSimObj->RdrRng()){

	mov	ecx, DWORD PTR _curSimObj$[ebp]
	call	?RdrRng@SimBaseClass@@QAEMXZ		; SimBaseClass::RdrRng
	fstp	DWORD PTR tv818[ebp]
	movss	xmm0, DWORD PTR tv818[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@Exec

; 1025 : 				float top, bottom;
; 1026 : 				
; 1027 : 				// Check LOS
; 1028 : 				// See if the target is near the ground
; 1029 : 				OTWDriver.GetAreaFloorAndCeiling(&bottom, &top);

	lea	eax, DWORD PTR _top$6[ebp]
	push	eax
	lea	ecx, DWORD PTR _bottom$2[ebp]
	push	ecx
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetAreaFloorAndCeiling@OTWDriverClass@@QAEXPAM0@Z ; OTWDriverClass::GetAreaFloorAndCeiling

; 1030 : 				if (curSimObj->ZPos() < top || OTWDriver.CheckLOS(platform, curSimObj)){

	mov	ecx, DWORD PTR _curSimObj$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv826[ebp]
	movss	xmm0, DWORD PTR _top$6[ebp]
	comiss	xmm0, DWORD PTR tv826[ebp]
	ja	SHORT $LN1@Exec
	mov	edx, DWORD PTR _curSimObj$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?CheckLOS@OTWDriverClass@@QAEHPAVFalconEntity@@0@Z ; OTWDriverClass::CheckLOS
	test	eax, eax
	je	SHORT $LN2@Exec
$LN1@Exec:

; 1031 : 					ObjectDetected(curSimObj, Track_Ping);

	push	0
	push	1
	mov	edx, DWORD PTR _curSimObj$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
$LN2@Exec:

; 1032 : 				}
; 1033 : 			}
; 1034 : 		}
; 1035 : 	}

	jmp	$LN6@Exec
$LN5@Exec:

; 1036 : 	
; 1037 : 	return NULL;

	mov	DWORD PTR $T5[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _emitters$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	eax, DWORD PTR $T5[ebp]

; 1038 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN74@Exec:
	DD	$LN11@Exec
	DD	$LN11@Exec
	DD	$LN11@Exec
	DD	$LN11@Exec
	DD	$LN10@Exec
	DD	$LN9@Exec
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Exec@HarmTargetingPod@@UAEPAVSimObjectType@@PAV2@@Z$0:
	lea	ecx, DWORD PTR _emitters$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?Exec@HarmTargetingPod@@UAEPAVSimObjectType@@PAV2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-240]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Exec@HarmTargetingPod@@UAEPAVSimObjectType@@PAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Exec@HarmTargetingPod@@UAEPAVSimObjectType@@PAV2@@Z ENDP ; HarmTargetingPod::Exec
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_yawTrig$ = -32						; size = 8
tv177 = -24						; size = 4
tv183 = -20						; size = 4
tv167 = -16						; size = 4
tv181 = -12						; size = 4
_range$ = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?GetAGCenter@HarmTargetingPod@@UAEXPAM0@Z PROC		; HarmTargetingPod::GetAGCenter
; _this$ = ecx

; 1373 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1374 : mlTrig yawTrig;
; 1375 : float range = displayRange * NM_TO_FT/HTS_DISPLAY_RADIUS;

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+116]
	mulss	xmm0, DWORD PTR __real@45bde1b0
	divss	xmm0, DWORD PTR __real@3fb33333
	movss	DWORD PTR _range$[ebp], xmm0

; 1376 : 
; 1377 : 	mlSinCos( &yawTrig, platform->Yaw() );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _yawTrig$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 1378 : 	
; 1379 : 	*x = (cursorY*yawTrig.cos - cursorX*yawTrig.sin) * range + platform->XPos();

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+80]
	mulss	xmm0, DWORD PTR _yawTrig$[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+76]
	mulss	xmm1, DWORD PTR _yawTrig$[ebp]
	subss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _range$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv181[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv167[ebp]
	movss	xmm0, DWORD PTR tv181[ebp]
	addss	xmm0, DWORD PTR tv167[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0

; 1380 : 	*y = (cursorY*yawTrig.sin + cursorX*yawTrig.cos) * range + platform->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+80]
	mulss	xmm0, DWORD PTR _yawTrig$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+76]
	mulss	xmm1, DWORD PTR _yawTrig$[ebp+4]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _range$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv183[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv177[ebp]
	movss	xmm0, DWORD PTR tv183[ebp]
	addss	xmm0, DWORD PTR tv177[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1381 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetAGCenter@HarmTargetingPod@@UAEXPAM0@Z ENDP		; HarmTargetingPod::GetAGCenter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1HarmTargetingPod@@UAE@XZ PROC			; HarmTargetingPod::~HarmTargetingPod
; _this$ = ecx

; 71   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7HarmTargetingPod@@6B@

; 72   : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RwrClass@@UAE@XZ			; RwrClass::~RwrClass
	mov	esp, ebp
	pop	ebp
	ret	0
??1HarmTargetingPod@@UAE@XZ ENDP			; HarmTargetingPod::~HarmTargetingPod
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\rwr\harmpod.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_idx$ = 8						; size = 4
_self$ = 12						; size = 4
??0HarmTargetingPod@@QAE@HPAVSimMoverClass@@@Z PROC	; HarmTargetingPod::HarmTargetingPod
; _this$ = ecx

; 42   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0HarmTargetingPod@@QAE@HPAVSimMoverClass@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _self$[ebp]
	push	eax
	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0RwrClass@@QAE@HPAVSimMoverClass@@@Z	; RwrClass::RwrClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7HarmTargetingPod@@6B@

; 43   : 	sensorType			= HTS;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 4

; 44   : 	cursorX				= 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+76], xmm0

; 45   : 	cursorY				= 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+80], xmm0

; 46   : 	displayRange		= 60;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+116], 60			; 0000003cH

; 47   : 	trueDisplayRange	= 60;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+120], 60			; 0000003cH

; 48   : 	zoomFactor			= 1.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+152], xmm0

; 49   : 	HadZoomFactor		= 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+156], xmm0

; 50   : 	zoomMode			= Wide;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+176], 0

; 51   : 	HadZoomMode			= NORM;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], 0

; 52   : 	preHandoffMode		= Has;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+224], 0

; 53   : 	filterMode			= ALL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+184], 0

; 54   : 	curTarget			= NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+220], 0

; 55   : 	POSTargetIndex		= -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+144], -1

; 56   : 	handedoff			= false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+112], 0

; 57   : 	handoffRefTime		= 0x0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+160], 0

; 58   : 	HASTimer			= 0x0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+164], 0

; 59   : 	HASNumTargets		= 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+148], 0

; 60   : 	HadOrigCursorX		= 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+84], xmm0

; 61   : 	HadOrigCursorY		= 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+88], xmm0

; 62   : 	HadOrigCursorX2		= 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+92], xmm0

; 63   : 	HadOrigCursorY2		= 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+96], xmm0

; 64   : 	yawBackup			= 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+100], xmm0

; 65   : 
; 66   : 	ClearDTSB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearDTSB@HarmTargetingPod@@IAEXXZ	; HarmTargetingPod::ClearDTSB

; 67   : 	ClearPOSTargets();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearPOSTargets@HarmTargetingPod@@IAEXXZ ; HarmTargetingPod::ClearPOSTargets

; 68   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0HarmTargetingPod@@QAE@HPAVSimMoverClass@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1RwrClass@@UAE@XZ			; RwrClass::~RwrClass
__ehhandler$??0HarmTargetingPod@@QAE@HPAVSimMoverClass@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0HarmTargetingPod@@QAE@HPAVSimMoverClass@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0HarmTargetingPod@@QAE@HPAVSimMoverClass@@@Z ENDP	; HarmTargetingPod::HarmTargetingPod
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\object.h
;	COMDAT ?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ PROC	; SimObjectType::BaseData, COMDAT
; _this$ = ecx

; 92   : 	FalconEntity* BaseData(void) { return baseData.get(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ENDP	; SimObjectType::BaseData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?AddGroundElement@FireControlComputer@@QAEXPAVGroundListElement@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_add$ = 8						; size = 4
?AddGroundElement@FireControlComputer@@QAEXPAVGroundListElement@@@Z PROC ; FireControlComputer::AddGroundElement, COMDAT
; _this$ = ecx

; 306  : 	void AddGroundElement(GroundListElement *add) { add->next = grndlist; grndlist = add; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+412]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _add$[ebp]
	mov	DWORD PTR [eax+412], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?AddGroundElement@FireControlComputer@@QAEXPAVGroundListElement@@@Z ENDP ; FireControlComputer::AddGroundElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?GetFirstGroundElement@FireControlComputer@@QAEPAVGroundListElement@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFirstGroundElement@FireControlComputer@@QAEPAVGroundListElement@@XZ PROC ; FireControlComputer::GetFirstGroundElement, COMDAT
; _this$ = ecx

; 305  : 	GroundListElement *GetFirstGroundElement() { return grndlist; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+412]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstGroundElement@FireControlComputer@@QAEPAVGroundListElement@@XZ ENDP ; FireControlComputer::GetFirstGroundElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?ClearFlag@GroundListElement@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?ClearFlag@GroundListElement@@QAEXH@Z PROC		; GroundListElement::ClearFlag, COMDAT
; _this$ = ecx

; 46   :     void ClearFlag (int flag) { flags &= ~flag; } ;

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _flag$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearFlag@GroundListElement@@QAEXH@Z ENDP		; GroundListElement::ClearFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?IsSet@GroundListElement@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_flag$ = 8						; size = 4
?IsSet@GroundListElement@@QAEHH@Z PROC			; GroundListElement::IsSet, COMDAT
; _this$ = ecx

; 45   :     int IsSet (int flag) { return (flags & flag) ? 1 : 0; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsSet
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSet
$LN3@IsSet:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSet:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSet@GroundListElement@@QAEHH@Z ENDP			; GroundListElement::IsSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?SetFlag@GroundListElement@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetFlag@GroundListElement@@QAEXH@Z PROC		; GroundListElement::SetFlag, COMDAT
; _this$ = ecx

; 44   :     void SetFlag(int flag) { flags |= flag; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	or	ecx, DWORD PTR _flag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFlag@GroundListElement@@QAEXH@Z ENDP		; GroundListElement::SetFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?GetNext@GroundListElement@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNext@GroundListElement@@QAEPAV1@XZ PROC		; GroundListElement::GetNext, COMDAT
; _this$ = ecx

; 30   :     GroundListElement *GetNext () { return next; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNext@GroundListElement@@QAEPAV1@XZ ENDP		; GroundListElement::GetNext
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ PROC ; GroundListElement::BaseObject, COMDAT
; _this$ = ecx

; 29   :     FalconEntity*	BaseObject(void) {return baseObject;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?BaseObject@GroundListElement@@QAEPAVFalconEntity@@XZ ENDP ; GroundListElement::BaseObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?GetDisplay@SensorClass@@UAEPAVVirtualDisplay@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDisplay@SensorClass@@UAEPAVVirtualDisplay@@XZ PROC	; SensorClass::GetDisplay, COMDAT
; _this$ = ecx

; 55   : 	VirtualDisplay*	GetDisplay(void)                        { return privateDisplay; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDisplay@SensorClass@@UAEPAVVirtualDisplay@@XZ ENDP	; SensorClass::GetDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?TargetUnderCursor@SensorClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?TargetUnderCursor@SensorClass@@UAE?AVVU_ID@@XZ PROC	; SensorClass::TargetUnderCursor, COMDAT
; _this$ = ecx

; 53   : 	virtual VU_ID TargetUnderCursor (void)                  { return targetUnderCursor; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [eax+40]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?TargetUnderCursor@SensorClass@@UAE?AVVU_ID@@XZ ENDP	; SensorClass::TargetUnderCursor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?SetSeekerPos@SensorClass@@UAEXMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newAz$ = 8						; size = 4
_newEl$ = 12						; size = 4
?SetSeekerPos@SensorClass@@UAEXMM@Z PROC		; SensorClass::SetSeekerPos, COMDAT
; _this$ = ecx

; 51   : 	virtual void SetSeekerPos (float newAz, float newEl)	{ seekerAzCenter = newAz; seekerElCenter = newEl; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _newAz$[ebp]
	movss	DWORD PTR [eax+56], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _newEl$[ebp]
	movss	DWORD PTR [ecx+60], xmm0
	mov	esp, ebp
	pop	ebp
	ret	8
?SetSeekerPos@SensorClass@@UAEXMM@Z ENDP		; SensorClass::SetSeekerPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?UpdateState@SensorClass@@UAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?UpdateState@SensorClass@@UAEXHH@Z PROC			; SensorClass::UpdateState, COMDAT
; _this$ = ecx

; 50   : 	virtual void UpdateState(int, int)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?UpdateState@SensorClass@@UAEXHH@Z ENDP			; SensorClass::UpdateState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?ExecModes@SensorClass@@UAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?ExecModes@SensorClass@@UAEXHH@Z PROC			; SensorClass::ExecModes, COMDAT
; _this$ = ecx

; 49   : 	virtual void ExecModes(int, int)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?ExecModes@SensorClass@@UAEXHH@Z ENDP			; SensorClass::ExecModes
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?IsOn@SensorClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOn@SensorClass@@UAEHXZ PROC				; SensorClass::IsOn, COMDAT
; _this$ = ecx

; 40   : 	virtual BOOL			IsOn(void)				{ return isOn; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsOn@SensorClass@@UAEHXZ ENDP				; SensorClass::IsOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?SetPower@SensorClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 4
?SetPower@SensorClass@@UAEXH@Z PROC			; SensorClass::SetPower, COMDAT
; _this$ = ecx

; 39   : 	virtual void	SetPower (BOOL state)	{ isOn = state; if (!isOn) ClearSensorTarget(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+52], ecx
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+52], 0
	jne	SHORT $LN2@SetPower
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
$LN2@SetPower:
	mov	esp, ebp
	pop	ebp
	ret	4
?SetPower@SensorClass@@UAEXH@Z ENDP			; SensorClass::SetPower
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?SetType@SensorClass@@UAEXW4SensorType@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_senstype$ = 8						; size = 4
?SetType@SensorClass@@UAEXW4SensorType@1@@Z PROC	; SensorClass::SetType, COMDAT
; _this$ = ecx

; 37   : 	virtual void	SetType(SensorType senstype)		{ sensorType = senstype; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _senstype$[ebp]
	mov	DWORD PTR [eax+68], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetType@SensorClass@@UAEXW4SensorType@1@@Z ENDP	; SensorClass::SetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?IsAggregate@CampBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAggregate@CampBaseClass@@QAEHXZ PROC			; CampBaseClass::IsAggregate, COMDAT
; _this$ = ecx

; 278  : 	int IsAggregate (void)						{	return local_flags & CBC_AGGREGATE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+156]
	and	eax, 128				; 00000080H
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAggregate@CampBaseClass@@QAEHXZ ENDP			; CampBaseClass::IsAggregate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simveh.h
;	COMDAT ?GetSOI@SimVehicleClass@@QAE?AW4SOI@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSOI@SimVehicleClass@@QAE?AW4SOI@1@XZ PROC		; SimVehicleClass::GetSOI, COMDAT
; _this$ = ecx

; 64   : 	SOI GetSOI(void)	{return curSOI;};	//MI

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+724]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSOI@SimVehicleClass@@QAE?AW4SOI@1@XZ ENDP		; SimVehicleClass::GetSOI
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?CenterOriginInViewport@VirtualDisplay@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CenterOriginInViewport@VirtualDisplay@@QAEXXZ PROC	; VirtualDisplay::CenterOriginInViewport, COMDAT
; _this$ = ecx

; 143  : 	void CenterOriginInViewport( void )  { dmatrix.translationX = 0.0f; dmatrix.translationY = 0.0f; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+68], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+72], xmm0
	mov	esp, ebp
	pop	ebp
	ret	0
?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ENDP	; VirtualDisplay::CenterOriginInViewport
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetPrevWP@WayPointClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPrevWP@WayPointClass@@QAEPAV1@XZ PROC		; WayPointClass::GetPrevWP, COMDAT
; _this$ = ecx

; 176  : 	WayPoint GetPrevWP (void)						{ return PrevWP; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPrevWP@WayPointClass@@QAEPAV1@XZ ENDP		; WayPointClass::GetPrevWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetNextWP@WayPointClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNextWP@WayPointClass@@QAEPAV1@XZ PROC		; WayPointClass::GetNextWP, COMDAT
; _this$ = ecx

; 175  : 	WayPoint GetNextWP (void)						{ return NextWP; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextWP@WayPointClass@@QAEPAV1@XZ ENDP		; WayPointClass::GetNextWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPAction@WayPointClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPAction@WayPointClass@@QAEHXZ PROC			; WayPointClass::GetWPAction, COMDAT
; _this$ = ecx

; 170  : 	int GetWPAction(void)							{ return (int)Action; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPAction@WayPointClass@@QAEHXZ ENDP			; WayPointClass::GetWPAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ PROC ; VuBin<SimWeaponClass>::operator->, COMDAT
; _this$ = ecx

; 50   : 	E *operator->() const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 52   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ENDP ; VuBin<SimWeaponClass>::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ PROC		; VuBin<SimWeaponClass>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ ENDP		; VuBin<SimWeaponClass>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?RdrRng@SimBaseClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RdrRng@SimBaseClass@@QAEMXZ PROC			; SimBaseClass::RdrRng, COMDAT
; _this$ = ecx

; 225  : 	float RdrRng (void) {return specialData.rdrNominalRng;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+156]
	mov	esp, ebp
	pop	ebp
	ret	0
?RdrRng@SimBaseClass@@QAEMXZ ENDP			; SimBaseClass::RdrRng
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?RdrCycleTime@SimBaseClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RdrCycleTime@SimBaseClass@@QAEMXZ PROC			; SimBaseClass::RdrCycleTime, COMDAT
; _this$ = ecx

; 224  : 	float RdrCycleTime (void) {return specialData.rdrCycleTime;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+168]
	mov	esp, ebp
	pop	ebp
	ret	0
?RdrCycleTime@SimBaseClass@@QAEMXZ ENDP			; SimBaseClass::RdrCycleTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?mlSinCos@@YAXPAUmlTrig@@M@Z
_TEXT	SEGMENT
_trig$ = 8						; size = 4
_angle$ = 12						; size = 4
?mlSinCos@@YAXPAUmlTrig@@M@Z PROC			; mlSinCos, COMDAT

; 12   : {

	push	ebp
	mov	ebp, esp

; 13   : #if defined(_MSC_VER)
; 14   : 	__asm 
; 15   : 	{
; 16   : 		__asm	mov     ecx, trig;

	mov	ecx, DWORD PTR _trig$[ebp]

; 17   : 		__asm	fld     dword ptr [angle];

	fld	DWORD PTR _angle$[ebp]

; 18   : 		__asm	fsincos;

	fsincos

; 19   : 		__asm	fstp    dword ptr [ecx]trig.cos;

	fstp	DWORD PTR [ecx+4]

; 20   : 		__asm	fstp    dword ptr [ecx]trig.sin;

	fstp	DWORD PTR [ecx]

; 21   : 	}
; 22   : #else
; 23   : 	trig->sin = (Float32)sin(angle);
; 24   : 	trig->cos = (Float32)cos(angle);
; 25   : #endif
; 26   : }

	pop	ebp
	ret	0
?mlSinCos@@YAXPAUmlTrig@@M@Z ENDP			; mlSinCos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSim@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsSim@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsSim, COMDAT
; _this$ = ecx

; 103  : 		{return (falconType & FalconSimEntity) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	and	ecx, 2
	je	SHORT $LN3@IsSim
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSim
$LN3@IsSim:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSim:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSim@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Yaw@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Yaw@VuEntity@@QBEMXZ PROC				; VuEntity::Yaw, COMDAT
; _this$ = ecx

; 164  : 	SM_SCALAR Yaw() const { return orient_.yaw_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?Yaw@VuEntity@@QBEMXZ ENDP				; VuEntity::Yaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?atan@@YAMM@Z PROC					; atan, COMDAT

; 505  :         {return (atanf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atanf
	add	esp, 4
	pop	ebp
	ret	0
?atan@@YAMM@Z ENDP					; atan
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 404  :         {return ((float)atan((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_atanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
