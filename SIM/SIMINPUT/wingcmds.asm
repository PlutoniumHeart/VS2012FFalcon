; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\SIMINPUT\wingcmds.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
_DATA	SEGMENT
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_DATA	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
CONST	SEGMENT
_NEAR_CLIP DD	03f800000r			; 1
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??8VU_ID@@QBE_NABV0@@Z				; VU_ID::operator==
PUBLIC	??9VU_ID@@QBE_NABV0@@Z				; VU_ID::operator!=
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	?WingmanClearSix@@YAXKHPAX@Z			; WingmanClearSix
PUBLIC	?ElementClearSix@@YAXKHPAX@Z			; ElementClearSix
PUBLIC	?FlightClearSix@@YAXKHPAX@Z			; FlightClearSix
PUBLIC	?WingmanCheckSix@@YAXKHPAX@Z			; WingmanCheckSix
PUBLIC	?ElementCheckSix@@YAXKHPAX@Z			; ElementCheckSix
PUBLIC	?FlightCheckSix@@YAXKHPAX@Z			; FlightCheckSix
PUBLIC	?WingmanBreakLeft@@YAXKHPAX@Z			; WingmanBreakLeft
PUBLIC	?ElementBreakLeft@@YAXKHPAX@Z			; ElementBreakLeft
PUBLIC	?FlightBreakLeft@@YAXKHPAX@Z			; FlightBreakLeft
PUBLIC	?WingmanBreakRight@@YAXKHPAX@Z			; WingmanBreakRight
PUBLIC	?ElementBreakRight@@YAXKHPAX@Z			; ElementBreakRight
PUBLIC	?FlightBreakRight@@YAXKHPAX@Z			; FlightBreakRight
PUBLIC	?WingmanPince@@YAXKHPAX@Z			; WingmanPince
PUBLIC	?ElementPince@@YAXKHPAX@Z			; ElementPince
PUBLIC	?FlightPince@@YAXKHPAX@Z			; FlightPince
PUBLIC	?WingmanPosthole@@YAXKHPAX@Z			; WingmanPosthole
PUBLIC	?ElementPosthole@@YAXKHPAX@Z			; ElementPosthole
PUBLIC	?FlightPosthole@@YAXKHPAX@Z			; FlightPosthole
PUBLIC	?WingmanChainsaw@@YAXKHPAX@Z			; WingmanChainsaw
PUBLIC	?ElementChainsaw@@YAXKHPAX@Z			; ElementChainsaw
PUBLIC	?FlightChainsaw@@YAXKHPAX@Z			; FlightChainsaw
PUBLIC	?WingmanFlex@@YAXKHPAX@Z			; WingmanFlex
PUBLIC	?ElementFlex@@YAXKHPAX@Z			; ElementFlex
PUBLIC	?FlightFlex@@YAXKHPAX@Z				; FlightFlex
PUBLIC	?WingmanGoShooterMode@@YAXKHPAX@Z		; WingmanGoShooterMode
PUBLIC	?ElementGoShooterMode@@YAXKHPAX@Z		; ElementGoShooterMode
PUBLIC	?FlightGoShooterMode@@YAXKHPAX@Z		; FlightGoShooterMode
PUBLIC	?WingmanGoCoverMode@@YAXKHPAX@Z			; WingmanGoCoverMode
PUBLIC	?ElementGoCoverMode@@YAXKHPAX@Z			; ElementGoCoverMode
PUBLIC	?FlightGoCoverMode@@YAXKHPAX@Z			; FlightGoCoverMode
PUBLIC	?WingmanSearchGround@@YAXKHPAX@Z		; WingmanSearchGround
PUBLIC	?ElementSearchGround@@YAXKHPAX@Z		; ElementSearchGround
PUBLIC	?FlightSearchGround@@YAXKHPAX@Z			; FlightSearchGround
PUBLIC	?WingmanSearchAir@@YAXKHPAX@Z			; WingmanSearchAir
PUBLIC	?ElementSearchAir@@YAXKHPAX@Z			; ElementSearchAir
PUBLIC	?FlightSearchAir@@YAXKHPAX@Z			; FlightSearchAir
PUBLIC	?WingmanResumeNormal@@YAXKHPAX@Z		; WingmanResumeNormal
PUBLIC	?ElementResumeNormal@@YAXKHPAX@Z		; ElementResumeNormal
PUBLIC	?FlightResumeNormal@@YAXKHPAX@Z			; FlightResumeNormal
PUBLIC	?WingmanRejoin@@YAXKHPAX@Z			; WingmanRejoin
PUBLIC	?ElementRejoin@@YAXKHPAX@Z			; ElementRejoin
PUBLIC	?FlightRejoin@@YAXKHPAX@Z			; FlightRejoin
PUBLIC	?WingmanDesignateTarget@@YAXKHPAX@Z		; WingmanDesignateTarget
PUBLIC	?ElementDesignateTarget@@YAXKHPAX@Z		; ElementDesignateTarget
PUBLIC	?FlightDesignateTarget@@YAXKHPAX@Z		; FlightDesignateTarget
PUBLIC	?WingmanDesignateGroup@@YAXKHPAX@Z		; WingmanDesignateGroup
PUBLIC	?ElementDesignateGroup@@YAXKHPAX@Z		; ElementDesignateGroup
PUBLIC	?FlightDesignateGroup@@YAXKHPAX@Z		; FlightDesignateGroup
PUBLIC	?WingmanWeaponsHold@@YAXKHPAX@Z			; WingmanWeaponsHold
PUBLIC	?ElementWeaponsHold@@YAXKHPAX@Z			; ElementWeaponsHold
PUBLIC	?FlightWeaponsHold@@YAXKHPAX@Z			; FlightWeaponsHold
PUBLIC	?WingmanWeaponsFree@@YAXKHPAX@Z			; WingmanWeaponsFree
PUBLIC	?ElementWeaponsFree@@YAXKHPAX@Z			; ElementWeaponsFree
PUBLIC	?FlightWeaponsFree@@YAXKHPAX@Z			; FlightWeaponsFree
PUBLIC	?WingmanSpread@@YAXKHPAX@Z			; WingmanSpread
PUBLIC	?ElementSpread@@YAXKHPAX@Z			; ElementSpread
PUBLIC	?FlightSpread@@YAXKHPAX@Z			; FlightSpread
PUBLIC	?WingmanStack@@YAXKHPAX@Z			; WingmanStack
PUBLIC	?ElementStack@@YAXKHPAX@Z			; ElementStack
PUBLIC	?FlightStack@@YAXKHPAX@Z			; FlightStack
PUBLIC	?WingmanLadder@@YAXKHPAX@Z			; WingmanLadder
PUBLIC	?ElementLadder@@YAXKHPAX@Z			; ElementLadder
PUBLIC	?FlightLadder@@YAXKHPAX@Z			; FlightLadder
PUBLIC	?WingmanFluid@@YAXKHPAX@Z			; WingmanFluid
PUBLIC	?ElementFluid@@YAXKHPAX@Z			; ElementFluid
PUBLIC	?FlightFluid@@YAXKHPAX@Z			; FlightFluid
PUBLIC	?WingmanWedge@@YAXKHPAX@Z			; WingmanWedge
PUBLIC	?ElementWedge@@YAXKHPAX@Z			; ElementWedge
PUBLIC	?FlightWedge@@YAXKHPAX@Z			; FlightWedge
PUBLIC	?WingmanTrail@@YAXKHPAX@Z			; WingmanTrail
PUBLIC	?ElementTrail@@YAXKHPAX@Z			; ElementTrail
PUBLIC	?FlightTrail@@YAXKHPAX@Z			; FlightTrail
PUBLIC	?WingmanResCell@@YAXKHPAX@Z			; WingmanResCell
PUBLIC	?ElementResCell@@YAXKHPAX@Z			; ElementResCell
PUBLIC	?FlightResCell@@YAXKHPAX@Z			; FlightResCell
PUBLIC	?WingmanBox@@YAXKHPAX@Z				; WingmanBox
PUBLIC	?ElementBox@@YAXKHPAX@Z				; ElementBox
PUBLIC	?FlightBox@@YAXKHPAX@Z				; FlightBox
PUBLIC	?WingmanArrow@@YAXKHPAX@Z			; WingmanArrow
PUBLIC	?ElementArrow@@YAXKHPAX@Z			; ElementArrow
PUBLIC	?FlightArrow@@YAXKHPAX@Z			; FlightArrow
PUBLIC	?WingmanKickout@@YAXKHPAX@Z			; WingmanKickout
PUBLIC	?ElementKickout@@YAXKHPAX@Z			; ElementKickout
PUBLIC	?FlightKickout@@YAXKHPAX@Z			; FlightKickout
PUBLIC	?WingmanCloseup@@YAXKHPAX@Z			; WingmanCloseup
PUBLIC	?ElementCloseup@@YAXKHPAX@Z			; ElementCloseup
PUBLIC	?FlightCloseup@@YAXKHPAX@Z			; FlightCloseup
PUBLIC	?WingmanToggleSide@@YAXKHPAX@Z			; WingmanToggleSide
PUBLIC	?ElementToggleSide@@YAXKHPAX@Z			; ElementToggleSide
PUBLIC	?FlightToggleSide@@YAXKHPAX@Z			; FlightToggleSide
PUBLIC	?WingmanIncreaseRelAlt@@YAXKHPAX@Z		; WingmanIncreaseRelAlt
PUBLIC	?ElementIncreaseRelAlt@@YAXKHPAX@Z		; ElementIncreaseRelAlt
PUBLIC	?FlightIncreaseRelAlt@@YAXKHPAX@Z		; FlightIncreaseRelAlt
PUBLIC	?WingmanDecreaseRelAlt@@YAXKHPAX@Z		; WingmanDecreaseRelAlt
PUBLIC	?ElementDecreaseRelAlt@@YAXKHPAX@Z		; ElementDecreaseRelAlt
PUBLIC	?FlightDecreaseRelAlt@@YAXKHPAX@Z		; FlightDecreaseRelAlt
PUBLIC	?WingmanVic@@YAXKHPAX@Z				; WingmanVic
PUBLIC	?ElementVic@@YAXKHPAX@Z				; ElementVic
PUBLIC	?FlightVic@@YAXKHPAX@Z				; FlightVic
PUBLIC	?WingmanFinger4@@YAXKHPAX@Z			; WingmanFinger4
PUBLIC	?ElementFinger4@@YAXKHPAX@Z			; ElementFinger4
PUBLIC	?FlightFinger4@@YAXKHPAX@Z			; FlightFinger4
PUBLIC	?WingmanEchelon@@YAXKHPAX@Z			; WingmanEchelon
PUBLIC	?ElementEchelon@@YAXKHPAX@Z			; ElementEchelon
PUBLIC	?FlightEchelon@@YAXKHPAX@Z			; FlightEchelon
PUBLIC	?WingmanForm1@@YAXKHPAX@Z			; WingmanForm1
PUBLIC	?ElementForm1@@YAXKHPAX@Z			; ElementForm1
PUBLIC	?FlightForm1@@YAXKHPAX@Z			; FlightForm1
PUBLIC	?WingmanForm2@@YAXKHPAX@Z			; WingmanForm2
PUBLIC	?ElementForm2@@YAXKHPAX@Z			; ElementForm2
PUBLIC	?FlightForm2@@YAXKHPAX@Z			; FlightForm2
PUBLIC	?WingmanForm3@@YAXKHPAX@Z			; WingmanForm3
PUBLIC	?ElementForm3@@YAXKHPAX@Z			; ElementForm3
PUBLIC	?FlightForm3@@YAXKHPAX@Z			; FlightForm3
PUBLIC	?WingmanForm4@@YAXKHPAX@Z			; WingmanForm4
PUBLIC	?ElementForm4@@YAXKHPAX@Z			; ElementForm4
PUBLIC	?FlightForm4@@YAXKHPAX@Z			; FlightForm4
PUBLIC	?WingmanGiveBra@@YAXKHPAX@Z			; WingmanGiveBra
PUBLIC	?ElementGiveBra@@YAXKHPAX@Z			; ElementGiveBra
PUBLIC	?FlightGiveBra@@YAXKHPAX@Z			; FlightGiveBra
PUBLIC	?WingmanGiveStatus@@YAXKHPAX@Z			; WingmanGiveStatus
PUBLIC	?ElementGiveStatus@@YAXKHPAX@Z			; ElementGiveStatus
PUBLIC	?FlightGiveStatus@@YAXKHPAX@Z			; FlightGiveStatus
PUBLIC	?WingmanGiveDamageReport@@YAXKHPAX@Z		; WingmanGiveDamageReport
PUBLIC	?ElementGiveDamageReport@@YAXKHPAX@Z		; ElementGiveDamageReport
PUBLIC	?FlightGiveDamageReport@@YAXKHPAX@Z		; FlightGiveDamageReport
PUBLIC	?WingmanGiveFuelState@@YAXKHPAX@Z		; WingmanGiveFuelState
PUBLIC	?ElementGiveFuelState@@YAXKHPAX@Z		; ElementGiveFuelState
PUBLIC	?FlightGiveFuelState@@YAXKHPAX@Z		; FlightGiveFuelState
PUBLIC	?WingmanGiveWeaponsCheck@@YAXKHPAX@Z		; WingmanGiveWeaponsCheck
PUBLIC	?ElementGiveWeaponsCheck@@YAXKHPAX@Z		; ElementGiveWeaponsCheck
PUBLIC	?FlightGiveWeaponsCheck@@YAXKHPAX@Z		; FlightGiveWeaponsCheck
PUBLIC	?WingmanDropStores@@YAXKHPAX@Z			; WingmanDropStores
PUBLIC	?ElementDropStores@@YAXKHPAX@Z			; ElementDropStores
PUBLIC	?FlightDropStores@@YAXKHPAX@Z			; FlightDropStores
PUBLIC	?WingmanRTB@@YAXKHPAX@Z				; WingmanRTB
PUBLIC	?ElementRTB@@YAXKHPAX@Z				; ElementRTB
PUBLIC	?FlightRTB@@YAXKHPAX@Z				; FlightRTB
PUBLIC	?IsSOI@DrawableClass@@QAEHXZ			; DrawableClass::IsSOI
PUBLIC	?Type@SensorClass@@QAE?AW4SensorType@1@XZ	; SensorClass::Type
PUBLIC	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
PUBLIC	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ	; SimObjectType::BaseData
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?DisplayType@MissileDisplayClass@@QAEHXZ	; MissileDisplayClass::DisplayType
PUBLIC	?FindAircraftTarget@@YA?AVVU_ID@@PAVAircraftClass@@@Z ; FindAircraftTarget
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z:PROC	; AiSendPlayerCommand
EXTRN	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z:PROC ; FindSensor
EXTRN	?FindIDUnderCursor@HarmTargetingPod@@QAE?AVVU_ID@@XZ:PROC ; HarmTargetingPod::FindIDUnderCursor
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?FindLaserPod@@YAPAVSensorClass@@PAVSimMoverClass@@@Z:PROC ; FindLaserPod
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
$T1 = -108						; size = 8
$T2 = -100						; size = 8
$T3 = -92						; size = 8
$T4 = -84						; size = 8
$T5 = -76						; size = 8
$T6 = -68						; size = 8
$T7 = -60						; size = 8
$T8 = -52						; size = 8
$T9 = -44						; size = 8
$T10 = -36						; size = 8
_tgtId$ = -28						; size = 8
_theHtS$ = -20						; size = 4
_theRadar$ = -16					; size = 4
_theMissile$ = -12					; size = 4
_tPodDisplay$ = -8					; size = 4
_mslDisplay$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_theAC$ = 12						; size = 4
?FindAircraftTarget@@YA?AVVU_ID@@PAVAircraftClass@@@Z PROC ; FindAircraftTarget

; 593  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH

; 594  : VU_ID tgtId = FalconNullId;

	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR _tgtId$[ebp], eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR _tgtId$[ebp+4], ecx

; 595  : MissileClass* theMissile = NULL;

	mov	DWORD PTR _theMissile$[ebp], 0

; 596  : SensorClass* mslDisplay = NULL;

	mov	DWORD PTR _mslDisplay$[ebp], 0

; 597  : SensorClass* tPodDisplay = tPodDisplay = FindLaserPod (theAC);;

	mov	edx, DWORD PTR _theAC$[ebp]
	push	edx
	call	?FindLaserPod@@YAPAVSensorClass@@PAVSimMoverClass@@@Z ; FindLaserPod
	add	esp, 4
	mov	DWORD PTR _tPodDisplay$[ebp], eax
	mov	eax, DWORD PTR _tPodDisplay$[ebp]
	mov	DWORD PTR _tPodDisplay$[ebp], eax

; 598  : RadarClass* theRadar = (RadarClass*) FindSensor (theAC, SensorClass::Radar);

	push	1
	mov	ecx, DWORD PTR _theAC$[ebp]
	push	ecx
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRadar$[ebp], eax

; 599  : 
; 600  : // 2000-11-15 ADDED BY S.G. SO PADLOCKED OBJECT CAN BE TARGETED FIRST
; 601  : 	if (OTWDriver.mpPadlockPriorityObject) {

	cmp	DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33804, 0
	je	SHORT $LN21@FindAircra

; 602  : 		if (!OTWDriver.mpPadlockPriorityObject->IsMissile()) {

	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33804
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33804
	mov	edx, DWORD PTR [eax+156]
	call	edx
	test	eax, eax
	jne	SHORT $LN21@FindAircra

; 603  : 			tgtId = OTWDriver.mpPadlockPriorityObject->Id();

	lea	eax, DWORD PTR $T10[ebp]
	push	eax
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33804
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _tgtId$[ebp], ecx
	mov	DWORD PTR _tgtId$[ebp+4], edx

; 604  : 			if (tgtId != FalconNullId) {

	push	OFFSET ?FalconNullId@@3VVU_ID@@A	; FalconNullId
	lea	ecx, DWORD PTR _tgtId$[ebp]
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@FindAircra

; 605  : 				return (tgtId);

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR _tgtId$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _tgtId$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN22@FindAircra
$LN21@FindAircra:

; 606  : 			}
; 607  : 		}
; 608  : 	}
; 609  : // END OF ADDED SECTION
; 610  : 
; 611  : 	if (theAC->Sms)

	mov	ecx, DWORD PTR _theAC$[ebp]
	cmp	DWORD PTR [ecx+940], 0
	je	SHORT $LN18@FindAircra

; 612  : 		theMissile = (MissileClass*)theAC->Sms->GetCurrentWeapon();

	mov	edx, DWORD PTR _theAC$[ebp]
	mov	eax, DWORD PTR [edx+940]
	mov	ecx, DWORD PTR _theAC$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+940]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _theMissile$[ebp], eax
$LN18@FindAircra:

; 613  : 
; 614  :    if (theMissile && theMissile->IsMissile())

	cmp	DWORD PTR _theMissile$[ebp], 0
	je	SHORT $LN17@FindAircra
	mov	ecx, DWORD PTR _theMissile$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theMissile$[ebp]
	mov	eax, DWORD PTR [edx+156]
	call	eax
	test	eax, eax
	je	SHORT $LN17@FindAircra

; 615  :    {
; 616  :       mslDisplay = (SensorClass*)theMissile->display;

	mov	ecx, DWORD PTR _theMissile$[ebp]
	mov	edx, DWORD PTR [ecx+712]
	mov	DWORD PTR _mslDisplay$[ebp], edx
$LN17@FindAircra:

; 617  :    }
; 618  : 
; 619  :    if (tPodDisplay && tPodDisplay->IsSOI())

	cmp	DWORD PTR _tPodDisplay$[ebp], 0
	je	SHORT $LN16@FindAircra
	mov	ecx, DWORD PTR _tPodDisplay$[ebp]
	call	?IsSOI@DrawableClass@@QAEHXZ		; DrawableClass::IsSOI
	test	eax, eax
	je	SHORT $LN16@FindAircra

; 620  :    {
; 621  :       tgtId = tPodDisplay->TargetUnderCursor();

	lea	eax, DWORD PTR $T9[ebp]
	push	eax
	mov	ecx, DWORD PTR _tPodDisplay$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _tPodDisplay$[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _tgtId$[ebp], ecx
	mov	DWORD PTR _tgtId$[ebp+4], edx

; 622  :       if (tgtId == FalconNullId)

	push	OFFSET ?FalconNullId@@3VVU_ID@@A	; FalconNullId
	lea	ecx, DWORD PTR _tgtId$[ebp]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN16@FindAircra

; 623  :       {
; 624  :          if (tPodDisplay->CurrentTarget())

	mov	ecx, DWORD PTR _tPodDisplay$[ebp]
	call	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
	test	eax, eax
	je	SHORT $LN16@FindAircra

; 625  :             tgtId = tPodDisplay->CurrentTarget()->BaseData()->Id();

	lea	ecx, DWORD PTR $T8[ebp]
	push	ecx
	mov	ecx, DWORD PTR _tPodDisplay$[ebp]
	call	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
	mov	ecx, eax
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _tgtId$[ebp], edx
	mov	DWORD PTR _tgtId$[ebp+4], eax
$LN16@FindAircra:

; 626  :       }
; 627  :    }
; 628  : 
; 629  :    //Cobra need to separate out HTS so it still targets after all 88's fired
; 630  :    HarmTargetingPod *theHtS = (HarmTargetingPod*)FindSensor(SimDriver.GetPlayerAircraft(), SensorClass::HTS);

	push	4
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theHtS$[ebp], eax

; 631  : 	   if (!mslDisplay && theHtS)

	cmp	DWORD PTR _mslDisplay$[ebp], 0
	jne	SHORT $LN13@FindAircra
	cmp	DWORD PTR _theHtS$[ebp], 0
	je	SHORT $LN13@FindAircra

; 632  : 		   {
; 633  : 			tgtId = theHtS->FindIDUnderCursor();

	lea	ecx, DWORD PTR $T7[ebp]
	push	ecx
	mov	ecx, DWORD PTR _theHtS$[ebp]
	call	?FindIDUnderCursor@HarmTargetingPod@@QAE?AVVU_ID@@XZ ; HarmTargetingPod::FindIDUnderCursor
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _tgtId$[ebp], edx
	mov	DWORD PTR _tgtId$[ebp+4], eax

; 634  : 			if (tgtId == FalconNullId && theHtS->CurrentTarget())

	push	OFFSET ?FalconNullId@@3VVU_ID@@A	; FalconNullId
	lea	ecx, DWORD PTR _tgtId$[ebp]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN13@FindAircra
	mov	ecx, DWORD PTR _theHtS$[ebp]
	call	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
	test	eax, eax
	je	SHORT $LN13@FindAircra

; 635  : 				{
; 636  : 				tgtId = theHtS->CurrentTarget()->BaseData()->Id();

	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	mov	ecx, DWORD PTR _theHtS$[ebp]
	call	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
	mov	ecx, eax
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _tgtId$[ebp], ecx
	mov	DWORD PTR _tgtId$[ebp+4], edx
$LN13@FindAircra:

; 637  : 				}
; 638  : 		   }
; 639  : 
; 640  :    if (tgtId == FalconNullId && mslDisplay && mslDisplay->IsSOI())

	push	OFFSET ?FalconNullId@@3VVU_ID@@A	; FalconNullId
	lea	ecx, DWORD PTR _tgtId$[ebp]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	$LN11@FindAircra
	cmp	DWORD PTR _mslDisplay$[ebp], 0
	je	$LN11@FindAircra
	mov	ecx, DWORD PTR _mslDisplay$[ebp]
	call	?IsSOI@DrawableClass@@QAEHXZ		; DrawableClass::IsSOI
	test	eax, eax
	je	$LN11@FindAircra

; 641  :    {
; 642  :       if (mslDisplay->Type() == SensorClass::HTS)

	mov	ecx, DWORD PTR _mslDisplay$[ebp]
	call	?Type@SensorClass@@QAE?AW4SensorType@1@XZ ; SensorClass::Type
	cmp	eax, 4
	jne	SHORT $LN10@FindAircra

; 643  :       {
; 644  :          tgtId = ((HarmTargetingPod*)mslDisplay)->FindIDUnderCursor();

	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _mslDisplay$[ebp]
	call	?FindIDUnderCursor@HarmTargetingPod@@QAE?AVVU_ID@@XZ ; HarmTargetingPod::FindIDUnderCursor
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _tgtId$[ebp], edx
	mov	DWORD PTR _tgtId$[ebp+4], eax

; 645  :          if (tgtId == FalconNullId)

	push	OFFSET ?FalconNullId@@3VVU_ID@@A	; FalconNullId
	lea	ecx, DWORD PTR _tgtId$[ebp]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@FindAircra

; 646  :          {
; 647  :             if (mslDisplay->CurrentTarget())

	mov	ecx, DWORD PTR _mslDisplay$[ebp]
	call	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
	test	eax, eax
	je	SHORT $LN9@FindAircra

; 648  :                tgtId = mslDisplay->CurrentTarget()->BaseData()->Id();

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _mslDisplay$[ebp]
	call	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
	mov	ecx, eax
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _tgtId$[ebp], ecx
	mov	DWORD PTR _tgtId$[ebp+4], edx
$LN9@FindAircra:

; 649  :          }
; 650  :       }
; 651  :       else

	jmp	SHORT $LN11@FindAircra
$LN10@FindAircra:

; 652  :       {
; 653  :          if (((MissileDisplayClass*)mslDisplay)->DisplayType() == MissileDisplayClass::AGM65_IR ||
; 654  :             ((MissileDisplayClass*)mslDisplay)->DisplayType() == MissileDisplayClass::AGM65_TV)

	mov	ecx, DWORD PTR _mslDisplay$[ebp]
	call	?DisplayType@MissileDisplayClass@@QAEHXZ ; MissileDisplayClass::DisplayType
	test	eax, eax
	je	SHORT $LN5@FindAircra
	mov	ecx, DWORD PTR _mslDisplay$[ebp]
	call	?DisplayType@MissileDisplayClass@@QAEHXZ ; MissileDisplayClass::DisplayType
	cmp	eax, 1
	jne	SHORT $LN11@FindAircra
$LN5@FindAircra:

; 655  :          {
; 656  :             if (theMissile->targetPtr)

	mov	eax, DWORD PTR _theMissile$[ebp]
	cmp	DWORD PTR [eax+656], 0
	je	SHORT $LN11@FindAircra

; 657  :                tgtId = theMissile->targetPtr->BaseData()->Id();

	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	edx, DWORD PTR _theMissile$[ebp]
	mov	ecx, DWORD PTR [edx+656]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _tgtId$[ebp], ecx
	mov	DWORD PTR _tgtId$[ebp+4], edx
$LN11@FindAircra:

; 658  :          }
; 659  :       }
; 660  :    }
; 661  : 
; 662  :    if (tgtId == FalconNullId && theRadar)

	push	OFFSET ?FalconNullId@@3VVU_ID@@A	; FalconNullId
	lea	ecx, DWORD PTR _tgtId$[ebp]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@FindAircra
	cmp	DWORD PTR _theRadar$[ebp], 0
	je	SHORT $LN3@FindAircra

; 663  :    {
; 664  :       tgtId = theRadar->TargetUnderCursor();

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	edx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [eax+60]
	call	edx
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _tgtId$[ebp], ecx
	mov	DWORD PTR _tgtId$[ebp+4], edx

; 665  :       if (tgtId == FalconNullId)

	push	OFFSET ?FalconNullId@@3VVU_ID@@A	; FalconNullId
	lea	ecx, DWORD PTR _tgtId$[ebp]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@FindAircra

; 666  :       {
; 667  :          if (theRadar->CurrentTarget())

	mov	ecx, DWORD PTR _theRadar$[ebp]
	call	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
	test	eax, eax
	je	SHORT $LN3@FindAircra

; 668  :             tgtId = theRadar->CurrentTarget()->BaseData()->Id();

	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _theRadar$[ebp]
	call	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
	mov	ecx, eax
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _tgtId$[ebp], edx
	mov	DWORD PTR _tgtId$[ebp+4], eax
$LN3@FindAircra:

; 669  :       }
; 670  :    }
; 671  : 
; 672  :    return tgtId;

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR _tgtId$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _tgtId$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN22@FindAircra:

; 673  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FindAircraftTarget@@YA?AVVU_ID@@PAVAircraftClass@@@Z ENDP ; FindAircraftTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\misldisp.h
;	COMDAT ?DisplayType@MissileDisplayClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DisplayType@MissileDisplayClass@@QAEHXZ PROC		; MissileDisplayClass::DisplayType, COMDAT
; _this$ = ecx

; 29   :       int DisplayType (void) {return displayType;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	mov	esp, ebp
	pop	ebp
	ret	0
?DisplayType@MissileDisplayClass@@QAEHXZ ENDP		; MissileDisplayClass::DisplayType
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\object.h
;	COMDAT ?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ PROC	; SimObjectType::BaseData, COMDAT
; _this$ = ecx

; 92   : 	FalconEntity* BaseData(void) { return baseData.get(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ENDP	; SimObjectType::BaseData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ PROC ; SensorClass::CurrentTarget, COMDAT
; _this$ = ecx

; 46   : 	SimObjectType* CurrentTarget(void)	{ return lockedTarget; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ENDP ; SensorClass::CurrentTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?Type@SensorClass@@QAE?AW4SensorType@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@SensorClass@@QAE?AW4SensorType@1@XZ PROC		; SensorClass::Type, COMDAT
; _this$ = ecx

; 36   : 	SensorType	Type(void)			{ return sensorType; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+68]
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@SensorClass@@QAE?AW4SensorType@1@XZ ENDP		; SensorClass::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\drawable.h
;	COMDAT ?IsSOI@DrawableClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsSOI@DrawableClass@@QAEHXZ PROC			; DrawableClass::IsSOI, COMDAT
; _this$ = ecx

; 141  :       int IsSOI (void) {return (drawFlags & SOI ? TRUE : FALSE);};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 1
	je	SHORT $LN3@IsSOI
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSOI
$LN3@IsSOI:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSOI:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSOI@DrawableClass@@QAEHXZ ENDP			; DrawableClass::IsSOI
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightRTB@@YAXKHPAX@Z PROC				; FlightRTB

; 924  : void FlightRTB (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 925  : 
; 926  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightRTB
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightRTB

; 927  : 		AiSendPlayerCommand( FalconWingmanMsg::WMRTB, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	37					; 00000025H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightRTB:

; 928  : 	}
; 929  : }

	pop	ebp
	ret	0
?FlightRTB@@YAXKHPAX@Z ENDP				; FlightRTB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementRTB@@YAXKHPAX@Z PROC				; ElementRTB

; 917  : void ElementRTB (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 918  : 
; 919  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementRTB
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementRTB

; 920  : 		AiSendPlayerCommand( FalconWingmanMsg::WMRTB, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	37					; 00000025H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementRTB:

; 921  : 	}
; 922  : }

	pop	ebp
	ret	0
?ElementRTB@@YAXKHPAX@Z ENDP				; ElementRTB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanRTB@@YAXKHPAX@Z PROC				; WingmanRTB

; 910  : void WingmanRTB (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 911  : 
; 912  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanRTB
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanRTB

; 913  : 		AiSendPlayerCommand( FalconWingmanMsg::WMRTB, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	37					; 00000025H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanRTB:

; 914  : 	}
; 915  : }

	pop	ebp
	ret	0
?WingmanRTB@@YAXKHPAX@Z ENDP				; WingmanRTB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightDropStores@@YAXKHPAX@Z PROC			; FlightDropStores

; 1040 : {

	push	ebp
	mov	ebp, esp

; 1041 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft()))

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightDrop
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightDrop

; 1042 : 	{
; 1043 : 		AiSendPlayerCommand( FalconWingmanMsg::WMDropStores, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	58					; 0000003aH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightDrop:

; 1044 : 	}
; 1045 : }

	pop	ebp
	ret	0
?FlightDropStores@@YAXKHPAX@Z ENDP			; FlightDropStores
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementDropStores@@YAXKHPAX@Z PROC			; ElementDropStores

; 1032 : {

	push	ebp
	mov	ebp, esp

; 1033 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft()))

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementDro
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementDro

; 1034 : 	{
; 1035 : 		AiSendPlayerCommand( FalconWingmanMsg::WMDropStores, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	58					; 0000003aH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementDro:

; 1036 : 	}
; 1037 : }

	pop	ebp
	ret	0
?ElementDropStores@@YAXKHPAX@Z ENDP			; ElementDropStores
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanDropStores@@YAXKHPAX@Z PROC			; WingmanDropStores

; 1024 : {

	push	ebp
	mov	ebp, esp

; 1025 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft()))

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanDro
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanDro

; 1026 : 	{
; 1027 : 		AiSendPlayerCommand( FalconWingmanMsg::WMDropStores, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	58					; 0000003aH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanDro:

; 1028 : 	}
; 1029 : }

	pop	ebp
	ret	0
?WingmanDropStores@@YAXKHPAX@Z ENDP			; WingmanDropStores
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightGiveWeaponsCheck@@YAXKHPAX@Z PROC		; FlightGiveWeaponsCheck

; 1015 : void FlightGiveWeaponsCheck (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 1016 : 
; 1017 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightGive
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightGive

; 1018 : 		AiSendPlayerCommand( FalconWingmanMsg::WMGiveWeaponsCheck, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	36					; 00000024H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightGive:

; 1019 : 	}
; 1020 : }

	pop	ebp
	ret	0
?FlightGiveWeaponsCheck@@YAXKHPAX@Z ENDP		; FlightGiveWeaponsCheck
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementGiveWeaponsCheck@@YAXKHPAX@Z PROC		; ElementGiveWeaponsCheck

; 1008 : void ElementGiveWeaponsCheck (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 1009 : 
; 1010 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementGiv
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementGiv

; 1011 : 		AiSendPlayerCommand( FalconWingmanMsg::WMGiveWeaponsCheck, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	36					; 00000024H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementGiv:

; 1012 : 	}
; 1013 : }

	pop	ebp
	ret	0
?ElementGiveWeaponsCheck@@YAXKHPAX@Z ENDP		; ElementGiveWeaponsCheck
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanGiveWeaponsCheck@@YAXKHPAX@Z PROC		; WingmanGiveWeaponsCheck

; 1001 : void WingmanGiveWeaponsCheck (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 1002 : 
; 1003 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanGiv
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanGiv

; 1004 : 		AiSendPlayerCommand( FalconWingmanMsg::WMGiveWeaponsCheck, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	36					; 00000024H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanGiv:

; 1005 : 	}
; 1006 : }

	pop	ebp
	ret	0
?WingmanGiveWeaponsCheck@@YAXKHPAX@Z ENDP		; WingmanGiveWeaponsCheck
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightGiveFuelState@@YAXKHPAX@Z PROC			; FlightGiveFuelState

; 992  : void FlightGiveFuelState (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 993  : 
; 994  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightGive
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightGive

; 995  : 		AiSendPlayerCommand( FalconWingmanMsg::WMGiveFuelState, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	35					; 00000023H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightGive:

; 996  : 	}
; 997  : }

	pop	ebp
	ret	0
?FlightGiveFuelState@@YAXKHPAX@Z ENDP			; FlightGiveFuelState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementGiveFuelState@@YAXKHPAX@Z PROC			; ElementGiveFuelState

; 986  : void ElementGiveFuelState (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 987  : 
; 988  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementGiv
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementGiv

; 989  : 		AiSendPlayerCommand( FalconWingmanMsg::WMGiveFuelState, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	35					; 00000023H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementGiv:

; 990  : 	}
; 991  : }

	pop	ebp
	ret	0
?ElementGiveFuelState@@YAXKHPAX@Z ENDP			; ElementGiveFuelState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanGiveFuelState@@YAXKHPAX@Z PROC			; WingmanGiveFuelState

; 979  : void WingmanGiveFuelState (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 980  : 
; 981  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanGiv
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanGiv

; 982  : 		AiSendPlayerCommand( FalconWingmanMsg::WMGiveFuelState, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	35					; 00000023H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanGiv:

; 983  : 	}
; 984  : }

	pop	ebp
	ret	0
?WingmanGiveFuelState@@YAXKHPAX@Z ENDP			; WingmanGiveFuelState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightGiveDamageReport@@YAXKHPAX@Z PROC		; FlightGiveDamageReport

; 970  : void FlightGiveDamageReport (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 971  : 
; 972  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightGive
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightGive

; 973  : 		AiSendPlayerCommand( FalconWingmanMsg::WMGiveDamageReport, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	34					; 00000022H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightGive:

; 974  : 	}
; 975  : }

	pop	ebp
	ret	0
?FlightGiveDamageReport@@YAXKHPAX@Z ENDP		; FlightGiveDamageReport
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementGiveDamageReport@@YAXKHPAX@Z PROC		; ElementGiveDamageReport

; 963  : void ElementGiveDamageReport (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 964  : 
; 965  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementGiv
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementGiv

; 966  : 		AiSendPlayerCommand( FalconWingmanMsg::WMGiveDamageReport, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	34					; 00000022H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementGiv:

; 967  : 	}
; 968  : }

	pop	ebp
	ret	0
?ElementGiveDamageReport@@YAXKHPAX@Z ENDP		; ElementGiveDamageReport
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanGiveDamageReport@@YAXKHPAX@Z PROC		; WingmanGiveDamageReport

; 956  : void WingmanGiveDamageReport (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 957  : 
; 958  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanGiv
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanGiv

; 959  : 		AiSendPlayerCommand( FalconWingmanMsg::WMGiveDamageReport, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	34					; 00000022H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanGiv:

; 960  : 	}
; 961  : }

	pop	ebp
	ret	0
?WingmanGiveDamageReport@@YAXKHPAX@Z ENDP		; WingmanGiveDamageReport
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightGiveStatus@@YAXKHPAX@Z PROC			; FlightGiveStatus

; 947  : void FlightGiveStatus (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 948  : 
; 949  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightGive
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightGive

; 950  : 		AiSendPlayerCommand( FalconWingmanMsg::WMGiveStatus, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	33					; 00000021H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightGive:

; 951  : 	}
; 952  : }

	pop	ebp
	ret	0
?FlightGiveStatus@@YAXKHPAX@Z ENDP			; FlightGiveStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementGiveStatus@@YAXKHPAX@Z PROC			; ElementGiveStatus

; 940  : void ElementGiveStatus (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 941  : 
; 942  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementGiv
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementGiv

; 943  : 		AiSendPlayerCommand( FalconWingmanMsg::WMGiveStatus, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	33					; 00000021H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementGiv:

; 944  : 	}
; 945  : }

	pop	ebp
	ret	0
?ElementGiveStatus@@YAXKHPAX@Z ENDP			; ElementGiveStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanGiveStatus@@YAXKHPAX@Z PROC			; WingmanGiveStatus

; 933  : void WingmanGiveStatus (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 934  : 
; 935  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanGiv
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanGiv

; 936  : 		AiSendPlayerCommand( FalconWingmanMsg::WMGiveStatus, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	33					; 00000021H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanGiv:

; 937  : 	}
; 938  : }

	pop	ebp
	ret	0
?WingmanGiveStatus@@YAXKHPAX@Z ENDP			; WingmanGiveStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightGiveBra@@YAXKHPAX@Z PROC				; FlightGiveBra

; 901  : void FlightGiveBra (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 902  : 
; 903  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightGive
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightGive

; 904  : 		AiSendPlayerCommand( FalconWingmanMsg::WMGiveBra, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	32					; 00000020H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightGive:

; 905  : 	}
; 906  : }

	pop	ebp
	ret	0
?FlightGiveBra@@YAXKHPAX@Z ENDP				; FlightGiveBra
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementGiveBra@@YAXKHPAX@Z PROC			; ElementGiveBra

; 894  : void ElementGiveBra (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 895  : 
; 896  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementGiv
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementGiv

; 897  : 		AiSendPlayerCommand( FalconWingmanMsg::WMGiveBra, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	32					; 00000020H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementGiv:

; 898  : 	}
; 899  : }

	pop	ebp
	ret	0
?ElementGiveBra@@YAXKHPAX@Z ENDP			; ElementGiveBra
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanGiveBra@@YAXKHPAX@Z PROC			; WingmanGiveBra

; 887  : void WingmanGiveBra (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 888  : 
; 889  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanGiv
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanGiv

; 890  : 		AiSendPlayerCommand( FalconWingmanMsg::WMGiveBra, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	32					; 00000020H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanGiv:

; 891  : 	}
; 892  : }

	pop	ebp
	ret	0
?WingmanGiveBra@@YAXKHPAX@Z ENDP			; WingmanGiveBra
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightForm4@@YAXKHPAX@Z PROC				; FlightForm4

; 395  : void FlightForm4 (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 396  : 
; 397  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightForm
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightForm

; 398  : 		AiSendPlayerCommand( FalconWingmanMsg::WMForm4, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	65					; 00000041H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightForm:

; 399  : 	}
; 400  : }

	pop	ebp
	ret	0
?FlightForm4@@YAXKHPAX@Z ENDP				; FlightForm4
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementForm4@@YAXKHPAX@Z PROC				; ElementForm4

; 388  : void ElementForm4 (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 389  : 
; 390  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementFor
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementFor

; 391  : 		AiSendPlayerCommand( FalconWingmanMsg::WMForm4, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	65					; 00000041H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementFor:

; 392  : 	}
; 393  : }

	pop	ebp
	ret	0
?ElementForm4@@YAXKHPAX@Z ENDP				; ElementForm4
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanForm4@@YAXKHPAX@Z PROC				; WingmanForm4

; 381  : void WingmanForm4 (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 382  : 
; 383  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanFor
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanFor

; 384  : 		AiSendPlayerCommand( FalconWingmanMsg::WMForm4, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	65					; 00000041H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanFor:

; 385  : 	}
; 386  : }

	pop	ebp
	ret	0
?WingmanForm4@@YAXKHPAX@Z ENDP				; WingmanForm4
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightForm3@@YAXKHPAX@Z PROC				; FlightForm3

; 372  : void FlightForm3 (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 373  : 
; 374  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightForm
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightForm

; 375  : 		AiSendPlayerCommand( FalconWingmanMsg::WMForm3, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	64					; 00000040H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightForm:

; 376  : 	}
; 377  : }

	pop	ebp
	ret	0
?FlightForm3@@YAXKHPAX@Z ENDP				; FlightForm3
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementForm3@@YAXKHPAX@Z PROC				; ElementForm3

; 365  : void ElementForm3 (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 366  : 
; 367  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementFor
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementFor

; 368  : 		AiSendPlayerCommand( FalconWingmanMsg::WMForm3, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	64					; 00000040H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementFor:

; 369  : 	}
; 370  : }

	pop	ebp
	ret	0
?ElementForm3@@YAXKHPAX@Z ENDP				; ElementForm3
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanForm3@@YAXKHPAX@Z PROC				; WingmanForm3

; 358  : void WingmanForm3 (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 359  : 
; 360  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanFor
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanFor

; 361  : 		AiSendPlayerCommand( FalconWingmanMsg::WMForm3, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	64					; 00000040H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanFor:

; 362  : 	}
; 363  : }

	pop	ebp
	ret	0
?WingmanForm3@@YAXKHPAX@Z ENDP				; WingmanForm3
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightForm2@@YAXKHPAX@Z PROC				; FlightForm2

; 349  : void FlightForm2 (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 350  : 
; 351  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightForm
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightForm

; 352  : 		AiSendPlayerCommand( FalconWingmanMsg::WMForm2, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	63					; 0000003fH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightForm:

; 353  : 	}
; 354  : }

	pop	ebp
	ret	0
?FlightForm2@@YAXKHPAX@Z ENDP				; FlightForm2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementForm2@@YAXKHPAX@Z PROC				; ElementForm2

; 342  : void ElementForm2 (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 343  : 
; 344  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementFor
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementFor

; 345  : 		AiSendPlayerCommand( FalconWingmanMsg::WMForm2, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	63					; 0000003fH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementFor:

; 346  : 	}
; 347  : }

	pop	ebp
	ret	0
?ElementForm2@@YAXKHPAX@Z ENDP				; ElementForm2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanForm2@@YAXKHPAX@Z PROC				; WingmanForm2

; 335  : void WingmanForm2 (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 336  : 
; 337  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanFor
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanFor

; 338  : 		AiSendPlayerCommand( FalconWingmanMsg::WMForm2, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	63					; 0000003fH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanFor:

; 339  : 	}
; 340  : }

	pop	ebp
	ret	0
?WingmanForm2@@YAXKHPAX@Z ENDP				; WingmanForm2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightForm1@@YAXKHPAX@Z PROC				; FlightForm1

; 326  : void FlightForm1 (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 327  : 
; 328  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightForm
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightForm

; 329  : 		AiSendPlayerCommand( FalconWingmanMsg::WMForm1, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	62					; 0000003eH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightForm:

; 330  : 	}
; 331  : }

	pop	ebp
	ret	0
?FlightForm1@@YAXKHPAX@Z ENDP				; FlightForm1
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementForm1@@YAXKHPAX@Z PROC				; ElementForm1

; 319  : void ElementForm1 (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 320  : 
; 321  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementFor
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementFor

; 322  : 		AiSendPlayerCommand( FalconWingmanMsg::WMForm1, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	62					; 0000003eH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementFor:

; 323  : 	}
; 324  : }

	pop	ebp
	ret	0
?ElementForm1@@YAXKHPAX@Z ENDP				; ElementForm1
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanForm1@@YAXKHPAX@Z PROC				; WingmanForm1

; 312  : void WingmanForm1 (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 313  : 
; 314  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanFor
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanFor

; 315  : 		AiSendPlayerCommand( FalconWingmanMsg::WMForm1, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	62					; 0000003eH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanFor:

; 316  : 	}
; 317  : }

	pop	ebp
	ret	0
?WingmanForm1@@YAXKHPAX@Z ENDP				; WingmanForm1
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightEchelon@@YAXKHPAX@Z PROC				; FlightEchelon

; 303  : void FlightEchelon (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 304  : 
; 305  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightEche
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightEche

; 306  : 		AiSendPlayerCommand( FalconWingmanMsg::WMEchelon, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	61					; 0000003dH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightEche:

; 307  : 	}
; 308  : }

	pop	ebp
	ret	0
?FlightEchelon@@YAXKHPAX@Z ENDP				; FlightEchelon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementEchelon@@YAXKHPAX@Z PROC			; ElementEchelon

; 296  : void ElementEchelon (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 297  : 
; 298  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementEch
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementEch

; 299  : 		AiSendPlayerCommand( FalconWingmanMsg::WMEchelon, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	61					; 0000003dH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementEch:

; 300  : 	}
; 301  : }

	pop	ebp
	ret	0
?ElementEchelon@@YAXKHPAX@Z ENDP			; ElementEchelon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanEchelon@@YAXKHPAX@Z PROC			; WingmanEchelon

; 289  : void WingmanEchelon (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 290  : 
; 291  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanEch
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanEch

; 292  : 		AiSendPlayerCommand( FalconWingmanMsg::WMEchelon, AiWingman);

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	61					; 0000003dH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanEch:

; 293  : 	}
; 294  : }

	pop	ebp
	ret	0
?WingmanEchelon@@YAXKHPAX@Z ENDP			; WingmanEchelon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightFinger4@@YAXKHPAX@Z PROC				; FlightFinger4

; 279  : void FlightFinger4 (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 280  : 
; 281  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightFing
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightFing

; 282  : 		AiSendPlayerCommand( FalconWingmanMsg::WMFinger4, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	60					; 0000003cH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightFing:

; 283  : 	}
; 284  : }

	pop	ebp
	ret	0
?FlightFinger4@@YAXKHPAX@Z ENDP				; FlightFinger4
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementFinger4@@YAXKHPAX@Z PROC			; ElementFinger4

; 272  : void ElementFinger4 (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 273  : 
; 274  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementFin
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementFin

; 275  : 		AiSendPlayerCommand( FalconWingmanMsg::WMFinger4, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	60					; 0000003cH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementFin:

; 276  : 	}
; 277  : }

	pop	ebp
	ret	0
?ElementFinger4@@YAXKHPAX@Z ENDP			; ElementFinger4
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanFinger4@@YAXKHPAX@Z PROC			; WingmanFinger4

; 265  : void WingmanFinger4 (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 266  : 
; 267  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanFin
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanFin

; 268  : 		AiSendPlayerCommand( FalconWingmanMsg::WMFinger4, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	60					; 0000003cH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanFin:

; 269  : 	}
; 270  : }

	pop	ebp
	ret	0
?WingmanFinger4@@YAXKHPAX@Z ENDP			; WingmanFinger4
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightVic@@YAXKHPAX@Z PROC				; FlightVic

; 255  : void FlightVic (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 256  : 
; 257  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightVic
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightVic

; 258  : 		AiSendPlayerCommand( FalconWingmanMsg::WMVic, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	59					; 0000003bH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightVic:

; 259  : 	}
; 260  : }

	pop	ebp
	ret	0
?FlightVic@@YAXKHPAX@Z ENDP				; FlightVic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementVic@@YAXKHPAX@Z PROC				; ElementVic

; 248  : void ElementVic (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 249  : 
; 250  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementVic
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementVic

; 251  : 		AiSendPlayerCommand( FalconWingmanMsg::WMVic, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	59					; 0000003bH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementVic:

; 252  : 	}
; 253  : }

	pop	ebp
	ret	0
?ElementVic@@YAXKHPAX@Z ENDP				; ElementVic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanVic@@YAXKHPAX@Z PROC				; WingmanVic

; 241  : void WingmanVic (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 242  : 
; 243  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanVic
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanVic

; 244  : 		AiSendPlayerCommand( FalconWingmanMsg::WMVic, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	59					; 0000003bH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanVic:

; 245  : 	}
; 246  : }

	pop	ebp
	ret	0
?WingmanVic@@YAXKHPAX@Z ENDP				; WingmanVic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightDecreaseRelAlt@@YAXKHPAX@Z PROC			; FlightDecreaseRelAlt

; 512  : void FlightDecreaseRelAlt (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 513  : 
; 514  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightDecr
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightDecr

; 515  : 		AiSendPlayerCommand( FalconWingmanMsg::WMDecreaseRelAlt, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	31					; 0000001fH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightDecr:

; 516  : 	}
; 517  : }

	pop	ebp
	ret	0
?FlightDecreaseRelAlt@@YAXKHPAX@Z ENDP			; FlightDecreaseRelAlt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementDecreaseRelAlt@@YAXKHPAX@Z PROC			; ElementDecreaseRelAlt

; 505  : void ElementDecreaseRelAlt (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 506  : 
; 507  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementDec
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementDec

; 508  : 		AiSendPlayerCommand( FalconWingmanMsg::WMDecreaseRelAlt, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	31					; 0000001fH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementDec:

; 509  : 	}
; 510  : }

	pop	ebp
	ret	0
?ElementDecreaseRelAlt@@YAXKHPAX@Z ENDP			; ElementDecreaseRelAlt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanDecreaseRelAlt@@YAXKHPAX@Z PROC			; WingmanDecreaseRelAlt

; 498  : void WingmanDecreaseRelAlt (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 499  : 
; 500  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanDec
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanDec

; 501  : 		AiSendPlayerCommand( FalconWingmanMsg::WMDecreaseRelAlt, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	31					; 0000001fH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanDec:

; 502  : 	}
; 503  : }

	pop	ebp
	ret	0
?WingmanDecreaseRelAlt@@YAXKHPAX@Z ENDP			; WingmanDecreaseRelAlt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightIncreaseRelAlt@@YAXKHPAX@Z PROC			; FlightIncreaseRelAlt

; 489  : void FlightIncreaseRelAlt (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 490  : 
; 491  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightIncr
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightIncr

; 492  : 		AiSendPlayerCommand( FalconWingmanMsg::WMIncreaseRelAlt, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	30					; 0000001eH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightIncr:

; 493  : 	}
; 494  : }

	pop	ebp
	ret	0
?FlightIncreaseRelAlt@@YAXKHPAX@Z ENDP			; FlightIncreaseRelAlt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementIncreaseRelAlt@@YAXKHPAX@Z PROC			; ElementIncreaseRelAlt

; 482  : void ElementIncreaseRelAlt (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 483  : 
; 484  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementInc
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementInc

; 485  : 		AiSendPlayerCommand( FalconWingmanMsg::WMIncreaseRelAlt, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	30					; 0000001eH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementInc:

; 486  : 	}
; 487  : }

	pop	ebp
	ret	0
?ElementIncreaseRelAlt@@YAXKHPAX@Z ENDP			; ElementIncreaseRelAlt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanIncreaseRelAlt@@YAXKHPAX@Z PROC			; WingmanIncreaseRelAlt

; 475  : void WingmanIncreaseRelAlt (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 476  : 
; 477  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanInc
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanInc

; 478  : 		AiSendPlayerCommand( FalconWingmanMsg::WMIncreaseRelAlt, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	30					; 0000001eH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanInc:

; 479  : 	}
; 480  : }

	pop	ebp
	ret	0
?WingmanIncreaseRelAlt@@YAXKHPAX@Z ENDP			; WingmanIncreaseRelAlt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightToggleSide@@YAXKHPAX@Z PROC			; FlightToggleSide

; 466  : void FlightToggleSide (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 467  : 
; 468  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightTogg
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightTogg

; 469  : 		AiSendPlayerCommand( FalconWingmanMsg::WMToggleSide, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	29					; 0000001dH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightTogg:

; 470  : 	}
; 471  : }

	pop	ebp
	ret	0
?FlightToggleSide@@YAXKHPAX@Z ENDP			; FlightToggleSide
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementToggleSide@@YAXKHPAX@Z PROC			; ElementToggleSide

; 459  : void ElementToggleSide (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 460  : 
; 461  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementTog
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementTog

; 462  : 		AiSendPlayerCommand( FalconWingmanMsg::WMToggleSide, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	29					; 0000001dH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementTog:

; 463  : 	}
; 464  : }

	pop	ebp
	ret	0
?ElementToggleSide@@YAXKHPAX@Z ENDP			; ElementToggleSide
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanToggleSide@@YAXKHPAX@Z PROC			; WingmanToggleSide

; 452  : void WingmanToggleSide (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 453  : 
; 454  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanTog
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanTog

; 455  : 		AiSendPlayerCommand( FalconWingmanMsg::WMToggleSide, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	29					; 0000001dH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanTog:

; 456  : 	}
; 457  : }

	pop	ebp
	ret	0
?WingmanToggleSide@@YAXKHPAX@Z ENDP			; WingmanToggleSide
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightCloseup@@YAXKHPAX@Z PROC				; FlightCloseup

; 444  : void FlightCloseup (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 445  : 
; 446  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightClos
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightClos

; 447  : 		AiSendPlayerCommand( FalconWingmanMsg::WMCloseup, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	28					; 0000001cH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightClos:

; 448  : 	}
; 449  : }

	pop	ebp
	ret	0
?FlightCloseup@@YAXKHPAX@Z ENDP				; FlightCloseup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementCloseup@@YAXKHPAX@Z PROC			; ElementCloseup

; 437  : void ElementCloseup (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 438  : 
; 439  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementClo
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementClo

; 440  : 		AiSendPlayerCommand( FalconWingmanMsg::WMCloseup, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	28					; 0000001cH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementClo:

; 441  : 	}
; 442  : }

	pop	ebp
	ret	0
?ElementCloseup@@YAXKHPAX@Z ENDP			; ElementCloseup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanCloseup@@YAXKHPAX@Z PROC			; WingmanCloseup

; 430  : void WingmanCloseup (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 431  : 
; 432  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanClo
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanClo

; 433  : 		AiSendPlayerCommand( FalconWingmanMsg::WMCloseup, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	28					; 0000001cH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanClo:

; 434  : 	}
; 435  : }

	pop	ebp
	ret	0
?WingmanCloseup@@YAXKHPAX@Z ENDP			; WingmanCloseup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightKickout@@YAXKHPAX@Z PROC				; FlightKickout

; 421  : void FlightKickout (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 422  : 
; 423  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightKick
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightKick

; 424  : 		AiSendPlayerCommand( FalconWingmanMsg::WMKickout, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	27					; 0000001bH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightKick:

; 425  : 	}
; 426  : }

	pop	ebp
	ret	0
?FlightKickout@@YAXKHPAX@Z ENDP				; FlightKickout
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementKickout@@YAXKHPAX@Z PROC			; ElementKickout

; 414  : void ElementKickout (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 415  : 
; 416  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementKic
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementKic

; 417  : 		AiSendPlayerCommand( FalconWingmanMsg::WMKickout, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	27					; 0000001bH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementKic:

; 418  : 	}
; 419  : }

	pop	ebp
	ret	0
?ElementKickout@@YAXKHPAX@Z ENDP			; ElementKickout
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanKickout@@YAXKHPAX@Z PROC			; WingmanKickout

; 407  : void WingmanKickout (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 408  : 
; 409  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanKic
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanKic

; 410  : 		AiSendPlayerCommand( FalconWingmanMsg::WMKickout, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	27					; 0000001bH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanKic:

; 411  : 	}
; 412  : }

	pop	ebp
	ret	0
?WingmanKickout@@YAXKHPAX@Z ENDP			; WingmanKickout
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightArrow@@YAXKHPAX@Z PROC				; FlightArrow

; 68   : void FlightArrow (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 69   : 
; 70   : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightArro
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightArro

; 71   : 		AiSendPlayerCommand( FalconWingmanMsg::WMArrowHead, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	7
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightArro:

; 72   : 	}
; 73   : }

	pop	ebp
	ret	0
?FlightArrow@@YAXKHPAX@Z ENDP				; FlightArrow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementArrow@@YAXKHPAX@Z PROC				; ElementArrow

; 61   : void ElementArrow (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 62   : 
; 63   : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementArr
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementArr

; 64   : 		AiSendPlayerCommand( FalconWingmanMsg::WMArrowHead, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	7
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementArr:

; 65   : 	}
; 66   : }

	pop	ebp
	ret	0
?ElementArrow@@YAXKHPAX@Z ENDP				; ElementArrow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanArrow@@YAXKHPAX@Z PROC				; WingmanArrow

; 54   : void WingmanArrow(unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 55   : 
; 56   : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanArr
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanArr

; 57   : 		AiSendPlayerCommand( FalconWingmanMsg::WMArrowHead, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	7
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanArr:

; 58   : 	}
; 59   : }

	pop	ebp
	ret	0
?WingmanArrow@@YAXKHPAX@Z ENDP				; WingmanArrow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightBox@@YAXKHPAX@Z PROC				; FlightBox

; 91   : void FlightBox (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 92   : 
; 93   : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightBox
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightBox

; 94   : 		AiSendPlayerCommand( FalconWingmanMsg::WMBox, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	6
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightBox:

; 95   : 	}
; 96   : }

	pop	ebp
	ret	0
?FlightBox@@YAXKHPAX@Z ENDP				; FlightBox
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementBox@@YAXKHPAX@Z PROC				; ElementBox

; 84   : void ElementBox (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 85   : 
; 86   : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementBox
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementBox

; 87   : 		AiSendPlayerCommand( FalconWingmanMsg::WMBox, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	6
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementBox:

; 88   : 	}
; 89   : }

	pop	ebp
	ret	0
?ElementBox@@YAXKHPAX@Z ENDP				; ElementBox
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanBox@@YAXKHPAX@Z PROC				; WingmanBox

; 77   : void WingmanBox(unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 78   : 
; 79   : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanBox
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanBox

; 80   : 		AiSendPlayerCommand( FalconWingmanMsg::WMBox, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	6
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanBox:

; 81   : 	}
; 82   : }

	pop	ebp
	ret	0
?WingmanBox@@YAXKHPAX@Z ENDP				; WingmanBox
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightResCell@@YAXKHPAX@Z PROC				; FlightResCell

; 115  : void FlightResCell (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 116  : 
; 117  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightResC
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightResC

; 118  : 		AiSendPlayerCommand( FalconWingmanMsg::WMResCell, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	5
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightResC:

; 119  : 	}
; 120  : }

	pop	ebp
	ret	0
?FlightResCell@@YAXKHPAX@Z ENDP				; FlightResCell
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementResCell@@YAXKHPAX@Z PROC			; ElementResCell

; 108  : void ElementResCell (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 109  : 
; 110  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementRes
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementRes

; 111  : 		AiSendPlayerCommand( FalconWingmanMsg::WMResCell, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	5
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementRes:

; 112  : 	}
; 113  : }

	pop	ebp
	ret	0
?ElementResCell@@YAXKHPAX@Z ENDP			; ElementResCell
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanResCell@@YAXKHPAX@Z PROC			; WingmanResCell

; 101  : void WingmanResCell (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 102  : 
; 103  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanRes
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanRes

; 104  : 		AiSendPlayerCommand( FalconWingmanMsg::WMResCell, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	5
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanRes:

; 105  : 	}
; 106  : }

	pop	ebp
	ret	0
?WingmanResCell@@YAXKHPAX@Z ENDP			; WingmanResCell
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightTrail@@YAXKHPAX@Z PROC				; FlightTrail

; 138  : void FlightTrail (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 139  : 
; 140  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightTrai
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightTrai

; 141  : 		AiSendPlayerCommand( FalconWingmanMsg::WMTrail, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	2
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightTrai:

; 142  : 	}
; 143  : }

	pop	ebp
	ret	0
?FlightTrail@@YAXKHPAX@Z ENDP				; FlightTrail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementTrail@@YAXKHPAX@Z PROC				; ElementTrail

; 131  : void ElementTrail (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 132  : 
; 133  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementTra
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementTra

; 134  : 		AiSendPlayerCommand( FalconWingmanMsg::WMTrail, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	2
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementTra:

; 135  : 	}
; 136  : }

	pop	ebp
	ret	0
?ElementTrail@@YAXKHPAX@Z ENDP				; ElementTrail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanTrail@@YAXKHPAX@Z PROC				; WingmanTrail

; 124  : void WingmanTrail (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 125  : 
; 126  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanTra
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanTra

; 127  : 		AiSendPlayerCommand( FalconWingmanMsg::WMTrail, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	2
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanTra:

; 128  : 	}
; 129  : }

	pop	ebp
	ret	0
?WingmanTrail@@YAXKHPAX@Z ENDP				; WingmanTrail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightWedge@@YAXKHPAX@Z PROC				; FlightWedge

; 45   : void FlightWedge (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 46   : 
; 47   : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightWedg
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightWedg

; 48   : 		AiSendPlayerCommand( FalconWingmanMsg::WMWedge, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	1
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightWedg:

; 49   : 	}
; 50   : }

	pop	ebp
	ret	0
?FlightWedge@@YAXKHPAX@Z ENDP				; FlightWedge
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementWedge@@YAXKHPAX@Z PROC				; ElementWedge

; 38   : void ElementWedge (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 39   : 
; 40   : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementWed
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementWed

; 41   : 		AiSendPlayerCommand( FalconWingmanMsg::WMWedge, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	1
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementWed:

; 42   : 	}
; 43   : }

	pop	ebp
	ret	0
?ElementWedge@@YAXKHPAX@Z ENDP				; ElementWedge
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanWedge@@YAXKHPAX@Z PROC				; WingmanWedge

; 31   : void WingmanWedge (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 32   : 
; 33   : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanWed
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanWed

; 34   : 		AiSendPlayerCommand( FalconWingmanMsg::WMWedge, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	1
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanWed:

; 35   : 	}
; 36   : }

	pop	ebp
	ret	0
?WingmanWedge@@YAXKHPAX@Z ENDP				; WingmanWedge
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightFluid@@YAXKHPAX@Z PROC				; FlightFluid

; 185  : void FlightFluid (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 186  : 
; 187  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightFlui
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightFlui

; 188  : 		AiSendPlayerCommand( FalconWingmanMsg::WMFluidFour, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	8
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightFlui:

; 189  : 	}
; 190  : }

	pop	ebp
	ret	0
?FlightFluid@@YAXKHPAX@Z ENDP				; FlightFluid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementFluid@@YAXKHPAX@Z PROC				; ElementFluid

; 178  : void ElementFluid (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 179  : 
; 180  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementFlu
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementFlu

; 181  : 		AiSendPlayerCommand( FalconWingmanMsg::WMFluidFour, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	8
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementFlu:

; 182  : 	}
; 183  : }

	pop	ebp
	ret	0
?ElementFluid@@YAXKHPAX@Z ENDP				; ElementFluid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanFluid@@YAXKHPAX@Z PROC				; WingmanFluid

; 171  : void WingmanFluid (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 172  : 
; 173  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanFlu
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanFlu

; 174  : 		AiSendPlayerCommand( FalconWingmanMsg::WMFluidFour, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	8
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanFlu:

; 175  : 	}
; 176  : }

	pop	ebp
	ret	0
?WingmanFluid@@YAXKHPAX@Z ENDP				; WingmanFluid
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightLadder@@YAXKHPAX@Z PROC				; FlightLadder

; 208  : void FlightLadder (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 209  : 
; 210  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightLadd
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightLadd

; 211  : 		AiSendPlayerCommand( FalconWingmanMsg::WMLadder, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	3
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightLadd:

; 212  : 	}
; 213  : }

	pop	ebp
	ret	0
?FlightLadder@@YAXKHPAX@Z ENDP				; FlightLadder
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementLadder@@YAXKHPAX@Z PROC				; ElementLadder

; 201  : void ElementLadder (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 202  : 
; 203  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementLad
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementLad

; 204  : 		AiSendPlayerCommand( FalconWingmanMsg::WMLadder, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	3
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementLad:

; 205  : 	}
; 206  : }

	pop	ebp
	ret	0
?ElementLadder@@YAXKHPAX@Z ENDP				; ElementLadder
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanLadder@@YAXKHPAX@Z PROC				; WingmanLadder

; 194  : void WingmanLadder (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 195  : 
; 196  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanLad
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanLad

; 197  : 		AiSendPlayerCommand( FalconWingmanMsg::WMLadder, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	3
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanLad:

; 198  : 	}
; 199  : }

	pop	ebp
	ret	0
?WingmanLadder@@YAXKHPAX@Z ENDP				; WingmanLadder
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightStack@@YAXKHPAX@Z PROC				; FlightStack

; 231  : void FlightStack (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 232  : 
; 233  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightStac
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightStac

; 234  : 		AiSendPlayerCommand( FalconWingmanMsg::WMStack, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	4
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightStac:

; 235  : 	}
; 236  : }

	pop	ebp
	ret	0
?FlightStack@@YAXKHPAX@Z ENDP				; FlightStack
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementStack@@YAXKHPAX@Z PROC				; ElementStack

; 224  : void ElementStack (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 225  : 
; 226  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementSta
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementSta

; 227  : 		AiSendPlayerCommand( FalconWingmanMsg::WMStack, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	4
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementSta:

; 228  : 	}
; 229  : }

	pop	ebp
	ret	0
?ElementStack@@YAXKHPAX@Z ENDP				; ElementStack
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanStack@@YAXKHPAX@Z PROC				; WingmanStack

; 217  : void WingmanStack (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 218  : 
; 219  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanSta
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanSta

; 220  : 		AiSendPlayerCommand( FalconWingmanMsg::WMStack, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	4
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanSta:

; 221  : 	}
; 222  : }

	pop	ebp
	ret	0
?WingmanStack@@YAXKHPAX@Z ENDP				; WingmanStack
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightSpread@@YAXKHPAX@Z PROC				; FlightSpread

; 163  : void FlightSpread (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 164  : 
; 165  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightSpre
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightSpre

; 166  : 		AiSendPlayerCommand( FalconWingmanMsg::WMSpread, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	0
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightSpre:

; 167  : 	}
; 168  : }

	pop	ebp
	ret	0
?FlightSpread@@YAXKHPAX@Z ENDP				; FlightSpread
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementSpread@@YAXKHPAX@Z PROC				; ElementSpread

; 156  : void ElementSpread (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 157  : 
; 158  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementSpr
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementSpr

; 159  : 		AiSendPlayerCommand( FalconWingmanMsg::WMSpread, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	0
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementSpr:

; 160  : 	}
; 161  : }

	pop	ebp
	ret	0
?ElementSpread@@YAXKHPAX@Z ENDP				; ElementSpread
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanSpread@@YAXKHPAX@Z PROC				; WingmanSpread

; 149  : void WingmanSpread (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 150  : 
; 151  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanSpr
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanSpr

; 152  : 		AiSendPlayerCommand( FalconWingmanMsg::WMSpread, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	0
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanSpr:

; 153  : 	}
; 154  : }

	pop	ebp
	ret	0
?WingmanSpread@@YAXKHPAX@Z ENDP				; WingmanSpread
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightWeaponsFree@@YAXKHPAX@Z PROC			; FlightWeaponsFree

; 1135 : void FlightWeaponsFree(unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 1136 : 
; 1137 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightWeap
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightWeap

; 1138 : 		AiSendPlayerCommand( FalconWingmanMsg::WMWeaponsFree, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	14					; 0000000eH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightWeap:

; 1139 : 	}
; 1140 : }

	pop	ebp
	ret	0
?FlightWeaponsFree@@YAXKHPAX@Z ENDP			; FlightWeaponsFree
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementWeaponsFree@@YAXKHPAX@Z PROC			; ElementWeaponsFree

; 1128 : void ElementWeaponsFree(unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 1129 : 
; 1130 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementWea
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementWea

; 1131 : 		AiSendPlayerCommand( FalconWingmanMsg::WMWeaponsFree, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	14					; 0000000eH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementWea:

; 1132 : 	}
; 1133 : }

	pop	ebp
	ret	0
?ElementWeaponsFree@@YAXKHPAX@Z ENDP			; ElementWeaponsFree
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanWeaponsFree@@YAXKHPAX@Z PROC			; WingmanWeaponsFree

; 1121 : void WingmanWeaponsFree(unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 1122 : 
; 1123 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanWea
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanWea

; 1124 : 		AiSendPlayerCommand( FalconWingmanMsg::WMWeaponsFree, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	14					; 0000000eH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanWea:

; 1125 : 	}
; 1126 : }

	pop	ebp
	ret	0
?WingmanWeaponsFree@@YAXKHPAX@Z ENDP			; WingmanWeaponsFree
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightWeaponsHold@@YAXKHPAX@Z PROC			; FlightWeaponsHold

; 1113 : void FlightWeaponsHold(unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 1114 : 
; 1115 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightWeap
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightWeap

; 1116 : 		AiSendPlayerCommand( FalconWingmanMsg::WMWeaponsHold, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	13					; 0000000dH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightWeap:

; 1117 : 	}
; 1118 : }

	pop	ebp
	ret	0
?FlightWeaponsHold@@YAXKHPAX@Z ENDP			; FlightWeaponsHold
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementWeaponsHold@@YAXKHPAX@Z PROC			; ElementWeaponsHold

; 1106 : void ElementWeaponsHold(unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 1107 : 
; 1108 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementWea
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementWea

; 1109 : 		AiSendPlayerCommand( FalconWingmanMsg::WMWeaponsHold, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	13					; 0000000dH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementWea:

; 1110 : 	}
; 1111 : }

	pop	ebp
	ret	0
?ElementWeaponsHold@@YAXKHPAX@Z ENDP			; ElementWeaponsHold
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanWeaponsHold@@YAXKHPAX@Z PROC			; WingmanWeaponsHold

; 1099 : void WingmanWeaponsHold(unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 1100 : 
; 1101 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanWea
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanWea

; 1102 : 		AiSendPlayerCommand( FalconWingmanMsg::WMWeaponsHold, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	13					; 0000000dH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanWea:

; 1103 : 	}
; 1104 : }

	pop	ebp
	ret	0
?WingmanWeaponsHold@@YAXKHPAX@Z ENDP			; WingmanWeaponsHold
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 8
_tgtId$2 = -8						; size = 8
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightDesignateGroup@@YAXKHPAX@Z PROC			; FlightDesignateGroup

; 581  : void FlightDesignateGroup (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 582  : 
; 583  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightDesi
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightDesi

; 584  :       VU_ID tgtId = FalconNullId;

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR _tgtId$2[ebp], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR _tgtId$2[ebp+4], edx

; 585  : 
; 586  :       tgtId = FindAircraftTarget(SimDriver.GetPlayerAircraft());

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	?FindAircraftTarget@@YA?AVVU_ID@@PAVAircraftClass@@@Z ; FindAircraftTarget
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _tgtId$2[ebp], ecx
	mov	DWORD PTR _tgtId$2[ebp+4], edx

; 587  : 
; 588  : 		AiSendPlayerCommand( FalconWingmanMsg::WMAssignGroup, AiFlight, tgtId );

	mov	eax, DWORD PTR _tgtId$2[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _tgtId$2[ebp]
	push	ecx
	push	2
	push	10					; 0000000aH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightDesi:

; 589  : 	}
; 590  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FlightDesignateGroup@@YAXKHPAX@Z ENDP			; FlightDesignateGroup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 8
_tgtId$2 = -8						; size = 8
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementDesignateGroup@@YAXKHPAX@Z PROC			; ElementDesignateGroup

; 570  : void ElementDesignateGroup (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 571  : 
; 572  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementDes
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementDes

; 573  :       VU_ID tgtId = FalconNullId;

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR _tgtId$2[ebp], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR _tgtId$2[ebp+4], edx

; 574  : 
; 575  :       tgtId = FindAircraftTarget(SimDriver.GetPlayerAircraft());

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	?FindAircraftTarget@@YA?AVVU_ID@@PAVAircraftClass@@@Z ; FindAircraftTarget
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _tgtId$2[ebp], ecx
	mov	DWORD PTR _tgtId$2[ebp+4], edx

; 576  : 
; 577  : 		AiSendPlayerCommand( FalconWingmanMsg::WMAssignGroup, AiElement, tgtId );

	mov	eax, DWORD PTR _tgtId$2[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _tgtId$2[ebp]
	push	ecx
	push	1
	push	10					; 0000000aH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementDes:

; 578  : 	}
; 579  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ElementDesignateGroup@@YAXKHPAX@Z ENDP			; ElementDesignateGroup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 8
_tgtId$2 = -8						; size = 8
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanDesignateGroup@@YAXKHPAX@Z PROC			; WingmanDesignateGroup

; 559  : void WingmanDesignateGroup (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 560  : 
; 561  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanDes
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanDes

; 562  :       VU_ID tgtId = FalconNullId;

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR _tgtId$2[ebp], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR _tgtId$2[ebp+4], edx

; 563  : 
; 564  :       tgtId = FindAircraftTarget(SimDriver.GetPlayerAircraft());

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	?FindAircraftTarget@@YA?AVVU_ID@@PAVAircraftClass@@@Z ; FindAircraftTarget
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _tgtId$2[ebp], ecx
	mov	DWORD PTR _tgtId$2[ebp+4], edx

; 565  : 
; 566  : 		AiSendPlayerCommand( FalconWingmanMsg::WMAssignGroup, AiWingman, tgtId );

	mov	eax, DWORD PTR _tgtId$2[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _tgtId$2[ebp]
	push	ecx
	push	0
	push	10					; 0000000aH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanDes:

; 567  : 	}
; 568  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?WingmanDesignateGroup@@YAXKHPAX@Z ENDP			; WingmanDesignateGroup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 8
_tgtId$2 = -8						; size = 8
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightDesignateTarget@@YAXKHPAX@Z PROC			; FlightDesignateTarget

; 547  : void FlightDesignateTarget (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 548  : 
; 549  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightDesi
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightDesi

; 550  :       VU_ID tgtId = FalconNullId;

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR _tgtId$2[ebp], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR _tgtId$2[ebp+4], edx

; 551  : 
; 552  :       tgtId = FindAircraftTarget(SimDriver.GetPlayerAircraft());

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	?FindAircraftTarget@@YA?AVVU_ID@@PAVAircraftClass@@@Z ; FindAircraftTarget
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _tgtId$2[ebp], ecx
	mov	DWORD PTR _tgtId$2[ebp+4], edx

; 553  : 
; 554  : 		AiSendPlayerCommand( FalconWingmanMsg::WMAssignTarget, AiFlight, tgtId );

	mov	eax, DWORD PTR _tgtId$2[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _tgtId$2[ebp]
	push	ecx
	push	2
	push	9
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightDesi:

; 555  : 	}
; 556  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FlightDesignateTarget@@YAXKHPAX@Z ENDP			; FlightDesignateTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 8
_tgtId$2 = -8						; size = 8
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementDesignateTarget@@YAXKHPAX@Z PROC		; ElementDesignateTarget

; 536  : void ElementDesignateTarget (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 537  : 
; 538  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementDes
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementDes

; 539  :       VU_ID tgtId = FalconNullId;

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR _tgtId$2[ebp], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR _tgtId$2[ebp+4], edx

; 540  : 
; 541  :       tgtId = FindAircraftTarget(SimDriver.GetPlayerAircraft());

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	?FindAircraftTarget@@YA?AVVU_ID@@PAVAircraftClass@@@Z ; FindAircraftTarget
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _tgtId$2[ebp], ecx
	mov	DWORD PTR _tgtId$2[ebp+4], edx

; 542  : 
; 543  : 		AiSendPlayerCommand( FalconWingmanMsg::WMAssignTarget, AiElement, tgtId );

	mov	eax, DWORD PTR _tgtId$2[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _tgtId$2[ebp]
	push	ecx
	push	1
	push	9
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementDes:

; 544  : 	}
; 545  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ElementDesignateTarget@@YAXKHPAX@Z ENDP		; ElementDesignateTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 8
_tgtId$2 = -8						; size = 8
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanDesignateTarget@@YAXKHPAX@Z PROC		; WingmanDesignateTarget

; 525  : void WingmanDesignateTarget (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 526  : 
; 527  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanDes
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanDes

; 528  :       VU_ID tgtId = FalconNullId;

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR _tgtId$2[ebp], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR _tgtId$2[ebp+4], edx

; 529  : 
; 530  :       tgtId = FindAircraftTarget(SimDriver.GetPlayerAircraft());

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	?FindAircraftTarget@@YA?AVVU_ID@@PAVAircraftClass@@@Z ; FindAircraftTarget
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _tgtId$2[ebp], ecx
	mov	DWORD PTR _tgtId$2[ebp+4], edx

; 531  : 
; 532  : 		AiSendPlayerCommand( FalconWingmanMsg::WMAssignTarget, AiWingman, tgtId );

	mov	eax, DWORD PTR _tgtId$2[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _tgtId$2[ebp]
	push	ecx
	push	0
	push	9
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanDes:

; 533  : 	}
; 534  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?WingmanDesignateTarget@@YAXKHPAX@Z ENDP		; WingmanDesignateTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightRejoin@@YAXKHPAX@Z PROC				; FlightRejoin

; 878  : void FlightRejoin (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 879  : 
; 880  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightRejo
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightRejo

; 881  : 		AiSendPlayerCommand( FalconWingmanMsg::WMRejoin, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	23					; 00000017H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightRejo:

; 882  : 	}
; 883  : }

	pop	ebp
	ret	0
?FlightRejoin@@YAXKHPAX@Z ENDP				; FlightRejoin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementRejoin@@YAXKHPAX@Z PROC				; ElementRejoin

; 871  : void ElementRejoin (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 872  : 
; 873  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementRej
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementRej

; 874  : 		AiSendPlayerCommand( FalconWingmanMsg::WMRejoin, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	23					; 00000017H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementRej:

; 875  : 	}
; 876  : }

	pop	ebp
	ret	0
?ElementRejoin@@YAXKHPAX@Z ENDP				; ElementRejoin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanRejoin@@YAXKHPAX@Z PROC				; WingmanRejoin

; 864  : void WingmanRejoin (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 865  : 
; 866  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanRej
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanRej

; 867  : 		AiSendPlayerCommand( FalconWingmanMsg::WMRejoin, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	23					; 00000017H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanRej:

; 868  : 	}
; 869  : }

	pop	ebp
	ret	0
?WingmanRejoin@@YAXKHPAX@Z ENDP				; WingmanRejoin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightResumeNormal@@YAXKHPAX@Z PROC			; FlightResumeNormal

; 1204 : void FlightResumeNormal(unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 1205 : 
; 1206 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightResu
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightResu

; 1207 : 		AiSendPlayerCommand( FalconWingmanMsg::WMResumeNormal, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	24					; 00000018H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightResu:

; 1208 : 	}
; 1209 : }

	pop	ebp
	ret	0
?FlightResumeNormal@@YAXKHPAX@Z ENDP			; FlightResumeNormal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementResumeNormal@@YAXKHPAX@Z PROC			; ElementResumeNormal

; 1197 : void ElementResumeNormal(unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 1198 : 
; 1199 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementRes
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementRes

; 1200 : 		AiSendPlayerCommand( FalconWingmanMsg::WMResumeNormal, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	24					; 00000018H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementRes:

; 1201 : 	}
; 1202 : }

	pop	ebp
	ret	0
?ElementResumeNormal@@YAXKHPAX@Z ENDP			; ElementResumeNormal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanResumeNormal@@YAXKHPAX@Z PROC			; WingmanResumeNormal

; 1190 : void WingmanResumeNormal(unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 1191 : 
; 1192 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanRes
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanRes

; 1193 : 		AiSendPlayerCommand( FalconWingmanMsg::WMResumeNormal, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	24					; 00000018H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanRes:

; 1194 : 	}
; 1195 : }

	pop	ebp
	ret	0
?WingmanResumeNormal@@YAXKHPAX@Z ENDP			; WingmanResumeNormal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightSearchAir@@YAXKHPAX@Z PROC			; FlightSearchAir

; 1159 : void FlightSearchAir(unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 1160 : 
; 1161 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightSear
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightSear

; 1162 : 		AiSendPlayerCommand( FalconWingmanMsg::WMSearchAir, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	26					; 0000001aH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightSear:

; 1163 : 	}
; 1164 : }

	pop	ebp
	ret	0
?FlightSearchAir@@YAXKHPAX@Z ENDP			; FlightSearchAir
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementSearchAir@@YAXKHPAX@Z PROC			; ElementSearchAir

; 1152 : void ElementSearchAir(unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 1153 : 
; 1154 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementSea
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementSea

; 1155 : 		AiSendPlayerCommand( FalconWingmanMsg::WMSearchAir, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	26					; 0000001aH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementSea:

; 1156 : 	}
; 1157 : }

	pop	ebp
	ret	0
?ElementSearchAir@@YAXKHPAX@Z ENDP			; ElementSearchAir
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanSearchAir@@YAXKHPAX@Z PROC			; WingmanSearchAir

; 1145 : void WingmanSearchAir(unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 1146 : 
; 1147 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanSea
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanSea

; 1148 : 		AiSendPlayerCommand( FalconWingmanMsg::WMSearchAir, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	26					; 0000001aH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanSea:

; 1149 : 	}
; 1150 : }

	pop	ebp
	ret	0
?WingmanSearchAir@@YAXKHPAX@Z ENDP			; WingmanSearchAir
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightSearchGround@@YAXKHPAX@Z PROC			; FlightSearchGround

; 1181 : void FlightSearchGround(unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 1182 : 
; 1183 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightSear
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightSear

; 1184 : 		AiSendPlayerCommand( FalconWingmanMsg::WMSearchGround, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	25					; 00000019H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightSear:

; 1185 : 	}
; 1186 : }

	pop	ebp
	ret	0
?FlightSearchGround@@YAXKHPAX@Z ENDP			; FlightSearchGround
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementSearchGround@@YAXKHPAX@Z PROC			; ElementSearchGround

; 1174 : void ElementSearchGround(unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 1175 : 
; 1176 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementSea
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementSea

; 1177 : 		AiSendPlayerCommand( FalconWingmanMsg::WMSearchGround, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	25					; 00000019H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementSea:

; 1178 : 	}
; 1179 : }

	pop	ebp
	ret	0
?ElementSearchGround@@YAXKHPAX@Z ENDP			; ElementSearchGround
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanSearchGround@@YAXKHPAX@Z PROC			; WingmanSearchGround

; 1167 : void WingmanSearchGround(unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 1168 : 
; 1169 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanSea
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanSea

; 1170 : 		AiSendPlayerCommand( FalconWingmanMsg::WMSearchGround, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	25					; 00000019H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanSea:

; 1171 : 	}
; 1172 : }

	pop	ebp
	ret	0
?WingmanSearchGround@@YAXKHPAX@Z ENDP			; WingmanSearchGround
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightGoCoverMode@@YAXKHPAX@Z PROC			; FlightGoCoverMode

; 1065 : void FlightGoCoverMode(unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 1066 : 
; 1067 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightGoCo
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightGoCo

; 1068 : 		AiSendPlayerCommand( FalconWingmanMsg::WMCoverMode, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	12					; 0000000cH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightGoCo:

; 1069 : 	}
; 1070 : }

	pop	ebp
	ret	0
?FlightGoCoverMode@@YAXKHPAX@Z ENDP			; FlightGoCoverMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementGoCoverMode@@YAXKHPAX@Z PROC			; ElementGoCoverMode

; 1058 : void ElementGoCoverMode(unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 1059 : 
; 1060 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementGoC
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementGoC

; 1061 : 		AiSendPlayerCommand( FalconWingmanMsg::WMCoverMode, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	12					; 0000000cH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementGoC:

; 1062 : 	}
; 1063 : }

	pop	ebp
	ret	0
?ElementGoCoverMode@@YAXKHPAX@Z ENDP			; ElementGoCoverMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanGoCoverMode@@YAXKHPAX@Z PROC			; WingmanGoCoverMode

; 1051 : void WingmanGoCoverMode(unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 1052 : 
; 1053 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanGoC
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanGoC

; 1054 : 		AiSendPlayerCommand( FalconWingmanMsg::WMCoverMode, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	12					; 0000000cH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanGoC:

; 1055 : 	}
; 1056 : }

	pop	ebp
	ret	0
?WingmanGoCoverMode@@YAXKHPAX@Z ENDP			; WingmanGoCoverMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightGoShooterMode@@YAXKHPAX@Z PROC			; FlightGoShooterMode

; 1088 : void FlightGoShooterMode(unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 1089 : 
; 1090 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightGoSh
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightGoSh

; 1091 : 		AiSendPlayerCommand( FalconWingmanMsg::WMShooterMode, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	11					; 0000000bH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightGoSh:

; 1092 : 	}
; 1093 : }

	pop	ebp
	ret	0
?FlightGoShooterMode@@YAXKHPAX@Z ENDP			; FlightGoShooterMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementGoShooterMode@@YAXKHPAX@Z PROC			; ElementGoShooterMode

; 1081 : void ElementGoShooterMode(unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 1082 : 
; 1083 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementGoS
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementGoS

; 1084 : 		AiSendPlayerCommand( FalconWingmanMsg::WMShooterMode, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	11					; 0000000bH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementGoS:

; 1085 : 	}
; 1086 : }

	pop	ebp
	ret	0
?ElementGoShooterMode@@YAXKHPAX@Z ENDP			; ElementGoShooterMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanGoShooterMode@@YAXKHPAX@Z PROC			; WingmanGoShooterMode

; 1074 : void WingmanGoShooterMode(unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 1075 : 
; 1076 : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanGoS
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanGoS

; 1077 : 		AiSendPlayerCommand( FalconWingmanMsg::WMShooterMode, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	11					; 0000000bH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanGoS:

; 1078 : 	}
; 1079 : }

	pop	ebp
	ret	0
?WingmanGoShooterMode@@YAXKHPAX@Z ENDP			; WingmanGoShooterMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightFlex@@YAXKHPAX@Z PROC				; FlightFlex

; 807  : void FlightFlex (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 808  : 
; 809  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightFlex
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightFlex

; 810  : 		AiSendPlayerCommand( FalconWingmanMsg::WMFlex, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	22					; 00000016H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightFlex:

; 811  : 	}
; 812  : }

	pop	ebp
	ret	0
?FlightFlex@@YAXKHPAX@Z ENDP				; FlightFlex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementFlex@@YAXKHPAX@Z PROC				; ElementFlex

; 800  : void ElementFlex (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 801  : 
; 802  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementFle
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementFle

; 803  : 		AiSendPlayerCommand( FalconWingmanMsg::WMFlex, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	22					; 00000016H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementFle:

; 804  : 	}
; 805  : }

	pop	ebp
	ret	0
?ElementFlex@@YAXKHPAX@Z ENDP				; ElementFlex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanFlex@@YAXKHPAX@Z PROC				; WingmanFlex

; 793  : void WingmanFlex (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 794  : 
; 795  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanFle
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanFle

; 796  : 		AiSendPlayerCommand( FalconWingmanMsg::WMFlex, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	22					; 00000016H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanFle:

; 797  : 	}
; 798  : }

	pop	ebp
	ret	0
?WingmanFlex@@YAXKHPAX@Z ENDP				; WingmanFlex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightChainsaw@@YAXKHPAX@Z PROC			; FlightChainsaw

; 784  : void FlightChainsaw (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 785  : 
; 786  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightChai
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightChai

; 787  : 		AiSendPlayerCommand( FalconWingmanMsg::WMChainsaw, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	21					; 00000015H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightChai:

; 788  : 	}
; 789  : }

	pop	ebp
	ret	0
?FlightChainsaw@@YAXKHPAX@Z ENDP			; FlightChainsaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementChainsaw@@YAXKHPAX@Z PROC			; ElementChainsaw

; 777  : void ElementChainsaw (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 778  : 
; 779  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementCha
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementCha

; 780  : 		AiSendPlayerCommand( FalconWingmanMsg::WMChainsaw, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	21					; 00000015H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementCha:

; 781  : 	}
; 782  : }

	pop	ebp
	ret	0
?ElementChainsaw@@YAXKHPAX@Z ENDP			; ElementChainsaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanChainsaw@@YAXKHPAX@Z PROC			; WingmanChainsaw

; 770  : void WingmanChainsaw (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 771  : 
; 772  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanCha
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanCha

; 773  : 		AiSendPlayerCommand( FalconWingmanMsg::WMChainsaw, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	21					; 00000015H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanCha:

; 774  : 	}
; 775  : }

	pop	ebp
	ret	0
?WingmanChainsaw@@YAXKHPAX@Z ENDP			; WingmanChainsaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightPosthole@@YAXKHPAX@Z PROC			; FlightPosthole

; 761  : void FlightPosthole (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 762  : 
; 763  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightPost
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightPost

; 764  : 		AiSendPlayerCommand( FalconWingmanMsg::WMPosthole, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	20					; 00000014H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightPost:

; 765  : 	}
; 766  : }

	pop	ebp
	ret	0
?FlightPosthole@@YAXKHPAX@Z ENDP			; FlightPosthole
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementPosthole@@YAXKHPAX@Z PROC			; ElementPosthole

; 754  : void ElementPosthole (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 755  : 
; 756  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementPos
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementPos

; 757  : 		AiSendPlayerCommand( FalconWingmanMsg::WMPosthole, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	20					; 00000014H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementPos:

; 758  : 	}
; 759  : }

	pop	ebp
	ret	0
?ElementPosthole@@YAXKHPAX@Z ENDP			; ElementPosthole
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanPosthole@@YAXKHPAX@Z PROC			; WingmanPosthole

; 747  : void WingmanPosthole (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 748  : 
; 749  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanPos
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanPos

; 750  : 		AiSendPlayerCommand( FalconWingmanMsg::WMPosthole, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	20					; 00000014H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanPos:

; 751  : 	}
; 752  : }

	pop	ebp
	ret	0
?WingmanPosthole@@YAXKHPAX@Z ENDP			; WingmanPosthole
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightPince@@YAXKHPAX@Z PROC				; FlightPince

; 691  : void FlightPince (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 692  : 
; 693  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightPinc
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightPinc

; 694  : 		AiSendPlayerCommand( FalconWingmanMsg::WMPince, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	19					; 00000013H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightPinc:

; 695  : 	}
; 696  : }

	pop	ebp
	ret	0
?FlightPince@@YAXKHPAX@Z ENDP				; FlightPince
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementPince@@YAXKHPAX@Z PROC				; ElementPince

; 684  : void ElementPince (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 685  : 
; 686  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementPin
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementPin

; 687  : 		AiSendPlayerCommand( FalconWingmanMsg::WMPince, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	19					; 00000013H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementPin:

; 688  : 	}
; 689  : }

	pop	ebp
	ret	0
?ElementPince@@YAXKHPAX@Z ENDP				; ElementPince
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanPince@@YAXKHPAX@Z PROC				; WingmanPince

; 677  : void WingmanPince (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 678  : 
; 679  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanPin
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanPin

; 680  : 		AiSendPlayerCommand( FalconWingmanMsg::WMPince, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	19					; 00000013H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanPin:

; 681  : 	}
; 682  : }

	pop	ebp
	ret	0
?WingmanPince@@YAXKHPAX@Z ENDP				; WingmanPince
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightBreakRight@@YAXKHPAX@Z PROC			; FlightBreakRight

; 700  : void FlightBreakRight (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 701  : 
; 702  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightBrea
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightBrea

; 703  : 		AiSendPlayerCommand( FalconWingmanMsg::WMBreakRight, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	15					; 0000000fH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightBrea:

; 704  : 	}
; 705  : }

	pop	ebp
	ret	0
?FlightBreakRight@@YAXKHPAX@Z ENDP			; FlightBreakRight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementBreakRight@@YAXKHPAX@Z PROC			; ElementBreakRight

; 708  : void ElementBreakRight (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 709  : 
; 710  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementBre
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementBre

; 711  : 		AiSendPlayerCommand( FalconWingmanMsg::WMBreakRight, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	15					; 0000000fH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementBre:

; 712  : 	}
; 713  : }

	pop	ebp
	ret	0
?ElementBreakRight@@YAXKHPAX@Z ENDP			; ElementBreakRight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanBreakRight@@YAXKHPAX@Z PROC			; WingmanBreakRight

; 715  : void WingmanBreakRight (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 716  : 
; 717  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanBre
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanBre

; 718  : 		AiSendPlayerCommand( FalconWingmanMsg::WMBreakRight, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	15					; 0000000fH
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanBre:

; 719  : 	}
; 720  : }

	pop	ebp
	ret	0
?WingmanBreakRight@@YAXKHPAX@Z ENDP			; WingmanBreakRight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightBreakLeft@@YAXKHPAX@Z PROC			; FlightBreakLeft

; 724  : void FlightBreakLeft (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 725  : 
; 726  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightBrea
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightBrea

; 727  : 		AiSendPlayerCommand( FalconWingmanMsg::WMBreakLeft, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	16					; 00000010H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightBrea:

; 728  : 	}
; 729  : }

	pop	ebp
	ret	0
?FlightBreakLeft@@YAXKHPAX@Z ENDP			; FlightBreakLeft
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementBreakLeft@@YAXKHPAX@Z PROC			; ElementBreakLeft

; 731  : void ElementBreakLeft (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 732  : 
; 733  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementBre
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementBre

; 734  : 		AiSendPlayerCommand( FalconWingmanMsg::WMBreakLeft, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	16					; 00000010H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementBre:

; 735  : 	}
; 736  : }

	pop	ebp
	ret	0
?ElementBreakLeft@@YAXKHPAX@Z ENDP			; ElementBreakLeft
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanBreakLeft@@YAXKHPAX@Z PROC			; WingmanBreakLeft

; 738  : void WingmanBreakLeft (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 739  : 
; 740  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanBre
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanBre

; 741  : 		AiSendPlayerCommand( FalconWingmanMsg::WMBreakLeft, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	16					; 00000010H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanBre:

; 742  : 	}
; 743  : }

	pop	ebp
	ret	0
?WingmanBreakLeft@@YAXKHPAX@Z ENDP			; WingmanBreakLeft
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightCheckSix@@YAXKHPAX@Z PROC			; FlightCheckSix

; 852  : void FlightCheckSix (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 853  : 
; 854  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightChec
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightChec

; 855  : 		AiSendPlayerCommand( FalconWingmanMsg::WMCheckSix, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	18					; 00000012H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightChec:

; 856  : 	}
; 857  : }

	pop	ebp
	ret	0
?FlightCheckSix@@YAXKHPAX@Z ENDP			; FlightCheckSix
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementCheckSix@@YAXKHPAX@Z PROC			; ElementCheckSix

; 845  : void ElementCheckSix (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 846  : 
; 847  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementChe
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementChe

; 848  : 		AiSendPlayerCommand( FalconWingmanMsg::WMCheckSix, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	18					; 00000012H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementChe:

; 849  : 	}
; 850  : }

	pop	ebp
	ret	0
?ElementCheckSix@@YAXKHPAX@Z ENDP			; ElementCheckSix
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanCheckSix@@YAXKHPAX@Z PROC			; WingmanCheckSix

; 838  : void WingmanCheckSix (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 839  : 
; 840  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanChe
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanChe

; 841  : 		AiSendPlayerCommand( FalconWingmanMsg::WMCheckSix, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	18					; 00000012H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanChe:

; 842  : 	}
; 843  : }

	pop	ebp
	ret	0
?WingmanCheckSix@@YAXKHPAX@Z ENDP			; WingmanCheckSix
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?FlightClearSix@@YAXKHPAX@Z PROC			; FlightClearSix

; 830  : void FlightClearSix (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 831  : 
; 832  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@FlightClea
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@FlightClea

; 833  : 		AiSendPlayerCommand( FalconWingmanMsg::WMClearSix, AiFlight );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	17					; 00000011H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@FlightClea:

; 834  : 	}
; 835  : }

	pop	ebp
	ret	0
?FlightClearSix@@YAXKHPAX@Z ENDP			; FlightClearSix
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?ElementClearSix@@YAXKHPAX@Z PROC			; ElementClearSix

; 823  : void ElementClearSix (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 824  : 
; 825  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@ElementCle
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ElementCle

; 826  : 		AiSendPlayerCommand( FalconWingmanMsg::WMClearSix, AiElement );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	1
	push	17					; 00000011H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@ElementCle:

; 827  : 	}
; 828  : }

	pop	ebp
	ret	0
?ElementClearSix@@YAXKHPAX@Z ENDP			; ElementClearSix
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\siminput\wingcmds.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_state$ = 12						; size = 4
___formal$ = 16						; size = 4
?WingmanClearSix@@YAXKHPAX@Z PROC			; WingmanClearSix

; 816  : void WingmanClearSix (unsigned long, int state, void*) {

	push	ebp
	mov	ebp, esp

; 817  : 
; 818  : 	if ((state & KEY_DOWN) && (SimDriver.GetPlayerAircraft())){

	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 8
	je	SHORT $LN2@WingmanCle
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@WingmanCle

; 819  : 		AiSendPlayerCommand( FalconWingmanMsg::WMClearSix, AiWingman );

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	0
	push	17					; 00000011H
	call	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z	; AiSendPlayerCommand
	add	esp, 16					; 00000010H
$LN2@WingmanCle:

; 820  : 	}
; 821  : }

	pop	ebp
	ret	0
?WingmanClearSix@@YAXKHPAX@Z ENDP			; WingmanClearSix
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??9VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??9VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator!=, COMDAT
; _this$ = ecx

; 111  : 	bool operator != (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 		return (
; 113  : 			num_ == rhs.num_ ? 
; 114  : 			(creator_ == rhs.creator_ ? false : true) : 
; 115  : 			true
; 116  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 1
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 1
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 117  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??9VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??8VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator==, COMDAT
; _this$ = ecx

; 104  : 	bool operator == (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		return (
; 106  : 			num_ == rhs.num_ ? 
; 107  : 			(creator_ == rhs.creator_ ? true : false) : 
; 108  : 			false
; 109  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 0
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 110  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
END
