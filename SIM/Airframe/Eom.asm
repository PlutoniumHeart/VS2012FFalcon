; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\Airframe\Eom.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?gSpeedyGonzales@@3MA				; gSpeedyGonzales
PUBLIC	?GROUND_TOLERANCE@@3MA				; GROUND_TOLERANCE
PUBLIC	?ANG_RATE@@3MA					; ANG_RATE
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
_BSS	SEGMENT
_lastVt	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
CONST	SEGMENT
_NEAR_CLIP DD	03f800000r			; 1
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
_DATA	SEGMENT
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
?gSpeedyGonzales@@3MA DD 03f800000r		; 1	; gSpeedyGonzales
?GROUND_TOLERANCE@@3MA DD 03dcccccdr		; 0.1	; GROUND_TOLERANCE
?ANG_RATE@@3MA DD 040400000r			; 3	; ANG_RATE
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_DATA	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	_atanf
PUBLIC	_sinf
PUBLIC	?atan@@YAMM@Z					; atan
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?XDelta@VuEntity@@QBEMXZ			; VuEntity::XDelta
PUBLIC	?YDelta@VuEntity@@QBEMXZ			; VuEntity::YDelta
PUBLIC	?ZDelta@VuEntity@@QBEMXZ			; VuEntity::ZDelta
PUBLIC	?Pitch@VuEntity@@QBEMXZ				; VuEntity::Pitch
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?IsSetFalcFlag@FalconEntity@@QAEHH@Z		; FalconEntity::IsSetFalcFlag
PUBLIC	?IsPlayer@FalconEntity@@QAEHXZ			; FalconEntity::IsPlayer
PUBLIC	?mlSinCos@@YAXPAUmlTrig@@M@Z			; mlSinCos
PUBLIC	?checked_atan2@@YANNN@Z				; checked_atan2
PUBLIC	?CalcBodyRates@AirframeClass@@AAEXM@Z		; AirframeClass::CalcBodyRates
PUBLIC	?EquationsOfMotion@AirframeClass@@AAEXM@Z	; AirframeClass::EquationsOfMotion
PUBLIC	?ResetIntegrators@AirframeClass@@AAEXXZ		; AirframeClass::ResetIntegrators
PUBLIC	?CalculateVt@AirframeClass@@AAEMM@Z		; AirframeClass::CalculateVt
PUBLIC	?SetGroundPosition@AirframeClass@@AAEXMMMM@Z	; AirframeClass::SetGroundPosition
PUBLIC	?CalculateGroundPlane@AirframeClass@@ABEXPAM0@Z	; AirframeClass::CalculateGroundPlane
PUBLIC	?CalcGroundTurnRate@AirframeClass@@AAEXM@Z	; AirframeClass::CalcGroundTurnRate
PUBLIC	?ResetOrientation@AirframeClass@@QAEXXZ		; AirframeClass::ResetOrientation
PUBLIC	?CalcBodyOrientation@AirframeClass@@QAEXM@Z	; AirframeClass::CalcBodyOrientation
PUBLIC	?CheckHeight@AirframeClass@@QBEMXZ		; AirframeClass::CheckHeight
PUBLIC	?CheckGroundImpact@AirframeClass@@QAEXM@Z	; AirframeClass::CheckGroundImpact
PUBLIC	?CalcMuFric@AirframeClass@@QAEMH@Z		; AirframeClass::CalcMuFric
PUBLIC	?NumGear@AirframeClass@@QBEHXZ			; AirframeClass::NumGear
PUBLIC	?GetAeroData@AirframeClass@@QBEMH@Z		; AirframeClass::GetAeroData
PUBLIC	?DragBodypart@AirframeClass@@QAEXXZ		; AirframeClass::DragBodypart
PUBLIC	?SetFlag@AirframeClass@@QAEXH@Z			; AirframeClass::SetFlag
PUBLIC	?ClearFlag@AirframeClass@@QAEXH@Z		; AirframeClass::ClearFlag
PUBLIC	?IsSet@AirframeClass@@QBEHH@Z			; AirframeClass::IsSet
PUBLIC	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
PUBLIC	?IsSetFlag@SimBaseClass@@QBEHH@Z		; SimBaseClass::IsSetFlag
PUBLIC	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
PUBLIC	?MaxStrength@SimBaseClass@@QAEMXZ		; SimBaseClass::MaxStrength
PUBLIC	?SetDOF@SimMoverClass@@QAEXHM@Z			; SimMoverClass::SetDOF
PUBLIC	?GetDOFValue@SimMoverClass@@QAEMH@Z		; SimMoverClass::GetDOFValue
PUBLIC	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
PUBLIC	?IsComplex@AircraftClass@@QAEHXZ		; AircraftClass::IsComplex
PUBLIC	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ	; AircraftClass::DBrain
PUBLIC	?SetStaticTurbulence@AircraftClass@@QAEXMMM@Z	; AircraftClass::SetStaticTurbulence
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?GenerateFastRandom@@YAJXZ			; GenerateFastRandom
PUBLIC	?PRANDFloat@@YAMXZ				; PRANDFloat
PUBLIC	?PRANDFloatPos@@YAMXZ				; PRANDFloatPos
PUBLIC	?Radius@DrawableObject@@QBEMXZ			; DrawableObject::Radius
PUBLIC	?AddTakeOff@FackClass@@QAEXK@Z			; FackClass::AddTakeOff
PUBLIC	?AddLanding@FackClass@@QAEXK@Z			; FackClass::AddLanding
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	?InPackage@CampBaseClass@@QAEHXZ		; CampBaseClass::InPackage
PUBLIC	?GetType@CampBaseClass@@QBEEXZ			; CampBaseClass::GetType
PUBLIC	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
PUBLIC	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
PUBLIC	?SetATCFlag@DigitalBrain@@QAEXH@Z		; DigitalBrain::SetATCFlag
PUBLIC	?IsSetATC@DigitalBrain@@QAEHH@Z			; DigitalBrain::IsSetATC
PUBLIC	?SetATCStatus@DigitalBrain@@QAEXW4AtcStatusEnum@@@Z ; DigitalBrain::SetATCStatus
PUBLIC	?ATCStatus@DigitalBrain@@QAE?AW4AtcStatusEnum@@XZ ; DigitalBrain::ATCStatus
PUBLIC	?SetWaitTimer@DigitalBrain@@QAEXK@Z		; DigitalBrain::SetWaitTimer
PUBLIC	?WaitTime@DigitalBrain@@QAEKXZ			; DigitalBrain::WaitTime
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA	; `GenerateFastRandom'::`2'::LastRandom
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@399d4952
PUBLIC	__real@3a83126f
PUBLIC	__real@3ac49ba6
PUBLIC	__real@3b03126f
PUBLIC	__real@3b449ba6
PUBLIC	__real@3ba3d70a
PUBLIC	__real@3be56042
PUBLIC	__real@3c23d70a
PUBLIC	__real@3c8efa34
PUBLIC	__real@3ca3d70a
PUBLIC	__real@3d23d70a
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3d56774e
PUBLIC	__real@3d75c28f
PUBLIC	__real@3db2b8c1
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e800000
PUBLIC	__real@3e99999a
PUBLIC	__real@3eb2b8c1
PUBLIC	__real@3eb851ec
PUBLIC	__real@3ecccccd
PUBLIC	__real@3ee147ae
PUBLIC	__real@3f000000
PUBLIC	__real@3f0ccccd
PUBLIC	__real@3f0efdca
PUBLIC	__real@3f19999a
PUBLIC	__real@3f400000
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f59999a
PUBLIC	__real@3f666666
PUBLIC	__real@3f733333
PUBLIC	__real@3f774539
PUBLIC	__real@3f7851ec
PUBLIC	__real@3f7d70a4
PUBLIC	__real@3f800000
PUBLIC	__real@3f8ccccd
PUBLIC	__real@3fa00000
PUBLIC	__real@3fc90fd9
PUBLIC	__real@3fd80b03
PUBLIC	__real@3fe00000
PUBLIC	__real@3febd70a3d70a3d7
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@40000000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@40400000
PUBLIC	__real@40490fdb
PUBLIC	__real@4060e0dc3c000000
PUBLIC	__real@407b53cf
PUBLIC	__real@40800000
PUBLIC	__real@40900000
PUBLIC	__real@40a00000
PUBLIC	__real@410706e2
PUBLIC	__real@41200000
PUBLIC	__real@4152ac08
PUBLIC	__real@41700000
PUBLIC	__real@418706e2
PUBLIC	__real@41a00000
PUBLIC	__real@41f00000
PUBLIC	__real@4200b53f
PUBLIC	__real@4228c89a
PUBLIC	__real@42340000
PUBLIC	__real@42480000
PUBLIC	__real@42652ee1
PUBLIC	__real@428706e2
PUBLIC	__real@428c0000
PUBLIC	__real@42b40000
PUBLIC	__real@42c80000
PUBLIC	__real@430706e2
PUBLIC	__real@43480000
PUBLIC	__real@435c0000
PUBLIC	__real@438706e2
PUBLIC	__real@43b9a977
PUBLIC	__real@43c80000
PUBLIC	__real@43d2fac1
PUBLIC	__real@43fa0000
PUBLIC	__real@44fa0000
PUBLIC	__real@451c4000
PUBLIC	__real@459c4000
PUBLIC	__real@466a6000
PUBLIC	__real@46afc800
PUBLIC	__real@46fffe00
PUBLIC	__real@471c4000
PUBLIC	__real@477fff00
PUBLIC	__real@47c35000
PUBLIC	__real@481c4000
PUBLIC	__real@48be6e00
PUBLIC	__real@48c35000
PUBLIC	__real@4a742400
PUBLIC	__real@8000000000000000
PUBLIC	__real@ba83126f
PUBLIC	__real@bba3d70a
PUBLIC	__real@bd0ee8d1
PUBLIC	__real@bf000000
PUBLIC	__real@bf800000
PUBLIC	__real@bff921fb54442d18
PUBLIC	__real@c0400000
PUBLIC	__real@c0490fdb
PUBLIC	__real@c07b53cf
PUBLIC	__real@c0800000
PUBLIC	__real@c0900000
PUBLIC	__real@c0a00000
PUBLIC	__real@c1200000
PUBLIC	__real@c1700000
PUBLIC	__real@c200b53f
PUBLIC	__real@c20706e2
PUBLIC	__real@c2340000
PUBLIC	__real@c2b40000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_atan:PROC
EXTRN	_fabs:PROC
EXTRN	_sin:PROC
EXTRN	_rand:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	?FLTust@SIMLIB_MATH_CLASS@@QAEMMMMQAM@Z:PROC	; SIMLIB_MATH_CLASS::FLTust
EXTRN	?Sfx@F4SoundPos@@QAEXHHMM@Z:PROC		; F4SoundPos::Sfx
EXTRN	?Sfx@F4SoundPos@@QAEXHHMMMMM@Z:PROC		; F4SoundPos::Sfx
EXTRN	?Trigenometry@AirframeClass@@AAEXXZ:PROC	; AirframeClass::Trigenometry
EXTRN	?TogglePB@AirframeClass@@QAEXXZ:PROC		; AirframeClass::TogglePB
EXTRN	?YawIt@AirframeClass@@QAEXMM@Z:PROC		; AirframeClass::YawIt
EXTRN	?PitchIt@AirframeClass@@QAEXMM@Z:PROC		; AirframeClass::PitchIt
EXTRN	?RollIt@AirframeClass@@QAEXMM@Z:PROC		; AirframeClass::RollIt
EXTRN	?SetFlag@SimBaseClass@@QAEXH@Z:PROC		; SimBaseClass::SetFlag
EXTRN	?UnSetFlag@SimBaseClass@@QAEXH@Z:PROC		; SimBaseClass::UnSetFlag
EXTRN	?LandingCheck@AircraftClass@@QAEHMMH@Z:PROC	; AircraftClass::LandingCheck
EXTRN	?SetPulseTurbulence@AircraftClass@@QAEXMMMM@Z:PROC ; AircraftClass::SetPulseTurbulence
EXTRN	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z:PROC ; MatrixMult
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z:PROC ; OTWDriverClass::GetGroundLevel
EXTRN	?DistanceFromCloudEdge@OTWDriverClass@@QAEMXZ:PROC ; OTWDriverClass::DistanceFromCloudEdge
EXTRN	?SetExitMenu@OTWDriverClass@@QAEXH@Z:PROC	; OTWDriverClass::SetExitMenu
EXTRN	?GetGroundType@OTWDriverClass@@QAEHMM@Z:PROC	; OTWDriverClass::GetGroundType
EXTRN	?AddMflList@FaultClass@@QAEXKW4type_FSubSystem@1@H@Z:PROC ; FaultClass::AddMflList
EXTRN	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z:PROC ; FackClass::SetFault
EXTRN	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z:PROC ; FackClass::GetFault
EXTRN	?FalconSendMessage@@YAXPAVVuMessage@@H@Z:PROC	; FalconSendMessage
EXTRN	?CreateGroundCollisionMessage@@YAPAVFalconDamageMessage@@PAVSimVehicleClass@@HPAVVuTargetEntity@@@Z:PROC ; CreateGroundCollisionMessage
EXTRN	??0FalconLandingMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconLandingMessage::FalconLandingMessage
EXTRN	?GetAxisValue@SIMLIB_IO_CLASS@@QAEHW4GameAxis_t@@@Z:PROC ; SIMLIB_IO_CLASS::GetAxisValue
EXTRN	?WindSpeedInFeetPerSecond@WeatherClass@@QAEMPBUTpoint@@@Z:PROC ; WeatherClass::WindSpeedInFeetPerSecond
EXTRN	?WindHeadingAt@WeatherClass@@QAEMPBUTpoint@@@Z:PROC ; WeatherClass::WindHeadingAt
EXTRN	?IsOverRunway@ATCBrain@@QAEHPAVAircraftClass@@@Z:PROC ; ATCBrain::IsOverRunway
EXTRN	?FindNearbyAirbase@@YAPAVObjectiveClass@@FF@Z:PROC ; FindNearbyAirbase
EXTRN	?ConvertSimToGrid@@YAXPAUvector@@PAF1@Z:PROC	; ConvertSimToGrid
EXTRN	?JoystickPlayEffect@@YAHHH@Z:PROC		; JoystickPlayEffect
EXTRN	?JoystickStopEffect@@YAXH@Z:PROC		; JoystickStopEffect
EXTRN	?RegroupAircraft@@YAXPAVAircraftClass@@@Z:PROC	; RegroupAircraft
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	?SendATCMsg@DigitalBrain@@QAEXW4AtcStatusEnum@@@Z:PROC ; DigitalBrain::SendATCMsg
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?SimLibMinorFrameTime@@3MA:DWORD		; SimLibMinorFrameTime
EXTRN	?SimLibElapsedTime@@3KA:DWORD			; SimLibElapsedTime
EXTRN	?Math@@3VSIMLIB_MATH_CLASS@@A:BYTE		; Math
EXTRN	?aeroDataset@@3PAVAeroDataSet@@A:DWORD		; aeroDataset
EXTRN	?ComplexGearDOF@@3PAHA:BYTE			; ComplexGearDOF
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?UserStickInputs@@3VPilotInputs@@A:BYTE		; UserStickInputs
EXTRN	?IO@@3VSIMLIB_IO_CLASS@@A:BYTE			; IO
EXTRN	?realWeather@@3PAVRealWeather@@A:DWORD		; realWeather
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?gPlayerExitMenuShown@@3HA:DWORD		; gPlayerExitMenuShown
EXTRN	?g_bRealisticAvionics@@3_NA:BYTE		; g_bRealisticAvionics
EXTRN	?g_bRollLinkedNWSRudder@@3_NA:BYTE		; g_bRollLinkedNWSRudder
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA
_BSS	SEGMENT
?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA DD 01H DUP (?) ; `GenerateFastRandom'::`2'::LastRandom
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@c2b40000
CONST	SEGMENT
__real@c2b40000 DD 0c2b40000r			; -90
CONST	ENDS
;	COMDAT __real@c2340000
CONST	SEGMENT
__real@c2340000 DD 0c2340000r			; -45
CONST	ENDS
;	COMDAT __real@c20706e2
CONST	SEGMENT
__real@c20706e2 DD 0c20706e2r			; -33.7567
CONST	ENDS
;	COMDAT __real@c200b53f
CONST	SEGMENT
__real@c200b53f DD 0c200b53fr			; -32.177
CONST	ENDS
;	COMDAT __real@c1700000
CONST	SEGMENT
__real@c1700000 DD 0c1700000r			; -15
CONST	ENDS
;	COMDAT __real@c1200000
CONST	SEGMENT
__real@c1200000 DD 0c1200000r			; -10
CONST	ENDS
;	COMDAT __real@c0a00000
CONST	SEGMENT
__real@c0a00000 DD 0c0a00000r			; -5
CONST	ENDS
;	COMDAT __real@c0900000
CONST	SEGMENT
__real@c0900000 DD 0c0900000r			; -4.5
CONST	ENDS
;	COMDAT __real@c0800000
CONST	SEGMENT
__real@c0800000 DD 0c0800000r			; -4
CONST	ENDS
;	COMDAT __real@c07b53cf
CONST	SEGMENT
__real@c07b53cf DD 0c07b53cfr			; -3.92699
CONST	ENDS
;	COMDAT __real@c0490fdb
CONST	SEGMENT
__real@c0490fdb DD 0c0490fdbr			; -3.14159
CONST	ENDS
;	COMDAT __real@c0400000
CONST	SEGMENT
__real@c0400000 DD 0c0400000r			; -3
CONST	ENDS
;	COMDAT __real@bff921fb54442d18
CONST	SEGMENT
__real@bff921fb54442d18 DQ 0bff921fb54442d18r	; -1.5708
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@bd0ee8d1
CONST	SEGMENT
__real@bd0ee8d1 DD 0bd0ee8d1r			; -0.03489
CONST	ENDS
;	COMDAT __real@bba3d70a
CONST	SEGMENT
__real@bba3d70a DD 0bba3d70ar			; -0.005
CONST	ENDS
;	COMDAT __real@ba83126f
CONST	SEGMENT
__real@ba83126f DD 0ba83126fr			; -0.001
CONST	ENDS
;	COMDAT __real@8000000000000000
CONST	SEGMENT
__real@8000000000000000 DQ 08000000000000000r	; -0
CONST	ENDS
;	COMDAT __real@4a742400
CONST	SEGMENT
__real@4a742400 DD 04a742400r			; 4e+006
CONST	ENDS
;	COMDAT __real@48c35000
CONST	SEGMENT
__real@48c35000 DD 048c35000r			; 400000
CONST	ENDS
;	COMDAT __real@48be6e00
CONST	SEGMENT
__real@48be6e00 DD 048be6e00r			; 390000
CONST	ENDS
;	COMDAT __real@481c4000
CONST	SEGMENT
__real@481c4000 DD 0481c4000r			; 160000
CONST	ENDS
;	COMDAT __real@47c35000
CONST	SEGMENT
__real@47c35000 DD 047c35000r			; 100000
CONST	ENDS
;	COMDAT __real@477fff00
CONST	SEGMENT
__real@477fff00 DD 0477fff00r			; 65535
CONST	ENDS
;	COMDAT __real@471c4000
CONST	SEGMENT
__real@471c4000 DD 0471c4000r			; 40000
CONST	ENDS
;	COMDAT __real@46fffe00
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
CONST	ENDS
;	COMDAT __real@46afc800
CONST	SEGMENT
__real@46afc800 DD 046afc800r			; 22500
CONST	ENDS
;	COMDAT __real@466a6000
CONST	SEGMENT
__real@466a6000 DD 0466a6000r			; 15000
CONST	ENDS
;	COMDAT __real@459c4000
CONST	SEGMENT
__real@459c4000 DD 0459c4000r			; 5000
CONST	ENDS
;	COMDAT __real@451c4000
CONST	SEGMENT
__real@451c4000 DD 0451c4000r			; 2500
CONST	ENDS
;	COMDAT __real@44fa0000
CONST	SEGMENT
__real@44fa0000 DD 044fa0000r			; 2000
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@43d2fac1
CONST	SEGMENT
__real@43d2fac1 DD 043d2fac1r			; 421.959
CONST	ENDS
;	COMDAT __real@43c80000
CONST	SEGMENT
__real@43c80000 DD 043c80000r			; 400
CONST	ENDS
;	COMDAT __real@43b9a977
CONST	SEGMENT
__real@43b9a977 DD 043b9a977r			; 371.324
CONST	ENDS
;	COMDAT __real@438706e2
CONST	SEGMENT
__real@438706e2 DD 0438706e2r			; 270.054
CONST	ENDS
;	COMDAT __real@435c0000
CONST	SEGMENT
__real@435c0000 DD 0435c0000r			; 220
CONST	ENDS
;	COMDAT __real@43480000
CONST	SEGMENT
__real@43480000 DD 043480000r			; 200
CONST	ENDS
;	COMDAT __real@430706e2
CONST	SEGMENT
__real@430706e2 DD 0430706e2r			; 135.027
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42b40000
CONST	SEGMENT
__real@42b40000 DD 042b40000r			; 90
CONST	ENDS
;	COMDAT __real@428c0000
CONST	SEGMENT
__real@428c0000 DD 0428c0000r			; 70
CONST	ENDS
;	COMDAT __real@428706e2
CONST	SEGMENT
__real@428706e2 DD 0428706e2r			; 67.5134
CONST	ENDS
;	COMDAT __real@42652ee1
CONST	SEGMENT
__real@42652ee1 DD 042652ee1r			; 57.2958
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@42340000
CONST	SEGMENT
__real@42340000 DD 042340000r			; 45
CONST	ENDS
;	COMDAT __real@4228c89a
CONST	SEGMENT
__real@4228c89a DD 04228c89ar			; 42.1959
CONST	ENDS
;	COMDAT __real@4200b53f
CONST	SEGMENT
__real@4200b53f DD 04200b53fr			; 32.177
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@418706e2
CONST	SEGMENT
__real@418706e2 DD 0418706e2r			; 16.8784
CONST	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@4152ac08
CONST	SEGMENT
__real@4152ac08 DD 04152ac08r			; 13.167
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@410706e2
CONST	SEGMENT
__real@410706e2 DD 0410706e2r			; 8.43918
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40900000
CONST	SEGMENT
__real@40900000 DD 040900000r			; 4.5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@407b53cf
CONST	SEGMENT
__real@407b53cf DD 0407b53cfr			; 3.92699
CONST	ENDS
;	COMDAT __real@4060e0dc3c000000
CONST	SEGMENT
__real@4060e0dc3c000000 DQ 04060e0dc3c000000r	; 135.027
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3febd70a3d70a3d7
CONST	SEGMENT
__real@3febd70a3d70a3d7 DQ 03febd70a3d70a3d7r	; 0.87
CONST	ENDS
;	COMDAT __real@3fe00000
CONST	SEGMENT
__real@3fe00000 DD 03fe00000r			; 1.75
CONST	ENDS
;	COMDAT __real@3fd80b03
CONST	SEGMENT
__real@3fd80b03 DD 03fd80b03r			; 1.68784
CONST	ENDS
;	COMDAT __real@3fc90fd9
CONST	SEGMENT
__real@3fc90fd9 DD 03fc90fd9r			; 1.5708
CONST	ENDS
;	COMDAT __real@3fa00000
CONST	SEGMENT
__real@3fa00000 DD 03fa00000r			; 1.25
CONST	ENDS
;	COMDAT __real@3f8ccccd
CONST	SEGMENT
__real@3f8ccccd DD 03f8ccccdr			; 1.1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7d70a4
CONST	SEGMENT
__real@3f7d70a4 DD 03f7d70a4r			; 0.99
CONST	ENDS
;	COMDAT __real@3f7851ec
CONST	SEGMENT
__real@3f7851ec DD 03f7851ecr			; 0.97
CONST	ENDS
;	COMDAT __real@3f774539
CONST	SEGMENT
__real@3f774539 DD 03f774539r			; 0.9659
CONST	ENDS
;	COMDAT __real@3f733333
CONST	SEGMENT
__real@3f733333 DD 03f733333r			; 0.95
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f0efdca
CONST	SEGMENT
__real@3f0efdca DD 03f0efdcar			; 0.55856
CONST	ENDS
;	COMDAT __real@3f0ccccd
CONST	SEGMENT
__real@3f0ccccd DD 03f0ccccdr			; 0.55
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ee147ae
CONST	SEGMENT
__real@3ee147ae DD 03ee147aer			; 0.44
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3eb851ec
CONST	SEGMENT
__real@3eb851ec DD 03eb851ecr			; 0.36
CONST	ENDS
;	COMDAT __real@3eb2b8c1
CONST	SEGMENT
__real@3eb2b8c1 DD 03eb2b8c1r			; 0.349066
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3db2b8c1
CONST	SEGMENT
__real@3db2b8c1 DD 03db2b8c1r			; 0.0872665
CONST	ENDS
;	COMDAT __real@3d75c28f
CONST	SEGMENT
__real@3d75c28f DD 03d75c28fr			; 0.06
CONST	ENDS
;	COMDAT __real@3d56774e
CONST	SEGMENT
__real@3d56774e DD 03d56774er			; 0.0523599
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3d23d70a
CONST	SEGMENT
__real@3d23d70a DD 03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT __real@3ca3d70a
CONST	SEGMENT
__real@3ca3d70a DD 03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3be56042
CONST	SEGMENT
__real@3be56042 DD 03be56042r			; 0.007
CONST	ENDS
;	COMDAT __real@3ba3d70a
CONST	SEGMENT
__real@3ba3d70a DD 03ba3d70ar			; 0.005
CONST	ENDS
;	COMDAT __real@3b449ba6
CONST	SEGMENT
__real@3b449ba6 DD 03b449ba6r			; 0.003
CONST	ENDS
;	COMDAT __real@3b03126f
CONST	SEGMENT
__real@3b03126f DD 03b03126fr			; 0.002
CONST	ENDS
;	COMDAT __real@3ac49ba6
CONST	SEGMENT
__real@3ac49ba6 DD 03ac49ba6r			; 0.0015
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@399d4952
CONST	SEGMENT
__real@399d4952 DD 0399d4952r			; 0.0003
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?CalcMuFric@AirframeClass@@QAEMH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CalcMuFric@AirframeClass@@QAEMH@Z$0
__unwindtable$?CheckGroundImpact@AirframeClass@@QAEXM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckGroundImpact@AirframeClass@@QAEXM@Z$0
__ehfuncinfo$?CalcMuFric@AirframeClass@@QAEMH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CalcMuFric@AirframeClass@@QAEMH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CheckGroundImpact@AirframeClass@@QAEXM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CheckGroundImpact@AirframeClass@@QAEXM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?WaitTime@DigitalBrain@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?WaitTime@DigitalBrain@@QAEKXZ PROC			; DigitalBrain::WaitTime, COMDAT
; _this$ = ecx

; 767  : 	VU_TIME	WaitTime(void)							{return waittimer;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+344]
	mov	esp, ebp
	pop	ebp
	ret	0
?WaitTime@DigitalBrain@@QAEKXZ ENDP			; DigitalBrain::WaitTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?SetWaitTimer@DigitalBrain@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_timer$ = 8						; size = 4
?SetWaitTimer@DigitalBrain@@QAEXK@Z PROC		; DigitalBrain::SetWaitTimer, COMDAT
; _this$ = ecx

; 766  : 	void			SetWaitTimer(VU_TIME timer)		{waittimer = timer;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _timer$[ebp]
	mov	DWORD PTR [eax+344], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWaitTimer@DigitalBrain@@QAEXK@Z ENDP		; DigitalBrain::SetWaitTimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?ATCStatus@DigitalBrain@@QAE?AW4AtcStatusEnum@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ATCStatus@DigitalBrain@@QAE?AW4AtcStatusEnum@@XZ PROC	; DigitalBrain::ATCStatus, COMDAT
; _this$ = ecx

; 765  : 	AtcStatusEnum	ATCStatus(void)							{return atcstatus;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+328]
	mov	esp, ebp
	pop	ebp
	ret	0
?ATCStatus@DigitalBrain@@QAE?AW4AtcStatusEnum@@XZ ENDP	; DigitalBrain::ATCStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?SetATCStatus@DigitalBrain@@QAEXW4AtcStatusEnum@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_status$ = 8						; size = 4
?SetATCStatus@DigitalBrain@@QAEXW4AtcStatusEnum@@@Z PROC ; DigitalBrain::SetATCStatus, COMDAT
; _this$ = ecx

; 764  : 	void			SetATCStatus(AtcStatusEnum status)		{atcstatus = status;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax+328], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetATCStatus@DigitalBrain@@QAEXW4AtcStatusEnum@@@Z ENDP ; DigitalBrain::SetATCStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?IsSetATC@DigitalBrain@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetATC@DigitalBrain@@QAEHH@Z PROC			; DigitalBrain::IsSetATC, COMDAT
; _this$ = ecx

; 709  : 	int		IsSetATC(int flag)								{return (atcFlags & flag) && TRUE;}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+300]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsSetATC
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@IsSetATC
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSetATC
$LN3@IsSetATC:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSetATC:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetATC@DigitalBrain@@QAEHH@Z ENDP			; DigitalBrain::IsSetATC
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?SetATCFlag@DigitalBrain@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetATCFlag@DigitalBrain@@QAEXH@Z PROC			; DigitalBrain::SetATCFlag, COMDAT
; _this$ = ecx

; 707  : 	void	SetATCFlag(int flag)							{atcFlags |= flag;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+300]
	or	ecx, DWORD PTR _flag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+300], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetATCFlag@DigitalBrain@@QAEXH@Z ENDP			; DigitalBrain::SetATCFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ PROC ; SimulationDriver::GetPlayerEntity, COMDAT
; _this$ = ecx

; 76   : 	SimMoverClass *GetPlayerEntity() const { return const_cast<SimMoverClass*>(playerEntity); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ENDP ; SimulationDriver::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simio.h
;	COMDAT ?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z PROC ; SIMLIB_IO_CLASS::AnalogIsUsed, COMDAT
; _this$ = ecx

; 237  : 	bool	AnalogIsUsed(GameAxis_t id) { return ( analog[id].isUsed); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _id$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [ecx+eax+12]
	mov	esp, ebp
	pop	ebp
	ret	4
?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ENDP ; SIMLIB_IO_CLASS::AnalogIsUsed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetType@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetType@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetType, COMDAT
; _this$ = ecx

; 289  : 	uchar GetType()	const						{	return (EntityType())->classInfo_[VU_TYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	shl	ecx, 1
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetType@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?InPackage@CampBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InPackage@CampBaseClass@@QAEHXZ PROC			; CampBaseClass::InPackage, COMDAT
; _this$ = ecx

; 274  : 	int InPackage (void)						{	return local_flags & CBC_IN_PACKAGE; }		

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+156]
	and	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?InPackage@CampBaseClass@@QAEHXZ ENDP			; CampBaseClass::InPackage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fack.h
;	COMDAT ?AddLanding@FackClass@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_thetime$ = 8						; size = 4
?AddLanding@FackClass@@QAEXK@Z PROC			; FackClass::AddLanding, COMDAT
; _this$ = ecx

; 54   :     void	AddLanding(VU_TIME thetime) { mFaults.AddMflList(thetime, FaultClass::landing, 0); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	push	30					; 0000001eH
	mov	eax, DWORD PTR _thetime$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?AddMflList@FaultClass@@QAEXKW4type_FSubSystem@1@H@Z ; FaultClass::AddMflList
	mov	esp, ebp
	pop	ebp
	ret	4
?AddLanding@FackClass@@QAEXK@Z ENDP			; FackClass::AddLanding
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fack.h
;	COMDAT ?AddTakeOff@FackClass@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_thetime$ = 8						; size = 4
?AddTakeOff@FackClass@@QAEXK@Z PROC			; FackClass::AddTakeOff, COMDAT
; _this$ = ecx

; 53   :     void	AddTakeOff(VU_TIME thetime) { mFaults.AddMflList(thetime, FaultClass::takeoff, 0); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	push	31					; 0000001fH
	mov	eax, DWORD PTR _thetime$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?AddMflList@FaultClass@@QAEXKW4type_FSubSystem@1@H@Z ; FaultClass::AddMflList
	mov	esp, ebp
	pop	ebp
	ret	4
?AddTakeOff@FackClass@@QAEXK@Z ENDP			; FackClass::AddTakeOff
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?Radius@DrawableObject@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Radius@DrawableObject@@QBEMXZ PROC			; DrawableObject::Radius, COMDAT
; _this$ = ecx

; 27   : 	float Radius() const { return radius; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]
	mov	esp, ebp
	pop	ebp
	ret	0
?Radius@DrawableObject@@QBEMXZ ENDP			; DrawableObject::Radius
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?PRANDFloatPos@@YAMXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_x$ = -4						; size = 4
?PRANDFloatPos@@YAMXZ PROC				; PRANDFloatPos, COMDAT

; 150  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 151  : //	return NRANDPOS;
; 152  : 	float	x=	(float)(GenerateFastRandom()&0xffff);

	call	?GenerateFastRandom@@YAJXZ		; GenerateFastRandom
	and	eax, 65535				; 0000ffffH
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _x$[ebp], xmm0

; 153  : 	return( x / 65535.0f);

	movss	xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv72[ebp], xmm0
	fld	DWORD PTR tv72[ebp]

; 154  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PRANDFloatPos@@YAMXZ ENDP				; PRANDFloatPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?PRANDFloat@@YAMXZ
_TEXT	SEGMENT
tv75 = -8						; size = 4
_x$ = -4						; size = 4
?PRANDFloat@@YAMXZ PROC					; PRANDFloat, COMDAT

; 143  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 144  : //	return NRAND;
; 145  : 	float	x=	(float)(GenerateFastRandom()&0xffff);

	call	?GenerateFastRandom@@YAJXZ		; GenerateFastRandom
	and	eax, 65535				; 0000ffffH
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _x$[ebp], xmm0

; 146  : 	return( 1 - 2 * x / 65535.0f);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR __real@477fff00
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR tv75[ebp], xmm1
	fld	DWORD PTR tv75[ebp]

; 147  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PRANDFloat@@YAMXZ ENDP					; PRANDFloat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?GenerateFastRandom@@YAJXZ
_TEXT	SEGMENT
_FastRandom$ = -4					; size = 4
?GenerateFastRandom@@YAJXZ PROC				; GenerateFastRandom, COMDAT

; 108  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 109  : 	static long LastRandom;
; 110  : 	long	FastRandom;														// The Random Variable
; 111  : 	_asm {	
; 112  : 			push	edx

	push	edx

; 113  : 			push	eax

	push	eax

; 114  : 			RDTSC

	rdtsc

; 115  : 			add	DWORD PTR FastRandom,edx

	add	DWORD PTR _FastRandom$[ebp], edx

; 116  : 			xor	DWORD PTR FastRandom,eax

	xor	DWORD PTR _FastRandom$[ebp], eax

; 117  : 			mov	eax, DWORD PTR LastRandom

	mov	eax, DWORD PTR ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA ; `GenerateFastRandom'::`2'::LastRandom

; 118  : 			add	DWORD PTR FastRandom,eax

	add	DWORD PTR _FastRandom$[ebp], eax

; 119  : 			add	DWORD PTR LastRandom,edx

	add	DWORD PTR ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA, edx ; `GenerateFastRandom'::`2'::LastRandom

; 120  : 			pop	eax

	pop	eax

; 121  : 			pop	edx

	pop	edx

; 122  : 	}
; 123  : 	return(FastRandom);

	mov	eax, DWORD PTR _FastRandom$[ebp]

; 124  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GenerateFastRandom@@YAJXZ ENDP				; GenerateFastRandom
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?SetStaticTurbulence@AircraftClass@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_RateX$ = 8						; size = 4
_RateY$ = 12						; size = 4
_RateZ$ = 16						; size = 4
?SetStaticTurbulence@AircraftClass@@QAEXMMM@Z PROC	; AircraftClass::SetStaticTurbulence, COMDAT
; _this$ = ecx

; 723  : 	void	SetStaticTurbulence(float RateX, float RateY, float RateZ){ 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 724  : 		StaticTurbulence.x+=RateX; StaticTurbulence.y+=RateY; StaticTurbulence.z+=RateZ; 

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+3600]
	addss	xmm0, DWORD PTR _RateX$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+3600], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+3604]
	addss	xmm0, DWORD PTR _RateY$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+3604], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+3608]
	addss	xmm0, DWORD PTR _RateZ$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+3608], xmm0

; 725  : 	}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetStaticTurbulence@AircraftClass@@QAEXMMM@Z ENDP	; AircraftClass::SetStaticTurbulence
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ PROC	; AircraftClass::DBrain, COMDAT
; _this$ = ecx

; 624  : 	DigitalBrain *DBrain(void)			{return (DigitalBrain *)theBrain;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+672]
	mov	esp, ebp
	pop	ebp
	ret	0
?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ENDP	; AircraftClass::DBrain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?IsComplex@AircraftClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsComplex@AircraftClass@@QAEHXZ PROC			; AircraftClass::IsComplex, COMDAT
; _this$ = ecx

; 336  : 	int            IsComplex (void) {return ((acFlags & isComplex) ? TRUE : FALSE);}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+964]
	and	ecx, 4
	je	SHORT $LN3@IsComplex
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsComplex
$LN3@IsComplex:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsComplex:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsComplex@AircraftClass@@QAEHXZ ENDP			; AircraftClass::IsComplex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ PROC ; AircraftClass::AutopilotType, COMDAT
; _this$ = ecx

; 329  : 	AutoPilotType	AutopilotType (void) {return autopilotType;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+968]
	mov	esp, ebp
	pop	ebp
	ret	0
?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ENDP ; AircraftClass::AutopilotType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simmover.h
;	COMDAT ?GetDOFValue@SimMoverClass@@QAEMH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_dof$ = 8						; size = 4
?GetDOFValue@SimMoverClass@@QAEMH@Z PROC		; SimMoverClass::GetDOFValue, COMDAT
; _this$ = ecx

; 132  : 	float GetDOFValue (int dof) { ShiAssert(dof < numDofs); return dof < numDofs ? DOFData[dof] : 0;}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dof$[ebp]
	cmp	ecx, DWORD PTR [eax+600]
	jge	SHORT $LN3@GetDOFValu
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+612]
	mov	ecx, DWORD PTR _dof$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4]
	movss	DWORD PTR tv69[ebp], xmm0
	jmp	SHORT $LN4@GetDOFValu
$LN3@GetDOFValu:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv69[ebp], xmm0
$LN4@GetDOFValu:
	fld	DWORD PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetDOFValue@SimMoverClass@@QAEMH@Z ENDP		; SimMoverClass::GetDOFValue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simmover.h
;	COMDAT ?SetDOF@SimMoverClass@@QAEXHM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dof$ = 8						; size = 4
_val$ = 12						; size = 4
?SetDOF@SimMoverClass@@QAEXHM@Z PROC			; SimMoverClass::SetDOF, COMDAT
; _this$ = ecx

; 130  : 	void SetDOF (int dof, float val) { ShiAssert(dof < numDofs); if (dof < numDofs) { DOFData[dof] = val;}}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dof$[ebp]
	cmp	ecx, DWORD PTR [eax+600]
	jge	SHORT $LN1@SetDOF
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+612]
	mov	ecx, DWORD PTR _dof$[ebp]
	movss	xmm0, DWORD PTR _val$[ebp]
	movss	DWORD PTR [eax+ecx*4], xmm0
$LN1@SetDOF:
	mov	esp, ebp
	pop	ebp
	ret	8
?SetDOF@SimMoverClass@@QAEXHM@Z ENDP			; SimMoverClass::SetDOF
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?MaxStrength@SimBaseClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MaxStrength@SimBaseClass@@QAEMXZ PROC			; SimBaseClass::MaxStrength, COMDAT
; _this$ = ecx

; 227  : 	float MaxStrength (void) {return maxStrength;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+244]
	mov	esp, ebp
	pop	ebp
	ret	0
?MaxStrength@SimBaseClass@@QAEMXZ ENDP			; SimBaseClass::MaxStrength
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ PROC ; SimBaseClass::GetCampaignObject, COMDAT
; _this$ = ecx

; 212  : 	CampBaseClass *GetCampaignObject (void) { return campaignObject.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ENDP ; SimBaseClass::GetCampaignObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsSetFlag@SimBaseClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFlag@SimBaseClass@@QBEHH@Z PROC			; SimBaseClass::IsSetFlag, COMDAT
; _this$ = ecx

; 178  : 	int  IsSetFlag(int flag) const { return ((specialData.flags & flag) ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsSetFlag
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSetFlag
$LN3@IsSetFlag:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSetFlag:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFlag@SimBaseClass@@QBEHH@Z ENDP			; SimBaseClass::IsSetFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ PROC ; VuBin<CampBaseClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ENDP ; VuBin<CampBaseClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?IsSet@AirframeClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_testFlag$ = 8						; size = 4
?IsSet@AirframeClass@@QBEHH@Z PROC			; AirframeClass::IsSet, COMDAT
; _this$ = ecx

; 1216 : 	int IsSet (int testFlag) const {return flags & testFlag ? 1 : 0;}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	and	ecx, DWORD PTR _testFlag$[ebp]
	je	SHORT $LN3@IsSet
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSet
$LN3@IsSet:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSet:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSet@AirframeClass@@QBEHH@Z ENDP			; AirframeClass::IsSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?ClearFlag@AirframeClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newFlag$ = 8						; size = 4
?ClearFlag@AirframeClass@@QAEXH@Z PROC			; AirframeClass::ClearFlag, COMDAT
; _this$ = ecx

; 1215 : 	void ClearFlag (int newFlag) {flags &= ~newFlag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _newFlag$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+88]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+88], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearFlag@AirframeClass@@QAEXH@Z ENDP			; AirframeClass::ClearFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?SetFlag@AirframeClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newFlag$ = 8						; size = 4
?SetFlag@AirframeClass@@QAEXH@Z PROC			; AirframeClass::SetFlag, COMDAT
; _this$ = ecx

; 1214 : 	void SetFlag (int newFlag) {flags |= newFlag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	or	ecx, DWORD PTR _newFlag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+88], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFlag@AirframeClass@@QAEXH@Z ENDP			; AirframeClass::SetFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\eom.cpp
_TEXT	SEGMENT
_volume$1 = -84						; size = 4
_message$2 = -80					; size = 4
_pitch$3 = -76						; size = 4
tv95 = -72						; size = 4
tv82 = -68						; size = 4
tv203 = -64						; size = 4
tv73 = -60						; size = 4
tv180 = -56						; size = 4
_Runway$4 = -52						; size = 4
tv140 = -48						; size = 4
_airbase$5 = -44					; size = 4
tv83 = -40						; size = 4
_dmgStrength$6 = -36					; size = 4
tv141 = -32						; size = 4
_gy$7 = -28						; size = 2
_gx$8 = -24						; size = 2
_this$ = -20						; size = 4
_pos$9 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?DragBodypart@AirframeClass@@QAEXXZ PROC		; AirframeClass::DragBodypart
; _this$ = ecx

; 1909 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1910 : 	if(vt > 1.0F){

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	$LN10@DragBodypa

; 1911 : 		float pitch, volume;
; 1912 : 		pitch = max(0.2F, min(vt/70.0F, 2.0F));

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	divss	xmm0, DWORD PTR __real@428c0000
	movss	xmm1, DWORD PTR __real@40000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN13@DragBodypa
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	divss	xmm0, DWORD PTR __real@428c0000
	movss	DWORD PTR tv73[ebp], xmm0
	jmp	SHORT $LN14@DragBodypa
$LN13@DragBodypa:
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv73[ebp], xmm0
$LN14@DragBodypa:
	movss	xmm0, DWORD PTR __real@3e4ccccd
	comiss	xmm0, DWORD PTR tv73[ebp]
	jbe	SHORT $LN17@DragBodypa
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR tv83[ebp], xmm0
	jmp	SHORT $LN18@DragBodypa
$LN17@DragBodypa:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	divss	xmm0, DWORD PTR __real@428c0000
	movss	xmm1, DWORD PTR __real@40000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN15@DragBodypa
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	divss	xmm0, DWORD PTR __real@428c0000
	movss	DWORD PTR tv82[ebp], xmm0
	jmp	SHORT $LN16@DragBodypa
$LN15@DragBodypa:
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv82[ebp], xmm0
$LN16@DragBodypa:
	movss	xmm0, DWORD PTR tv82[ebp]
	movss	DWORD PTR tv83[ebp], xmm0
$LN18@DragBodypa:
	movss	xmm0, DWORD PTR tv83[ebp]
	movss	DWORD PTR _pitch$3[ebp], xmm0

; 1913 : 		volume = max(0.0F, min(160000.0F - vt*vt, 4000000.0F));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	mulss	xmm0, DWORD PTR [eax+1120]
	movss	xmm1, DWORD PTR __real@481c4000
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@4a742400
	comiss	xmm0, xmm1
	jbe	SHORT $LN19@DragBodypa
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	mulss	xmm0, DWORD PTR [edx+1120]
	movss	xmm1, DWORD PTR __real@481c4000
	subss	xmm1, xmm0
	movss	DWORD PTR tv95[ebp], xmm1
	jmp	SHORT $LN20@DragBodypa
$LN19@DragBodypa:
	movss	xmm0, DWORD PTR __real@4a742400
	movss	DWORD PTR tv95[ebp], xmm0
$LN20@DragBodypa:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv95[ebp]
	jbe	SHORT $LN23@DragBodypa
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv141[ebp], xmm0
	jmp	SHORT $LN24@DragBodypa
$LN23@DragBodypa:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	mulss	xmm0, DWORD PTR [ecx+1120]
	movss	xmm1, DWORD PTR __real@481c4000
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@4a742400
	comiss	xmm0, xmm1
	jbe	SHORT $LN21@DragBodypa
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	mulss	xmm0, DWORD PTR [eax+1120]
	movss	xmm1, DWORD PTR __real@481c4000
	subss	xmm1, xmm0
	movss	DWORD PTR tv140[ebp], xmm1
	jmp	SHORT $LN22@DragBodypa
$LN21@DragBodypa:
	movss	xmm0, DWORD PTR __real@4a742400
	movss	DWORD PTR tv140[ebp], xmm0
$LN22@DragBodypa:
	movss	xmm0, DWORD PTR tv140[ebp]
	movss	DWORD PTR tv141[ebp], xmm0
$LN24@DragBodypa:
	movss	xmm0, DWORD PTR tv141[ebp]
	movss	DWORD PTR _volume$1[ebp], xmm0

; 1914 : 		platform->SoundPos.Sfx( SFX_TAILSCRAPE, 0 , volume, pitch  );

	push	ecx
	movss	xmm0, DWORD PTR _pitch$3[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _volume$1[ebp]
	movss	DWORD PTR [esp], xmm0
	push	0
	push	168					; 000000a8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMM@Z		; F4SoundPos::Sfx

; 1915 : 
; 1916 : 		if(!IsSet(Simplified)){

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN9@DragBodypa

; 1917 : 			if(platform->pctStrength > 0.5F){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [eax+292]
	comiss	xmm0, DWORD PTR __real@3f000000
	jbe	$LN7@DragBodypa

; 1918 : 				int dmgStrength = FloatToInt32(max(0.0F,vt * 0.01F*(1.0F - nzcgs))*rand()/(float)RAND_MAX);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR [edx+268]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN25@DragBodypa
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv180[ebp], xmm0
	jmp	SHORT $LN26@DragBodypa
$LN25@DragBodypa:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR [ecx+268]
	mulss	xmm0, xmm1
	movss	DWORD PTR tv180[ebp], xmm0
$LN26@DragBodypa:
	call	_rand
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR tv180[ebp]
	divss	xmm0, DWORD PTR __real@46fffe00
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _dmgStrength$6[ebp], eax

; 1919 : 				if(dmgStrength){

	cmp	DWORD PTR _dmgStrength$6[ebp], 0
	je	SHORT $LN7@DragBodypa

; 1920 : 					FalconDamageMessage *message = CreateGroundCollisionMessage(platform, dmgStrength);			

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN27@DragBodypa
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv203[ebp], eax
	jmp	SHORT $LN28@DragBodypa
$LN27@DragBodypa:
	mov	DWORD PTR tv203[ebp], 0
$LN28@DragBodypa:
	mov	eax, DWORD PTR tv203[ebp]
	push	eax
	mov	ecx, DWORD PTR _dmgStrength$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	push	eax
	call	?CreateGroundCollisionMessage@@YAPAVFalconDamageMessage@@PAVSimVehicleClass@@HPAVVuTargetEntity@@@Z ; CreateGroundCollisionMessage
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _message$2[ebp], eax

; 1921 : 					FalconSendMessage (message,FALSE);

	push	0
	mov	ecx, DWORD PTR _message$2[ebp]
	push	ecx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN7@DragBodypa:

; 1922 : 				}
; 1923 : 			}
; 1924 : 			xwaero -= 0.4F * (1.0F - nzcgs)*GRAVITY;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR [edx+268]
	mulss	xmm0, DWORD PTR __real@3ecccccd
	mulss	xmm0, DWORD PTR __real@4200b53f
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+748]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+748], xmm1

; 1925 : 		}
; 1926 : 		else

	jmp	SHORT $LN6@DragBodypa
$LN9@DragBodypa:

; 1927 : 			xwaero -= 0.2F * (1.0F - nzcgs)*GRAVITY;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR [edx+268]
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	mulss	xmm0, DWORD PTR __real@4200b53f
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+748]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+748], xmm1
$LN6@DragBodypa:
	jmp	$LN1@DragBodypa
$LN10@DragBodypa:

; 1928 : 	}
; 1929 : 	else if(vt <= 0.0F && platform->DBrain()->ATCStatus() != lCrashed){

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [edx+1120]
	jb	$LN1@DragBodypa
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, eax
	call	?ATCStatus@DigitalBrain@@QAE?AW4AtcStatusEnum@@XZ ; DigitalBrain::ATCStatus
	cmp	eax, 18					; 00000012H
	je	$LN1@DragBodypa

; 1930 : 		platform->DBrain()->SetATCStatus(lCrashed);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, eax
	call	?SetATCStatus@DigitalBrain@@QAEXW4AtcStatusEnum@@@Z ; DigitalBrain::SetATCStatus

; 1931 : 		if(platform != SimDriver.GetPlayerEntity()){

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+1088], eax
	je	SHORT $LN3@DragBodypa

; 1932 : 			platform->DBrain()->SetWaitTimer(SimLibElapsedTime + 1 * CampaignMinutes);

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 60000				; 0000ea60H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, eax
	call	?SetWaitTimer@DigitalBrain@@QAEXK@Z	; DigitalBrain::SetWaitTimer
$LN3@DragBodypa:

; 1933 : 		}
; 1934 : 
; 1935 : 		int Runway = 0;

	mov	DWORD PTR _Runway$4[ebp], 0

; 1936 : 		// sfr: fixing xy order
; 1937 : 		GridIndex gx, gy;
; 1938 : 		vector pos = { x, y };

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1108]
	movss	DWORD PTR _pos$9[ebp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1112]
	movss	DWORD PTR _pos$9[ebp+4], xmm0
	xor	ecx, ecx
	mov	DWORD PTR _pos$9[ebp+8], ecx

; 1939 : 		//CX = SimToGrid(y);
; 1940 : 		//CY = SimToGrid(x);
; 1941 : 		ConvertSimToGrid(&pos, &gx, &gy);

	lea	edx, DWORD PTR _gy$7[ebp]
	push	edx
	lea	eax, DWORD PTR _gx$8[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$9[ebp]
	push	ecx
	call	?ConvertSimToGrid@@YAXPAUvector@@PAF1@Z	; ConvertSimToGrid
	add	esp, 12					; 0000000cH

; 1942 : 		Objective airbase = FindNearbyAirbase(gx, gy);

	movzx	edx, WORD PTR _gy$7[ebp]
	push	edx
	movzx	eax, WORD PTR _gx$8[ebp]
	push	eax
	call	?FindNearbyAirbase@@YAPAVObjectiveClass@@FF@Z ; FindNearbyAirbase
	add	esp, 8
	mov	DWORD PTR _airbase$5[ebp], eax

; 1943 : 		if(airbase){

	cmp	DWORD PTR _airbase$5[ebp], 0
	je	SHORT $LN1@DragBodypa

; 1944 : 			Runway = airbase->brain->IsOverRunway(platform);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	push	edx
	mov	eax, DWORD PTR _airbase$5[ebp]
	mov	ecx, DWORD PTR [eax+240]
	call	?IsOverRunway@ATCBrain@@QAEHPAVAircraftClass@@@Z ; ATCBrain::IsOverRunway
	mov	DWORD PTR _Runway$4[ebp], eax

; 1945 : 			if( Runway ){

	cmp	DWORD PTR _Runway$4[ebp], 0
	je	SHORT $LN1@DragBodypa

; 1946 : 				platform->DBrain()->SendATCMsg(lCrashed);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, eax
	call	?SendATCMsg@DigitalBrain@@QAEXW4AtcStatusEnum@@@Z ; DigitalBrain::SendATCMsg
$LN1@DragBodypa:

; 1947 : 			}
; 1948 : 		}
; 1949 : 	}	
; 1950 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DragBodypart@AirframeClass@@QAEXXZ ENDP		; AirframeClass::DragBodypart
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetAeroData@AirframeClass@@QBEMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_which$ = 8						; size = 4
?GetAeroData@AirframeClass@@QBEMH@Z PROC		; AirframeClass::GetAeroData, COMDAT
; _this$ = ecx

; 1207 : 	float GetAeroData(int which) const { return aeroDataset[vehicleIndex].inputData[which]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+92]
	imul	ecx, 220				; 000000dcH
	add	ecx, DWORD PTR ?aeroDataset@@3PAVAeroDataSet@@A ; aeroDataset
	mov	edx, DWORD PTR _which$[ebp]
	fld	DWORD PTR [ecx+edx*4+16]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAeroData@AirframeClass@@QBEMH@Z ENDP		; AirframeClass::GetAeroData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?NumGear@AirframeClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NumGear@AirframeClass@@QBEHXZ PROC			; AirframeClass::NumGear, COMDAT
; _this$ = ecx

; 1206 : 	int NumGear(void) const	{return FloatToInt32(aeroDataset[vehicleIndex].inputData[AeroDataSet::NumGear]);}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+92]
	imul	ecx, 220				; 000000dcH
	add	ecx, DWORD PTR ?aeroDataset@@3PAVAeroDataSet@@A ; aeroDataset
	mov	edx, 4
	imul	edx, 13					; 0000000dH
	push	ecx
	movss	xmm0, DWORD PTR [ecx+edx+16]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?NumGear@AirframeClass@@QBEHXZ ENDP			; AirframeClass::NumGear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\eom.cpp
_TEXT	SEGMENT
$T2 = -104						; size = 8
tv544 = -96						; size = 4
tv510 = -92						; size = 4
tv508 = -88						; size = 4
tv506 = -84						; size = 4
tv504 = -80						; size = 4
tv502 = -76						; size = 4
$T3 = -72						; size = 4
tv500 = -68						; size = 4
tv355 = -64						; size = 4
tv316 = -60						; size = 4
tv268 = -56						; size = 4
tv254 = -52						; size = 4
$T4 = -48						; size = 4
tv242 = -44						; size = 4
tv162 = -40						; size = 4
tv154 = -36						; size = 4
tv86 = -32						; size = 4
_lmsg$5 = -28						; size = 4
_wheelbrakes$6 = -24					; size = 4
_Mu_fric$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_groundType$ = 8					; size = 4
?CalcMuFric@AirframeClass@@QAEMH@Z PROC			; AirframeClass::CalcMuFric
; _this$ = ecx

; 1085 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CalcMuFric@AirframeClass@@QAEMH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 92					; 0000005cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1086 : 	float Mu_fric;
; 1087 : 	if(IsSet(GearBroken) || gearPos <= 0.3F || platform->platformAngles.cosphi < 0.9659F )

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN16@CalcMuFric
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3e99999a
	comiss	xmm0, DWORD PTR [eax+1552]
	jae	SHORT $LN16@CalcMuFric
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR __real@3f774539
	comiss	xmm0, DWORD PTR [edx+400]
	jbe	SHORT $LN17@CalcMuFric
$LN16@CalcMuFric:

; 1088 : 	{
; 1089 : 		Mu_fric = (0.6F + 0.3F * (!platform->onFlatFeature && groundType != COVERAGE_ROAD) + 0.1F*IsSet(OverRunway));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	cmp	DWORD PTR [ecx+668], 0
	jne	SHORT $LN20@CalcMuFric
	cmp	DWORD PTR _groundType$[ebp], 10		; 0000000aH
	je	SHORT $LN20@CalcMuFric
	mov	DWORD PTR tv86[ebp], 1
	jmp	SHORT $LN21@CalcMuFric
$LN20@CalcMuFric:
	mov	DWORD PTR tv86[ebp], 0
$LN21@CalcMuFric:
	cvtsi2ss xmm0, DWORD PTR tv86[ebp]
	mulss	xmm0, DWORD PTR __real@3e99999a
	addss	xmm0, DWORD PTR __real@3f19999a
	push	8388608					; 00800000H
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv500[ebp], xmm0
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	xmm1, DWORD PTR tv500[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _Mu_fric$[ebp], xmm1

; 1090 : 	}
; 1091 : 	else

	jmp	$LN1@CalcMuFric
$LN17@CalcMuFric:

; 1092 : 	{
; 1093 : 		//MI check for parking brake
; 1094 : 		if(PBON)			

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+1616]
	test	eax, eax
	je	SHORT $LN14@CalcMuFric

; 1095 : 			SetFlag(WheelBrakes);

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag
$LN14@CalcMuFric:

; 1096 : 		//if we've got more then 87% RPM, PB get's unset
; 1097 : 		if(PBON && (rpm >= 0.87))

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+1616]
	test	edx, edx
	je	SHORT $LN13@CalcMuFric
	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+1212]
	comisd	xmm0, QWORD PTR __real@3febd70a3d70a3d7
	jb	SHORT $LN13@CalcMuFric

; 1098 : 			TogglePB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?TogglePB@AirframeClass@@QAEXXZ		; AirframeClass::TogglePB
$LN13@CalcMuFric:

; 1099 : 
; 1100 : 		Mu_fric = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _Mu_fric$[ebp], xmm0

; 1101 : 		float wheelbrakes;
; 1102 : 		if(NumGear() > 1)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?NumGear@AirframeClass@@QBEHXZ		; AirframeClass::NumGear
	cmp	eax, 1
	jle	$LN12@CalcMuFric

; 1103 : 		{
; 1104 : 			wheelbrakes = IsSet(WheelBrakes)*( (!(gear[1].flags & GearData::GearBroken) && TRUE) + (!(gear[2].flags & GearData::GearBroken) && TRUE) )*0.5F;

	mov	ecx, 28					; 0000001cH
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1256]
	mov	ecx, DWORD PTR [eax+ecx+12]
	and	ecx, 2
	jne	SHORT $LN22@CalcMuFric
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN22@CalcMuFric
	mov	DWORD PTR tv154[ebp], 1
	jmp	SHORT $LN23@CalcMuFric
$LN22@CalcMuFric:
	mov	DWORD PTR tv154[ebp], 0
$LN23@CalcMuFric:
	mov	eax, 28					; 0000001cH
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1256]
	mov	eax, DWORD PTR [edx+eax+12]
	and	eax, 2
	jne	SHORT $LN24@CalcMuFric
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN24@CalcMuFric
	mov	DWORD PTR tv162[ebp], 1
	jmp	SHORT $LN25@CalcMuFric
$LN24@CalcMuFric:
	mov	DWORD PTR tv162[ebp], 0
$LN25@CalcMuFric:
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	mov	edx, DWORD PTR tv154[ebp]
	add	edx, DWORD PTR tv162[ebp]
	imul	eax, edx
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _wheelbrakes$6[ebp], xmm0

; 1105 : 		}
; 1106 : 		else

	jmp	SHORT $LN11@CalcMuFric
$LN12@CalcMuFric:

; 1107 : 			wheelbrakes = (float)IsSet(WheelBrakes);

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _wheelbrakes$6[ebp], xmm0
$LN11@CalcMuFric:

; 1108 : 
; 1109 : 		// MD -- 20040106: adding analog wheel brake channel support
; 1110 : 		// Only for player, if wheelbrakes are set other than by the toe brake pressure
; 1111 : 		// (say because parking brake is on), then apply braking full force, otherwise
; 1112 : 		// make it proportional with the analog axis value.  Oh, and AP must be off, since
; 1113 : 		// smart combat AP still wants to use brakes as well.
; 1114 : 		// NB: Right now there is no support for differential braking!
; 1115 : 		// MD -- 20040111: reversed axis direction per testing feedback
; 1116 : 		
; 1117 : 		if (IO.AnalogIsUsed(AXIS_BRAKE_LEFT))

	push	8
	mov	ecx, OFFSET ?IO@@3VSIMLIB_IO_CLASS@@A	; IO
	call	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@CalcMuFric

; 1118 : 			if (platform->IsPlayer() && (wheelbrakes <= 0.1F) && (platform->AutopilotType() == AircraftClass::APOff))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN9@CalcMuFric
	movss	xmm0, DWORD PTR __real@3dcccccd
	comiss	xmm0, DWORD PTR _wheelbrakes$6[ebp]
	jb	SHORT $LN9@CalcMuFric
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
	cmp	eax, 4
	jne	SHORT $LN9@CalcMuFric

; 1119 : 				wheelbrakes = (15000 - IO.GetAxisValue(AXIS_BRAKE_LEFT)) / 15000.0F;  // not quite so binary on/off

	push	8
	mov	ecx, OFFSET ?IO@@3VSIMLIB_IO_CLASS@@A	; IO
	call	?GetAxisValue@SIMLIB_IO_CLASS@@QAEHW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::GetAxisValue
	mov	ecx, 15000				; 00003a98H
	sub	ecx, eax
	cvtsi2ss xmm0, ecx
	divss	xmm0, DWORD PTR __real@466a6000
	movss	DWORD PTR _wheelbrakes$6[ebp], xmm0
$LN9@CalcMuFric:

; 1120 : 
; 1121 : 		if(!IsSet(OverRunway) )

	push	8388608					; 00800000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN8@CalcMuFric

; 1122 : 			Mu_fric += 0.04F - 0.1F *wheelbrakes;

	movss	xmm0, DWORD PTR __real@3dcccccd
	mulss	xmm0, DWORD PTR _wheelbrakes$6[ebp]
	movss	xmm1, DWORD PTR __real@3d23d70a
	subss	xmm1, xmm0
	addss	xmm1, DWORD PTR _Mu_fric$[ebp]
	movss	DWORD PTR _Mu_fric$[ebp], xmm1
$LN8@CalcMuFric:

; 1123 : 
; 1124 : 		if(IsSet(OnObject) && IsSet(Hook)) // JB carrier

	push	1073741824				; 40000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN7@CalcMuFric
	push	-2147483648				; 80000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN7@CalcMuFric

; 1125 : 		{
; 1126 : 			if (vt < 40.0F * KNOTS_TO_FTPSEC)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@428706e2
	comiss	xmm0, DWORD PTR [edx+1120]
	jbe	$LN6@CalcMuFric

; 1127 : 			{
; 1128 : 				alpha = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1152], xmm0

; 1129 : 				beta = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1156], xmm0

; 1130 : 				mu = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1180], xmm0

; 1131 : 			
; 1132 : 				ResetOrientation();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetOrientation@AirframeClass@@QAEXXZ	; AirframeClass::ResetOrientation

; 1133 : 				Trigenometry();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Trigenometry@AirframeClass@@AAEXXZ	; AirframeClass::Trigenometry

; 1134 : 				//Cobra Set Landing Flag for Carrier ops. Should allow successful missions
; 1135 : 				if (carrierLand == 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1496], 0
	jne	$LN5@CalcMuFric

; 1136 : 					{
; 1137 : 					FalconLandingMessage *lmsg = new FalconLandingMessage(platform->Id(), FalconLocalGame);

	push	51					; 00000033H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN28@CalcMuFric
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN26@CalcMuFric
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv242[ebp], eax
	jmp	SHORT $LN27@CalcMuFric
$LN26@CalcMuFric:
	mov	DWORD PTR tv242[ebp], 0
$LN27@CalcMuFric:
	push	1
	mov	edx, DWORD PTR tv242[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0FalconLandingMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconLandingMessage::FalconLandingMessage
	mov	DWORD PTR tv254[ebp], eax
	jmp	SHORT $LN29@CalcMuFric
$LN28@CalcMuFric:
	mov	DWORD PTR tv254[ebp], 0
$LN29@CalcMuFric:
	mov	ecx, DWORD PTR tv254[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _lmsg$5[ebp], edx

; 1138 : 					lmsg->dataBlock.campID = platform->GetCampaignObject()->GetCampID();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR tv268[ebp], eax
	mov	ecx, DWORD PTR tv268[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv268[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	mov	ecx, DWORD PTR _lmsg$5[ebp]
	mov	WORD PTR [ecx+48], ax

; 1139 : 					lmsg->dataBlock.pilotID = platform->pilotSlot;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR _lmsg$5[ebp]
	mov	dl, BYTE PTR [eax+665]
	mov	BYTE PTR [ecx+50], dl

; 1140 : 					FalconSendMessage(lmsg,TRUE);

	push	1
	mov	eax, DWORD PTR _lmsg$5[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 1141 : 					carrierLand = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1496], 1
$LN5@CalcMuFric:

; 1142 : 					}
; 1143 : 			}
; 1144 : 			else 

	jmp	SHORT $LN4@CalcMuFric
$LN6@CalcMuFric:

; 1145 : 				carrierLand = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1496], 0
$LN4@CalcMuFric:

; 1146 : 
; 1147 : 			Mu_fric = 20; // JB carrier

	movss	xmm0, DWORD PTR __real@41a00000
	movss	DWORD PTR _Mu_fric$[ebp], xmm0
$LN7@CalcMuFric:

; 1148 : 		}
; 1149 : 
; 1150 : 		if(vt <= 0.1F)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3dcccccd
	comiss	xmm0, DWORD PTR [eax+1120]
	jb	$LN3@CalcMuFric

; 1151 : 			Mu_fric += (0.06F + 0.4F * platform->platformAngles.sinbet + (0.44F + 0.2F*IsSet(OverAirStrip)) *wheelbrakes + (!platform->onFlatFeature && groundType != COVERAGE_ROAD)*(0.4F - 0.1F *IsSet(WheelBrakes)) );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	cmp	DWORD PTR [edx+668], 0
	jne	SHORT $LN30@CalcMuFric
	cmp	DWORD PTR _groundType$[ebp], 10		; 0000000aH
	je	SHORT $LN30@CalcMuFric
	mov	DWORD PTR tv316[ebp], 1
	jmp	SHORT $LN31@CalcMuFric
$LN30@CalcMuFric:
	mov	DWORD PTR tv316[ebp], 0
$LN31@CalcMuFric:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR __real@3ecccccd
	mulss	xmm0, DWORD PTR [ecx+352]
	addss	xmm0, DWORD PTR __real@3d75c28f
	push	67108864				; 04000000H
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv502[ebp], xmm0
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	addss	xmm0, DWORD PTR __real@3ee147ae
	mulss	xmm0, DWORD PTR _wheelbrakes$6[ebp]
	movss	xmm1, DWORD PTR tv502[ebp]
	addss	xmm1, xmm0
	cvtsi2ss xmm0, DWORD PTR tv316[ebp]
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv504[ebp], xmm0
	movss	DWORD PTR tv506[ebp], xmm1
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	xmm1, DWORD PTR __real@3ecccccd
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv504[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR tv506[ebp]
	addss	xmm1, xmm0
	addss	xmm1, DWORD PTR _Mu_fric$[ebp]
	movss	DWORD PTR _Mu_fric$[ebp], xmm1

; 1152 : 		else

	jmp	$LN2@CalcMuFric
$LN3@CalcMuFric:

; 1153 : 			Mu_fric += (0.04F + 0.5F * platform->platformAngles.sinbet + (0.36F + 0.2F*IsSet(OverAirStrip))*wheelbrakes + (!platform->onFlatFeature && groundType != COVERAGE_ROAD)*(0.4F - 0.1F *IsSet(WheelBrakes)) );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	cmp	DWORD PTR [eax+668], 0
	jne	SHORT $LN32@CalcMuFric
	cmp	DWORD PTR _groundType$[ebp], 10		; 0000000aH
	je	SHORT $LN32@CalcMuFric
	mov	DWORD PTR tv355[ebp], 1
	jmp	SHORT $LN33@CalcMuFric
$LN32@CalcMuFric:
	mov	DWORD PTR tv355[ebp], 0
$LN33@CalcMuFric:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [edx+352]
	addss	xmm0, DWORD PTR __real@3d23d70a
	push	67108864				; 04000000H
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv508[ebp], xmm0
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	addss	xmm0, DWORD PTR __real@3eb851ec
	mulss	xmm0, DWORD PTR _wheelbrakes$6[ebp]
	movss	xmm1, DWORD PTR tv508[ebp]
	addss	xmm1, xmm0
	cvtsi2ss xmm0, DWORD PTR tv355[ebp]
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv510[ebp], xmm0
	movss	DWORD PTR tv544[ebp], xmm1
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	xmm1, DWORD PTR __real@3ecccccd
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv510[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR tv544[ebp]
	addss	xmm1, xmm0
	addss	xmm1, DWORD PTR _Mu_fric$[ebp]
	movss	DWORD PTR _Mu_fric$[ebp], xmm1
$LN2@CalcMuFric:

; 1154 : 
; 1155 : 		if(platform->AutopilotType() == AircraftClass::CombatAP)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
	cmp	eax, 2
	jne	SHORT $LN1@CalcMuFric

; 1156 : 			Mu_fric += 0.4F *IsSet(WheelBrakes);

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3ecccccd
	addss	xmm0, DWORD PTR _Mu_fric$[ebp]
	movss	DWORD PTR _Mu_fric$[ebp], xmm0
$LN1@CalcMuFric:

; 1157 : 	}
; 1158 : 	return Mu_fric;

	fld	DWORD PTR _Mu_fric$[ebp]

; 1159 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CalcMuFric@AirframeClass@@QAEMH@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CalcMuFric@AirframeClass@@QAEMH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CalcMuFric@AirframeClass@@QAEMH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CalcMuFric@AirframeClass@@QAEMH@Z ENDP			; AirframeClass::CalcMuFric
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\eom.cpp
_TEXT	SEGMENT
$T2 = -268						; size = 8
_relMu$3 = -260						; size = 4
_gndGmma$4 = -256					; size = 4
_noseAngle$ = -252					; size = 4
tv1395 = -248						; size = 4
tv1685 = -244						; size = 4
tv1449 = -240						; size = 4
tv1422 = -236						; size = 4
tv1658 = -232						; size = 4
tv1368 = -228						; size = 4
tv1579 = -224						; size = 4
tv1462 = -220						; size = 4
tv1572 = -216						; size = 4
tv1435 = -212						; size = 4
tv1539 = -208						; size = 4
tv1408 = -204						; size = 4
tv1526 = -200						; size = 4
tv1381 = -196						; size = 4
_pscmd$ = -192						; size = 4
tv1683 = -188						; size = 4
_aoacmd$ = -184						; size = 4
tv1188 = -180						; size = 4
_betcmd$ = -176						; size = 4
$T5 = -172						; size = 4
tv395 = -168						; size = 4
tv527 = -164						; size = 4
_Runway$6 = -160					; size = 4
tv722 = -156						; size = 4
tv407 = -152						; size = 4
tv799 = -148						; size = 4
tv1090 = -144						; size = 4
tv593 = -140						; size = 4
_airbase$7 = -136					; size = 4
$T8 = -132						; size = 4
tv1025 = -128						; size = 4
tv723 = -124						; size = 4
tv974 = -120						; size = 4
tv657 = -116						; size = 4
tv965 = -112						; size = 4
tv592 = -108						; size = 4
_sinImpactAngle$9 = -104				; size = 4
tv421 = -100						; size = 4
tv877 = -96						; size = 4
tv876 = -92						; size = 4
tv1081 = -88						; size = 4
_lmsg$10 = -84						; size = 4
_minHeight$ = -80					; size = 4
_gx$11 = -76						; size = 2
_gy$12 = -72						; size = 2
_tmp$ = -68						; size = 4
_decelFactor$13 = -64					; size = 4
_impactAngle$ = -60					; size = 4
_this$ = -56						; size = 4
_pos$14 = -52						; size = 12
_velocity$ = -40					; size = 12
_noseDir$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dt$ = 8						; size = 4
?CheckGroundImpact@AirframeClass@@QAEXM@Z PROC		; AirframeClass::CheckGroundImpact
; _this$ = ecx

; 1566 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CheckGroundImpact@AirframeClass@@QAEXM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1567 : 	Tpoint velocity;
; 1568 : 	Tpoint noseDir;
; 1569 : 	float impactAngle, noseAngle;
; 1570 : 	float tmp;
; 1571 : 	float aoacmd,betcmd,pscmd;
; 1572 :    
; 1573 : 	// JB 010120
; 1574 : 	if (!platform)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1088], 0
	jne	SHORT $LN22@CheckGroun

; 1575 : 		return;

	jmp	$LN23@CheckGroun
$LN22@CheckGroun:

; 1576 : 	// JB 010120
; 1577 : 
; 1578 :    if(platform->drawPointer && z < groundZ - platform->drawPointer->Radius()*2.0F)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	cmp	DWORD PTR [edx+332], 0
	je	SHORT $LN21@CheckGroun
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	ecx, DWORD PTR [ecx+332]
	call	?Radius@DrawableObject@@QBEMXZ		; DrawableObject::Radius
	fstp	DWORD PTR tv1188[ebp]
	movss	xmm0, DWORD PTR tv1188[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1272]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	comiss	xmm1, DWORD PTR [eax+1116]
	jbe	SHORT $LN21@CheckGroun

; 1579 : 	   return;

	jmp	$LN23@CheckGroun
$LN21@CheckGroun:

; 1580 : 
; 1581 : 	float minHeight = CheckHeight();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckHeight@AirframeClass@@QBEMXZ	; AirframeClass::CheckHeight
	fstp	DWORD PTR _minHeight$[ebp]

; 1582 : 
; 1583 : 	if (z > groundZ - minHeight + GROUND_TOLERANCE)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1272]
	subss	xmm0, DWORD PTR _minHeight$[ebp]
	addss	xmm0, DWORD PTR ?GROUND_TOLERANCE@@3MA
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1116]
	comiss	xmm1, xmm0
	jbe	$LN4@CheckGroun

; 1584 : 	{			
; 1585 : 		groundType = OTWDriver.GetGroundType ( x, y );

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1112]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1108]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundType@OTWDriverClass@@QAEHMM@Z	; OTWDriverClass::GetGroundType
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1260], eax

; 1586 : 
; 1587 : 		velocity.x = xdot/vt;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1196]
	divss	xmm0, DWORD PTR [ecx+1120]
	movss	DWORD PTR _velocity$[ebp], xmm0

; 1588 : 		velocity.y = ydot/vt;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1200]
	divss	xmm0, DWORD PTR [eax+1120]
	movss	DWORD PTR _velocity$[ebp+4], xmm0

; 1589 : 		velocity.z = zdot/vt;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1204]
	divss	xmm0, DWORD PTR [edx+1120]
	movss	DWORD PTR _velocity$[ebp+8], xmm0

; 1590 : 		
; 1591 : 		noseDir.x = platform->platformAngles.costhe * platform->platformAngles.cospsi;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [ecx+392]
	mulss	xmm0, DWORD PTR [eax+408]
	movss	DWORD PTR _noseDir$[ebp], xmm0

; 1592 : 		noseDir.y = platform->platformAngles.costhe * platform->platformAngles.sinpsi;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR [edx+392]
	mulss	xmm0, DWORD PTR [ecx+404]
	movss	DWORD PTR _noseDir$[ebp+4], xmm0

; 1593 : 		noseDir.z = -platform->platformAngles.sinthe;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [eax+388]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _noseDir$[ebp+8], xmm0

; 1594 : 		tmp = (float)sqrt(noseDir.x*noseDir.x + noseDir.y*noseDir.y + noseDir.z*noseDir.z);

	movss	xmm0, DWORD PTR _noseDir$[ebp]
	mulss	xmm0, DWORD PTR _noseDir$[ebp]
	movss	xmm1, DWORD PTR _noseDir$[ebp+4]
	mulss	xmm1, DWORD PTR _noseDir$[ebp+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _noseDir$[ebp+8]
	mulss	xmm1, DWORD PTR _noseDir$[ebp+8]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _tmp$[ebp]

; 1595 : 		noseDir.x /= tmp;

	movss	xmm0, DWORD PTR _noseDir$[ebp]
	divss	xmm0, DWORD PTR _tmp$[ebp]
	movss	DWORD PTR _noseDir$[ebp], xmm0

; 1596 : 		noseDir.y /= tmp;

	movss	xmm0, DWORD PTR _noseDir$[ebp+4]
	divss	xmm0, DWORD PTR _tmp$[ebp]
	movss	DWORD PTR _noseDir$[ebp+4], xmm0

; 1597 : 		noseDir.z /= tmp;

	movss	xmm0, DWORD PTR _noseDir$[ebp+8]
	divss	xmm0, DWORD PTR _tmp$[ebp]
	movss	DWORD PTR _noseDir$[ebp+8], xmm0

; 1598 : 		
; 1599 : 		noseAngle = gndNormal.x*noseDir.x + gndNormal.y*noseDir.y + gndNormal.z*noseDir.z;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1288]
	mulss	xmm0, DWORD PTR _noseDir$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1292]
	mulss	xmm1, DWORD PTR _noseDir$[ebp+4]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+1296]
	mulss	xmm1, DWORD PTR _noseDir$[ebp+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _noseAngle$[ebp], xmm0

; 1600 : 		impactAngle = gndNormal.x*velocity.x + gndNormal.y*velocity.y + gndNormal.z*velocity.z;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1288]
	mulss	xmm0, DWORD PTR _velocity$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1292]
	mulss	xmm1, DWORD PTR _velocity$[ebp+4]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+1296]
	mulss	xmm1, DWORD PTR _velocity$[ebp+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _impactAngle$[ebp], xmm0

; 1601 : 		
; 1602 : 		impactAngle = (float)fabs(impactAngle);

	push	ecx
	movss	xmm0, DWORD PTR _impactAngle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _impactAngle$[ebp]

; 1603 : 		
; 1604 : 		// do the landing check
; 1605 : 		if ( platform->LandingCheck( noseAngle, impactAngle, groundType) )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1260]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _impactAngle$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _noseAngle$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?LandingCheck@AircraftClass@@QAEHMMH@Z	; AircraftClass::LandingCheck
	test	eax, eax
	je	$LN19@CheckGroun

; 1606 : 		{
; 1607 : 			// the eagle has landed
; 1608 : 			ClearFlag (InAir);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag

; 1609 : 			platform->mFaults->AddLanding(SimLibElapsedTime);

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+928]
	call	?AddLanding@FackClass@@QAEXK@Z		; FackClass::AddLanding

; 1610 : 			 // Set our anchor so that when we're moving slowly we can accumulate our position in high precision
; 1611 : 			 groundAnchorX = x;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1108]
	mov	DWORD PTR [ecx+112], eax

; 1612 : 			 groundAnchorY = y;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1112]
	mov	DWORD PTR [ecx+116], eax

; 1613 : 			 groundDeltaX = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+120], xmm0

; 1614 : 			 groundDeltaY = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+124], xmm0

; 1615 : 			platform->SetFlag( ON_GROUND );

	push	128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?SetFlag@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetFlag

; 1616 : 			
; 1617 : 			float gndGmma, relMu;
; 1618 : 			
; 1619 : 			CalculateGroundPlane(&gndGmma, &relMu);

	lea	ecx, DWORD PTR _relMu$3[ebp]
	push	ecx
	lea	edx, DWORD PTR _gndGmma$4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateGroundPlane@AirframeClass@@ABEXPAM0@Z ; AirframeClass::CalculateGroundPlane

; 1620 : 			SetGroundPosition(dt, -(vt*KNOTS_TO_FTPSEC)/30.0F, gndGmma, relMu);

	push	ecx
	movss	xmm0, DWORD PTR _relMu$3[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _gndGmma$4[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	mulss	xmm0, DWORD PTR __real@3fd80b03
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR __real@41f00000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundPosition@AirframeClass@@AAEXMMMM@Z ; AirframeClass::SetGroundPosition

; 1621 : 			
; 1622 : 			stallMode = None;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1248], 0

; 1623 : 			slice = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1308], xmm0

; 1624 : 			pitch = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1312], xmm0

; 1625 : 
; 1626 : 			if( IsSet(GearBroken) || gearPos <= 0.1F )

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN17@CheckGroun
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3dcccccd
	comiss	xmm0, DWORD PTR [ecx+1552]
	jb	$LN13@CheckGroun
$LN17@CheckGroun:

; 1627 : 			{
; 1628 : 				// edg note: discovered a crash here.  I'm going to fix it elsewhere, but
; 1629 : 				// protect against it here.  The prob: aircraft is getting init'd, isn't
; 1630 : 				// taking off, and is very close to the ground.  It gets here and doesn't
; 1631 : 				// have a brain yet.   Check here for brain and fix the alt check in
; 1632 : 				// ownmain init.
; 1633 : 				if ( platform->DBrain() && !platform->IsSetFalcFlag(FEC_INVULNERABLE))

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	test	eax, eax
	je	SHORT $LN15@CheckGroun
	push	32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?IsSetFalcFlag@FalconEntity@@QAEHH@Z	; FalconEntity::IsSetFalcFlag
	test	eax, eax
	jne	SHORT $LN15@CheckGroun

; 1634 : 				{
; 1635 : 					platform->DBrain()->SetATCFlag(DigitalBrain::Landed);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, eax
	call	?SetATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::SetATCFlag

; 1636 : 					platform->DBrain()->SetATCStatus(lCrashed);

	push	18					; 00000012H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, eax
	call	?SetATCStatus@DigitalBrain@@QAEXW4AtcStatusEnum@@@Z ; DigitalBrain::SetATCStatus

; 1637 : 					// KCK NOTE:: Don't set timer for players
; 1638 : 					if(platform != SimDriver.GetPlayerEntity())

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1088], eax
	je	SHORT $LN15@CheckGroun

; 1639 : 						platform->DBrain()->SetWaitTimer(SimLibElapsedTime + 1 * CampaignMinutes);

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 60000				; 0000ea60H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, eax
	call	?SetWaitTimer@DigitalBrain@@QAEXK@Z	; DigitalBrain::SetWaitTimer
$LN15@CheckGroun:

; 1640 : 				}
; 1641 : 
; 1642 : 				int Runway = 0;

	mov	DWORD PTR _Runway$6[ebp], 0

; 1643 : 				// sfr: fixing xy order
; 1644 : 				GridIndex gx, gy;
; 1645 : 				::vector pos = { x, y };

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1108]
	movss	DWORD PTR _pos$14[ebp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1112]
	movss	DWORD PTR _pos$14[ebp+4], xmm0
	xor	eax, eax
	mov	DWORD PTR _pos$14[ebp+8], eax

; 1646 : 				//gx = SimToGrid(y);
; 1647 : 				//gy = SimToGrid(x);
; 1648 : 				ConvertSimToGrid(&pos, &gx, &gy);

	lea	ecx, DWORD PTR _gy$12[ebp]
	push	ecx
	lea	edx, DWORD PTR _gx$11[ebp]
	push	edx
	lea	eax, DWORD PTR _pos$14[ebp]
	push	eax
	call	?ConvertSimToGrid@@YAXPAUvector@@PAF1@Z	; ConvertSimToGrid
	add	esp, 12					; 0000000cH

; 1649 : 				Objective airbase = FindNearbyAirbase(gx, gy);

	movzx	ecx, WORD PTR _gy$12[ebp]
	push	ecx
	movzx	edx, WORD PTR _gx$11[ebp]
	push	edx
	call	?FindNearbyAirbase@@YAPAVObjectiveClass@@FF@Z ; FindNearbyAirbase
	add	esp, 8
	mov	DWORD PTR _airbase$7[ebp], eax

; 1650 : 				if(airbase ){

	cmp	DWORD PTR _airbase$7[ebp], 0
	je	SHORT $LN13@CheckGroun

; 1651 : 					Runway = airbase->brain->IsOverRunway(platform);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	push	ecx
	mov	edx, DWORD PTR _airbase$7[ebp]
	mov	ecx, DWORD PTR [edx+240]
	call	?IsOverRunway@ATCBrain@@QAEHPAVAircraftClass@@@Z ; ATCBrain::IsOverRunway
	mov	DWORD PTR _Runway$6[ebp], eax

; 1652 : 					if( Runway ){

	cmp	DWORD PTR _Runway$6[ebp], 0
	je	SHORT $LN13@CheckGroun

; 1653 : 						platform->DBrain()->SendATCMsg(lCrashed);

	push	18					; 00000012H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, eax
	call	?SendATCMsg@DigitalBrain@@QAEXW4AtcStatusEnum@@@Z ; DigitalBrain::SendATCMsg
$LN13@CheckGroun:

; 1654 : 					}
; 1655 : 				}
; 1656 : 			}
; 1657 : 
; 1658 : 			// Send a landing message
; 1659 : 			// KCK NOTE: I'm only sending this for members with the package flag set.
; 1660 : 			// This means all package elements in single player, but non-necessarily in 
; 1661 : 			// multi-player. But in multi-player we'll at least get all players.
; 1662 : 			if (platform->GetCampaignObject() && platform->GetCampaignObject()->InPackage())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	test	eax, eax
	je	$LN12@CheckGroun
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?InPackage@CampBaseClass@@QAEHXZ	; CampBaseClass::InPackage
	test	eax, eax
	je	$LN12@CheckGroun

; 1663 : 				{
; 1664 : 				FalconLandingMessage *lmsg = new FalconLandingMessage(platform->Id(), FalconLocalGame);

	push	51					; 00000033H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN27@CheckGroun
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN25@CheckGroun
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv395[ebp], eax
	jmp	SHORT $LN26@CheckGroun
$LN25@CheckGroun:
	mov	DWORD PTR tv395[ebp], 0
$LN26@CheckGroun:
	push	1
	mov	ecx, DWORD PTR tv395[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0FalconLandingMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconLandingMessage::FalconLandingMessage
	mov	DWORD PTR tv407[ebp], eax
	jmp	SHORT $LN28@CheckGroun
$LN27@CheckGroun:
	mov	DWORD PTR tv407[ebp], 0
$LN28@CheckGroun:
	mov	eax, DWORD PTR tv407[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR _lmsg$10[ebp], ecx

; 1665 : 				lmsg->dataBlock.campID = platform->GetCampaignObject()->GetCampID();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR tv421[ebp], eax
	mov	eax, DWORD PTR tv421[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv421[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	mov	ecx, DWORD PTR _lmsg$10[ebp]
	mov	WORD PTR [ecx+48], ax

; 1666 : 				lmsg->dataBlock.pilotID = platform->pilotSlot;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR _lmsg$10[ebp]
	mov	dl, BYTE PTR [eax+665]
	mov	BYTE PTR [ecx+50], dl

; 1667 : 				FalconSendMessage(lmsg,TRUE);

	push	1
	mov	eax, DWORD PTR _lmsg$10[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN12@CheckGroun:

; 1668 : 				}
; 1669 : 		}
; 1670 : 		else

	jmp	$LN4@CheckGroun
$LN19@CheckGroun:

; 1671 : 		{
; 1672 : 			// we presumably have hit too hard (and taken damage/destruction)
; 1673 : 			// apply some bounce
; 1674 : 			z = groundZ - minHeight -  (vt * impactAngle)/ 20.0F*(1.0F - 0.5F*IsSet(GearBroken));

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1272]
	subss	xmm0, DWORD PTR _minHeight$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1120]
	mulss	xmm1, DWORD PTR _impactAngle$[ebp]
	divss	xmm1, DWORD PTR __real@41a00000
	push	2048					; 00000800H
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1683[ebp], xmm0
	movss	DWORD PTR tv1685[ebp], xmm1
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv1685[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR tv1683[ebp]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1116], xmm1

; 1675 : 			
; 1676 : 			if(!platform->IsSetFalcFlag(FEC_INVULNERABLE))

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?IsSetFalcFlag@FalconEntity@@QAEHH@Z	; FalconEntity::IsSetFalcFlag
	test	eax, eax
	jne	$LN10@CheckGroun

; 1677 : 			{				
; 1678 : 				
; 1679 : 				aoacmd = max(-90.0F, min(90.0F, alpha +  (float)fabs(platform->platformAngles.cosbet * platform->platformAngles.sinthe) * platform->platformAngles.cosphi * 0.1F * vt));//  + q * RTD * dt));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR [eax+356]
	mulss	xmm0, DWORD PTR [edx+388]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1368[ebp]
	movss	xmm0, DWORD PTR tv1368[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mulss	xmm0, DWORD PTR [ecx+400]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+1120]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+1152]
	comiss	xmm0, DWORD PTR __real@42b40000
	jbe	SHORT $LN29@CheckGroun
	movss	xmm0, DWORD PTR __real@42b40000
	movss	DWORD PTR tv527[ebp], xmm0
	jmp	SHORT $LN30@CheckGroun
$LN29@CheckGroun:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR [edx+356]
	mulss	xmm0, DWORD PTR [ecx+388]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1381[ebp]
	movss	xmm0, DWORD PTR tv1381[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mulss	xmm0, DWORD PTR [eax+400]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+1120]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+1152]
	movss	DWORD PTR tv527[ebp], xmm0
$LN30@CheckGroun:
	movss	xmm0, DWORD PTR __real@c2b40000
	comiss	xmm0, DWORD PTR tv527[ebp]
	jbe	SHORT $LN33@CheckGroun
	movss	xmm0, DWORD PTR __real@c2b40000
	movss	DWORD PTR tv593[ebp], xmm0
	jmp	$LN34@CheckGroun
$LN33@CheckGroun:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [ecx+356]
	mulss	xmm0, DWORD PTR [eax+388]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1395[ebp]
	movss	xmm0, DWORD PTR tv1395[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mulss	xmm0, DWORD PTR [edx+400]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+1120]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+1152]
	comiss	xmm0, DWORD PTR __real@42b40000
	jbe	SHORT $LN31@CheckGroun
	movss	xmm0, DWORD PTR __real@42b40000
	movss	DWORD PTR tv592[ebp], xmm0
	jmp	SHORT $LN32@CheckGroun
$LN31@CheckGroun:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR [eax+356]
	mulss	xmm0, DWORD PTR [edx+388]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1408[ebp]
	movss	xmm0, DWORD PTR tv1408[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mulss	xmm0, DWORD PTR [ecx+400]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+1120]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+1152]
	movss	DWORD PTR tv592[ebp], xmm0
$LN32@CheckGroun:
	movss	xmm0, DWORD PTR tv592[ebp]
	movss	DWORD PTR tv593[ebp], xmm0
$LN34@CheckGroun:
	movss	xmm0, DWORD PTR tv593[ebp]
	movss	DWORD PTR _aoacmd$[ebp], xmm0

; 1680 : 				betcmd = max(-90.0F,min(90.0F,beta + (float)fabs(platform->platformAngles.cosalp * platform->platformAngles.sinthe) * platform->platformAngles.sinphi * 0.1F * vt));// + r *RTD* dt));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR [edx+344]
	mulss	xmm0, DWORD PTR [ecx+388]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1422[ebp]
	movss	xmm0, DWORD PTR tv1422[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mulss	xmm0, DWORD PTR [eax+396]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+1120]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+1156]
	comiss	xmm0, DWORD PTR __real@42b40000
	jbe	SHORT $LN35@CheckGroun
	movss	xmm0, DWORD PTR __real@42b40000
	movss	DWORD PTR tv657[ebp], xmm0
	jmp	SHORT $LN36@CheckGroun
$LN35@CheckGroun:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [ecx+344]
	mulss	xmm0, DWORD PTR [eax+388]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1435[ebp]
	movss	xmm0, DWORD PTR tv1435[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mulss	xmm0, DWORD PTR [edx+396]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+1120]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+1156]
	movss	DWORD PTR tv657[ebp], xmm0
$LN36@CheckGroun:
	movss	xmm0, DWORD PTR __real@c2b40000
	comiss	xmm0, DWORD PTR tv657[ebp]
	jbe	SHORT $LN39@CheckGroun
	movss	xmm0, DWORD PTR __real@c2b40000
	movss	DWORD PTR tv723[ebp], xmm0
	jmp	$LN40@CheckGroun
$LN39@CheckGroun:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR [eax+344]
	mulss	xmm0, DWORD PTR [edx+388]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1449[ebp]
	movss	xmm0, DWORD PTR tv1449[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mulss	xmm0, DWORD PTR [ecx+396]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+1120]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+1156]
	comiss	xmm0, DWORD PTR __real@42b40000
	jbe	SHORT $LN37@CheckGroun
	movss	xmm0, DWORD PTR __real@42b40000
	movss	DWORD PTR tv722[ebp], xmm0
	jmp	SHORT $LN38@CheckGroun
$LN37@CheckGroun:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR [edx+344]
	mulss	xmm0, DWORD PTR [ecx+388]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1462[ebp]
	movss	xmm0, DWORD PTR tv1462[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mulss	xmm0, DWORD PTR [eax+396]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+1120]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+1156]
	movss	DWORD PTR tv722[ebp], xmm0
$LN38@CheckGroun:
	movss	xmm0, DWORD PTR tv722[ebp]
	movss	DWORD PTR tv723[ebp], xmm0
$LN40@CheckGroun:
	movss	xmm0, DWORD PTR tv723[ebp]
	movss	DWORD PTR _betcmd$[ebp], xmm0

; 1681 : 				pscmd = max(-225.0F * DTR, min(225.0F * DTR, r - platform->platformAngles.sinbet * platform->platformAngles.sinalp * platform->platformAngles.sinphi * platform->platformAngles.costhe * 0.1F * vt));// + p * RTD));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [ecx+352]
	mulss	xmm0, DWORD PTR [eax+340]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mulss	xmm0, DWORD PTR [edx+396]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mulss	xmm0, DWORD PTR [ecx+392]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+1120]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+1140]
	subss	xmm1, xmm0
	comiss	xmm1, DWORD PTR __real@407b53cf
	jbe	SHORT $LN41@CheckGroun
	movss	xmm0, DWORD PTR __real@407b53cf
	movss	DWORD PTR tv799[ebp], xmm0
	jmp	SHORT $LN42@CheckGroun
$LN41@CheckGroun:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR [edx+352]
	mulss	xmm0, DWORD PTR [ecx+340]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mulss	xmm0, DWORD PTR [eax+396]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mulss	xmm0, DWORD PTR [edx+392]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+1120]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1140]
	subss	xmm1, xmm0
	movss	DWORD PTR tv799[ebp], xmm1
$LN42@CheckGroun:
	movss	xmm0, DWORD PTR __real@c07b53cf
	comiss	xmm0, DWORD PTR tv799[ebp]
	jbe	SHORT $LN45@CheckGroun
	movss	xmm0, DWORD PTR __real@c07b53cf
	movss	DWORD PTR tv877[ebp], xmm0
	jmp	$LN46@CheckGroun
$LN45@CheckGroun:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR [eax+352]
	mulss	xmm0, DWORD PTR [edx+340]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mulss	xmm0, DWORD PTR [ecx+396]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mulss	xmm0, DWORD PTR [eax+392]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+1120]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1140]
	subss	xmm1, xmm0
	comiss	xmm1, DWORD PTR __real@407b53cf
	jbe	SHORT $LN43@CheckGroun
	movss	xmm0, DWORD PTR __real@407b53cf
	movss	DWORD PTR tv876[ebp], xmm0
	jmp	SHORT $LN44@CheckGroun
$LN43@CheckGroun:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [ecx+352]
	mulss	xmm0, DWORD PTR [eax+340]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mulss	xmm0, DWORD PTR [edx+396]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mulss	xmm0, DWORD PTR [ecx+392]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+1120]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+1140]
	subss	xmm1, xmm0
	movss	DWORD PTR tv876[ebp], xmm1
$LN44@CheckGroun:
	movss	xmm0, DWORD PTR tv876[ebp]
	movss	DWORD PTR tv877[ebp], xmm0
$LN46@CheckGroun:
	movss	xmm0, DWORD PTR tv877[ebp]
	movss	DWORD PTR _pscmd$[ebp], xmm0

; 1682 : 				
; 1683 : 				YawIt(betcmd, dt);

	push	ecx
	movss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _betcmd$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YawIt@AirframeClass@@QAEXMM@Z		; AirframeClass::YawIt

; 1684 : 				PitchIt(aoacmd, dt);

	push	ecx
	movss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _aoacmd$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PitchIt@AirframeClass@@QAEXMM@Z	; AirframeClass::PitchIt

; 1685 : 				RollIt(pscmd, dt);

	push	ecx
	movss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pscmd$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RollIt@AirframeClass@@QAEXMM@Z		; AirframeClass::RollIt

; 1686 : 				
; 1687 : 				slice += (float)fabs(platform->platformAngles.cosalp * platform->platformAngles.sinthe) * platform->platformAngles.sinphi * 0.005F * vt;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR [edx+344]
	mulss	xmm0, DWORD PTR [ecx+388]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1526[ebp]
	movss	xmm0, DWORD PTR tv1526[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mulss	xmm0, DWORD PTR [eax+396]
	mulss	xmm0, DWORD PTR __real@3ba3d70a
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+1120]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+1308]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1308], xmm0

; 1688 : 				pitch += (float)fabs(platform->platformAngles.cosbet * platform->platformAngles.sinthe) * platform->platformAngles.cosphi * -0.005F * vt;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR [edx+356]
	mulss	xmm0, DWORD PTR [ecx+388]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1539[ebp]
	movss	xmm0, DWORD PTR tv1539[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mulss	xmm0, DWORD PTR [eax+400]
	mulss	xmm0, DWORD PTR __real@bba3d70a
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+1120]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+1312]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1312], xmm0

; 1689 : 				
; 1690 : 				float sinImpactAngle;
; 1691 : 				
; 1692 : 				if (impactAngle > 1.0f) // nuke bug type thing

	movss	xmm0, DWORD PTR _impactAngle$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN9@CheckGroun

; 1693 : 				    impactAngle = 1.0f; // JPO - else it goes -ve next line

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _impactAngle$[ebp], xmm0
$LN9@CheckGroun:

; 1694 : 				sinImpactAngle = (float)sqrt(1.0F - impactAngle * impactAngle);

	movss	xmm0, DWORD PTR _impactAngle$[ebp]
	mulss	xmm0, DWORD PTR _impactAngle$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _sinImpactAngle$9[ebp]

; 1695 : 				
; 1696 : 				//reduce velocity according to impact angle
; 1697 : 				float decelFactor = min(0.99F, (sinImpactAngle * 0.9F + impactAngle * 0.2F));  

	movss	xmm0, DWORD PTR _sinImpactAngle$9[ebp]
	mulss	xmm0, DWORD PTR __real@3f666666
	movss	xmm1, DWORD PTR _impactAngle$[ebp]
	mulss	xmm1, DWORD PTR __real@3e4ccccd
	addss	xmm0, xmm1
	comiss	xmm0, DWORD PTR __real@3f7d70a4
	jbe	SHORT $LN47@CheckGroun
	movss	xmm0, DWORD PTR __real@3f7d70a4
	movss	DWORD PTR tv965[ebp], xmm0
	jmp	SHORT $LN48@CheckGroun
$LN47@CheckGroun:
	movss	xmm0, DWORD PTR _sinImpactAngle$9[ebp]
	mulss	xmm0, DWORD PTR __real@3f666666
	movss	xmm1, DWORD PTR _impactAngle$[ebp]
	mulss	xmm1, DWORD PTR __real@3e4ccccd
	addss	xmm0, xmm1
	movss	DWORD PTR tv965[ebp], xmm0
$LN48@CheckGroun:
	movss	xmm0, DWORD PTR tv965[ebp]
	movss	DWORD PTR _decelFactor$13[ebp], xmm0

; 1698 : 				vt = max(0.001F, decelFactor * vt);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _decelFactor$13[ebp]
	mulss	xmm0, DWORD PTR [ecx+1120]
	movss	xmm1, DWORD PTR __real@3a83126f
	comiss	xmm1, xmm0
	jbe	SHORT $LN49@CheckGroun
	movss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR tv974[ebp], xmm0
	jmp	SHORT $LN50@CheckGroun
$LN49@CheckGroun:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _decelFactor$13[ebp]
	mulss	xmm0, DWORD PTR [edx+1120]
	movss	DWORD PTR tv974[ebp], xmm0
$LN50@CheckGroun:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv974[ebp]
	movss	DWORD PTR [eax+1120], xmm0

; 1699 : 			
; 1700 : 				if(fabs(slice) > 0.6F || fabs(pitch) > 0.6F)

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1308]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1572[ebp]
	movss	xmm0, DWORD PTR tv1572[ebp]
	comiss	xmm0, DWORD PTR __real@3f19999a
	ja	SHORT $LN7@CheckGroun
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1312]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1579[ebp]
	movss	xmm0, DWORD PTR tv1579[ebp]
	comiss	xmm0, DWORD PTR __real@3f19999a
	jbe	SHORT $LN8@CheckGroun
$LN7@CheckGroun:

; 1701 : 				{
; 1702 : 					stallMode = Crashing;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1248], 1

; 1703 : 					
; 1704 : 					xdot *= decelFactor;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1196]
	mulss	xmm0, DWORD PTR _decelFactor$13[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1196], xmm0

; 1705 : 					ydot *= decelFactor;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1200]
	mulss	xmm0, DWORD PTR _decelFactor$13[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1200], xmm0
$LN8@CheckGroun:

; 1706 : 					ShiAssert(!_isnan(xdot));
; 1707 : 					ShiAssert(!_isnan(ydot));
; 1708 : 				}
; 1709 : 				
; 1710 : 				if(vt < 5.0F)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40a00000
	comiss	xmm0, DWORD PTR [edx+1120]
	jbe	$LN5@CheckGroun

; 1711 : 				{
; 1712 : 					stallMode = None;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1248], 0

; 1713 : 					stallMagnitude = 10.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [ecx+1220], xmm0

; 1714 : 					vt = 0.001F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR [edx+1120], xmm0

; 1715 : 					ClearFlag (InAir);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag

; 1716 : 					// Set our anchor so that when we're moving slowly we can accumulate our position in high precision
; 1717 : 					groundAnchorX = x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1108]
	mov	DWORD PTR [eax+112], edx

; 1718 : 					groundAnchorY = y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1112]
	mov	DWORD PTR [eax+116], edx

; 1719 : 					groundDeltaX = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+120], xmm0

; 1720 : 					groundDeltaX = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+120], xmm0

; 1721 : 					platform->SetFlag( ON_GROUND );

	push	128					; 00000080H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?SetFlag@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetFlag

; 1722 : 					slice = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1308], xmm0

; 1723 : 					pitch = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1312], xmm0

; 1724 : 					if(fuel <= 0.0F)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [edx+20]
	jb	SHORT $LN5@CheckGroun

; 1725 : 					{
; 1726 : 						SetFlag(EngineOff);

	push	32768					; 00008000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag

; 1727 : 						SetFlag(EngineOff2);//TJL 01/14/04 Multi-engine

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag
$LN5@CheckGroun:

; 1728 : 					}
; 1729 : 				}
; 1730 : 				gmma = (float)fabs( gmma/(2.0F + !IsSet(GearBroken)) );

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN51@CheckGroun
	mov	DWORD PTR tv1025[ebp], 1
	jmp	SHORT $LN52@CheckGroun
$LN51@CheckGroun:
	mov	DWORD PTR tv1025[ebp], 0
$LN52@CheckGroun:
	cvtsi2ss xmm0, DWORD PTR tv1025[ebp]
	addss	xmm0, DWORD PTR __real@40000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+1172]
	divss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+1172]

; 1731 : 				CalcBodyRates(dt);

	push	ecx
	movss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcBodyRates@AirframeClass@@AAEXM@Z	; AirframeClass::CalcBodyRates

; 1732 : 				CalcBodyOrientation(dt);

	push	ecx
	movss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcBodyOrientation@AirframeClass@@QAEXM@Z ; AirframeClass::CalcBodyOrientation

; 1733 : 				Trigenometry();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Trigenometry@AirframeClass@@AAEXXZ	; AirframeClass::Trigenometry

; 1734 : 				
; 1735 : 			}
; 1736 : 			else

	jmp	$LN4@CheckGroun
$LN10@CheckGroun:

; 1737 : 			{
; 1738 : 				z = groundZ - minHeight - 10.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1272]
	subss	xmm0, DWORD PTR _minHeight$[ebp]
	subss	xmm0, DWORD PTR __real@41200000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1116], xmm0

; 1739 : 				
; 1740 : 				if(stallMode > None)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1248], 0
	jle	SHORT $LN3@CheckGroun

; 1741 : 					gmma = 20.0F * DTR;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3eb2b8c1
	movss	DWORD PTR [edx+1172], xmm0
$LN3@CheckGroun:

; 1742 : 				
; 1743 : 				stallMode = None;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1248], 0

; 1744 : 				stallMagnitude = 10.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [ecx+1220], xmm0

; 1745 : 				
; 1746 : 				slice = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1308], xmm0

; 1747 : 				pitch = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1312], xmm0

; 1748 : 				
; 1749 : 				if(fuel <= 0.0F)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx+20]
	jb	$LN2@CheckGroun

; 1750 : 				{
; 1751 : 					gmma = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1172], xmm0

; 1752 : 					ClearFlag (InAir);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag

; 1753 : 					// Set our anchor so that when we're moving slowly we can accumulate our position in high precision
; 1754 : 					groundAnchorX = x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1108]
	mov	DWORD PTR [eax+112], edx

; 1755 : 					groundAnchorY = y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1112]
	mov	DWORD PTR [eax+116], edx

; 1756 : 					groundDeltaX = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+120], xmm0

; 1757 : 					groundDeltaY = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+124], xmm0

; 1758 : 					platform->SetFlag( ON_GROUND );

	push	128					; 00000080H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?SetFlag@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetFlag

; 1759 : 					SetFlag(EngineOff);

	push	32768					; 00008000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag

; 1760 : 					SetFlag(EngineOff2);//TJL 01/14/04 Multi-engine

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag

; 1761 : 				}
; 1762 : 				else

	jmp	SHORT $LN1@CheckGroun
$LN2@CheckGroun:

; 1763 : 				{
; 1764 : 					gmma = max ((float)fabs(gmma/2.0F), 20.0F * DTR);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1172]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1658[ebp]
	movss	xmm0, DWORD PTR tv1658[ebp]
	comiss	xmm0, DWORD PTR __real@3eb2b8c1
	jbe	SHORT $LN53@CheckGroun
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1172]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1081[ebp]
	jmp	SHORT $LN54@CheckGroun
$LN53@CheckGroun:
	movss	xmm0, DWORD PTR __real@3eb2b8c1
	movss	DWORD PTR tv1081[ebp], xmm0
$LN54@CheckGroun:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv1081[ebp]
	movss	DWORD PTR [edx+1172], xmm0
$LN1@CheckGroun:

; 1765 : 				}
; 1766 : 				
; 1767 : 				vt = max(vt * 0.75F, 500.0F);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	mulss	xmm0, DWORD PTR __real@3f400000
	comiss	xmm0, DWORD PTR __real@43fa0000
	jbe	SHORT $LN55@CheckGroun
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	mulss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR tv1090[ebp], xmm0
	jmp	SHORT $LN56@CheckGroun
$LN55@CheckGroun:
	movss	xmm0, DWORD PTR __real@43fa0000
	movss	DWORD PTR tv1090[ebp], xmm0
$LN56@CheckGroun:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv1090[ebp]
	movss	DWORD PTR [edx+1120], xmm0

; 1768 : 				
; 1769 : 				ResetIntegrators();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetIntegrators@AirframeClass@@AAEXXZ	; AirframeClass::ResetIntegrators

; 1770 : 				
; 1771 : 				alpha = 5.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR [eax+1152], xmm0

; 1772 : 				beta = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1156], xmm0

; 1773 : 				mu = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1180], xmm0

; 1774 : 				
; 1775 : 				ResetOrientation();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetOrientation@AirframeClass@@QAEXXZ	; AirframeClass::ResetOrientation

; 1776 : 				Trigenometry();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Trigenometry@AirframeClass@@AAEXXZ	; AirframeClass::Trigenometry
$LN4@CheckGroun:
$LN23@CheckGroun:

; 1777 : 			}
; 1778 : 		}
; 1779 : 	}
; 1780 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CheckGroundImpact@AirframeClass@@QAEXM@Z$0:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CheckGroundImpact@AirframeClass@@QAEXM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CheckGroundImpact@AirframeClass@@QAEXM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CheckGroundImpact@AirframeClass@@QAEXM@Z ENDP		; AirframeClass::CheckGroundImpact
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\eom.cpp
_TEXT	SEGMENT
tv468 = -124						; size = 4
_nosGearZ$1 = -120					; size = 4
tv413 = -116						; size = 4
_nosGearRng$2 = -112					; size = 4
tv558 = -108						; size = 4
tv407 = -104						; size = 4
_halfspan$ = -100					; size = 4
_gearDof$3 = -96					; size = 4
tv512 = -92						; size = 4
_cosphi_lim$ = -88					; size = 4
_gearHt$ = -84						; size = 4
tv232 = -80						; size = 4
tv132 = -76						; size = 4
_length$ = -72						; size = 4
_best$4 = -68						; size = 4
_deltzWing$ = -64					; size = 4
_deltzGear$ = -60					; size = 4
_deltzBody$ = -56					; size = 4
_cgloc$ = -52						; size = 4
_deltzNose$ = -48					; size = 4
_radius$ = -44						; size = 4
_deltz$ = -40						; size = 4
_i$5 = -36						; size = 4
_this$ = -32						; size = 4
_PtWorldPos$ = -28					; size = 12
_PtRelPos$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
?CheckHeight@AirframeClass@@QBEMXZ PROC			; AirframeClass::CheckHeight
; _this$ = ecx

; 1797 : float AirframeClass::CheckHeight(void) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1798 : 	// JB 010120
; 1799 : 	if (!platform){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1088], 0
	jne	SHORT $LN22@CheckHeigh

; 1800 : 		return 0;

	fldz
	jmp	$LN23@CheckHeigh
$LN22@CheckHeigh:

; 1801 : 	}
; 1802 : 	// JB 010120
; 1803 : 
; 1804 : 	// sfr: removed JB check
; 1805 : 	//if (F4IsBadReadPtr(platform, sizeof(AircraftClass))) // JB 010317 CTD
; 1806 : 	//	return 0;
; 1807 : 
; 1808 : 	float cgloc = GetAeroData(AeroDataSet::CGLoc);

	push	46					; 0000002eH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR _cgloc$[ebp]

; 1809 : 	float length = GetAeroData(AeroDataSet::Length);

	push	47					; 0000002fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR _length$[ebp]

; 1810 : 	float halfspan = GetAeroData(AeroDataSet::Span)/2.0F;

	push	48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR tv407[ebp]
	movss	xmm0, DWORD PTR tv407[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _halfspan$[ebp], xmm0

; 1811 : 	float radius = GetAeroData(AeroDataSet::FusRadius);

	push	49					; 00000031H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR _radius$[ebp]

; 1812 : 	float gearHt = GetAeroData(AeroDataSet::NosGearZ) - radius;

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR tv413[ebp]
	movss	xmm0, DWORD PTR tv413[ebp]
	subss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _gearHt$[ebp], xmm0

; 1813 : 		
; 1814 : 	float deltz = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _deltz$[ebp], xmm0

; 1815 : 	float deltzNose = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _deltzNose$[ebp], xmm0

; 1816 : 	float deltzWing = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _deltzWing$[ebp], xmm0

; 1817 : 	float deltzGear = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _deltzGear$[ebp], xmm0

; 1818 : 	float deltzBody = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _deltzBody$[ebp], xmm0

; 1819 : 
; 1820 : 	Tpoint PtWorldPos;
; 1821 : 	Tpoint PtRelPos;
; 1822 : 	
; 1823 : 	float cosphi_lim = max(0.0F,platform->platformAngles.cosphi);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [edx+400]
	jbe	SHORT $LN25@CheckHeigh
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv132[ebp], xmm0
	jmp	SHORT $LN26@CheckHeigh
$LN25@CheckHeigh:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR [ecx+400]
	movss	DWORD PTR tv132[ebp], xmm0
$LN26@CheckHeigh:
	movss	xmm0, DWORD PTR tv132[ebp]
	movss	DWORD PTR _cosphi_lim$[ebp], xmm0

; 1824 : 
; 1825 : 	if(NumGear() > 1 && platform->drawPointer){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?NumGear@AirframeClass@@QBEHXZ		; AirframeClass::NumGear
	cmp	eax, 1
	jle	$LN21@CheckHeigh
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	cmp	DWORD PTR [eax+332], 0
	je	$LN21@CheckHeigh

; 1826 : 		float best = 0.0F;		

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _best$4[ebp], xmm0

; 1827 : 		for(int i = 0; i < NumGear(); i++){

	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN20@CheckHeigh
$LN19@CheckHeigh:
	mov	ecx, DWORD PTR _i$5[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$5[ebp], ecx
$LN20@CheckHeigh:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NumGear@AirframeClass@@QBEHXZ		; AirframeClass::NumGear
	cmp	DWORD PTR _i$5[ebp], eax
	jge	$LN18@CheckHeigh

; 1828 : 			if(!(gear[i].flags & GearData::GearBroken)){

	mov	edx, DWORD PTR _i$5[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1256]
	mov	edx, DWORD PTR [ecx+edx+12]
	and	edx, 2
	jne	$LN14@CheckHeigh

; 1829 : 				PtRelPos.x = cgloc - GetAeroData(AeroDataSet::NosGearX + i*4);

	mov	eax, DWORD PTR _i$5[ebp]
	lea	ecx, DWORD PTR [eax*4+14]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR tv468[ebp]
	movss	xmm0, DWORD PTR _cgloc$[ebp]
	subss	xmm0, DWORD PTR tv468[ebp]
	movss	DWORD PTR _PtRelPos$[ebp], xmm0

; 1830 : 				PtRelPos.y = GetAeroData(AeroDataSet::NosGearY + i*4);

	mov	edx, DWORD PTR _i$5[ebp]
	lea	eax, DWORD PTR [edx*4+15]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR _PtRelPos$[ebp+4]

; 1831 : 				if (platform->IsComplex()){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?IsComplex@AircraftClass@@QAEHXZ	; AircraftClass::IsComplex
	test	eax, eax
	je	$LN16@CheckHeigh

; 1832 : 				    /* PtRelPos.z = (GetAeroData(AeroDataSet::NosGearZ + i*4) + 
; 1833 : 					platform->GetDOFValue(COMP_NOS_GEAR_COMP + i) - radius)*
; 1834 : 					platform->GetDOFValue(COMP_NOS_GEAR + i)/
; 1835 : 					(GetAeroData(AeroDataSet::NosGearRng + i*4)*DTR) + radius;*/
; 1836 : 					float nosGearZ = GetAeroData(AeroDataSet::NosGearZ + i*4);

	mov	edx, DWORD PTR _i$5[ebp]
	lea	eax, DWORD PTR [edx*4+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR _nosGearZ$1[ebp]

; 1837 : 					float nosGearRng = GetAeroData(AeroDataSet::NosGearRng + i*4);

	mov	ecx, DWORD PTR _i$5[ebp]
	lea	edx, DWORD PTR [ecx*4+17]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR _nosGearRng$2[ebp]

; 1838 : 					float gearDof = platform->GetDOFValue(ComplexGearDOF[i]);

	mov	eax, DWORD PTR _i$5[ebp]
	mov	ecx, DWORD PTR ?ComplexGearDOF@@3PAHA[eax*4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?GetDOFValue@SimMoverClass@@QAEMH@Z	; SimMoverClass::GetDOFValue
	fstp	DWORD PTR _gearDof$3[ebp]

; 1839 : 				    PtRelPos.z = 
; 1840 : 						(nosGearZ + gearExtension[i] - radius) * 
; 1841 : 						gearDof / (nosGearRng * DTR) + 
; 1842 : 						radius
; 1843 : 					;

	mov	eax, DWORD PTR _i$5[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _nosGearZ$1[ebp]
	addss	xmm0, DWORD PTR [ecx+eax*4+1820]
	subss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _gearDof$3[ebp]
	movss	xmm1, DWORD PTR _nosGearRng$2[ebp]
	mulss	xmm1, DWORD PTR __real@3c8efa34
	divss	xmm0, xmm1
	addss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _PtRelPos$[ebp+8], xmm0

; 1844 : 				}
; 1845 : 				else { 

	jmp	SHORT $LN15@CheckHeigh
$LN16@CheckHeigh:

; 1846 : 				    PtRelPos.z = GetAeroData(AeroDataSet::NosGearZ + i*4);

	mov	edx, DWORD PTR _i$5[ebp]
	lea	eax, DWORD PTR [edx*4+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR _PtRelPos$[ebp+8]
$LN15@CheckHeigh:

; 1847 : 				}
; 1848 : 
; 1849 : 				MatrixMult( &((DrawableBSP*)platform->drawPointer)->orientation, &PtRelPos, &PtWorldPos );

	lea	ecx, DWORD PTR _PtWorldPos$[ebp]
	push	ecx
	lea	edx, DWORD PTR _PtRelPos$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR [ecx+332]
	add	edx, 48					; 00000030H
	push	edx
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 1850 : 
; 1851 : 				if(PtWorldPos.z > best){

	movss	xmm0, DWORD PTR _PtWorldPos$[ebp+8]
	comiss	xmm0, DWORD PTR _best$4[ebp]
	jbe	SHORT $LN14@CheckHeigh

; 1852 : 					best = PtWorldPos.z;

	movss	xmm0, DWORD PTR _PtWorldPos$[ebp+8]
	movss	DWORD PTR _best$4[ebp], xmm0
$LN14@CheckHeigh:

; 1853 : 				}
; 1854 : 			}
; 1855 : 		}

	jmp	$LN19@CheckHeigh
$LN18@CheckHeigh:

; 1856 : 		deltzGear = best;

	movss	xmm0, DWORD PTR _best$4[ebp]
	movss	DWORD PTR _deltzGear$[ebp], xmm0

; 1857 : 	}
; 1858 : 	else {

	jmp	SHORT $LN13@CheckHeigh
$LN21@CheckHeigh:

; 1859 : 		deltzGear = platform->platformAngles.costhe * (cosphi_lim * (gearHt * gearPos * !IsSet(GearBroken) + radius) );

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN27@CheckHeigh
	mov	DWORD PTR tv232[ebp], 1
	jmp	SHORT $LN28@CheckHeigh
$LN27@CheckHeigh:
	mov	DWORD PTR tv232[ebp], 0
$LN28@CheckHeigh:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _gearHt$[ebp]
	mulss	xmm0, DWORD PTR [edx+1552]
	cvtsi2ss xmm1, DWORD PTR tv232[ebp]
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _cosphi_lim$[ebp]
	mulss	xmm0, DWORD PTR [ecx+392]
	movss	DWORD PTR _deltzGear$[ebp], xmm0
$LN13@CheckHeigh:

; 1860 : 	}
; 1861 : 	
; 1862 : 	deltzWing = platform->platformAngles.costhe * (float)fabs(platform->platformAngles.sinphi) * halfspan;

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+1088]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	push	ecx
	movss	xmm0, DWORD PTR [edx+396]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv512[ebp]
	movss	xmm0, DWORD PTR tv512[ebp]
	mulss	xmm0, DWORD PTR [esi+392]
	mulss	xmm0, DWORD PTR _halfspan$[ebp]
	movss	DWORD PTR _deltzWing$[ebp], xmm0

; 1863 : 	
; 1864 : 	if(platform->drawPointer){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	cmp	DWORD PTR [ecx+332], 0
	je	SHORT $LN12@CheckHeigh

; 1865 : 		PtRelPos.x = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PtRelPos$[ebp], xmm0

; 1866 : 		PtRelPos.y = radius*platform->platformAngles.sinphi;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR [eax+396]
	movss	DWORD PTR _PtRelPos$[ebp+4], xmm0

; 1867 : 		PtRelPos.z = radius*platform->platformAngles.cosphi;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR [edx+400]
	movss	DWORD PTR _PtRelPos$[ebp+8], xmm0

; 1868 : 		MatrixMult( &((DrawableBSP*)platform->drawPointer)->orientation, &PtRelPos, &PtWorldPos );

	lea	eax, DWORD PTR _PtWorldPos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _PtRelPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+332]
	add	ecx, 48					; 00000030H
	push	ecx
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 1869 : 		deltzBody = PtWorldPos.z;

	movss	xmm0, DWORD PTR _PtWorldPos$[ebp+8]
	movss	DWORD PTR _deltzBody$[ebp], xmm0

; 1870 : 	}
; 1871 : 	else {

	jmp	SHORT $LN11@CheckHeigh
$LN12@CheckHeigh:

; 1872 : 		deltzBody = radius;

	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _deltzBody$[ebp], xmm0
$LN11@CheckHeigh:

; 1873 : 	}
; 1874 : 
; 1875 : 	if(platform->platformAngles.sinthe > 0.0F){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [eax+388]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN10@CheckHeigh

; 1876 : 		if(platform->drawPointer){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	cmp	DWORD PTR [edx+332], 0
	je	SHORT $LN9@CheckHeigh

; 1877 : 			PtRelPos.x = length - cgloc;

	movss	xmm0, DWORD PTR _length$[ebp]
	subss	xmm0, DWORD PTR _cgloc$[ebp]
	movss	DWORD PTR _PtRelPos$[ebp], xmm0

; 1878 : 			PtRelPos.y = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PtRelPos$[ebp+4], xmm0

; 1879 : 			PtRelPos.z = radius;

	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _PtRelPos$[ebp+8], xmm0

; 1880 : 			MatrixMult( &((DrawableBSP*)platform->drawPointer)->orientation, &PtRelPos, &PtWorldPos );

	lea	eax, DWORD PTR _PtWorldPos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _PtRelPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+332]
	add	ecx, 48					; 00000030H
	push	ecx
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 1881 : 			deltzNose = PtWorldPos.z;

	movss	xmm0, DWORD PTR _PtWorldPos$[ebp+8]
	movss	DWORD PTR _deltzNose$[ebp], xmm0

; 1882 : 		}
; 1883 : 		else {

	jmp	SHORT $LN8@CheckHeigh
$LN9@CheckHeigh:

; 1884 : 			deltzNose = platform->platformAngles.sinthe*(length - cgloc);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR _length$[ebp]
	subss	xmm0, DWORD PTR _cgloc$[ebp]
	mulss	xmm0, DWORD PTR [eax+388]
	movss	DWORD PTR _deltzNose$[ebp], xmm0
$LN8@CheckHeigh:

; 1885 : 		}
; 1886 : 	}
; 1887 : 	else {

	jmp	$LN5@CheckHeigh
$LN10@CheckHeigh:

; 1888 : 		if(platform->drawPointer){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	cmp	DWORD PTR [edx+332], 0
	je	SHORT $LN6@CheckHeigh

; 1889 : 			PtRelPos.x = -cgloc;

	movss	xmm0, DWORD PTR _cgloc$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _PtRelPos$[ebp], xmm0

; 1890 : 			PtRelPos.y = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PtRelPos$[ebp+4], xmm0

; 1891 : 			PtRelPos.z = radius;

	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _PtRelPos$[ebp+8], xmm0

; 1892 : 			MatrixMult( &((DrawableBSP*)platform->drawPointer)->orientation, &PtRelPos, &PtWorldPos );

	lea	eax, DWORD PTR _PtWorldPos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _PtRelPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+332]
	add	ecx, 48					; 00000030H
	push	ecx
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 1893 : 			deltzNose = PtWorldPos.z;

	movss	xmm0, DWORD PTR _PtWorldPos$[ebp+8]
	movss	DWORD PTR _deltzNose$[ebp], xmm0

; 1894 : 		}
; 1895 : 		else {

	jmp	SHORT $LN5@CheckHeigh
$LN6@CheckHeigh:

; 1896 : 			deltzNose = platform->platformAngles.sinthe*cgloc;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [eax+388]
	mulss	xmm0, DWORD PTR _cgloc$[ebp]
	movss	DWORD PTR _deltzNose$[ebp], xmm0
$LN5@CheckHeigh:

; 1897 : 		}
; 1898 : 	}
; 1899 : 	
; 1900 : 	if (deltz < deltzWing){ deltz = deltzWing; }

	movss	xmm0, DWORD PTR _deltzWing$[ebp]
	comiss	xmm0, DWORD PTR _deltz$[ebp]
	jbe	SHORT $LN4@CheckHeigh
	movss	xmm0, DWORD PTR _deltzWing$[ebp]
	movss	DWORD PTR _deltz$[ebp], xmm0
$LN4@CheckHeigh:

; 1901 : 	if (deltz < deltzNose){ deltz = deltzNose; }

	movss	xmm0, DWORD PTR _deltzNose$[ebp]
	comiss	xmm0, DWORD PTR _deltz$[ebp]
	jbe	SHORT $LN3@CheckHeigh
	movss	xmm0, DWORD PTR _deltzNose$[ebp]
	movss	DWORD PTR _deltz$[ebp], xmm0
$LN3@CheckHeigh:

; 1902 : 	if (deltz < deltzGear){ deltz = deltzGear; }

	movss	xmm0, DWORD PTR _deltzGear$[ebp]
	comiss	xmm0, DWORD PTR _deltz$[ebp]
	jbe	SHORT $LN2@CheckHeigh
	movss	xmm0, DWORD PTR _deltzGear$[ebp]
	movss	DWORD PTR _deltz$[ebp], xmm0
$LN2@CheckHeigh:

; 1903 : 	if (deltz < deltzBody){ deltz = deltzBody; }

	movss	xmm0, DWORD PTR _deltzBody$[ebp]
	comiss	xmm0, DWORD PTR _deltz$[ebp]
	jbe	SHORT $LN1@CheckHeigh
	movss	xmm0, DWORD PTR _deltzBody$[ebp]
	movss	DWORD PTR _deltz$[ebp], xmm0
$LN1@CheckHeigh:

; 1904 : 	
; 1905 : 	return deltz - GROUND_TOLERANCE;

	movss	xmm0, DWORD PTR _deltz$[ebp]
	subss	xmm0, DWORD PTR ?GROUND_TOLERANCE@@3MA
	movss	DWORD PTR tv558[ebp], xmm0
	fld	DWORD PTR tv558[ebp]
$LN23@CheckHeigh:

; 1906 : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckHeight@AirframeClass@@QBEMXZ ENDP			; AirframeClass::CheckHeight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\eom.cpp
_TEXT	SEGMENT
tv407 = -52						; size = 8
tv341 = -44						; size = 4
_e4dot$ = -40						; size = 4
_e3dot$ = -36						; size = 4
_e2dot$ = -32						; size = 4
_e1dot$ = -28						; size = 4
_e4temp$ = -24						; size = 4
_e3temp$ = -20						; size = 4
_e2temp$ = -16						; size = 4
_e1temp$ = -12						; size = 4
_enorm$ = -8						; size = 4
_this$ = -4						; size = 4
_dt$ = 8						; size = 4
?CalcBodyOrientation@AirframeClass@@QAEXM@Z PROC	; AirframeClass::CalcBodyOrientation
; _this$ = ecx

; 766  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 767  : 	float e1dot, e2dot, e3dot, e4dot;
; 768  : 	float enorm;
; 769  : 	float e1temp, e2temp, e3temp, e4temp;
; 770  : 	
; 771  : 	/*-----------------------------------*/
; 772  : 	/* quaternion differential equations */
; 773  : 	/*-----------------------------------*/
; 774  : 	e1dot = (-e4*p - e3*q - e2*r)*0.5F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1104]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+1132]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1100]
	mulss	xmm1, DWORD PTR [eax+1136]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1096]
	mulss	xmm1, DWORD PTR [edx+1140]
	subss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _e1dot$[ebp], xmm0

; 775  : 	e2dot = (-e3*p + e4*q + e1*r)*0.5F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1100]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+1132]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1104]
	mulss	xmm1, DWORD PTR [eax+1136]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1092]
	mulss	xmm1, DWORD PTR [edx+1140]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _e2dot$[ebp], xmm0

; 776  : 	e3dot = ( e2*p + e1*q - e4*r)*0.5F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1096]
	mulss	xmm0, DWORD PTR [ecx+1132]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1092]
	mulss	xmm1, DWORD PTR [eax+1136]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1104]
	mulss	xmm1, DWORD PTR [edx+1140]
	subss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _e3dot$[ebp], xmm0

; 777  : 	e4dot = ( e1*p - e2*q + e3*r)*0.5F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1092]
	mulss	xmm0, DWORD PTR [ecx+1132]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1096]
	mulss	xmm1, DWORD PTR [eax+1136]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1100]
	mulss	xmm1, DWORD PTR [edx+1140]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _e4dot$[ebp], xmm0

; 778  : 	
; 779  : 	/*-----------------------*/
; 780  : 	/* integrate quaternions */
; 781  : 	/*-----------------------*/
; 782  : 	e1temp = e1 + e1dot*dt;

	movss	xmm0, DWORD PTR _e1dot$[ebp]
	mulss	xmm0, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+1092]
	movss	DWORD PTR _e1temp$[ebp], xmm0

; 783  : 	e2temp = e2 + e2dot*dt;

	movss	xmm0, DWORD PTR _e2dot$[ebp]
	mulss	xmm0, DWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+1096]
	movss	DWORD PTR _e2temp$[ebp], xmm0

; 784  : 	e3temp = e3 + e3dot*dt;

	movss	xmm0, DWORD PTR _e3dot$[ebp]
	mulss	xmm0, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+1100]
	movss	DWORD PTR _e3temp$[ebp], xmm0

; 785  : 	e4temp = e4 + e4dot*dt;

	movss	xmm0, DWORD PTR _e4dot$[ebp]
	mulss	xmm0, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+1104]
	movss	DWORD PTR _e4temp$[ebp], xmm0

; 786  : 	
; 787  : 	/*--------------------------*/
; 788  : 	/* quaternion normalization */
; 789  : 	/*--------------------------*/
; 790  : 	
; 791  : 	/* It's not strictly legal for the */
; 792  : 	/* compiler to do this for itself. */     
; 793  : 	
; 794  : 	enorm = (float)(1.0/sqrt(e1temp*e1temp + e2temp*e2temp +
; 795  : 		e3temp*e3temp + e4temp*e4temp));

	movss	xmm0, DWORD PTR _e1temp$[ebp]
	mulss	xmm0, DWORD PTR _e1temp$[ebp]
	movss	xmm1, DWORD PTR _e2temp$[ebp]
	mulss	xmm1, DWORD PTR _e2temp$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _e3temp$[ebp]
	mulss	xmm1, DWORD PTR _e3temp$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _e4temp$[ebp]
	mulss	xmm1, DWORD PTR _e4temp$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv341[ebp]
	movss	xmm0, DWORD PTR tv341[ebp]
	cvtss2sd xmm0, xmm0
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR _enorm$[ebp], xmm0

; 796  : 	ShiAssert(!_isnan(enorm));
; 797  : 	e1    = e1temp*enorm;

	movss	xmm0, DWORD PTR _e1temp$[ebp]
	mulss	xmm0, DWORD PTR _enorm$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1092], xmm0

; 798  : 	e2    = e2temp*enorm;

	movss	xmm0, DWORD PTR _e2temp$[ebp]
	mulss	xmm0, DWORD PTR _enorm$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1096], xmm0

; 799  : 	e3    = e3temp*enorm;

	movss	xmm0, DWORD PTR _e3temp$[ebp]
	mulss	xmm0, DWORD PTR _enorm$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1100], xmm0

; 800  : 	e4    = e4temp*enorm;

	movss	xmm0, DWORD PTR _e4temp$[ebp]
	mulss	xmm0, DWORD PTR _enorm$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1104], xmm0

; 801  : 	
; 802  : 	/*--------------*/
; 803  : 	/* euler angles */
; 804  : 	/*--------------*/
; 805  : 	
; 806  : 	sigma   =  (float)atan2(2.0F*(e3*e4 + e1*e2), e1*e1 - e2*e2 - e3*e3 + e4*e4);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1092]
	mulss	xmm0, DWORD PTR [eax+1092]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1096]
	mulss	xmm1, DWORD PTR [edx+1096]
	subss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+1100]
	mulss	xmm1, DWORD PTR [ecx+1100]
	subss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1104]
	mulss	xmm1, DWORD PTR [eax+1104]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1100]
	mulss	xmm0, DWORD PTR [edx+1104]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+1092]
	mulss	xmm1, DWORD PTR [ecx+1096]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@40000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+1176]

; 807  : 	gmma = -(float)atan2(2.0F*(e2*e4 - e1*e3), (float)sqrt(1.0f-2.0F*(e2*e4 - e1*e3)*2.0F*(e2*e4 - e1*e3)));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1096]
	mulss	xmm0, DWORD PTR [ecx+1104]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1092]
	mulss	xmm1, DWORD PTR [eax+1100]
	subss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR __real@40000000
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1096]
	mulss	xmm1, DWORD PTR [edx+1104]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [eax+1092]
	mulss	xmm2, DWORD PTR [ecx+1100]
	subss	xmm1, xmm2
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1096]
	mulss	xmm0, DWORD PTR [eax+1104]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1092]
	mulss	xmm1, DWORD PTR [edx+1100]
	subss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@40000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv407[ebp]
	movsd	xmm0, QWORD PTR tv407[ebp]
	cvtsd2ss xmm0, xmm0
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1172], xmm0

; 808  : 	mu   =  (float)atan2(2.0F*(e2*e3 + e4*e1), e1*e1 + e2*e2 - e3*e3 - e4*e4);	

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1092]
	mulss	xmm0, DWORD PTR [edx+1092]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+1096]
	mulss	xmm1, DWORD PTR [ecx+1096]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1100]
	mulss	xmm1, DWORD PTR [eax+1100]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1104]
	mulss	xmm1, DWORD PTR [edx+1104]
	subss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1096]
	mulss	xmm0, DWORD PTR [ecx+1100]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1104]
	mulss	xmm1, DWORD PTR [eax+1092]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@40000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+1180]

; 809  : 	ShiAssert(!_isnan(sigma));
; 810  : 	ShiAssert(!_isnan(gmma));
; 811  : 	ShiAssert(!_isnan(mu));
; 812  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CalcBodyOrientation@AirframeClass@@QAEXM@Z ENDP	; AirframeClass::CalcBodyOrientation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\eom.cpp
_TEXT	SEGMENT
_trigMu$ = -28						; size = 8
_trigGam$ = -20						; size = 8
_trigSig$ = -12						; size = 8
_this$ = -4						; size = 4
?ResetOrientation@AirframeClass@@QAEXXZ PROC		; AirframeClass::ResetOrientation
; _this$ = ecx

; 1064 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 1065 : 	mlTrig trigGam, trigSig, trigMu;
; 1066 : 	
; 1067 : 	mlSinCos (&trigGam,	gmma	* 0.5F);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1172]
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _trigGam$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 1068 : 	mlSinCos (&trigSig,	sigma	* 0.5F);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1176]
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trigSig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 1069 : 	mlSinCos (&trigMu,	mu		* 0.5F);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1180]
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _trigMu$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 1070 : 	
; 1071 : 	e1 =	trigSig.cos*trigGam.cos*trigMu.cos +
; 1072 : 			trigSig.sin*trigGam.sin*trigMu.sin;

	movss	xmm0, DWORD PTR _trigSig$[ebp+4]
	mulss	xmm0, DWORD PTR _trigGam$[ebp+4]
	mulss	xmm0, DWORD PTR _trigMu$[ebp+4]
	movss	xmm1, DWORD PTR _trigSig$[ebp]
	mulss	xmm1, DWORD PTR _trigGam$[ebp]
	mulss	xmm1, DWORD PTR _trigMu$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1092], xmm0

; 1073 : 	
; 1074 : 	e2 =	trigSig.sin*trigGam.cos*trigMu.cos -
; 1075 : 			trigSig.cos*trigGam.sin*trigMu.sin;

	movss	xmm0, DWORD PTR _trigSig$[ebp]
	mulss	xmm0, DWORD PTR _trigGam$[ebp+4]
	mulss	xmm0, DWORD PTR _trigMu$[ebp+4]
	movss	xmm1, DWORD PTR _trigSig$[ebp+4]
	mulss	xmm1, DWORD PTR _trigGam$[ebp]
	mulss	xmm1, DWORD PTR _trigMu$[ebp]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1096], xmm0

; 1076 : 	
; 1077 : 	e3 =	trigSig.cos*trigGam.sin*trigMu.cos +
; 1078 : 			trigSig.sin*trigGam.cos*trigMu.sin;

	movss	xmm0, DWORD PTR _trigSig$[ebp+4]
	mulss	xmm0, DWORD PTR _trigGam$[ebp]
	mulss	xmm0, DWORD PTR _trigMu$[ebp+4]
	movss	xmm1, DWORD PTR _trigSig$[ebp]
	mulss	xmm1, DWORD PTR _trigGam$[ebp+4]
	mulss	xmm1, DWORD PTR _trigMu$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1100], xmm0

; 1079 : 	
; 1080 : 	e4 =	trigSig.cos*trigGam.cos*trigMu.sin -
; 1081 : 			trigSig.sin*trigGam.sin*trigMu.cos;

	movss	xmm0, DWORD PTR _trigSig$[ebp+4]
	mulss	xmm0, DWORD PTR _trigGam$[ebp+4]
	mulss	xmm0, DWORD PTR _trigMu$[ebp]
	movss	xmm1, DWORD PTR _trigSig$[ebp]
	mulss	xmm1, DWORD PTR _trigGam$[ebp]
	mulss	xmm1, DWORD PTR _trigMu$[ebp+4]
	subss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1104], xmm0

; 1082 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ResetOrientation@AirframeClass@@QAEXXZ ENDP		; AirframeClass::ResetOrientation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\eom.cpp
_TEXT	SEGMENT
_volume$1 = -252					; size = 4
tv1315 = -248						; size = 4
tv1233 = -244						; size = 4
tv1319 = -240						; size = 4
tv1217 = -236						; size = 4
tv1034 = -232						; size = 4
tv1204 = -228						; size = 4
tv1317 = -224						; size = 4
tv1189 = -220						; size = 4
tv1061 = -216						; size = 4
tv1176 = -212						; size = 4
tv966 = -208						; size = 4
tv1162 = -204						; size = 4
tv945 = -200						; size = 4
tv1329 = -196						; size = 4
tv766 = -192						; size = 4
tv1149 = -188						; size = 4
tv1076 = -184						; size = 4
tv1327 = -180						; size = 4
tv1048 = -176						; size = 4
tv1134 = -172						; size = 4
tv995 = -168						; size = 4
tv1325 = -164						; size = 4
tv961 = -160						; size = 4
tv1121 = -156						; size = 4
tv951 = -152						; size = 4
tv1323 = -148						; size = 4
tv939 = -144						; size = 4
tv1112 = -140						; size = 4
tv933 = -136						; size = 4
tv1321 = -132						; size = 4
tv919 = -128						; size = 4
tv1105 = -124						; size = 4
tv1089 = -120						; size = 4
tv924 = -116						; size = 4
tv670 = -112						; size = 4
tv495 = -108						; size = 4
tv621 = -104						; size = 4
tv375 = -100						; size = 4
tv620 = -96						; size = 4
tv456 = -92						; size = 4
tv613 = -88						; size = 4
tv367 = -84						; size = 4
tv586 = -80						; size = 4
tv457 = -76						; size = 4
tv585 = -72						; size = 4
tv427 = -68						; size = 4
tv556 = -64						; size = 4
tv309 = -60						; size = 4
tv527 = -56						; size = 4
tv320 = -52						; size = 4
tv526 = -48						; size = 4
tv374 = -44						; size = 4
_NWSrshape$ = -40					; size = 4
_Mu_fric$ = -36						; size = 4
_slip$ = -32						; size = 4
_NWSyshape$ = -28					; size = 4
_rMax$ = -24						; size = 4
_rCom$ = -20						; size = 4
_NWSBias$ = -16						; size = 4
_RStick$2 = -12						; size = 4
_YPedal$3 = -8						; size = 4
_this$ = -4						; size = 4
_dt$ = 8						; size = 4
?CalcGroundTurnRate@AirframeClass@@AAEXM@Z PROC		; AirframeClass::CalcGroundTurnRate
; _this$ = ecx

; 815  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	mov	DWORD PTR _this$[ebp], ecx

; 816  : 	float rCom, rMax, Mu_fric = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _Mu_fric$[ebp], xmm0

; 817  : 	float NWSrshape = 0.0F, NWSyshape = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _NWSrshape$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _NWSyshape$[ebp], xmm0

; 818  : 	float NWSBias = 0.02F;				// RAS 02Apr04 - Adjust how fast Nose Wheel turns (1.0 max)

	movss	xmm0, DWORD PTR __real@3ca3d70a
	movss	DWORD PTR _NWSBias$[ebp], xmm0

; 819  : 										// 0.01 is pretty slow, and 0.05 is fairly fast
; 820  : 
; 821  : 	if(IsSet(InAir) || platform->mFaults->GetFault(nws_fault))	//MI added faults check

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN62@CalcGround
	push	19					; 00000013H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN63@CalcGround
$LN62@CalcGround:

; 822  : 		return;

	jmp	$LN64@CalcGround
$LN63@CalcGround:

; 823  : 
; 824  : 	if(g_bRealisticAvionics && platform->Pitch() * RTD > 3 && IsSet(NoseSteerOn))

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	SHORT $LN61@CalcGround
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	fstp	DWORD PTR tv766[ebp]
	movss	xmm0, DWORD PTR tv766[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	comiss	xmm0, DWORD PTR __real@40400000
	jbe	SHORT $LN61@CalcGround
	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN61@CalcGround

; 825  : 		ClearFlag(NoseSteerOn);

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag
$LN61@CalcGround:

; 826  : 
; 827  : 	if(gearPos >= 0.9F && !IsSet(GearBroken) && vt > 0.0F )

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1552]
	comiss	xmm0, DWORD PTR __real@3f666666
	jb	$LN60@CalcGround
	push	2048					; 00000800H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN60@CalcGround
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN60@CalcGround

; 828  : 	{
; 829  : 		if(IsSet(NoseSteerOn) && !(gear[0].flags & GearData::GearStuck) 
; 830  : 			&& platform->OnGround())

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN59@CalcGround
	mov	eax, 28					; 0000001cH
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1256]
	mov	eax, DWORD PTR [edx+eax+12]
	and	eax, 1
	jne	$LN59@CalcGround
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+1088]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	je	$LN59@CalcGround

; 831  : 		{
; 832  : 			//MI need to filter Trim out here
; 833  : 			float YPedal = ypedal - UserStickInputs.ytrim;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1508]
	subss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+92
	movss	DWORD PTR _YPedal$3[ebp], xmm0

; 834  : 			float RStick = rstick - UserStickInputs.rtrim;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1504]
	subss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+88
	movss	DWORD PTR _RStick$2[ebp], xmm0

; 835  : 
; 836  : 		
; 837  : 			// RAS 02Apr04 - Nose Wheel Steering (NWS) improvement
; 838  : 			// this code reads takes the vaule of the keyboard or rudder pedals and increments the value slowly to
; 839  : 			// slow down the movement of the simulated nosewheel.
; 840  : 
; 841  : 			// MonoPrint("RStick = %f \n", RStick);
; 842  : 			// MonoPrint("YPedal = %f \n", YPedal);
; 843  : 
; 844  : 			if(RStick || lastRStick || YPedal || lastYPedal)				// Verify that we have a keyboard/rudder input or that the nose wheel

	movss	xmm0, DWORD PTR _RStick$2[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN57@CalcGround
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+828]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN57@CalcGround
	movss	xmm0, DWORD PTR _YPedal$3[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN57@CalcGround
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+832]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN23@CalcGround
$LN57@CalcGround:

; 845  : 			{																// is in a position other than zero
; 846  : 				if(RStick || lastRStick)									// use this if using keyboard

	movss	xmm0, DWORD PTR _RStick$2[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN55@CalcGround
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+828]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN40@CalcGround
$LN55@CalcGround:

; 847  : 				{
; 848  : 					if(RStick > 0.0F || lastRStick > 0.0F)					// NWS commanded to the right

	movss	xmm0, DWORD PTR _RStick$2[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN53@CalcGround
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+828]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN54@CalcGround
$LN53@CalcGround:

; 849  : 					{
; 850  : 						if((lastRStick < NWSBias) && (RStick < NWSBias))	// if float value near center, zero out variables

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _NWSBias$[ebp]
	comiss	xmm0, DWORD PTR [ecx+828]
	jbe	SHORT $LN52@CalcGround
	movss	xmm0, DWORD PTR _NWSBias$[ebp]
	comiss	xmm0, DWORD PTR _RStick$2[ebp]
	jbe	SHORT $LN52@CalcGround

; 851  : 						{
; 852  : 							RStick = 0.0F;									// Acutaly nose wheel positin less than NWSBias so set all var's to zero

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _RStick$2[ebp], xmm0

; 853  : 							lastRStick = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+828], xmm0

; 854  : 						}
; 855  : 						else

	jmp	SHORT $LN49@CalcGround
$LN52@CalcGround:

; 856  : 						{
; 857  : 							if(lastRStick < RStick)					// Nose Wheel less than commanded position

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _RStick$2[ebp]
	comiss	xmm0, DWORD PTR [eax+828]
	jbe	SHORT $LN50@CalcGround

; 858  : 							{
; 859  : 								RStick = lastRStick + NWSBias;		// Turn nose wheel right by NWSBias amount

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+828]
	addss	xmm0, DWORD PTR _NWSBias$[ebp]
	movss	DWORD PTR _RStick$2[ebp], xmm0

; 860  : 								lastRStick = RStick;				// Save last nose wheel position

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _RStick$2[ebp]
	movss	DWORD PTR [edx+828], xmm0

; 861  : 							}
; 862  : 							else									// We get here if nose wheel is greater than commanded position

	jmp	SHORT $LN49@CalcGround
$LN50@CalcGround:

; 863  : 							{
; 864  : 								RStick = lastRStick - NWSBias;		// Turn nose wheel left by NWSBias amount

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+828]
	subss	xmm0, DWORD PTR _NWSBias$[ebp]
	movss	DWORD PTR _RStick$2[ebp], xmm0

; 865  : 								lastRStick = RStick;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _RStick$2[ebp]
	movss	DWORD PTR [ecx+828], xmm0
$LN49@CalcGround:

; 866  : 							}
; 867  : 						}
; 868  : 					}
; 869  : 					else

	jmp	$LN42@CalcGround
$LN54@CalcGround:

; 870  : 					{
; 871  : 						if(RStick < 0.0F || lastRStick < 0.0F)		// NWS commanded to the left

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _RStick$2[ebp]
	ja	SHORT $LN46@CalcGround
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [edx+828]
	jbe	$LN42@CalcGround
$LN46@CalcGround:

; 872  : 						{
; 873  : 							if((lastRStick > -NWSBias) && (RStick > -NWSBias))	// If float vaule near center, zero out variables

	movss	xmm0, DWORD PTR _NWSBias$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+828]
	comiss	xmm1, xmm0
	jbe	SHORT $LN45@CalcGround
	movss	xmm0, DWORD PTR _NWSBias$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _RStick$2[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN45@CalcGround

; 874  : 							{
; 875  : 								RStick = 0.0F;			

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _RStick$2[ebp], xmm0

; 876  : 								lastRStick = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+828], xmm0

; 877  : 							}
; 878  : 							else

	jmp	SHORT $LN42@CalcGround
$LN45@CalcGround:

; 879  : 							{
; 880  : 								if(lastRStick > RStick)				// Nose Wheel less than commanded position

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+828]
	comiss	xmm0, DWORD PTR _RStick$2[ebp]
	jbe	SHORT $LN43@CalcGround

; 881  : 								{
; 882  : 									RStick = lastRStick - NWSBias;	// Turn nose wheel left by NWSBias amount

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+828]
	subss	xmm0, DWORD PTR _NWSBias$[ebp]
	movss	DWORD PTR _RStick$2[ebp], xmm0

; 883  : 									lastRStick = RStick;			// Save last nose wheel position

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _RStick$2[ebp]
	movss	DWORD PTR [ecx+828], xmm0

; 884  : 								}
; 885  : 								else								// Nose wheel farther left than commanded

	jmp	SHORT $LN42@CalcGround
$LN43@CalcGround:

; 886  : 								{
; 887  : 									RStick = lastRStick + NWSBias;	// Turn nose wheel right by NWSBias amount

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+828]
	addss	xmm0, DWORD PTR _NWSBias$[ebp]
	movss	DWORD PTR _RStick$2[ebp], xmm0

; 888  : 									lastRStick = RStick;			// Save last nose wheel position

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _RStick$2[ebp]
	movss	DWORD PTR [eax+828], xmm0
$LN42@CalcGround:

; 889  : 								}
; 890  : 							}
; 891  : 						}
; 892  : 					}
; 893  : 					// NWSrshape is the gain based on nose wheel(keyboard) position.  Original rshape gain calculated in gain.cpp
; 894  : 					
; 895  : 					if(lastRStick)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+828]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN40@CalcGround

; 896  : 					{
; 897  : 						NWSrshape = lastRStick;			//*lastRStick;			

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+828]
	movss	DWORD PTR _NWSrshape$[ebp], xmm0

; 898  : 						if(lastRStick < 0)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+828]
	jbe	SHORT $LN40@CalcGround

; 899  : 							NWSrshape *= -1.0F;

	movss	xmm0, DWORD PTR _NWSrshape$[ebp]
	mulss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _NWSrshape$[ebp], xmm0
$LN40@CalcGround:

; 900  : 					}
; 901  : 				}
; 902  : 
; 903  : 				// This section works just like above except uses rudder pedals
; 904  : 				if(YPedal || lastYPedal)

	movss	xmm0, DWORD PTR _YPedal$3[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN38@CalcGround
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+832]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN25@CalcGround
$LN38@CalcGround:

; 905  : 				{
; 906  : 					if(YPedal > 0.0F || lastYPedal > 0.0F)

	movss	xmm0, DWORD PTR _YPedal$3[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN36@CalcGround
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+832]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN37@CalcGround
$LN36@CalcGround:

; 907  : 					{
; 908  : 						if((lastYPedal < NWSBias) && (YPedal < NWSBias))

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _NWSBias$[ebp]
	comiss	xmm0, DWORD PTR [eax+832]
	jbe	SHORT $LN35@CalcGround
	movss	xmm0, DWORD PTR _NWSBias$[ebp]
	comiss	xmm0, DWORD PTR _YPedal$3[ebp]
	jbe	SHORT $LN35@CalcGround

; 909  : 						{
; 910  : 							YPedal = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _YPedal$3[ebp], xmm0

; 911  : 							lastYPedal = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+832], xmm0

; 912  : 						}
; 913  : 						else

	jmp	SHORT $LN32@CalcGround
$LN35@CalcGround:

; 914  : 						{
; 915  : 							if(lastYPedal < YPedal)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _YPedal$3[ebp]
	comiss	xmm0, DWORD PTR [edx+832]
	jbe	SHORT $LN33@CalcGround

; 916  : 							{
; 917  : 								YPedal = lastYPedal + NWSBias;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+832]
	addss	xmm0, DWORD PTR _NWSBias$[ebp]
	movss	DWORD PTR _YPedal$3[ebp], xmm0

; 918  : 								lastYPedal = YPedal;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _YPedal$3[ebp]
	movss	DWORD PTR [ecx+832], xmm0

; 919  : 							}
; 920  : 							else

	jmp	SHORT $LN32@CalcGround
$LN33@CalcGround:

; 921  : 							{
; 922  : 								YPedal = lastYPedal - NWSBias;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+832]
	subss	xmm0, DWORD PTR _NWSBias$[ebp]
	movss	DWORD PTR _YPedal$3[ebp], xmm0

; 923  : 								lastYPedal = YPedal;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _YPedal$3[ebp]
	movss	DWORD PTR [eax+832], xmm0
$LN32@CalcGround:

; 924  : 							}
; 925  : 						}
; 926  : 					}
; 927  : 					else

	jmp	$LN25@CalcGround
$LN37@CalcGround:

; 928  : 					{
; 929  : 						if(YPedal < 0.0F || lastYPedal < 0.0F)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _YPedal$3[ebp]
	ja	SHORT $LN29@CalcGround
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx+832]
	jbe	$LN25@CalcGround
$LN29@CalcGround:

; 930  : 						{
; 931  : 							if((lastYPedal > -NWSBias) && (YPedal > -NWSBias))

	movss	xmm0, DWORD PTR _NWSBias$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+832]
	comiss	xmm1, xmm0
	jbe	SHORT $LN28@CalcGround
	movss	xmm0, DWORD PTR _NWSBias$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _YPedal$3[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN28@CalcGround

; 932  : 							{
; 933  : 								YPedal = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _YPedal$3[ebp], xmm0

; 934  : 								lastYPedal = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+832], xmm0

; 935  : 							}
; 936  : 							else

	jmp	SHORT $LN25@CalcGround
$LN28@CalcGround:

; 937  : 							{
; 938  : 								if(lastYPedal > YPedal)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+832]
	comiss	xmm0, DWORD PTR _YPedal$3[ebp]
	jbe	SHORT $LN26@CalcGround

; 939  : 								{
; 940  : 									YPedal = lastYPedal - NWSBias;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+832]
	subss	xmm0, DWORD PTR _NWSBias$[ebp]
	movss	DWORD PTR _YPedal$3[ebp], xmm0

; 941  : 									lastYPedal = YPedal;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _YPedal$3[ebp]
	movss	DWORD PTR [eax+832], xmm0

; 942  : 								}
; 943  : 								else

	jmp	SHORT $LN25@CalcGround
$LN26@CalcGround:

; 944  : 								{
; 945  : 									YPedal = lastYPedal + NWSBias;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+832]
	addss	xmm0, DWORD PTR _NWSBias$[ebp]
	movss	DWORD PTR _YPedal$3[ebp], xmm0

; 946  : 									lastYPedal = YPedal;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _YPedal$3[ebp]
	movss	DWORD PTR [edx+832], xmm0
$LN25@CalcGround:

; 947  : 								}
; 948  : 							}
; 949  : 						}
; 950  : 					}
; 951  : 				}
; 952  : 
; 953  : 				// NWSyshape is the gain based on nose wheel (rudder pedal) position.  Original yshape gain calculated in gain.cpp
; 954  : 				if(lastYPedal)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+832]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN23@CalcGround

; 955  : 				{
; 956  : 					NWSyshape = lastYPedal;			//*lastYPedal;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+832]
	movss	DWORD PTR _NWSyshape$[ebp], xmm0

; 957  : 					if(lastYPedal < 0)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [edx+832]
	jbe	SHORT $LN23@CalcGround

; 958  : 						NWSyshape *= -1.0F;

	movss	xmm0, DWORD PTR _NWSyshape$[ebp]
	mulss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _NWSyshape$[ebp], xmm0
$LN23@CalcGround:

; 959  : 				}
; 960  : 			}
; 961  : 			
; 962  : 			// MonoPrint("lastYPedal = %f \n", lastYPedal);
; 963  : 			// MonoPrint("lastRStick = %f \n \n", lastRStick);
; 964  : 
; 965  : 			// RAS - End updated NWS code
; 966  : 
; 967  : 
; 968  : 			// ASSOCIATOR 30/11/03 Added g_bRollLinkedNWSRudder for roll unlinked NWS on the ground
; 969  : 			if(IO.AnalogIsUsed(AXIS_YAW) && !IsSet(IsDigital) || !g_bRollLinkedNWSRudder )	// Retro 31Dec2003

	push	2
	mov	ecx, OFFSET ?IO@@3VSIMLIB_IO_CLASS@@A	; IO
	call	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN20@CalcGround
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN21@CalcGround
$LN20@CalcGround:
	movzx	ecx, BYTE PTR ?g_bRollLinkedNWSRudder@@3_NA ; g_bRollLinkedNWSRudder
	test	ecx, ecx
	jne	SHORT $LN22@CalcGround
$LN21@CalcGround:

; 970  : 			{
; 971  : 				// rCom =  vt/(13.167F/(float)sin(-ypedal * fabs(yshape) * 0.55856F));
; 972  : 				rCom =  vt/(13.167F/(float)sin(-YPedal * fabs(NWSyshape) * 0.55856F));

	movss	xmm0, DWORD PTR _YPedal$3[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	xmm1, DWORD PTR _NWSyshape$[ebp]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv1315[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv919[ebp]
	movss	xmm0, DWORD PTR tv1315[ebp]
	mulss	xmm0, DWORD PTR tv919[ebp]
	mulss	xmm0, DWORD PTR __real@3f0efdca
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv924[ebp]
	movss	xmm0, DWORD PTR __real@4152ac08
	divss	xmm0, DWORD PTR tv924[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1120]
	divss	xmm1, xmm0
	movss	DWORD PTR _rCom$[ebp], xmm1

; 973  : 			}
; 974  : 			else {

	jmp	$LN17@CalcGround
$LN22@CalcGround:

; 975  : 				// rCom =  vt/(13.167F/(float)sin(rstick * fabs(rshape) * 0.55856F));
; 976  : 				if( fabs(RStick) > fabs(YPedal) ) {	// ASSOCIATOR: Added check so that we can use rudder keys and stick

	push	ecx
	movss	xmm0, DWORD PTR _RStick$2[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv933[ebp]
	movss	xmm0, DWORD PTR tv933[ebp]
	push	ecx
	movss	xmm1, DWORD PTR _YPedal$3[ebp]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv1317[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv939[ebp]
	movss	xmm0, DWORD PTR tv1317[ebp]
	comiss	xmm0, DWORD PTR tv939[ebp]
	jbe	SHORT $LN18@CalcGround

; 977  : 					rCom =  vt/(13.167F/(float)sin(RStick * fabs(NWSrshape) * 0.55856F));

	push	ecx
	movss	xmm0, DWORD PTR _NWSrshape$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv945[ebp]
	movss	xmm0, DWORD PTR tv945[ebp]
	mulss	xmm0, DWORD PTR _RStick$2[ebp]
	mulss	xmm0, DWORD PTR __real@3f0efdca
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv951[ebp]
	movss	xmm0, DWORD PTR __real@4152ac08
	divss	xmm0, DWORD PTR tv951[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+1120]
	divss	xmm1, xmm0
	movss	DWORD PTR _rCom$[ebp], xmm1

; 978  : 				}
; 979  : 				else {

	jmp	SHORT $LN17@CalcGround
$LN18@CalcGround:

; 980  : 					rCom =  vt/(13.167F/(float)sin(-YPedal * fabs(NWSyshape) * 0.55856F));

	movss	xmm0, DWORD PTR _YPedal$3[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	xmm1, DWORD PTR _NWSyshape$[ebp]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv1319[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv961[ebp]
	movss	xmm0, DWORD PTR tv1319[ebp]
	mulss	xmm0, DWORD PTR tv961[ebp]
	mulss	xmm0, DWORD PTR __real@3f0efdca
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv966[ebp]
	movss	xmm0, DWORD PTR __real@4152ac08
	divss	xmm0, DWORD PTR tv966[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1120]
	divss	xmm1, xmm0
	movss	DWORD PTR _rCom$[ebp], xmm1
$LN17@CalcGround:

; 981  : 				}
; 982  : 			}
; 983  : 			// rCom *= (0.5F + (80.0F*KNOTS_TO_FTPSEC - vt)/(160.0F * KNOTS_TO_FTPSEC));
; 984  : 			rCom *= max(0.01F, (0.5F + (80.0F*KNOTS_TO_FTPSEC - vt)/(160.0F * KNOTS_TO_FTPSEC))); // JB 010805 Reverse steers over 160 knots.

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@430706e2
	subss	xmm0, DWORD PTR [edx+1120]
	divss	xmm0, DWORD PTR __real@438706e2
	addss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3c23d70a
	comiss	xmm1, xmm0
	jbe	SHORT $LN66@CalcGround
	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR tv309[ebp], xmm0
	jmp	SHORT $LN67@CalcGround
$LN66@CalcGround:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@430706e2
	subss	xmm0, DWORD PTR [eax+1120]
	divss	xmm0, DWORD PTR __real@438706e2
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv309[ebp], xmm0
$LN67@CalcGround:
	movss	xmm0, DWORD PTR _rCom$[ebp]
	mulss	xmm0, DWORD PTR tv309[ebp]
	movss	DWORD PTR _rCom$[ebp], xmm0

; 985  : 
; 986  : 			Mu_fric += (0.6F - 0.3F*(!platform->onFlatFeature && groundType != COVERAGE_ROAD)  );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	cmp	DWORD PTR [edx+668], 0
	jne	SHORT $LN68@CalcGround
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1260], 10		; 0000000aH
	je	SHORT $LN68@CalcGround
	mov	DWORD PTR tv320[ebp], 1
	jmp	SHORT $LN69@CalcGround
$LN68@CalcGround:
	mov	DWORD PTR tv320[ebp], 0
$LN69@CalcGround:
	cvtsi2ss xmm0, DWORD PTR tv320[ebp]
	mulss	xmm0, DWORD PTR __real@3e99999a
	movss	xmm1, DWORD PTR __real@3f19999a
	subss	xmm1, xmm0
	addss	xmm1, DWORD PTR _Mu_fric$[ebp]
	movss	DWORD PTR _Mu_fric$[ebp], xmm1

; 987  : 
; 988  : 			if(!IsSet(OverRunway) )

	push	8388608					; 00800000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN16@CalcGround

; 989  : 			{
; 990  : 				Mu_fric -= 0.2F;

	movss	xmm0, DWORD PTR _Mu_fric$[ebp]
	subss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _Mu_fric$[ebp], xmm0
$LN16@CalcGround:

; 991  : 			}	
; 992  : 
; 993  : 			rMax = Mu_fric * (1.0F - nzcgs) * GRAVITY / vt;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR [ecx+268]
	mulss	xmm0, DWORD PTR _Mu_fric$[ebp]
	mulss	xmm0, DWORD PTR __real@4200b53f
	mov	edx, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [edx+1120]
	movss	DWORD PTR _rMax$[ebp], xmm0

; 994  : 
; 995  : 			if( fabs(rCom) > rMax)

	push	ecx
	movss	xmm0, DWORD PTR _rCom$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv995[ebp]
	movss	xmm0, DWORD PTR tv995[ebp]
	comiss	xmm0, DWORD PTR _rMax$[ebp]
	jbe	$LN15@CalcGround

; 996  : 			{
; 997  : 				if(rCom < 0.0F)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _rCom$[ebp]
	jbe	SHORT $LN14@CalcGround

; 998  : 				{
; 999  : 					r = -rMax;

	movss	xmm0, DWORD PTR _rMax$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1140], xmm0

; 1000 : 					beta -= (rCom + rMax)*RTD*dt*0.1F;

	movss	xmm0, DWORD PTR _rCom$[ebp]
	addss	xmm0, DWORD PTR _rMax$[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mulss	xmm0, DWORD PTR _dt$[ebp]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1156]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1156], xmm1

; 1001 : 				}
; 1002 : 				else

	jmp	SHORT $LN13@CalcGround
$LN14@CalcGround:

; 1003 : 				{
; 1004 : 					r = rMax;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _rMax$[ebp]
	movss	DWORD PTR [eax+1140], xmm0

; 1005 : 					beta -= (rCom - rMax)*RTD*dt*0.1F;

	movss	xmm0, DWORD PTR _rCom$[ebp]
	subss	xmm0, DWORD PTR _rMax$[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mulss	xmm0, DWORD PTR _dt$[ebp]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1156]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1156], xmm1
$LN13@CalcGround:

; 1006 : 				}
; 1007 : 				beta = max(-45.0F, min(beta, 45.0F));

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42340000
	comiss	xmm0, DWORD PTR [eax+1156]
	jbe	SHORT $LN70@CalcGround
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1156]
	movss	DWORD PTR tv367[ebp], xmm0
	jmp	SHORT $LN71@CalcGround
$LN70@CalcGround:
	movss	xmm0, DWORD PTR __real@42340000
	movss	DWORD PTR tv367[ebp], xmm0
$LN71@CalcGround:
	movss	xmm0, DWORD PTR __real@c2340000
	comiss	xmm0, DWORD PTR tv367[ebp]
	jbe	SHORT $LN74@CalcGround
	movss	xmm0, DWORD PTR __real@c2340000
	movss	DWORD PTR tv375[ebp], xmm0
	jmp	SHORT $LN75@CalcGround
$LN74@CalcGround:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42340000
	comiss	xmm0, DWORD PTR [edx+1156]
	jbe	SHORT $LN72@CalcGround
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1156]
	movss	DWORD PTR tv374[ebp], xmm0
	jmp	SHORT $LN73@CalcGround
$LN72@CalcGround:
	movss	xmm0, DWORD PTR __real@42340000
	movss	DWORD PTR tv374[ebp], xmm0
$LN73@CalcGround:
	movss	xmm0, DWORD PTR tv374[ebp]
	movss	DWORD PTR tv375[ebp], xmm0
$LN75@CalcGround:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv375[ebp]
	movss	DWORD PTR [ecx+1156], xmm0

; 1008 : 				beta *= 0.9F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1156]
	mulss	xmm0, DWORD PTR __real@3f666666
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1156], xmm0

; 1009 : 			}
; 1010 : 			else

	jmp	SHORT $LN12@CalcGround
$LN15@CalcGround:

; 1011 : 			{
; 1012 : 				beta *= 0.6F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1156]
	mulss	xmm0, DWORD PTR __real@3f19999a
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1156], xmm0

; 1013 : 				if(fabs(beta) < 0.1F)

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1156]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1034[ebp]
	movss	xmm0, DWORD PTR __real@3dcccccd
	comiss	xmm0, DWORD PTR tv1034[ebp]
	jbe	SHORT $LN11@CalcGround

; 1014 : 					beta = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1156], xmm0
$LN11@CalcGround:

; 1015 : 				r = rCom;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _rCom$[ebp]
	movss	DWORD PTR [edx+1140], xmm0
$LN12@CalcGround:

; 1016 : 			}
; 1017 : 		}
; 1018 : 		else

	jmp	$LN10@CalcGround
$LN59@CalcGround:

; 1019 : 		{
; 1020 : 			// ASSOCIATOR 30/11/03 Added g_bRollLinkedNWSRudder for roll unlinked rudder on the ground
; 1021 : 			if(IO.AnalogIsUsed(AXIS_YAW) && !IsSet(IsDigital) || !g_bRollLinkedNWSRudder ) 	// Retro 31Dec2003

	push	2
	mov	ecx, OFFSET ?IO@@3VSIMLIB_IO_CLASS@@A	; IO
	call	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@CalcGround
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN8@CalcGround
$LN7@CalcGround:
	movzx	ecx, BYTE PTR ?g_bRollLinkedNWSRudder@@3_NA ; g_bRollLinkedNWSRudder
	test	ecx, ecx
	jne	$LN9@CalcGround
$LN8@CalcGround:

; 1022 : 			{
; 1023 : 				r =  max(-0.5F, min(ypedal * (float)fabs(yshape)*wy01*cy*qsom * 0.5F, 0.5F));

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+664]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1048[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv1048[ebp]
	mulss	xmm0, DWORD PTR [eax+1508]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+1476]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+160]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+648]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN76@CalcGround
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+664]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1061[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv1061[ebp]
	mulss	xmm0, DWORD PTR [edx+1508]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+1476]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+160]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+648]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv427[ebp], xmm0
	jmp	SHORT $LN77@CalcGround
$LN76@CalcGround:
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv427[ebp], xmm0
$LN77@CalcGround:
	movss	xmm0, DWORD PTR __real@bf000000
	comiss	xmm0, DWORD PTR tv427[ebp]
	jbe	SHORT $LN80@CalcGround
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR tv457[ebp], xmm0
	jmp	$LN81@CalcGround
$LN80@CalcGround:
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+664]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1076[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv1076[ebp]
	mulss	xmm0, DWORD PTR [ecx+1508]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+1476]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+160]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+648]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN78@CalcGround
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+664]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1089[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv1089[ebp]
	mulss	xmm0, DWORD PTR [eax+1508]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+1476]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+160]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+648]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv456[ebp], xmm0
	jmp	SHORT $LN79@CalcGround
$LN78@CalcGround:
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv456[ebp], xmm0
$LN79@CalcGround:
	movss	xmm0, DWORD PTR tv456[ebp]
	movss	DWORD PTR tv457[ebp], xmm0
$LN81@CalcGround:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv457[ebp]
	movss	DWORD PTR [ecx+1140], xmm0

; 1024 : 			}
; 1025 : 			else {

	jmp	$LN4@CalcGround
$LN9@CalcGround:

; 1026 : 				// ASSOCIATOR 30/11/03 Negated rstick to reverse roll linked rudder direction on the ground
; 1027 : 				if( fabs(rstick) > fabs(ypedal) ) {	// ASSOCIATOR: Added check so that we can use rudder keys and stick

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1504]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1105[ebp]
	movss	xmm0, DWORD PTR tv1105[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm1, DWORD PTR [eax+1508]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv1321[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1112[ebp]
	movss	xmm0, DWORD PTR tv1321[ebp]
	comiss	xmm0, DWORD PTR tv1112[ebp]
	jbe	$LN5@CalcGround

; 1028 : 					r =  max(-0.5F, min(-rstick * (float)fabs(rshape)*wy01*cy*qsom * 0.5F, 0.5F));

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1504]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm1, DWORD PTR [edx+660]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv1323[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1121[ebp]
	movss	xmm0, DWORD PTR tv1323[ebp]
	mulss	xmm0, DWORD PTR tv1121[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+1476]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+160]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+648]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN82@CalcGround
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1504]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm1, DWORD PTR [ecx+660]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv1325[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1134[ebp]
	movss	xmm0, DWORD PTR tv1325[ebp]
	mulss	xmm0, DWORD PTR tv1134[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+1476]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+160]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+648]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv495[ebp], xmm0
	jmp	SHORT $LN83@CalcGround
$LN82@CalcGround:
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv495[ebp], xmm0
$LN83@CalcGround:
	movss	xmm0, DWORD PTR __real@bf000000
	comiss	xmm0, DWORD PTR tv495[ebp]
	jbe	SHORT $LN86@CalcGround
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR tv527[ebp], xmm0
	jmp	$LN87@CalcGround
$LN86@CalcGround:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1504]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm1, DWORD PTR [eax+660]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv1327[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1149[ebp]
	movss	xmm0, DWORD PTR tv1327[ebp]
	mulss	xmm0, DWORD PTR tv1149[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+1476]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+160]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+648]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN84@CalcGround
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1504]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm1, DWORD PTR [edx+660]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv1329[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1162[ebp]
	movss	xmm0, DWORD PTR tv1329[ebp]
	mulss	xmm0, DWORD PTR tv1162[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+1476]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+160]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+648]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv526[ebp], xmm0
	jmp	SHORT $LN85@CalcGround
$LN84@CalcGround:
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv526[ebp], xmm0
$LN85@CalcGround:
	movss	xmm0, DWORD PTR tv526[ebp]
	movss	DWORD PTR tv527[ebp], xmm0
$LN87@CalcGround:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv527[ebp]
	movss	DWORD PTR [eax+1140], xmm0

; 1029 : 				}
; 1030 : 				else {

	jmp	$LN4@CalcGround
$LN5@CalcGround:

; 1031 : 					r =  max(-0.5F, min(ypedal * (float)fabs(yshape)*wy01*cy*qsom * 0.5F, 0.5F));

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+664]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1176[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv1176[ebp]
	mulss	xmm0, DWORD PTR [edx+1508]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+1476]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+160]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+648]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN88@CalcGround
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+664]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1189[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv1189[ebp]
	mulss	xmm0, DWORD PTR [ecx+1508]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+1476]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+160]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+648]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv556[ebp], xmm0
	jmp	SHORT $LN89@CalcGround
$LN88@CalcGround:
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv556[ebp], xmm0
$LN89@CalcGround:
	movss	xmm0, DWORD PTR __real@bf000000
	comiss	xmm0, DWORD PTR tv556[ebp]
	jbe	SHORT $LN92@CalcGround
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR tv586[ebp], xmm0
	jmp	$LN93@CalcGround
$LN92@CalcGround:
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+664]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1204[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv1204[ebp]
	mulss	xmm0, DWORD PTR [eax+1508]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+1476]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+160]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+648]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN90@CalcGround
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+664]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1217[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv1217[ebp]
	mulss	xmm0, DWORD PTR [edx+1508]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+1476]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+160]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+648]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv585[ebp], xmm0
	jmp	SHORT $LN91@CalcGround
$LN90@CalcGround:
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv585[ebp], xmm0
$LN91@CalcGround:
	movss	xmm0, DWORD PTR tv585[ebp]
	movss	DWORD PTR tv586[ebp], xmm0
$LN93@CalcGround:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv586[ebp]
	movss	DWORD PTR [eax+1140], xmm0
$LN4@CalcGround:

; 1032 : 				}
; 1033 : 			}
; 1034 : 			beta += rstick * (float)fabs(rshape)*wy01*cy*qsom*0.5F*RTD*dt;

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+660]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1233[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv1233[ebp]
	mulss	xmm0, DWORD PTR [edx+1504]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+1476]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+160]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+648]
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR __real@42652ee1
	mulss	xmm0, DWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+1156]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1156], xmm0

; 1035 : 			beta *= 0.9F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1156]
	mulss	xmm0, DWORD PTR __real@3f666666
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1156], xmm0

; 1036 : 			beta = max(-15.0F, min(beta, 15.0F));

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41700000
	comiss	xmm0, DWORD PTR [ecx+1156]
	jbe	SHORT $LN94@CalcGround
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1156]
	movss	DWORD PTR tv613[ebp], xmm0
	jmp	SHORT $LN95@CalcGround
$LN94@CalcGround:
	movss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR tv613[ebp], xmm0
$LN95@CalcGround:
	movss	xmm0, DWORD PTR __real@c1700000
	comiss	xmm0, DWORD PTR tv613[ebp]
	jbe	SHORT $LN98@CalcGround
	movss	xmm0, DWORD PTR __real@c1700000
	movss	DWORD PTR tv621[ebp], xmm0
	jmp	SHORT $LN99@CalcGround
$LN98@CalcGround:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41700000
	comiss	xmm0, DWORD PTR [eax+1156]
	jbe	SHORT $LN96@CalcGround
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1156]
	movss	DWORD PTR tv620[ebp], xmm0
	jmp	SHORT $LN97@CalcGround
$LN96@CalcGround:
	movss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR tv620[ebp], xmm0
$LN97@CalcGround:
	movss	xmm0, DWORD PTR tv620[ebp]
	movss	DWORD PTR tv621[ebp], xmm0
$LN99@CalcGround:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv621[ebp]
	movss	DWORD PTR [edx+1156], xmm0
$LN10@CalcGround:

; 1037 : 		}
; 1038 : 	}
; 1039 : 	else

	jmp	SHORT $LN3@CalcGround
$LN60@CalcGround:

; 1040 : 	{
; 1041 : 		r = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1140], xmm0

; 1042 : 		beta *= 0.8F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1156]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1156], xmm0
$LN3@CalcGround:

; 1043 : 	}
; 1044 : 
; 1045 : 	float slip = (float)fabs(vt *platform->platformAngles.sinbet);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	mulss	xmm0, DWORD PTR [ecx+352]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _slip$[ebp]

; 1046 : 
; 1047 : 	if(slip > 3.0F && vt > 25.0F * KNOTS_TO_FTPSEC && platform == SimDriver.GetPlayerEntity() &&
; 1048 : 		(IsSet(OverRunway) || platform->onFlatFeature || groundType == COVERAGE_ROAD) )

	movss	xmm0, DWORD PTR _slip$[ebp]
	comiss	xmm0, DWORD PTR __real@40400000
	jbe	$LN2@CalcGround
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	comiss	xmm0, DWORD PTR __real@4228c89a
	jbe	$LN2@CalcGround
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1088], eax
	jne	$LN2@CalcGround
	push	8388608					; 00800000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN1@CalcGround
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	cmp	DWORD PTR [eax+668], 0
	jne	SHORT $LN1@CalcGround
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1260], 10		; 0000000aH
	jne	$LN2@CalcGround
$LN1@CalcGround:

; 1049 : 	{
; 1050 : 		float volume = max(0.0F, 2500.0F - slip*slip*100.0F);

	movss	xmm0, DWORD PTR _slip$[ebp]
	mulss	xmm0, DWORD PTR _slip$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	movss	xmm1, DWORD PTR __real@451c4000
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, xmm1
	jbe	SHORT $LN100@CalcGround
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv670[ebp], xmm0
	jmp	SHORT $LN101@CalcGround
$LN100@CalcGround:
	movss	xmm0, DWORD PTR _slip$[ebp]
	mulss	xmm0, DWORD PTR _slip$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	movss	xmm1, DWORD PTR __real@451c4000
	subss	xmm1, xmm0
	movss	DWORD PTR tv670[ebp], xmm1
$LN101@CalcGround:
	movss	xmm0, DWORD PTR tv670[ebp]
	movss	DWORD PTR _volume$1[ebp], xmm0

; 1051 : 		//F4SoundFXSetPos( SFX_TIRE_SQUEAL, TRUE, x + 5.0F, y, z, 1.0F, volume );
; 1052 : 		platform->SoundPos.Sfx(SFX_TIRE_SQUEAL,0,1,volume); // MLR 5/16/2004 - 

	push	ecx
	movss	xmm0, DWORD PTR _volume$1[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	172					; 000000acH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMM@Z		; F4SoundPos::Sfx
$LN2@CalcGround:

; 1053 : 	}
; 1054 : 
; 1055 : 	oldy03[0] = beta;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+1156]
	mov	DWORD PTR [ecx+eax+452], edx

; 1056 : 	oldy03[1] = beta;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+1156]
	mov	DWORD PTR [ecx+eax+452], edx

; 1057 : 	oldy03[2] = beta;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+1156]
	mov	DWORD PTR [ecx+eax+452], edx

; 1058 : 	oldy03[3] = beta;

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+1156]
	mov	DWORD PTR [ecx+eax+452], edx

; 1059 : 	oldy03[4] = beta;

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+1156]
	mov	DWORD PTR [ecx+eax+452], edx

; 1060 : 	oldy03[5] = beta;

	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+1156]
	mov	DWORD PTR [ecx+eax+452], edx
$LN64@CalcGround:

; 1061 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CalcGroundTurnRate@AirframeClass@@AAEXM@Z ENDP		; AirframeClass::CalcGroundTurnRate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\eom.cpp
_TEXT	SEGMENT
_sinHdgDiff$ = -20					; size = 4
_gndPitch$ = -16					; size = 4
_cosHdgDiff$ = -12					; size = 4
_xyGnd$ = -8						; size = 4
_this$ = -4						; size = 4
_gndGmma$ = 8						; size = 4
_relMu$ = 12						; size = 4
?CalculateGroundPlane@AirframeClass@@ABEXPAM0@Z PROC	; AirframeClass::CalculateGroundPlane
; _this$ = ecx

; 1494 : void AirframeClass::CalculateGroundPlane(float *gndGmma, float *relMu) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 1495 : 	float gndPitch, xyGnd, cosHdgDiff, sinHdgDiff;
; 1496 : 	
; 1497 : 	xyGnd = (float)sqrt(gndNormal.x*gndNormal.x + gndNormal.y*gndNormal.y);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1288]
	mulss	xmm0, DWORD PTR [ecx+1288]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1292]
	mulss	xmm1, DWORD PTR [eax+1292]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _xyGnd$[ebp]

; 1498 : 	gndPitch = (float)atan(xyGnd/-gndNormal.z);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1296]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _xyGnd$[ebp]
	divss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	fstp	DWORD PTR _gndPitch$[ebp]

; 1499 : 	
; 1500 : 	if(xyGnd){

	movss	xmm0, DWORD PTR _xyGnd$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN2@CalculateG

; 1501 : 		cosHdgDiff = 
; 1502 : 			gndNormal.x/xyGnd*platform->platformAngles.cossig + gndNormal.y/xyGnd*platform->platformAngles.sinsig;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1288]
	divss	xmm0, DWORD PTR _xyGnd$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mulss	xmm0, DWORD PTR [ecx+376]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1292]
	divss	xmm1, DWORD PTR _xyGnd$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mulss	xmm1, DWORD PTR [ecx+372]
	addss	xmm0, xmm1
	movss	DWORD PTR _cosHdgDiff$[ebp], xmm0

; 1503 : 		sinHdgDiff = 
; 1504 : 			gndNormal.x/xyGnd*platform->platformAngles.sinsig - gndNormal.y/xyGnd*platform->platformAngles.cossig;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1288]
	divss	xmm0, DWORD PTR _xyGnd$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mulss	xmm0, DWORD PTR [ecx+372]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1292]
	divss	xmm1, DWORD PTR _xyGnd$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mulss	xmm1, DWORD PTR [ecx+376]
	subss	xmm0, xmm1
	movss	DWORD PTR _sinHdgDiff$[ebp], xmm0

; 1505 : 	}
; 1506 : 	else{

	jmp	SHORT $LN1@CalculateG
$LN2@CalculateG:

; 1507 : 		cosHdgDiff = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _cosHdgDiff$[ebp], xmm0

; 1508 : 		sinHdgDiff = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _sinHdgDiff$[ebp], xmm0
$LN1@CalculateG:

; 1509 : 	}
; 1510 : 	
; 1511 : 	*gndGmma = gndPitch * -cosHdgDiff;

	movss	xmm0, DWORD PTR _cosHdgDiff$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _gndPitch$[ebp]
	mov	edx, DWORD PTR _gndGmma$[ebp]
	movss	DWORD PTR [edx], xmm0

; 1512 : 	*relMu = - gndPitch * sinHdgDiff;

	movss	xmm0, DWORD PTR _gndPitch$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _sinHdgDiff$[ebp]
	mov	eax, DWORD PTR _relMu$[ebp]
	movss	DWORD PTR [eax], xmm0

; 1513 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CalculateGroundPlane@AirframeClass@@ABEXPAM0@Z ENDP	; AirframeClass::CalculateGroundPlane
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\eom.cpp
_TEXT	SEGMENT
_minHeight$ = -32					; size = 4
tv216 = -28						; size = 4
tv159 = -24						; size = 4
tv152 = -20						; size = 4
tv135 = -16						; size = 4
_alpdelta$1 = -12					; size = 4
_tempVt$2 = -8						; size = 4
_this$ = -4						; size = 4
_dt$ = 8						; size = 4
_netAccel$ = 12						; size = 4
_gndGmma$ = 16						; size = 4
___formal$ = 20						; size = 4
?SetGroundPosition@AirframeClass@@AAEXMMMM@Z PROC	; AirframeClass::SetGroundPosition
; _this$ = ecx

; 1517 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1518 : 	float minHeight = CheckHeight();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckHeight@AirframeClass@@QBEMXZ	; AirframeClass::CheckHeight
	fstp	DWORD PTR _minHeight$[ebp]

; 1519 : 	z = groundZ - minHeight;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1272]
	subss	xmm0, DWORD PTR _minHeight$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1116], xmm0

; 1520 : 
; 1521 : 	// JB carrier
; 1522 : 	if (IsSet(OnObject)){

	push	1073741824				; 40000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN9@SetGroundP

; 1523 : 		z = onObjectHeight;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1816]
	mov	DWORD PTR [edx+1116], ecx
$LN9@SetGroundP:

; 1524 : 	}
; 1525 : 
; 1526 : 	if(IsSet(GearBroken)){

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN8@SetGroundP

; 1527 : 		if( netAccel < 0.0F){

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _netAccel$[ebp]
	jbe	$LN7@SetGroundP

; 1528 : 			float alpdelta = -1.0F*dt;

	movss	xmm0, DWORD PTR __real@bf800000
	mulss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR _alpdelta$1[ebp], xmm0

; 1529 : 			alpha += alpdelta;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1152]
	addss	xmm0, DWORD PTR _alpdelta$1[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1152], xmm0

; 1530 : 			oldp03[0] += alpdelta;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+332]
	addss	xmm0, DWORD PTR _alpdelta$1[ebp]
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax+332], xmm0

; 1531 : 			oldp03[1] += alpdelta;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+332]
	addss	xmm0, DWORD PTR _alpdelta$1[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+ecx+332], xmm0
$LN7@SetGroundP:

; 1532 : 		}
; 1533 : 	}
; 1534 : 	else {

	jmp	$LN5@SetGroundP
$LN8@SetGroundP:

; 1535 : 		float tempVt = max(10.0F,vt);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	comiss	xmm0, DWORD PTR [eax+1120]
	jbe	SHORT $LN12@SetGroundP
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR tv135[ebp], xmm0
	jmp	SHORT $LN13@SetGroundP
$LN12@SetGroundP:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	movss	DWORD PTR tv135[ebp], xmm0
$LN13@SetGroundP:
	movss	xmm0, DWORD PTR tv135[ebp]
	movss	DWORD PTR _tempVt$2[ebp], xmm0

; 1536 : 		if(NumGear() > 1 && platform->drawPointer){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?NumGear@AirframeClass@@QBEHXZ		; AirframeClass::NumGear
	cmp	eax, 1
	jle	$LN5@SetGroundP
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	cmp	DWORD PTR [eax+332], 0
	je	$LN5@SetGroundP

; 1537 : 			if(netAccel > 0.0F){

	movss	xmm0, DWORD PTR _netAccel$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN4@SetGroundP

; 1538 : 				netAccel *= (min(0.05F,1.0F/tempVt) );

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _tempVt$2[ebp]
	comiss	xmm0, DWORD PTR __real@3d4ccccd
	jbe	SHORT $LN14@SetGroundP
	movss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR tv152[ebp], xmm0
	jmp	SHORT $LN15@SetGroundP
$LN14@SetGroundP:
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _tempVt$2[ebp]
	movss	DWORD PTR tv152[ebp], xmm0
$LN15@SetGroundP:
	movss	xmm0, DWORD PTR _netAccel$[ebp]
	mulss	xmm0, DWORD PTR tv152[ebp]
	movss	DWORD PTR _netAccel$[ebp], xmm0

; 1539 : 			}
; 1540 : 			else{

	jmp	SHORT $LN3@SetGroundP
$LN4@SetGroundP:

; 1541 : 				netAccel *= (max(tempVt*0.003F,0.3F) + 0.4F*IsSet(WheelBrakes));

	movss	xmm0, DWORD PTR _tempVt$2[ebp]
	mulss	xmm0, DWORD PTR __real@3b449ba6
	comiss	xmm0, DWORD PTR __real@3e99999a
	jbe	SHORT $LN16@SetGroundP
	movss	xmm0, DWORD PTR _tempVt$2[ebp]
	mulss	xmm0, DWORD PTR __real@3b449ba6
	movss	DWORD PTR tv159[ebp], xmm0
	jmp	SHORT $LN17@SetGroundP
$LN16@SetGroundP:
	movss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR tv159[ebp], xmm0
$LN17@SetGroundP:
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3ecccccd
	addss	xmm0, DWORD PTR tv159[ebp]
	mulss	xmm0, DWORD PTR _netAccel$[ebp]
	movss	DWORD PTR _netAccel$[ebp], xmm0
$LN3@SetGroundP:

; 1542 : 			}
; 1543 : 			gear[0].vel += netAccel;

	mov	ecx, 28					; 0000001cH
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1256]
	movss	xmm0, DWORD PTR [eax+ecx+4]
	addss	xmm0, DWORD PTR _netAccel$[ebp]
	mov	ecx, 28					; 0000001cH
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1256]
	movss	DWORD PTR [eax+ecx+4], xmm0

; 1544 : 			gear[1].vel -= netAccel + vt*r*0.3F;

	mov	ecx, 28					; 0000001cH
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1256]
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	mulss	xmm0, DWORD PTR [esi+1140]
	mulss	xmm0, DWORD PTR __real@3e99999a
	addss	xmm0, DWORD PTR _netAccel$[ebp]
	movss	xmm1, DWORD PTR [eax+ecx+4]
	subss	xmm1, xmm0
	mov	eax, 28					; 0000001cH
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1256]
	movss	DWORD PTR [edx+eax+4], xmm1

; 1545 : 			gear[2].vel -= netAccel - vt*r*0.3F;

	mov	eax, 28					; 0000001cH
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1256]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	mulss	xmm0, DWORD PTR [esi+1140]
	mulss	xmm0, DWORD PTR __real@3e99999a
	movss	xmm1, DWORD PTR _netAccel$[ebp]
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR [edx+eax+4]
	subss	xmm0, xmm1
	mov	edx, 28					; 0000001cH
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1256]
	movss	DWORD PTR [ecx+edx+4], xmm0
$LN5@SetGroundP:

; 1546 : 		}
; 1547 : 	}
; 1548 : 	if(IsSet(Planted)){

	push	4096					; 00001000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN2@SetGroundP

; 1549 : 		gmma = gndGmma;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _gndGmma$[ebp]
	movss	DWORD PTR [edx+1172], xmm0

; 1550 : 	}
; 1551 : 	else{

	jmp	SHORT $LN1@SetGroundP
$LN2@SetGroundP:

; 1552 : 		gmma = max (gmma, gndGmma);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1172]
	comiss	xmm0, DWORD PTR _gndGmma$[ebp]
	jbe	SHORT $LN18@SetGroundP
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1172]
	movss	DWORD PTR tv216[ebp], xmm0
	jmp	SHORT $LN19@SetGroundP
$LN18@SetGroundP:
	movss	xmm0, DWORD PTR _gndGmma$[ebp]
	movss	DWORD PTR tv216[ebp], xmm0
$LN19@SetGroundP:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv216[ebp]
	movss	DWORD PTR [edx+1172], xmm0
$LN1@SetGroundP:

; 1553 : 	}
; 1554 : 	
; 1555 : 	bumpphi *= 0.95F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1276]
	mulss	xmm0, DWORD PTR __real@3f733333
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1276], xmm0

; 1556 : 	bumpthe *= 0.95F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1280]
	mulss	xmm0, DWORD PTR __real@3f733333
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1280], xmm0

; 1557 : 
; 1558 : 	sigma += bumpyaw;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1176]
	addss	xmm0, DWORD PTR [edx+1284]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1176], xmm0

; 1559 : 	bumpyaw = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1284], xmm0

; 1560 : 
; 1561 : 	ResetOrientation();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetOrientation@AirframeClass@@QAEXXZ	; AirframeClass::ResetOrientation

; 1562 : 	Trigenometry();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Trigenometry@AirframeClass@@AAEXXZ	; AirframeClass::Trigenometry

; 1563 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetGroundPosition@AirframeClass@@AAEXMMMM@Z ENDP	; AirframeClass::SetGroundPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\eom.cpp
_TEXT	SEGMENT
tv1567 = -376						; size = 8
_Trig$1 = -368						; size = 8
tv2477 = -360						; size = 4
tv2467 = -356						; size = 4
tv1837 = -352						; size = 4
tv2206 = -348						; size = 4
tv2389 = -344						; size = 4
tv2473 = -340						; size = 4
tv2385 = -336						; size = 4
tv2469 = -332						; size = 4
_pitch$2 = -328						; size = 4
tv2033 = -324						; size = 4
_volume$3 = -320					; size = 4
tv2475 = -316						; size = 4
tv2479 = -312						; size = 4
tv1841 = -308						; size = 4
tv2232 = -304						; size = 4
tv2471 = -300						; size = 4
tv2481 = -296						; size = 4
tv2210 = -292						; size = 4
tv2465 = -288						; size = 4
tv1007 = -284						; size = 4
tv1042 = -280						; size = 4
_newpos$4 = -276					; size = 4
tv1120 = -272						; size = 4
tv778 = -268						; size = 4
tv203 = -264						; size = 4
tv753 = -260						; size = 4
tv1110 = -256						; size = 4
tv743 = -252						; size = 4
tv1017 = -248						; size = 4
tv586 = -244						; size = 4
tv316 = -240						; size = 4
tv570 = -236						; size = 4
tv1119 = -232						; size = 4
tv545 = -228						; size = 4
tv1043 = -224						; size = 4
tv535 = -220						; size = 4
tv1029 = -216						; size = 4
tv431 = -212						; size = 4
tv1016 = -208						; size = 4
tv406 = -204						; size = 4
tv396 = -200						; size = 4
tv1563 = -196						; size = 4
tv1417 = -192						; size = 4
tv765 = -188						; size = 4
tv1416 = -184						; size = 4
tv752 = -180						; size = 4
tv1403 = -176						; size = 4
tv709 = -172						; size = 4
tv1391 = -168						; size = 4
tv571 = -164						; size = 4
tv1390 = -160						; size = 4
tv557 = -156						; size = 4
tv1381 = -152						; size = 4
tv544 = -148						; size = 4
_gearLimitSpeed$5 = -144				; size = 4
tv432 = -140						; size = 4
tv1268 = -136						; size = 4
tv418 = -132						; size = 4
tv1220 = -128						; size = 4
tv405 = -124						; size = 4
tv1150 = -120						; size = 4
tv372 = -116						; size = 4
tv1149 = -112						; size = 4
tv290 = -108						; size = 4
tv1136 = -104						; size = 4
tv779 = -100						; size = 4
_gy$ = -96						; size = 2
_message$6 = -92					; size = 4
_which$7 = -88						; size = 4
_gx$ = -84						; size = 2
_Mu_fric$ = -80						; size = 4
_SquareV$8 = -76					; size = 4
_SquareV$9 = -72					; size = 4
_SquareV$10 = -68					; size = 4
_newVt$ = -64						; size = 4
_gearLimitSpeed$11 = -60				; size = 4
_airbase$ = -56						; size = 4
_dmg$12 = -52						; size = 4
_i$13 = -48						; size = 4
_dmgStrength$14 = -44					; size = 4
_netAccel$ = -40					; size = 4
_speedMods$15 = -36					; size = 4
_volume$ = -32						; size = 4
_which$16 = -28						; size = 4
_pitch$ = -24						; size = 4
_this$ = -20						; size = 4
_pos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_dt$ = 8						; size = 4
?CalculateVt@AirframeClass@@AAEMM@Z PROC		; AirframeClass::CalculateVt
; _this$ = ecx

; 1161 : float AirframeClass::CalculateVt(float dt){

	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1162 : 	float netAccel = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _netAccel$[ebp], xmm0

; 1163 : 	float newVt, Mu_fric = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _Mu_fric$[ebp], xmm0

; 1164 : 	float pitch, volume;
; 1165 : 
; 1166 : 	// sfr: fixing xy order
; 1167 : 	GridIndex gx, gy;
; 1168 : 	::vector pos = { x, y };

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1108]
	movss	DWORD PTR _pos$[ebp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1112]
	movss	DWORD PTR _pos$[ebp+4], xmm0
	xor	edx, edx
	mov	DWORD PTR _pos$[ebp+8], edx

; 1169 : 	ConvertSimToGrid(&pos, &gx, &gy);

	lea	eax, DWORD PTR _gy$[ebp]
	push	eax
	lea	ecx, DWORD PTR _gx$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	call	?ConvertSimToGrid@@YAXPAUvector@@PAF1@Z	; ConvertSimToGrid
	add	esp, 12					; 0000000cH

; 1170 : 	//gx = SimToGrid(y);
; 1171 : 	//gy = SimToGrid(x);
; 1172 : 	Objective airbase = FindNearbyAirbase(gx, gy);

	movzx	eax, WORD PTR _gy$[ebp]
	push	eax
	movzx	ecx, WORD PTR _gx$[ebp]
	push	ecx
	call	?FindNearbyAirbase@@YAPAVObjectiveClass@@FF@Z ; FindNearbyAirbase
	add	esp, 8
	mov	DWORD PTR _airbase$[ebp], eax

; 1173 : 	if (
; 1174 : 		IsSet(OnObject) || // JB carrier
; 1175 : 		(airbase && /* JB 060114 CTD*/ airbase->IsObjective() &&  airbase->brain->IsOverRunway(platform))
; 1176 : 	){

	push	1073741824				; 40000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN69@CalculateV
	cmp	DWORD PTR _airbase$[ebp], 0
	je	SHORT $LN70@CalculateV
	mov	edx, DWORD PTR _airbase$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _airbase$[ebp]
	mov	edx, DWORD PTR [eax+236]
	call	edx
	test	eax, eax
	je	SHORT $LN70@CalculateV
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	push	ecx
	mov	edx, DWORD PTR _airbase$[ebp]
	mov	ecx, DWORD PTR [edx+240]
	call	?IsOverRunway@ATCBrain@@QAEHPAVAircraftClass@@@Z ; ATCBrain::IsOverRunway
	test	eax, eax
	je	SHORT $LN70@CalculateV
$LN69@CalculateV:

; 1177 : 		SetFlag(OverRunway);

	push	8388608					; 00800000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag

; 1178 : 	}
; 1179 : 	else {

	jmp	SHORT $LN68@CalculateV
$LN70@CalculateV:

; 1180 : 		ClearFlag(OverRunway);

	push	8388608					; 00800000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag
$LN68@CalculateV:

; 1181 : 	}
; 1182 : 
; 1183 : 	if (airbase && airbase->GetType() == TYPE_AIRSTRIP){

	cmp	DWORD PTR _airbase$[ebp], 0
	je	SHORT $LN67@CalculateV
	mov	ecx, DWORD PTR _airbase$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	eax, al
	cmp	eax, 2
	jne	SHORT $LN67@CalculateV

; 1184 : 		SetFlag(OverAirStrip);

	push	67108864				; 04000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag

; 1185 : 	}
; 1186 : 	else {

	jmp	SHORT $LN66@CalculateV
$LN67@CalculateV:

; 1187 : 		ClearFlag(OverAirStrip);

	push	67108864				; 04000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag
$LN66@CalculateV:

; 1188 : 	}
; 1189 : 
; 1190 : 	if (vt > 10.0F){

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	comiss	xmm0, DWORD PTR __real@41200000
	jbe	SHORT $LN65@CalculateV

; 1191 : 		gPlayerExitMenuShown = TRUE;

	mov	DWORD PTR ?gPlayerExitMenuShown@@3HA, 1	; gPlayerExitMenuShown
$LN65@CalculateV:

; 1192 : 	}
; 1193 : 
; 1194 : 	if (!IsSet(InAir))

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN64@CalculateV

; 1195 : 	{
; 1196 : 		mlTrig Trig;
; 1197 : 		mlSinCos(&Trig, (float)SimLibElapsedTime*vt/100000.0f);

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR tv1563[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv1563[ebp]
	mov	eax, DWORD PTR tv1563[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv1567[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv1567[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+1120]
	divss	xmm0, DWORD PTR __real@47c35000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _Trig$1[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 1198 : 		oscillationTimer = Trig.sin;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Trig$1[ebp]
	movss	DWORD PTR [eax+712], xmm0

; 1199 : 		oscillationSlope = Trig.cos;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Trig$1[ebp+4]
	movss	DWORD PTR [ecx+716], xmm0

; 1200 : 		if(IsSet(IsDigital) || !g_bRealisticAvionics){

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN62@CalculateV
	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	jne	SHORT $LN60@CalculateV
$LN62@CalculateV:

; 1201 : 			if(vt < 80.0F * KNOTS_TO_FTPSEC && theta < 1.0F * DTR  ){

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@430706e2
	comiss	xmm0, DWORD PTR [eax+1120]
	jbe	SHORT $LN61@CalculateV
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3c8efa34
	comiss	xmm0, DWORD PTR [ecx+1160]
	jbe	SHORT $LN61@CalculateV

; 1202 : 				SetFlag(NoseSteerOn);

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag

; 1203 : 			}
; 1204 : 			else {

	jmp	SHORT $LN60@CalculateV
$LN61@CalculateV:

; 1205 : 				ClearFlag(NoseSteerOn);

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag
$LN60@CalculateV:

; 1206 : 			}
; 1207 : 		}
; 1208 : 		//from Raymer: Aircraft Design mu = 0.04 w/brakes mu = 0.4
; 1209 : 		if (nzcgs < 1.0F){

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR [edx+268]
	jbe	$LN28@CalculateV

; 1210 : 			FalconDamageMessage* message;
; 1211 : 			if (( groundType == COVERAGE_WATER || groundType == COVERAGE_RIVER ) && vt < 5.0F
; 1212 : 				&& !IsSet(OnObject) ) // JB carrier

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1260], 1
	je	SHORT $LN57@CalculateV
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1260], 2
	jne	$LN58@CalculateV
$LN57@CalculateV:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40a00000
	comiss	xmm0, DWORD PTR [edx+1120]
	jbe	$LN58@CalculateV
	push	1073741824				; 40000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN58@CalculateV

; 1213 : 			{
; 1214 : 				// RV - Biker - Don't apply damage if we're in init
; 1215 : 				if (platform->carrierInitTimer > 5.0f) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR [ecx+3564]
	comiss	xmm0, DWORD PTR __real@40a00000
	jbe	SHORT $LN56@CalculateV

; 1216 : 					message = CreateGroundCollisionMessage(platform, FloatToInt32(platform->MaxStrength()));			

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN73@CalculateV
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv203[ebp], eax
	jmp	SHORT $LN74@CalculateV
$LN73@CalculateV:
	mov	DWORD PTR tv203[ebp], 0
$LN74@CalculateV:
	mov	eax, DWORD PTR tv203[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?MaxStrength@SimBaseClass@@QAEMXZ	; SimBaseClass::MaxStrength
	push	ecx
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	push	eax
	call	?CreateGroundCollisionMessage@@YAPAVFalconDamageMessage@@PAVSimVehicleClass@@HPAVVuTargetEntity@@@Z ; CreateGroundCollisionMessage
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _message$6[ebp], eax

; 1217 : 					FalconSendMessage (message,TRUE);

	push	1
	mov	ecx, DWORD PTR _message$6[ebp]
	push	ecx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN56@CalculateV:

; 1218 : 				}
; 1219 : 			}
; 1220 : 			else if(

	jmp	$LN28@CalculateV
$LN58@CalculateV:

; 1221 : 				!IsSet(OnObject) && // JB carrier
; 1222 : 				(IsSet(GearBroken) || gearPos <= 0.3F || platform->platformAngles.cosphi < 0.9659F ||
; 1223 : 				groundType == COVERAGE_WATER || groundType == COVERAGE_RIVER)
; 1224 : 			){

	push	1073741824				; 40000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN54@CalculateV
	push	2048					; 00000800H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN53@CalculateV
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3e99999a
	comiss	xmm0, DWORD PTR [edx+1552]
	jae	SHORT $LN53@CalculateV
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR __real@3f774539
	comiss	xmm0, DWORD PTR [ecx+400]
	ja	SHORT $LN53@CalculateV
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+1260], 1
	je	SHORT $LN53@CalculateV
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1260], 2
	jne	$LN54@CalculateV
$LN53@CalculateV:

; 1225 : 				int dmgStrength;
; 1226 : 				
; 1227 : 				if (	
; 1228 : 					// JB carrier
; 1229 : 					!IsSet(OnObject) && ( 
; 1230 : 						groundType == COVERAGE_WATER || 
; 1231 : 						groundType == COVERAGE_RIVER || 
; 1232 : 						groundType == COVERAGE_THINFOREST || 
; 1233 : 						groundType == COVERAGE_THICKFOREST	|| 
; 1234 : 						groundType == COVERAGE_ROCKY || 
; 1235 : 						groundType == COVERAGE_URBAN
; 1236 : 					)
; 1237 : 					// JB carrier
; 1238 : 				){

	push	1073741824				; 40000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN52@CalculateV
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1260], 1
	je	SHORT $LN51@CalculateV
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+1260], 2
	je	SHORT $LN51@CalculateV
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1260], 6
	je	SHORT $LN51@CalculateV
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1260], 7
	je	SHORT $LN51@CalculateV
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+1260], 8
	je	SHORT $LN51@CalculateV
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1260], 9
	jne	$LN52@CalculateV
$LN51@CalculateV:

; 1239 : 					dmgStrength = FloatToInt32(max(0.0F,vt * 0.02F*(1.0F - nzcgs)*(float)rand()/(float)RAND_MAX));

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	mulss	xmm0, DWORD PTR __real@3ca3d70a
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR [edx+268]
	mulss	xmm0, xmm1
	movss	DWORD PTR tv2465[ebp], xmm0
	call	_rand
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR tv2465[ebp]
	mulss	xmm1, xmm0
	divss	xmm1, DWORD PTR __real@46fffe00
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, xmm1
	jbe	SHORT $LN75@CalculateV
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv290[ebp], xmm0
	jmp	SHORT $LN76@CalculateV
$LN75@CalculateV:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	mulss	xmm0, DWORD PTR __real@3ca3d70a
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR [ecx+268]
	mulss	xmm0, xmm1
	movss	DWORD PTR tv2467[ebp], xmm0
	call	_rand
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR tv2467[ebp]
	mulss	xmm1, xmm0
	divss	xmm1, DWORD PTR __real@46fffe00
	movss	DWORD PTR tv290[ebp], xmm1
$LN76@CalculateV:
	push	ecx
	movss	xmm0, DWORD PTR tv290[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _dmgStrength$14[ebp], eax

; 1240 : 				}
; 1241 : 				else

	jmp	$LN50@CalculateV
$LN52@CalculateV:

; 1242 : 					dmgStrength = FloatToInt32(max(0.0F,vt * 0.01F*(1.0F - nzcgs)*(float)rand()/(float)RAND_MAX));

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR [eax+268]
	mulss	xmm0, xmm1
	movss	DWORD PTR tv2469[ebp], xmm0
	call	_rand
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR tv2469[ebp]
	mulss	xmm1, xmm0
	divss	xmm1, DWORD PTR __real@46fffe00
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, xmm1
	jbe	SHORT $LN77@CalculateV
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv316[ebp], xmm0
	jmp	SHORT $LN78@CalculateV
$LN77@CalculateV:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR [edx+268]
	mulss	xmm0, xmm1
	movss	DWORD PTR tv2471[ebp], xmm0
	call	_rand
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR tv2471[ebp]
	mulss	xmm1, xmm0
	divss	xmm1, DWORD PTR __real@46fffe00
	movss	DWORD PTR tv316[ebp], xmm1
$LN78@CalculateV:
	push	ecx
	movss	xmm0, DWORD PTR tv316[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _dmgStrength$14[ebp], eax
$LN50@CalculateV:

; 1243 : 				
; 1244 : 				if(
; 1245 : 					!IsSet(OnObject) && ( // JB carrier
; 1246 : 					groundType == COVERAGE_WATER || groundType == COVERAGE_RIVER)
; 1247 : 					) // JB carrier

	push	1073741824				; 40000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN49@CalculateV
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1260], 1
	je	SHORT $LN48@CalculateV
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1260], 2
	jne	$LN49@CalculateV
$LN48@CalculateV:

; 1248 : 				{
; 1249 : 					for(int i = 0; i < NumGear(); i++){

	mov	DWORD PTR _i$13[ebp], 0
	jmp	SHORT $LN47@CalculateV
$LN46@CalculateV:
	mov	edx, DWORD PTR _i$13[ebp]
	add	edx, 1
	mov	DWORD PTR _i$13[ebp], edx
$LN47@CalculateV:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NumGear@AirframeClass@@QBEHXZ		; AirframeClass::NumGear
	cmp	DWORD PTR _i$13[ebp], eax
	jge	SHORT $LN45@CalculateV

; 1250 : 						if (platform->IsComplex()){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?IsComplex@AircraftClass@@QAEHXZ	; AircraftClass::IsComplex
	test	eax, eax
	je	SHORT $LN44@CalculateV

; 1251 : 							platform->SetDOF(ComplexGearDOF[i] /*COMP_NOS_GEAR + i*/, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$13[ebp]
	mov	edx, DWORD PTR ?ComplexGearDOF@@3PAHA[ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?SetDOF@SimMoverClass@@QAEXHM@Z		; SimMoverClass::SetDOF
$LN44@CalculateV:

; 1252 : 						}
; 1253 : 					    gear[i].flags |= GearData::GearBroken | GearData::DoorBroken;

	mov	ecx, DWORD PTR _i$13[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1256]
	mov	ecx, DWORD PTR [eax+ecx+12]
	or	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR _i$13[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1256]
	mov	DWORD PTR [eax+edx+12], ecx

; 1254 : 					}

	jmp	SHORT $LN46@CalculateV
$LN45@CalculateV:

; 1255 : 					SetFlag (GearBroken);

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag
$LN49@CalculateV:

; 1256 : 				}
; 1257 : 
; 1258 : 				if (dmgStrength){

	cmp	DWORD PTR _dmgStrength$14[ebp], 0
	je	SHORT $LN43@CalculateV

; 1259 : 					message = CreateGroundCollisionMessage(platform, dmgStrength);		

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN79@CalculateV
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv372[ebp], eax
	jmp	SHORT $LN80@CalculateV
$LN79@CalculateV:
	mov	DWORD PTR tv372[ebp], 0
$LN80@CalculateV:
	mov	edx, DWORD PTR tv372[ebp]
	push	edx
	mov	eax, DWORD PTR _dmgStrength$14[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	push	edx
	call	?CreateGroundCollisionMessage@@YAPAVFalconDamageMessage@@PAVSimVehicleClass@@HPAVVuTargetEntity@@@Z ; CreateGroundCollisionMessage
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _message$6[ebp], eax

; 1260 : 					FalconSendMessage (message,FALSE);

	push	0
	mov	eax, DWORD PTR _message$6[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN43@CalculateV:

; 1261 : 				}
; 1262 : 
; 1263 : 				if (dmgStrength > 1){

	cmp	DWORD PTR _dmgStrength$14[ebp], 1
	jle	$LN42@CalculateV

; 1264 : 					pitch = max(0.5F, min(100.0F/vt, 2.0F));

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42c80000
	divss	xmm0, DWORD PTR [ecx+1120]
	movss	xmm1, DWORD PTR __real@40000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN81@CalculateV
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42c80000
	divss	xmm0, DWORD PTR [edx+1120]
	movss	DWORD PTR tv396[ebp], xmm0
	jmp	SHORT $LN82@CalculateV
$LN81@CalculateV:
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv396[ebp], xmm0
$LN82@CalculateV:
	movss	xmm0, DWORD PTR __real@3f000000
	comiss	xmm0, DWORD PTR tv396[ebp]
	jbe	SHORT $LN85@CalculateV
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv406[ebp], xmm0
	jmp	SHORT $LN86@CalculateV
$LN85@CalculateV:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42c80000
	divss	xmm0, DWORD PTR [eax+1120]
	movss	xmm1, DWORD PTR __real@40000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN83@CalculateV
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42c80000
	divss	xmm0, DWORD PTR [ecx+1120]
	movss	DWORD PTR tv405[ebp], xmm0
	jmp	SHORT $LN84@CalculateV
$LN83@CalculateV:
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv405[ebp], xmm0
$LN84@CalculateV:
	movss	xmm0, DWORD PTR tv405[ebp]
	movss	DWORD PTR tv406[ebp], xmm0
$LN86@CalculateV:
	movss	xmm0, DWORD PTR tv406[ebp]
	movss	DWORD PTR _pitch$[ebp], xmm0

; 1265 : 					volume = max(0.0F, min(40000.0F - vt*vt, 4000000.0F));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	mulss	xmm0, DWORD PTR [eax+1120]
	movss	xmm1, DWORD PTR __real@471c4000
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@4a742400
	comiss	xmm0, xmm1
	jbe	SHORT $LN87@CalculateV
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	mulss	xmm0, DWORD PTR [edx+1120]
	movss	xmm1, DWORD PTR __real@471c4000
	subss	xmm1, xmm0
	movss	DWORD PTR tv418[ebp], xmm1
	jmp	SHORT $LN88@CalculateV
$LN87@CalculateV:
	movss	xmm0, DWORD PTR __real@4a742400
	movss	DWORD PTR tv418[ebp], xmm0
$LN88@CalculateV:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv418[ebp]
	jbe	SHORT $LN91@CalculateV
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv432[ebp], xmm0
	jmp	SHORT $LN92@CalculateV
$LN91@CalculateV:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	mulss	xmm0, DWORD PTR [ecx+1120]
	movss	xmm1, DWORD PTR __real@471c4000
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@4a742400
	comiss	xmm0, xmm1
	jbe	SHORT $LN89@CalculateV
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	mulss	xmm0, DWORD PTR [eax+1120]
	movss	xmm1, DWORD PTR __real@471c4000
	subss	xmm1, xmm0
	movss	DWORD PTR tv431[ebp], xmm1
	jmp	SHORT $LN90@CalculateV
$LN89@CalculateV:
	movss	xmm0, DWORD PTR __real@4a742400
	movss	DWORD PTR tv431[ebp], xmm0
$LN90@CalculateV:
	movss	xmm0, DWORD PTR tv431[ebp]
	movss	DWORD PTR tv432[ebp], xmm0
$LN92@CalculateV:
	movss	xmm0, DWORD PTR tv432[ebp]
	movss	DWORD PTR _volume$[ebp], xmm0

; 1266 : 					platform->SoundPos.Sfx( SFX_HIT_2 + rand()%4, 0, pitch, volume,  x + 5.0F, y, z); // MLR 5/16/2004 - 

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1116]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1112]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1108]
	addss	xmm0, DWORD PTR __real@40a00000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _volume$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pitch$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	0
	call	_rand
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN161@CalculateV
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN161@CalculateV:
	add	eax, 174				; 000000aeH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMMMMM@Z		; F4SoundPos::Sfx

; 1267 : 					//F4SoundFXSetPos( SFX_HIT_2 + rand()%4, TRUE, x + 5.0F, y, z, pitch, volume );
; 1268 : 					bumpthe += (1.0F - 2.0F*(float)rand()/(float)RAND_MAX) * dmgStrength * vt/400.0F;

	call	_rand
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@40000000
	divss	xmm0, DWORD PTR __real@46fffe00
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	cvtsi2ss xmm0, DWORD PTR _dmgStrength$14[ebp]
	mulss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+1120]
	divss	xmm1, DWORD PTR __real@43c80000
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm1, DWORD PTR [eax+1280]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1280], xmm1

; 1269 : 					bumpphi += (1.0F - 2.0F*(float)rand()/(float)RAND_MAX) * dmgStrength * vt/200.0F *DTR;

	call	_rand
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@40000000
	divss	xmm0, DWORD PTR __real@46fffe00
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	cvtsi2ss xmm0, DWORD PTR _dmgStrength$14[ebp]
	mulss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+1120]
	divss	xmm1, DWORD PTR __real@43480000
	mulss	xmm1, DWORD PTR __real@3c8efa34
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm1, DWORD PTR [eax+1276]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1276], xmm1

; 1270 : 					bumpyaw += (1.0F - 2.0F*(float)rand()/(float)RAND_MAX) * dmgStrength * vt/200.0F *DTR;

	call	_rand
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@40000000
	divss	xmm0, DWORD PTR __real@46fffe00
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	cvtsi2ss xmm0, DWORD PTR _dmgStrength$14[ebp]
	mulss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+1120]
	divss	xmm1, DWORD PTR __real@43480000
	mulss	xmm1, DWORD PTR __real@3c8efa34
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm1, DWORD PTR [eax+1284]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1284], xmm1
$LN42@CalculateV:

; 1271 : 				}
; 1272 : 				
; 1273 : 				if (!IsSet(OnObject)){

	push	1073741824				; 40000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN41@CalculateV

; 1274 : 					// JB carrier
; 1275 : 					SetFlag(EngineOff);

	push	32768					; 00008000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag

; 1276 : 					SetFlag(EngineOff2);//TJL 01/22/04 multi-engine

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag

; 1277 : 					platform->mFaults->SetFault(FaultClass::eng_fault,
; 1278 : 									FaultClass::fl_out, FaultClass::fail, FALSE);

	push	0
	push	2
	push	-2147483648				; 80000000H
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN41@CalculateV:

; 1279 : 				} // JB carrier
; 1280 : 
; 1281 : 				// TJL 10/20/03 limit rumble sound to only play while on ground, not while over airfield/airstrip 
; 1282 : 				if (vt > 1.0F && platform->OnGround()){

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	$LN36@CalculateV
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	je	$LN36@CalculateV

; 1283 : 					pitch = max(0.2F, min(vt/200.0F, 2.0F));

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	divss	xmm0, DWORD PTR __real@43480000
	movss	xmm1, DWORD PTR __real@40000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN93@CalculateV
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	divss	xmm0, DWORD PTR __real@43480000
	movss	DWORD PTR tv535[ebp], xmm0
	jmp	SHORT $LN94@CalculateV
$LN93@CalculateV:
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv535[ebp], xmm0
$LN94@CalculateV:
	movss	xmm0, DWORD PTR __real@3e4ccccd
	comiss	xmm0, DWORD PTR tv535[ebp]
	jbe	SHORT $LN97@CalculateV
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR tv545[ebp], xmm0
	jmp	SHORT $LN98@CalculateV
$LN97@CalculateV:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	divss	xmm0, DWORD PTR __real@43480000
	movss	xmm1, DWORD PTR __real@40000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN95@CalculateV
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	divss	xmm0, DWORD PTR __real@43480000
	movss	DWORD PTR tv544[ebp], xmm0
	jmp	SHORT $LN96@CalculateV
$LN95@CalculateV:
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv544[ebp], xmm0
$LN96@CalculateV:
	movss	xmm0, DWORD PTR tv544[ebp]
	movss	DWORD PTR tv545[ebp], xmm0
$LN98@CalculateV:
	movss	xmm0, DWORD PTR tv545[ebp]
	movss	DWORD PTR _pitch$[ebp], xmm0

; 1284 : 					volume = max(0.0F, min(2500.0F - vt*vt, 4000000.0F));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	mulss	xmm0, DWORD PTR [eax+1120]
	movss	xmm1, DWORD PTR __real@451c4000
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@4a742400
	comiss	xmm0, xmm1
	jbe	SHORT $LN99@CalculateV
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	mulss	xmm0, DWORD PTR [edx+1120]
	movss	xmm1, DWORD PTR __real@451c4000
	subss	xmm1, xmm0
	movss	DWORD PTR tv557[ebp], xmm1
	jmp	SHORT $LN100@CalculateV
$LN99@CalculateV:
	movss	xmm0, DWORD PTR __real@4a742400
	movss	DWORD PTR tv557[ebp], xmm0
$LN100@CalculateV:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv557[ebp]
	jbe	SHORT $LN103@CalculateV
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv571[ebp], xmm0
	jmp	SHORT $LN104@CalculateV
$LN103@CalculateV:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	mulss	xmm0, DWORD PTR [ecx+1120]
	movss	xmm1, DWORD PTR __real@451c4000
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@4a742400
	comiss	xmm0, xmm1
	jbe	SHORT $LN101@CalculateV
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	mulss	xmm0, DWORD PTR [eax+1120]
	movss	xmm1, DWORD PTR __real@451c4000
	subss	xmm1, xmm0
	movss	DWORD PTR tv570[ebp], xmm1
	jmp	SHORT $LN102@CalculateV
$LN101@CalculateV:
	movss	xmm0, DWORD PTR __real@4a742400
	movss	DWORD PTR tv570[ebp], xmm0
$LN102@CalculateV:
	movss	xmm0, DWORD PTR tv570[ebp]
	movss	DWORD PTR tv571[ebp], xmm0
$LN104@CalculateV:
	movss	xmm0, DWORD PTR tv571[ebp]
	movss	DWORD PTR _volume$[ebp], xmm0

; 1285 : 					if(
; 1286 : 						!IsSet(OnObject) && // JB carrier
; 1287 : 						!platform->onFlatFeature && groundType != COVERAGE_ROAD
; 1288 : 					){

	push	1073741824				; 40000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN39@CalculateV
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	cmp	DWORD PTR [edx+668], 0
	jne	$LN39@CalculateV
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1260], 10		; 0000000aH
	je	$LN39@CalculateV

; 1289 : 						pitch = min(pitch, 1.0F);

	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _pitch$[ebp]
	jbe	SHORT $LN105@CalculateV
	movss	xmm0, DWORD PTR _pitch$[ebp]
	movss	DWORD PTR tv586[ebp], xmm0
	jmp	SHORT $LN106@CalculateV
$LN105@CalculateV:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv586[ebp], xmm0
$LN106@CalculateV:
	movss	xmm0, DWORD PTR tv586[ebp]
	movss	DWORD PTR _pitch$[ebp], xmm0

; 1290 : 						//TJL 10/20/03 limit sound to player, should not hear AI ground rumble!
; 1291 : 						if (platform->IsPlayer()){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	$LN37@CalculateV

; 1292 : 							platform->SoundPos.Sfx( SFX_GRND_RUMBLE, 0, pitch, volume, x + 5.0F, y, z);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1116]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1112]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1108]
	addss	xmm0, DWORD PTR __real@40a00000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _volume$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pitch$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	0
	push	169					; 000000a9H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMMMMM@Z		; F4SoundPos::Sfx

; 1293 : 							// COBRA - RED - Pit Vibrations
; 1294 : 							float SquareV=vt * 0.0003f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	mulss	xmm0, DWORD PTR __real@399d4952
	movss	DWORD PTR _SquareV$10[ebp], xmm0

; 1295 : 							platform->SetStaticTurbulence(SquareV, SquareV, SquareV);

	push	ecx
	movss	xmm0, DWORD PTR _SquareV$10[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _SquareV$10[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _SquareV$10[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?SetStaticTurbulence@AircraftClass@@QAEXMMM@Z ; AircraftClass::SetStaticTurbulence

; 1296 : 							if (PRANDFloatPos()>=0.9f){

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv1837[ebp]
	movss	xmm0, DWORD PTR tv1837[ebp]
	comiss	xmm0, DWORD PTR __real@3f666666
	jb	SHORT $LN37@CalculateV

; 1297 : 								platform->SetPulseTurbulence( 0.0f, 0.0f, PRANDFloatPos() * SquareV * 2.0f, 1.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv1841[ebp]
	movss	xmm0, DWORD PTR tv1841[ebp]
	mulss	xmm0, DWORD PTR _SquareV$10[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?SetPulseTurbulence@AircraftClass@@QAEXMMMM@Z ; AircraftClass::SetPulseTurbulence
$LN37@CalculateV:

; 1298 : 							}
; 1299 : 							// it'ld be more interesting to move this into gear.cpp
; 1300 : 						}
; 1301 : 					}
; 1302 : 					else {

	jmp	SHORT $LN36@CalculateV
$LN39@CalculateV:

; 1303 : 						platform->SoundPos.Sfx( SFX_TAILSCRAPE, 0, pitch, volume, x + 5.0f, y, z); // MLR 5/16/2004 - 

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1116]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1112]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1108]
	addss	xmm0, DWORD PTR __real@40a00000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _volume$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pitch$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	0
	push	168					; 000000a8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMMMMM@Z		; F4SoundPos::Sfx
$LN36@CalculateV:

; 1304 : 						//F4SoundFXSetPos( SFX_TAILSCRAPE, TRUE, x + 5.0F, y, z, pitch, volume );					
; 1305 : 					}
; 1306 : 				}
; 1307 : 				
; 1308 : 				if (!IsSet(OnObject)) // JB carrier

	push	1073741824				; 40000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN35@CalculateV

; 1309 : 					Mu_fric = CalcMuFric(groundType);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1260]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcMuFric@AirframeClass@@QAEMH@Z	; AirframeClass::CalcMuFric
	fstp	DWORD PTR _Mu_fric$[ebp]

; 1310 : 				else // JB carrier

	jmp	SHORT $LN34@CalculateV
$LN35@CalculateV:

; 1311 : 					Mu_fric = CalcMuFric(COVERAGE_RUNWAY); // JB carrier

	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcMuFric@AirframeClass@@QAEMH@Z	; AirframeClass::CalcMuFric
	fstp	DWORD PTR _Mu_fric$[ebp]
$LN34@CalculateV:

; 1312 : 				//vtDot -= (0.4F + 0.3F * !platform->onFlatFeature) *(1.0F - nzcgs)*GRAVITY;
; 1313 : 
; 1314 : 				// sfr: one wonders, how will this ever happens????
; 1315 : 				// this is inside an if vt > 1.0f
; 1316 : 				// so unless vt is changed again above this will never happen...
; 1317 : 				// @TODO remove
; 1318 : 				if (vt < 1.0F && platform->DBrain()->IsSetATC(DigitalBrain::Landed)){

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR [eax+1120]
	jbe	$LN29@CalculateV
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, eax
	call	?IsSetATC@DigitalBrain@@QAEHH@Z		; DigitalBrain::IsSetATC
	test	eax, eax
	je	SHORT $LN29@CalculateV

; 1319 : 					if (platform == SimDriver.GetPlayerEntity()){

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+1088], eax
	jne	SHORT $LN32@CalculateV

; 1320 : 						if (!gPlayerExitMenuShown){

	cmp	DWORD PTR ?gPlayerExitMenuShown@@3HA, 0	; gPlayerExitMenuShown
	jne	SHORT $LN31@CalculateV

; 1321 : 							gPlayerExitMenuShown = TRUE;

	mov	DWORD PTR ?gPlayerExitMenuShown@@3HA, 1	; gPlayerExitMenuShown

; 1322 : 							OTWDriver.SetExitMenu(TRUE);

	push	1
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?SetExitMenu@OTWDriverClass@@QAEXH@Z	; OTWDriverClass::SetExitMenu
$LN31@CalculateV:

; 1323 : 						}
; 1324 : 					}

	jmp	SHORT $LN29@CalculateV
$LN32@CalculateV:

; 1325 : 					else if (SimLibElapsedTime > platform->DBrain()->WaitTime()){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, eax
	call	?WaitTime@DigitalBrain@@QAEKXZ		; DigitalBrain::WaitTime
	cmp	DWORD PTR ?SimLibElapsedTime@@3KA, eax	; SimLibElapsedTime
	jbe	SHORT $LN29@CalculateV

; 1326 : 						RegroupAircraft(platform);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	push	edx
	call	?RegroupAircraft@@YAXPAVAircraftClass@@@Z ; RegroupAircraft
	add	esp, 4
$LN29@CalculateV:

; 1327 : 					}
; 1328 : 				}
; 1329 : 			}
; 1330 : 			else 

	jmp	$LN28@CalculateV
$LN54@CalculateV:

; 1331 : 			{
; 1332 : 				float speedMods = 1.0F + IsSet(Simplified)*0.25F + IsSet(IsDigital)*0.25F - (!platform->onFlatFeature && groundType != COVERAGE_ROAD) * 0.3F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	cmp	DWORD PTR [ecx+668], 0
	jne	SHORT $LN107@CalculateV
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+1260], 10		; 0000000aH
	je	SHORT $LN107@CalculateV
	mov	DWORD PTR tv709[ebp], 1
	jmp	SHORT $LN108@CalculateV
$LN107@CalculateV:
	mov	DWORD PTR tv709[ebp], 0
$LN108@CalculateV:
	push	8192					; 00002000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3e800000
	addss	xmm0, DWORD PTR __real@3f800000
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv2473[ebp], xmm0
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3e800000
	movss	xmm1, DWORD PTR tv2473[ebp]
	addss	xmm1, xmm0
	cvtsi2ss xmm0, DWORD PTR tv709[ebp]
	mulss	xmm0, DWORD PTR __real@3e99999a
	subss	xmm1, xmm0
	movss	DWORD PTR _speedMods$15[ebp], xmm1

; 1333 : 									
; 1334 : 				float gearLimitSpeed;
; 1335 : 
; 1336 : 				if (!IsSet(OverRunway) )

	push	8388608					; 00800000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN27@CalculateV

; 1337 : 					speedMods -= 0.4F;

	movss	xmm0, DWORD PTR _speedMods$15[ebp]
	subss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR _speedMods$15[ebp], xmm0
$LN27@CalculateV:

; 1338 : 
; 1339 : 				// FRB - Fix very low speed minVcas
; 1340 : 				if (minVcas < 220.0f)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@435c0000
	comiss	xmm0, DWORD PTR [eax+76]
	jbe	SHORT $LN26@CalculateV

; 1341 : 					gearLimitSpeed = 220.0f * KNOTS_TO_FTPSEC;

	movss	xmm0, DWORD PTR __real@43b9a977
	movss	DWORD PTR _gearLimitSpeed$11[ebp], xmm0

; 1342 : 				else

	jmp	SHORT $LN25@CalculateV
$LN26@CalculateV:

; 1343 : 					gearLimitSpeed = minVcas * KNOTS_TO_FTPSEC * speedMods * speedMods;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+76]
	mulss	xmm0, DWORD PTR __real@3fd80b03
	mulss	xmm0, DWORD PTR _speedMods$15[ebp]
	mulss	xmm0, DWORD PTR _speedMods$15[ebp]
	movss	DWORD PTR _gearLimitSpeed$11[ebp], xmm0
$LN25@CalculateV:

; 1344 : 				
; 1345 : 				
; 1346 : 				if ((vt - gearLimitSpeed * speedMods)/(5.0F * KNOTS_TO_FTPSEC * speedMods)*dt > (float)rand()/(float)RAND_MAX)

	movss	xmm0, DWORD PTR _gearLimitSpeed$11[ebp]
	mulss	xmm0, DWORD PTR _speedMods$15[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1120]
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@410706e2
	mulss	xmm0, DWORD PTR _speedMods$15[ebp]
	divss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _dt$[ebp]
	movss	DWORD PTR tv2475[ebp], xmm1
	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	movss	xmm1, DWORD PTR tv2475[ebp]
	comiss	xmm1, xmm0
	jbe	$LN24@CalculateV

; 1347 : 				{
; 1348 : 					pitch = max(0.5F, min(100.0F/vt, 2.0F));

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42c80000
	divss	xmm0, DWORD PTR [eax+1120]
	movss	xmm1, DWORD PTR __real@40000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN109@CalculateV
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42c80000
	divss	xmm0, DWORD PTR [ecx+1120]
	movss	DWORD PTR tv743[ebp], xmm0
	jmp	SHORT $LN110@CalculateV
$LN109@CalculateV:
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv743[ebp], xmm0
$LN110@CalculateV:
	movss	xmm0, DWORD PTR __real@3f000000
	comiss	xmm0, DWORD PTR tv743[ebp]
	jbe	SHORT $LN113@CalculateV
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv753[ebp], xmm0
	jmp	SHORT $LN114@CalculateV
$LN113@CalculateV:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42c80000
	divss	xmm0, DWORD PTR [edx+1120]
	movss	xmm1, DWORD PTR __real@40000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN111@CalculateV
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42c80000
	divss	xmm0, DWORD PTR [eax+1120]
	movss	DWORD PTR tv752[ebp], xmm0
	jmp	SHORT $LN112@CalculateV
$LN111@CalculateV:
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv752[ebp], xmm0
$LN112@CalculateV:
	movss	xmm0, DWORD PTR tv752[ebp]
	movss	DWORD PTR tv753[ebp], xmm0
$LN114@CalculateV:
	movss	xmm0, DWORD PTR tv753[ebp]
	movss	DWORD PTR _pitch$[ebp], xmm0

; 1349 : 					volume = max(0.0F, min(40000.0F - vt*vt, 4000000.0F));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	mulss	xmm0, DWORD PTR [edx+1120]
	movss	xmm1, DWORD PTR __real@471c4000
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@4a742400
	comiss	xmm0, xmm1
	jbe	SHORT $LN115@CalculateV
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	mulss	xmm0, DWORD PTR [ecx+1120]
	movss	xmm1, DWORD PTR __real@471c4000
	subss	xmm1, xmm0
	movss	DWORD PTR tv765[ebp], xmm1
	jmp	SHORT $LN116@CalculateV
$LN115@CalculateV:
	movss	xmm0, DWORD PTR __real@4a742400
	movss	DWORD PTR tv765[ebp], xmm0
$LN116@CalculateV:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv765[ebp]
	jbe	SHORT $LN119@CalculateV
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv779[ebp], xmm0
	jmp	SHORT $LN120@CalculateV
$LN119@CalculateV:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	mulss	xmm0, DWORD PTR [eax+1120]
	movss	xmm1, DWORD PTR __real@471c4000
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@4a742400
	comiss	xmm0, xmm1
	jbe	SHORT $LN117@CalculateV
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	mulss	xmm0, DWORD PTR [edx+1120]
	movss	xmm1, DWORD PTR __real@471c4000
	subss	xmm1, xmm0
	movss	DWORD PTR tv778[ebp], xmm1
	jmp	SHORT $LN118@CalculateV
$LN117@CalculateV:
	movss	xmm0, DWORD PTR __real@4a742400
	movss	DWORD PTR tv778[ebp], xmm0
$LN118@CalculateV:
	movss	xmm0, DWORD PTR tv778[ebp]
	movss	DWORD PTR tv779[ebp], xmm0
$LN120@CalculateV:
	movss	xmm0, DWORD PTR tv779[ebp]
	movss	DWORD PTR _volume$[ebp], xmm0

; 1350 : 					platform->SoundPos.Sfx(SFX_TAXI_THUMP,0,pitch,volume,x + 5.0F, y, z); // MLR 5/16/2004 - 

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1116]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1112]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1108]
	addss	xmm0, DWORD PTR __real@40a00000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _volume$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pitch$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	0
	push	171					; 000000abH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMMMMM@Z		; F4SoundPos::Sfx

; 1351 : 					//F4SoundFXSetPos( SFX_TAXI_THUMP, TRUE, x + 5.0F, y, z, pitch, volume );
; 1352 : 					bumpthe += (1.0F - 2.0F*(float)rand()/(float)RAND_MAX) * vt/(2000.0F*speedMods);

	call	_rand
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@40000000
	divss	xmm0, DWORD PTR __real@46fffe00
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [ecx+1120]
	movss	xmm0, DWORD PTR __real@44fa0000
	mulss	xmm0, DWORD PTR _speedMods$15[ebp]
	divss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm1, DWORD PTR [edx+1280]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1280], xmm1

; 1353 : 					bumpphi += (1.0F - 2.0F*(float)rand()/(float)RAND_MAX) * vt/(2000.0F*speedMods) *DTR;

	call	_rand
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@40000000
	divss	xmm0, DWORD PTR __real@46fffe00
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [ecx+1120]
	movss	xmm0, DWORD PTR __real@44fa0000
	mulss	xmm0, DWORD PTR _speedMods$15[ebp]
	divss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@3c8efa34
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm1, DWORD PTR [edx+1276]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1276], xmm1

; 1354 : 					bumpyaw += (1.0F - 2.0F*(float)rand()/(float)RAND_MAX) * vt/(2000.0F*speedMods) *DTR;

	call	_rand
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@40000000
	divss	xmm0, DWORD PTR __real@46fffe00
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [ecx+1120]
	movss	xmm0, DWORD PTR __real@44fa0000
	mulss	xmm0, DWORD PTR _speedMods$15[ebp]
	divss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@3c8efa34
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm1, DWORD PTR [edx+1284]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1284], xmm1

; 1355 : 					// COBRA - RED - Pit Vibrations
; 1356 : 					platform->SetPulseTurbulence(0.1f, 0.1f, 0.002f * vt, 1.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3b03126f
	mulss	xmm0, DWORD PTR [ecx+1120]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?SetPulseTurbulence@AircraftClass@@QAEXMMMM@Z ; AircraftClass::SetPulseTurbulence
$LN24@CalculateV:

; 1357 : 				}
; 1358 : 
; 1359 : 				if((!IsSet(IsDigital)) && !platform->IsSetFalcFlag(FEC_INVULNERABLE) && vt > gearLimitSpeed )

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN12@CalculateV
	push	32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?IsSetFalcFlag@FalconEntity@@QAEHH@Z	; FalconEntity::IsSetFalcFlag
	test	eax, eax
	jne	$LN12@CalculateV
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	comiss	xmm0, DWORD PTR _gearLimitSpeed$11[ebp]
	jbe	$LN12@CalculateV

; 1360 : 				{	
; 1361 : 					float newpos;
; 1362 : 					int which = rand()%NumGear();

	call	_rand
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NumGear@AirframeClass@@QBEHXZ		; AirframeClass::NumGear
	mov	ecx, eax
	mov	eax, esi
	cdq
	idiv	ecx
	mov	DWORD PTR _which$16[ebp], edx

; 1363 : 					float dmg;
; 1364 : 					if((vt - gearLimitSpeed)/(5.0F * KNOTS_TO_FTPSEC)*dt > (float)rand()/(float)RAND_MAX )

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	subss	xmm0, DWORD PTR _gearLimitSpeed$11[ebp]
	divss	xmm0, DWORD PTR __real@410706e2
	mulss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR tv2477[ebp], xmm0
	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	movss	xmm1, DWORD PTR tv2477[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN22@CalculateV

; 1365 : 						dmg = (float)rand()/(float)RAND_MAX * (vt - gearLimitSpeed)/(10.0F * KNOTS_TO_FTPSEC) * (dt/0.1f);

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+1120]
	subss	xmm1, DWORD PTR _gearLimitSpeed$11[ebp]
	mulss	xmm0, xmm1
	divss	xmm0, DWORD PTR __real@418706e2
	movss	xmm1, DWORD PTR _dt$[ebp]
	divss	xmm1, DWORD PTR __real@3dcccccd
	mulss	xmm0, xmm1
	movss	DWORD PTR _dmg$12[ebp], xmm0

; 1366 : 					else

	jmp	SHORT $LN21@CalculateV
$LN22@CalculateV:

; 1367 : 						dmg = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dmg$12[ebp], xmm0
$LN21@CalculateV:

; 1368 : 
; 1369 : 					if(theta <= 1.0F * DTR || which > 0)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3c8efa34
	comiss	xmm0, DWORD PTR [ecx+1160]
	jae	SHORT $LN19@CalculateV
	cmp	DWORD PTR _which$16[ebp], 0
	jle	SHORT $LN20@CalculateV
$LN19@CalculateV:

; 1370 : 					{
; 1371 : 						gear[which].strength -= dmg;

	mov	edx, DWORD PTR _which$16[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1256]
	movss	xmm0, DWORD PTR [ecx+edx]
	subss	xmm0, DWORD PTR _dmg$12[ebp]
	mov	edx, DWORD PTR _which$16[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1256]
	movss	DWORD PTR [ecx+edx], xmm0
$LN20@CalculateV:

; 1372 : 					}
; 1373 : 
; 1374 : 					if(gear[which].strength < 50.0F){

	mov	edx, DWORD PTR _which$16[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1256]
	movss	xmm0, DWORD PTR __real@42480000
	comiss	xmm0, DWORD PTR [ecx+edx]
	jbe	$LN18@CalculateV

; 1375 : 						platform->mFaults->SetFault(FaultClass::gear_fault, FaultClass::ldgr, FaultClass::fail, FALSE);

	push	0
	push	2
	push	1073741824				; 40000000H
	push	15					; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault

; 1376 : 						gear[which].flags |= GearData::GearStuck;

	mov	ecx, DWORD PTR _which$16[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1256]
	mov	ecx, DWORD PTR [eax+ecx+12]
	or	ecx, 1
	mov	edx, DWORD PTR _which$16[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1256]
	mov	DWORD PTR [eax+edx+12], ecx

; 1377 : 						if(NumGear() > 1 && platform->IsComplex()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?NumGear@AirframeClass@@QBEHXZ		; AirframeClass::NumGear
	cmp	eax, 1
	jle	$LN16@CalculateV
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?IsComplex@AircraftClass@@QAEHXZ	; AircraftClass::IsComplex
	test	eax, eax
	je	$LN16@CalculateV

; 1378 : 							newpos = (float)rand()/(float)RAND_MAX * 50.0F*DTR;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@42480000
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR _newpos$4[ebp], xmm0

; 1379 : 							// MLR 2/22/2004
; 1380 : 							if(newpos < platform->GetDOFValue(ComplexGearDOF[which] /*COMP_NOS_GEAR + which*/)){

	mov	edx, DWORD PTR _which$16[ebp]
	mov	eax, DWORD PTR ?ComplexGearDOF@@3PAHA[edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?GetDOFValue@SimMoverClass@@QAEMH@Z	; SimMoverClass::GetDOFValue
	fstp	DWORD PTR tv2033[ebp]
	movss	xmm0, DWORD PTR tv2033[ebp]
	comiss	xmm0, DWORD PTR _newpos$4[ebp]
	jbe	SHORT $LN16@CalculateV

; 1381 : 								platform->SetDOF(ComplexGearDOF[which]/*COMP_NOS_GEAR + which*/, newpos);

	push	ecx
	movss	xmm0, DWORD PTR _newpos$4[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _which$16[ebp]
	mov	eax, DWORD PTR ?ComplexGearDOF@@3PAHA[edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?SetDOF@SimMoverClass@@QAEXHM@Z		; SimMoverClass::SetDOF
$LN16@CalculateV:

; 1382 : 							}
; 1383 : 						}
; 1384 : 					}

	jmp	$LN14@CalculateV
$LN18@CalculateV:

; 1385 : 					else if(gear[which].strength < 0.0F){

	mov	edx, DWORD PTR _which$16[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1256]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx+edx]
	jbe	$LN14@CalculateV

; 1386 : 						if(NumGear() > 1 && platform->IsComplex()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?NumGear@AirframeClass@@QBEHXZ		; AirframeClass::NumGear
	cmp	eax, 1
	jle	SHORT $LN13@CalculateV
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?IsComplex@AircraftClass@@QAEHXZ	; AircraftClass::IsComplex
	test	eax, eax
	je	SHORT $LN13@CalculateV

; 1387 : 							platform->SetDOF(ComplexGearDOF[which] /*COMP_NOS_GEAR + which*/, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _which$16[ebp]
	mov	ecx, DWORD PTR ?ComplexGearDOF@@3PAHA[eax*4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?SetDOF@SimMoverClass@@QAEXHM@Z		; SimMoverClass::SetDOF

; 1388 : 							gear[which].flags |= GearData::GearBroken | GearData::DoorBroken;

	mov	eax, DWORD PTR _which$16[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1256]
	mov	eax, DWORD PTR [edx+eax+12]
	or	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _which$16[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+1256]
	mov	DWORD PTR [edx+ecx+12], eax
$LN13@CalculateV:

; 1389 : 						}
; 1390 : 						// gear breaks sound
; 1391 : 						//F4SoundFXSetPos( auxaeroData->sndWheelBrakes, TRUE, x, y, z, 1.0f );
; 1392 : 						platform->SoundPos.Sfx(auxaeroData->sndWheelBrakes); // MLR 5/16/2004 - 

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+2428]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMM@Z		; F4SoundPos::Sfx
$LN14@CalculateV:

; 1393 : 					}
; 1394 : 
; 1395 : 					if(dmg > 2.0F){

	movss	xmm0, DWORD PTR _dmg$12[ebp]
	comiss	xmm0, DWORD PTR __real@40000000
	jbe	$LN12@CalculateV

; 1396 : 						pitch = max(0.5F, min(100.0F/vt, 2.0F));

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42c80000
	divss	xmm0, DWORD PTR [ecx+1120]
	movss	xmm1, DWORD PTR __real@40000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN121@CalculateV
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42c80000
	divss	xmm0, DWORD PTR [edx+1120]
	movss	DWORD PTR tv1007[ebp], xmm0
	jmp	SHORT $LN122@CalculateV
$LN121@CalculateV:
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv1007[ebp], xmm0
$LN122@CalculateV:
	movss	xmm0, DWORD PTR __real@3f000000
	comiss	xmm0, DWORD PTR tv1007[ebp]
	jbe	SHORT $LN125@CalculateV
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv1017[ebp], xmm0
	jmp	SHORT $LN126@CalculateV
$LN125@CalculateV:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42c80000
	divss	xmm0, DWORD PTR [eax+1120]
	movss	xmm1, DWORD PTR __real@40000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN123@CalculateV
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42c80000
	divss	xmm0, DWORD PTR [ecx+1120]
	movss	DWORD PTR tv1016[ebp], xmm0
	jmp	SHORT $LN124@CalculateV
$LN123@CalculateV:
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv1016[ebp], xmm0
$LN124@CalculateV:
	movss	xmm0, DWORD PTR tv1016[ebp]
	movss	DWORD PTR tv1017[ebp], xmm0
$LN126@CalculateV:
	movss	xmm0, DWORD PTR tv1017[ebp]
	movss	DWORD PTR _pitch$[ebp], xmm0

; 1397 : 						volume = max(0.0F, min(40000.0F - vt*vt, 4000000.0F));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	mulss	xmm0, DWORD PTR [eax+1120]
	movss	xmm1, DWORD PTR __real@471c4000
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@4a742400
	comiss	xmm0, xmm1
	jbe	SHORT $LN127@CalculateV
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	mulss	xmm0, DWORD PTR [edx+1120]
	movss	xmm1, DWORD PTR __real@471c4000
	subss	xmm1, xmm0
	movss	DWORD PTR tv1029[ebp], xmm1
	jmp	SHORT $LN128@CalculateV
$LN127@CalculateV:
	movss	xmm0, DWORD PTR __real@4a742400
	movss	DWORD PTR tv1029[ebp], xmm0
$LN128@CalculateV:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv1029[ebp]
	jbe	SHORT $LN131@CalculateV
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv1043[ebp], xmm0
	jmp	SHORT $LN132@CalculateV
$LN131@CalculateV:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	mulss	xmm0, DWORD PTR [ecx+1120]
	movss	xmm1, DWORD PTR __real@471c4000
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@4a742400
	comiss	xmm0, xmm1
	jbe	SHORT $LN129@CalculateV
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	mulss	xmm0, DWORD PTR [eax+1120]
	movss	xmm1, DWORD PTR __real@471c4000
	subss	xmm1, xmm0
	movss	DWORD PTR tv1042[ebp], xmm1
	jmp	SHORT $LN130@CalculateV
$LN129@CalculateV:
	movss	xmm0, DWORD PTR __real@4a742400
	movss	DWORD PTR tv1042[ebp], xmm0
$LN130@CalculateV:
	movss	xmm0, DWORD PTR tv1042[ebp]
	movss	DWORD PTR tv1043[ebp], xmm0
$LN132@CalculateV:
	movss	xmm0, DWORD PTR tv1043[ebp]
	movss	DWORD PTR _volume$[ebp], xmm0

; 1398 : 						//F4SoundFXSetPos( SFX_HIT_2 + rand()%4, TRUE, x + 5.0F, y, z, pitch, volume );
; 1399 : 						platform->SoundPos.Sfx(SFX_HIT_2 + rand()%4, 0, pitch, volume, x + 5.0F, y, z ); // MLR 5/16/2004 - 

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1116]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1112]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1108]
	addss	xmm0, DWORD PTR __real@40a00000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _volume$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pitch$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	0
	call	_rand
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN162@CalculateV
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN162@CalculateV:
	add	eax, 174				; 000000aeH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMMMMM@Z		; F4SoundPos::Sfx

; 1400 : 						bumpthe += (float)rand()/(float)RAND_MAX * dmg * vt/400.0F;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR _dmg$12[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+1120]
	divss	xmm0, DWORD PTR __real@43c80000
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+1280]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1280], xmm0

; 1401 : 						bumpphi += (1.0F - 2.0F*(float)rand()/(float)RAND_MAX) * dmg * vt/400.0F *DTR;

	call	_rand
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@40000000
	divss	xmm0, DWORD PTR __real@46fffe00
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _dmg$12[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+1120]
	divss	xmm1, DWORD PTR __real@43c80000
	mulss	xmm1, DWORD PTR __real@3c8efa34
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm1, DWORD PTR [eax+1276]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1276], xmm1

; 1402 : 						bumpyaw += (1.0F - 2.0F*(float)rand()/(float)RAND_MAX) * dmg * vt/400.0F *DTR;

	call	_rand
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@40000000
	divss	xmm0, DWORD PTR __real@46fffe00
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _dmg$12[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+1120]
	divss	xmm1, DWORD PTR __real@43c80000
	mulss	xmm1, DWORD PTR __real@3c8efa34
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm1, DWORD PTR [eax+1284]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1284], xmm1
$LN12@CalculateV:

; 1403 : 					}
; 1404 : 				}
; 1405 : 
; 1406 : 				// TJL 10/20/03 Rumble limited to player
; 1407 : 				// sfr: wrong check
; 1408 : 				pitch = max(0.1F, min(vt/100.0F, 1.0F));

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	xmm1, DWORD PTR __real@3f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN133@CalculateV
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR tv1110[ebp], xmm0
	jmp	SHORT $LN134@CalculateV
$LN133@CalculateV:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv1110[ebp], xmm0
$LN134@CalculateV:
	movss	xmm0, DWORD PTR __real@3dcccccd
	comiss	xmm0, DWORD PTR tv1110[ebp]
	jbe	SHORT $LN137@CalculateV
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR tv1120[ebp], xmm0
	jmp	SHORT $LN138@CalculateV
$LN137@CalculateV:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	xmm1, DWORD PTR __real@3f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN135@CalculateV
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR tv1119[ebp], xmm0
	jmp	SHORT $LN136@CalculateV
$LN135@CalculateV:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv1119[ebp], xmm0
$LN136@CalculateV:
	movss	xmm0, DWORD PTR tv1119[ebp]
	movss	DWORD PTR tv1120[ebp], xmm0
$LN138@CalculateV:
	movss	xmm0, DWORD PTR tv1120[ebp]
	movss	DWORD PTR _pitch$[ebp], xmm0

; 1409 : 				//if (platform->IsPlayer())
; 1410 : 				if (platform == SimDriver.GetPlayerAircraft()){

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1088], eax
	jne	$LN10@CalculateV

; 1411 : 					volume = max(0.0F, min(22500.0F - vt*vt, 4000000.0F));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	mulss	xmm0, DWORD PTR [eax+1120]
	movss	xmm1, DWORD PTR __real@46afc800
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@4a742400
	comiss	xmm0, xmm1
	jbe	SHORT $LN139@CalculateV
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	mulss	xmm0, DWORD PTR [edx+1120]
	movss	xmm1, DWORD PTR __real@46afc800
	subss	xmm1, xmm0
	movss	DWORD PTR tv1136[ebp], xmm1
	jmp	SHORT $LN140@CalculateV
$LN139@CalculateV:
	movss	xmm0, DWORD PTR __real@4a742400
	movss	DWORD PTR tv1136[ebp], xmm0
$LN140@CalculateV:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv1136[ebp]
	jbe	SHORT $LN143@CalculateV
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv1150[ebp], xmm0
	jmp	SHORT $LN144@CalculateV
$LN143@CalculateV:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	mulss	xmm0, DWORD PTR [ecx+1120]
	movss	xmm1, DWORD PTR __real@46afc800
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@4a742400
	comiss	xmm0, xmm1
	jbe	SHORT $LN141@CalculateV
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	mulss	xmm0, DWORD PTR [eax+1120]
	movss	xmm1, DWORD PTR __real@46afc800
	subss	xmm1, xmm0
	movss	DWORD PTR tv1149[ebp], xmm1
	jmp	SHORT $LN142@CalculateV
$LN141@CalculateV:
	movss	xmm0, DWORD PTR __real@4a742400
	movss	DWORD PTR tv1149[ebp], xmm0
$LN142@CalculateV:
	movss	xmm0, DWORD PTR tv1149[ebp]
	movss	DWORD PTR tv1150[ebp], xmm0
$LN144@CalculateV:
	movss	xmm0, DWORD PTR tv1150[ebp]
	movss	DWORD PTR _volume$[ebp], xmm0

; 1412 : 					platform->SoundPos.Sfx( SFX_GRND_RUMBLE, 0, pitch, volume, x + 5.0F, y, z);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1116]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1112]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1108]
	addss	xmm0, DWORD PTR __real@40a00000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _volume$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pitch$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	0
	push	169					; 000000a9H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMMMMM@Z		; F4SoundPos::Sfx

; 1413 : 					// COBRA - RED - Pit Vibrations
; 1414 : 					float SquareV=vt * 0.0003f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	mulss	xmm0, DWORD PTR __real@399d4952
	movss	DWORD PTR _SquareV$8[ebp], xmm0

; 1415 : 					platform->SetStaticTurbulence(SquareV, SquareV, SquareV);

	push	ecx
	movss	xmm0, DWORD PTR _SquareV$8[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _SquareV$8[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _SquareV$8[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?SetStaticTurbulence@AircraftClass@@QAEXMMM@Z ; AircraftClass::SetStaticTurbulence

; 1416 : 					if (PRANDFloatPos()>=0.9f){

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv2206[ebp]
	movss	xmm0, DWORD PTR tv2206[ebp]
	comiss	xmm0, DWORD PTR __real@3f666666
	jb	SHORT $LN10@CalculateV

; 1417 : 						platform->SetPulseTurbulence( 0.0f, 0.0f, PRANDFloatPos() * SquareV * 2.0f, 1.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv2210[ebp]
	movss	xmm0, DWORD PTR tv2210[ebp]
	mulss	xmm0, DWORD PTR _SquareV$8[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?SetPulseTurbulence@AircraftClass@@QAEXMMMM@Z ; AircraftClass::SetPulseTurbulence
$LN10@CalculateV:

; 1418 : 					}
; 1419 : 				}
; 1420 : 				Mu_fric = CalcMuFric(groundType);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1260]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcMuFric@AirframeClass@@QAEMH@Z	; AirframeClass::CalcMuFric
	fstp	DWORD PTR _Mu_fric$[ebp]
$LN28@CalculateV:

; 1421 : 			}
; 1422 : 		}
; 1423 : 		
; 1424 : 		netAccel = vtDot * dt - 
; 1425 : 			(0.8F*Mu_fric + (float)fabs(0.8F*platform->platformAngles.sinbet))*(1.0F - nzcgs)*GRAVITY*dt
; 1426 : 		;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1208]
	mulss	xmm0, DWORD PTR _dt$[ebp]
	movss	xmm1, DWORD PTR __real@3f4ccccd
	mulss	xmm1, DWORD PTR _Mu_fric$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm2, DWORD PTR __real@3f4ccccd
	mulss	xmm2, DWORD PTR [eax+352]
	push	ecx
	movss	DWORD PTR [esp], xmm2
	movss	DWORD PTR tv2479[ebp], xmm0
	movss	DWORD PTR tv2481[ebp], xmm1
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2232[ebp]
	movss	xmm0, DWORD PTR tv2481[ebp]
	addss	xmm0, DWORD PTR tv2232[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR [ecx+268]
	mulss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@4200b53f
	mulss	xmm0, DWORD PTR _dt$[ebp]
	movss	xmm1, DWORD PTR tv2479[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _netAccel$[ebp], xmm1

; 1427 : 		newVt = max(0.0F, vt + netAccel); // calculate total air velocity vt

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	addss	xmm0, DWORD PTR _netAccel$[ebp]
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN145@CalculateV
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv1220[ebp], xmm0
	jmp	SHORT $LN146@CalculateV
$LN145@CalculateV:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	addss	xmm0, DWORD PTR _netAccel$[ebp]
	movss	DWORD PTR tv1220[ebp], xmm0
$LN146@CalculateV:
	movss	xmm0, DWORD PTR tv1220[ebp]
	movss	DWORD PTR _newVt$[ebp], xmm0

; 1428 : 		netAccel = (newVt - vt)/dt;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _newVt$[ebp]
	subss	xmm0, DWORD PTR [ecx+1120]
	divss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR _netAccel$[ebp], xmm0

; 1429 : 		
; 1430 : 		//MI modified so brakesound only get's played above 80kts
; 1431 : 		if(
; 1432 : 			IsSet(WheelBrakes) && (platform == SimDriver.GetPlayerEntity()) && 
; 1433 : 			netAccel - vtDot * dt < -20.0F*KNOTS_TO_FTPSEC*dt && 
; 1434 : 			vt > 80.0*KNOTS_TO_FTPSEC && !IsSet(GearBroken) && gearPos >= 0.8F && 
; 1435 : 			platform->platformAngles.cosphi > 0.9659F
; 1436 : 		){

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN9@CalculateV
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+1088], eax
	jne	$LN9@CalculateV
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1208]
	mulss	xmm0, DWORD PTR _dt$[ebp]
	movss	xmm1, DWORD PTR _netAccel$[ebp]
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@c20706e2
	mulss	xmm0, DWORD PTR _dt$[ebp]
	comiss	xmm0, xmm1
	jbe	$LN9@CalculateV
	mov	ecx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+1120]
	comisd	xmm0, QWORD PTR __real@4060e0dc3c000000
	jbe	$LN9@CalculateV
	push	2048					; 00000800H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN9@CalculateV
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1552]
	comiss	xmm0, DWORD PTR __real@3f4ccccd
	jb	$LN9@CalculateV
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR [ecx+400]
	comiss	xmm0, DWORD PTR __real@3f774539
	jbe	$LN9@CalculateV

; 1437 : 			float volume = max(0.0F, 2000.0F - netAccel/dt*100.0F);

	movss	xmm0, DWORD PTR _netAccel$[ebp]
	divss	xmm0, DWORD PTR _dt$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	movss	xmm1, DWORD PTR __real@44fa0000
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, xmm1
	jbe	SHORT $LN147@CalculateV
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv1268[ebp], xmm0
	jmp	SHORT $LN148@CalculateV
$LN147@CalculateV:
	movss	xmm0, DWORD PTR _netAccel$[ebp]
	divss	xmm0, DWORD PTR _dt$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	movss	xmm1, DWORD PTR __real@44fa0000
	subss	xmm1, xmm0
	movss	DWORD PTR tv1268[ebp], xmm1
$LN148@CalculateV:
	movss	xmm0, DWORD PTR tv1268[ebp]
	movss	DWORD PTR _volume$3[ebp], xmm0

; 1438 : 			platform->SoundPos.Sfx( SFX_TIRE_SQUEAL, 0, 1.0f, volume, x + 5.0F, y, z );

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1116]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1112]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1108]
	addss	xmm0, DWORD PTR __real@40a00000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _volume$3[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	172					; 000000acH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMMMMM@Z		; F4SoundPos::Sfx
$LN9@CalculateV:

; 1439 : 		}
; 1440 : 
; 1441 : 		vt = newVt;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _newVt$[ebp]
	movss	DWORD PTR [eax+1120], xmm0

; 1442 : 	}
; 1443 : 	else 

	jmp	$LN1@CalculateV
$LN64@CalculateV:

; 1444 : 	{
; 1445 : 		ClearFlag(NoseSteerOn);

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag

; 1446 : 		newVt = vt + vtDot * dt;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1208]
	mulss	xmm0, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+1120]
	movss	DWORD PTR _newVt$[ebp], xmm0

; 1447 : 		netAccel = vtDot *dt;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1208]
	mulss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR _netAccel$[ebp], xmm0

; 1448 : 		
; 1449 : 		if (newVt != 0.0F)

	movss	xmm0, DWORD PTR _newVt$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@CalculateV

; 1450 : 			vt = newVt;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _newVt$[ebp]
	movss	DWORD PTR [ecx+1120], xmm0

; 1451 : 		else 

	jmp	SHORT $LN6@CalculateV
$LN7@CalculateV:

; 1452 : 			vt = 0.01F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR [edx+1120], xmm0
$LN6@CalculateV:

; 1453 : 
; 1454 : 		// FRB - gear damage when flying too fast with gear down
; 1455 : 		float gearLimitSpeed;
; 1456 : 		gearLimitSpeed = minVcas * KNOTS_TO_FTPSEC * 1.1f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+76]
	mulss	xmm0, DWORD PTR __real@3fd80b03
	mulss	xmm0, DWORD PTR __real@3f8ccccd
	movss	DWORD PTR _gearLimitSpeed$5[ebp], xmm0

; 1457 : 		// FRB - Fix very low speed minVcas
; 1458 : 		if (minVcas < 220.0f)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@435c0000
	comiss	xmm0, DWORD PTR [ecx+76]
	jbe	SHORT $LN5@CalculateV

; 1459 : 			gearLimitSpeed = 220.0f * KNOTS_TO_FTPSEC;

	movss	xmm0, DWORD PTR __real@43b9a977
	movss	DWORD PTR _gearLimitSpeed$5[ebp], xmm0
$LN5@CalculateV:

; 1460 : 				
; 1461 : 		//if(gearPos >= 0.9F && !platform->IsSetFalcFlag(FEC_INVULNERABLE) && vt > gearLimitSpeed)
; 1462 : 		if(gearPos >= 0.9F && vt > gearLimitSpeed)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1552]
	comiss	xmm0, DWORD PTR __real@3f666666
	jb	$LN1@CalculateV
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	comiss	xmm0, DWORD PTR _gearLimitSpeed$5[ebp]
	jbe	$LN1@CalculateV

; 1463 : 		{	
; 1464 : 			int which = rand()%NumGear();

	call	_rand
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NumGear@AirframeClass@@QBEHXZ		; AirframeClass::NumGear
	mov	ecx, eax
	mov	eax, esi
	cdq
	idiv	ecx
	mov	DWORD PTR _which$7[ebp], edx

; 1465 : 
; 1466 : 			//if(NumGear() > 1 && platform->IsComplex() && !(gear[which].flags & GearData::GearBroken))
; 1467 : 			if(NumGear() > 1 && which < NumGear() && platform->IsComplex())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?NumGear@AirframeClass@@QBEHXZ		; AirframeClass::NumGear
	cmp	eax, 1
	jle	$LN1@CalculateV
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NumGear@AirframeClass@@QBEHXZ		; AirframeClass::NumGear
	cmp	DWORD PTR _which$7[ebp], eax
	jge	$LN1@CalculateV
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?IsComplex@AircraftClass@@QAEHXZ	; AircraftClass::IsComplex
	test	eax, eax
	je	$LN1@CalculateV

; 1468 : 			{
; 1469 : 				if (!IsSet(IsDigital))

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN1@CalculateV

; 1470 : 				{
; 1471 : 					gear[which].flags |= (GearData::DoorStuck | GearData::GearStuck 
; 1472 : 															| GearData::DoorBroken | GearData::GearBroken);

	mov	eax, DWORD PTR _which$7[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1256]
	mov	eax, DWORD PTR [edx+eax+12]
	or	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _which$7[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+1256]
	mov	DWORD PTR [edx+ecx+12], eax

; 1473 : 					((AircraftClass*)platform)->mFaults->SetFault(FaultClass::gear_fault,
; 1474 : 								FaultClass::ldgr, FaultClass::fail, TRUE);

	push	1
	push	2
	push	1073741824				; 40000000H
	push	15					; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	ecx, DWORD PTR [ecx+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault

; 1475 : 					// gear breaks sound
; 1476 : 					float pitch = max(0.1F, min(vt/100.0F, 1.0F));

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	xmm1, DWORD PTR __real@3f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN149@CalculateV
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR tv1381[ebp], xmm0
	jmp	SHORT $LN150@CalculateV
$LN149@CalculateV:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv1381[ebp], xmm0
$LN150@CalculateV:
	movss	xmm0, DWORD PTR __real@3dcccccd
	comiss	xmm0, DWORD PTR tv1381[ebp]
	jbe	SHORT $LN153@CalculateV
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR tv1391[ebp], xmm0
	jmp	SHORT $LN154@CalculateV
$LN153@CalculateV:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	xmm1, DWORD PTR __real@3f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN151@CalculateV
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR tv1390[ebp], xmm0
	jmp	SHORT $LN152@CalculateV
$LN151@CalculateV:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv1390[ebp], xmm0
$LN152@CalculateV:
	movss	xmm0, DWORD PTR tv1390[ebp]
	movss	DWORD PTR tv1391[ebp], xmm0
$LN154@CalculateV:
	movss	xmm0, DWORD PTR tv1391[ebp]
	movss	DWORD PTR _pitch$2[ebp], xmm0

; 1477 : 					volume = max(0.0F, min(22500.0F - vt*vt, 4000000.0F));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	mulss	xmm0, DWORD PTR [ecx+1120]
	movss	xmm1, DWORD PTR __real@46afc800
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@4a742400
	comiss	xmm0, xmm1
	jbe	SHORT $LN155@CalculateV
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	mulss	xmm0, DWORD PTR [eax+1120]
	movss	xmm1, DWORD PTR __real@46afc800
	subss	xmm1, xmm0
	movss	DWORD PTR tv1403[ebp], xmm1
	jmp	SHORT $LN156@CalculateV
$LN155@CalculateV:
	movss	xmm0, DWORD PTR __real@4a742400
	movss	DWORD PTR tv1403[ebp], xmm0
$LN156@CalculateV:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv1403[ebp]
	jbe	SHORT $LN159@CalculateV
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv1417[ebp], xmm0
	jmp	SHORT $LN160@CalculateV
$LN159@CalculateV:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	mulss	xmm0, DWORD PTR [edx+1120]
	movss	xmm1, DWORD PTR __real@46afc800
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@4a742400
	comiss	xmm0, xmm1
	jbe	SHORT $LN157@CalculateV
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	mulss	xmm0, DWORD PTR [ecx+1120]
	movss	xmm1, DWORD PTR __real@46afc800
	subss	xmm1, xmm0
	movss	DWORD PTR tv1416[ebp], xmm1
	jmp	SHORT $LN158@CalculateV
$LN157@CalculateV:
	movss	xmm0, DWORD PTR __real@4a742400
	movss	DWORD PTR tv1416[ebp], xmm0
$LN158@CalculateV:
	movss	xmm0, DWORD PTR tv1416[ebp]
	movss	DWORD PTR tv1417[ebp], xmm0
$LN160@CalculateV:
	movss	xmm0, DWORD PTR tv1417[ebp]
	movss	DWORD PTR _volume$[ebp], xmm0

; 1478 : 					platform->SoundPos.Sfx( SFX_GRND_RUMBLE, 0, pitch, volume, x + 5.0F, y, z);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1116]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1112]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1108]
	addss	xmm0, DWORD PTR __real@40a00000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _volume$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pitch$2[ebp]
	movss	DWORD PTR [esp], xmm0
	push	0
	push	169					; 000000a9H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMMMMM@Z		; F4SoundPos::Sfx

; 1479 : 					// COBRA - RED - Pit Vibrations
; 1480 : 					float SquareV=vt * 0.0003f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	mulss	xmm0, DWORD PTR __real@399d4952
	movss	DWORD PTR _SquareV$9[ebp], xmm0

; 1481 : 					platform->SetStaticTurbulence(SquareV, SquareV, SquareV);

	push	ecx
	movss	xmm0, DWORD PTR _SquareV$9[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _SquareV$9[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _SquareV$9[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?SetStaticTurbulence@AircraftClass@@QAEXMMM@Z ; AircraftClass::SetStaticTurbulence

; 1482 : 					if (PRANDFloatPos()>=0.9f)

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv2385[ebp]
	movss	xmm0, DWORD PTR tv2385[ebp]
	comiss	xmm0, DWORD PTR __real@3f666666
	jb	SHORT $LN1@CalculateV

; 1483 : 					{
; 1484 : 						platform->SetPulseTurbulence( 0.0f, 0.0f, PRANDFloatPos() * SquareV * 2.0f, 1.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv2389[ebp]
	movss	xmm0, DWORD PTR tv2389[ebp]
	mulss	xmm0, DWORD PTR _SquareV$9[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?SetPulseTurbulence@AircraftClass@@QAEXMMMM@Z ; AircraftClass::SetPulseTurbulence
$LN1@CalculateV:

; 1485 : 					}
; 1486 : 				}
; 1487 : 			}
; 1488 : 		}
; 1489 : 	}
; 1490 : 	
; 1491 : 	return netAccel;

	fld	DWORD PTR _netAccel$[ebp]

; 1492 : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?CalculateVt@AirframeClass@@AAEMM@Z ENDP		; AirframeClass::CalculateVt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\eom.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ResetIntegrators@AirframeClass@@AAEXXZ PROC		; AirframeClass::ResetIntegrators
; _this$ = ecx

; 1783 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1784 : 	memset(oldp01,0,sizeof(SAVE_ARRAY));

	push	24					; 00000018H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 284				; 0000011cH
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1785 : 	memset(oldp02,0,sizeof(SAVE_ARRAY));

	push	24					; 00000018H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 308				; 00000134H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1786 : 	memset(oldp03,0,sizeof(SAVE_ARRAY));

	push	24					; 00000018H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 332				; 0000014cH
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 1787 : 	memset(oldp04,0,sizeof(SAVE_ARRAY));

	push	24					; 00000018H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 356				; 00000164H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1788 : 	memset(oldp05,0,sizeof(SAVE_ARRAY));

	push	24					; 00000018H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 380				; 0000017cH
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1789 : 	memset(oldr01,0,sizeof(SAVE_ARRAY));

	push	24					; 00000018H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 404				; 00000194H
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 1790 : 	memset(oldy01,0,sizeof(SAVE_ARRAY));

	push	24					; 00000018H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 428				; 000001acH
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1791 : 	//memset(oldy02,0,sizeof(SAVE_ARRAY));
; 1792 : 	memset(oldy03,0,sizeof(SAVE_ARRAY));

	push	24					; 00000018H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 452				; 000001c4H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1793 : 	//memset(oldy04,0,sizeof(SAVE_ARRAY));
; 1794 : 	memset(olda01,0,sizeof(SAVE_ARRAY));

	push	24					; 00000018H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 476				; 000001dcH
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 1795 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ResetIntegrators@AirframeClass@@AAEXXZ ENDP		; AirframeClass::ResetIntegrators
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\eom.cpp
_TEXT	SEGMENT
_trigWind$ = -68					; size = 8
tv696 = -60						; size = 4
tv558 = -56						; size = 4
tv550 = -52						; size = 4
tv542 = -48						; size = 4
tv518 = -44						; size = 4
_xwind$ = -40						; size = 4
_feedbackData$ = -36					; size = 4
tv439 = -32						; size = 4
_wind$ = -28						; size = 4
_windfraction$ = -24					; size = 4
_netAccel$ = -20					; size = 4
_relMu$1 = -16						; size = 4
_mag$ = -12						; size = 4
_gndGmma$2 = -8						; size = 4
_this$ = -4						; size = 4
_dt$ = 8						; size = 4
?EquationsOfMotion@AirframeClass@@AAEXM@Z PROC		; AirframeClass::EquationsOfMotion
; _this$ = ecx

; 56   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 57   : 	float xwind, wind, windfraction;
; 58   : 	float netAccel, mag;
; 59   : 	float feedbackData;
; 60   : 	mlTrig trigWind;
; 61   : 	
; 62   : 
; 63   : 	if (IsSet(InAir)) {

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN19@EquationsO

; 64   : 		groundAnchorX	= x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1108]
	mov	DWORD PTR [eax+112], edx

; 65   : 		groundAnchorY	= y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1112]
	mov	DWORD PTR [eax+116], edx

; 66   : 		groundDeltaX	= 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+120], xmm0

; 67   : 		groundDeltaY	= 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+124], xmm0

; 68   : 	}
; 69   : 	else

	jmp	SHORT $LN18@EquationsO
$LN19@EquationsO:

; 70   : 		groundType = OTWDriver.GetGroundType ( x, y );

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1112]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1108]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundType@OTWDriverClass@@QAEHMM@Z	; OTWDriverClass::GetGroundType
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1260], eax
$LN18@EquationsO:

; 71   : 
; 72   : 	/*--------------------*/
; 73   : 	/* Update Orientation */
; 74   : 	/*--------------------*/
; 75   : 	//if(vt)
; 76   : 	//{
; 77   : 		CalcBodyRates(dt);

	push	ecx
	movss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcBodyRates@AirframeClass@@AAEXM@Z	; AirframeClass::CalcBodyRates

; 78   : 		CalcBodyOrientation(dt);

	push	ecx
	movss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcBodyOrientation@AirframeClass@@QAEXM@Z ; AirframeClass::CalcBodyOrientation

; 79   : 	//}
; 80   : 	Trigenometry();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Trigenometry@AirframeClass@@AAEXXZ	; AirframeClass::Trigenometry

; 81   : 	/*-------------------*/
; 82   : 	/* velocity equation */
; 83   : 	/*-------------------*/
; 84   : 	xwind = xwaero + xwprop;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+748]
	addss	xmm0, DWORD PTR [eax+784]
	movss	DWORD PTR _xwind$[ebp], xmm0

; 85   : 	
; 86   : 	vtDot = xwind - GRAVITY*platform->platformAngles.singam;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR __real@4200b53f
	mulss	xmm0, DWORD PTR [edx+364]
	movss	xmm1, DWORD PTR _xwind$[ebp]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1208], xmm1

; 87   : 	
; 88   : 	netAccel = CalculateVt(dt);

	push	ecx
	movss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateVt@AirframeClass@@AAEMM@Z	; AirframeClass::CalculateVt
	fstp	DWORD PTR _netAccel$[ebp]

; 89   : 	
; 90   : 	/*-------------------*/
; 91   : 	/* earth coordinates */
; 92   : 	/*-------------------*/
; 93   : 	
; 94   : 	if(stallMode != Crashing && stallMode < Spinning)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1248], 1
	je	$LN17@EquationsO
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+1248], 5
	jge	$LN17@EquationsO

; 95   : 	{
; 96   : 		mlSinCos(&trigWind, ((WeatherClass*)realWeather)->WindHeadingAt(&gndNormal));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1288				; 00000508H
	push	eax
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?WindHeadingAt@WeatherClass@@QAEMPBUTpoint@@@Z ; WeatherClass::WindHeadingAt
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _trigWind$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 97   : 		windfraction = 1.0f;//me123max(0.0F, min(nzcgs, 1.0F));

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _windfraction$[ebp], xmm0

; 98   : 		if (platform->IsSetFlag(ON_GROUND))windfraction = 0.0f;

	push	128					; 00000080H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN16@EquationsO
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _windfraction$[ebp], xmm0
$LN16@EquationsO:

; 99   : 
; 100  : 		wind =  ((WeatherClass*)realWeather)->WindSpeedInFeetPerSecond(&gndNormal) * windfraction;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1288				; 00000508H
	push	eax
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?WindSpeedInFeetPerSecond@WeatherClass@@QAEMPBUTpoint@@@Z ; WeatherClass::WindSpeedInFeetPerSecond
	fstp	DWORD PTR tv518[ebp]
	movss	xmm0, DWORD PTR tv518[ebp]
	mulss	xmm0, DWORD PTR _windfraction$[ebp]
	movss	DWORD PTR _wind$[ebp], xmm0

; 101  : 		xdot =  gSpeedyGonzales * vt*platform->platformAngles.cosgam * 
; 102  : 			platform->platformAngles.cossig + trigWind.cos * wind;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?gSpeedyGonzales@@3MA
	mulss	xmm0, DWORD PTR [ecx+1120]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mulss	xmm0, DWORD PTR [eax+368]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mulss	xmm0, DWORD PTR [edx+376]
	movss	xmm1, DWORD PTR _trigWind$[ebp+4]
	mulss	xmm1, DWORD PTR _wind$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1196], xmm0

; 103  : 		ydot =  gSpeedyGonzales * vt*platform->platformAngles.cosgam *
; 104  : 			platform->platformAngles.sinsig + trigWind.sin * wind;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?gSpeedyGonzales@@3MA
	mulss	xmm0, DWORD PTR [ecx+1120]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mulss	xmm0, DWORD PTR [eax+368]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mulss	xmm0, DWORD PTR [edx+372]
	movss	xmm1, DWORD PTR _trigWind$[ebp]
	mulss	xmm1, DWORD PTR _wind$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1200], xmm0
$LN17@EquationsO:

; 105  : 	}
; 106  : 	zdot = -gSpeedyGonzales * vt*platform->platformAngles.singam;

	movss	xmm0, DWORD PTR ?gSpeedyGonzales@@3MA
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+1120]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mulss	xmm0, DWORD PTR [eax+364]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1204], xmm0

; 107  : 	
; 108  : 	/*-----------------*/
; 109  : 	/* Update Position */
; 110  : 	/*-----------------*/
; 111  : 	ShiAssert(!_isnan(xdot));
; 112  : 	ShiAssert(!_isnan(ydot));
; 113  : 	ShiAssert(!_isnan(zdot));
; 114  : 
; 115  :    if (!IsSet(InAir)){

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN15@EquationsO

; 116  : 		// JB carrier start
; 117  :  		if (IsSet(AirframeClass::OnObject) && platform->attachedEntity){

	push	1073741824				; 40000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN14@EquationsO
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	cmp	DWORD PTR [eax+1828], 0
	je	$LN14@EquationsO

; 118  : 			xdot += platform->attachedEntity->XDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	ecx, DWORD PTR [edx+1828]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv542[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv542[ebp]
	addss	xmm0, DWORD PTR [eax+1196]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1196], xmm0

; 119  : 			ydot += platform->attachedEntity->YDelta();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+1828]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv550[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv550[ebp]
	addss	xmm0, DWORD PTR [ecx+1200]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1200], xmm0

; 120  : 			zdot += platform->attachedEntity->ZDelta();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	ecx, DWORD PTR [ecx+1828]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv558[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv558[ebp]
	addss	xmm0, DWORD PTR [edx+1204]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1204], xmm0
$LN14@EquationsO:

; 121  : 		}
; 122  : 		// JB carrier end
; 123  : 
; 124  : 		// Accumulate our delta position relative to our start point on the ground
; 125  : 		groundDeltaX += xdot * dt;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1196]
	mulss	xmm0, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+120]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+120], xmm0

; 126  : 		groundDeltaY += ydot * dt;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1200]
	mulss	xmm0, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+124]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+124], xmm0

; 127  : 
; 128  : 		// Compute the world space position using our offset and anchor point
; 129  : 		x = groundAnchorX + groundDeltaX;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+112]
	addss	xmm0, DWORD PTR [edx+120]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1108], xmm0

; 130  : 		y = groundAnchorY + groundDeltaY;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+116]
	addss	xmm0, DWORD PTR [edx+124]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1112], xmm0

; 131  : 		z += zdot * dt;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1204]
	mulss	xmm0, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+1116]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1116], xmm0

; 132  : 	}
; 133  : 	else {

	jmp	SHORT $LN13@EquationsO
$LN15@EquationsO:

; 134  : 		x += xdot * dt;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1196]
	mulss	xmm0, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+1108]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1108], xmm0

; 135  : 		y += ydot * dt;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1200]
	mulss	xmm0, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+1112]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1112], xmm0

; 136  : 		z += zdot * dt;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1204]
	mulss	xmm0, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+1116]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1116], xmm0
$LN13@EquationsO:

; 137  : 	}
; 138  : 	ShiAssert(!_isnan(x));
; 139  : 	ShiAssert(!_isnan(y));
; 140  : 	ShiAssert(!_isnan(z));
; 141  : 	
; 142  : 	groundZ = OTWDriver.GetGroundLevel(x, y, &gndNormal);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1288				; 00000508H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1112]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1108]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+1272]

; 143  : 	mag = (float)sqrt(gndNormal.x*gndNormal.x + gndNormal.y*gndNormal.y + gndNormal.z*gndNormal.z);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1288]
	mulss	xmm0, DWORD PTR [eax+1288]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1292]
	mulss	xmm1, DWORD PTR [edx+1292]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+1296]
	mulss	xmm1, DWORD PTR [ecx+1296]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _mag$[ebp]

; 144  : 	gndNormal.x /= mag;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1288]
	divss	xmm0, DWORD PTR _mag$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1288], xmm0

; 145  : 	gndNormal.y /= mag;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1292]
	divss	xmm0, DWORD PTR _mag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1292], xmm0

; 146  : 	gndNormal.z /= mag;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1296]
	divss	xmm0, DWORD PTR _mag$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1296], xmm0

; 147  : 	
; 148  : 	vRot = (float)sqrt(weight / (1.75f * area * rho));

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3fe00000
	mulss	xmm0, DWORD PTR [edx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+1128]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+44]
	divss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+1148]

; 149  : 	
; 150  : 	/*----------------------*/
; 151  : 	/* set flight status
; 152  : 	/*----------------------*/
; 153  : 	if (!IsSet(InAir)){

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN12@EquationsO

; 154  : 		float gndGmma, relMu;
; 155  : 		
; 156  : 		CalculateGroundPlane(&gndGmma, &relMu);

	lea	eax, DWORD PTR _relMu$1[ebp]
	push	eax
	lea	ecx, DWORD PTR _gndGmma$2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateGroundPlane@AirframeClass@@ABEXPAM0@Z ; AirframeClass::CalculateGroundPlane

; 157  : 		if (qsom*cnalpha < 0.5F){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+648]
	mulss	xmm0, DWORD PTR [eax+140]
	movss	xmm1, DWORD PTR __real@3f000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN11@EquationsO

; 158  : 			SetFlag (Planted);

	push	4096					; 00001000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag

; 159  : 			SetGroundPosition(dt, netAccel, gndGmma, relMu);

	push	ecx
	movss	xmm0, DWORD PTR _relMu$1[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _gndGmma$2[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _netAccel$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundPosition@AirframeClass@@AAEXMMMM@Z ; AirframeClass::SetGroundPosition
	jmp	$LN5@EquationsO
$LN11@EquationsO:

; 160  : 		}
; 161  : 		else if (qsom*cnalpha > 0.55F){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+648]
	mulss	xmm0, DWORD PTR [edx+140]
	comiss	xmm0, DWORD PTR __real@3f0ccccd
	jbe	$LN9@EquationsO

; 162  : 			ClearFlag (Planted);

	push	4096					; 00001000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag

; 163  : 			if (-zsaero > GRAVITY && gmma - gndGmma > 0.0F){

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+744]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, DWORD PTR __real@4200b53f
	jbe	SHORT $LN8@EquationsO
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1172]
	subss	xmm0, DWORD PTR _gndGmma$2[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN8@EquationsO

; 164  : 			    platform->mFaults->AddTakeOff(SimLibElapsedTime);

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	ecx, DWORD PTR [ecx+928]
	call	?AddTakeOff@FackClass@@QAEXK@Z		; FackClass::AddTakeOff

; 165  : 				SetFlag(InAir);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag

; 166  : 				platform->UnSetFlag(ON_GROUND);

	push	128					; 00000080H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?UnSetFlag@SimBaseClass@@QAEXH@Z	; SimBaseClass::UnSetFlag

; 167  : 				if (platform == SimDriver.GetPlayerEntity()){

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1088], eax
	jne	SHORT $LN7@EquationsO

; 168  : 					JoystickStopEffect(JoyRunwayRumble1);

	push	3
	call	?JoystickStopEffect@@YAXH@Z		; JoystickStopEffect
	add	esp, 4

; 169  : 					JoystickStopEffect(JoyRunwayRumble2);

	push	4
	call	?JoystickStopEffect@@YAXH@Z		; JoystickStopEffect
	add	esp, 4
$LN7@EquationsO:

; 170  : 				}
; 171  : 			}
; 172  : 			else {

	jmp	SHORT $LN6@EquationsO
$LN8@EquationsO:

; 173  : 				SetGroundPosition(dt, netAccel, gndGmma, relMu);

	push	ecx
	movss	xmm0, DWORD PTR _relMu$1[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _gndGmma$2[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _netAccel$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundPosition@AirframeClass@@AAEXMMMM@Z ; AirframeClass::SetGroundPosition
$LN6@EquationsO:

; 174  : 			}
; 175  : 		}
; 176  : 		else

	jmp	SHORT $LN5@EquationsO
$LN9@EquationsO:

; 177  : 			SetGroundPosition(dt, netAccel, gndGmma, relMu);

	push	ecx
	movss	xmm0, DWORD PTR _relMu$1[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _gndGmma$2[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _netAccel$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundPosition@AirframeClass@@AAEXMMMM@Z ; AirframeClass::SetGroundPosition
$LN5@EquationsO:

; 178  : 	}
; 179  : 	else {

	jmp	SHORT $LN4@EquationsO
$LN12@EquationsO:

; 180  : 		CheckGroundImpact(dt);

	push	ecx
	movss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckGroundImpact@AirframeClass@@QAEXM@Z ; AirframeClass::CheckGroundImpact
$LN4@EquationsO:

; 181  : 	}
; 182  : 	
; 183  : 	// Force feedback for ownship
; 184  : 	if (platform == SimDriver.GetPlayerEntity() && !IsSet(InAir)){

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+1088], eax
	jne	$LN1@EquationsO
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN1@EquationsO

; 185  : 		if ((vt > 1.0f) && fabs (vt-lastVt) > 15.0F){

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	$LN2@EquationsO
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	subss	xmm0, DWORD PTR _lastVt
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv696[ebp]
	movss	xmm0, DWORD PTR tv696[ebp]
	comiss	xmm0, DWORD PTR __real@41700000
	jbe	$LN2@EquationsO

; 186  : 			lastVt = vt;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1120]
	movss	DWORD PTR _lastVt, xmm0

; 187  : 			feedbackData = 400000.0F - min ((vt/(250.0F*KNOTS_TO_FTPSEC) * 400000.0F), 390000.0F);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	divss	xmm0, DWORD PTR __real@43d2fac1
	mulss	xmm0, DWORD PTR __real@48c35000
	movss	xmm1, DWORD PTR __real@48be6e00
	comiss	xmm1, xmm0
	jbe	SHORT $LN22@EquationsO
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	divss	xmm0, DWORD PTR __real@43d2fac1
	mulss	xmm0, DWORD PTR __real@48c35000
	movss	DWORD PTR tv439[ebp], xmm0
	jmp	SHORT $LN23@EquationsO
$LN22@EquationsO:
	movss	xmm0, DWORD PTR __real@48be6e00
	movss	DWORD PTR tv439[ebp], xmm0
$LN23@EquationsO:
	movss	xmm0, DWORD PTR __real@48c35000
	subss	xmm0, DWORD PTR tv439[ebp]
	movss	DWORD PTR _feedbackData$[ebp], xmm0

; 188  : 			JoystickPlayEffect(JoyRunwayRumble1, FloatToInt32(feedbackData));

	push	ecx
	movss	xmm0, DWORD PTR _feedbackData$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	push	3
	call	?JoystickPlayEffect@@YAHHH@Z		; JoystickPlayEffect
	add	esp, 8

; 189  : 			JoystickPlayEffect(JoyRunwayRumble2, FloatToInt32(feedbackData*1.25F));

	movss	xmm0, DWORD PTR _feedbackData$[ebp]
	mulss	xmm0, DWORD PTR __real@3fa00000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	push	4
	call	?JoystickPlayEffect@@YAHHH@Z		; JoystickPlayEffect
	add	esp, 8

; 190  : 		}
; 191  : 		else {

	jmp	SHORT $LN1@EquationsO
$LN2@EquationsO:

; 192  : 			JoystickStopEffect(JoyRunwayRumble1);

	push	3
	call	?JoystickStopEffect@@YAXH@Z		; JoystickStopEffect
	add	esp, 4

; 193  : 			JoystickStopEffect(JoyRunwayRumble2);

	push	4
	call	?JoystickStopEffect@@YAXH@Z		; JoystickStopEffect
	add	esp, 4
$LN1@EquationsO:

; 194  : 		}
; 195  : 	}
; 196  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?EquationsOfMotion@AirframeClass@@AAEXM@Z ENDP		; AirframeClass::EquationsOfMotion
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\eom.cpp
_TEXT	SEGMENT
tv1973 = -452						; size = 4
tv2931 = -448						; size = 4
tv1967 = -444						; size = 4
tv2929 = -440						; size = 4
tv2821 = -436						; size = 4
tv2252 = -432						; size = 4
tv2814 = -428						; size = 4
tv2081 = -424						; size = 4
tv2807 = -420						; size = 4
_tailHt$1 = -416					; size = 4
tv2802 = -412						; size = 4
_gearHt$2 = -408					; size = 4
tv2935 = -404						; size = 4
tv2095 = -400						; size = 4
tv2776 = -396						; size = 4
tv2025 = -392						; size = 4
tv2743 = -388						; size = 4
tv2555 = -384						; size = 4
tv2685 = -380						; size = 4
tv2264 = -376						; size = 4
tv2639 = -372						; size = 4
_cosphi_lim$3 = -368					; size = 4
tv2620 = -364						; size = 4
tv2115 = -360						; size = 4
tv2608 = -356						; size = 4
tv2100 = -352						; size = 4
tv2582 = -348						; size = 4
tv2086 = -344						; size = 4
tv2933 = -340						; size = 4
tv2035 = -336						; size = 4
tv2574 = -332						; size = 4
tv2563 = -328						; size = 4
tv1952 = -324						; size = 4
tv295 = -320						; size = 4
tv728 = -316						; size = 4
tv563 = -312						; size = 4
tv972 = -308						; size = 4
tv541 = -304						; size = 4
tv144 = -300						; size = 4
tv493 = -296						; size = 4
tv843 = -292						; size = 4
tv435 = -288						; size = 4
tv1131 = -284						; size = 4
tv313 = -280						; size = 4
tv1033 = -276						; size = 4
tv1729 = -272						; size = 4
tv907 = -268						; size = 4
tv1722 = -264						; size = 4
tv768 = -260						; size = 4
tv1715 = -256						; size = 4
tv312 = -252						; size = 4
tv1714 = -248						; size = 4
tv1130 = -244						; size = 4
tv1707 = -240						; size = 4
tv1055 = -236						; size = 4
tv1682 = -232						; size = 4
_temp$4 = -228						; size = 4
tv1681 = -224						; size = 4
_temp$5 = -220						; size = 4
tv1666 = -216						; size = 4
_temp$6 = -212						; size = 4
tv1533 = -208						; size = 4
_temp$7 = -204						; size = 4
tv1402 = -200						; size = 4
tv748 = -196						; size = 4
tv1401 = -192						; size = 4
tv708 = -188						; size = 4
tv1394 = -184						; size = 4
tv1269 = -180						; size = 4
tv520 = -176						; size = 4
tv1745 = -172						; size = 4
tv470 = -168						; size = 4
tv1744 = -164						; size = 4
_OldGearExt$8 = -160					; size = 4
tv1737 = -156						; size = 4
tv1730 = -152						; size = 4
tv1121 = -148						; size = 4
_geardof$9 = -144					; size = 4
_turbFact$ = -140					; size = 4
_rdelta$ = -136						; size = 4
_length$10 = -132					; size = 4
_wingHt$11 = -128					; size = 4
_right$12 = -124					; size = 4
_zsaeroLim$13 = -120					; size = 4
_left$14 = -116						; size = 4
_body$15 = -112						; size = 4
_rateMod$ = -108					; size = 4
_halfspan$16 = -104					; size = 4
_front$17 = -100					; size = 4
_back$18 = -96						; size = 4
_cgloc$19 = -92						; size = 4
_allgear$20 = -88					; size = 4
_pdelta$ = -84						; size = 4
_temp$21 = -80						; size = 4
_radius$22 = -76					; size = 4
_alpdelta$ = -72					; size = 4
_rightMax$ = -68					; size = 4
_leftMax$ = -64						; size = 4
_GearExt$23 = -60					; size = 4
_backMax$ = -56						; size = 4
_qptchc$ = -52						; size = 4
_temp$24 = -48						; size = 4
_frontMax$ = -44					; size = 4
_tempVt$ = -40						; size = 4
_i$25 = -36						; size = 4
_this$ = -32						; size = 4
_PtWorldPos$26 = -28					; size = 12
_PtRelPos$27 = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_dt$ = 8						; size = 4
?CalcBodyRates@AirframeClass@@AAEXM@Z PROC		; AirframeClass::CalcBodyRates
; _this$ = ecx

; 199  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 452				; 000001c4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 	float qptchc = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _qptchc$[ebp], xmm0

; 201  : 	float turbFact;
; 202  : 	float tempVt, rateMod;
; 203  : 	float alpdelta = 0.0F, pdelta = 0.0F, rdelta = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _alpdelta$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pdelta$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _rdelta$[ebp], xmm0

; 204  : 	float leftMax = -PI, rightMax = PI, frontMax = -PI, backMax = PI;

	movss	xmm0, DWORD PTR __real@c0490fdb
	movss	DWORD PTR _leftMax$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@40490fdb
	movss	DWORD PTR _rightMax$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@c0490fdb
	movss	DWORD PTR _frontMax$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@40490fdb
	movss	DWORD PTR _backMax$[ebp], xmm0

; 205  : 
; 206  : 	if (fabs(vt) > 4.0F)

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1120]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1952[ebp]
	movss	xmm0, DWORD PTR tv1952[ebp]
	comiss	xmm0, DWORD PTR __real@40800000
	jbe	SHORT $LN115@CalcBodyRa

; 207  : 		tempVt = vt;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	movss	DWORD PTR _tempVt$[ebp], xmm0
	jmp	SHORT $LN112@CalcBodyRa
$LN115@CalcBodyRa:

; 208  : 	else if (vt < 0.0F)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [edx+1120]
	jbe	SHORT $LN113@CalcBodyRa

; 209  : 		tempVt = -4.0F;

	movss	xmm0, DWORD PTR __real@c0800000
	movss	DWORD PTR _tempVt$[ebp], xmm0

; 210  : 	else

	jmp	SHORT $LN112@CalcBodyRa
$LN113@CalcBodyRa:

; 211  : 		tempVt = 4.0F;

	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR _tempVt$[ebp], xmm0
$LN112@CalcBodyRa:

; 212  : 
; 213  : 	if (!IsSet(InAir))

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN31@CalcBodyRa

; 214  : 	{
; 215  : 		//check to see what's in contact with the ground and rotate aircraft appropriately
; 216  : 		float cgloc = GetAeroData(AeroDataSet::CGLoc);

	push	46					; 0000002eH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR _cgloc$19[ebp]

; 217  : 		float length = GetAeroData(AeroDataSet::Length);

	push	47					; 0000002fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR _length$10[ebp]

; 218  : 		float halfspan = GetAeroData(AeroDataSet::Span)/2.0F;

	push	48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR tv1967[ebp]
	movss	xmm0, DWORD PTR tv1967[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _halfspan$16[ebp], xmm0

; 219  : 		float radius = GetAeroData(AeroDataSet::FusRadius);

	push	49					; 00000031H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR _radius$22[ebp]

; 220  : 		float gearHt = GetAeroData(AeroDataSet::NosGearZ) - radius;

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR tv1973[ebp]
	movss	xmm0, DWORD PTR tv1973[ebp]
	subss	xmm0, DWORD PTR _radius$22[ebp]
	movss	DWORD PTR _gearHt$2[ebp], xmm0

; 221  : 		float tailHt = GetAeroData(AeroDataSet::TailHt);

	push	50					; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR _tailHt$1[ebp]

; 222  : 			
; 223  : 		int front = 0;

	mov	DWORD PTR _front$17[ebp], 0

; 224  : 		int back = 0;

	mov	DWORD PTR _back$18[ebp], 0

; 225  : 		int left = 0;

	mov	DWORD PTR _left$14[ebp], 0

; 226  : 		int right = 0;

	mov	DWORD PTR _right$12[ebp], 0

; 227  : 		int body = 0;

	mov	DWORD PTR _body$15[ebp], 0

; 228  : 		int allgear = 1;

	mov	DWORD PTR _allgear$20[ebp], 1

; 229  : 
; 230  : 		
; 231  : 		Tpoint PtWorldPos;
; 232  : 		Tpoint PtRelPos;
; 233  : 		float OldGearExt = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _OldGearExt$8[ebp], xmm0

; 234  : 		float GearExt = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _GearExt$23[ebp], xmm0

; 235  : 		
; 236  : 		float cosphi_lim = max(0.0F,platform->platformAngles.cosphi);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx+400]
	jbe	SHORT $LN118@CalcBodyRa
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv144[ebp], xmm0
	jmp	SHORT $LN119@CalcBodyRa
$LN118@CalcBodyRa:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [eax+400]
	movss	DWORD PTR tv144[ebp], xmm0
$LN119@CalcBodyRa:
	movss	xmm0, DWORD PTR tv144[ebp]
	movss	DWORD PTR _cosphi_lim$3[ebp], xmm0

; 237  : 
; 238  : 		if(platform->drawPointer)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	cmp	DWORD PTR [edx+332], 0
	je	$LN110@CalcBodyRa

; 239  : 		{
; 240  : 			PtRelPos.x = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PtRelPos$27[ebp], xmm0

; 241  : 			PtRelPos.y = radius*platform->platformAngles.sinphi;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR _radius$22[ebp]
	mulss	xmm0, DWORD PTR [ecx+396]
	movss	DWORD PTR _PtRelPos$27[ebp+4], xmm0

; 242  : 			PtRelPos.z = radius*platform->platformAngles.cosphi;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR _radius$22[ebp]
	mulss	xmm0, DWORD PTR [eax+400]
	movss	DWORD PTR _PtRelPos$27[ebp+8], xmm0

; 243  : 
; 244  : 			MatrixMult( &((DrawableBSP*)platform->drawPointer)->orientation, &PtRelPos, &PtWorldPos );

	lea	ecx, DWORD PTR _PtWorldPos$26[ebp]
	push	ecx
	lea	edx, DWORD PTR _PtRelPos$27[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR [ecx+332]
	add	edx, 48					; 00000030H
	push	edx
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 245  : 
; 246  : 			if(z + PtWorldPos.z >= groundZ)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1116]
	addss	xmm0, DWORD PTR _PtWorldPos$26[ebp+8]
	mov	ecx, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [ecx+1272]
	jb	SHORT $LN109@CalcBodyRa

; 247  : 				body = 1;

	mov	DWORD PTR _body$15[ebp], 1
$LN109@CalcBodyRa:

; 248  : 		}

	jmp	SHORT $LN107@CalcBodyRa
$LN110@CalcBodyRa:

; 249  : 		else if(z + radius >= groundZ)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1116]
	addss	xmm0, DWORD PTR _radius$22[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [eax+1272]
	jb	SHORT $LN107@CalcBodyRa

; 250  : 			body = 1;

	mov	DWORD PTR _body$15[ebp], 1
$LN107@CalcBodyRa:

; 251  : 
; 252  : 		if(NumGear() > 1 && platform->drawPointer)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?NumGear@AirframeClass@@QBEHXZ		; AirframeClass::NumGear
	cmp	eax, 1
	jle	$LN106@CalcBodyRa
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	cmp	DWORD PTR [edx+332], 0
	je	$LN106@CalcBodyRa

; 253  : 		{
; 254  : 			for(int i = 0; i < NumGear(); i++)

	mov	DWORD PTR _i$25[ebp], 0
	jmp	SHORT $LN105@CalcBodyRa
$LN104@CalcBodyRa:
	mov	eax, DWORD PTR _i$25[ebp]
	add	eax, 1
	mov	DWORD PTR _i$25[ebp], eax
$LN105@CalcBodyRa:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NumGear@AirframeClass@@QBEHXZ		; AirframeClass::NumGear
	cmp	DWORD PTR _i$25[ebp], eax
	jge	$LN103@CalcBodyRa

; 255  : 			{
; 256  : 				// MLR 2/22/2004 - stop using the BSP for eom stuff!
; 257  : 				if (platform->IsComplex()){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?IsComplex@AircraftClass@@QAEHXZ	; AircraftClass::IsComplex
	test	eax, eax
	je	SHORT $LN102@CalcBodyRa

; 258  : 					GearExt = gearExtension[i]; 

	mov	edx, DWORD PTR _i$25[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4+1820]
	movss	DWORD PTR _GearExt$23[ebp], xmm0

; 259  : 				}
; 260  : 				//GearExt = platform->GetDOFValue(COMP_NOS_GEAR_COMP + i);
; 261  : 				else {

	jmp	SHORT $LN101@CalcBodyRa
$LN102@CalcBodyRa:

; 262  : 					GearExt = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _GearExt$23[ebp], xmm0
$LN101@CalcBodyRa:

; 263  : 				}
; 264  : 
; 265  : 				OldGearExt = GearExt;

	movss	xmm0, DWORD PTR _GearExt$23[ebp]
	movss	DWORD PTR _OldGearExt$8[ebp], xmm0

; 266  : 				if(!(gear[i].flags & GearData::GearBroken))

	mov	ecx, DWORD PTR _i$25[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1256]
	mov	ecx, DWORD PTR [eax+ecx+12]
	and	ecx, 2
	jne	$LN75@CalcBodyRa

; 267  : 				{					
; 268  : 					gear[i].vel = gear[i].vel*0.3F - GearExt*0.2F/dt;

	mov	edx, DWORD PTR _i$25[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1256]
	movss	xmm0, DWORD PTR [ecx+edx+4]
	mulss	xmm0, DWORD PTR __real@3e99999a
	movss	xmm1, DWORD PTR _GearExt$23[ebp]
	mulss	xmm1, DWORD PTR __real@3e4ccccd
	divss	xmm1, DWORD PTR _dt$[ebp]
	subss	xmm0, xmm1
	mov	edx, DWORD PTR _i$25[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1256]
	movss	DWORD PTR [ecx+edx+4], xmm0

; 269  : 					if(fabs(gear[i].vel) < 0.005F)

	mov	edx, DWORD PTR _i$25[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1256]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+edx+4]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2025[ebp]
	movss	xmm0, DWORD PTR __real@3ba3d70a
	comiss	xmm0, DWORD PTR tv2025[ebp]
	jbe	SHORT $LN99@CalcBodyRa

; 270  : 						gear[i].vel = 0.0F;

	mov	edx, DWORD PTR _i$25[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1256]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx+4], xmm0
$LN99@CalcBodyRa:

; 271  : 					//else
; 272  : 					//	gear[i].vel = min(5.0F, max(-5.0F, gear[i].vel));
; 273  : 					if(fabs(GearExt) < 0.001F && gear[i].vel == 0.0F){

	push	ecx
	movss	xmm0, DWORD PTR _GearExt$23[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2035[ebp]
	movss	xmm0, DWORD PTR __real@3a83126f
	comiss	xmm0, DWORD PTR tv2035[ebp]
	jbe	SHORT $LN98@CalcBodyRa
	mov	edx, DWORD PTR _i$25[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1256]
	movss	xmm0, DWORD PTR [ecx+edx+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN98@CalcBodyRa

; 274  : 						GearExt = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _GearExt$23[ebp], xmm0

; 275  : 					}
; 276  : 					else {

	jmp	$LN97@CalcBodyRa
$LN98@CalcBodyRa:

; 277  : 						GearExt = min(0.5F,max(-0.5F, GearExt + gear[i].vel*dt));

	mov	edx, DWORD PTR _i$25[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1256]
	movss	xmm0, DWORD PTR [ecx+edx+4]
	mulss	xmm0, DWORD PTR _dt$[ebp]
	addss	xmm0, DWORD PTR _GearExt$23[ebp]
	movss	xmm1, DWORD PTR __real@bf000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN120@CalcBodyRa
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR tv295[ebp], xmm0
	jmp	SHORT $LN121@CalcBodyRa
$LN120@CalcBodyRa:
	mov	edx, DWORD PTR _i$25[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1256]
	movss	xmm0, DWORD PTR [ecx+edx+4]
	mulss	xmm0, DWORD PTR _dt$[ebp]
	addss	xmm0, DWORD PTR _GearExt$23[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
$LN121@CalcBodyRa:
	movss	xmm0, DWORD PTR tv295[ebp]
	comiss	xmm0, DWORD PTR __real@3f000000
	jbe	SHORT $LN124@CalcBodyRa
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv313[ebp], xmm0
	jmp	SHORT $LN125@CalcBodyRa
$LN124@CalcBodyRa:
	mov	edx, DWORD PTR _i$25[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1256]
	movss	xmm0, DWORD PTR [ecx+edx+4]
	mulss	xmm0, DWORD PTR _dt$[ebp]
	addss	xmm0, DWORD PTR _GearExt$23[ebp]
	movss	xmm1, DWORD PTR __real@bf000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN122@CalcBodyRa
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR tv312[ebp], xmm0
	jmp	SHORT $LN123@CalcBodyRa
$LN122@CalcBodyRa:
	mov	edx, DWORD PTR _i$25[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1256]
	movss	xmm0, DWORD PTR [ecx+edx+4]
	mulss	xmm0, DWORD PTR _dt$[ebp]
	addss	xmm0, DWORD PTR _GearExt$23[ebp]
	movss	DWORD PTR tv312[ebp], xmm0
$LN123@CalcBodyRa:
	movss	xmm0, DWORD PTR tv312[ebp]
	movss	DWORD PTR tv313[ebp], xmm0
$LN125@CalcBodyRa:
	movss	xmm0, DWORD PTR tv313[ebp]
	movss	DWORD PTR _GearExt$23[ebp], xmm0
$LN97@CalcBodyRa:

; 278  : 					}
; 279  : 					
; 280  : 					float geardof;
; 281  : 					if(platform->IsComplex()) 

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?IsComplex@AircraftClass@@QAEHXZ	; AircraftClass::IsComplex
	test	eax, eax
	je	SHORT $LN96@CalcBodyRa

; 282  : 					{
; 283  : 						// MLR 2/22/2004 - stop using the BSP for eom stuff!
; 284  : 						gearExtension[i] = GearExt;

	mov	eax, DWORD PTR _i$25[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _GearExt$23[ebp]
	movss	DWORD PTR [ecx+eax*4+1820], xmm0

; 285  : 					    //platform->SetDOF(COMP_NOS_GEAR_COMP + i, GearExt);
; 286  : 
; 287  : 						 // MLR 2/22/2004 - Use DOF id array since IDs are not in order
; 288  : 						geardof = platform->GetDOFValue(ComplexGearDOF[i] /*COMP_NOS_GEAR + i*/);

	mov	edx, DWORD PTR _i$25[ebp]
	mov	eax, DWORD PTR ?ComplexGearDOF@@3PAHA[edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?GetDOFValue@SimMoverClass@@QAEMH@Z	; SimMoverClass::GetDOFValue
	fstp	DWORD PTR _geardof$9[ebp]

; 289  : 					}
; 290  : 					else {

	jmp	SHORT $LN95@CalcBodyRa
$LN96@CalcBodyRa:

; 291  : 					    geardof = GetAeroData(AeroDataSet::NosGearRng + i*4)*DTR;

	mov	edx, DWORD PTR _i$25[ebp]
	lea	eax, DWORD PTR [edx*4+17]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR tv2081[ebp]
	movss	xmm0, DWORD PTR tv2081[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR _geardof$9[ebp], xmm0
$LN95@CalcBodyRa:

; 292  : 					}
; 293  : 
; 294  : 					PtRelPos.x = cgloc - GetAeroData(AeroDataSet::NosGearX + i*4);

	mov	ecx, DWORD PTR _i$25[ebp]
	lea	edx, DWORD PTR [ecx*4+14]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR tv2086[ebp]
	movss	xmm0, DWORD PTR _cgloc$19[ebp]
	subss	xmm0, DWORD PTR tv2086[ebp]
	movss	DWORD PTR _PtRelPos$27[ebp], xmm0

; 295  : 					PtRelPos.y = GetAeroData(AeroDataSet::NosGearY + i*4);

	mov	eax, DWORD PTR _i$25[ebp]
	lea	ecx, DWORD PTR [eax*4+15]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR _PtRelPos$27[ebp+4]

; 296  : 					PtRelPos.z = (GetAeroData(AeroDataSet::NosGearZ + i*4) + GearExt - radius)*geardof/(GetAeroData(AeroDataSet::NosGearRng + i*4)*DTR) + radius;

	mov	edx, DWORD PTR _i$25[ebp]
	lea	eax, DWORD PTR [edx*4+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR tv2095[ebp]
	movss	xmm0, DWORD PTR tv2095[ebp]
	addss	xmm0, DWORD PTR _GearExt$23[ebp]
	subss	xmm0, DWORD PTR _radius$22[ebp]
	mulss	xmm0, DWORD PTR _geardof$9[ebp]
	mov	ecx, DWORD PTR _i$25[ebp]
	lea	edx, DWORD PTR [ecx*4+17]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv2929[ebp], xmm0
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR tv2100[ebp]
	movss	xmm0, DWORD PTR tv2100[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	xmm1, DWORD PTR tv2929[ebp]
	divss	xmm1, xmm0
	addss	xmm1, DWORD PTR _radius$22[ebp]
	movss	DWORD PTR _PtRelPos$27[ebp+8], xmm1

; 297  : 
; 298  : 					MatrixMult( &((DrawableBSP*)platform->drawPointer)->orientation, &PtRelPos, &PtWorldPos );

	lea	eax, DWORD PTR _PtWorldPos$26[ebp]
	push	eax
	lea	ecx, DWORD PTR _PtRelPos$27[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+332]
	add	ecx, 48					; 00000030H
	push	ecx
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 299  : 
; 300  : 					if(
; 301  : 						IsSet(OnObject) || // JB carrier
; 302  : 						(z + PtWorldPos.z >= groundZ - GROUND_TOLERANCE && GearExt - OldGearExt > -dt ))

	push	1073741824				; 40000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN93@CalcBodyRa
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1116]
	addss	xmm0, DWORD PTR _PtWorldPos$26[ebp+8]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+1272]
	subss	xmm1, DWORD PTR ?GROUND_TOLERANCE@@3MA
	comiss	xmm0, xmm1
	jb	$LN94@CalcBodyRa
	movss	xmm0, DWORD PTR _GearExt$23[ebp]
	subss	xmm0, DWORD PTR _OldGearExt$8[ebp]
	movss	xmm1, DWORD PTR _dt$[ebp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, xmm1
	jbe	$LN94@CalcBodyRa
$LN93@CalcBodyRa:

; 303  : 					{
; 304  : 						if(geardof/(GetAeroData(AeroDataSet::NosGearRng + i*4)*DTR) < 0.85F)

	mov	ecx, DWORD PTR _i$25[ebp]
	lea	edx, DWORD PTR [ecx*4+17]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR tv2115[ebp]
	movss	xmm0, DWORD PTR tv2115[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	xmm1, DWORD PTR _geardof$9[ebp]
	divss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3f59999a
	comiss	xmm0, xmm1
	jbe	SHORT $LN92@CalcBodyRa

; 305  : 							allgear = 0;

	mov	DWORD PTR _allgear$20[ebp], 0
$LN92@CalcBodyRa:

; 306  : 
; 307  : 						if(PtRelPos.x > 0.0F)

	movss	xmm0, DWORD PTR _PtRelPos$27[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN91@CalcBodyRa

; 308  : 							front = 1;

	mov	DWORD PTR _front$17[ebp], 1
	jmp	SHORT $LN89@CalcBodyRa
$LN91@CalcBodyRa:

; 309  : 						else if(PtRelPos.x < 0.0F)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _PtRelPos$27[ebp]
	jbe	SHORT $LN89@CalcBodyRa

; 310  : 							back = 1;

	mov	DWORD PTR _back$18[ebp], 1
$LN89@CalcBodyRa:

; 311  : 
; 312  : 						if(PtRelPos.y > 0.0F)

	movss	xmm0, DWORD PTR _PtRelPos$27[ebp+4]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN88@CalcBodyRa

; 313  : 						{
; 314  : 							right = 1;

	mov	DWORD PTR _right$12[ebp], 1
	jmp	SHORT $LN86@CalcBodyRa
$LN88@CalcBodyRa:

; 315  : 						}
; 316  : 						else if(PtRelPos.y < 0.0F)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _PtRelPos$27[ebp+4]
	jbe	SHORT $LN86@CalcBodyRa

; 317  : 						{
; 318  : 							left = 1;	

	mov	DWORD PTR _left$14[ebp], 1
$LN86@CalcBodyRa:

; 319  : 						}
; 320  : 					}
; 321  : 					else

	jmp	$LN75@CalcBodyRa
$LN94@CalcBodyRa:

; 322  : 					{
; 323  : 						allgear = 0;

	mov	DWORD PTR _allgear$20[ebp], 0

; 324  : 						float temp;
; 325  : 						if(PtRelPos.x*platform->platformAngles.cosphi > 0.0F){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR _PtRelPos$27[ebp]
	mulss	xmm0, DWORD PTR [ecx+400]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN84@CalcBodyRa

; 326  : 							temp = (float)atan2(z + PtWorldPos.z - groundZ, fabs(PtRelPos.x*platform->platformAngles.costhe));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR _PtRelPos$27[ebp]
	mulss	xmm0, DWORD PTR [eax+392]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1116]
	addss	xmm0, DWORD PTR _PtWorldPos$26[ebp+8]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+1272]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _temp$24[ebp]

; 327  : 							frontMax = max(temp, frontMax);

	movss	xmm0, DWORD PTR _temp$24[ebp]
	comiss	xmm0, DWORD PTR _frontMax$[ebp]
	jbe	SHORT $LN126@CalcBodyRa
	movss	xmm0, DWORD PTR _temp$24[ebp]
	movss	DWORD PTR tv435[ebp], xmm0
	jmp	SHORT $LN127@CalcBodyRa
$LN126@CalcBodyRa:
	movss	xmm0, DWORD PTR _frontMax$[ebp]
	movss	DWORD PTR tv435[ebp], xmm0
$LN127@CalcBodyRa:
	movss	xmm0, DWORD PTR tv435[ebp]
	movss	DWORD PTR _frontMax$[ebp], xmm0
	jmp	$LN78@CalcBodyRa
$LN84@CalcBodyRa:

; 328  : 						}
; 329  : 						else if(PtRelPos.x*platform->platformAngles.cosphi < 0.0F && IsSet(Planted)){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR _PtRelPos$27[ebp]
	mulss	xmm0, DWORD PTR [ecx+400]
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	$LN82@CalcBodyRa
	push	4096					; 00001000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN82@CalcBodyRa

; 330  : 							temp = (float)atan2(groundZ - z - PtWorldPos.z, fabs(PtRelPos.x*platform->platformAngles.costhe));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR _PtRelPos$27[ebp]
	mulss	xmm0, DWORD PTR [eax+392]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1272]
	subss	xmm0, DWORD PTR [edx+1116]
	subss	xmm0, DWORD PTR _PtWorldPos$26[ebp+8]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _temp$24[ebp]

; 331  : 							backMax = min(temp, backMax);

	movss	xmm0, DWORD PTR _backMax$[ebp]
	comiss	xmm0, DWORD PTR _temp$24[ebp]
	jbe	SHORT $LN128@CalcBodyRa
	movss	xmm0, DWORD PTR _temp$24[ebp]
	movss	DWORD PTR tv470[ebp], xmm0
	jmp	SHORT $LN129@CalcBodyRa
$LN128@CalcBodyRa:
	movss	xmm0, DWORD PTR _backMax$[ebp]
	movss	DWORD PTR tv470[ebp], xmm0
$LN129@CalcBodyRa:
	movss	xmm0, DWORD PTR tv470[ebp]
	movss	DWORD PTR _backMax$[ebp], xmm0
	jmp	$LN78@CalcBodyRa
$LN82@CalcBodyRa:

; 332  : 						}
; 333  : 						else if(PtRelPos.x > 0.0F){

	movss	xmm0, DWORD PTR _PtRelPos$27[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN80@CalcBodyRa

; 334  : 							temp = (float)atan2(z + PtWorldPos.z - groundZ, fabs(PtRelPos.x*platform->platformAngles.costhe));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR _PtRelPos$27[ebp]
	mulss	xmm0, DWORD PTR [ecx+392]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1116]
	addss	xmm0, DWORD PTR _PtWorldPos$26[ebp+8]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+1272]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _temp$24[ebp]

; 335  : 							frontMax = max(temp, frontMax);

	movss	xmm0, DWORD PTR _temp$24[ebp]
	comiss	xmm0, DWORD PTR _frontMax$[ebp]
	jbe	SHORT $LN130@CalcBodyRa
	movss	xmm0, DWORD PTR _temp$24[ebp]
	movss	DWORD PTR tv493[ebp], xmm0
	jmp	SHORT $LN131@CalcBodyRa
$LN130@CalcBodyRa:
	movss	xmm0, DWORD PTR _frontMax$[ebp]
	movss	DWORD PTR tv493[ebp], xmm0
$LN131@CalcBodyRa:
	movss	xmm0, DWORD PTR tv493[ebp]
	movss	DWORD PTR _frontMax$[ebp], xmm0
	jmp	$LN78@CalcBodyRa
$LN80@CalcBodyRa:

; 336  : 						}
; 337  : 						else if(PtRelPos.x < 0.0F && IsSet(Planted)){

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _PtRelPos$27[ebp]
	jbe	$LN78@CalcBodyRa
	push	4096					; 00001000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN78@CalcBodyRa

; 338  : 							temp = (float)atan2(groundZ - z - PtWorldPos.z, fabs(PtRelPos.x*platform->platformAngles.costhe));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR _PtRelPos$27[ebp]
	mulss	xmm0, DWORD PTR [edx+392]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1272]
	subss	xmm0, DWORD PTR [ecx+1116]
	subss	xmm0, DWORD PTR _PtWorldPos$26[ebp+8]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _temp$24[ebp]

; 339  : 							backMax = min(temp, backMax);

	movss	xmm0, DWORD PTR _backMax$[ebp]
	comiss	xmm0, DWORD PTR _temp$24[ebp]
	jbe	SHORT $LN132@CalcBodyRa
	movss	xmm0, DWORD PTR _temp$24[ebp]
	movss	DWORD PTR tv520[ebp], xmm0
	jmp	SHORT $LN133@CalcBodyRa
$LN132@CalcBodyRa:
	movss	xmm0, DWORD PTR _backMax$[ebp]
	movss	DWORD PTR tv520[ebp], xmm0
$LN133@CalcBodyRa:
	movss	xmm0, DWORD PTR tv520[ebp]
	movss	DWORD PTR _backMax$[ebp], xmm0
$LN78@CalcBodyRa:

; 340  : 						}
; 341  : 
; 342  : 						if(PtRelPos.y > 0.0F){

	movss	xmm0, DWORD PTR _PtRelPos$27[ebp+4]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN77@CalcBodyRa

; 343  : 							temp = (float)atan2(groundZ - z - PtWorldPos.z, PtRelPos.y*platform->platformAngles.cosphi);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR _PtRelPos$27[ebp+4]
	mulss	xmm0, DWORD PTR [eax+400]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1272]
	subss	xmm0, DWORD PTR [edx+1116]
	subss	xmm0, DWORD PTR _PtWorldPos$26[ebp+8]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _temp$24[ebp]

; 344  : 							rightMax = min(temp, rightMax);

	movss	xmm0, DWORD PTR _rightMax$[ebp]
	comiss	xmm0, DWORD PTR _temp$24[ebp]
	jbe	SHORT $LN134@CalcBodyRa
	movss	xmm0, DWORD PTR _temp$24[ebp]
	movss	DWORD PTR tv541[ebp], xmm0
	jmp	SHORT $LN135@CalcBodyRa
$LN134@CalcBodyRa:
	movss	xmm0, DWORD PTR _rightMax$[ebp]
	movss	DWORD PTR tv541[ebp], xmm0
$LN135@CalcBodyRa:
	movss	xmm0, DWORD PTR tv541[ebp]
	movss	DWORD PTR _rightMax$[ebp], xmm0
	jmp	$LN75@CalcBodyRa
$LN77@CalcBodyRa:

; 345  : 						}
; 346  : 						else if(PtRelPos.y < 0.0F){

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _PtRelPos$27[ebp+4]
	jbe	$LN75@CalcBodyRa

; 347  : 							temp = (float)atan2(z + PtWorldPos.z - groundZ, -PtRelPos.y*platform->platformAngles.cosphi);

	movss	xmm0, DWORD PTR _PtRelPos$27[ebp+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mulss	xmm0, DWORD PTR [ecx+400]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1116]
	addss	xmm0, DWORD PTR _PtWorldPos$26[ebp+8]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+1272]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _temp$24[ebp]

; 348  : 							leftMax = max(temp, leftMax);

	movss	xmm0, DWORD PTR _temp$24[ebp]
	comiss	xmm0, DWORD PTR _leftMax$[ebp]
	jbe	SHORT $LN136@CalcBodyRa
	movss	xmm0, DWORD PTR _temp$24[ebp]
	movss	DWORD PTR tv563[ebp], xmm0
	jmp	SHORT $LN137@CalcBodyRa
$LN136@CalcBodyRa:
	movss	xmm0, DWORD PTR _leftMax$[ebp]
	movss	DWORD PTR tv563[ebp], xmm0
$LN137@CalcBodyRa:
	movss	xmm0, DWORD PTR tv563[ebp]
	movss	DWORD PTR _leftMax$[ebp], xmm0
$LN75@CalcBodyRa:

; 349  : 						}
; 350  : 					}
; 351  : 				}
; 352  : 			}

	jmp	$LN104@CalcBodyRa
$LN103@CalcBodyRa:

; 353  : 		}
; 354  : 		else if (!IsSet(GearBroken) && platform->platformAngles.costhe * (cosphi_lim * (gearHt * gearPos + radius) ) + z > groundZ - GROUND_TOLERANCE)

	jmp	$LN68@CalcBodyRa
$LN106@CalcBodyRa:
	push	2048					; 00000800H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN68@CalcBodyRa
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _gearHt$2[ebp]
	mulss	xmm0, DWORD PTR [eax+1552]
	addss	xmm0, DWORD PTR _radius$22[ebp]
	mulss	xmm0, DWORD PTR _cosphi_lim$3[ebp]
	mulss	xmm0, DWORD PTR [edx+392]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+1116]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1272]
	subss	xmm1, DWORD PTR ?GROUND_TOLERANCE@@3MA
	comiss	xmm0, xmm1
	jbe	$LN68@CalcBodyRa

; 355  : 		{
; 356  : 			if (fabs(platform->platformAngles.sinphi) > 0.001F)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+396]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2252[ebp]
	movss	xmm0, DWORD PTR tv2252[ebp]
	comiss	xmm0, DWORD PTR __real@3a83126f
	jbe	SHORT $LN72@CalcBodyRa

; 357  : 				right = 1;

	mov	DWORD PTR _right$12[ebp], 1

; 358  : 			else

	jmp	SHORT $LN71@CalcBodyRa
$LN72@CalcBodyRa:

; 359  : 				left = 1;

	mov	DWORD PTR _left$14[ebp], 1
$LN71@CalcBodyRa:

; 360  : 
; 361  : 			if (platform->platformAngles.sinthe > 0.001F)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [eax+388]
	comiss	xmm0, DWORD PTR __real@3a83126f
	jbe	SHORT $LN70@CalcBodyRa

; 362  : 				back = 1;

	mov	DWORD PTR _back$18[ebp], 1
	jmp	SHORT $LN68@CalcBodyRa
$LN70@CalcBodyRa:

; 363  : 			else if (platform->platformAngles.sinthe < -0.001F)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR __real@ba83126f
	comiss	xmm0, DWORD PTR [edx+388]
	jbe	SHORT $LN68@CalcBodyRa

; 364  : 				front = 1;

	mov	DWORD PTR _front$17[ebp], 1
$LN68@CalcBodyRa:

; 365  : 		}
; 366  : 		
; 367  : 		float wingHt = platform->platformAngles.costhe * (float)fabs(platform->platformAngles.sinphi) * halfspan;

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+1088]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	push	ecx
	movss	xmm0, DWORD PTR [edx+396]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2264[ebp]
	movss	xmm0, DWORD PTR tv2264[ebp]
	mulss	xmm0, DWORD PTR [esi+392]
	mulss	xmm0, DWORD PTR _halfspan$16[ebp]
	movss	DWORD PTR _wingHt$11[ebp], xmm0

; 368  : 		if( wingHt + z > groundZ - GROUND_TOLERANCE)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _wingHt$11[ebp]
	addss	xmm0, DWORD PTR [eax+1116]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1272]
	subss	xmm1, DWORD PTR ?GROUND_TOLERANCE@@3MA
	comiss	xmm0, xmm1
	jbe	$LN67@CalcBodyRa

; 369  : 		{
; 370  : 			allgear = 0;

	mov	DWORD PTR _allgear$20[ebp], 0

; 371  : 			//wing hit ground
; 372  : 			if(platform->platformAngles.sinphi > 0.0F)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [eax+396]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN66@CalcBodyRa

; 373  : 			{
; 374  : 				right = 1;

	mov	DWORD PTR _right$12[ebp], 1

; 375  : 				rdelta += (0.2F + IsSet(Simplified)*0.2F) * (1.0F - nzcgs)*vt*0.2F*halfspan*dt*DTR;

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	addss	xmm0, DWORD PTR __real@3e4ccccd
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR [ecx+268]
	mulss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+1120]
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	mulss	xmm0, DWORD PTR _halfspan$16[ebp]
	mulss	xmm0, DWORD PTR _dt$[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	addss	xmm0, DWORD PTR _rdelta$[ebp]
	movss	DWORD PTR _rdelta$[ebp], xmm0

; 376  : 			}
; 377  : 			else

	jmp	SHORT $LN65@CalcBodyRa
$LN66@CalcBodyRa:

; 378  : 			{
; 379  : 				left = 1;

	mov	DWORD PTR _left$14[ebp], 1

; 380  : 				rdelta -= (0.2F + IsSet(Simplified)*0.2F) * (1.0F - nzcgs)*vt*0.2F*halfspan*dt*DTR;

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	addss	xmm0, DWORD PTR __real@3e4ccccd
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR [eax+268]
	mulss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+1120]
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	mulss	xmm0, DWORD PTR _halfspan$16[ebp]
	mulss	xmm0, DWORD PTR _dt$[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	xmm1, DWORD PTR _rdelta$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _rdelta$[ebp], xmm1
$LN65@CalcBodyRa:

; 381  : 			}
; 382  : 
; 383  : 			DragBodypart();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DragBodypart@AirframeClass@@QAEXXZ	; AirframeClass::DragBodypart

; 384  : 		}		
; 385  : 		else

	jmp	$LN62@CalcBodyRa
$LN67@CalcBodyRa:

; 386  : 		{
; 387  : 			float temp;
; 388  : 			if (platform->platformAngles.sinphi > 0.0F)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [eax+396]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN63@CalcBodyRa

; 389  : 			{
; 390  : 				temp = (float)atan2(groundZ - z + wingHt, halfspan*platform->platformAngles.cosphi);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR _halfspan$16[ebp]
	mulss	xmm0, DWORD PTR [edx+400]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1272]
	subss	xmm0, DWORD PTR [ecx+1116]
	addss	xmm0, DWORD PTR _wingHt$11[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _temp$21[ebp]

; 391  : 				rightMax = min(temp, rightMax);

	movss	xmm0, DWORD PTR _rightMax$[ebp]
	comiss	xmm0, DWORD PTR _temp$21[ebp]
	jbe	SHORT $LN138@CalcBodyRa
	movss	xmm0, DWORD PTR _temp$21[ebp]
	movss	DWORD PTR tv708[ebp], xmm0
	jmp	SHORT $LN139@CalcBodyRa
$LN138@CalcBodyRa:
	movss	xmm0, DWORD PTR _rightMax$[ebp]
	movss	DWORD PTR tv708[ebp], xmm0
$LN139@CalcBodyRa:
	movss	xmm0, DWORD PTR tv708[ebp]
	movss	DWORD PTR _rightMax$[ebp], xmm0

; 392  : 				temp = (float)atan2( z + wingHt - groundZ, halfspan*platform->platformAngles.cosphi);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR _halfspan$16[ebp]
	mulss	xmm0, DWORD PTR [eax+400]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1116]
	addss	xmm0, DWORD PTR _wingHt$11[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+1272]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _temp$21[ebp]

; 393  : 				leftMax = max(temp, leftMax);

	movss	xmm0, DWORD PTR _temp$21[ebp]
	comiss	xmm0, DWORD PTR _leftMax$[ebp]
	jbe	SHORT $LN140@CalcBodyRa
	movss	xmm0, DWORD PTR _temp$21[ebp]
	movss	DWORD PTR tv728[ebp], xmm0
	jmp	SHORT $LN141@CalcBodyRa
$LN140@CalcBodyRa:
	movss	xmm0, DWORD PTR _leftMax$[ebp]
	movss	DWORD PTR tv728[ebp], xmm0
$LN141@CalcBodyRa:
	movss	xmm0, DWORD PTR tv728[ebp]
	movss	DWORD PTR _leftMax$[ebp], xmm0

; 394  : 			}
; 395  : 			else

	jmp	$LN62@CalcBodyRa
$LN63@CalcBodyRa:

; 396  : 			{
; 397  : 				temp = (float)atan2(groundZ - z - wingHt, halfspan*platform->platformAngles.cosphi);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR _halfspan$16[ebp]
	mulss	xmm0, DWORD PTR [ecx+400]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1272]
	subss	xmm0, DWORD PTR [eax+1116]
	subss	xmm0, DWORD PTR _wingHt$11[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _temp$21[ebp]

; 398  : 				rightMax = min(temp, rightMax);

	movss	xmm0, DWORD PTR _rightMax$[ebp]
	comiss	xmm0, DWORD PTR _temp$21[ebp]
	jbe	SHORT $LN142@CalcBodyRa
	movss	xmm0, DWORD PTR _temp$21[ebp]
	movss	DWORD PTR tv748[ebp], xmm0
	jmp	SHORT $LN143@CalcBodyRa
$LN142@CalcBodyRa:
	movss	xmm0, DWORD PTR _rightMax$[ebp]
	movss	DWORD PTR tv748[ebp], xmm0
$LN143@CalcBodyRa:
	movss	xmm0, DWORD PTR tv748[ebp]
	movss	DWORD PTR _rightMax$[ebp], xmm0

; 399  : 				temp = (float)atan2( z - wingHt - groundZ, halfspan*platform->platformAngles.cosphi);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR _halfspan$16[ebp]
	mulss	xmm0, DWORD PTR [edx+400]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1116]
	subss	xmm0, DWORD PTR _wingHt$11[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+1272]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _temp$21[ebp]

; 400  : 				leftMax = max(temp, leftMax);

	movss	xmm0, DWORD PTR _temp$21[ebp]
	comiss	xmm0, DWORD PTR _leftMax$[ebp]
	jbe	SHORT $LN144@CalcBodyRa
	movss	xmm0, DWORD PTR _temp$21[ebp]
	movss	DWORD PTR tv768[ebp], xmm0
	jmp	SHORT $LN145@CalcBodyRa
$LN144@CalcBodyRa:
	movss	xmm0, DWORD PTR _leftMax$[ebp]
	movss	DWORD PTR tv768[ebp], xmm0
$LN145@CalcBodyRa:
	movss	xmm0, DWORD PTR tv768[ebp]
	movss	DWORD PTR _leftMax$[ebp], xmm0
$LN62@CalcBodyRa:

; 401  : 			}
; 402  : 		}
; 403  : 		
; 404  : 		//tail might hit
; 405  : 		if(platform->drawPointer)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	cmp	DWORD PTR [eax+332], 0
	je	$LN61@CalcBodyRa

; 406  : 		{
; 407  : 			PtRelPos.x = cgloc - length;

	movss	xmm0, DWORD PTR _cgloc$19[ebp]
	subss	xmm0, DWORD PTR _length$10[ebp]
	movss	DWORD PTR _PtRelPos$27[ebp], xmm0

; 408  : 			if (platform->platformAngles.cosphi > -0.03489F)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR [edx+400]
	comiss	xmm0, DWORD PTR __real@bd0ee8d1
	jbe	SHORT $LN60@CalcBodyRa

; 409  : 			{
; 410  : 				PtRelPos.y = radius*0.5F*platform->platformAngles.sinphi;

	movss	xmm0, DWORD PTR _radius$22[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mulss	xmm0, DWORD PTR [ecx+396]
	movss	DWORD PTR _PtRelPos$27[ebp+4], xmm0

; 411  : 				PtRelPos.z = radius*0.5F*platform->platformAngles.cosphi;

	movss	xmm0, DWORD PTR _radius$22[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mulss	xmm0, DWORD PTR [eax+400]
	movss	DWORD PTR _PtRelPos$27[ebp+8], xmm0

; 412  : 			}
; 413  : 			else

	jmp	SHORT $LN59@CalcBodyRa
$LN60@CalcBodyRa:

; 414  : 			{
; 415  : 				PtRelPos.y = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PtRelPos$27[ebp+4], xmm0

; 416  : 				PtRelPos.z = tailHt;

	movss	xmm0, DWORD PTR _tailHt$1[ebp]
	movss	DWORD PTR _PtRelPos$27[ebp+8], xmm0
$LN59@CalcBodyRa:

; 417  : 			}
; 418  : 
; 419  : 			MatrixMult( &((DrawableBSP*)platform->drawPointer)->orientation, &PtRelPos, &PtWorldPos );

	lea	ecx, DWORD PTR _PtWorldPos$26[ebp]
	push	ecx
	lea	edx, DWORD PTR _PtRelPos$27[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR [ecx+332]
	add	edx, 48					; 00000030H
	push	edx
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 420  : 
; 421  : 			if(PtWorldPos.z + z > groundZ - GROUND_TOLERANCE)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _PtWorldPos$26[ebp+8]
	addss	xmm0, DWORD PTR [eax+1116]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1272]
	subss	xmm1, DWORD PTR ?GROUND_TOLERANCE@@3MA
	comiss	xmm0, xmm1
	jbe	SHORT $LN58@CalcBodyRa

; 422  : 			{
; 423  : 				allgear = 0;

	mov	DWORD PTR _allgear$20[ebp], 0

; 424  : 				back = 1;

	mov	DWORD PTR _back$18[ebp], 1

; 425  : 				DragBodypart();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DragBodypart@AirframeClass@@QAEXXZ	; AirframeClass::DragBodypart

; 426  : 			}
; 427  : 			else

	jmp	$LN57@CalcBodyRa
$LN58@CalcBodyRa:

; 428  : 			{
; 429  : 				float temp = (float)atan2(groundZ - z - PtWorldPos.z, -PtRelPos.x*platform->platformAngles.costhe);

	movss	xmm0, DWORD PTR _PtRelPos$27[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mulss	xmm0, DWORD PTR [eax+392]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1272]
	subss	xmm0, DWORD PTR [edx+1116]
	subss	xmm0, DWORD PTR _PtWorldPos$26[ebp+8]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _temp$7[ebp]

; 430  : 				backMax = min(temp, backMax);

	movss	xmm0, DWORD PTR _backMax$[ebp]
	comiss	xmm0, DWORD PTR _temp$7[ebp]
	jbe	SHORT $LN146@CalcBodyRa
	movss	xmm0, DWORD PTR _temp$7[ebp]
	movss	DWORD PTR tv843[ebp], xmm0
	jmp	SHORT $LN147@CalcBodyRa
$LN146@CalcBodyRa:
	movss	xmm0, DWORD PTR _backMax$[ebp]
	movss	DWORD PTR tv843[ebp], xmm0
$LN147@CalcBodyRa:
	movss	xmm0, DWORD PTR tv843[ebp]
	movss	DWORD PTR _backMax$[ebp], xmm0
$LN57@CalcBodyRa:

; 431  : 			}

	jmp	$LN54@CalcBodyRa
$LN61@CalcBodyRa:

; 432  : 		}
; 433  : 		else if (platform->platformAngles.sinthe*platform->platformAngles.cosphi*(length - cgloc) + z > groundZ - GROUND_TOLERANCE)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [ecx+388]
	mulss	xmm0, DWORD PTR [eax+400]
	movss	xmm1, DWORD PTR _length$10[ebp]
	subss	xmm1, DWORD PTR _cgloc$19[ebp]
	mulss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+1116]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1272]
	subss	xmm1, DWORD PTR ?GROUND_TOLERANCE@@3MA
	comiss	xmm0, xmm1
	jbe	SHORT $LN55@CalcBodyRa

; 434  : 		{
; 435  : 			allgear = 0;

	mov	DWORD PTR _allgear$20[ebp], 0

; 436  : 			back = 1;

	mov	DWORD PTR _back$18[ebp], 1

; 437  : 			DragBodypart();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DragBodypart@AirframeClass@@QAEXXZ	; AirframeClass::DragBodypart

; 438  : 		}
; 439  : 		else

	jmp	$LN54@CalcBodyRa
$LN55@CalcBodyRa:

; 440  : 		{
; 441  : 			float temp = (float)atan2(groundZ - z - platform->platformAngles.sinthe*platform->platformAngles.cosphi*(length - cgloc), (length - cgloc)*platform->platformAngles.costhe);

	movss	xmm0, DWORD PTR _length$10[ebp]
	subss	xmm0, DWORD PTR _cgloc$19[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mulss	xmm0, DWORD PTR [ecx+392]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1272]
	subss	xmm0, DWORD PTR [eax+1116]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm1, DWORD PTR [edx+388]
	mulss	xmm1, DWORD PTR [ecx+400]
	movss	xmm2, DWORD PTR _length$10[ebp]
	subss	xmm2, DWORD PTR _cgloc$19[ebp]
	mulss	xmm1, xmm2
	subss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _temp$6[ebp]

; 442  : 			backMax = min(temp, backMax);

	movss	xmm0, DWORD PTR _backMax$[ebp]
	comiss	xmm0, DWORD PTR _temp$6[ebp]
	jbe	SHORT $LN148@CalcBodyRa
	movss	xmm0, DWORD PTR _temp$6[ebp]
	movss	DWORD PTR tv907[ebp], xmm0
	jmp	SHORT $LN149@CalcBodyRa
$LN148@CalcBodyRa:
	movss	xmm0, DWORD PTR _backMax$[ebp]
	movss	DWORD PTR tv907[ebp], xmm0
$LN149@CalcBodyRa:
	movss	xmm0, DWORD PTR tv907[ebp]
	movss	DWORD PTR _backMax$[ebp], xmm0
$LN54@CalcBodyRa:

; 443  : 		}
; 444  : 
; 445  : 		//nose might hit
; 446  : 		if(platform->drawPointer)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	cmp	DWORD PTR [eax+332], 0
	je	$LN53@CalcBodyRa

; 447  : 		{
; 448  : 			PtRelPos.x = cgloc;

	movss	xmm0, DWORD PTR _cgloc$19[ebp]
	movss	DWORD PTR _PtRelPos$27[ebp], xmm0

; 449  : 			PtRelPos.y = radius*0.5F*platform->platformAngles.sinphi;

	movss	xmm0, DWORD PTR _radius$22[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mulss	xmm0, DWORD PTR [edx+396]
	movss	DWORD PTR _PtRelPos$27[ebp+4], xmm0

; 450  : 			PtRelPos.z = radius*0.5F*platform->platformAngles.cosphi;

	movss	xmm0, DWORD PTR _radius$22[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mulss	xmm0, DWORD PTR [ecx+400]
	movss	DWORD PTR _PtRelPos$27[ebp+8], xmm0

; 451  : 
; 452  : 			MatrixMult( &((DrawableBSP*)platform->drawPointer)->orientation, &PtRelPos, &PtWorldPos );

	lea	edx, DWORD PTR _PtWorldPos$26[ebp]
	push	edx
	lea	eax, DWORD PTR _PtRelPos$27[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR [edx+332]
	add	eax, 48					; 00000030H
	push	eax
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 453  : 
; 454  : 			if(PtWorldPos.z + z > groundZ - GROUND_TOLERANCE)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _PtWorldPos$26[ebp+8]
	addss	xmm0, DWORD PTR [ecx+1116]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1272]
	subss	xmm1, DWORD PTR ?GROUND_TOLERANCE@@3MA
	comiss	xmm0, xmm1
	jbe	SHORT $LN52@CalcBodyRa

; 455  : 			{
; 456  : 				allgear = 0;

	mov	DWORD PTR _allgear$20[ebp], 0

; 457  : 				front = 1;

	mov	DWORD PTR _front$17[ebp], 1

; 458  : 				DragBodypart();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DragBodypart@AirframeClass@@QAEXXZ	; AirframeClass::DragBodypart

; 459  : 			}
; 460  : 			else

	jmp	$LN51@CalcBodyRa
$LN52@CalcBodyRa:

; 461  : 			{
; 462  : 				float temp = (float)atan2(z + PtWorldPos.z - groundZ, PtRelPos.x*platform->platformAngles.costhe);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR _PtRelPos$27[ebp]
	mulss	xmm0, DWORD PTR [ecx+392]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1116]
	addss	xmm0, DWORD PTR _PtWorldPos$26[ebp+8]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+1272]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _temp$5[ebp]

; 463  : 				frontMax = max(temp, frontMax);

	movss	xmm0, DWORD PTR _temp$5[ebp]
	comiss	xmm0, DWORD PTR _frontMax$[ebp]
	jbe	SHORT $LN150@CalcBodyRa
	movss	xmm0, DWORD PTR _temp$5[ebp]
	movss	DWORD PTR tv972[ebp], xmm0
	jmp	SHORT $LN151@CalcBodyRa
$LN150@CalcBodyRa:
	movss	xmm0, DWORD PTR _frontMax$[ebp]
	movss	DWORD PTR tv972[ebp], xmm0
$LN151@CalcBodyRa:
	movss	xmm0, DWORD PTR tv972[ebp]
	movss	DWORD PTR _frontMax$[ebp], xmm0
$LN51@CalcBodyRa:

; 464  : 			}

	jmp	$LN48@CalcBodyRa
$LN53@CalcBodyRa:

; 465  : 		}
; 466  : 		else if (platform->platformAngles.sinthe*platform->platformAngles.cosphi*-cgloc + z > groundZ - GROUND_TOLERANCE)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR [edx+388]
	mulss	xmm0, DWORD PTR [ecx+400]
	movss	xmm1, DWORD PTR _cgloc$19[ebp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+1116]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+1272]
	subss	xmm1, DWORD PTR ?GROUND_TOLERANCE@@3MA
	comiss	xmm0, xmm1
	jbe	SHORT $LN49@CalcBodyRa

; 467  : 		{
; 468  : 			allgear = 0;

	mov	DWORD PTR _allgear$20[ebp], 0

; 469  : 			front = 1;

	mov	DWORD PTR _front$17[ebp], 1

; 470  : 			DragBodypart();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DragBodypart@AirframeClass@@QAEXXZ	; AirframeClass::DragBodypart

; 471  : 		}
; 472  : 		else

	jmp	$LN48@CalcBodyRa
$LN49@CalcBodyRa:

; 473  : 		{
; 474  : 			float temp = (float)atan2(groundZ - z - platform->platformAngles.sinthe*platform->platformAngles.cosphi*-cgloc, -cgloc*platform->platformAngles.costhe);

	movss	xmm0, DWORD PTR _cgloc$19[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mulss	xmm0, DWORD PTR [edx+392]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1272]
	subss	xmm0, DWORD PTR [ecx+1116]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm1, DWORD PTR [eax+388]
	mulss	xmm1, DWORD PTR [edx+400]
	movss	xmm2, DWORD PTR _cgloc$19[ebp]
	xorps	xmm2, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, xmm2
	subss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _temp$4[ebp]

; 475  : 			frontMax = max(temp, frontMax);

	movss	xmm0, DWORD PTR _temp$4[ebp]
	comiss	xmm0, DWORD PTR _frontMax$[ebp]
	jbe	SHORT $LN152@CalcBodyRa
	movss	xmm0, DWORD PTR _temp$4[ebp]
	movss	DWORD PTR tv1033[ebp], xmm0
	jmp	SHORT $LN153@CalcBodyRa
$LN152@CalcBodyRa:
	movss	xmm0, DWORD PTR _frontMax$[ebp]
	movss	DWORD PTR tv1033[ebp], xmm0
$LN153@CalcBodyRa:
	movss	xmm0, DWORD PTR tv1033[ebp]
	movss	DWORD PTR _frontMax$[ebp], xmm0
$LN48@CalcBodyRa:

; 476  : 		}
; 477  : 
; 478  : 		float zsaeroLim = max(-GRAVITY, zsaero*platform->platformAngles.cosmu);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+744]
	mulss	xmm0, DWORD PTR [ecx+384]
	movss	xmm1, DWORD PTR __real@c200b53f
	comiss	xmm1, xmm0
	jbe	SHORT $LN154@CalcBodyRa
	movss	xmm0, DWORD PTR __real@c200b53f
	movss	DWORD PTR tv1055[ebp], xmm0
	jmp	SHORT $LN155@CalcBodyRa
$LN154@CalcBodyRa:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+744]
	mulss	xmm0, DWORD PTR [ecx+384]
	movss	DWORD PTR tv1055[ebp], xmm0
$LN155@CalcBodyRa:
	movss	xmm0, DWORD PTR tv1055[ebp]
	movss	DWORD PTR _zsaeroLim$13[ebp], xmm0

; 479  : 
; 480  : 		if (!(front + back) && body)

	mov	eax, DWORD PTR _front$17[ebp]
	add	eax, DWORD PTR _back$18[ebp]
	jne	SHORT $LN47@CalcBodyRa
	cmp	DWORD PTR _body$15[ebp], 0
	je	SHORT $LN47@CalcBodyRa

; 481  : 		{
; 482  : 			if (platform->platformAngles.costhe > 0.0F)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR [edx+392]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN46@CalcBodyRa

; 483  : 				alpdelta = (GRAVITY + zsaeroLim)*ANG_RATE*dt*dt;

	movss	xmm0, DWORD PTR __real@4200b53f
	addss	xmm0, DWORD PTR _zsaeroLim$13[ebp]
	mulss	xmm0, DWORD PTR ?ANG_RATE@@3MA
	mulss	xmm0, DWORD PTR _dt$[ebp]
	mulss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR _alpdelta$[ebp], xmm0

; 484  : 			else

	jmp	SHORT $LN45@CalcBodyRa
$LN46@CalcBodyRa:

; 485  : 				alpdelta = (GRAVITY + zsaeroLim)*-ANG_RATE*dt*dt;

	movss	xmm0, DWORD PTR __real@4200b53f
	addss	xmm0, DWORD PTR _zsaeroLim$13[ebp]
	movss	xmm1, DWORD PTR ?ANG_RATE@@3MA
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _dt$[ebp]
	mulss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR _alpdelta$[ebp], xmm0
$LN45@CalcBodyRa:
	jmp	$LN40@CalcBodyRa
$LN47@CalcBodyRa:

; 486  : 		}
; 487  : 		else if (allgear && front && back && vt == 0.0F)

	cmp	DWORD PTR _allgear$20[ebp], 0
	je	$LN43@CalcBodyRa
	cmp	DWORD PTR _front$17[ebp], 0
	je	$LN43@CalcBodyRa
	cmp	DWORD PTR _back$18[ebp], 0
	je	$LN43@CalcBodyRa
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	$LN43@CalcBodyRa

; 488  : 		{
; 489  : 			// MLR 1/16/2004 
; 490  : 			// this code seems to be responsible for the pitch being reset to 0 when the plane is grounded
; 491  : 			// and not moving
; 492  : 			// this really messes up a/c with non-level landing gear (an-2 for ex)
; 493  : 			alpha *= 0.5F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1152]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1152], xmm0

; 494  : 			oldp03[0] = 0.0F;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax+332], xmm0

; 495  : 			oldp03[1] = 0.0F;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx+332], xmm0

; 496  : 			oldp03[2] = 0.0F;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+ecx+332], xmm0

; 497  : 			oldp03[3] = 0.0F;

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax+332], xmm0
	jmp	SHORT $LN40@CalcBodyRa
$LN43@CalcBodyRa:

; 498  : 			
; 499  : 		
; 500  : 		}
; 501  : 		else if (body)

	cmp	DWORD PTR _body$15[ebp], 0
	je	SHORT $LN41@CalcBodyRa

; 502  : 			alpdelta = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _alpdelta$[ebp], xmm0

; 503  : 		else

	jmp	SHORT $LN40@CalcBodyRa
$LN41@CalcBodyRa:

; 504  : 			alpdelta = (GRAVITY + zsaeroLim)*(front - back)*ANG_RATE*dt*dt;

	movss	xmm0, DWORD PTR __real@4200b53f
	addss	xmm0, DWORD PTR _zsaeroLim$13[ebp]
	mov	edx, DWORD PTR _front$17[ebp]
	sub	edx, DWORD PTR _back$18[ebp]
	cvtsi2ss xmm1, edx
	mulss	xmm0, xmm1
	mulss	xmm0, DWORD PTR ?ANG_RATE@@3MA
	mulss	xmm0, DWORD PTR _dt$[ebp]
	mulss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR _alpdelta$[ebp], xmm0
$LN40@CalcBodyRa:

; 505  : 
; 506  : 		if(pstick > 0.0F && alpha > 0.0F)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1500]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN39@CalcBodyRa
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1152]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN39@CalcBodyRa

; 507  : 			frontMax -= alpha*DTR;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1152]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	xmm1, DWORD PTR _frontMax$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _frontMax$[ebp], xmm1
$LN39@CalcBodyRa:

; 508  : 		alpdelta = min(backMax*RTD, max(frontMax*RTD, alpdelta));

	movss	xmm0, DWORD PTR _frontMax$[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	comiss	xmm0, DWORD PTR _alpdelta$[ebp]
	jbe	SHORT $LN156@CalcBodyRa
	movss	xmm0, DWORD PTR _frontMax$[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR tv1121[ebp], xmm0
	jmp	SHORT $LN157@CalcBodyRa
$LN156@CalcBodyRa:
	movss	xmm0, DWORD PTR _alpdelta$[ebp]
	movss	DWORD PTR tv1121[ebp], xmm0
$LN157@CalcBodyRa:
	movss	xmm0, DWORD PTR _backMax$[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	xmm1, DWORD PTR tv1121[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN160@CalcBodyRa
	movss	xmm0, DWORD PTR _backMax$[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR tv1131[ebp], xmm0
	jmp	SHORT $LN161@CalcBodyRa
$LN160@CalcBodyRa:
	movss	xmm0, DWORD PTR _frontMax$[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	comiss	xmm0, DWORD PTR _alpdelta$[ebp]
	jbe	SHORT $LN158@CalcBodyRa
	movss	xmm0, DWORD PTR _frontMax$[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR tv1130[ebp], xmm0
	jmp	SHORT $LN159@CalcBodyRa
$LN158@CalcBodyRa:
	movss	xmm0, DWORD PTR _alpdelta$[ebp]
	movss	DWORD PTR tv1130[ebp], xmm0
$LN159@CalcBodyRa:
	movss	xmm0, DWORD PTR tv1130[ebp]
	movss	DWORD PTR tv1131[ebp], xmm0
$LN161@CalcBodyRa:
	movss	xmm0, DWORD PTR tv1131[ebp]
	movss	DWORD PTR _alpdelta$[ebp], xmm0

; 509  : 
; 510  : 		// MLR 1/16/2004 - I don't know what this is needed for - but it causes 
; 511  : 		//                 non level jets to twitch in pitch with the stick 
; 512  : 		//                 pulled back
; 513  : 		//                 everything seems to work with it disabled :)
; 514  : 		//if(!alpdelta && pstick > 0.0F && alpha > 0.0F)
; 515  : 		//	alpdelta = max(-alpha, (GRAVITY + zsaeroLim)*-ANG_RATE*dt*dt);
; 516  : 		alpha += alpdelta;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1152]
	addss	xmm0, DWORD PTR _alpdelta$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1152], xmm0

; 517  : 		oldp03[0] += alpdelta;

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+332]
	addss	xmm0, DWORD PTR _alpdelta$[ebp]
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+ecx+332], xmm0

; 518  : 		oldp03[1] += alpdelta;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+332]
	addss	xmm0, DWORD PTR _alpdelta$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+edx+332], xmm0

; 519  : 
; 520  : //#define DAVE_DBG
; 521  : #ifdef DAVE_DBG
; 522  : 		if(platform == SimDriver.GetPlayerEntity())
; 523  : 			MonoPrint("a: %5.3f ad: %5.3f q: %5.3f FB: %2d P: %1d aoabias: %5.3f\n", alpha, alpdelta*RTD, q*RTD, front - back, IsSet(Planted), aoabias);
; 524  : #endif
; 525  : 		//oldp03[2] += alpdelta;
; 526  : 		//oldp03[3] += alpdelta;
; 527  : 
; 528  : 		aoabias = alpha;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1152]
	mov	DWORD PTR [ecx+148], eax

; 529  : 
; 530  : 		oldp02[0] = alpha;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1152]
	mov	DWORD PTR [edx+ecx+308], eax

; 531  : 		oldp02[1] = alpha;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1152]
	mov	DWORD PTR [edx+ecx+308], eax

; 532  : 
; 533  : 		if(!(left + right) && body)

	mov	ecx, DWORD PTR _left$14[ebp]
	add	ecx, DWORD PTR _right$12[ebp]
	jne	$LN38@CalcBodyRa
	cmp	DWORD PTR _body$15[ebp], 0
	je	SHORT $LN38@CalcBodyRa

; 534  : 		{
; 535  : 			if(platform->platformAngles.sinphi > 0.0F)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [eax+396]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN37@CalcBodyRa

; 536  : 				pdelta = (GRAVITY + zsaeroLim)*ANG_RATE*dt*DTR;

	movss	xmm0, DWORD PTR __real@4200b53f
	addss	xmm0, DWORD PTR _zsaeroLim$13[ebp]
	mulss	xmm0, DWORD PTR ?ANG_RATE@@3MA
	mulss	xmm0, DWORD PTR _dt$[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR _pdelta$[ebp], xmm0

; 537  : 			else

	jmp	SHORT $LN36@CalcBodyRa
$LN37@CalcBodyRa:

; 538  : 				pdelta = (GRAVITY + zsaeroLim)*-ANG_RATE*dt*DTR;

	movss	xmm0, DWORD PTR __real@4200b53f
	addss	xmm0, DWORD PTR _zsaeroLim$13[ebp]
	movss	xmm1, DWORD PTR ?ANG_RATE@@3MA
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _dt$[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR _pdelta$[ebp], xmm0
$LN36@CalcBodyRa:
	jmp	$LN31@CalcBodyRa
$LN38@CalcBodyRa:

; 539  : 		}
; 540  : 		else if(allgear && left && right && vt == 0.0F)

	cmp	DWORD PTR _allgear$20[ebp], 0
	je	SHORT $LN34@CalcBodyRa
	cmp	DWORD PTR _left$14[ebp], 0
	je	SHORT $LN34@CalcBodyRa
	cmp	DWORD PTR _right$12[ebp], 0
	je	SHORT $LN34@CalcBodyRa
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN34@CalcBodyRa

; 541  : 		{
; 542  : 			pdelta = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pdelta$[ebp], xmm0

; 543  : 			mu *= 0.5F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1180]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1180], xmm0
	jmp	SHORT $LN31@CalcBodyRa
$LN34@CalcBodyRa:

; 544  : 		}
; 545  : 		else if(body)

	cmp	DWORD PTR _body$15[ebp], 0
	je	SHORT $LN32@CalcBodyRa

; 546  : 			pdelta = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pdelta$[ebp], xmm0

; 547  : 		else

	jmp	SHORT $LN31@CalcBodyRa
$LN32@CalcBodyRa:

; 548  : 			pdelta = (GRAVITY + zsaeroLim)*(left - right)*ANG_RATE*dt*DTR;

	movss	xmm0, DWORD PTR __real@4200b53f
	addss	xmm0, DWORD PTR _zsaeroLim$13[ebp]
	mov	ecx, DWORD PTR _left$14[ebp]
	sub	ecx, DWORD PTR _right$12[ebp]
	cvtsi2ss xmm1, ecx
	mulss	xmm0, xmm1
	mulss	xmm0, DWORD PTR ?ANG_RATE@@3MA
	mulss	xmm0, DWORD PTR _dt$[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR _pdelta$[ebp], xmm0
$LN31@CalcBodyRa:

; 549  : 	}
; 550  : 	/*--------*/
; 551  : 	/* Flying */
; 552  : 	/*--------*/
; 553  : 	if (!IsSet(Planted))

	push	4096					; 00001000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN30@CalcBodyRa

; 554  : 	{
; 555  : 
; 556  : 		/*----------------------*/
; 557  : 		/* body axis pitch rate */
; 558  : 		/*----------------------*/
; 559  : 		
; 560  : 		if(gearPos < 1.0F)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR [edx+1552]
	jbe	$LN29@CalcBodyRa

; 561  : 			qptchc += (float)(atan(nzcgs*GRAVITY/tempVt) - atan(0.2F*gearPos*qsom/tempVt) + pitch*platform->platformAngles.cosbet);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+268]
	mulss	xmm0, DWORD PTR __real@4200b53f
	divss	xmm0, DWORD PTR _tempVt$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	fstp	DWORD PTR tv2555[ebp]
	movss	xmm0, DWORD PTR tv2555[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3e4ccccd
	mulss	xmm1, DWORD PTR [ecx+1552]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+648]
	divss	xmm1, DWORD PTR _tempVt$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv2931[ebp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	fstp	DWORD PTR tv2563[ebp]
	movss	xmm0, DWORD PTR tv2931[ebp]
	subss	xmm0, DWORD PTR tv2563[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1312]
	mulss	xmm1, DWORD PTR [ecx+356]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _qptchc$[ebp]
	movss	DWORD PTR _qptchc$[ebp], xmm0

; 562  : 		else

	jmp	$LN28@CalcBodyRa
$LN29@CalcBodyRa:

; 563  : 			qptchc += (float)(atan(nzcgs*GRAVITY/tempVt) - atan(0.1F*gearPos*qsom/tempVt) + pitch*platform->platformAngles.cosbet);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+268]
	mulss	xmm0, DWORD PTR __real@4200b53f
	divss	xmm0, DWORD PTR _tempVt$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	fstp	DWORD PTR tv2574[ebp]
	movss	xmm0, DWORD PTR tv2574[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3dcccccd
	mulss	xmm1, DWORD PTR [ecx+1552]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+648]
	divss	xmm1, DWORD PTR _tempVt$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv2933[ebp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	fstp	DWORD PTR tv2582[ebp]
	movss	xmm0, DWORD PTR tv2933[ebp]
	subss	xmm0, DWORD PTR tv2582[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1312]
	mulss	xmm1, DWORD PTR [ecx+356]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _qptchc$[ebp]
	movss	DWORD PTR _qptchc$[ebp], xmm0
$LN28@CalcBodyRa:

; 564  : 		
; 565  : 		// Bias nose down if going slow 
; 566  : 		if (tempVt < 0.5F* vRot && IsSet(InAir))

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [eax+1148]
	comiss	xmm0, DWORD PTR _tempVt$[ebp]
	jbe	$LN22@CalcBodyRa
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN22@CalcBodyRa

; 567  : 		{
; 568  : 			rateMod = 5.0F;

	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR _rateMod$[ebp], xmm0

; 569  : 			
; 570  : 			if( tempVt > 0)

	movss	xmm0, DWORD PTR _tempVt$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN26@CalcBodyRa

; 571  : 				rateMod = min(5.0F, vRot/tempVt );			

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1148]
	divss	xmm0, DWORD PTR _tempVt$[ebp]
	comiss	xmm0, DWORD PTR __real@40a00000
	jbe	SHORT $LN162@CalcBodyRa
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR tv1269[ebp], xmm0
	jmp	SHORT $LN163@CalcBodyRa
$LN162@CalcBodyRa:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1148]
	divss	xmm0, DWORD PTR _tempVt$[ebp]
	movss	DWORD PTR tv1269[ebp], xmm0
$LN163@CalcBodyRa:
	movss	xmm0, DWORD PTR tv1269[ebp]
	movss	DWORD PTR _rateMod$[ebp], xmm0
$LN26@CalcBodyRa:

; 572  : 			
; 573  : 			if (platform->platformAngles.cosphi > 0.0F)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR [ecx+400]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN25@CalcBodyRa

; 574  : 			{
; 575  : 				if(platform->platformAngles.sinthe > 0.9F)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [eax+388]
	comiss	xmm0, DWORD PTR __real@3f666666
	jbe	SHORT $LN24@CalcBodyRa

; 576  : 					qptchc -= rateMod *(3.0F * DTR * (float)fabs(1 - platform->platformAngles.costhe) );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR [edx+392]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2608[ebp]
	movss	xmm0, DWORD PTR tv2608[ebp]
	mulss	xmm0, DWORD PTR __real@3d56774e
	mulss	xmm0, DWORD PTR _rateMod$[ebp]
	movss	xmm1, DWORD PTR _qptchc$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _qptchc$[ebp], xmm1
$LN24@CalcBodyRa:

; 577  : 			}
; 578  : 			else

	jmp	SHORT $LN22@CalcBodyRa
$LN25@CalcBodyRa:

; 579  : 			{
; 580  : 				if(platform->platformAngles.sinthe > 0.9F)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR [ecx+388]
	comiss	xmm0, DWORD PTR __real@3f666666
	jbe	SHORT $LN22@CalcBodyRa

; 581  : 					qptchc += rateMod *(3.0F * DTR * (float)fabs(1 - platform->platformAngles.costhe) );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR [eax+392]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2620[ebp]
	movss	xmm0, DWORD PTR tv2620[ebp]
	mulss	xmm0, DWORD PTR __real@3d56774e
	mulss	xmm0, DWORD PTR _rateMod$[ebp]
	addss	xmm0, DWORD PTR _qptchc$[ebp]
	movss	DWORD PTR _qptchc$[ebp], xmm0
$LN22@CalcBodyRa:

; 582  : 			}
; 583  : 		}
; 584  : 		
; 585  : 		if(stallMode == EnteringDeepStall)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1248], 3
	jne	SHORT $LN19@CalcBodyRa

; 586  : 		{
; 587  : 			pitch *= 0.9F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1312]
	mulss	xmm0, DWORD PTR __real@3f666666
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1312], xmm0

; 588  : 			
; 589  : 			if (platform->platformAngles.cosphi > 0.0F)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR [edx+400]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN20@CalcBodyRa

; 590  : 				qptchc -= 5.0F * DTR;

	movss	xmm0, DWORD PTR _qptchc$[ebp]
	subss	xmm0, DWORD PTR __real@3db2b8c1
	movss	DWORD PTR _qptchc$[ebp], xmm0

; 591  : 			else

	jmp	SHORT $LN19@CalcBodyRa
$LN20@CalcBodyRa:

; 592  : 				qptchc += 5.0F * DTR;

	movss	xmm0, DWORD PTR _qptchc$[ebp]
	addss	xmm0, DWORD PTR __real@3db2b8c1
	movss	DWORD PTR _qptchc$[ebp], xmm0
$LN19@CalcBodyRa:

; 593  : 		}
; 594  : 		
; 595  : 		qptchc -= (float)atan(platform->platformAngles.cosmu * platform->platformAngles.cosgam*GRAVITY /tempVt);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [ecx+384]
	mulss	xmm0, DWORD PTR [eax+368]
	mulss	xmm0, DWORD PTR __real@4200b53f
	divss	xmm0, DWORD PTR _tempVt$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	fstp	DWORD PTR tv2639[ebp]
	movss	xmm0, DWORD PTR _qptchc$[ebp]
	subss	xmm0, DWORD PTR tv2639[ebp]
	movss	DWORD PTR _qptchc$[ebp], xmm0

; 596  : 		// JB 010714 mult by the elasticity
; 597  : 		q = Math.FLTust(qptchc,tp01 * auxaeroData->pitchElasticity,dt ,oldp05);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 380				; 0000017cH
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1340]
	mulss	xmm0, DWORD PTR [eax+200]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _qptchc$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?Math@@3VSIMLIB_MATH_CLASS@@A ; Math
	call	?FLTust@SIMLIB_MATH_CLASS@@QAEMMMMQAM@Z	; SIMLIB_MATH_CLASS::FLTust
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+1136]

; 598  : 		ShiAssert(!_isnan(q));
; 599  : 		//if(!IsSet(InAir))
; 600  : 		//	q = max(0.0F, q);
; 601  : 		
; 602  : 		/*----------------------------------*/
; 603  : 		/* body axis roll rate and yaw rate */
; 604  : 		/*----------------------------------*/
; 605  : 		
; 606  : 		if(stallMode >= DeepStall && alpha < -10.0F)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1248], 4
	jl	$LN18@CalcBodyRa
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c1200000
	comiss	xmm0, DWORD PTR [ecx+1152]
	jbe	$LN18@CalcBodyRa

; 607  : 		{
; 608  : 			slice += (slice*0.007F - ypedal*0.005F + (assymetry/weight)*0.002F);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1308]
	mulss	xmm0, DWORD PTR __real@3be56042
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+1508]
	mulss	xmm1, DWORD PTR __real@3ba3d70a
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1232]
	divss	xmm1, DWORD PTR [edx+44]
	mulss	xmm1, DWORD PTR __real@3b03126f
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+1308]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1308], xmm0

; 609  : 			slice = max(min(slice,5.0F), -5.0F);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40a00000
	comiss	xmm0, DWORD PTR [edx+1308]
	jbe	SHORT $LN164@CalcBodyRa
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1308]
	movss	DWORD PTR tv1394[ebp], xmm0
	jmp	SHORT $LN165@CalcBodyRa
$LN164@CalcBodyRa:
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR tv1394[ebp], xmm0
$LN165@CalcBodyRa:
	movss	xmm0, DWORD PTR tv1394[ebp]
	comiss	xmm0, DWORD PTR __real@c0a00000
	jbe	SHORT $LN168@CalcBodyRa
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40a00000
	comiss	xmm0, DWORD PTR [ecx+1308]
	jbe	SHORT $LN166@CalcBodyRa
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1308]
	movss	DWORD PTR tv1401[ebp], xmm0
	jmp	SHORT $LN167@CalcBodyRa
$LN166@CalcBodyRa:
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR tv1401[ebp], xmm0
$LN167@CalcBodyRa:
	movss	xmm0, DWORD PTR tv1401[ebp]
	movss	DWORD PTR tv1402[ebp], xmm0
	jmp	SHORT $LN169@CalcBodyRa
$LN168@CalcBodyRa:
	movss	xmm0, DWORD PTR __real@c0a00000
	movss	DWORD PTR tv1402[ebp], xmm0
$LN169@CalcBodyRa:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv1402[ebp]
	movss	DWORD PTR [eax+1308], xmm0

; 610  : 			if(fabs(slice) < 0.0015F)

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1308]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2685[ebp]
	movss	xmm0, DWORD PTR __real@3ac49ba6
	comiss	xmm0, DWORD PTR tv2685[ebp]
	jbe	SHORT $LN17@CalcBodyRa

; 611  : 				slice = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1308], xmm0
$LN17@CalcBodyRa:

; 612  : 			
; 613  : 			p = pstab;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+668]
	mov	DWORD PTR [eax+1132], edx

; 614  : 			
; 615  : 			if(stallMode >= Spinning)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1248], 5
	jl	$LN16@CalcBodyRa

; 616  : 			{
; 617  : 				if(stallMode == FlatSpin)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1248], 6
	jne	SHORT $LN15@CalcBodyRa

; 618  : 				{
; 619  : 					r = 0;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1140], xmm0

; 620  : 					p = 0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1132], xmm0

; 621  : 					q = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1136], xmm0

; 622  : 				}
; 623  : 				else

	jmp	SHORT $LN14@CalcBodyRa
$LN15@CalcBodyRa:

; 624  : 				{
; 625  : 					rstab  = (nycgw  + platform->platformAngles.cosgam * 
; 626  : 					platform->platformAngles.sinmu)*GRAVITY/tempVt;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR [eax+368]
	mulss	xmm0, DWORD PTR [edx+380]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+276]
	mulss	xmm0, DWORD PTR __real@4200b53f
	divss	xmm0, DWORD PTR _tempVt$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+672], xmm0

; 627  : 				
; 628  : 					r = rstab;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR [edx+1140], ecx
$LN14@CalcBodyRa:

; 629  : 				}
; 630  : 
; 631  : 				gmma -= (90.0F*DTR + gmma)*dt/5.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3fc90fd9
	addss	xmm0, DWORD PTR [edx+1172]
	mulss	xmm0, DWORD PTR _dt$[ebp]
	divss	xmm0, DWORD PTR __real@40a00000
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+1172]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1172], xmm1

; 632  : 				ResetOrientation();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetOrientation@AirframeClass@@QAEXXZ	; AirframeClass::ResetOrientation

; 633  : 			}
; 634  : 			else

	jmp	SHORT $LN13@CalcBodyRa
$LN16@CalcBodyRa:

; 635  : 			{
; 636  : 				rstab  = (nycgw  + platform->platformAngles.cosgam * 
; 637  : 					platform->platformAngles.sinmu)*GRAVITY/tempVt;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR [eax+368]
	mulss	xmm0, DWORD PTR [edx+380]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+276]
	mulss	xmm0, DWORD PTR __real@4200b53f
	divss	xmm0, DWORD PTR _tempVt$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+672], xmm0

; 638  : 				
; 639  : 				r = rstab;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR [edx+1140], ecx
$LN13@CalcBodyRa:

; 640  : 			}
; 641  : 		}
; 642  : 		else

	jmp	$LN12@CalcBodyRa
$LN18@CalcBodyRa:

; 643  : 		{
; 644  : 			slice *= 0.97F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1308]
	mulss	xmm0, DWORD PTR __real@3f7851ec
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1308], xmm0

; 645  : 			pitch *= 0.97F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1312]
	mulss	xmm0, DWORD PTR __real@3f7851ec
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1312], xmm0

; 646  : 			
; 647  : 			rstab  = (nycgw  + platform->platformAngles.cosgam *
; 648  : 				platform->platformAngles.sinmu)*GRAVITY/tempVt;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [ecx+368]
	mulss	xmm0, DWORD PTR [eax+380]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+276]
	mulss	xmm0, DWORD PTR __real@4200b53f
	divss	xmm0, DWORD PTR _tempVt$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+672], xmm0

; 649  : 
; 650  : 			// JPO - add in experimental roll couple
; 651  : 			if (IsSet(InAir))

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN11@CalcBodyRa

; 652  : 			    pstab += auxaeroData->rollCouple * fabsf(ypedal) * ypedal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1508]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR tv2743[ebp]
	movss	xmm0, DWORD PTR tv2743[ebp]
	mulss	xmm0, DWORD PTR [esi+236]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+1508]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+668]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+668], xmm0
$LN11@CalcBodyRa:

; 653  : 
; 654  : 			r = rstab;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR [edx+1140], ecx

; 655  : 			p = pstab;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+668]
	mov	DWORD PTR [edx+1132], ecx
$LN12@CalcBodyRa:

; 656  : 		}
; 657  : 		
; 658  : 		// Bias nose down if going slow 
; 659  : 		if (tempVt < 0.5F* vRot && IsSet(InAir))

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [edx+1148]
	comiss	xmm0, DWORD PTR _tempVt$[ebp]
	jbe	$LN8@CalcBodyRa
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN8@CalcBodyRa

; 660  : 		{
; 661  : 			rateMod = 5.0F;

	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR _rateMod$[ebp], xmm0

; 662  : 			
; 663  : 			if( tempVt > 0)

	movss	xmm0, DWORD PTR _tempVt$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN9@CalcBodyRa

; 664  : 				rateMod = min(5.0F, vRot/tempVt );			

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1148]
	divss	xmm0, DWORD PTR _tempVt$[ebp]
	comiss	xmm0, DWORD PTR __real@40a00000
	jbe	SHORT $LN170@CalcBodyRa
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR tv1533[ebp], xmm0
	jmp	SHORT $LN171@CalcBodyRa
$LN170@CalcBodyRa:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1148]
	divss	xmm0, DWORD PTR _tempVt$[ebp]
	movss	DWORD PTR tv1533[ebp], xmm0
$LN171@CalcBodyRa:
	movss	xmm0, DWORD PTR tv1533[ebp]
	movss	DWORD PTR _rateMod$[ebp], xmm0
$LN9@CalcBodyRa:

; 665  : 			
; 666  : 			if(platform->platformAngles.sinthe > 0.9F)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [eax+388]
	comiss	xmm0, DWORD PTR __real@3f666666
	jbe	SHORT $LN8@CalcBodyRa

; 667  : 				r += rateMod *platform->platformAngles.sinphi*(3.0F * DTR * (float)fabs(1 - platform->platformAngles.costhe) );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR _rateMod$[ebp]
	mulss	xmm0, DWORD PTR [edx+396]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR [ecx+392]
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv2935[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2776[ebp]
	movss	xmm0, DWORD PTR tv2776[ebp]
	mulss	xmm0, DWORD PTR __real@3d56774e
	movss	xmm1, DWORD PTR tv2935[ebp]
	mulss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm1, DWORD PTR [edx+1140]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1140], xmm1
$LN8@CalcBodyRa:

; 668  : 		}
; 669  : 
; 670  : 		r += slice*platform->platformAngles.cosalp;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1308]
	mulss	xmm0, DWORD PTR [edx+344]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+1140]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1140], xmm0

; 671  : 		p += (slice*platform->platformAngles.sinalp + pitch*platform->platformAngles.sinalp);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1308]
	mulss	xmm0, DWORD PTR [ecx+340]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1312]
	mulss	xmm1, DWORD PTR [ecx+340]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+1132]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1132], xmm0

; 672  : 
; 673  : 		CalcGroundTurnRate(dt);

	push	ecx
	movss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcGroundTurnRate@AirframeClass@@AAEXM@Z ; AirframeClass::CalcGroundTurnRate

; 674  : 
; 675  : 		if (!IsSet(IsDigital))

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN6@CalcBodyRa

; 676  : 		{//me123 this is disabled distance is always returned as -5000
; 677  : 			//this is effection stic input and acts very wired.
; 678  : 			turbFact = (OTWDriver.DistanceFromCloudEdge() + 5000.0F) / 5000.0F;

	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?DistanceFromCloudEdge@OTWDriverClass@@QAEMXZ ; OTWDriverClass::DistanceFromCloudEdge
	fstp	DWORD PTR tv2802[ebp]
	movss	xmm0, DWORD PTR tv2802[ebp]
	addss	xmm0, DWORD PTR __real@459c4000
	divss	xmm0, DWORD PTR __real@459c4000
	movss	DWORD PTR _turbFact$[ebp], xmm0

; 679  : 
; 680  : 			if (turbFact > 0.0F)

	movss	xmm0, DWORD PTR _turbFact$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN6@CalcBodyRa

; 681  : 			{
; 682  : 				p *= PRANDFloat() * turbFact;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv2807[ebp]
	movss	xmm0, DWORD PTR tv2807[ebp]
	mulss	xmm0, DWORD PTR _turbFact$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+1132]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1132], xmm0

; 683  : 				q *= PRANDFloat() * turbFact;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv2814[ebp]
	movss	xmm0, DWORD PTR tv2814[ebp]
	mulss	xmm0, DWORD PTR _turbFact$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+1136]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1136], xmm0

; 684  : 				r *= PRANDFloat() * turbFact;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv2821[ebp]
	movss	xmm0, DWORD PTR tv2821[ebp]
	mulss	xmm0, DWORD PTR _turbFact$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+1140]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1140], xmm0
$LN6@CalcBodyRa:

; 685  : 			}
; 686  : 		}
; 687  : 		
; 688  : 		ShiAssert(!_isnan(r));
; 689  : /* REMOVED BY S.G. THIS CODE IS PART OF THE CLUPRIT WHY HOOKING TO THE TANKER DOESN'T WORK		
; 690  : 		
; 691  : 		// If on a boom, damp the rates
; 692  : 		if (IsSet(Refueling))
; 693  : 		{
; 694  : 			float rateDeadband = 0.05F*PlayerOptions.GetRefuelingMode();
; 695  : 			
; 696  : 			// Try to follow the tanker, unless rates are to high
; 697  : 			if (q > rateDeadband)
; 698  : 				q -= rateDeadband;
; 699  : 			else if (q < -rateDeadband)
; 700  : 				q += rateDeadband;
; 701  : 			else
; 702  : 				q = -gmma*0.75F;
; 703  : 			
; 704  : 			if (p > rateDeadband)
; 705  : 				p -= rateDeadband;
; 706  : 			else if (p < -rateDeadband)
; 707  : 				p += rateDeadband;
; 708  : 			else
; 709  : 				p = -phi*0.75F;
; 710  : 			
; 711  : 			if (r > rateDeadband)
; 712  : 				r -= rateDeadband;
; 713  : 			else if (r < -rateDeadband)
; 714  : 				r += rateDeadband;
; 715  : 			else
; 716  : 				r = (forcedHeading - sigma)*0.75F;
; 717  : 		}
; 718  : */	}
; 719  : 	else

	jmp	$LN5@CalcBodyRa
$LN30@CalcBodyRa:

; 720  : 	/*-----------------*/
; 721  : 	/* Ground Handling */
; 722  : 	/*-----------------*/
; 723  : 	{		
; 724  : 		p = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1132], xmm0

; 725  : 		//TJL 02/28/04
; 726  : 		r = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1140], xmm0

; 727  : 		//mu = 0.0F;
; 728  : 		
; 729  : 		CalcGroundTurnRate(dt);

	push	ecx
	movss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcGroundTurnRate@AirframeClass@@AAEXM@Z ; AirframeClass::CalcGroundTurnRate

; 730  : 		
; 731  : 		q = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1136], xmm0

; 732  : 		
; 733  : 		oldp05[0] = 0.0;

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx+380], xmm0

; 734  : 		oldp05[1] = 0.0;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+ecx+380], xmm0

; 735  : 		oldp05[2] = 0.0;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax+380], xmm0

; 736  : 		oldp05[3] = 0.0;

	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx+380], xmm0
$LN5@CalcBodyRa:

; 737  : 	}
; 738  : 
; 739  : 	if(IsSet(InAir))

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN4@CalcBodyRa

; 740  : 		p += pdelta;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1132]
	addss	xmm0, DWORD PTR _pdelta$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1132], xmm0

; 741  : 	else

	jmp	$LN2@CalcBodyRa
$LN4@CalcBodyRa:

; 742  : 	{
; 743  : 		p = min(rightMax*2.0F, max(leftMax*2.0F, p + pdelta));

	movss	xmm0, DWORD PTR _leftMax$[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+1132]
	addss	xmm1, DWORD PTR _pdelta$[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN172@CalcBodyRa
	movss	xmm0, DWORD PTR _leftMax$[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv1666[ebp], xmm0
	jmp	SHORT $LN173@CalcBodyRa
$LN172@CalcBodyRa:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1132]
	addss	xmm0, DWORD PTR _pdelta$[ebp]
	movss	DWORD PTR tv1666[ebp], xmm0
$LN173@CalcBodyRa:
	movss	xmm0, DWORD PTR _rightMax$[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv1666[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN176@CalcBodyRa
	movss	xmm0, DWORD PTR _rightMax$[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv1682[ebp], xmm0
	jmp	SHORT $LN177@CalcBodyRa
$LN176@CalcBodyRa:
	movss	xmm0, DWORD PTR _leftMax$[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1132]
	addss	xmm1, DWORD PTR _pdelta$[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN174@CalcBodyRa
	movss	xmm0, DWORD PTR _leftMax$[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv1681[ebp], xmm0
	jmp	SHORT $LN175@CalcBodyRa
$LN174@CalcBodyRa:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1132]
	addss	xmm0, DWORD PTR _pdelta$[ebp]
	movss	DWORD PTR tv1681[ebp], xmm0
$LN175@CalcBodyRa:
	movss	xmm0, DWORD PTR tv1681[ebp]
	movss	DWORD PTR tv1682[ebp], xmm0
$LN177@CalcBodyRa:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv1682[ebp]
	movss	DWORD PTR [ecx+1132], xmm0

; 744  : 		if(p == rightMax*2.0F || p == leftMax*2.0F)

	movss	xmm0, DWORD PTR _rightMax$[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1132]
	ucomiss	xmm1, xmm0
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN1@CalcBodyRa
	movss	xmm0, DWORD PTR _leftMax$[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+1132]
	ucomiss	xmm1, xmm0
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@CalcBodyRa
$LN1@CalcBodyRa:

; 745  : 		{
; 746  : 			//if we had to limit the roll it means we should stop rolling so zero integrator
; 747  : 			oldr01[0] = 0.0F;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+ecx+404], xmm0

; 748  : 			oldr01[1] = 0.0F;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax+404], xmm0

; 749  : 			oldr01[2] = 0.0F;

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx+404], xmm0

; 750  : 			oldr01[3] = 0.0F;

	mov	ecx, 4
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+ecx+404], xmm0
$LN2@CalcBodyRa:

; 751  : 		}
; 752  : 	}
; 753  : 
; 754  : 	//r += rdelta;
; 755  : 
; 756  : 	//if we rotate too fast the quaternions go nutty
; 757  : 	p = min(4.5F,max(p, -4.5F));

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1132]
	comiss	xmm0, DWORD PTR __real@c0900000
	jbe	SHORT $LN178@CalcBodyRa
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1132]
	movss	DWORD PTR tv1707[ebp], xmm0
	jmp	SHORT $LN179@CalcBodyRa
$LN178@CalcBodyRa:
	movss	xmm0, DWORD PTR __real@c0900000
	movss	DWORD PTR tv1707[ebp], xmm0
$LN179@CalcBodyRa:
	movss	xmm0, DWORD PTR tv1707[ebp]
	comiss	xmm0, DWORD PTR __real@40900000
	jbe	SHORT $LN182@CalcBodyRa
	movss	xmm0, DWORD PTR __real@40900000
	movss	DWORD PTR tv1715[ebp], xmm0
	jmp	SHORT $LN183@CalcBodyRa
$LN182@CalcBodyRa:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1132]
	comiss	xmm0, DWORD PTR __real@c0900000
	jbe	SHORT $LN180@CalcBodyRa
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1132]
	movss	DWORD PTR tv1714[ebp], xmm0
	jmp	SHORT $LN181@CalcBodyRa
$LN180@CalcBodyRa:
	movss	xmm0, DWORD PTR __real@c0900000
	movss	DWORD PTR tv1714[ebp], xmm0
$LN181@CalcBodyRa:
	movss	xmm0, DWORD PTR tv1714[ebp]
	movss	DWORD PTR tv1715[ebp], xmm0
$LN183@CalcBodyRa:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv1715[ebp]
	movss	DWORD PTR [ecx+1132], xmm0

; 758  : 	q = min(3.0F,max(q, -3.0F));

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1136]
	comiss	xmm0, DWORD PTR __real@c0400000
	jbe	SHORT $LN184@CalcBodyRa
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1136]
	movss	DWORD PTR tv1722[ebp], xmm0
	jmp	SHORT $LN185@CalcBodyRa
$LN184@CalcBodyRa:
	movss	xmm0, DWORD PTR __real@c0400000
	movss	DWORD PTR tv1722[ebp], xmm0
$LN185@CalcBodyRa:
	movss	xmm0, DWORD PTR tv1722[ebp]
	comiss	xmm0, DWORD PTR __real@40400000
	jbe	SHORT $LN188@CalcBodyRa
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR tv1730[ebp], xmm0
	jmp	SHORT $LN189@CalcBodyRa
$LN188@CalcBodyRa:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1136]
	comiss	xmm0, DWORD PTR __real@c0400000
	jbe	SHORT $LN186@CalcBodyRa
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1136]
	movss	DWORD PTR tv1729[ebp], xmm0
	jmp	SHORT $LN187@CalcBodyRa
$LN186@CalcBodyRa:
	movss	xmm0, DWORD PTR __real@c0400000
	movss	DWORD PTR tv1729[ebp], xmm0
$LN187@CalcBodyRa:
	movss	xmm0, DWORD PTR tv1729[ebp]
	movss	DWORD PTR tv1730[ebp], xmm0
$LN189@CalcBodyRa:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv1730[ebp]
	movss	DWORD PTR [eax+1136], xmm0

; 759  : 	r = min(4.0F,max(r, -4.0F));

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1140]
	comiss	xmm0, DWORD PTR __real@c0800000
	jbe	SHORT $LN190@CalcBodyRa
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1140]
	movss	DWORD PTR tv1737[ebp], xmm0
	jmp	SHORT $LN191@CalcBodyRa
$LN190@CalcBodyRa:
	movss	xmm0, DWORD PTR __real@c0800000
	movss	DWORD PTR tv1737[ebp], xmm0
$LN191@CalcBodyRa:
	movss	xmm0, DWORD PTR tv1737[ebp]
	comiss	xmm0, DWORD PTR __real@40800000
	jbe	SHORT $LN194@CalcBodyRa
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR tv1745[ebp], xmm0
	jmp	SHORT $LN195@CalcBodyRa
$LN194@CalcBodyRa:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1140]
	comiss	xmm0, DWORD PTR __real@c0800000
	jbe	SHORT $LN192@CalcBodyRa
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1140]
	movss	DWORD PTR tv1744[ebp], xmm0
	jmp	SHORT $LN193@CalcBodyRa
$LN192@CalcBodyRa:
	movss	xmm0, DWORD PTR __real@c0800000
	movss	DWORD PTR tv1744[ebp], xmm0
$LN193@CalcBodyRa:
	movss	xmm0, DWORD PTR tv1744[ebp]
	movss	DWORD PTR tv1745[ebp], xmm0
$LN195@CalcBodyRa:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv1745[ebp]
	movss	DWORD PTR [edx+1140], xmm0

; 760  : 
; 761  : 	startRoll += p * SimLibMinorFrameTime;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1132]
	mulss	xmm0, DWORD PTR ?SimLibMinorFrameTime@@3MA
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+72]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+72], xmm0

; 762  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?CalcBodyRates@AirframeClass@@AAEXM@Z ENDP		; AirframeClass::CalcBodyRates
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?checked_atan2@@YANNN@Z
_TEXT	SEGMENT
_z$ = -8						; size = 8
_y$ = 8							; size = 8
_x$ = 16						; size = 8
?checked_atan2@@YANNN@Z PROC				; checked_atan2, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 47   : 	double z;
; 48   : 	
; 49   : 	if (x == -0.0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@8000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@checked_at

; 50   : 		x = 0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _x$[ebp], xmm0
$LN8@checked_at:

; 51   : 	
; 52   : 	if (x != 0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@checked_at

; 53   : 		z = atan(y / x);

	movsd	xmm0, QWORD PTR _y$[ebp]
	divsd	xmm0, QWORD PTR _x$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR _z$[ebp]
	jmp	SHORT $LN4@checked_at
$LN7@checked_at:

; 54   : 	else if (y > 0)

	movsd	xmm0, QWORD PTR _y$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@checked_at

; 55   : 		z = HALF_DPI;

	movsd	xmm0, QWORD PTR __real@3ff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 56   : 	else

	jmp	SHORT $LN4@checked_at
$LN5@checked_at:

; 57   : 		z = -HALF_DPI;

	movsd	xmm0, QWORD PTR __real@bff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN4@checked_at:

; 58   : 
; 59   : 	if (x < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _x$[ebp]
	jbe	SHORT $LN1@checked_at

; 60   : 	{
; 61   : 		if (y < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _y$[ebp]
	jbe	SHORT $LN2@checked_at

; 62   : 			z -= DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	subsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 63   : 		else

	jmp	SHORT $LN1@checked_at
$LN2@checked_at:

; 64   : 			z += DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	addsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN1@checked_at:

; 65   : 	}
; 66   : 
; 67   : 	return z;

	fld	QWORD PTR _z$[ebp]

; 68   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?checked_atan2@@YANNN@Z ENDP				; checked_atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?mlSinCos@@YAXPAUmlTrig@@M@Z
_TEXT	SEGMENT
_trig$ = 8						; size = 4
_angle$ = 12						; size = 4
?mlSinCos@@YAXPAUmlTrig@@M@Z PROC			; mlSinCos, COMDAT

; 12   : {

	push	ebp
	mov	ebp, esp

; 13   : #if defined(_MSC_VER)
; 14   : 	__asm 
; 15   : 	{
; 16   : 		__asm	mov     ecx, trig;

	mov	ecx, DWORD PTR _trig$[ebp]

; 17   : 		__asm	fld     dword ptr [angle];

	fld	DWORD PTR _angle$[ebp]

; 18   : 		__asm	fsincos;

	fsincos

; 19   : 		__asm	fstp    dword ptr [ecx]trig.cos;

	fstp	DWORD PTR [ecx+4]

; 20   : 		__asm	fstp    dword ptr [ecx]trig.sin;

	fstp	DWORD PTR [ecx]

; 21   : 	}
; 22   : #else
; 23   : 	trig->sin = (Float32)sin(angle);
; 24   : 	trig->cos = (Float32)cos(angle);
; 25   : #endif
; 26   : }

	pop	ebp
	ret	0
?mlSinCos@@YAXPAUmlTrig@@M@Z ENDP			; mlSinCos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsPlayer@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPlayer@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsPlayer, COMDAT
; _this$ = ecx

; 113  : 	int IsPlayer (void)							{ return IsSetFalcFlag(FEC_HASPLAYERS); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetFalcFlag@FalconEntity@@QAEHH@Z	; FalconEntity::IsSetFalcFlag
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPlayer@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsPlayer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSetFalcFlag@FalconEntity@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z PROC		; FalconEntity::IsSetFalcFlag, COMDAT
; _this$ = ecx

; 112  : 	int IsSetFalcFlag (int flag)				{ return falconFlags & flag; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+136]
	and	eax, DWORD PTR _flag$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z ENDP		; FalconEntity::IsSetFalcFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Pitch@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Pitch@VuEntity@@QBEMXZ PROC				; VuEntity::Pitch, COMDAT
; _this$ = ecx

; 165  : 	SM_SCALAR Pitch() const { return orient_.pitch_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+64]
	mov	esp, ebp
	pop	ebp
	ret	0
?Pitch@VuEntity@@QBEMXZ ENDP				; VuEntity::Pitch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZDelta@VuEntity@@QBEMXZ PROC				; VuEntity::ZDelta, COMDAT
; _this$ = ecx

; 163  : 	SM_SCALAR ZDelta() const { return pos_.dz_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::ZDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YDelta@VuEntity@@QBEMXZ PROC				; VuEntity::YDelta, COMDAT
; _this$ = ecx

; 162  : 	SM_SCALAR YDelta() const { return pos_.dy_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?YDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::YDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XDelta@VuEntity@@QBEMXZ PROC				; VuEntity::XDelta, COMDAT
; _this$ = ecx

; 161  : 	SM_SCALAR XDelta() const { return pos_.dx_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?XDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::XDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?atan@@YAMM@Z PROC					; atan, COMDAT

; 505  :         {return (atanf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atanf
	add	esp, 4
	pop	ebp
	ret	0
?atan@@YAMM@Z ENDP					; atan
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 404  :         {return ((float)atan((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_atanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
