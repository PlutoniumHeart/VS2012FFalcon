; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\Airframe\Roll.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
_DATA	SEGMENT
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	ORG $+4
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_DATA	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?Roll@AirframeClass@@AAEXXZ			; AirframeClass::Roll
PUBLIC	?RollInertia@AirframeClass@@AAEMM@Z		; AirframeClass::RollInertia
PUBLIC	?RollIt@AirframeClass@@QAEXMM@Z			; AirframeClass::RollIt
PUBLIC	?GetMaxCurrentRollRate@AirframeClass@@QAEMXZ	; AirframeClass::GetMaxCurrentRollRate
PUBLIC	?IsSet@AirframeClass@@QBEHH@Z			; AirframeClass::IsSet
PUBLIC	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ		; VuBin<SimWeaponClass>::operator bool
PUBLIC	?IsF16@AircraftClass@@QAEHXZ			; AircraftClass::IsF16
PUBLIC	?NumHardpoints@SMSBaseClass@@QAEHXZ		; SMSBaseClass::NumHardpoints
PUBLIC	__real@00000000
PUBLIC	__real@3c8efa34
PUBLIC	__real@3d23d70a
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e800000
PUBLIC	__real@3e99999a
PUBLIC	__real@3ea8f5c3
PUBLIC	__real@3ecccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f19999a
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f800000
PUBLIC	__real@3fa66666
PUBLIC	__real@40200000
PUBLIC	__real@40a00000
PUBLIC	__real@42200000
PUBLIC	__real@42652ee1
PUBLIC	__real@435c0000
PUBLIC	__real@437a0000
PUBLIC	__real@43fa0000
PUBLIC	__real@44fa0000
PUBLIC	__real@457a0000
PUBLIC	__real@c0a00000
PUBLIC	__real@c2200000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_fabs:PROC
EXTRN	?Limit@SIMLIB_MATH_CLASS@@QAEMMMM@Z:PROC	; SIMLIB_MATH_CLASS::Limit
EXTRN	?FLTust@SIMLIB_MATH_CLASS@@QAEMMMMQAM@Z:PROC	; SIMLIB_MATH_CLASS::FLTust
EXTRN	?TwodInterp@SIMLIB_MATH_CLASS@@QAEMMMPBM00HHPAH1@Z:PROC ; SIMLIB_MATH_CLASS::TwodInterp
EXTRN	?GetLimiter@LimiterMgrClass@@QAEPAVLimiter@@HH@Z:PROC ; LimiterMgrClass::GetLimiter
EXTRN	?SimLibMinorFrameTime@@3MA:DWORD		; SimLibMinorFrameTime
EXTRN	?Math@@3VSIMLIB_MATH_CLASS@@A:BYTE		; Math
EXTRN	?aeroDataset@@3PAVAeroDataSet@@A:DWORD		; aeroDataset
EXTRN	?gLimiterMgr@@3PAVLimiterMgrClass@@A:DWORD	; gLimiterMgr
EXTRN	?g_bNewFm@@3_NA:BYTE				; g_bNewFm
EXTRN	?g_bRollInertia@@3_NA:BYTE			; g_bRollInertia
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c2200000
CONST	SEGMENT
__real@c2200000 DD 0c2200000r			; -40
CONST	ENDS
;	COMDAT __real@c0a00000
CONST	SEGMENT
__real@c0a00000 DD 0c0a00000r			; -5
CONST	ENDS
;	COMDAT __real@457a0000
CONST	SEGMENT
__real@457a0000 DD 0457a0000r			; 4000
CONST	ENDS
;	COMDAT __real@44fa0000
CONST	SEGMENT
__real@44fa0000 DD 044fa0000r			; 2000
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@437a0000
CONST	SEGMENT
__real@437a0000 DD 0437a0000r			; 250
CONST	ENDS
;	COMDAT __real@435c0000
CONST	SEGMENT
__real@435c0000 DD 0435c0000r			; 220
CONST	ENDS
;	COMDAT __real@42652ee1
CONST	SEGMENT
__real@42652ee1 DD 042652ee1r			; 57.2958
CONST	ENDS
;	COMDAT __real@42200000
CONST	SEGMENT
__real@42200000 DD 042200000r			; 40
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40200000
CONST	SEGMENT
__real@40200000 DD 040200000r			; 2.5
CONST	ENDS
;	COMDAT __real@3fa66666
CONST	SEGMENT
__real@3fa66666 DD 03fa66666r			; 1.3
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3ea8f5c3
CONST	SEGMENT
__real@3ea8f5c3 DD 03ea8f5c3r			; 0.33
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3d23d70a
CONST	SEGMENT
__real@3d23d70a DD 03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?NumHardpoints@SMSBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NumHardpoints@SMSBaseClass@@QAEHXZ PROC		; SMSBaseClass::NumHardpoints, COMDAT
; _this$ = ecx

; 87   : 	int NumHardpoints (void) {return numHardpoints;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?NumHardpoints@SMSBaseClass@@QAEHXZ ENDP		; SMSBaseClass::NumHardpoints
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?IsF16@AircraftClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsF16@AircraftClass@@QAEHXZ PROC			; AircraftClass::IsF16, COMDAT
; _this$ = ecx

; 335  : 	int            IsF16 (void) {return (acFlags & isF16 ? TRUE : FALSE);}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+964]
	and	ecx, 1
	je	SHORT $LN3@IsF16
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsF16
$LN3@IsF16:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsF16:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsF16@AircraftClass@@QAEHXZ ENDP			; AircraftClass::IsF16
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ PROC		; VuBin<SimWeaponClass>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ ENDP		; VuBin<SimWeaponClass>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?IsSet@AirframeClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_testFlag$ = 8						; size = 4
?IsSet@AirframeClass@@QBEHH@Z PROC			; AirframeClass::IsSet, COMDAT
; _this$ = ecx

; 1216 : 	int IsSet (int testFlag) const {return flags & testFlag ? 1 : 0;}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	and	ecx, DWORD PTR _testFlag$[ebp]
	je	SHORT $LN3@IsSet
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSet
$LN3@IsSet:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSet:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSet@AirframeClass@@QBEHH@Z ENDP			; AirframeClass::IsSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\roll.cpp
_TEXT	SEGMENT
_maxcurrentrollrate$ = -8				; size = 4
_this$ = -4						; size = 4
?GetMaxCurrentRollRate@AirframeClass@@QAEMXZ PROC	; AirframeClass::GetMaxCurrentRollRate
; _this$ = ecx

; 233  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 234  : 	float maxcurrentrollrate = Math.TwodInterp (alpha, qbar, rollCmd->alpha, rollCmd->qbar, 
; 235  : 		rollCmd->roll, rollCmd->numAlpha, rollCmd->numQbar,
; 236  : 		&curRollAlphaBreak, &curRollQbarBreak);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 808				; 00000328H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 804				; 00000324H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+644]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1152]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?Math@@3VSIMLIB_MATH_CLASS@@A ; Math
	call	?TwodInterp@SIMLIB_MATH_CLASS@@QAEMMMPBM00HHPAH1@Z ; SIMLIB_MATH_CLASS::TwodInterp
	fstp	DWORD PTR _maxcurrentrollrate$[ebp]

; 237  : 
; 238  : 	return maxcurrentrollrate;

	fld	DWORD PTR _maxcurrentrollrate$[ebp]

; 239  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetMaxCurrentRollRate@AirframeClass@@QAEMXZ ENDP	; AirframeClass::GetMaxCurrentRollRate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\roll.cpp
_TEXT	SEGMENT
_addInertia$ = -12					; size = 4
_inertia$ = -8						; size = 4
_this$ = -4						; size = 4
_pscmd$ = 8						; size = 4
_dt$ = 12						; size = 4
?RollIt@AirframeClass@@QAEXMM@Z PROC			; AirframeClass::RollIt
; _this$ = ecx

; 191  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 192  : 	//TJL 12/11/03
; 193  : 	float inertia = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _inertia$[ebp], xmm0

; 194  : 	float addInertia;
; 195  :    // Limit the command w/ roll limit
; 196  :    if (maxRoll < aeroDataset[vehicleIndex].inputData[8])

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+92]
	imul	ecx, 220				; 000000dcH
	add	ecx, DWORD PTR ?aeroDataset@@3PAVAeroDataSet@@A ; aeroDataset
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx+16]
	comiss	xmm0, DWORD PTR [eax+64]
	jbe	$LN3@RollIt

; 197  :    {
; 198  :       if (phi > maxRoll)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1164]
	comiss	xmm0, DWORD PTR [edx+64]
	jbe	SHORT $LN7@RollIt

; 199  :       {
; 200  :          pscmd = (maxRoll - phi) * kr01;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+64]
	subss	xmm0, DWORD PTR [ecx+1164]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+1412]
	movss	DWORD PTR _pscmd$[ebp], xmm0
	jmp	SHORT $LN5@RollIt
$LN7@RollIt:

; 201  :       }
; 202  :       else if (phi < -maxRoll)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+64]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [ecx+1164]
	jbe	SHORT $LN5@RollIt

; 203  :       {
; 204  :          pscmd = (maxRoll - phi) * kr01;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+64]
	subss	xmm0, DWORD PTR [eax+1164]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+1412]
	movss	DWORD PTR _pscmd$[ebp], xmm0
$LN5@RollIt:

; 205  :       }
; 206  : 
; 207  :       // Scale cmd based on max delta;
; 208  :       if (maxRollDelta == 0.0F)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+68]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN4@RollIt

; 209  :          pscmd = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pscmd$[ebp], xmm0

; 210  :       else

	jmp	SHORT $LN3@RollIt
$LN4@RollIt:

; 211  :          pscmd *= 1.0F - startRoll/maxRollDelta;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+72]
	divss	xmm0, DWORD PTR [ecx+68]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _pscmd$[ebp]
	movss	DWORD PTR _pscmd$[ebp], xmm1
$LN3@RollIt:

; 212  :    }
; 213  : 
; 214  :    //TJL 01/06/04 Make Roll Inertia a config item
; 215  :    if (g_bRollInertia)

	movzx	edx, BYTE PTR ?g_bRollInertia@@3_NA	; g_bRollInertia
	test	edx, edx
	je	$LN2@RollIt

; 216  :    {
; 217  : 
; 218  : 	//TJL 12/11/03 Call RollInertia
; 219  : 	RollInertia(inertia);

	push	ecx
	movss	xmm0, DWORD PTR _inertia$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RollInertia@AirframeClass@@AAEMM@Z	; AirframeClass::RollInertia
	fstp	ST(0)

; 220  : 	addInertia = RollInertia(inertia);

	push	ecx
	movss	xmm0, DWORD PTR _inertia$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RollInertia@AirframeClass@@AAEMM@Z	; AirframeClass::RollInertia
	fstp	DWORD PTR _addInertia$[ebp]

; 221  : 	pstab  = Math.FLTust(pscmd,tr01 * (auxaeroData->rollMomentum + addInertia),dt,oldr01);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 404				; 00000194H
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [edx+188]
	addss	xmm0, DWORD PTR _addInertia$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+1404]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pscmd$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?Math@@3VSIMLIB_MATH_CLASS@@A ; Math
	call	?FLTust@SIMLIB_MATH_CLASS@@QAEMMMMQAM@Z	; SIMLIB_MATH_CLASS::FLTust
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+668]

; 222  :    }
; 223  : 
; 224  :    else

	jmp	SHORT $LN1@RollIt
$LN2@RollIt:

; 225  :    {
; 226  : 	// JB 010714 mult by the momentum
; 227  : 	pstab  = Math.FLTust(pscmd,tr01 * auxaeroData->rollMomentum,dt,oldr01);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 404				; 00000194H
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1404]
	mulss	xmm0, DWORD PTR [ecx+188]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pscmd$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?Math@@3VSIMLIB_MATH_CLASS@@A ; Math
	call	?FLTust@SIMLIB_MATH_CLASS@@QAEMMMMQAM@Z	; SIMLIB_MATH_CLASS::FLTust
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+668]
$LN1@RollIt:

; 228  :    }
; 229  : 
; 230  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?RollIt@AirframeClass@@QAEXMM@Z ENDP			; AirframeClass::RollIt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\roll.cpp
_TEXT	SEGMENT
_hasGun$ = -56						; size = 4
_station$ = -52						; size = 4
_wcTankCount$ = -48					; size = 4
_hasSamWpn$ = -44					; size = 4
_hasCamera$ = -40					; size = 4
_hasRocket$ = -36					; size = 4
_hasGBU$ = -32						; size = 4
_hasBomb$ = -28						; size = 4
_hasHARM$ = -24						; size = 4
_hasAGMissile$ = -20					; size = 4
_haswcTank$ = -16					; size = 4
_inertiaTank$ = -12					; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_inertia$ = 8						; size = 4
?RollInertia@AirframeClass@@AAEMM@Z PROC		; AirframeClass::RollInertia
; _this$ = ecx

; 243  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 244  : 	//AircraftClass* self;
; 245  : 	//SMSClass* Sms;
; 246  : 	int station = 0;

	mov	DWORD PTR _station$[ebp], 0

; 247  : 	int i;
; 248  : 	int hasAGMissile = 0;

	mov	DWORD PTR _hasAGMissile$[ebp], 0

; 249  :     int hasBomb = 0;

	mov	DWORD PTR _hasBomb$[ebp], 0

; 250  :     int hasHARM = 0;

	mov	DWORD PTR _hasHARM$[ebp], 0

; 251  :     int hasGun = 0;

	mov	DWORD PTR _hasGun$[ebp], 0

; 252  :     int hasCamera = 0;

	mov	DWORD PTR _hasCamera$[ebp], 0

; 253  :     int hasRocket = 0;

	mov	DWORD PTR _hasRocket$[ebp], 0

; 254  :     int hasGBU = 0;

	mov	DWORD PTR _hasGBU$[ebp], 0

; 255  : 	int hasSamWpn = 0;

	mov	DWORD PTR _hasSamWpn$[ebp], 0

; 256  : 	int haswcTank = 0;

	mov	DWORD PTR _haswcTank$[ebp], 0

; 257  : 	int wcTankCount = 0;

	mov	DWORD PTR _wcTankCount$[ebp], 0

; 258  : 	float inertiaTank = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _inertiaTank$[ebp], xmm0

; 259  : 
; 260  : 
; 261  : 	for (i=0; i<platform->Sms->NumHardpoints(); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN47@RollInerti
$LN46@RollInerti:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN47@RollInerti:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	ecx, DWORD PTR [edx+940]
	call	?NumHardpoints@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumHardpoints
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN45@RollInerti

; 262  : 	{
; 263  :       // Check for various stores
; 264  :       if (platform->Sms->hardPoint[i]->weaponPointer && platform->Sms->hardPoint[i]->GetWeaponClass() == wcAgmWpn)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR [ecx+940]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4]
	add	ecx, 12					; 0000000cH
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN44@RollInerti
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR [ecx+940]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	eax, DWORD PTR [ecx+940]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+164]
	call	eax
	cmp	eax, 6
	jne	SHORT $LN44@RollInerti

; 265  :       {
; 266  :          hasAGMissile += 1;

	mov	ecx, DWORD PTR _hasAGMissile$[ebp]
	add	ecx, 1
	mov	DWORD PTR _hasAGMissile$[ebp], ecx
	jmp	$LN30@RollInerti
$LN44@RollInerti:

; 267  :       }
; 268  :       else if (platform->Sms->hardPoint[i]->weaponPointer && platform->Sms->hardPoint[i]->GetWeaponClass() == wcHARMWpn)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	add	ecx, 12					; 0000000cH
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN42@RollInerti
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	edx, DWORD PTR [eax+940]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [esi+164]
	call	eax
	cmp	eax, 7
	jne	SHORT $LN42@RollInerti

; 269  :       {
; 270  :          hasHARM +=1;

	mov	ecx, DWORD PTR _hasHARM$[ebp]
	add	ecx, 1
	mov	DWORD PTR _hasHARM$[ebp], ecx
	jmp	$LN30@RollInerti
$LN42@RollInerti:

; 271  :       }
; 272  :       else if (platform->Sms->hardPoint[i]->weaponPointer && platform->Sms->hardPoint[i]->GetWeaponClass() == wcBombWpn)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	add	ecx, 12					; 0000000cH
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN40@RollInerti
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	edx, DWORD PTR [eax+940]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [esi+164]
	call	eax
	cmp	eax, 2
	jne	SHORT $LN40@RollInerti

; 273  :       {
; 274  : 		 hasBomb +=1;

	mov	ecx, DWORD PTR _hasBomb$[ebp]
	add	ecx, 1
	mov	DWORD PTR _hasBomb$[ebp], ecx
	jmp	$LN30@RollInerti
$LN40@RollInerti:

; 275  : 	  }
; 276  : 
; 277  :       else if (platform->Sms->hardPoint[i]->weaponPointer && platform->Sms->hardPoint[i]->GetWeaponClass() == wcGbuWpn)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	add	ecx, 12					; 0000000cH
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN38@RollInerti
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	edx, DWORD PTR [eax+940]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [esi+164]
	call	eax
	cmp	eax, 9
	jne	SHORT $LN38@RollInerti

; 278  :       {
; 279  :          hasGBU +=1;

	mov	ecx, DWORD PTR _hasGBU$[ebp]
	add	ecx, 1
	mov	DWORD PTR _hasGBU$[ebp], ecx
	jmp	$LN30@RollInerti
$LN38@RollInerti:

; 280  :       }
; 281  :       else if (platform->Sms->hardPoint[i]->weaponPointer && platform->Sms->hardPoint[i]->GetWeaponClass() == wcRocketWpn)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	add	ecx, 12					; 0000000cH
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN36@RollInerti
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	edx, DWORD PTR [eax+940]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [esi+164]
	call	eax
	cmp	eax, 1
	jne	SHORT $LN36@RollInerti

; 282  :       {
; 283  :          hasRocket +=1;

	mov	ecx, DWORD PTR _hasRocket$[ebp]
	add	ecx, 1
	mov	DWORD PTR _hasRocket$[ebp], ecx
	jmp	$LN30@RollInerti
$LN36@RollInerti:

; 284  :       }
; 285  :       else if (platform->Sms->hardPoint[i]->weaponPointer && platform->Sms->hardPoint[i]->GetWeaponClass() == wcCamera)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	add	ecx, 12					; 0000000cH
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN34@RollInerti
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	edx, DWORD PTR [eax+940]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [esi+164]
	call	eax
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN34@RollInerti

; 286  :       {
; 287  :          hasCamera +=1;

	mov	ecx, DWORD PTR _hasCamera$[ebp]
	add	ecx, 1
	mov	DWORD PTR _hasCamera$[ebp], ecx
	jmp	$LN30@RollInerti
$LN34@RollInerti:

; 288  :       }
; 289  : 	  else if (platform->Sms->hardPoint[i]->weaponPointer && platform->Sms->hardPoint[i]->GetWeaponClass() == wcSamWpn)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	add	ecx, 12					; 0000000cH
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN32@RollInerti
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	edx, DWORD PTR [eax+940]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [esi+164]
	call	eax
	cmp	eax, 8
	jne	SHORT $LN32@RollInerti

; 290  :       {
; 291  :          hasSamWpn +=1;

	mov	ecx, DWORD PTR _hasSamWpn$[ebp]
	add	ecx, 1
	mov	DWORD PTR _hasSamWpn$[ebp], ecx
	jmp	SHORT $LN30@RollInerti
$LN32@RollInerti:

; 292  :       }
; 293  : 	  else if (platform->Sms->hardPoint[i]->weaponPointer && platform->Sms->hardPoint[i]->GetWeaponClass() == wcTank)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	add	ecx, 12					; 0000000cH
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN30@RollInerti
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	edx, DWORD PTR [eax+940]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [esi+164]
	call	eax
	cmp	eax, 5
	jne	SHORT $LN30@RollInerti

; 294  :       {
; 295  :          haswcTank +=1;

	mov	ecx, DWORD PTR _haswcTank$[ebp]
	add	ecx, 1
	mov	DWORD PTR _haswcTank$[ebp], ecx

; 296  : 		 //Add this so we can divide the inertia by the number of tanks 
; 297  : 		 //since externalFuel is one value and fuel isn't recorded per tank
; 298  : 		 wcTankCount = haswcTank;

	mov	edx, DWORD PTR _haswcTank$[ebp]
	mov	DWORD PTR _wcTankCount$[ebp], edx
$LN30@RollInerti:

; 299  :       }
; 300  : 
; 301  :    }

	jmp	$LN46@RollInerti
$LN45@RollInerti:

; 302  : 
; 303  : //TJL 12/12/03 We just counted the loadout, now assign inertia score based on loadout
; 304  : 	while (hasAGMissile > 0)

	cmp	DWORD PTR _hasAGMissile$[ebp], 0
	jle	SHORT $LN28@RollInerti

; 305  : 	{
; 306  : 		inertia += 0.2f;

	movss	xmm0, DWORD PTR _inertia$[ebp]
	addss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _inertia$[ebp], xmm0

; 307  : 		hasAGMissile --;

	mov	eax, DWORD PTR _hasAGMissile$[ebp]
	sub	eax, 1
	mov	DWORD PTR _hasAGMissile$[ebp], eax

; 308  : 	}

	jmp	SHORT $LN45@RollInerti
$LN28@RollInerti:

; 309  : 		
; 310  : 	while (hasHARM > 0)

	cmp	DWORD PTR _hasHARM$[ebp], 0
	jle	SHORT $LN26@RollInerti

; 311  : 	{
; 312  : 		inertia += 0.1f;

	movss	xmm0, DWORD PTR _inertia$[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _inertia$[ebp], xmm0

; 313  : 		hasHARM--;

	mov	ecx, DWORD PTR _hasHARM$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _hasHARM$[ebp], ecx

; 314  : 	}

	jmp	SHORT $LN28@RollInerti
$LN26@RollInerti:

; 315  : 		
; 316  : 	while (hasBomb > 0)

	cmp	DWORD PTR _hasBomb$[ebp], 0
	jle	SHORT $LN24@RollInerti

; 317  : 	{
; 318  : 		inertia += 0.3f;

	movss	xmm0, DWORD PTR _inertia$[ebp]
	addss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR _inertia$[ebp], xmm0

; 319  : 		hasBomb--;

	mov	edx, DWORD PTR _hasBomb$[ebp]
	sub	edx, 1
	mov	DWORD PTR _hasBomb$[ebp], edx

; 320  : 	}

	jmp	SHORT $LN26@RollInerti
$LN24@RollInerti:

; 321  : 		
; 322  : 	while (hasGBU > 0)

	cmp	DWORD PTR _hasGBU$[ebp], 0
	jle	SHORT $LN22@RollInerti

; 323  : 	{
; 324  : 		inertia += 0.3f;

	movss	xmm0, DWORD PTR _inertia$[ebp]
	addss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR _inertia$[ebp], xmm0

; 325  : 		hasGBU--;

	mov	eax, DWORD PTR _hasGBU$[ebp]
	sub	eax, 1
	mov	DWORD PTR _hasGBU$[ebp], eax

; 326  : 	}

	jmp	SHORT $LN24@RollInerti
$LN22@RollInerti:

; 327  : 	
; 328  : 	while (hasRocket > 0)

	cmp	DWORD PTR _hasRocket$[ebp], 0
	jle	SHORT $LN20@RollInerti

; 329  : 	{
; 330  : 		inertia += 0.1f;

	movss	xmm0, DWORD PTR _inertia$[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _inertia$[ebp], xmm0

; 331  : 		hasRocket--;

	mov	ecx, DWORD PTR _hasRocket$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _hasRocket$[ebp], ecx

; 332  : 	}

	jmp	SHORT $LN22@RollInerti
$LN20@RollInerti:

; 333  : 
; 334  : 	while (hasCamera > 0)

	cmp	DWORD PTR _hasCamera$[ebp], 0
	jle	SHORT $LN18@RollInerti

; 335  : 	{
; 336  : 		inertia += 0.1f;

	movss	xmm0, DWORD PTR _inertia$[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _inertia$[ebp], xmm0

; 337  : 		hasCamera--;

	mov	edx, DWORD PTR _hasCamera$[ebp]
	sub	edx, 1
	mov	DWORD PTR _hasCamera$[ebp], edx

; 338  : 	}

	jmp	SHORT $LN20@RollInerti
$LN18@RollInerti:

; 339  : 
; 340  : 	while (hasSamWpn > 0)

	cmp	DWORD PTR _hasSamWpn$[ebp], 0
	jle	SHORT $LN16@RollInerti

; 341  : 	{
; 342  : 		inertia += 0.1f;

	movss	xmm0, DWORD PTR _inertia$[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _inertia$[ebp], xmm0

; 343  : 		hasSamWpn--;

	mov	eax, DWORD PTR _hasSamWpn$[ebp]
	sub	eax, 1
	mov	DWORD PTR _hasSamWpn$[ebp], eax

; 344  : 	}

	jmp	SHORT $LN18@RollInerti
$LN16@RollInerti:

; 345  : 
; 346  : 	while (haswcTank > 0 && externalFuel > 4000)

	cmp	DWORD PTR _haswcTank$[ebp], 0
	jle	SHORT $LN14@RollInerti
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+32]
	comiss	xmm0, DWORD PTR __real@457a0000
	jbe	SHORT $LN14@RollInerti

; 347  : 	{
; 348  : 		inertiaTank += 0.5f;

	movss	xmm0, DWORD PTR _inertiaTank$[ebp]
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _inertiaTank$[ebp], xmm0

; 349  : 		haswcTank--;

	mov	edx, DWORD PTR _haswcTank$[ebp]
	sub	edx, 1
	mov	DWORD PTR _haswcTank$[ebp], edx

; 350  : 	}

	jmp	SHORT $LN16@RollInerti
$LN14@RollInerti:

; 351  : 	
; 352  : 	while (haswcTank > 0 && (externalFuel <= 4000 && externalFuel > 2000))

	cmp	DWORD PTR _haswcTank$[ebp], 0
	jle	SHORT $LN12@RollInerti
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@457a0000
	comiss	xmm0, DWORD PTR [eax+32]
	jb	SHORT $LN12@RollInerti
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+32]
	comiss	xmm0, DWORD PTR __real@44fa0000
	jbe	SHORT $LN12@RollInerti

; 353  : 	{
; 354  : 		inertiaTank += 0.4f;

	movss	xmm0, DWORD PTR _inertiaTank$[ebp]
	addss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR _inertiaTank$[ebp], xmm0

; 355  : 		haswcTank--;

	mov	edx, DWORD PTR _haswcTank$[ebp]
	sub	edx, 1
	mov	DWORD PTR _haswcTank$[ebp], edx

; 356  : 	}

	jmp	SHORT $LN14@RollInerti
$LN12@RollInerti:

; 357  : 
; 358  : 	while (haswcTank > 0 && (externalFuel <= 2000 && externalFuel > 500)  )

	cmp	DWORD PTR _haswcTank$[ebp], 0
	jle	SHORT $LN10@RollInerti
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@44fa0000
	comiss	xmm0, DWORD PTR [eax+32]
	jb	SHORT $LN10@RollInerti
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+32]
	comiss	xmm0, DWORD PTR __real@43fa0000
	jbe	SHORT $LN10@RollInerti

; 359  : 	{
; 360  : 		inertiaTank += 0.3f;

	movss	xmm0, DWORD PTR _inertiaTank$[ebp]
	addss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR _inertiaTank$[ebp], xmm0

; 361  : 		haswcTank--;

	mov	edx, DWORD PTR _haswcTank$[ebp]
	sub	edx, 1
	mov	DWORD PTR _haswcTank$[ebp], edx

; 362  : 	}

	jmp	SHORT $LN12@RollInerti
$LN10@RollInerti:

; 363  : 
; 364  :  	while (haswcTank > 0 && (externalFuel <= 500)  )

	cmp	DWORD PTR _haswcTank$[ebp], 0
	jle	SHORT $LN8@RollInerti
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43fa0000
	comiss	xmm0, DWORD PTR [eax+32]
	jb	SHORT $LN8@RollInerti

; 365  : 	{
; 366  : 		inertiaTank += 0.2f;

	movss	xmm0, DWORD PTR _inertiaTank$[ebp]
	addss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _inertiaTank$[ebp], xmm0

; 367  : 		haswcTank--;

	mov	ecx, DWORD PTR _haswcTank$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _haswcTank$[ebp], ecx

; 368  : 	}

	jmp	SHORT $LN10@RollInerti
$LN8@RollInerti:

; 369  : 
; 370  : 	// Now reduce inertia by number of fuel tanks since external Fuel is one value
; 371  : 	if (wcTankCount == 4)

	cmp	DWORD PTR _wcTankCount$[ebp], 4
	jne	SHORT $LN7@RollInerti

; 372  : 	{
; 373  : 		inertiaTank = inertiaTank * 0.25f;

	movss	xmm0, DWORD PTR _inertiaTank$[ebp]
	mulss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR _inertiaTank$[ebp], xmm0

; 374  : 		inertia = inertia + inertiaTank;

	movss	xmm0, DWORD PTR _inertia$[ebp]
	addss	xmm0, DWORD PTR _inertiaTank$[ebp]
	movss	DWORD PTR _inertia$[ebp], xmm0
	jmp	SHORT $LN1@RollInerti
$LN7@RollInerti:

; 375  : 	}
; 376  : 
; 377  : 	else if (wcTankCount == 3)

	cmp	DWORD PTR _wcTankCount$[ebp], 3
	jne	SHORT $LN5@RollInerti

; 378  : 	{
; 379  : 		inertiaTank = inertiaTank * 0.33f;

	movss	xmm0, DWORD PTR _inertiaTank$[ebp]
	mulss	xmm0, DWORD PTR __real@3ea8f5c3
	movss	DWORD PTR _inertiaTank$[ebp], xmm0

; 380  : 		inertia = inertia + inertiaTank;

	movss	xmm0, DWORD PTR _inertia$[ebp]
	addss	xmm0, DWORD PTR _inertiaTank$[ebp]
	movss	DWORD PTR _inertia$[ebp], xmm0
	jmp	SHORT $LN1@RollInerti
$LN5@RollInerti:

; 381  : 	}
; 382  : 
; 383  : 	else if (wcTankCount == 2)

	cmp	DWORD PTR _wcTankCount$[ebp], 2
	jne	SHORT $LN3@RollInerti

; 384  : 	{
; 385  : 		inertiaTank = inertiaTank * 0.5f;

	movss	xmm0, DWORD PTR _inertiaTank$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _inertiaTank$[ebp], xmm0

; 386  : 		inertia = inertia + inertiaTank;

	movss	xmm0, DWORD PTR _inertia$[ebp]
	addss	xmm0, DWORD PTR _inertiaTank$[ebp]
	movss	DWORD PTR _inertia$[ebp], xmm0
	jmp	SHORT $LN1@RollInerti
$LN3@RollInerti:

; 387  : 	}
; 388  : 	else if (wcTankCount == 1)

	cmp	DWORD PTR _wcTankCount$[ebp], 1
	jne	SHORT $LN1@RollInerti

; 389  : 	{
; 390  : 		inertia = inertia + inertiaTank;

	movss	xmm0, DWORD PTR _inertia$[ebp]
	addss	xmm0, DWORD PTR _inertiaTank$[ebp]
	movss	DWORD PTR _inertia$[ebp], xmm0
$LN1@RollInerti:

; 391  : 	}
; 392  : 
; 393  : 
; 394  : 	return inertia;

	fld	DWORD PTR _inertia$[ebp]

; 395  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?RollInertia@AirframeClass@@AAEMM@Z ENDP		; AirframeClass::RollInertia
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\roll.cpp
_TEXT	SEGMENT
tv573 = -96						; size = 4
tv563 = -92						; size = 4
tv519 = -88						; size = 4
tv505 = -84						; size = 4
tv472 = -80						; size = 4
tv461 = -76						; size = 4
tv619 = -72						; size = 4
tv454 = -68						; size = 4
_asymmRoll$1 = -64					; size = 4
tv323 = -60						; size = 4
tv313 = -56						; size = 4
tv264 = -52						; size = 4
tv245 = -48						; size = 4
tv221 = -44						; size = 4
_alphaError$ = -40					; size = 4
tv133 = -36						; size = 4
tv130 = -32						; size = 4
tv87 = -28						; size = 4
_engine2$2 = -24					; size = 4
_engine1$3 = -20					; size = 4
_speedswitch$4 = -16					; size = 4
_limiter$ = -12						; size = 4
_pscmd$ = -8						; size = 4
_this$ = -4						; size = 4
?Roll@AirframeClass@@AAEXXZ PROC			; AirframeClass::Roll
; _this$ = ecx

; 71   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 72   : float pscmd, alphaError;
; 73   : Limiter *limiter = NULL;

	mov	DWORD PTR _limiter$[ebp], 0

; 74   : 	
; 75   : 	if(IsSet(Planted))

	push	4096					; 00001000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN30@Roll

; 76   : 		return;

	jmp	$LN31@Roll
$LN30@Roll:

; 77   : 	
; 78   : 	alphaError = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _alphaError$[ebp], xmm0

; 79   : 
; 80   :    /*--------------*/
; 81   :    /* command path */
; 82   :    /*--------------*/
; 83   :    pscmd  = Math.Limit((rshape*kr01),-kr01,kr01);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1412]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1412]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+660]
	mulss	xmm0, DWORD PTR [eax+1412]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?Math@@3VSIMLIB_MATH_CLASS@@A ; Math
	call	?Limit@SIMLIB_MATH_CLASS@@QAEMMMM@Z	; SIMLIB_MATH_CLASS::Limit
	fstp	DWORD PTR _pscmd$[ebp]

; 84   : 	pscmd = min ( max (pscmd, -kr01), kr01);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1412]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _pscmd$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN33@Roll
	movss	xmm0, DWORD PTR _pscmd$[ebp]
	movss	DWORD PTR tv87[ebp], xmm0
	jmp	SHORT $LN34@Roll
$LN33@Roll:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1412]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv87[ebp], xmm0
$LN34@Roll:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1412]
	comiss	xmm0, DWORD PTR tv87[ebp]
	jbe	SHORT $LN37@Roll
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1412]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _pscmd$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN35@Roll
	movss	xmm0, DWORD PTR _pscmd$[ebp]
	movss	DWORD PTR tv130[ebp], xmm0
	jmp	SHORT $LN36@Roll
$LN35@Roll:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1412]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv130[ebp], xmm0
$LN36@Roll:
	movss	xmm0, DWORD PTR tv130[ebp]
	movss	DWORD PTR tv133[ebp], xmm0
	jmp	SHORT $LN38@Roll
$LN37@Roll:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1412]
	movss	DWORD PTR tv133[ebp], xmm0
$LN38@Roll:
	movss	xmm0, DWORD PTR tv133[ebp]
	movss	DWORD PTR _pscmd$[ebp], xmm0

; 85   : 
; 86   : 	if( ((AircraftClass *)platform)->IsF16() )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?IsF16@AircraftClass@@QAEHXZ		; AircraftClass::IsF16
	test	eax, eax
	je	$LN29@Roll

; 87   : 	{
; 88   : 		alphaError = (float)(fabs(q*0.5F) + fabs(p))*0.1F*RTD;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1136]
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv454[ebp]
	movss	xmm0, DWORD PTR tv454[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm1, DWORD PTR [eax+1132]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv619[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv461[ebp]
	movss	xmm0, DWORD PTR tv619[ebp]
	addss	xmm0, DWORD PTR tv461[ebp]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR _alphaError$[ebp], xmm0

; 89   : 
; 90   : 		limiter = gLimiterMgr->GetLimiter(RollRateLimiter,vehicleIndex);

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+92]
	push	edx
	push	2
	mov	ecx, DWORD PTR ?gLimiterMgr@@3PAVLimiterMgrClass@@A ; gLimiterMgr
	call	?GetLimiter@LimiterMgrClass@@QAEPAVLimiter@@HH@Z ; LimiterMgrClass::GetLimiter
	mov	DWORD PTR _limiter$[ebp], eax

; 91   : 		if(limiter)

	cmp	DWORD PTR _limiter$[ebp], 0
	je	SHORT $LN28@Roll

; 92   : 			pscmd *= limiter->Limit(alpha - alphaError);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1152]
	subss	xmm0, DWORD PTR _alphaError$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _limiter$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _limiter$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	fstp	DWORD PTR tv472[ebp]
	movss	xmm0, DWORD PTR tv472[ebp]
	mulss	xmm0, DWORD PTR _pscmd$[ebp]
	movss	DWORD PTR _pscmd$[ebp], xmm0
$LN28@Roll:

; 93   : 
; 94   : 		float speedswitch = 250.0f;

	movss	xmm0, DWORD PTR __real@437a0000
	movss	DWORD PTR _speedswitch$4[ebp], xmm0

; 95   : 		
; 96   : 		if (g_bNewFm)

	movzx	ecx, BYTE PTR ?g_bNewFm@@3_NA		; g_bNewFm
	test	ecx, ecx
	je	SHORT $LN27@Roll

; 97   : 			speedswitch = 220.0f;

	movss	xmm0, DWORD PTR __real@435c0000
	movss	DWORD PTR _speedswitch$4[ebp], xmm0
$LN27@Roll:

; 98   : 
; 99   : 		if(vcas < speedswitch)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _speedswitch$4[ebp]
	comiss	xmm0, DWORD PTR [edx+1124]
	jbe	SHORT $LN26@Roll

; 100  : 			pscmd *= (vcas/speedswitch);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1124]
	divss	xmm0, DWORD PTR _speedswitch$4[ebp]
	mulss	xmm0, DWORD PTR _pscmd$[ebp]
	movss	DWORD PTR _pscmd$[ebp], xmm0
$LN26@Roll:

; 101  : 
; 102  : 		if(gearPos && g_bNewFm)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1552]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN25@Roll
	movzx	edx, BYTE PTR ?g_bNewFm@@3_NA		; g_bNewFm
	test	edx, edx
	je	SHORT $LN25@Roll

; 103  : 			pscmd *= 0.6f;

	movss	xmm0, DWORD PTR _pscmd$[ebp]
	mulss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR _pscmd$[ebp], xmm0
	jmp	SHORT $LN23@Roll
$LN25@Roll:

; 104  : 		else if (gearPos)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1552]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN23@Roll

; 105  : 		   pscmd *= 0.5f;

	movss	xmm0, DWORD PTR _pscmd$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _pscmd$[ebp], xmm0
$LN23@Roll:

; 106  : 
; 107  : 		if(IsSet(CATLimiterIII))

	push	2097152					; 00200000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN21@Roll

; 108  : 		{
; 109  : 			limiter = gLimiterMgr->GetLimiter(CatIIIRollRateLimiter,vehicleIndex);

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+92]
	push	edx
	push	7
	mov	ecx, DWORD PTR ?gLimiterMgr@@3PAVLimiterMgrClass@@A ; gLimiterMgr
	call	?GetLimiter@LimiterMgrClass@@QAEPAVLimiter@@HH@Z ; LimiterMgrClass::GetLimiter
	mov	DWORD PTR _limiter$[ebp], eax

; 110  : 			if(limiter)

	cmp	DWORD PTR _limiter$[ebp], 0
	je	SHORT $LN21@Roll

; 111  : 				pscmd = limiter->Limit(pscmd);

	push	ecx
	movss	xmm0, DWORD PTR _pscmd$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _limiter$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _limiter$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	fstp	DWORD PTR _pscmd$[ebp]
$LN21@Roll:

; 112  : 		}
; 113  : 
; 114  : 		if(fabs(pscmd) < 0.001)

	push	ecx
	movss	xmm0, DWORD PTR _pscmd$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv505[ebp]
	movss	xmm0, DWORD PTR tv505[ebp]
	cvtss2sd xmm0, xmm0
	movsd	xmm1, QWORD PTR __real@3f50624dd2f1a9fc
	comisd	xmm1, xmm0
	jbe	SHORT $LN20@Roll

; 115  : 			pscmd = -p;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1132]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _pscmd$[ebp], xmm0
$LN20@Roll:

; 116  : 	}
; 117  : 	else 

	jmp	SHORT $LN18@Roll
$LN29@Roll:

; 118  : 	{
; 119  : 		limiter = gLimiterMgr->GetLimiter(RollRateLimiter,vehicleIndex);

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+92]
	push	eax
	push	2
	mov	ecx, DWORD PTR ?gLimiterMgr@@3PAVLimiterMgrClass@@A ; gLimiterMgr
	call	?GetLimiter@LimiterMgrClass@@QAEPAVLimiter@@HH@Z ; LimiterMgrClass::GetLimiter
	mov	DWORD PTR _limiter$[ebp], eax

; 120  : 		if(limiter)

	cmp	DWORD PTR _limiter$[ebp], 0
	je	SHORT $LN18@Roll

; 121  : 			pscmd *= limiter->Limit(alpha);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1152]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _limiter$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _limiter$[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	fstp	DWORD PTR tv519[ebp]
	movss	xmm0, DWORD PTR tv519[ebp]
	mulss	xmm0, DWORD PTR _pscmd$[ebp]
	movss	DWORD PTR _pscmd$[ebp], xmm0
$LN18@Roll:

; 122  : 	}
; 123  : 
; 124  : 	
; 125  : 	if(!IsSet(Simplified))

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN15@Roll

; 126  : 	{		
; 127  : 		switch(stallMode)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1248]
	mov	DWORD PTR tv221[ebp], ecx
	cmp	DWORD PTR tv221[ebp], 6
	ja	$LN15@Roll
	mov	edx, DWORD PTR tv221[ebp]
	jmp	DWORD PTR $LN47@Roll[edx*4]
$LN14@Roll:

; 128  : 		{
; 129  : 		case None:
; 130  : 			if(assymetry * platform->platformAngles.cosmu > 0.0F)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1232]
	mulss	xmm0, DWORD PTR [ecx+384]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN13@Roll

; 131  : 				pscmd +=  max((assymetry/weight)* 0.04F, 0.0F)*(nzcgs - 1.0F);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1232]
	divss	xmm0, DWORD PTR [ecx+44]
	mulss	xmm0, DWORD PTR __real@3d23d70a
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN39@Roll
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1232]
	divss	xmm0, DWORD PTR [eax+44]
	mulss	xmm0, DWORD PTR __real@3d23d70a
	movss	DWORD PTR tv245[ebp], xmm0
	jmp	SHORT $LN40@Roll
$LN39@Roll:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv245[ebp], xmm0
$LN40@Roll:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+268]
	subss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR tv245[ebp]
	addss	xmm0, DWORD PTR _pscmd$[ebp]
	movss	DWORD PTR _pscmd$[ebp], xmm0

; 132  : 			else

	jmp	SHORT $LN12@Roll
$LN13@Roll:

; 133  : 				pscmd +=  min((assymetry/weight)* 0.04F, 0.0F)*(nzcgs - 1.0F);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1232]
	divss	xmm0, DWORD PTR [eax+44]
	mulss	xmm0, DWORD PTR __real@3d23d70a
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN41@Roll
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1232]
	divss	xmm0, DWORD PTR [edx+44]
	mulss	xmm0, DWORD PTR __real@3d23d70a
	movss	DWORD PTR tv264[ebp], xmm0
	jmp	SHORT $LN42@Roll
$LN41@Roll:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv264[ebp], xmm0
$LN42@Roll:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+268]
	subss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR tv264[ebp]
	addss	xmm0, DWORD PTR _pscmd$[ebp]
	movss	DWORD PTR _pscmd$[ebp], xmm0
$LN12@Roll:

; 134  : 			break;

	jmp	$LN15@Roll
$LN11@Roll:

; 135  : 
; 136  : 		case DeepStall:
; 137  : 			if(platform->platformAngles.cosphi > 0.0F)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR [edx+400]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN10@Roll

; 138  : 				pscmd = platform->platformAngles.sinphi*-5.0F*DTR;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR [ecx+396]
	mulss	xmm0, DWORD PTR __real@c0a00000
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR _pscmd$[ebp], xmm0

; 139  : 			else

	jmp	SHORT $LN9@Roll
$LN10@Roll:

; 140  : 				pscmd = platform->platformAngles.sinphi*5.0F*DTR;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [eax+396]
	mulss	xmm0, DWORD PTR __real@40a00000
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR _pscmd$[ebp], xmm0
$LN9@Roll:

; 141  : 
; 142  : 			pscmd += (oscillationTimer * 40.0F*max(0.0F,(0.4F - (float)fabs(r))*2.5F)*DTR*(max(0.0F,loadingFraction - 1.3F)) );

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1140]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv563[ebp]
	movss	xmm0, DWORD PTR __real@3ecccccd
	subss	xmm0, DWORD PTR tv563[ebp]
	mulss	xmm0, DWORD PTR __real@40200000
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN43@Roll
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv313[ebp], xmm0
	jmp	SHORT $LN44@Roll
$LN43@Roll:
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1140]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv573[ebp]
	movss	xmm0, DWORD PTR __real@3ecccccd
	subss	xmm0, DWORD PTR tv573[ebp]
	mulss	xmm0, DWORD PTR __real@40200000
	movss	DWORD PTR tv313[ebp], xmm0
$LN44@Roll:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1228]
	subss	xmm0, DWORD PTR __real@3fa66666
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN45@Roll
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv323[ebp], xmm0
	jmp	SHORT $LN46@Roll
$LN45@Roll:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1228]
	subss	xmm0, DWORD PTR __real@3fa66666
	movss	DWORD PTR tv323[ebp], xmm0
$LN46@Roll:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+712]
	mulss	xmm0, DWORD PTR __real@42200000
	mulss	xmm0, DWORD PTR tv313[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	mulss	xmm0, DWORD PTR tv323[ebp]
	addss	xmm0, DWORD PTR _pscmd$[ebp]
	movss	DWORD PTR _pscmd$[ebp], xmm0

; 143  : 			break;

	jmp	$LN15@Roll
$LN8@Roll:

; 144  : 
; 145  : 		case EnteringDeepStall:
; 146  : 			if(platform->platformAngles.cosphi > 0.0F)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR [ecx+400]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN7@Roll

; 147  : 				pscmd = platform->platformAngles.sinphi*-40.0F*DTR + rshape*kr01 *0.1F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [eax+396]
	mulss	xmm0, DWORD PTR __real@c2200000
	mulss	xmm0, DWORD PTR __real@3c8efa34
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+660]
	mulss	xmm1, DWORD PTR [edx+1412]
	mulss	xmm1, DWORD PTR __real@3dcccccd
	addss	xmm0, xmm1
	movss	DWORD PTR _pscmd$[ebp], xmm0

; 148  : 			else

	jmp	SHORT $LN6@Roll
$LN7@Roll:

; 149  : 				pscmd = platform->platformAngles.sinphi*40.0F*DTR + rshape*kr01 *0.1F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR [ecx+396]
	mulss	xmm0, DWORD PTR __real@42200000
	mulss	xmm0, DWORD PTR __real@3c8efa34
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+660]
	mulss	xmm1, DWORD PTR [eax+1412]
	mulss	xmm1, DWORD PTR __real@3dcccccd
	addss	xmm0, xmm1
	movss	DWORD PTR _pscmd$[ebp], xmm0
$LN6@Roll:

; 150  : 			break;

	jmp	SHORT $LN15@Roll
$LN5@Roll:

; 151  : 		case Spinning:
; 152  : 			pscmd = oscillationTimer*DTR;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+712]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR _pscmd$[ebp], xmm0

; 153  : 			break;

	jmp	SHORT $LN15@Roll
$LN4@Roll:

; 154  : 		case FlatSpin:
; 155  : 			pscmd = platform->platformAngles.sinphi*5.0F*DTR;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [eax+396]
	mulss	xmm0, DWORD PTR __real@40a00000
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR _pscmd$[ebp], xmm0
$LN15@Roll:

; 156  : 			break;
; 157  : 		}
; 158  : 
; 159  : 	}
; 160  : 
; 161  : 	//TJL 01/14/03 Multi-engine asymmetric thrust roll
; 162  :    if (auxaeroData->nEngines == 2 && IsSet(InAir))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+344], 2
	jne	$LN3@Roll
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN3@Roll

; 163  :    {
; 164  : 	   float asymmRoll = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _asymmRoll$1[ebp], xmm0

; 165  : 	   float engine1 = thrust1;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+192]
	movss	DWORD PTR _engine1$3[ebp], xmm0

; 166  : 	   float engine2 = thrust2;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+212]
	movss	DWORD PTR _engine2$2[ebp], xmm0

; 167  : 	   if (engine1 < 0.0f)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _engine1$3[ebp]
	jbe	SHORT $LN2@Roll

; 168  : 		   engine1 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _engine1$3[ebp], xmm0
$LN2@Roll:

; 169  : 	   if (engine2 < 0.0f)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _engine2$2[ebp]
	jbe	SHORT $LN1@Roll

; 170  : 		   engine2 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _engine2$2[ebp], xmm0
$LN1@Roll:

; 171  : 
; 172  : 	  // asymmRoll = (float)Abs(thrust1 - thrust2);
; 173  : 
; 174  : 	   //if (asymmRoll <= asymmRoll/2)
; 175  : 			//asymmRoll = (thrust1 - thrust2)*0.025f;
; 176  : 	   //else
; 177  : 	   asymmRoll = (engine1 - engine2)*0.05f;

	movss	xmm0, DWORD PTR _engine1$3[ebp]
	subss	xmm0, DWORD PTR _engine2$2[ebp]
	mulss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR _asymmRoll$1[ebp], xmm0

; 178  : 	   
; 179  : 	   pscmd = (pscmd + asymmRoll);

	movss	xmm0, DWORD PTR _pscmd$[ebp]
	addss	xmm0, DWORD PTR _asymmRoll$1[ebp]
	movss	DWORD PTR _pscmd$[ebp], xmm0
$LN3@Roll:

; 180  : 
; 181  :    }
; 182  : 
; 183  :    /*---------------------------------*/
; 184  :    /* closed loop roll response model */
; 185  :    /*---------------------------------*/
; 186  : 
; 187  :    RollIt(pscmd, SimLibMinorFrameTime);

	push	ecx
	movss	xmm0, DWORD PTR ?SimLibMinorFrameTime@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pscmd$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RollIt@AirframeClass@@QAEXMM@Z		; AirframeClass::RollIt
$LN31@Roll:

; 188  : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN47@Roll:
	DD	$LN14@Roll
	DD	$LN15@Roll
	DD	$LN15@Roll
	DD	$LN8@Roll
	DD	$LN11@Roll
	DD	$LN5@Roll
	DD	$LN4@Roll
?Roll@AirframeClass@@AAEXXZ ENDP			; AirframeClass::Roll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
