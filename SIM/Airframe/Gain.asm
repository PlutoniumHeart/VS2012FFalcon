; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\Airframe\Gain.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
_DATA	SEGMENT
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	ORG $+4
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_DATA	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	?Gains@AirframeClass@@AAEXXZ			; AirframeClass::Gains
PUBLIC	?IsEngineFlag@AirframeClass@@QAEHW4EngineFlags@1@@Z ; AirframeClass::IsEngineFlag
PUBLIC	?SetFlag@AirframeClass@@QAEXH@Z			; AirframeClass::SetFlag
PUBLIC	?ClearFlag@AirframeClass@@QAEXH@Z		; AirframeClass::ClearFlag
PUBLIC	?IsSet@AirframeClass@@QBEHH@Z			; AirframeClass::IsSet
PUBLIC	__real@00000000
PUBLIC	__real@3c23d70a
PUBLIC	__real@3c8efa34
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e19999a
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e800000
PUBLIC	__real@3e99999a
PUBLIC	__real@3ed4fdf4
PUBLIC	__real@3f000000
PUBLIC	__real@3f266666
PUBLIC	__real@3f333333
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3fa66666
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@40800000
PUBLIC	__real@41a00000
PUBLIC	__real@41c80000
PUBLIC	__real@4200b53f
PUBLIC	__real@42340000
PUBLIC	__real@42652ee1
PUBLIC	__real@42c80000
PUBLIC	__real@437a0000
PUBLIC	__real@ba919ef9
PUBLIC	__real@bf800000
PUBLIC	__real@c0000000
PUBLIC	__real@c200b53f
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	?TwodInterp@SIMLIB_MATH_CLASS@@QAEMMMPBM00HHPAH1@Z:PROC ; SIMLIB_MATH_CLASS::TwodInterp
EXTRN	?GetLimiter@LimiterMgrClass@@QAEPAVLimiter@@HH@Z:PROC ; LimiterMgrClass::GetLimiter
EXTRN	?Math@@3VSIMLIB_MATH_CLASS@@A:BYTE		; Math
EXTRN	?gLimiterMgr@@3PAVLimiterMgrClass@@A:DWORD	; gLimiterMgr
EXTRN	?g_bNewFm@@3_NA:BYTE				; g_bNewFm
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c200b53f
CONST	SEGMENT
__real@c200b53f DD 0c200b53fr			; -32.177
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@ba919ef9
CONST	SEGMENT
__real@ba919ef9 DD 0ba919ef9r			; -0.001111
CONST	ENDS
;	COMDAT __real@437a0000
CONST	SEGMENT
__real@437a0000 DD 0437a0000r			; 250
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42652ee1
CONST	SEGMENT
__real@42652ee1 DD 042652ee1r			; 57.2958
CONST	ENDS
;	COMDAT __real@42340000
CONST	SEGMENT
__real@42340000 DD 042340000r			; 45
CONST	ENDS
;	COMDAT __real@4200b53f
CONST	SEGMENT
__real@4200b53f DD 04200b53fr			; 32.177
CONST	ENDS
;	COMDAT __real@41c80000
CONST	SEGMENT
__real@41c80000 DD 041c80000r			; 25
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fa66666
CONST	SEGMENT
__real@3fa66666 DD 03fa66666r			; 1.3
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ed4fdf4
CONST	SEGMENT
__real@3ed4fdf4 DD 03ed4fdf4r			; 0.416
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?IsSet@AirframeClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_testFlag$ = 8						; size = 4
?IsSet@AirframeClass@@QBEHH@Z PROC			; AirframeClass::IsSet, COMDAT
; _this$ = ecx

; 1216 : 	int IsSet (int testFlag) const {return flags & testFlag ? 1 : 0;}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	and	ecx, DWORD PTR _testFlag$[ebp]
	je	SHORT $LN3@IsSet
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSet
$LN3@IsSet:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSet:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSet@AirframeClass@@QBEHH@Z ENDP			; AirframeClass::IsSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?ClearFlag@AirframeClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newFlag$ = 8						; size = 4
?ClearFlag@AirframeClass@@QAEXH@Z PROC			; AirframeClass::ClearFlag, COMDAT
; _this$ = ecx

; 1215 : 	void ClearFlag (int newFlag) {flags &= ~newFlag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _newFlag$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+88]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+88], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearFlag@AirframeClass@@QAEXH@Z ENDP			; AirframeClass::ClearFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?SetFlag@AirframeClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newFlag$ = 8						; size = 4
?SetFlag@AirframeClass@@QAEXH@Z PROC			; AirframeClass::SetFlag, COMDAT
; _this$ = ecx

; 1214 : 	void SetFlag (int newFlag) {flags |= newFlag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	or	ecx, DWORD PTR _newFlag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+88], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFlag@AirframeClass@@QAEXH@Z ENDP			; AirframeClass::SetFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?IsEngineFlag@AirframeClass@@QAEHW4EngineFlags@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_ef$ = 8						; size = 4
?IsEngineFlag@AirframeClass@@QAEHW4EngineFlags@1@@Z PROC ; AirframeClass::IsEngineFlag, COMDAT
; _this$ = ecx

; 1070 : 	int IsEngineFlag(EngineFlags ef) { return (engineFlags & ef) ? 1 : 0; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1676]
	and	ecx, DWORD PTR _ef$[ebp]
	je	SHORT $LN3@IsEngineFl
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsEngineFl
$LN3@IsEngineFl:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsEngineFl:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsEngineFlag@AirframeClass@@QAEHW4EngineFlags@1@@Z ENDP ; AirframeClass::IsEngineFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\gain.cpp
_TEXT	SEGMENT
tv1239 = -212						; size = 4
tv930 = -208						; size = 4
_ycoef2$ = -204						; size = 4
_nzalpha$ = -200					; size = 4
_psmax$ = -196						; size = 4
tv1061 = -192						; size = 4
_pfreq2$ = -188						; size = 4
tv947 = -184						; size = 4
tv1093 = -180						; size = 4
_pradcl$ = -176						; size = 4
_cosmuLim$ = -172					; size = 4
tv133 = -168						; size = 4
tv202 = -164						; size = 4
tv500 = -160						; size = 4
tv238 = -156						; size = 4
tv440 = -152						; size = 4
tv340 = -148						; size = 4
tv410 = -144						; size = 4
tv216 = -140						; size = 4
tv383 = -136						; size = 4
tv354 = -132						; size = 4
_pfreq1$ = -128						; size = 4
tv741 = -124						; size = 4
_pcoef2$ = -120						; size = 4
tv740 = -116						; size = 4
tv83 = -112						; size = 4
tv733 = -108						; size = 4
tv399 = -104						; size = 4
_yfreq2$ = -100						; size = 4
tv355 = -96						; size = 4
tv613 = -92						; size = 4
tv347 = -88						; size = 4
tv612 = -84						; size = 4
tv239 = -80						; size = 4
tv605 = -76						; size = 4
tv227 = -72						; size = 4
tv587 = -68						; size = 4
tv215 = -64						; size = 4
tv586 = -60						; size = 4
tv148 = -56						; size = 4
tv573 = -52						; size = 4
tv518 = -48						; size = 4
_cosphiLim$ = -44					; size = 4
_yfreq1$ = -40						; size = 4
_yradcl$ = -36						; size = 4
_omegasp1$ = -32					; size = 4
_ttheta2$ = -28						; size = 4
_ycoef1$ = -24						; size = 4
_omegasp$ = -20						; size = 4
_pcoef1$ = -16						; size = 4
_limiter$ = -12						; size = 4
_landingGains$ = -5					; size = 1
_this$ = -4						; size = 4
?Gains@AirframeClass@@AAEXXZ PROC			; AirframeClass::Gains
; _this$ = ecx

; 55   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	mov	DWORD PTR _this$[ebp], ecx

; 56   : float pcoef1, pcoef2, pradcl, pfreq1, pfreq2;
; 57   : float ycoef1, ycoef2, yradcl, yfreq1, yfreq2;
; 58   : float cosmuLim, cosphiLim;
; 59   : float omegasp, omegasp1;
; 60   : float psmax,nzalpha,ttheta2;
; 61   : Limiter *limiter = NULL;

	mov	DWORD PTR _limiter$[ebp], 0

; 62   : bool landingGains;
; 63   : 
; 64   : 	if(vt == 0.0F)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN46@Gains

; 65   : 		return;

	jmp	$LN47@Gains
$LN46@Gains:

; 66   : 
; 67   :    cosphiLim = max(0.0F,platform->platformAngles.cosphi);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [edx+400]
	jbe	SHORT $LN49@Gains
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv83[ebp], xmm0
	jmp	SHORT $LN50@Gains
$LN49@Gains:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR [ecx+400]
	movss	DWORD PTR tv83[ebp], xmm0
$LN50@Gains:
	movss	xmm0, DWORD PTR tv83[ebp]
	movss	DWORD PTR _cosphiLim$[ebp], xmm0

; 68   :    cosmuLim  = max(0.0F,platform->platformAngles.cosmu);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+384]
	jbe	SHORT $LN51@Gains
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv133[ebp], xmm0
	jmp	SHORT $LN52@Gains
$LN51@Gains:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR [edx+384]
	movss	DWORD PTR tv133[ebp], xmm0
$LN52@Gains:
	movss	xmm0, DWORD PTR tv133[ebp]
	movss	DWORD PTR _cosmuLim$[ebp], xmm0

; 69   : 
; 70   :    //landingGains = gearPos != 0 || IsEngineFlag(FuelDoorOpen) || IsSet(Refueling);
; 71   :    //TJL 10/20/03 Added TEFExtend. Per the F-16-1 ALT FLAPS sets Landing Gains
; 72   : 	landingGains = gearPos != 0 || IsEngineFlag(FuelDoorOpen) || IsSet(Refueling) || platform->TEFExtend;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1552]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN53@Gains
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEngineFlag@AirframeClass@@QAEHW4EngineFlags@1@@Z ; AirframeClass::IsEngineFlag
	test	eax, eax
	jne	SHORT $LN53@Gains
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN53@Gains
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movzx	eax, BYTE PTR [edx+851]
	test	eax, eax
	jne	SHORT $LN53@Gains
	mov	DWORD PTR tv148[ebp], 0
	jmp	SHORT $LN54@Gains
$LN53@Gains:
	mov	DWORD PTR tv148[ebp], 1
$LN54@Gains:
	mov	cl, BYTE PTR tv148[ebp]
	mov	BYTE PTR _landingGains$[ebp], cl

; 73   : 
; 74   : 
; 75   : 
; 76   : 
; 77   :    /*---------------------------------*/
; 78   :    /* AOA bias for aoa command system */
; 79   :    /*---------------------------------*/
; 80   :    /*
; 81   :    if (clalph0 == 0.0F || IsSet(Planted) )
; 82   : 	   aoabias = 0.0F;
; 83   :    else
; 84   :    {
; 85   : 	   aoabias = (GRAVITY * platform->platformAngles.cosgam *
; 86   : 					cosmuLim / qsom + 0.1F*gearPos - clift0 * (1.0F + tefFactor * 0.05F)) / clalph0 - tefFactor + lefFactor;
; 87   : 	   //aoabias = (GRAVITY * platform->platformAngles.costhe *
; 88   : 		//		cosphiLim / qsom + 0.1F*gearPos - clift0 * (1.0F + tefFactor * 0.05F)) / clalph0 - tefFactor + lefFactor;
; 89   : 	   
; 90   : 	   if(!IsSet(InAir))
; 91   : 	   {
; 92   : 		   float bleed = max(0.0F , min(aoabias*(vt - minVcas*KNOTS_TO_FTPSEC*0.5F)/(minVcas*KNOTS_TO_FTPSEC*0.25F), 1.0F));
; 93   : 		   aoabias = max(0.0F,min (bleed, aoamax));
; 94   : 	   }
; 95   : 	   else
; 96   : 		   aoabias = max(0.0F,min (aoabias, aoamax));
; 97   :    }*/
; 98   :    if(IsSet(InAir))

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN41@Gains

; 99   :    {
; 100  : 	   if (clalph0 == 0.0F)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+136]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN44@Gains

; 101  : 		   aoabias = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+148], xmm0

; 102  : 	   else 

	jmp	$LN41@Gains
$LN44@Gains:

; 103  : 	   {
; 104  : #if 0 // JPO - think original is correct 
; 105  : 	       if (g_bNewFm)
; 106  : 				aoabias = (GRAVITY * platform->platformAngles.cosgam *
; 107  : 					cosmuLim / qsom + 0.1F*gearPos - clift0 * (1.0F + tefFactor * auxaeroData->CLtefFactor)) / clalph0 - tefFactor - lefFactor;
; 108  : 			 else
; 109  : #endif
; 110  : 				aoabias = (GRAVITY * platform->platformAngles.cosgam *
; 111  : 					cosmuLim / qsom + 
; 112  : 					0.1F*gearPos - 
; 113  : 					clift0 * (1.0F + tefFactor * auxaeroData->CLtefFactor)) / 
; 114  : 					clalph0 - tefFactor + lefFactor;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR __real@4200b53f
	mulss	xmm0, DWORD PTR [edx+368]
	mulss	xmm0, DWORD PTR _cosmuLim$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [eax+648]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3dcccccd
	mulss	xmm1, DWORD PTR [ecx+1552]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1236]
	mulss	xmm1, DWORD PTR [eax+144]
	addss	xmm1, DWORD PTR __real@3f800000
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+132]
	subss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [eax+136]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+1236]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+1240]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+148], xmm0

; 115  : 
; 116  : 			 if (g_bNewFm)

	movzx	ecx, BYTE PTR ?g_bNewFm@@3_NA		; g_bNewFm
	test	ecx, ecx
	je	$LN42@Gains

; 117  : 		   aoabias = max(0.0F,min (aoabias, aoamax/3));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+168]
	divss	xmm0, DWORD PTR __real@40400000
	comiss	xmm0, DWORD PTR [edx+148]
	jbe	SHORT $LN55@Gains
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+148]
	movss	DWORD PTR tv202[ebp], xmm0
	jmp	SHORT $LN56@Gains
$LN55@Gains:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+168]
	divss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR tv202[ebp], xmm0
$LN56@Gains:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv202[ebp]
	jbe	SHORT $LN59@Gains
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv216[ebp], xmm0
	jmp	SHORT $LN60@Gains
$LN59@Gains:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+168]
	divss	xmm0, DWORD PTR __real@40400000
	comiss	xmm0, DWORD PTR [eax+148]
	jbe	SHORT $LN57@Gains
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+148]
	movss	DWORD PTR tv215[ebp], xmm0
	jmp	SHORT $LN58@Gains
$LN57@Gains:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+168]
	divss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR tv215[ebp], xmm0
$LN58@Gains:
	movss	xmm0, DWORD PTR tv215[ebp]
	movss	DWORD PTR tv216[ebp], xmm0
$LN60@Gains:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv216[ebp]
	movss	DWORD PTR [ecx+148], xmm0

; 118  : 			 else

	jmp	$LN41@Gains
$LN42@Gains:

; 119  : 		   aoabias = max(0.0F,min (aoabias, aoamax));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+168]
	comiss	xmm0, DWORD PTR [edx+148]
	jbe	SHORT $LN61@Gains
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+148]
	movss	DWORD PTR tv227[ebp], xmm0
	jmp	SHORT $LN62@Gains
$LN61@Gains:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+168]
	movss	DWORD PTR tv227[ebp], xmm0
$LN62@Gains:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv227[ebp]
	jbe	SHORT $LN65@Gains
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv239[ebp], xmm0
	jmp	SHORT $LN66@Gains
$LN65@Gains:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+168]
	comiss	xmm0, DWORD PTR [eax+148]
	jbe	SHORT $LN63@Gains
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+148]
	movss	DWORD PTR tv238[ebp], xmm0
	jmp	SHORT $LN64@Gains
$LN63@Gains:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+168]
	movss	DWORD PTR tv238[ebp], xmm0
$LN64@Gains:
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR tv239[ebp], xmm0
$LN66@Gains:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv239[ebp]
	movss	DWORD PTR [ecx+148], xmm0
$LN41@Gains:

; 120  : 	   }
; 121  :    }
; 122  : 
; 123  :    /*-------------------*/
; 124  :    /* AOA or NZ command */
; 125  :    /*-------------------*/
; 126  :    gsAvail = aoamax * clalph * qsom / GRAVITY;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+168]
	mulss	xmm0, DWORD PTR [eax+164]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+648]
	divss	xmm0, DWORD PTR __real@4200b53f
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+56], xmm0

; 127  :    if (IsSet(AutoCommand))

	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN40@Gains

; 128  :    {
; 129  : 	   limiter = gLimiterMgr->GetLimiter(CatIIICommandType,vehicleIndex);

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+92]
	push	ecx
	push	5
	mov	ecx, DWORD PTR ?gLimiterMgr@@3PAVLimiterMgrClass@@A ; gLimiterMgr
	call	?GetLimiter@LimiterMgrClass@@QAEPAVLimiter@@HH@Z ; LimiterMgrClass::GetLimiter
	mov	DWORD PTR _limiter$[ebp], eax

; 130  : 	  if(IsSet(CATLimiterIII) && limiter)

	push	2097152					; 00200000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN39@Gains
	cmp	DWORD PTR _limiter$[ebp], 0
	je	SHORT $LN39@Gains

; 131  : 	  {
; 132  : 		  if( alpha  < limiter->Limit(vcas) && (!gearPos || IsSet(GearBroken)) )

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1124]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _limiter$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _limiter$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	fstp	DWORD PTR tv930[ebp]
	movss	xmm0, DWORD PTR tv930[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [ecx+1152]
	jbe	SHORT $LN38@Gains
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1552]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN37@Gains
	push	2048					; 00000800H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN38@Gains
$LN37@Gains:

; 133  : 			ClearFlag(AOACmdMode);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag

; 134  : 		  else

	jmp	SHORT $LN36@Gains
$LN38@Gains:

; 135  : 			SetFlag(AOACmdMode);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag
$LN36@Gains:

; 136  : 	  }
; 137  : 	  else

	jmp	$LN27@Gains
$LN39@Gains:

; 138  : 	  {
; 139  : 		  limiter = gLimiterMgr->GetLimiter(CommandType,vehicleIndex);

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+92]
	push	ecx
	push	12					; 0000000cH
	mov	ecx, DWORD PTR ?gLimiterMgr@@3PAVLimiterMgrClass@@A ; gLimiterMgr
	call	?GetLimiter@LimiterMgrClass@@QAEPAVLimiter@@HH@Z ; LimiterMgrClass::GetLimiter
	mov	DWORD PTR _limiter$[ebp], eax

; 140  : 		  if(limiter)

	cmp	DWORD PTR _limiter$[ebp], 0
	je	SHORT $LN34@Gains

; 141  : 		  {
; 142  : 			  if (alpha < limiter->Limit(alpha) && (!gearPos || IsSet(GearBroken)) )

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1152]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _limiter$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _limiter$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	fstp	DWORD PTR tv947[ebp]
	movss	xmm0, DWORD PTR tv947[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [ecx+1152]
	jbe	SHORT $LN33@Gains
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1552]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN32@Gains
	push	2048					; 00000800H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN33@Gains
$LN32@Gains:

; 143  : 				 ClearFlag(AOACmdMode);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag

; 144  : 			  else

	jmp	SHORT $LN31@Gains
$LN33@Gains:

; 145  : 				 SetFlag(AOACmdMode);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag
$LN31@Gains:
	jmp	SHORT $LN27@Gains
$LN34@Gains:

; 146  : 		  }
; 147  : 		  else if (gsAvail > maxGs && (!gearPos || IsSet(GearBroken)) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+56]
	comiss	xmm0, DWORD PTR [ecx+60]
	jbe	SHORT $LN29@Gains
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1552]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN28@Gains
	push	2048					; 00000800H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN29@Gains
$LN28@Gains:

; 148  : 			 ClearFlag(AOACmdMode);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag

; 149  : 		  else

	jmp	SHORT $LN27@Gains
$LN29@Gains:

; 150  : 			 SetFlag(AOACmdMode);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag
$LN27@Gains:

; 151  : 	  }

	jmp	SHORT $LN23@Gains
$LN40@Gains:

; 152  :    }
; 153  :    else if (IsSet(GCommand))

	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN25@Gains

; 154  :       ClearFlag(AOACmdMode);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag
	jmp	SHORT $LN23@Gains
$LN25@Gains:

; 155  :    else if (IsSet(AlphaCommand))

	push	1024					; 00000400H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN23@Gains

; 156  :       SetFlag(AOACmdMode);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag
$LN23@Gains:

; 157  : 
; 158  :    /*---------------------------------------------------*/
; 159  :    /* pitch rate transfer numerator time constant       */
; 160  :    /*---------------------------------------------------*/
; 161  :    nzalpha = clalph0*qsom*RTD/GRAVITY;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+136]
	mulss	xmm0, DWORD PTR [ecx+648]
	mulss	xmm0, DWORD PTR __real@42652ee1
	divss	xmm0, DWORD PTR __real@4200b53f
	movss	DWORD PTR _nzalpha$[ebp], xmm0

; 162  :    ttheta2 = vt/(GRAVITY*nzalpha);

	movss	xmm0, DWORD PTR __real@4200b53f
	mulss	xmm0, DWORD PTR _nzalpha$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1120]
	divss	xmm1, xmm0
	movss	DWORD PTR _ttheta2$[ebp], xmm1

; 163  :    ttheta2 = max (ttheta2, 0.1F);

	movss	xmm0, DWORD PTR _ttheta2$[ebp]
	comiss	xmm0, DWORD PTR __real@3dcccccd
	jbe	SHORT $LN67@Gains
	movss	xmm0, DWORD PTR _ttheta2$[ebp]
	movss	DWORD PTR tv340[ebp], xmm0
	jmp	SHORT $LN68@Gains
$LN67@Gains:
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR tv340[ebp], xmm0
$LN68@Gains:
	movss	xmm0, DWORD PTR tv340[ebp]
	movss	DWORD PTR _ttheta2$[ebp], xmm0

; 164  : 
; 165  :    /*--------------------------------------*/
; 166  :    /* pitch axis stick limiter and shaping */
; 167  :    /*--------------------------------------*/
; 168  :    pstick = max (-1.0F, min (1.0F, pstick));

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1500]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN69@Gains
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv347[ebp], xmm0
	jmp	SHORT $LN70@Gains
$LN69@Gains:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1500]
	movss	DWORD PTR tv347[ebp], xmm0
$LN70@Gains:
	movss	xmm0, DWORD PTR __real@bf800000
	comiss	xmm0, DWORD PTR tv347[ebp]
	jbe	SHORT $LN73@Gains
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv355[ebp], xmm0
	jmp	SHORT $LN74@Gains
$LN73@Gains:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1500]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN71@Gains
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv354[ebp], xmm0
	jmp	SHORT $LN72@Gains
$LN71@Gains:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1500]
	movss	DWORD PTR tv354[ebp], xmm0
$LN72@Gains:
	movss	xmm0, DWORD PTR tv354[ebp]
	movss	DWORD PTR tv355[ebp], xmm0
$LN74@Gains:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv355[ebp]
	movss	DWORD PTR [ecx+1500], xmm0

; 169  :    pshape = pstick*pstick;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1500]
	mulss	xmm0, DWORD PTR [eax+1500]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+656], xmm0

; 170  :    if (pstick < 0.0F)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [edx+1500]
	jbe	SHORT $LN22@Gains

; 171  :         pshape *= -1.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+656]
	mulss	xmm0, DWORD PTR __real@bf800000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+656], xmm0
$LN22@Gains:

; 172  : 
; 173  :    /*----------------------------------------*/
; 174  :    /* pitch axis gains and filter parameters */
; 175  :    /*----------------------------------------*/
; 176  :    tp01 = 0.200F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [edx+1340], xmm0

; 177  :    zp01 = 0.900F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR [eax+1356], xmm0

; 178  : 
; 179  :    if(!IsSet(Simplified) && simpleMode != SIMPLE_MODE_AF)

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN21@Gains
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+824], 1
	je	$LN21@Gains

; 180  :    {
; 181  : 	   //tp01 *= (1.0F + (loadingFraction - 1.3F) *0.1F);
; 182  : 		zp01 *=  (1.0F - 0.15F*(max(0.0F,1.0F - qbar/25.0F)) - zpdamp - max(0.0F,(loadingFraction - 1.3F) *0.01F) );

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+644]
	divss	xmm0, DWORD PTR __real@41c80000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, xmm1
	jbe	SHORT $LN75@Gains
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv383[ebp], xmm0
	jmp	SHORT $LN76@Gains
$LN75@Gains:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+644]
	divss	xmm0, DWORD PTR __real@41c80000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR tv383[ebp], xmm1
$LN76@Gains:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1228]
	subss	xmm0, DWORD PTR __real@3fa66666
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN77@Gains
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv399[ebp], xmm0
	jmp	SHORT $LN78@Gains
$LN77@Gains:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1228]
	subss	xmm0, DWORD PTR __real@3fa66666
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR tv399[ebp], xmm0
$LN78@Gains:
	movss	xmm0, DWORD PTR __real@3e19999a
	mulss	xmm0, DWORD PTR tv383[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm1, DWORD PTR [eax+1492]
	subss	xmm1, DWORD PTR tv399[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [ecx+1356]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1356], xmm1

; 183  : 		zp01 = max(0.5F, zp01);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	comiss	xmm0, DWORD PTR [eax+1356]
	jbe	SHORT $LN79@Gains
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv410[ebp], xmm0
	jmp	SHORT $LN80@Gains
$LN79@Gains:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1356]
	movss	DWORD PTR tv410[ebp], xmm0
$LN80@Gains:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv410[ebp]
	movss	DWORD PTR [edx+1356], xmm0
$LN21@Gains:

; 184  :    }
; 185  : 
; 186  :    /*-----------------------------*/
; 187  :    /* limit closed loop frequency */
; 188  :    /*-----------------------------*/
; 189  :    if (pshape > 0.0F)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+656]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN20@Gains

; 190  :       kp01 = maxGs - platform->platformAngles.costhe*cosphiLim;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR [edx+392]
	mulss	xmm0, DWORD PTR _cosphiLim$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+60]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1364], xmm1

; 191  :    else

	jmp	SHORT $LN19@Gains
$LN20@Gains:

; 192  :       kp01 = 4.0F + platform->platformAngles.costhe*cosphiLim;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [eax+392]
	mulss	xmm0, DWORD PTR _cosphiLim$[ebp]
	addss	xmm0, DWORD PTR __real@40800000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1364], xmm0
$LN19@Gains:

; 193  : 
; 194  :    kp02 = 1.000F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+1368], xmm0

; 195  :    kp03 = 2.000F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [eax+1372], xmm0

; 196  : 
; 197  :    omegasp1 = 1.0F/(ttheta2 * 0.65F);

	movss	xmm0, DWORD PTR _ttheta2$[ebp]
	mulss	xmm0, DWORD PTR __real@3f266666
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movss	DWORD PTR _omegasp1$[ebp], xmm1

; 198  :    omegasp1 = max (1.0F, omegasp1);

	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _omegasp1$[ebp]
	jbe	SHORT $LN81@Gains
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv440[ebp], xmm0
	jmp	SHORT $LN82@Gains
$LN81@Gains:
	movss	xmm0, DWORD PTR _omegasp1$[ebp]
	movss	DWORD PTR tv440[ebp], xmm0
$LN82@Gains:
	movss	xmm0, DWORD PTR tv440[ebp]
	movss	DWORD PTR _omegasp1$[ebp], xmm0

; 199  :    omegasp = omegasp1 ; 

	movss	xmm0, DWORD PTR _omegasp1$[ebp]
	movss	DWORD PTR _omegasp$[ebp], xmm0

; 200  : 
; 201  :    if(stallMode > Recovering || !IsSet(InAir))

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1248], 2
	jg	SHORT $LN17@Gains
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN18@Gains
$LN17@Gains:

; 202  :    {
; 203  : 		omegasp *= 2.0F;

	movss	xmm0, DWORD PTR _omegasp$[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _omegasp$[ebp], xmm0

; 204  :    }
; 205  :    else

	jmp	SHORT $LN15@Gains
$LN18@Gains:

; 206  :    {
; 207  : 	   limiter = gLimiterMgr->GetLimiter(LowSpeedOmega,vehicleIndex);

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+92]
	push	eax
	push	13					; 0000000dH
	mov	ecx, DWORD PTR ?gLimiterMgr@@3PAVLimiterMgrClass@@A ; gLimiterMgr
	call	?GetLimiter@LimiterMgrClass@@QAEPAVLimiter@@HH@Z ; LimiterMgrClass::GetLimiter
	mov	DWORD PTR _limiter$[ebp], eax

; 208  : 		if(limiter)

	cmp	DWORD PTR _limiter$[ebp], 0
	je	SHORT $LN15@Gains

; 209  : 			omegasp *= limiter->Limit(qbar);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+644]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _limiter$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _limiter$[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	fstp	DWORD PTR tv1061[ebp]
	movss	xmm0, DWORD PTR tv1061[ebp]
	mulss	xmm0, DWORD PTR _omegasp$[ebp]
	movss	DWORD PTR _omegasp$[ebp], xmm0
$LN15@Gains:

; 210  :    }
; 211  : 
; 212  :    wp01 = omegasp;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _omegasp$[ebp]
	movss	DWORD PTR [eax+1388], xmm0

; 213  : 
; 214  :    /*----------------------------------------------*/
; 215  :    /* calculate inner loop dynamics for pitch axis */
; 216  :    /*----------------------------------------------*/
; 217  :    pcoef1 =  tp01*wp01*wp01 -
; 218  :              2.0F*zp01*wp01 - kp03;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1340]
	mulss	xmm0, DWORD PTR [edx+1388]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+1388]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR [ecx+1356]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [edx+1388]
	subss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+1372]
	movss	DWORD PTR _pcoef1$[ebp], xmm0

; 219  :    pcoef2 =  2.0F*zp01*wp01*kp03 -
; 220  :              kp03*tp01*wp01*wp01;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx+1356]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+1388]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+1372]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1372]
	mulss	xmm1, DWORD PTR [edx+1340]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+1388]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [ecx+1388]
	subss	xmm0, xmm1
	movss	DWORD PTR _pcoef2$[ebp], xmm0

; 221  :    pradcl =  max((pcoef1*pcoef1 - 4.0F*pcoef2),0.0F);

	movss	xmm0, DWORD PTR _pcoef1$[ebp]
	mulss	xmm0, DWORD PTR _pcoef1$[ebp]
	movss	xmm1, DWORD PTR __real@40800000
	mulss	xmm1, DWORD PTR _pcoef2$[ebp]
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN83@Gains
	movss	xmm0, DWORD PTR _pcoef1$[ebp]
	mulss	xmm0, DWORD PTR _pcoef1$[ebp]
	movss	xmm1, DWORD PTR __real@40800000
	mulss	xmm1, DWORD PTR _pcoef2$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR tv500[ebp], xmm0
	jmp	SHORT $LN84@Gains
$LN83@Gains:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv500[ebp], xmm0
$LN84@Gains:
	movss	xmm0, DWORD PTR tv500[ebp]
	movss	DWORD PTR _pradcl$[ebp], xmm0

; 222  : 
; 223  :    pfreq1 = ((float)sqrt(pradcl) - pcoef1) * 0.5F;

	push	ecx
	movss	xmm0, DWORD PTR _pradcl$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv1093[ebp]
	movss	xmm0, DWORD PTR tv1093[ebp]
	subss	xmm0, DWORD PTR _pcoef1$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _pfreq1$[ebp], xmm0

; 224  :    pfreq2 = -pcoef1 - pfreq1;

	movss	xmm0, DWORD PTR _pcoef1$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm0, DWORD PTR _pfreq1$[ebp]
	movss	DWORD PTR _pfreq2$[ebp], xmm0

; 225  : 
; 226  :    /*------------------------------------------*/
; 227  :    /* time constants for pitch axis inner loop */
; 228  :    /*------------------------------------------*/
; 229  :    tp02   =  1/pfreq1;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _pfreq1$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1344], xmm0

; 230  :    tp03   =  1/pfreq2;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _pfreq2$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1348], xmm0

; 231  : 
; 232  :    tp03   = max (tp03, 0.5F);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1348]
	comiss	xmm0, DWORD PTR __real@3f000000
	jbe	SHORT $LN85@Gains
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1348]
	movss	DWORD PTR tv518[ebp], xmm0
	jmp	SHORT $LN86@Gains
$LN85@Gains:
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv518[ebp], xmm0
$LN86@Gains:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv518[ebp]
	movss	DWORD PTR [eax+1348], xmm0

; 233  : 
; 234  :    if (IsSet(AOACmdMode) || !(qsom*cnalpha))

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN13@Gains
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+648]
	mulss	xmm0, DWORD PTR [edx+140]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN14@Gains
$LN13@Gains:

; 235  :       kp05 = tp02*tp03*wp01*wp01;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1344]
	mulss	xmm0, DWORD PTR [ecx+1348]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+1388]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+1388]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1380], xmm0

; 236  :    else

	jmp	SHORT $LN12@Gains
$LN14@Gains:

; 237  :       kp05 = GRAVITY*tp02*tp03*wp01*wp01 /
; 238  :                      (qsom*cnalpha);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@4200b53f
	mulss	xmm0, DWORD PTR [edx+1344]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+1348]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+1388]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+1388]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+648]
	mulss	xmm1, DWORD PTR [ecx+140]
	divss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1380], xmm0
$LN12@Gains:

; 239  : 
; 240  :    if(landingGains)

	movzx	eax, BYTE PTR _landingGains$[ebp]
	test	eax, eax
	je	SHORT $LN11@Gains

; 241  : 	   kp05 *= auxaeroData->pitchGearGain;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1380]
	mulss	xmm0, DWORD PTR [edx+220]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1380], xmm0
$LN11@Gains:

; 242  : 
; 243  :    if(!IsSet(InAir))

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN10@Gains

; 244  :    {
; 245  : 		kp05 *= max(0.0f, min(1.0F, (qbar - 20.0F)/45.0F ) );

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+644]
	subss	xmm0, DWORD PTR __real@41a00000
	divss	xmm0, DWORD PTR __real@42340000
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN87@Gains
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv573[ebp], xmm0
	jmp	SHORT $LN88@Gains
$LN87@Gains:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+644]
	subss	xmm0, DWORD PTR __real@41a00000
	divss	xmm0, DWORD PTR __real@42340000
	movss	DWORD PTR tv573[ebp], xmm0
$LN88@Gains:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv573[ebp]
	jbe	SHORT $LN91@Gains
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv587[ebp], xmm0
	jmp	SHORT $LN92@Gains
$LN91@Gains:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+644]
	subss	xmm0, DWORD PTR __real@41a00000
	divss	xmm0, DWORD PTR __real@42340000
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN89@Gains
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv586[ebp], xmm0
	jmp	SHORT $LN90@Gains
$LN89@Gains:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+644]
	subss	xmm0, DWORD PTR __real@41a00000
	divss	xmm0, DWORD PTR __real@42340000
	movss	DWORD PTR tv586[ebp], xmm0
$LN90@Gains:
	movss	xmm0, DWORD PTR tv586[ebp]
	movss	DWORD PTR tv587[ebp], xmm0
$LN92@Gains:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1380]
	mulss	xmm0, DWORD PTR tv587[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1380], xmm0
$LN10@Gains:

; 246  :    }
; 247  : 
; 248  :    F4Assert (!_isnan(kp05));
; 249  : 
; 250  :    /*---------------------------------------*/
; 251  :    /* roll axis gains and filter parameters */
; 252  :    /*---------------------------------------*/
; 253  :    if(qbar >= 250.0F)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+644]
	comiss	xmm0, DWORD PTR __real@437a0000
	jb	SHORT $LN9@Gains

; 254  :       tr01 =  0.25F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR [eax+1404], xmm0

; 255  :    else

	jmp	SHORT $LN8@Gains
$LN9@Gains:

; 256  :       tr01 = -0.001111F*(qbar - 100.0F) + 0.416F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+644]
	subss	xmm0, DWORD PTR __real@42c80000
	mulss	xmm0, DWORD PTR __real@ba919ef9
	addss	xmm0, DWORD PTR __real@3ed4fdf4
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1404], xmm0
$LN8@Gains:

; 257  : 
; 258  :    /*-----------------------------------------------*/
; 259  :    /* roll command gain and stick limiter / shaping */
; 260  :    /*-----------------------------------------------*/
; 261  :    rstick = min ( max (rstick, -1.0F), 1.0F);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1504]
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN93@Gains
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1504]
	movss	DWORD PTR tv605[ebp], xmm0
	jmp	SHORT $LN94@Gains
$LN93@Gains:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv605[ebp], xmm0
$LN94@Gains:
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv605[ebp]
	jbe	SHORT $LN97@Gains
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1504]
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN95@Gains
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1504]
	movss	DWORD PTR tv612[ebp], xmm0
	jmp	SHORT $LN96@Gains
$LN95@Gains:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv612[ebp], xmm0
$LN96@Gains:
	movss	xmm0, DWORD PTR tv612[ebp]
	movss	DWORD PTR tv613[ebp], xmm0
	jmp	SHORT $LN98@Gains
$LN97@Gains:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv613[ebp], xmm0
$LN98@Gains:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv613[ebp]
	movss	DWORD PTR [ecx+1504], xmm0

; 262  :    rshape = rstick*rstick;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1504]
	mulss	xmm0, DWORD PTR [eax+1504]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+660], xmm0

; 263  :    if (rstick < 0.0F)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [edx+1504]
	jbe	SHORT $LN7@Gains

; 264  :         rshape *= -1.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+660]
	mulss	xmm0, DWORD PTR __real@bf800000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+660], xmm0
$LN7@Gains:

; 265  : 
; 266  :    psmax = Math.TwodInterp (alpha, qbar, rollCmd->alpha, rollCmd->qbar, 
; 267  :                      rollCmd->roll, rollCmd->numAlpha, rollCmd->numQbar,
; 268  :                      &curRollAlphaBreak, &curRollQbarBreak);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 808				; 00000328H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 804				; 00000324H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+644]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1152]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?Math@@3VSIMLIB_MATH_CLASS@@A ; Math
	call	?TwodInterp@SIMLIB_MATH_CLASS@@QAEMMMPBM00HHPAH1@Z ; SIMLIB_MATH_CLASS::TwodInterp
	fstp	DWORD PTR _psmax$[ebp]

; 269  :    kr01  = psmax*DTR;

	movss	xmm0, DWORD PTR _psmax$[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1412], xmm0

; 270  : 
; 271  :    if(landingGains)

	movzx	ecx, BYTE PTR _landingGains$[ebp]
	test	ecx, ecx
	je	SHORT $LN6@Gains

; 272  : 	   kr01 *= auxaeroData->rollGearGain;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1412]
	mulss	xmm0, DWORD PTR [eax+212]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1412], xmm0
$LN6@Gains:

; 273  : 
; 274  :    kr02  = platform->platformAngles.cosalp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+344]
	mov	DWORD PTR [edx+1416], eax

; 275  : 
; 276  :    /*--------------------------------------*/
; 277  :    /* yaw axis gains and filter parameters */
; 278  :    /*--------------------------------------*/
; 279  :    //zy01 = 0.50F;
; 280  :    zy01 = 0.70F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR [ecx+1444], xmm0

; 281  :    
; 282  :    //wy01 = (0.8F/tr01);
; 283  :    wy01 = (0.3F/tr01);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3e99999a
	divss	xmm0, DWORD PTR [edx+1404]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1476], xmm0

; 284  : 
; 285  :    if(!IsSet(Simplified) && simpleMode != SIMPLE_MODE_AF)

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN5@Gains
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+824], 1
	je	SHORT $LN5@Gains

; 286  : 	   wy01 *= (1.0F - loadingFraction * 0.1F);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1228]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+1476]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1476], xmm1
$LN5@Gains:

; 287  : 
; 288  :    ky01 = 1.000F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+1452], xmm0

; 289  :    ky02 = 1.000F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+1456], xmm0

; 290  :    ky03 = 2.000F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [ecx+1460], xmm0

; 291  : 
; 292  :    /*--------------------------------------------*/
; 293  :    /* calculate inner loop dynamics for yaw axis */
; 294  :    /*--------------------------------------------*/
; 295  :    ycoef1 = -2.0F*zy01*wy01 - ky03;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c0000000
	mulss	xmm0, DWORD PTR [edx+1444]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+1476]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+1460]
	movss	DWORD PTR _ycoef1$[ebp], xmm0

; 296  :    ycoef2 =  2.0F*zy01*wy01*ky03;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+1444]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+1476]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+1460]
	movss	DWORD PTR _ycoef2$[ebp], xmm0

; 297  :    yradcl =  ycoef1*ycoef1 - 4.0F*ycoef2;

	movss	xmm0, DWORD PTR _ycoef1$[ebp]
	mulss	xmm0, DWORD PTR _ycoef1$[ebp]
	movss	xmm1, DWORD PTR __real@40800000
	mulss	xmm1, DWORD PTR _ycoef2$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _yradcl$[ebp], xmm0

; 298  :    if( yradcl < 0.0F ) yradcl = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _yradcl$[ebp]
	jbe	SHORT $LN4@Gains
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _yradcl$[ebp], xmm0
$LN4@Gains:

; 299  : 
; 300  :    yfreq1 = ((float)sqrt(yradcl) - ycoef1)*0.5F;

	push	ecx
	movss	xmm0, DWORD PTR _yradcl$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv1239[ebp]
	movss	xmm0, DWORD PTR tv1239[ebp]
	subss	xmm0, DWORD PTR _ycoef1$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _yfreq1$[ebp], xmm0

; 301  :    yfreq2 = -ycoef1 - yfreq1;

	movss	xmm0, DWORD PTR _ycoef1$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm0, DWORD PTR _yfreq1$[ebp]
	movss	DWORD PTR _yfreq2$[ebp], xmm0

; 302  : 
; 303  :    /*----------------------------------------*/
; 304  :    /* time constants for yaw axis inner loop */
; 305  :    /*----------------------------------------*/
; 306  :    ty01   =  1/yfreq1;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _yfreq1$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1432], xmm0

; 307  :    ty02   =  1/yfreq2;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _yfreq2$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1436], xmm0

; 308  : 
; 309  :    if (cy != 0.0F)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+160]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN3@Gains

; 310  :    {
; 311  :       ky05   = -GRAVITY*wy01*wy01 / (qsom*cy*yfreq1*yfreq2);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c200b53f
	mulss	xmm0, DWORD PTR [edx+1476]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+1476]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+648]
	mulss	xmm1, DWORD PTR [edx+160]
	mulss	xmm1, DWORD PTR _yfreq1$[ebp]
	mulss	xmm1, DWORD PTR _yfreq2$[ebp]
	divss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1468], xmm0
$LN3@Gains:

; 312  :    }
; 313  : 
; 314  :    /*------------------------------------*/
; 315  :    /* yaw axis pedal limiter and shaping */
; 316  :    /*------------------------------------*/
; 317  :    ypedal = min ( max (ypedal, -1.0F), 1.0F);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1508]
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN99@Gains
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1508]
	movss	DWORD PTR tv733[ebp], xmm0
	jmp	SHORT $LN100@Gains
$LN99@Gains:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv733[ebp], xmm0
$LN100@Gains:
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv733[ebp]
	jbe	SHORT $LN103@Gains
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1508]
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN101@Gains
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1508]
	movss	DWORD PTR tv740[ebp], xmm0
	jmp	SHORT $LN102@Gains
$LN101@Gains:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv740[ebp], xmm0
$LN102@Gains:
	movss	xmm0, DWORD PTR tv740[ebp]
	movss	DWORD PTR tv741[ebp], xmm0
	jmp	SHORT $LN104@Gains
$LN103@Gains:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv741[ebp], xmm0
$LN104@Gains:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv741[ebp]
	movss	DWORD PTR [edx+1508], xmm0

; 318  :    yshape = ypedal * ypedal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1508]
	mulss	xmm0, DWORD PTR [ecx+1508]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+664], xmm0

; 319  :    if (ypedal < 0.0F)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+1508]
	jbe	SHORT $LN2@Gains

; 320  :         yshape *= -1.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+664]
	mulss	xmm0, DWORD PTR __real@bf800000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+664], xmm0
$LN2@Gains:

; 321  : 
; 322  :    if(landingGains)

	movzx	eax, BYTE PTR _landingGains$[ebp]
	test	eax, eax
	je	SHORT $LN1@Gains

; 323  : 	   ky05 *= auxaeroData->yawGearGain;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1468]
	mulss	xmm0, DWORD PTR [edx+216]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1468], xmm0
$LN1@Gains:
$LN47@Gains:

; 324  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Gains@AirframeClass@@AAEXXZ ENDP			; AirframeClass::Gains
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
END
