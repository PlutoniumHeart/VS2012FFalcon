; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\Airframe\Airframe.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
_DATA	SEGMENT
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	ORG $+4
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_DATA	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	_atanf
PUBLIC	?atan@@YAMM@Z					; atan
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	??BVU_SESSION_ID@@QBEKXZ			; VU_SESSION_ID::operator unsigned long
PUBLIC	??BVU_ID@@QBEKXZ				; VU_ID::operator unsigned long
PUBLIC	?SetUpdateTime@VuEntity@@QAEXK@Z		; VuEntity::SetUpdateTime
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?Type@VuEntity@@QBEGXZ				; VuEntity::Type
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?XDelta@VuEntity@@QBEMXZ			; VuEntity::XDelta
PUBLIC	?YDelta@VuEntity@@QBEMXZ			; VuEntity::YDelta
PUBLIC	?ZDelta@VuEntity@@QBEMXZ			; VuEntity::ZDelta
PUBLIC	?Yaw@VuEntity@@QBEMXZ				; VuEntity::Yaw
PUBLIC	?Pitch@VuEntity@@QBEMXZ				; VuEntity::Pitch
PUBLIC	?Roll@VuEntity@@QBEMXZ				; VuEntity::Roll
PUBLIC	?LastUpdateTime@VuEntity@@QBEKXZ		; VuEntity::LastUpdateTime
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	?IsSetFalcFlag@FalconEntity@@QAEHH@Z		; FalconEntity::IsSetFalcFlag
PUBLIC	?IsPlayer@FalconEntity@@QAEHXZ			; FalconEntity::IsPlayer
PUBLIC	?mlSinCos@@YAXPAUmlTrig@@M@Z			; mlSinCos
PUBLIC	?checked_atan2@@YANNN@Z				; checked_atan2
PUBLIC	??0GearData@@QAE@XZ				; GearData::GearData
PUBLIC	??1GearData@@QAE@XZ				; GearData::~GearData
PUBLIC	??_EGearData@@QAEPAXI@Z				; GearData::`vector deleting destructor'
PUBLIC	?SetStallConditions@AirframeClass@@AAEXXZ	; AirframeClass::SetStallConditions
PUBLIC	?TEFClose@AirframeClass@@QAEXXZ			; AirframeClass::TEFClose
PUBLIC	?TEFMax@AirframeClass@@QAEXXZ			; AirframeClass::TEFMax
PUBLIC	?TEFInc@AirframeClass@@QAEXXZ			; AirframeClass::TEFInc
PUBLIC	?TEFDec@AirframeClass@@QAEXXZ			; AirframeClass::TEFDec
PUBLIC	?TEFTakeoff@AirframeClass@@QAEXXZ		; AirframeClass::TEFTakeoff
PUBLIC	?TEFLEFStage1@AirframeClass@@QAEXXZ		; AirframeClass::TEFLEFStage1
PUBLIC	?TEFLEFStage2@AirframeClass@@QAEXXZ		; AirframeClass::TEFLEFStage2
PUBLIC	?TEFLEFStage3@AirframeClass@@QAEXXZ		; AirframeClass::TEFLEFStage3
PUBLIC	?LEFClose@AirframeClass@@QAEXXZ			; AirframeClass::LEFClose
PUBLIC	?LEFMax@AirframeClass@@QAEXXZ			; AirframeClass::LEFMax
PUBLIC	?LEFInc@AirframeClass@@QAEXXZ			; AirframeClass::LEFInc
PUBLIC	?LEFDec@AirframeClass@@QAEXXZ			; AirframeClass::LEFDec
PUBLIC	?LEFTakeoff@AirframeClass@@QAEXXZ		; AirframeClass::LEFTakeoff
PUBLIC	?SetFlaps@AirframeClass@@QAEX_N@Z		; AirframeClass::SetFlaps
PUBLIC	?SetFlapsPlayer@AirframeClass@@QAEXXZ		; AirframeClass::SetFlapsPlayer
PUBLIC	?RandomFailureModel@AirframeClass@@QAEXXZ	; AirframeClass::RandomFailureModel
PUBLIC	?CanopyToggle@AirframeClass@@QAEXXZ		; AirframeClass::CanopyToggle
PUBLIC	?TogglePB@AirframeClass@@QAEXXZ			; AirframeClass::TogglePB
PUBLIC	?ToggleHook@AirframeClass@@QAEXXZ		; AirframeClass::ToggleHook
PUBLIC	?HookUp@AirframeClass@@QAEXXZ			; AirframeClass::HookUp
PUBLIC	?HookDown@AirframeClass@@QAEXXZ			; AirframeClass::HookDown
PUBLIC	?SetEngineFlag@AirframeClass@@QAEXW4EngineFlags@1@@Z ; AirframeClass::SetEngineFlag
PUBLIC	?GeneratorOff@AirframeClass@@QAEXW4Generator@1@@Z ; AirframeClass::GeneratorOff
PUBLIC	?GeneratorBreak@AirframeClass@@QAEXW4Generator@1@@Z ; AirframeClass::GeneratorBreak
PUBLIC	??0AirframeClass@@QAE@PAVAircraftClass@@@Z	; AirframeClass::AirframeClass
PUBLIC	??1AirframeClass@@QAE@XZ			; AirframeClass::~AirframeClass
PUBLIC	?Init@AirframeClass@@QAEXH@Z			; AirframeClass::Init
PUBLIC	?InitData@AirframeClass@@QAEXH@Z		; AirframeClass::InitData
PUBLIC	?Reinit@AirframeClass@@QAEXXZ			; AirframeClass::Reinit
PUBLIC	?Exec@AirframeClass@@QAEXXZ			; AirframeClass::Exec
PUBLIC	?RemoteUpdate@AirframeClass@@QAEXXZ		; AirframeClass::RemoteUpdate
PUBLIC	?CalcThrotlPos@AirframeClass@@QAEMM@Z		; AirframeClass::CalcThrotlPos
PUBLIC	?CalcDesAlpha@AirframeClass@@QAEMM@Z		; AirframeClass::CalcDesAlpha
PUBLIC	?CalcDesSpeed@AirframeClass@@QAEMM@Z		; AirframeClass::CalcDesSpeed
PUBLIC	?AddExternalFuel@AirframeClass@@QAEXM@Z		; AirframeClass::AddExternalFuel
PUBLIC	?AddFuel@AirframeClass@@QAEHM@Z			; AirframeClass::AddFuel
PUBLIC	?FindExternalTanks@AirframeClass@@QAEXXZ	; AirframeClass::FindExternalTanks
PUBLIC	?AddWeapon@AirframeClass@@QAEXMMM@Z		; AirframeClass::AddWeapon
PUBLIC	?RemoveWeapon@AirframeClass@@QAEXMMM@Z		; AirframeClass::RemoveWeapon
PUBLIC	?ResetAlpha@AirframeClass@@QAEXXZ		; AirframeClass::ResetAlpha
PUBLIC	?SetFlag@AirframeClass@@QAEXH@Z			; AirframeClass::SetFlag
PUBLIC	?ClearFlag@AirframeClass@@QAEXH@Z		; AirframeClass::ClearFlag
PUBLIC	?IsSet@AirframeClass@@QBEHH@Z			; AirframeClass::IsSet
PUBLIC	?SetPosition@AirframeClass@@QAEXMMM@Z		; AirframeClass::SetPosition
PUBLIC	?ResetFuel@AirframeClass@@QAEXXZ		; AirframeClass::ResetFuel
PUBLIC	?RunHeliModel@AirframeClass@@QAEXXZ		; AirframeClass::RunHeliModel
PUBLIC	?GetParkType@AirframeClass@@QAEHXZ		; AirframeClass::GetParkType
PUBLIC	??_GHeliMMClass@@QAEPAXI@Z			; HeliMMClass::`scalar deleting destructor'
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?Name@LogBookData@@QAEPADXZ			; LogBookData::Name
PUBLIC	?SetSwitch@SimMoverClass@@QAEXHH@Z		; SimMoverClass::SetSwitch
PUBLIC	?GetSwitch@SimMoverClass@@QAEHH@Z		; SimMoverClass::GetSwitch
PUBLIC	?IsAcStatusBitsSet@AircraftClass@@QBE_NH@Z	; AircraftClass::IsAcStatusBitsSet
PUBLIC	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
PUBLIC	?IsF16@AircraftClass@@QAEHXZ			; AircraftClass::IsF16
PUBLIC	?IsComplex@AircraftClass@@QAEHXZ		; AircraftClass::IsComplex
PUBLIC	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ	; AircraftClass::DBrain
PUBLIC	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
PUBLIC	?NumHardpoints@SMSBaseClass@@QAEHXZ		; SMSBaseClass::NumHardpoints
PUBLIC	?IsRecording@ACMIRecorder@@QAEHXZ		; ACMIRecorder::IsRecording
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_0CO@IOOKMDAN@Unknown?5airframe?5index?5?$CFd?0?5using@ ; `string'
PUBLIC	??_C@_08NKCODECN@mrsteed0?$AA@			; `string'
PUBLIC	??_C@_08MDDFAFGM@mrsteed1?$AA@			; `string'
PUBLIC	??_C@_08OIBIFGKP@mrsteed2?$AA@			; `string'
PUBLIC	??_C@_0BL@PCECMIL@RemoveWeapon?5W?$CFf?5DI?$CFf?0?5O?$CFf?$AA@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3a03126f
PUBLIC	__real@3a83126f
PUBLIC	__real@3b03126f
PUBLIC	__real@3c8efa34
PUBLIC	__real@3ca3d70a
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3d99999a
PUBLIC	__real@3d9db22d
PUBLIC	__real@3da3d70a
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e800000
PUBLIC	__real@3e99999a
PUBLIC	__real@3eaf1aa0
PUBLIC	__real@3ecccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f17ac60
PUBLIC	__real@3f19999a
PUBLIC	__real@3f400000
PUBLIC	__real@3f51eb85
PUBLIC	__real@3f59999a
PUBLIC	__real@3f666666
PUBLIC	__real@3f7d70a4
PUBLIC	__real@3f800000
PUBLIC	__real@3f866666
PUBLIC	__real@3f8ccccd
PUBLIC	__real@3f99999a
PUBLIC	__real@3fa66666
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fc00000
PUBLIC	__real@3fd80b03
PUBLIC	__real@3fe69fbe76c8b439
PUBLIC	__real@3ff0cccccccccccd
PUBLIC	__real@3ff1c433
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@40000000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@40400000
PUBLIC	__real@40533333
PUBLIC	__real@40a00000
PUBLIC	__real@40d55555
PUBLIC	__real@41100000
PUBLIC	__real@41200000
PUBLIC	__real@41700000
PUBLIC	__real@41880000
PUBLIC	__real@41900000
PUBLIC	__real@41a00000
PUBLIC	__real@41b1c71c
PUBLIC	__real@41f00000
PUBLIC	__real@41f80000
PUBLIC	__real@4200b53f
PUBLIC	__real@42055555
PUBLIC	__real@42200000
PUBLIC	__real@42340000
PUBLIC	__real@42652ee1
PUBLIC	__real@42700000
PUBLIC	__real@4280b53f
PUBLIC	__real@42c80000
PUBLIC	__real@430706e2
PUBLIC	__real@43340000
PUBLIC	__real@43480000
PUBLIC	__real@43700000
PUBLIC	__real@437a0000
PUBLIC	__real@43fd2ce8
PUBLIC	__real@447a0000
PUBLIC	__real@448b8e14
PUBLIC	__real@44960000
PUBLIC	__real@458ca000
PUBLIC	__real@45cb2000
PUBLIC	__real@46fffe00
PUBLIC	__real@4adbba00
PUBLIC	__real@8000000000000000
PUBLIC	__real@bf441b76
PUBLIC	__real@bf800000
PUBLIC	__real@bff921fb54442d18
PUBLIC	__real@c1200000
PUBLIC	__real@c1300000
PUBLIC	__real@c1600000
PUBLIC	__real@c1f00000
PUBLIC	__real@c2200000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_atan:PROC
EXTRN	_fabs:PROC
EXTRN	_rand:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_stricmp:PROC
EXTRN	_MonoPrint:PROC
EXTRN	?SetPosition@VuEntity@@QAEXMMM@Z:PROC		; VuEntity::SetPosition
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?TwodInterp@SIMLIB_MATH_CLASS@@QAEMMMPBM00HHPAH1@Z:PROC ; SIMLIB_MATH_CLASS::TwodInterp
EXTRN	?Sfx@F4SoundPos@@QAEXHHMM@Z:PROC		; F4SoundPos::Sfx
EXTRN	?ReadData@AirframeClass@@AAEHH@Z:PROC		; AirframeClass::ReadData
EXTRN	?Accelerometers@AirframeClass@@AAEXXZ:PROC	; AirframeClass::Accelerometers
EXTRN	?Aerodynamics@AirframeClass@@AAEXXZ:PROC	; AirframeClass::Aerodynamics
EXTRN	?AeroRead@AirframeClass@@AAEXH@Z:PROC		; AirframeClass::AeroRead
EXTRN	?AuxAeroRead@AirframeClass@@AAEXH@Z:PROC	; AirframeClass::AuxAeroRead
EXTRN	?Atmosphere@AirframeClass@@AAEXXZ:PROC		; AirframeClass::Atmosphere
EXTRN	?Axial@AirframeClass@@AAEXM@Z:PROC		; AirframeClass::Axial
EXTRN	?EngineRead@AirframeClass@@AAEXH@Z:PROC		; AirframeClass::EngineRead
EXTRN	?EquationsOfMotion@AirframeClass@@AAEXM@Z:PROC	; AirframeClass::EquationsOfMotion
EXTRN	?FcsRead@AirframeClass@@AAEXH@Z:PROC		; AirframeClass::FcsRead
EXTRN	?FlightControlSystem@AirframeClass@@AAEXXZ:PROC	; AirframeClass::FlightControlSystem
EXTRN	?Gains@AirframeClass@@AAEXXZ:PROC		; AirframeClass::Gains
EXTRN	?Initialize@AirframeClass@@AAEXXZ:PROC		; AirframeClass::Initialize
EXTRN	?ReInitialize@AirframeClass@@AAEXXZ:PROC	; AirframeClass::ReInitialize
EXTRN	?TrimModel@AirframeClass@@AAEXXZ:PROC		; AirframeClass::TrimModel
EXTRN	?CalculateGroundPlane@AirframeClass@@ABEXPAM0@Z:PROC ; AirframeClass::CalculateGroundPlane
EXTRN	?RunLandingGear@AirframeClass@@AAEXXZ:PROC	; AirframeClass::RunLandingGear
EXTRN	?EngineModel@AirframeClass@@QAEXM@Z:PROC	; AirframeClass::EngineModel
EXTRN	?MultiEngineModel@AirframeClass@@QAEXM@Z:PROC	; AirframeClass::MultiEngineModel
EXTRN	?HydrBreak@AirframeClass@@QAEXH@Z:PROC		; AirframeClass::HydrBreak
EXTRN	?ResetOrientation@AirframeClass@@QAEXXZ:PROC	; AirframeClass::ResetOrientation
EXTRN	?CheckHeight@AirframeClass@@QBEMXZ:PROC		; AirframeClass::CheckHeight
EXTRN	?CalcMuFric@AirframeClass@@QAEMH@Z:PROC		; AirframeClass::CalcMuFric
EXTRN	?ClearFuel@AirframeClass@@QAEXXZ:PROC		; AirframeClass::ClearFuel
EXTRN	?AllocateFuel@AirframeClass@@QAEXM@Z:PROC	; AirframeClass::AllocateFuel
EXTRN	?SimpleModel@AirframeClass@@QAEXXZ:PROC		; AirframeClass::SimpleModel
EXTRN	??0HeliMMClass@@QAE@PAVSimBaseClass@@H@Z:PROC	; HeliMMClass::HeliMMClass
EXTRN	??1HeliMMClass@@QAE@XZ:PROC			; HeliMMClass::~HeliMMClass
EXTRN	?Exec@HeliMMClass@@QAEXXZ:PROC			; HeliMMClass::Exec
EXTRN	?Init@HeliMMClass@@QAEXMMM@Z:PROC		; HeliMMClass::Init
EXTRN	?SetControls@HeliMMClass@@QAEXMMMM@Z:PROC	; HeliMMClass::SetControls
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z:PROC ; OTWDriverClass::GetGroundLevel
EXTRN	?GetGroundType@OTWDriverClass@@QAEHMM@Z:PROC	; OTWDriverClass::GetGroundType
EXTRN	?GetMEA@TMap@@QAEMMM@Z:PROC			; TMap::GetMEA
EXTRN	?ClearAcStatusBits@AircraftClass@@QAEXH@Z:PROC	; AircraftClass::ClearAcStatusBits
EXTRN	?MoveSurfaces@AircraftClass@@QAEXXZ:PROC	; AircraftClass::MoveSurfaces
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	?CheckLead@DigitalBrain@@QAEXXZ:PROC		; DigitalBrain::CheckLead
EXTRN	?UpdateTaxipoint@DigitalBrain@@QAEXXZ:PROC	; DigitalBrain::UpdateTaxipoint
EXTRN	?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z:PROC ; FackClass::ClearFault
EXTRN	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z:PROC ; FackClass::GetFault
EXTRN	?RandomFailure@FackClass@@QAEXXZ:PROC		; FackClass::RandomFailure
EXTRN	?SetCaution@FackClass@@QAEXW4type_CSubSystem@@@Z:PROC ; FackClass::SetCaution
EXTRN	?SwitchRecord@ACMIRecorder@@QAEXPAUACMISwitchRecord@@@Z:PROC ; ACMIRecorder::SwitchRecord
EXTRN	?get_air_speed@@YAMMH@Z:PROC			; get_air_speed
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuxGameTime@@3KA:DWORD				; vuxGameTime
EXTRN	?SimLibMinorFrameTime@@3MA:DWORD		; SimLibMinorFrameTime
EXTRN	?SimLibMajorFrameTime@@3MA:DWORD		; SimLibMajorFrameTime
EXTRN	?SimLibElapsedTime@@3KA:DWORD			; SimLibElapsedTime
EXTRN	?SimLibMinorPerMajor@@3HA:DWORD			; SimLibMinorPerMajor
EXTRN	?Math@@3VSIMLIB_MATH_CLASS@@A:BYTE		; Math
EXTRN	?aeroDataset@@3PAVAeroDataSet@@A:DWORD		; aeroDataset
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?LogBook@@3VLogBookData@@A:BYTE			; LogBook
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?TheMap@@3VTMap@@A:BYTE				; TheMap
EXTRN	?WeaponDataTable@@3PAUWeaponClassDataType@@A:DWORD ; WeaponDataTable
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?g_bRealisticAvionics@@3_NA:BYTE		; g_bRealisticAvionics
EXTRN	?gACMIRec@@3VACMIRecorder@@A:BYTE		; gACMIRec
EXTRN	?acmiSwitch@@3UACMISwitchRecord@@A:BYTE		; acmiSwitch
EXTRN	?g_bCATIIIDefault@@3_NA:BYTE			; g_bCATIIIDefault
EXTRN	?g_fRecoveryAOA@@3MA:DWORD			; g_fRecoveryAOA
EXTRN	?gFuelState@@3KA:DWORD				; gFuelState
EXTRN	?g_fMeanTimeBetweenFailures@@3MA:DWORD		; g_fMeanTimeBetweenFailures
EXTRN	?g_bEnableRandomFailures@@3_NA:BYTE		; g_bEnableRandomFailures
EXTRN	?cockpitFlightData@@3VFlightData@@A:BYTE	; cockpitFlightData
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@c2200000
CONST	SEGMENT
__real@c2200000 DD 0c2200000r			; -40
CONST	ENDS
;	COMDAT __real@c1f00000
CONST	SEGMENT
__real@c1f00000 DD 0c1f00000r			; -30
CONST	ENDS
;	COMDAT __real@c1600000
CONST	SEGMENT
__real@c1600000 DD 0c1600000r			; -14
CONST	ENDS
;	COMDAT __real@c1300000
CONST	SEGMENT
__real@c1300000 DD 0c1300000r			; -11
CONST	ENDS
;	COMDAT __real@c1200000
CONST	SEGMENT
__real@c1200000 DD 0c1200000r			; -10
CONST	ENDS
;	COMDAT __real@bff921fb54442d18
CONST	SEGMENT
__real@bff921fb54442d18 DQ 0bff921fb54442d18r	; -1.5708
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf441b76
CONST	SEGMENT
__real@bf441b76 DD 0bf441b76r			; -0.766044
CONST	ENDS
;	COMDAT __real@8000000000000000
CONST	SEGMENT
__real@8000000000000000 DQ 08000000000000000r	; -0
CONST	ENDS
;	COMDAT __real@4adbba00
CONST	SEGMENT
__real@4adbba00 DD 04adbba00r			; 7.2e+006
CONST	ENDS
;	COMDAT __real@46fffe00
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
CONST	ENDS
;	COMDAT __real@45cb2000
CONST	SEGMENT
__real@45cb2000 DD 045cb2000r			; 6500
CONST	ENDS
;	COMDAT __real@458ca000
CONST	SEGMENT
__real@458ca000 DD 0458ca000r			; 4500
CONST	ENDS
;	COMDAT __real@44960000
CONST	SEGMENT
__real@44960000 DD 044960000r			; 1200
CONST	ENDS
;	COMDAT __real@448b8e14
CONST	SEGMENT
__real@448b8e14 DD 0448b8e14r			; 1116.44
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@43fd2ce8
CONST	SEGMENT
__real@43fd2ce8 DD 043fd2ce8r			; 506.351
CONST	ENDS
;	COMDAT __real@437a0000
CONST	SEGMENT
__real@437a0000 DD 0437a0000r			; 250
CONST	ENDS
;	COMDAT __real@43700000
CONST	SEGMENT
__real@43700000 DD 043700000r			; 240
CONST	ENDS
;	COMDAT __real@43480000
CONST	SEGMENT
__real@43480000 DD 043480000r			; 200
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@430706e2
CONST	SEGMENT
__real@430706e2 DD 0430706e2r			; 135.027
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@4280b53f
CONST	SEGMENT
__real@4280b53f DD 04280b53fr			; 64.354
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@42652ee1
CONST	SEGMENT
__real@42652ee1 DD 042652ee1r			; 57.2958
CONST	ENDS
;	COMDAT __real@42340000
CONST	SEGMENT
__real@42340000 DD 042340000r			; 45
CONST	ENDS
;	COMDAT __real@42200000
CONST	SEGMENT
__real@42200000 DD 042200000r			; 40
CONST	ENDS
;	COMDAT __real@42055555
CONST	SEGMENT
__real@42055555 DD 042055555r			; 33.3333
CONST	ENDS
;	COMDAT __real@4200b53f
CONST	SEGMENT
__real@4200b53f DD 04200b53fr			; 32.177
CONST	ENDS
;	COMDAT __real@41f80000
CONST	SEGMENT
__real@41f80000 DD 041f80000r			; 31
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@41b1c71c
CONST	SEGMENT
__real@41b1c71c DD 041b1c71cr			; 22.2222
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@41900000
CONST	SEGMENT
__real@41900000 DD 041900000r			; 18
CONST	ENDS
;	COMDAT __real@41880000
CONST	SEGMENT
__real@41880000 DD 041880000r			; 17
CONST	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@40d55555
CONST	SEGMENT
__real@40d55555 DD 040d55555r			; 6.66667
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40533333
CONST	SEGMENT
__real@40533333 DD 040533333r			; 3.3
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3ff1c433
CONST	SEGMENT
__real@3ff1c433 DD 03ff1c433r			; 1.8888
CONST	ENDS
;	COMDAT __real@3ff0cccccccccccd
CONST	SEGMENT
__real@3ff0cccccccccccd DQ 03ff0cccccccccccdr	; 1.05
CONST	ENDS
;	COMDAT __real@3fe69fbe76c8b439
CONST	SEGMENT
__real@3fe69fbe76c8b439 DQ 03fe69fbe76c8b439r	; 0.707
CONST	ENDS
;	COMDAT __real@3fd80b03
CONST	SEGMENT
__real@3fd80b03 DD 03fd80b03r			; 1.68784
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3fa66666
CONST	SEGMENT
__real@3fa66666 DD 03fa66666r			; 1.3
CONST	ENDS
;	COMDAT __real@3f99999a
CONST	SEGMENT
__real@3f99999a DD 03f99999ar			; 1.2
CONST	ENDS
;	COMDAT __real@3f8ccccd
CONST	SEGMENT
__real@3f8ccccd DD 03f8ccccdr			; 1.1
CONST	ENDS
;	COMDAT __real@3f866666
CONST	SEGMENT
__real@3f866666 DD 03f866666r			; 1.05
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7d70a4
CONST	SEGMENT
__real@3f7d70a4 DD 03f7d70a4r			; 0.99
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT __real@3f51eb85
CONST	SEGMENT
__real@3f51eb85 DD 03f51eb85r			; 0.82
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f17ac60
CONST	SEGMENT
__real@3f17ac60 DD 03f17ac60r			; 0.592474
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3eaf1aa0
CONST	SEGMENT
__real@3eaf1aa0 DD 03eaf1aa0r			; 0.342
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3da3d70a
CONST	SEGMENT
__real@3da3d70a DD 03da3d70ar			; 0.08
CONST	ENDS
;	COMDAT __real@3d9db22d
CONST	SEGMENT
__real@3d9db22d DD 03d9db22dr			; 0.077
CONST	ENDS
;	COMDAT __real@3d99999a
CONST	SEGMENT
__real@3d99999a DD 03d99999ar			; 0.075
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3ca3d70a
CONST	SEGMENT
__real@3ca3d70a DD 03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@3b03126f
CONST	SEGMENT
__real@3b03126f DD 03b03126fr			; 0.002
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@3a03126f
CONST	SEGMENT
__real@3a03126f DD 03a03126fr			; 0.0005
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PCECMIL@RemoveWeapon?5W?$CFf?5DI?$CFf?0?5O?$CFf?$AA@
CONST	SEGMENT
??_C@_0BL@PCECMIL@RemoveWeapon?5W?$CFf?5DI?$CFf?0?5O?$CFf?$AA@ DB 'Remove'
	DB	'Weapon W%f DI%f, O%f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08OIBIFGKP@mrsteed2?$AA@
CONST	SEGMENT
??_C@_08OIBIFGKP@mrsteed2?$AA@ DB 'mrsteed2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MDDFAFGM@mrsteed1?$AA@
CONST	SEGMENT
??_C@_08MDDFAFGM@mrsteed1?$AA@ DB 'mrsteed1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NKCODECN@mrsteed0?$AA@
CONST	SEGMENT
??_C@_08NKCODECN@mrsteed0?$AA@ DB 'mrsteed0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@IOOKMDAN@Unknown?5airframe?5index?5?$CFd?0?5using@
CONST	SEGMENT
??_C@_0CO@IOOKMDAN@Unknown?5airframe?5index?5?$CFd?0?5using@ DB 'Unknown '
	DB	'airframe index %d, using F16 instead', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?Reinit@AirframeClass@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Reinit@AirframeClass@@QAEXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Reinit@AirframeClass@@QAEXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Reinit@AirframeClass@@QAEXXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Reinit@AirframeClass@@QAEXXZ$3
__ehfuncinfo$?Reinit@AirframeClass@@QAEXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?Reinit@AirframeClass@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmirec.h
;	COMDAT ?IsRecording@ACMIRecorder@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsRecording@ACMIRecorder@@QAEHXZ PROC			; ACMIRecorder::IsRecording, COMDAT
; _this$ = ecx

; 319  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 320  : 		return _recording;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 321  : 	};

	mov	esp, ebp
	pop	ebp
	ret	0
?IsRecording@ACMIRecorder@@QAEHXZ ENDP			; ACMIRecorder::IsRecording
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?NumHardpoints@SMSBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NumHardpoints@SMSBaseClass@@QAEHXZ PROC		; SMSBaseClass::NumHardpoints, COMDAT
; _this$ = ecx

; 87   : 	int NumHardpoints (void) {return numHardpoints;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?NumHardpoints@SMSBaseClass@@QAEHXZ ENDP		; SMSBaseClass::NumHardpoints
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ PROC ; SimulationDriver::GetPlayerEntity, COMDAT
; _this$ = ecx

; 76   : 	SimMoverClass *GetPlayerEntity() const { return const_cast<SimMoverClass*>(playerEntity); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ENDP ; SimulationDriver::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ PROC	; AircraftClass::DBrain, COMDAT
; _this$ = ecx

; 624  : 	DigitalBrain *DBrain(void)			{return (DigitalBrain *)theBrain;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+672]
	mov	esp, ebp
	pop	ebp
	ret	0
?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ENDP	; AircraftClass::DBrain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?IsComplex@AircraftClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsComplex@AircraftClass@@QAEHXZ PROC			; AircraftClass::IsComplex, COMDAT
; _this$ = ecx

; 336  : 	int            IsComplex (void) {return ((acFlags & isComplex) ? TRUE : FALSE);}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+964]
	and	ecx, 4
	je	SHORT $LN3@IsComplex
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsComplex
$LN3@IsComplex:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsComplex:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsComplex@AircraftClass@@QAEHXZ ENDP			; AircraftClass::IsComplex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?IsF16@AircraftClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsF16@AircraftClass@@QAEHXZ PROC			; AircraftClass::IsF16, COMDAT
; _this$ = ecx

; 335  : 	int            IsF16 (void) {return (acFlags & isF16 ? TRUE : FALSE);}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+964]
	and	ecx, 1
	je	SHORT $LN3@IsF16
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsF16
$LN3@IsF16:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsF16:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsF16@AircraftClass@@QAEHXZ ENDP			; AircraftClass::IsF16
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ PROC ; AircraftClass::AutopilotType, COMDAT
; _this$ = ecx

; 329  : 	AutoPilotType	AutopilotType (void) {return autopilotType;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+968]
	mov	esp, ebp
	pop	ebp
	ret	0
?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ENDP ; AircraftClass::AutopilotType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?IsAcStatusBitsSet@AircraftClass@@QBE_NH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_bits$ = 8						; size = 4
?IsAcStatusBitsSet@AircraftClass@@QBE_NH@Z PROC		; AircraftClass::IsAcStatusBitsSet, COMDAT
; _this$ = ecx

; 170  : 	bool IsAcStatusBitsSet(int bits) const { return (status_bits & bits) == bits; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+760]
	and	ecx, DWORD PTR _bits$[ebp]
	cmp	ecx, DWORD PTR _bits$[ebp]
	jne	SHORT $LN3@IsAcStatus
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsAcStatus
$LN3@IsAcStatus:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsAcStatus:
	mov	al, BYTE PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsAcStatusBitsSet@AircraftClass@@QBE_NH@Z ENDP		; AircraftClass::IsAcStatusBitsSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simmover.h
;	COMDAT ?GetSwitch@SimMoverClass@@QAEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_num$ = 8						; size = 4
?GetSwitch@SimMoverClass@@QAEHH@Z PROC			; SimMoverClass::GetSwitch, COMDAT
; _this$ = ecx

; 135  : 	int GetSwitch (int num) { return num < numSwitches ? switchData[num] : 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _num$[ebp]
	cmp	ecx, DWORD PTR [eax+604]
	jge	SHORT $LN3@GetSwitch
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+592]
	mov	ecx, DWORD PTR _num$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv69[ebp], edx
	jmp	SHORT $LN4@GetSwitch
$LN3@GetSwitch:
	mov	DWORD PTR tv69[ebp], 0
$LN4@GetSwitch:
	mov	eax, DWORD PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetSwitch@SimMoverClass@@QAEHH@Z ENDP			; SimMoverClass::GetSwitch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simmover.h
;	COMDAT ?SetSwitch@SimMoverClass@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_num$ = 8						; size = 4
_val$ = 12						; size = 4
?SetSwitch@SimMoverClass@@QAEXHH@Z PROC			; SimMoverClass::SetSwitch, COMDAT
; _this$ = ecx

; 134  : 	void SetSwitch (int num, int val) { ShiAssert(num < numSwitches); if (num < numSwitches) { switchData[num] = val; switchChange[num] = TRUE;} }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _num$[ebp]
	cmp	ecx, DWORD PTR [eax+604]
	jge	SHORT $LN2@SetSwitch
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+592]
	mov	ecx, DWORD PTR _num$[ebp]
	mov	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+596]
	mov	edx, DWORD PTR _num$[ebp]
	mov	DWORD PTR [ecx+edx*4], 1
$LN2@SetSwitch:
	mov	esp, ebp
	pop	ebp
	ret	8
?SetSwitch@SimMoverClass@@QAEXHH@Z ENDP			; SimMoverClass::SetSwitch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\include\logbook.h
;	COMDAT ?Name@LogBookData@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Name@LogBookData@@QAEPADXZ PROC			; LogBookData::Name, COMDAT
; _this$ = ecx

; 167  : 	_TCHAR *Name(void)								{return Pilot.Name;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?Name@LogBookData@@QAEPADXZ ENDP			; LogBookData::Name
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GHeliMMClass@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GHeliMMClass@@QAEPAXI@Z PROC				; HeliMMClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1HeliMMClass@@QAE@XZ			; HeliMMClass::~HeliMMClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GHeliMMClass@@QAEPAXI@Z ENDP				; HeliMMClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?GetParkType@AirframeClass@@QAEHXZ PROC			; AirframeClass::GetParkType
; _this$ = ecx

; 1823 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1824 : 	return auxaeroData->largePark ? LargeParkPt : SmallParkPt; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+2532], 0
	je	SHORT $LN3@GetParkTyp
	mov	DWORD PTR tv67[ebp], 12			; 0000000cH
	jmp	SHORT $LN4@GetParkTyp
$LN3@GetParkTyp:
	mov	DWORD PTR tv67[ebp], 11			; 0000000bH
$LN4@GetParkTyp:
	mov	eax, DWORD PTR tv67[ebp]

; 1825 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetParkType@AirframeClass@@QAEHXZ ENDP			; AirframeClass::GetParkType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
tv340 = -24						; size = 4
_px$ = -20						; size = 4
_py$ = -16						; size = 4
_pz$ = -12						; size = 4
tv80 = -8						; size = 4
_this$ = -4						; size = 4
?RunHeliModel@AirframeClass@@QAEXXZ PROC		; AirframeClass::RunHeliModel
; _this$ = ecx

; 1143 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1144 : 	// continue to model gear
; 1145 : 	Axial(SimLibMajorFrameTime);

	push	ecx
	movss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Axial@AirframeClass@@AAEXM@Z		; AirframeClass::Axial

; 1146 : 
; 1147 : 	// continue to model engine for rpm and stuff?
; 1148 : 	EngineModel(SimLibMajorFrameTime);

	push	ecx
	movss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EngineModel@AirframeClass@@QAEXM@Z	; AirframeClass::EngineModel

; 1149 : 
; 1150 : 	// rpm is about 0.75 at idle
; 1151 : 	throtl = max( 0.0f, (rpm - 0.75f)/0.25f );

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1212]
	subss	xmm0, DWORD PTR __real@3f400000
	divss	xmm0, DWORD PTR __real@3e800000
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN5@RunHeliMod
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv80[ebp], xmm0
	jmp	SHORT $LN6@RunHeliMod
$LN5@RunHeliMod:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1212]
	subss	xmm0, DWORD PTR __real@3f400000
	divss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR tv80[ebp], xmm0
$LN6@RunHeliMod:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv80[ebp]
	movss	DWORD PTR [edx+1512], xmm0

; 1152 : 
; 1153 : 	// set stick values
; 1154 :       hf->SetControls( pstick, rstick, throtl, ypedal );

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1508]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1512]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1504]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1500]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1812]
	call	?SetControls@HeliMMClass@@QAEXMMMM@Z	; HeliMMClass::SetControls

; 1155 : 
; 1156 : 	// exec the helicopter model
; 1157 : 	hf->Exec();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1812]
	call	?Exec@HeliMMClass@@QAEXXZ		; HeliMMClass::Exec

; 1158 : 
; 1159 : 	// copy over heli vars to af vars
; 1160 : 
; 1161 : 	// x,y,z world coords
; 1162 : 	x = hf->XE.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1812]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+420]
	mov	DWORD PTR [edx+1108], eax

; 1163 : 	y = hf->XE.y;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1812]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+424]
	mov	DWORD PTR [eax+1112], ecx

; 1164 : 	z = hf->XE.z;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1812]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+428]
	mov	DWORD PTR [ecx+1116], edx

; 1165 : 
; 1166 : 	// NOTE: 
; 1167 : 	//	p	=	roll rate (around X axis)
; 1168 : 	//	q	=	pitch rate (around Y axis)
; 1169 : 	//	r	=	yaw rate (around Z axis)
; 1170 : 	//	phi	=	roll (around X axis)
; 1171 : 	//	theta=	pitch (around Y axis)
; 1172 : 	//	psi	=	yaw (around Z axis)
; 1173 : 	phi = hf->XE.ax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1812]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+432]
	mov	DWORD PTR [edx+1164], eax

; 1174 : 	theta = hf->XE.ay;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1812]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+436]
	mov	DWORD PTR [eax+1160], ecx

; 1175 : 	psi = hf->XE.az;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1812]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+440]
	mov	DWORD PTR [ecx+1168], edx

; 1176 : 	p = hf->VE.ax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1812]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+336]
	mov	DWORD PTR [edx+1132], eax

; 1177 : 	q = hf->VE.ay;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1812]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+340]
	mov	DWORD PTR [eax+1136], ecx

; 1178 : 	r = hf->VE.az;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1812]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+344]
	mov	DWORD PTR [ecx+1140], edx

; 1179 : 
; 1180 : 	// sfr: changed
; 1181 : 	xdot = hf->VE.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1812]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+324]
	mov	DWORD PTR [edx+1196], eax

; 1182 : 	ydot = hf->VE.y;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1812]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+328]
	mov	DWORD PTR [eax+1200], ecx

; 1183 : 	zdot = hf->VE.z;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1812]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+332]
	mov	DWORD PTR [ecx+1204], edx

; 1184 : 
; 1185 : 	vcas = hf->GetKias;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1812]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+812]
	mov	DWORD PTR [edx+1124], eax

; 1186 : 	alpha = hf->alpha;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1812]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+800]
	mov	DWORD PTR [eax+1152], ecx

; 1187 : 	beta = hf->beta;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1812]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+804]
	mov	DWORD PTR [ecx+1156], edx

; 1188 : 	gmma = hf->gmma;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1812]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+816]
	mov	DWORD PTR [edx+1172], eax

; 1189 : 	mu = hf->mu;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1812]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+820]
	mov	DWORD PTR [eax+1180], ecx

; 1190 : 	sigma = hf->sigma;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1812]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+824]
	mov	DWORD PTR [ecx+1176], edx

; 1191 : 	vt = hf->vta;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1812]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+88]
	mov	DWORD PTR [edx+1120], eax

; 1192 : 
; 1193 : 	// Check for ground contact
; 1194 : 	BIG_SCALAR px = x;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1108]
	movss	DWORD PTR _px$[ebp], xmm0

; 1195 : 	BIG_SCALAR py = y;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1112]
	movss	DWORD PTR _py$[ebp], xmm0

; 1196 : 	BIG_SCALAR pz = z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1116]
	movss	DWORD PTR _pz$[ebp], xmm0

; 1197 : 	if ( (IsSet(InAir)) && (pz > -TheMap.GetMEA(px, py)) )

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN1@RunHeliMod
	push	ecx
	movss	xmm0, DWORD PTR _py$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _px$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	call	?GetMEA@TMap@@QAEMMM@Z			; TMap::GetMEA
	fstp	DWORD PTR tv340[ebp]
	movss	xmm0, DWORD PTR tv340[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _pz$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN1@RunHeliMod

; 1198 : 	{
; 1199 : 		//Tpoint normal;
; 1200 : 		//float groundZ;
; 1201 : 		
; 1202 : 		//groundZ = OTWDriver.GetGroundLevel(x, y, &normal);
; 1203 : 		
; 1204 : 		if (pz >= groundZ - 5.0F)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1272]
	subss	xmm0, DWORD PTR __real@40a00000
	movss	xmm1, DWORD PTR _pz$[ebp]
	comiss	xmm1, xmm0
	jb	SHORT $LN1@RunHeliMod

; 1205 : 		{
; 1206 : 			platform->SetPosition(px, py, groundZ - 5.0F);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1272]
	subss	xmm0, DWORD PTR __real@40a00000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _py$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _px$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?SetPosition@VuEntity@@QAEXMMM@Z	; VuEntity::SetPosition

; 1207 : 			ClearFlag(InAir);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag
$LN1@RunHeliMod:

; 1208 : 		}
; 1209 : 	}
; 1210 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RunHeliModel@AirframeClass@@QAEXXZ ENDP		; AirframeClass::RunHeliModel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_lbs$ = -16						; size = 4
_fullfuel$ = -12					; size = 4
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
?ResetFuel@AirframeClass@@QAEXXZ PROC			; AirframeClass::ResetFuel
; _this$ = ecx

; 1312 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1313 :         float lbs = aeroDataset[vehicleIndex].inputData[AeroDataSet::InternalFuel] - fuel; // JPO - use the constant...

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+92]
	imul	ecx, 220				; 000000dcH
	add	ecx, DWORD PTR ?aeroDataset@@3PAVAeroDataSet@@A ; aeroDataset
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx+16]
	subss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR _lbs$[ebp], xmm0

; 1314 : 	weight += lbs;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+44]
	addss	xmm0, DWORD PTR _lbs$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+44], xmm0

; 1315 : 	mass += lbs/GRAVITY;

	movss	xmm0, DWORD PTR _lbs$[ebp]
	divss	xmm0, DWORD PTR __real@4200b53f
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+40], xmm0

; 1316 : 
; 1317 : 	float fullfuel = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _fullfuel$[ebp], xmm0

; 1318 : 	for (int i = 0; i < MAX_FUEL; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@ResetFuel
$LN2@ResetFuel:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN3@ResetFuel:
	cmp	DWORD PTR _i$1[ebp], 9
	jge	SHORT $LN1@ResetFuel

; 1319 : 		fullfuel += m_tankcap[i];

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fullfuel$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax*4+1724]
	movss	DWORD PTR _fullfuel$[ebp], xmm0
	jmp	SHORT $LN2@ResetFuel
$LN1@ResetFuel:

; 1320 : 	//fuel = aeroDataset[vehicleIndex].inputData[2];
; 1321 : 	// JPO - (re)allocate the fuel 
; 1322 : 	AllocateFuel(fullfuel);

	push	ecx
	movss	xmm0, DWORD PTR _fullfuel$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AllocateFuel@AirframeClass@@QAEXM@Z	; AirframeClass::AllocateFuel

; 1323 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ResetFuel@AirframeClass@@QAEXXZ ENDP			; AirframeClass::ResetFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nx$ = 8						; size = 4
_ny$ = 12						; size = 4
_nz$ = 16						; size = 4
?SetPosition@AirframeClass@@QAEXMMM@Z PROC		; AirframeClass::SetPosition
; _this$ = ecx

; 829  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 830  : 	x = nx; y = ny; z = nz;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _nx$[ebp]
	movss	DWORD PTR [eax+1108], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _ny$[ebp]
	movss	DWORD PTR [ecx+1112], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _nz$[ebp]
	movss	DWORD PTR [edx+1116], xmm0

; 831  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetPosition@AirframeClass@@QAEXMMM@Z ENDP		; AirframeClass::SetPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?IsSet@AirframeClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_testFlag$ = 8						; size = 4
?IsSet@AirframeClass@@QBEHH@Z PROC			; AirframeClass::IsSet, COMDAT
; _this$ = ecx

; 1216 : 	int IsSet (int testFlag) const {return flags & testFlag ? 1 : 0;}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	and	ecx, DWORD PTR _testFlag$[ebp]
	je	SHORT $LN3@IsSet
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSet
$LN3@IsSet:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSet:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSet@AirframeClass@@QBEHH@Z ENDP			; AirframeClass::IsSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?ClearFlag@AirframeClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newFlag$ = 8						; size = 4
?ClearFlag@AirframeClass@@QAEXH@Z PROC			; AirframeClass::ClearFlag, COMDAT
; _this$ = ecx

; 1215 : 	void ClearFlag (int newFlag) {flags &= ~newFlag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _newFlag$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+88]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+88], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearFlag@AirframeClass@@QAEXH@Z ENDP			; AirframeClass::ClearFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?SetFlag@AirframeClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newFlag$ = 8						; size = 4
?SetFlag@AirframeClass@@QAEXH@Z PROC			; AirframeClass::SetFlag, COMDAT
; _this$ = ecx

; 1214 : 	void SetFlag (int newFlag) {flags |= newFlag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	or	ecx, DWORD PTR _newFlag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+88], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFlag@AirframeClass@@QAEXH@Z ENDP			; AirframeClass::SetFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ResetAlpha@AirframeClass@@QAEXXZ PROC			; AirframeClass::ResetAlpha
; _this$ = ecx

; 1288 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1289 : 	oldp02[0] = alpha;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+1152]
	mov	DWORD PTR [ecx+eax+308], edx

; 1290 : 	oldp02[1] = alpha;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+1152]
	mov	DWORD PTR [ecx+eax+308], edx

; 1291 : 	oldp02[2] = alpha;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+1152]
	mov	DWORD PTR [ecx+eax+308], edx

; 1292 : 	oldp02[3] = alpha;

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+1152]
	mov	DWORD PTR [ecx+eax+308], edx

; 1293 : 	oldp02[4] = alpha;

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+1152]
	mov	DWORD PTR [ecx+eax+308], edx

; 1294 : 	oldp02[5] = alpha;

	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+1152]
	mov	DWORD PTR [ecx+eax+308], edx

; 1295 : 
; 1296 : 	oldp03[0] = alpha;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+1152]
	mov	DWORD PTR [ecx+eax+332], edx

; 1297 : 	oldp03[1] = alpha;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+1152]
	mov	DWORD PTR [ecx+eax+332], edx

; 1298 : 	oldp03[2] = alpha;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+1152]
	mov	DWORD PTR [ecx+eax+332], edx

; 1299 : 	oldp03[3] = alpha;

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+1152]
	mov	DWORD PTR [ecx+eax+332], edx

; 1300 : 	oldp03[4] = alpha;

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+1152]
	mov	DWORD PTR [ecx+eax+332], edx

; 1301 : 	oldp03[5] = alpha;

	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+1152]
	mov	DWORD PTR [ecx+eax+332], edx

; 1302 : 
; 1303 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ResetAlpha@AirframeClass@@QAEXXZ ENDP			; AirframeClass::ResetAlpha
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
tv135 = -8						; size = 4
_this$ = -4						; size = 4
_Weight$ = 8						; size = 4
_DragIndex$ = 12					; size = 4
_offset$ = 16						; size = 4
?RemoveWeapon@AirframeClass@@QAEXMMM@Z PROC		; AirframeClass::RemoveWeapon
; _this$ = ecx

; 1049 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1050 : //	ShiAssert(weight - Weight >= emptyWeight + fuel + externalFuel);
; 1051 : 	MonoPrint("RemoveWeapon W%f DI%f, O%f",Weight,DragIndex,offset);

	cvtss2sd xmm0, DWORD PTR _offset$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _DragIndex$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _Weight$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BL@PCECMIL@RemoveWeapon?5W?$CFf?5DI?$CFf?0?5O?$CFf?$AA@
	call	_MonoPrint
	add	esp, 28					; 0000001cH

; 1052 : 
; 1053 : 	if(weight - Weight < emptyWeight + fuel + externalFuel)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+44]
	subss	xmm0, DWORD PTR _Weight$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+52]
	addss	xmm1, DWORD PTR [edx+20]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm1, DWORD PTR [eax+32]
	comiss	xmm1, xmm0
	jbe	SHORT $LN1@RemoveWeap

; 1054 : 		Weight = weight - (emptyWeight + fuel + externalFuel);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+52]
	addss	xmm0, DWORD PTR [edx+20]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+44]
	subss	xmm1, xmm0
	movss	DWORD PTR _Weight$[ebp], xmm1
$LN1@RemoveWeap:

; 1055 : 
; 1056 : 	weight -= Weight;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+44]
	subss	xmm0, DWORD PTR _Weight$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+44], xmm0

; 1057 : 	mass -= Weight/GRAVITY;

	movss	xmm0, DWORD PTR _Weight$[ebp]
	divss	xmm0, DWORD PTR __real@4200b53f
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+40]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+40], xmm1

; 1058 : 	dragIndex -= DragIndex; //*(18238.0F/emptyWeight);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+48]
	subss	xmm0, DWORD PTR _DragIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+48], xmm0

; 1059 : 	dragIndex = max(dragIndex, 0.0F);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+48]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN4@RemoveWeap
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+48]
	movss	DWORD PTR tv135[ebp], xmm0
	jmp	SHORT $LN5@RemoveWeap
$LN4@RemoveWeap:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv135[ebp], xmm0
$LN5@RemoveWeap:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv135[ebp]
	movss	DWORD PTR [ecx+48], xmm0

; 1060 : 
; 1061 : 	loadingFraction = weight/emptyWeight;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+44]
	divss	xmm0, DWORD PTR [eax+52]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1228], xmm0

; 1062 : 	assymetry -= offset*Weight;

	movss	xmm0, DWORD PTR _offset$[ebp]
	mulss	xmm0, DWORD PTR _Weight$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1232]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1232], xmm1

; 1063 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?RemoveWeapon@AirframeClass@@QAEXMMM@Z ENDP		; AirframeClass::RemoveWeapon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Weight$ = 8						; size = 4
_DragIndex$ = 12					; size = 4
_offset$ = 16						; size = 4
?AddWeapon@AirframeClass@@QAEXMMM@Z PROC		; AirframeClass::AddWeapon
; _this$ = ecx

; 1031 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1032 : 	ShiAssert(Weight >= 0.0F);
; 1033 : 	ShiAssert(dragIndex >= 0.0F);
; 1034 : 	ShiAssert(fabs(offset) < 100);
; 1035 : 
; 1036 : 	//MonoPrint("AddWeapon W%f DI%f, O%f",Weight,DragIndex,offset);
; 1037 : 
; 1038 : 	weight += Weight;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+44]
	addss	xmm0, DWORD PTR _Weight$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+44], xmm0

; 1039 : 	mass += Weight/GRAVITY;

	movss	xmm0, DWORD PTR _Weight$[ebp]
	divss	xmm0, DWORD PTR __real@4200b53f
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+40]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+40], xmm0

; 1040 : 	dragIndex += DragIndex; //*(18238.0F/emptyWeight); //equate for relative size differences

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+48]
	addss	xmm0, DWORD PTR _DragIndex$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+48], xmm0

; 1041 : 
; 1042 : 	loadingFraction = weight/emptyWeight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+44]
	divss	xmm0, DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1228], xmm0

; 1043 : 	assymetry += offset*Weight;

	movss	xmm0, DWORD PTR _offset$[ebp]
	mulss	xmm0, DWORD PTR _Weight$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+1232]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1232], xmm0

; 1044 : 	//TJL 03/12/04 mono
; 1045 : 	//MonoPrint("AddWeapon W%f DI%f Offset%f",Weight,DragIndex,offset);
; 1046 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?AddWeapon@AirframeClass@@QAEXMMM@Z ENDP		; AirframeClass::AddWeapon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_wd$ = -24						; size = 4
_weapons$ = -20						; size = 4
_center$ = -16						; size = 4
_i$1 = -12						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
?FindExternalTanks@AirframeClass@@QAEXXZ PROC		; AirframeClass::FindExternalTanks
; _this$ = ecx

; 1339 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1340 : 	int center = (platform->Sms->NumHardpoints() - 1) / 2 + 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	ecx, DWORD PTR [ecx+940]
	call	?NumHardpoints@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumHardpoints
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, 1
	mov	DWORD PTR _center$[ebp], eax

; 1341 : 	int weapons = 0;

	mov	DWORD PTR _weapons$[ebp], 0

; 1342 : 
; 1343 : 	// RV - Biker - Check if CL tank is our last weapon (don't count guns)
; 1344 : 	for (int i=center+1; i<platform->Sms->NumHardpoints(); i++) {

	mov	edx, DWORD PTR _center$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
	jmp	SHORT $LN13@FindExtern
$LN12@FindExtern:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN13@FindExtern:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	ecx, DWORD PTR [edx+940]
	call	?NumHardpoints@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumHardpoints
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN11@FindExtern

; 1345 : 		if (platform->Sms->hardPoint[i] && platform->Sms->hardPoint[i]->GetWeaponType() != wtNone)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR [ecx+940]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	DWORD PTR [eax+ecx*4], 0
	je	SHORT $LN10@FindExtern
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	edx, DWORD PTR [eax+940]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [esi+156]
	call	eax
	cmp	eax, 11					; 0000000bH
	je	SHORT $LN10@FindExtern

; 1346 : 			weapons++;

	mov	ecx, DWORD PTR _weapons$[ebp]
	add	ecx, 1
	mov	DWORD PTR _weapons$[ebp], ecx
$LN10@FindExtern:

; 1347 :     }

	jmp	$LN12@FindExtern
$LN11@FindExtern:

; 1348 : 
; 1349 : 	// RV - Biker - We have only one weapon so this should be our center line
; 1350 : 	if (weapons == 1)

	cmp	DWORD PTR _weapons$[ebp], 1
	jne	SHORT $LN9@FindExtern

; 1351 : 		center = platform->Sms->NumHardpoints() - 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+940]
	call	?NumHardpoints@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumHardpoints
	sub	eax, 1
	mov	DWORD PTR _center$[ebp], eax
$LN9@FindExtern:

; 1352 : 
; 1353 :     WeaponClassDataType		*wd;
; 1354 : 
; 1355 :     for (int i=0; i<platform->Sms->NumHardpoints(); i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN8@FindExtern
$LN7@FindExtern:
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$2[ebp], ecx
$LN8@FindExtern:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+940]
	call	?NumHardpoints@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumHardpoints
	cmp	DWORD PTR _i$2[ebp], eax
	jge	$LN6@FindExtern

; 1356 :     {
; 1357 :       // if its a tank - try and guess which one.
; 1358 :       // assume only three possible positions... ?
; 1359 : 		if (platform->Sms->hardPoint[i] && 
; 1360 : 			platform->Sms->hardPoint[i]->GetWeaponClass() == wcTank)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR [edx+940]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$2[ebp]
	cmp	DWORD PTR [ecx+edx*4], 0
	je	$LN1@FindExtern
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR [ecx+940]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	eax, DWORD PTR [ecx+940]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+164]
	call	eax
	cmp	eax, 5
	jne	$LN1@FindExtern

; 1361 : 		{
; 1362 : 			wd = &WeaponDataTable[platform->Sms->hardPoint[i]->weaponId];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR [edx+940]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	movsx	ecx, WORD PTR [eax+8]
	imul	ecx, 60					; 0000003cH
	add	ecx, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	mov	DWORD PTR _wd$[ebp], ecx

; 1363 : 			ShiAssert (wd);
; 1364 : 			if (i < center) 

	mov	edx, DWORD PTR _i$2[ebp]
	cmp	edx, DWORD PTR _center$[ebp]
	jge	SHORT $LN4@FindExtern

; 1365 : 				m_tankcap[TANK_LEXT] = wd->Strength;

	mov	eax, DWORD PTR _wd$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	cvtsi2ss xmm0, ecx
	mov	edx, 4
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+edx+1724], xmm0
	jmp	SHORT $LN1@FindExtern
$LN4@FindExtern:

; 1366 : 			else if (i > center) 

	mov	ecx, DWORD PTR _i$2[ebp]
	cmp	ecx, DWORD PTR _center$[ebp]
	jle	SHORT $LN2@FindExtern

; 1367 : 				m_tankcap[TANK_REXT] = wd->Strength;

	mov	edx, DWORD PTR _wd$[ebp]
	movzx	eax, WORD PTR [edx+2]
	cvtsi2ss xmm0, eax
	mov	ecx, 4
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+ecx+1724], xmm0

; 1368 : 			else 

	jmp	SHORT $LN1@FindExtern
$LN2@FindExtern:

; 1369 : 				m_tankcap[TANK_CLINE] = wd->Strength;

	mov	eax, DWORD PTR _wd$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	cvtsi2ss xmm0, ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+edx+1724], xmm0
$LN1@FindExtern:

; 1370 : 		}
; 1371 :     }

	jmp	$LN7@FindExtern
$LN6@FindExtern:

; 1372 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?FindExternalTanks@AirframeClass@@QAEXXZ ENDP		; AirframeClass::FindExternalTanks
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_wd$ = -28						; size = 4
_weapons$ = -24						; size = 4
_center$ = -20						; size = 4
_i$1 = -16						; size = 4
_i$2 = -12						; size = 4
_maxfuel$ = -8						; size = 4
_this$ = -4						; size = 4
_lbs$ = 8						; size = 4
?AddFuel@AirframeClass@@QAEHM@Z PROC			; AirframeClass::AddFuel
; _this$ = ecx

; 1213 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1214 : 	if(fuel + lbs < 0.0F)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	addss	xmm0, DWORD PTR _lbs$[ebp]
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN15@AddFuel

; 1215 : 	{
; 1216 : 		lbs = -fuel;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+20]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _lbs$[ebp], xmm0
$LN15@AddFuel:

; 1217 : 	}
; 1218 : 
; 1219 : 	//MI fix for filling up too much. We also need to check if we have the tanks on our plane.
; 1220 : 	//float maxfuel = aeroDataset[vehicleIndex].inputData[2] + m_tankcap[TANK_LEXT]+m_tankcap[TANK_REXT]+m_tankcap[TANK_CLINE]; //me123 maeroo for external fuel
; 1221 : 	ShiAssert(platform);
; 1222 : 	ShiAssert(platform->Sms);
; 1223 : 	int center = (platform->Sms->NumHardpoints() - 1) / 2 + 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+940]
	call	?NumHardpoints@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumHardpoints
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, 1
	mov	DWORD PTR _center$[ebp], eax

; 1224 : 	int weapons = 0;

	mov	DWORD PTR _weapons$[ebp], 0

; 1225 : 
; 1226 : 	// RV - Biker - Check if CL tank is our last weapon (don't count guns)
; 1227 : 	for (int i=center+1; i<platform->Sms->NumHardpoints(); i++) {

	mov	ecx, DWORD PTR _center$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
	jmp	SHORT $LN14@AddFuel
$LN13@AddFuel:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN14@AddFuel:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	ecx, DWORD PTR [ecx+940]
	call	?NumHardpoints@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumHardpoints
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN12@AddFuel

; 1228 : 		if (platform->Sms->hardPoint[i] && platform->Sms->hardPoint[i]->GetWeaponType() != wtNone)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	je	SHORT $LN11@AddFuel
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR [edx+940]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	ecx, DWORD PTR [edx+940]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [eax+156]
	call	edx
	cmp	eax, 11					; 0000000bH
	je	SHORT $LN11@AddFuel

; 1229 : 			weapons++;

	mov	eax, DWORD PTR _weapons$[ebp]
	add	eax, 1
	mov	DWORD PTR _weapons$[ebp], eax
$LN11@AddFuel:

; 1230 :     }

	jmp	$LN13@AddFuel
$LN12@AddFuel:

; 1231 : 
; 1232 : 	// RV - Biker - We have only one weapon so this should be our center line
; 1233 : 	if (weapons == 1)

	cmp	DWORD PTR _weapons$[ebp], 1
	jne	SHORT $LN10@AddFuel

; 1234 : 		center = platform->Sms->NumHardpoints() - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	ecx, DWORD PTR [edx+940]
	call	?NumHardpoints@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumHardpoints
	sub	eax, 1
	mov	DWORD PTR _center$[ebp], eax
$LN10@AddFuel:

; 1235 : 
; 1236 : 
; 1237 : 	WeaponClassDataType		*wd = NULL;

	mov	DWORD PTR _wd$[ebp], 0

; 1238 : 	float maxfuel = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _maxfuel$[ebp], xmm0

; 1239 : 	maxfuel += aeroDataset[vehicleIndex].inputData[2];

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+92]
	imul	ecx, 220				; 000000dcH
	add	ecx, DWORD PTR ?aeroDataset@@3PAVAeroDataSet@@A ; aeroDataset
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _maxfuel$[ebp]
	addss	xmm0, DWORD PTR [ecx+edx+16]
	movss	DWORD PTR _maxfuel$[ebp], xmm0

; 1240 : 	
; 1241 :     for (int i=0; i<platform->Sms->NumHardpoints(); i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN9@AddFuel
$LN8@AddFuel:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN9@AddFuel:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	ecx, DWORD PTR [edx+940]
	call	?NumHardpoints@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumHardpoints
	cmp	DWORD PTR _i$2[ebp], eax
	jge	$LN7@AddFuel

; 1242 :     { 
; 1243 : 		// if its a tank - try and guess which one.
; 1244 : 		// assume only three possible positions... ?
; 1245 : 		if (platform->Sms->hardPoint[i] && 
; 1246 : 			platform->Sms->hardPoint[i]->GetWeaponClass() == wcTank) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR [ecx+940]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$2[ebp]
	cmp	DWORD PTR [eax+ecx*4], 0
	je	$LN2@AddFuel
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	edx, DWORD PTR [eax+940]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _i$2[ebp]
	mov	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [esi+164]
	call	eax
	cmp	eax, 5
	jne	$LN2@AddFuel

; 1247 : 			wd = &WeaponDataTable[platform->Sms->hardPoint[i]->weaponId];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR [edx+940]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	movsx	ecx, WORD PTR [eax+8]
	imul	ecx, 60					; 0000003cH
	add	ecx, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	mov	DWORD PTR _wd$[ebp], ecx

; 1248 : 			ShiAssert(wd);
; 1249 : 			if (i < center) 

	mov	edx, DWORD PTR _i$2[ebp]
	cmp	edx, DWORD PTR _center$[ebp]
	jge	SHORT $LN5@AddFuel

; 1250 : 				maxfuel += m_tankcap[TANK_LEXT];

	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _maxfuel$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax+1724]
	movss	DWORD PTR _maxfuel$[ebp], xmm0
	jmp	SHORT $LN2@AddFuel
$LN5@AddFuel:

; 1251 : 			else if (i > center) 

	mov	edx, DWORD PTR _i$2[ebp]
	cmp	edx, DWORD PTR _center$[ebp]
	jle	SHORT $LN3@AddFuel

; 1252 : 				maxfuel += m_tankcap[TANK_REXT];

	mov	eax, 4
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _maxfuel$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax+1724]
	movss	DWORD PTR _maxfuel$[ebp], xmm0

; 1253 : 			else 

	jmp	SHORT $LN2@AddFuel
$LN3@AddFuel:

; 1254 : 				maxfuel += m_tankcap[TANK_CLINE];

	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _maxfuel$[ebp]
	addss	xmm0, DWORD PTR [eax+edx+1724]
	movss	DWORD PTR _maxfuel$[ebp], xmm0
$LN2@AddFuel:

; 1255 : 		}
; 1256 :     }

	jmp	$LN8@AddFuel
$LN7@AddFuel:

; 1257 : 
; 1258 : 	if(fuel + lbs + externalFuel > maxfuel)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+20]
	addss	xmm0, DWORD PTR _lbs$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+32]
	comiss	xmm0, DWORD PTR _maxfuel$[ebp]
	jbe	SHORT $LN1@AddFuel

; 1259 : 	{
; 1260 : 		lbs = maxfuel - (fuel + externalFuel);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	addss	xmm0, DWORD PTR [ecx+32]
	movss	xmm1, DWORD PTR _maxfuel$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _lbs$[ebp], xmm1

; 1261 : 		weight += lbs;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+44]
	addss	xmm0, DWORD PTR _lbs$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+44], xmm0

; 1262 : 		mass += lbs/GRAVITY;

	movss	xmm0, DWORD PTR _lbs$[ebp]
	divss	xmm0, DWORD PTR __real@4200b53f
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+40]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+40], xmm0

; 1263 : 		fuel = maxfuel;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _maxfuel$[ebp]
	movss	DWORD PTR [eax+20], xmm0

; 1264 : 		AllocateFuel(fuel); // JPO - allocate between tanks

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+20]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AllocateFuel@AirframeClass@@QAEXM@Z	; AirframeClass::AllocateFuel

; 1265 : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN16@AddFuel
$LN1@AddFuel:

; 1266 : 	}
; 1267 : 
; 1268 : 	fuel += lbs;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+20]
	addss	xmm0, DWORD PTR _lbs$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+20], xmm0

; 1269 : 	weight += lbs;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+44]
	addss	xmm0, DWORD PTR _lbs$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+44], xmm0

; 1270 : 	mass += lbs/GRAVITY;

	movss	xmm0, DWORD PTR _lbs$[ebp]
	divss	xmm0, DWORD PTR __real@4200b53f
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+40], xmm0

; 1271 : 	AllocateFuel(fuel + externalFuel); // JPO allocate between tanks

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+20]
	addss	xmm0, DWORD PTR [eax+32]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AllocateFuel@AirframeClass@@QAEXM@Z	; AirframeClass::AllocateFuel

; 1272 : 	return TRUE;

	mov	eax, 1
$LN16@AddFuel:

; 1273 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?AddFuel@AirframeClass@@QAEHM@Z ENDP			; AirframeClass::AddFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lbs$ = 8						; size = 4
?AddExternalFuel@AirframeClass@@QAEXM@Z PROC		; AirframeClass::AddExternalFuel
; _this$ = ecx

; 1276 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1277 : 	if(externalFuel + lbs < 0.0F)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	addss	xmm0, DWORD PTR _lbs$[ebp]
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN1@AddExterna

; 1278 : 	{
; 1279 : 		lbs = -externalFuel;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+32]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _lbs$[ebp], xmm0
$LN1@AddExterna:

; 1280 : 	}
; 1281 : 
; 1282 : 	externalFuel += lbs;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+32]
	addss	xmm0, DWORD PTR _lbs$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+32], xmm0

; 1283 : 	weight += lbs;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+44]
	addss	xmm0, DWORD PTR _lbs$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+44], xmm0

; 1284 : 	mass += lbs/GRAVITY;

	movss	xmm0, DWORD PTR _lbs$[ebp]
	divss	xmm0, DWORD PTR __real@4200b53f
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+40], xmm0

; 1285 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?AddExternalFuel@AirframeClass@@QAEXM@Z ENDP		; AirframeClass::AddExternalFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_desAlpha$ = 8						; size = 4
?CalcDesSpeed@AirframeClass@@QAEMM@Z PROC		; AirframeClass::CalcDesSpeed
; _this$ = ecx

; 1134 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1135 : 	//MonoPrint("DesVt: %6.2f   Vt: %6.2f    Alpha: %5.2f\n", sqrt( 2.0F*GRAVITY*mass/( area*rho*(cl + (desAlpha - oldp03[2])*clalpha)) ), vt, alpha);
; 1136 : 	if((cl + (desAlpha - oldp03[2])*clalpha) < 0.0F)

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _desAlpha$[ebp]
	subss	xmm0, DWORD PTR [ecx+eax+332]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+144]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+152]
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN2@CalcDesSpe

; 1137 : 		return vt;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+1120]
	jmp	SHORT $LN1@CalcDesSpe

; 1138 : 	else

	jmp	SHORT $LN1@CalcDesSpe
$LN2@CalcDesSpe:

; 1139 : 		return (float)sqrt( 2.0F*GRAVITY*mass/( area*rho*(cl + (desAlpha - oldp03[2])*clalpha)) );

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@4280b53f
	mulss	xmm0, DWORD PTR [edx+40]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+16]
	mulss	xmm1, DWORD PTR [ecx+1128]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR _desAlpha$[ebp]
	subss	xmm2, DWORD PTR [eax+edx+332]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm2, DWORD PTR [ecx+144]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm2, DWORD PTR [edx+152]
	mulss	xmm1, xmm2
	divss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
$LN1@CalcDesSpe:

; 1140 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CalcDesSpeed@AirframeClass@@QAEMM@Z ENDP		; AirframeClass::CalcDesSpeed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
tv86 = -8						; size = 4
_this$ = -4						; size = 4
_desGs$ = 8						; size = 4
?CalcDesAlpha@AirframeClass@@QAEMM@Z PROC		; AirframeClass::CalcDesAlpha
; _this$ = ecx

; 1129 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1130 : 	return oldp03[2] + (desGs - nzcgb)*GRAVITY/(qsom*clalpha);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _desGs$[ebp]
	subss	xmm0, DWORD PTR [ecx+1192]
	mulss	xmm0, DWORD PTR __real@4200b53f
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+648]
	mulss	xmm1, DWORD PTR [ecx+144]
	divss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+eax+332]
	movss	DWORD PTR tv86[ebp], xmm0
	fld	DWORD PTR tv86[ebp]

; 1131 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CalcDesAlpha@AirframeClass@@QAEMM@Z ENDP		; AirframeClass::CalcDesAlpha
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_newthrotl$ = -80					; size = 4
_groundType$ = -76					; size = 4
_tempqsom$ = -72					; size = 4
_cd$ = -68						; size = 4
tv367 = -64						; size = 4
_MachBreak$ = -60					; size = 4
_AlphaBreak$ = -56					; size = 4
tv308 = -52						; size = 4
tv259 = -48						; size = 4
_th2$ = -44						; size = 4
_drag$ = -40						; size = 4
_Mu_fric$ = -36						; size = 4
_mz$ = -32						; size = 4
_EngAltBreak$ = -28					; size = 4
_EngMachBreak$ = -24					; size = 4
tv85 = -20						; size = 4
_accel$ = -16						; size = 4
_th1$ = -12						; size = 4
_tempMach$ = -8						; size = 4
_this$ = -4						; size = 4
_speed$ = 8						; size = 4
?CalcThrotlPos@AirframeClass@@QAEMM@Z PROC		; AirframeClass::CalcThrotlPos
; _this$ = ecx

; 1066 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	mov	DWORD PTR _this$[ebp], ecx

; 1067 : 	float tempMach, tempqsom, Mu_fric;
; 1068 : 	float th1,th2, newthrotl, cd, drag, accel = 1.0F;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _accel$[ebp], xmm0

; 1069 : 	int EngAltBreak	= 0;

	mov	DWORD PTR _EngAltBreak$[ebp], 0

; 1070 : 	int EngMachBreak = 0;

	mov	DWORD PTR _EngMachBreak$[ebp], 0

; 1071 : 	int	AlphaBreak = 0;

	mov	DWORD PTR _AlphaBreak$[ebp], 0

; 1072 : 	int MachBreak = 0;

	mov	DWORD PTR _MachBreak$[ebp], 0

; 1073 : 	int groundType;
; 1074 : 
; 1075 : 	if ( vt > speed * 1.1f )

	movss	xmm0, DWORD PTR _speed$[ebp]
	mulss	xmm0, DWORD PTR __real@3f8ccccd
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+1120]
	comiss	xmm1, xmm0
	jbe	SHORT $LN7@CalcThrotl

; 1076 : 		return 0.0f;

	fldz
	jmp	$LN8@CalcThrotl
$LN7@CalcThrotl:

; 1077 : 
; 1078 : 	if(speed <= 0.0F)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _speed$[ebp]
	jb	SHORT $LN6@CalcThrotl

; 1079 : 		return 0.0F;

	fldz
	jmp	$LN8@CalcThrotl
$LN6@CalcThrotl:

; 1080 : 
; 1081 : 	if(vt < speed)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _speed$[ebp]
	comiss	xmm0, DWORD PTR [ecx+1120]
	jbe	$LN5@CalcThrotl

; 1082 : 	{
; 1083 : 		if(vt < 0.2F * speed)

	movss	xmm0, DWORD PTR __real@3e4ccccd
	mulss	xmm0, DWORD PTR _speed$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [edx+1120]
	jbe	SHORT $LN4@CalcThrotl

; 1084 : 		{
; 1085 : 			if(vt < 10.0F)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	comiss	xmm0, DWORD PTR [eax+1120]
	jbe	SHORT $LN3@CalcThrotl

; 1086 : 				return 1.5F;

	fld	DWORD PTR __real@3fc00000
	jmp	$LN8@CalcThrotl
$LN3@CalcThrotl:

; 1087 : 
; 1088 : 			tempMach = speed*5.0F/AASL;

	movss	xmm0, DWORD PTR _speed$[ebp]
	mulss	xmm0, DWORD PTR __real@40a00000
	divss	xmm0, DWORD PTR __real@448b8e14
	movss	DWORD PTR _tempMach$[ebp], xmm0

; 1089 : 		}
; 1090 : 		else

	jmp	SHORT $LN2@CalcThrotl
$LN4@CalcThrotl:

; 1091 : 			tempMach = (speed * ( speed/vt) )/AASL;	

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _speed$[ebp]
	divss	xmm0, DWORD PTR [ecx+1120]
	mulss	xmm0, DWORD PTR _speed$[ebp]
	divss	xmm0, DWORD PTR __real@448b8e14
	movss	DWORD PTR _tempMach$[ebp], xmm0
$LN2@CalcThrotl:

; 1092 : 
; 1093 : 		accel = 1.2F;

	movss	xmm0, DWORD PTR __real@3f99999a
	movss	DWORD PTR _accel$[ebp], xmm0

; 1094 : 	}
; 1095 : 	else

	jmp	SHORT $LN1@CalcThrotl
$LN5@CalcThrotl:

; 1096 : 		tempMach = speed/AASL;

	movss	xmm0, DWORD PTR _speed$[ebp]
	divss	xmm0, DWORD PTR __real@448b8e14
	movss	DWORD PTR _tempMach$[ebp], xmm0
$LN1@CalcThrotl:

; 1097 : 
; 1098 : 	tempMach = min(tempMach,2.0F);

	movss	xmm0, DWORD PTR __real@40000000
	comiss	xmm0, DWORD PTR _tempMach$[ebp]
	jbe	SHORT $LN10@CalcThrotl
	movss	xmm0, DWORD PTR _tempMach$[ebp]
	movss	DWORD PTR tv85[ebp], xmm0
	jmp	SHORT $LN11@CalcThrotl
$LN10@CalcThrotl:
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv85[ebp], xmm0
$LN11@CalcThrotl:
	movss	xmm0, DWORD PTR tv85[ebp]
	movss	DWORD PTR _tempMach$[ebp], xmm0

; 1099 : 
; 1100 : 	BIG_SCALAR mz = -platform->ZPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv308[ebp]
	movss	xmm0, DWORD PTR tv308[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _mz$[ebp], xmm0

; 1101 : 	th1 = Math.TwodInterp (mz, tempMach, engineData->alt,
; 1102 :     engineData->mach, engineData->thrust[0], engineData->numAlt,
; 1103 : 	engineData->numMach, &EngAltBreak, &EngMachBreak);

	lea	eax, DWORD PTR _EngMachBreak$[ebp]
	push	eax
	lea	ecx, DWORD PTR _EngAltBreak$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR [eax+ecx+28]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _tempMach$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _mz$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?Math@@3VSIMLIB_MATH_CLASS@@A ; Math
	call	?TwodInterp@SIMLIB_MATH_CLASS@@QAEMMMPBM00HHPAH1@Z ; SIMLIB_MATH_CLASS::TwodInterp
	fstp	DWORD PTR _th1$[ebp]

; 1104 : 	th2 = Math.TwodInterp (mz, tempMach, engineData->alt,
; 1105 : 	engineData->mach, engineData->thrust[1], engineData->numAlt,
; 1106 : 	engineData->numMach, &EngAltBreak, &EngMachBreak);

	lea	eax, DWORD PTR _EngMachBreak$[ebp]
	push	eax
	lea	ecx, DWORD PTR _EngAltBreak$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [eax+ecx+28]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _tempMach$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _mz$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?Math@@3VSIMLIB_MATH_CLASS@@A ; Math
	call	?TwodInterp@SIMLIB_MATH_CLASS@@QAEMMMPBM00HHPAH1@Z ; SIMLIB_MATH_CLASS::TwodInterp
	fstp	DWORD PTR _th2$[ebp]

; 1107 : 
; 1108 : 
; 1109 : 	cd = Math.TwodInterp(
; 1110 : 		tempMach, alpha, aeroData->mach, aeroData->alpha,
; 1111 :         aeroData->cdrag, aeroData->numMach, aeroData->numAlpha, &MachBreak, &AlphaBreak
; 1112 : 	) * aeroData->cdFactor;

	lea	eax, DWORD PTR _AlphaBreak$[ebp]
	push	eax
	lea	ecx, DWORD PTR _MachBreak$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1152]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _tempMach$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?Math@@3VSIMLIB_MATH_CLASS@@A ; Math
	call	?TwodInterp@SIMLIB_MATH_CLASS@@QAEMMMPBM00HHPAH1@Z ; SIMLIB_MATH_CLASS::TwodInterp
	fstp	DWORD PTR tv367[ebp]
	movss	xmm0, DWORD PTR tv367[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR _cd$[ebp], xmm0

; 1113 : 
; 1114 : 
; 1115 : 	tempqsom = 0.5F * rho * speed * speed * area/mass;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [edx+1128]
	mulss	xmm0, DWORD PTR _speed$[ebp]
	mulss	xmm0, DWORD PTR _speed$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [ecx+40]
	movss	DWORD PTR _tempqsom$[ebp], xmm0

; 1116 : 
; 1117 : 	drag  = (cd + 0.002F + auxaeroData->CDLDGFactor*gearPos)*tempqsom;

	movss	xmm0, DWORD PTR _cd$[ebp]
	addss	xmm0, DWORD PTR __real@3b03126f
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+160]
	mulss	xmm1, DWORD PTR [ecx+1552]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _tempqsom$[ebp]
	movss	DWORD PTR _drag$[ebp], xmm0

; 1118 : 	 
; 1119 : 	groundType = OTWDriver.GetGroundType ( x, y );

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1112]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1108]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundType@OTWDriverClass@@QAEHMM@Z	; OTWDriverClass::GetGroundType
	mov	DWORD PTR _groundType$[ebp], eax

; 1120 : 
; 1121 : 	Mu_fric = CalcMuFric(groundType);

	mov	ecx, DWORD PTR _groundType$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcMuFric@AirframeClass@@QAEMH@Z	; AirframeClass::CalcMuFric
	fstp	DWORD PTR _Mu_fric$[ebp]

; 1122 : 
; 1123 : 	newthrotl = min( ((drag + Mu_fric*(1.0F - nzcgs)*GRAVITY)/ethrst*mass - th1)/(th2-th1) * accel, 1.5F);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR [edx+268]
	mulss	xmm0, DWORD PTR _Mu_fric$[ebp]
	mulss	xmm0, DWORD PTR __real@4200b53f
	addss	xmm0, DWORD PTR _drag$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [eax+204]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+40]
	subss	xmm0, DWORD PTR _th1$[ebp]
	movss	xmm1, DWORD PTR _th2$[ebp]
	subss	xmm1, DWORD PTR _th1$[ebp]
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _accel$[ebp]
	movss	xmm1, DWORD PTR __real@3fc00000
	comiss	xmm1, xmm0
	jbe	SHORT $LN12@CalcThrotl
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR [edx+268]
	mulss	xmm0, DWORD PTR _Mu_fric$[ebp]
	mulss	xmm0, DWORD PTR __real@4200b53f
	addss	xmm0, DWORD PTR _drag$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [eax+204]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+40]
	subss	xmm0, DWORD PTR _th1$[ebp]
	movss	xmm1, DWORD PTR _th2$[ebp]
	subss	xmm1, DWORD PTR _th1$[ebp]
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _accel$[ebp]
	movss	DWORD PTR tv259[ebp], xmm0
	jmp	SHORT $LN13@CalcThrotl
$LN12@CalcThrotl:
	movss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR tv259[ebp], xmm0
$LN13@CalcThrotl:
	movss	xmm0, DWORD PTR tv259[ebp]
	movss	DWORD PTR _newthrotl$[ebp], xmm0

; 1124 : 
; 1125 : 	return newthrotl;

	fld	DWORD PTR _newthrotl$[ebp]
$LN8@CalcThrotl:

; 1126 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CalcThrotlPos@AirframeClass@@QAEMM@Z ENDP		; AirframeClass::CalcThrotlPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
tv646 = -80						; size = 8
_Trig$ = -72						; size = 8
_dt$ = -64						; size = 4
tv815 = -60						; size = 4
tv796 = -56						; size = 4
_height$1 = -52						; size = 4
tv605 = -48						; size = 4
tv604 = -44						; size = 4
tv597 = -40						; size = 4
tv329 = -36						; size = 4
_newZ$2 = -32						; size = 4
tv643 = -28						; size = 4
_xydelta$ = -24						; size = 4
_mag$ = -20						; size = 4
_newSigma$ = -16					; size = 4
_newGamma$ = -12					; size = 4
_pa$ = -8						; size = 4
_this$ = -4						; size = 4
?RemoteUpdate@AirframeClass@@QAEXXZ PROC		; AirframeClass::RemoteUpdate
; _this$ = ecx

; 670  : void AirframeClass::RemoteUpdate(){

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	mov	DWORD PTR _this$[ebp], ecx

; 671  : 	ObjectGeometry	*pa = &platform->platformAngles;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	add	ecx, 340				; 00000154H
	mov	DWORD PTR _pa$[ebp], ecx

; 672  : 	mlTrig Trig;
; 673  : 	float newGamma, newSigma;
; 674  : 	float dt;
; 675  : 
; 676  : 	dt = (vuxGameTime - platform->LastUpdateTime ()) / 1000.0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?LastUpdateTime@VuEntity@@QBEKXZ	; VuEntity::LastUpdateTime
	mov	ecx, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	sub	ecx, eax
	mov	DWORD PTR tv643[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv643[ebp]
	mov	edx, DWORD PTR tv643[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv646[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv646[ebp]
	divss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR _dt$[ebp], xmm0

; 677  : 
; 678  : 	platform->SetUpdateTime (vuxGameTime);

	mov	eax, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?SetUpdateTime@VuEntity@@QAEXK@Z	; VuEntity::SetUpdateTime

; 679  : 
; 680  : 	xdot = platform->XDelta();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+1196]

; 681  : 	ydot = platform->YDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+1200]

; 682  : 	zdot = platform->ZDelta();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+1204]

; 683  : 	// sfr: this is wrong, driver does this
; 684  : 	//x = platform->XPos() + xdot * dt;
; 685  : 	//y = platform->YPos() + ydot * dt;
; 686  : 	//z = platform->ZPos() + zdot * dt;
; 687  : 	x = platform->XPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+1108]

; 688  : 	y = platform->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+1112]

; 689  : 	z = platform->ZPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+1116]

; 690  : 
; 691  : 	groundAnchorX = x;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1108]
	mov	DWORD PTR [edx+112], ecx

; 692  : 	groundAnchorY = y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1112]
	mov	DWORD PTR [edx+116], ecx

; 693  : 	groundDeltaX = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+120], xmm0

; 694  : 	groundDeltaY = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+124], xmm0

; 695  : 
; 696  : 	theta = platform->Pitch();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+1160]

; 697  : 	psi = platform->Yaw();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+1168]

; 698  : 
; 699  : 	mlSinCos(&Trig, theta);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1160]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _Trig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 700  : 	pa->sinthe = Trig.sin;

	mov	ecx, DWORD PTR _pa$[ebp]
	movss	xmm0, DWORD PTR _Trig$[ebp]
	movss	DWORD PTR [ecx+48], xmm0

; 701  : 	pa->costhe = Trig.cos;

	mov	edx, DWORD PTR _pa$[ebp]
	movss	xmm0, DWORD PTR _Trig$[ebp+4]
	movss	DWORD PTR [edx+52], xmm0

; 702  : 
; 703  : 	mlSinCos(&Trig, psi);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1168]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _Trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 704  : 	pa->sinpsi = Trig.sin;

	mov	edx, DWORD PTR _pa$[ebp]
	movss	xmm0, DWORD PTR _Trig$[ebp]
	movss	DWORD PTR [edx+64], xmm0

; 705  : 	pa->cospsi = Trig.cos;

	mov	eax, DWORD PTR _pa$[ebp]
	movss	xmm0, DWORD PTR _Trig$[ebp+4]
	movss	DWORD PTR [eax+68], xmm0

; 706  : 
; 707  : 	float xydelta = (float)sqrt(xdot*xdot + ydot*ydot);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1196]
	mulss	xmm0, DWORD PTR [edx+1196]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+1200]
	mulss	xmm1, DWORD PTR [ecx+1200]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _xydelta$[ebp]

; 708  : 
; 709  : 	if (xydelta && !platform->OnGround ()){

	movss	xmm0, DWORD PTR _xydelta$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN15@RemoteUpda
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	jne	SHORT $LN15@RemoteUpda

; 710  : 		newSigma = (float)atan2(ydot, xdot);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+1196]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+1200]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _newSigma$[ebp]

; 711  : 	}
; 712  : 	else {

	jmp	SHORT $LN14@RemoteUpda
$LN15@RemoteUpda:

; 713  : 		newSigma = psi;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1168]
	movss	DWORD PTR _newSigma$[ebp], xmm0
$LN14@RemoteUpda:

; 714  : 	}
; 715  : 
; 716  : 	r = (sigma - newSigma)/SimLibMajorFrameTime;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1176]
	subss	xmm0, DWORD PTR _newSigma$[ebp]
	divss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1140], xmm0

; 717  : 	sigma = newSigma;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _newSigma$[ebp]
	movss	DWORD PTR [eax+1176], xmm0

; 718  : 
; 719  : 	groundZ = OTWDriver.GetGroundLevel(x, y, &gndNormal);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1288				; 00000508H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1112]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1108]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+1272]

; 720  : 	float mag = (float)sqrt(gndNormal.x*gndNormal.x + gndNormal.y*gndNormal.y + gndNormal.z*gndNormal.z);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1288]
	mulss	xmm0, DWORD PTR [eax+1288]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1292]
	mulss	xmm1, DWORD PTR [edx+1292]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+1296]
	mulss	xmm1, DWORD PTR [ecx+1296]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _mag$[ebp]

; 721  : 	gndNormal.x /= mag;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1288]
	divss	xmm0, DWORD PTR _mag$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1288], xmm0

; 722  : 	gndNormal.y /= mag;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1292]
	divss	xmm0, DWORD PTR _mag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1292], xmm0

; 723  : 	gndNormal.z /= mag;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1296]
	divss	xmm0, DWORD PTR _mag$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1296], xmm0

; 724  : 
; 725  : 	if (platform->OnGround()){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	je	$LN13@RemoteUpda

; 726  : 		CalculateGroundPlane(&gmma, &mu);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1180				; 0000049cH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1172				; 00000494H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateGroundPlane@AirframeClass@@ABEXPAM0@Z ; AirframeClass::CalculateGroundPlane

; 727  : 		// sfr: stop plane sink, doest work, function is being called with bad values
; 728  : 		float height = CheckHeight();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckHeight@AirframeClass@@QBEMXZ	; AirframeClass::CheckHeight
	fstp	DWORD PTR _height$1[ebp]

; 729  : 		float newZ = groundZ - height;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1272]
	subss	xmm0, DWORD PTR _height$1[ebp]
	movss	DWORD PTR _newZ$2[ebp], xmm0

; 730  : 		if (newZ < z){

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1116]
	comiss	xmm0, DWORD PTR _newZ$2[ebp]
	jbe	SHORT $LN12@RemoteUpda

; 731  : 			// sfr: only update Z if newZ is higher than current (on carriers for example this doesnt happen)
; 732  : 			// this will probably fix the players sunk on carriers and ground
; 733  : 			z = newZ;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _newZ$2[ebp]
	movss	DWORD PTR [edx+1116], xmm0
$LN12@RemoteUpda:

; 734  : 		}
; 735  : 		q = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1136], xmm0

; 736  : 		p = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1132], xmm0

; 737  : 		phi = mu;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1180]
	mov	DWORD PTR [edx+1164], ecx

; 738  : 	}
; 739  : 	else {

	jmp	$LN11@RemoteUpda
$LN13@RemoteUpda:

; 740  : 		//not strictly true but close enough
; 741  : 		p = (phi - platform->Roll())/SimLibMajorFrameTime;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv796[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1164]
	subss	xmm0, DWORD PTR tv796[ebp]
	divss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1132], xmm0

; 742  : 		mu = phi = platform->Roll();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv329[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv329[ebp]
	movss	DWORD PTR [eax+1164], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv329[ebp]
	movss	DWORD PTR [ecx+1180], xmm0

; 743  : 
; 744  : 		if (xydelta){

	movss	xmm0, DWORD PTR _xydelta$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN10@RemoteUpda

; 745  : 			newGamma = (float)atan(platform->ZDelta()/xydelta);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv815[ebp]
	movss	xmm0, DWORD PTR tv815[ebp]
	divss	xmm0, DWORD PTR _xydelta$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	fstp	DWORD PTR _newGamma$[ebp]
	jmp	SHORT $LN7@RemoteUpda
$LN10@RemoteUpda:

; 746  : 		}
; 747  : 		else if(platform->OnGround ()) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+1088]
	mov	edx, DWORD PTR [eax+148]
	call	edx
	test	eax, eax
	je	SHORT $LN8@RemoteUpda

; 748  : 			newGamma = gmma;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1172]
	movss	DWORD PTR _newGamma$[ebp], xmm0

; 749  : 		}
; 750  : 		else {

	jmp	SHORT $LN7@RemoteUpda
$LN8@RemoteUpda:

; 751  : 			newGamma = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _newGamma$[ebp], xmm0

; 752  : 			vt = 300.0F*KNOTS_TO_FTPSEC;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43fd2ce8
	movss	DWORD PTR [ecx+1120], xmm0
$LN7@RemoteUpda:

; 753  : 		}
; 754  : 
; 755  : 		q = (gmma - newGamma)/SimLibMajorFrameTime;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1172]
	subss	xmm0, DWORD PTR _newGamma$[ebp]
	divss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1136], xmm0

; 756  : 		gmma = newGamma;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _newGamma$[ebp]
	movss	DWORD PTR [ecx+1172], xmm0
$LN11@RemoteUpda:

; 757  : 	}
; 758  : 
; 759  : 	mlSinCos(&Trig, mu);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1180]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _Trig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 760  : 	pa->sinmu = Trig.sin;

	mov	ecx, DWORD PTR _pa$[ebp]
	movss	xmm0, DWORD PTR _Trig$[ebp]
	movss	DWORD PTR [ecx+40], xmm0

; 761  : 	pa->cosmu = Trig.cos;

	mov	edx, DWORD PTR _pa$[ebp]
	movss	xmm0, DWORD PTR _Trig$[ebp+4]
	movss	DWORD PTR [edx+44], xmm0

; 762  : 	pa->sinphi = Trig.sin;

	mov	eax, DWORD PTR _pa$[ebp]
	movss	xmm0, DWORD PTR _Trig$[ebp]
	movss	DWORD PTR [eax+56], xmm0

; 763  : 	pa->cosphi = Trig.cos;

	mov	ecx, DWORD PTR _pa$[ebp]
	movss	xmm0, DWORD PTR _Trig$[ebp+4]
	movss	DWORD PTR [ecx+60], xmm0

; 764  : 
; 765  : 	mlSinCos(&Trig, gmma);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1172]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _Trig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 766  : 	pa->singam = Trig.sin;

	mov	ecx, DWORD PTR _pa$[ebp]
	movss	xmm0, DWORD PTR _Trig$[ebp]
	movss	DWORD PTR [ecx+24], xmm0

; 767  : 	pa->cosgam = Trig.cos;

	mov	edx, DWORD PTR _pa$[ebp]
	movss	xmm0, DWORD PTR _Trig$[ebp+4]
	movss	DWORD PTR [edx+28], xmm0

; 768  : 
; 769  : 	mlSinCos(&Trig, sigma);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1176]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _Trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 770  : 	pa->sinsig = Trig.sin;

	mov	edx, DWORD PTR _pa$[ebp]
	movss	xmm0, DWORD PTR _Trig$[ebp]
	movss	DWORD PTR [edx+32], xmm0

; 771  : 	pa->cossig = Trig.cos;

	mov	eax, DWORD PTR _pa$[ebp]
	movss	xmm0, DWORD PTR _Trig$[ebp+4]
	movss	DWORD PTR [eax+36], xmm0

; 772  : 
; 773  : 	ResetOrientation();	

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetOrientation@AirframeClass@@QAEXXZ	; AirframeClass::ResetOrientation

; 774  : 
; 775  : 	platform->dmx[0][0] =  pa->cospsi * pa->costhe;

	mov	ecx, DWORD PTR _pa$[ebp]
	mov	edx, DWORD PTR _pa$[ebp]
	movss	xmm0, DWORD PTR [ecx+68]
	mulss	xmm0, DWORD PTR [edx+52]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 776  : 	platform->dmx[0][1] =  pa->sinpsi * pa->costhe;

	mov	edx, DWORD PTR _pa$[ebp]
	mov	eax, DWORD PTR _pa$[ebp]
	movss	xmm0, DWORD PTR [edx+64]
	mulss	xmm0, DWORD PTR [eax+52]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0

; 777  : 	platform->dmx[0][2] = -pa->sinthe;

	mov	eax, DWORD PTR _pa$[ebp]
	movss	xmm0, DWORD PTR [eax+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR [ecx+edx], xmm0

; 778  : 	
; 779  : 	platform->dmx[1][0] =  pa->cospsi * pa->sinthe * pa->sinphi - pa->sinpsi * pa->cosphi;

	mov	eax, DWORD PTR _pa$[ebp]
	mov	ecx, DWORD PTR _pa$[ebp]
	movss	xmm0, DWORD PTR [eax+68]
	mulss	xmm0, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _pa$[ebp]
	mulss	xmm0, DWORD PTR [edx+56]
	mov	eax, DWORD PTR _pa$[ebp]
	mov	ecx, DWORD PTR _pa$[ebp]
	movss	xmm1, DWORD PTR [eax+64]
	mulss	xmm1, DWORD PTR [ecx+60]
	subss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	imul	eax, 0
	movss	DWORD PTR [edx+eax], xmm0

; 780  : 	platform->dmx[1][1] =  pa->cospsi * pa->cosphi + pa->sinpsi * pa->sinthe * pa->sinphi;

	mov	ecx, DWORD PTR _pa$[ebp]
	mov	edx, DWORD PTR _pa$[ebp]
	movss	xmm0, DWORD PTR [ecx+68]
	mulss	xmm0, DWORD PTR [edx+60]
	mov	eax, DWORD PTR _pa$[ebp]
	mov	ecx, DWORD PTR _pa$[ebp]
	movss	xmm1, DWORD PTR [eax+64]
	mulss	xmm1, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _pa$[ebp]
	mulss	xmm1, DWORD PTR [edx+56]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 781  : 	platform->dmx[1][2] =  pa->costhe * pa->sinphi;

	mov	edx, DWORD PTR _pa$[ebp]
	mov	eax, DWORD PTR _pa$[ebp]
	movss	xmm0, DWORD PTR [edx+52]
	mulss	xmm0, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR [ecx+edx], xmm0

; 782  : 						
; 783  : 	platform->dmx[2][0] =  pa->sinpsi * pa->sinphi + pa->cospsi * pa->sinthe * pa->cosphi;

	mov	eax, DWORD PTR _pa$[ebp]
	mov	ecx, DWORD PTR _pa$[ebp]
	movss	xmm0, DWORD PTR [eax+64]
	mulss	xmm0, DWORD PTR [ecx+56]
	mov	edx, DWORD PTR _pa$[ebp]
	mov	eax, DWORD PTR _pa$[ebp]
	movss	xmm1, DWORD PTR [edx+68]
	mulss	xmm1, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _pa$[ebp]
	mulss	xmm1, DWORD PTR [ecx+60]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	imul	eax, 0
	movss	DWORD PTR [edx+eax], xmm0

; 784  : 	platform->dmx[2][1] = -pa->cospsi * pa->sinphi + pa->sinpsi * pa->sinthe * pa->cosphi;

	mov	ecx, DWORD PTR _pa$[ebp]
	movss	xmm0, DWORD PTR [ecx+68]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _pa$[ebp]
	mulss	xmm0, DWORD PTR [edx+56]
	mov	eax, DWORD PTR _pa$[ebp]
	mov	ecx, DWORD PTR _pa$[ebp]
	movss	xmm1, DWORD PTR [eax+64]
	mulss	xmm1, DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _pa$[ebp]
	mulss	xmm1, DWORD PTR [edx+60]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 785  : 	platform->dmx[2][2] =  pa->costhe * pa->cosphi;

	mov	edx, DWORD PTR _pa$[ebp]
	mov	eax, DWORD PTR _pa$[ebp]
	movss	xmm0, DWORD PTR [edx+52]
	mulss	xmm0, DWORD PTR [eax+60]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR [ecx+edx], xmm0

; 786  : 
; 787  : 	vcas = get_air_speed(vt * FTPSEC_TO_KNOTS, -1*FloatToInt32(platform->ZPos()));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	imul	eax, -1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	mulss	xmm0, DWORD PTR __real@3f17ac60
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?get_air_speed@@YAMMH@Z			; get_air_speed
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+1124]

; 788  : 
; 789  : 	pstick = 0.0F; // (q*vt + platform->platformAngles.cosmu * platform->platformAngles.cosgam * 0.5F)/9.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1500], xmm0

; 790  : 	rstick = 0.0F; // p/(225.0F*DTR);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1504], xmm0

; 791  : 	ypedal = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1508], xmm0

; 792  : 	platform->MoveSurfaces();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?MoveSurfaces@AircraftClass@@QAEXXZ	; AircraftClass::MoveSurfaces

; 793  : 	platform->DBrain()->CheckLead();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, eax
	call	?CheckLead@DigitalBrain@@QAEXXZ		; DigitalBrain::CheckLead

; 794  : 	platform->DBrain()->UpdateTaxipoint();	

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, eax
	call	?UpdateTaxipoint@DigitalBrain@@QAEXXZ	; DigitalBrain::UpdateTaxipoint

; 795  : 
; 796  : 	if (platform->OnGround ()){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+1088]
	mov	edx, DWORD PTR [eax+148]
	call	edx
	test	eax, eax
	je	SHORT $LN6@RemoteUpda

; 797  : 		ClearFlag (InAir);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag

; 798  : 		if(vt < 80.0F *KNOTS_TO_FTPSEC){

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@430706e2
	comiss	xmm0, DWORD PTR [eax+1120]
	jbe	SHORT $LN5@RemoteUpda

; 799  : 			SetFlag(Planted);

	push	4096					; 00001000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag

; 800  : 		}
; 801  : 		else{

	jmp	SHORT $LN4@RemoteUpda
$LN5@RemoteUpda:

; 802  : 			ClearFlag(Planted);

	push	4096					; 00001000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag
$LN4@RemoteUpda:

; 803  : 		}
; 804  : 	}
; 805  : 	else {

	jmp	SHORT $LN3@RemoteUpda
$LN6@RemoteUpda:

; 806  : 		SetFlag (InAir);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag

; 807  : 		ClearFlag (Planted);

	push	4096					; 00001000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag
$LN3@RemoteUpda:

; 808  : 	}
; 809  : 
; 810  : 	if (platform->IsAcStatusBitsSet(AircraftClass::ACSTATUS_GEAR_DOWN)){

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?IsAcStatusBitsSet@AircraftClass@@QBE_NH@Z ; AircraftClass::IsAcStatusBitsSet
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@RemoteUpda

; 811  : 		gearHandle = 1.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+1556], xmm0

; 812  : 		gearPos += 0.3F * SimLibMinorFrameTime;

	movss	xmm0, DWORD PTR __real@3e99999a
	mulss	xmm0, DWORD PTR ?SimLibMinorFrameTime@@3MA
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+1552]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1552], xmm0

; 813  : 	}
; 814  : 	else {

	jmp	SHORT $LN1@RemoteUpda
$LN2@RemoteUpda:

; 815  : 		gearHandle = -1.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax+1556], xmm0

; 816  : 		gearPos -= 0.3F * SimLibMinorFrameTime;

	movss	xmm0, DWORD PTR __real@3e99999a
	mulss	xmm0, DWORD PTR ?SimLibMinorFrameTime@@3MA
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1552]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1552], xmm1
$LN1@RemoteUpda:

; 817  : 	}
; 818  : 
; 819  : 	gearPos = min ( max ( gearPos, 0.0F), 1.0F);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1552]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN18@RemoteUpda
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1552]
	movss	DWORD PTR tv597[ebp], xmm0
	jmp	SHORT $LN19@RemoteUpda
$LN18@RemoteUpda:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv597[ebp], xmm0
$LN19@RemoteUpda:
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv597[ebp]
	jbe	SHORT $LN22@RemoteUpda
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1552]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN20@RemoteUpda
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1552]
	movss	DWORD PTR tv604[ebp], xmm0
	jmp	SHORT $LN21@RemoteUpda
$LN20@RemoteUpda:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv604[ebp], xmm0
$LN21@RemoteUpda:
	movss	xmm0, DWORD PTR tv604[ebp]
	movss	DWORD PTR tv605[ebp], xmm0
	jmp	SHORT $LN23@RemoteUpda
$LN22@RemoteUpda:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv605[ebp], xmm0
$LN23@RemoteUpda:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv605[ebp]
	movss	DWORD PTR [ecx+1552], xmm0

; 820  : 
; 821  : 	// sfr: copy values back from airframe to aircraft
; 822  : 	platform->SetPosition(x, y, z);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1116]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1112]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1108]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?SetPosition@VuEntity@@QAEXMMM@Z	; VuEntity::SetPosition

; 823  : 
; 824  : 	// sfr: run landing gear for remotes too
; 825  : 	RunLandingGear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RunLandingGear@AirframeClass@@AAEXXZ	; AirframeClass::RunLandingGear

; 826  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RemoteUpdate@AirframeClass@@QAEXXZ ENDP		; AirframeClass::RemoteUpdate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
tv205 = -24						; size = 8
tv201 = -16						; size = 4
_playerAC$ = -12					; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?Exec@AirframeClass@@QAEXXZ PROC			; AirframeClass::Exec
; _this$ = ecx

; 597  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 598  : 	int i;
; 599  : 
; 600  : 	// 2002-03-28 MN for refuel debugging
; 601  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 602  : 	if (gFuelState && (playerAC) && (this == playerAC->af)){

	cmp	DWORD PTR ?gFuelState@@3KA, 0		; gFuelState
	je	SHORT $LN10@Exec
	cmp	DWORD PTR _playerAC$[ebp], 0
	je	SHORT $LN10@Exec
	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax+932]
	jne	SHORT $LN10@Exec

; 603  : 		AllocateFuel(static_cast<float>(gFuelState));

	mov	edx, DWORD PTR ?gFuelState@@3KA		; gFuelState
	mov	DWORD PTR tv201[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv201[ebp]
	mov	eax, DWORD PTR tv201[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv205[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv205[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AllocateFuel@AirframeClass@@QAEXM@Z	; AirframeClass::AllocateFuel

; 604  : 		gFuelState = 0;

	mov	DWORD PTR ?gFuelState@@3KA, 0		; gFuelState
$LN10@Exec:

; 605  : 	}
; 606  : 
; 607  : 	// helicopter mode easter egg
; 608  : 	if ( hf && simpleMode == SIMPLE_MODE_HF ){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1812], 0
	je	SHORT $LN9@Exec
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+824], 2
	jne	SHORT $LN9@Exec

; 609  : 		RunHeliModel();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RunHeliModel@AirframeClass@@QAEXXZ	; AirframeClass::RunHeliModel

; 610  : 		return;

	jmp	$LN11@Exec
$LN9@Exec:

; 611  : 	}
; 612  : 
; 613  : 	// sfr: copy data from platform
; 614  : 	x = platform->XPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+1108]

; 615  : 	y = platform->YPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+1112]

; 616  : 	z = platform->ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+1116]

; 617  : 	//vt = platform->GetVt();
; 618  : 	xdot = platform->XDelta();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+1196]

; 619  : 	ydot = platform->YDelta();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+1200]

; 620  : 	zdot = platform->ZDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+1204]

; 621  : 		
; 622  : 	// simple flight model for AI's
; 623  : 	if ( simpleMode == SIMPLE_MODE_AF 
; 624  : 		&& !IsSet(AirframeClass::OnObject)
; 625  : 	){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+824], 1
	jne	$LN8@Exec
	push	1073741824				; 40000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN8@Exec

; 626  : 		// JB carrier
; 627  : 		Atmosphere();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Atmosphere@AirframeClass@@AAEXXZ	; AirframeClass::Atmosphere

; 628  : 		Aerodynamics();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Aerodynamics@AirframeClass@@AAEXXZ	; AirframeClass::Aerodynamics

; 629  : 		Axial(SimLibMajorFrameTime);

	push	ecx
	movss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Axial@AirframeClass@@AAEXM@Z		; AirframeClass::Axial

; 630  : 		//EngineModel(SimLibMajorFrameTime);
; 631  : 		//TJL 02/07/04 Two Engines
; 632  : 		if(auxaeroData->nEngines == 2){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+344], 2
	jne	SHORT $LN7@Exec

; 633  : 			MultiEngineModel(SimLibMinorFrameTime);

	push	ecx
	movss	xmm0, DWORD PTR ?SimLibMinorFrameTime@@3MA
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MultiEngineModel@AirframeClass@@QAEXM@Z ; AirframeClass::MultiEngineModel

; 634  : 		}
; 635  : 		else {

	jmp	SHORT $LN6@Exec
$LN7@Exec:

; 636  : 			EngineModel(SimLibMinorFrameTime);

	push	ecx
	movss	xmm0, DWORD PTR ?SimLibMinorFrameTime@@3MA
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EngineModel@AirframeClass@@QAEXM@Z	; AirframeClass::EngineModel
$LN6@Exec:

; 637  : 		}
; 638  : 		Accelerometers();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Accelerometers@AirframeClass@@AAEXXZ	; AirframeClass::Accelerometers

; 639  : 
; 640  : 		SimpleModel();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SimpleModel@AirframeClass@@QAEXXZ	; AirframeClass::SimpleModel

; 641  : 		RunLandingGear(); // MLR 2003-10-16

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RunLandingGear@AirframeClass@@AAEXXZ	; AirframeClass::RunLandingGear

; 642  : 		return;

	jmp	$LN11@Exec
$LN8@Exec:

; 643  : 	}
; 644  : 
; 645  : 	for (i=0; i<SimLibMinorPerMajor; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@Exec
$LN4@Exec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@Exec:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR ?SimLibMinorPerMajor@@3HA ; SimLibMinorPerMajor
	jge	$LN3@Exec

; 646  : 	{
; 647  : 		Atmosphere();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Atmosphere@AirframeClass@@AAEXXZ	; AirframeClass::Atmosphere

; 648  : 		FlightControlSystem();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlightControlSystem@AirframeClass@@AAEXXZ ; AirframeClass::FlightControlSystem

; 649  : 		Aerodynamics();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Aerodynamics@AirframeClass@@AAEXXZ	; AirframeClass::Aerodynamics

; 650  : 		//TJL 01/11/04 Two Engines
; 651  : 		if(auxaeroData->nEngines == 2){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax+344], 2
	jne	SHORT $LN2@Exec

; 652  : 			MultiEngineModel(SimLibMinorFrameTime);

	push	ecx
	movss	xmm0, DWORD PTR ?SimLibMinorFrameTime@@3MA
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MultiEngineModel@AirframeClass@@QAEXM@Z ; AirframeClass::MultiEngineModel

; 653  : 		}
; 654  : 		else {

	jmp	SHORT $LN1@Exec
$LN2@Exec:

; 655  : 			EngineModel(SimLibMinorFrameTime);

	push	ecx
	movss	xmm0, DWORD PTR ?SimLibMinorFrameTime@@3MA
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EngineModel@AirframeClass@@QAEXM@Z	; AirframeClass::EngineModel
$LN1@Exec:

; 656  : 		}
; 657  : 
; 658  : 		//Wombat778 2-24-04  Random Failures
; 659  : 		RandomFailureModel();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RandomFailureModel@AirframeClass@@QAEXXZ ; AirframeClass::RandomFailureModel

; 660  : 		SetFlapsPlayer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlapsPlayer@AirframeClass@@QAEXXZ	; AirframeClass::SetFlapsPlayer

; 661  : 
; 662  : 
; 663  : 		Accelerometers();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Accelerometers@AirframeClass@@AAEXXZ	; AirframeClass::Accelerometers

; 664  : 		EquationsOfMotion(SimLibMinorFrameTime);

	push	ecx
	movss	xmm0, DWORD PTR ?SimLibMinorFrameTime@@3MA
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EquationsOfMotion@AirframeClass@@AAEXM@Z ; AirframeClass::EquationsOfMotion

; 665  : 	}

	jmp	$LN4@Exec
$LN3@Exec:

; 666  : 
; 667  : 	RunLandingGear(); // MLR 2003-10-16

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RunLandingGear@AirframeClass@@AAEXXZ	; AirframeClass::RunLandingGear
$LN11@Exec:

; 668  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Exec@AirframeClass@@QAEXXZ ENDP			; AirframeClass::Exec
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_pz$ = -80						; size = 4
$T2 = -76						; size = 4
$T3 = -72						; size = 4
$T4 = -68						; size = 4
$T5 = -64						; size = 4
_py$ = -60						; size = 4
_px$ = -56						; size = 4
tv218 = -52						; size = 4
tv181 = -48						; size = 4
$T6 = -44						; size = 4
tv166 = -40						; size = 4
$T7 = -36						; size = 4
tv145 = -32						; size = 4
$T8 = -28						; size = 4
tv92 = -24						; size = 4
$T9 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Reinit@AirframeClass@@QAEXXZ PROC			; AirframeClass::Reinit
; _this$ = ecx

; 520  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Reinit@AirframeClass@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 521  : 	BIG_SCALAR px = x, py = y, pz = z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1108]
	movss	DWORD PTR _px$[ebp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1112]
	movss	DWORD PTR _py$[ebp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1116]
	movss	DWORD PTR _pz$[ebp], xmm0

; 522  : 	if (simpleMode == SIMPLE_MODE_HF )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+824], 2
	jne	$LN19@Reinit

; 523  : 	{
; 524  : 		if ( hf == NULL )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1812], 0
	jne	$LN12@Reinit

; 525  : 		{
; 526  : 	    	if ( stricmp( LogBook.Name(), "mrsteed0" ) == 0 )

	push	OFFSET ??_C@_08NKCODECN@mrsteed0?$AA@
	mov	ecx, OFFSET ?LogBook@@3VLogBookData@@A	; LogBook
	call	?Name@LogBookData@@QAEPADXZ		; LogBookData::Name
	push	eax
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN17@Reinit

; 527  : 				hf = new HeliMMClass( platform, A109 );

	push	1088					; 00000440H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN22@Reinit
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	push	eax
	mov	ecx, DWORD PTR $T9[ebp]
	call	??0HeliMMClass@@QAE@PAVSimBaseClass@@H@Z ; HeliMMClass::HeliMMClass
	mov	DWORD PTR tv92[ebp], eax
	jmp	SHORT $LN23@Reinit
$LN22@Reinit:
	mov	DWORD PTR tv92[ebp], 0
$LN23@Reinit:
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR $T5[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T5[ebp]
	mov	DWORD PTR [edx+1812], eax
	jmp	$LN12@Reinit
$LN17@Reinit:

; 528  : 	    	else if ( stricmp( LogBook.Name(), "mrsteed1" ) == 0 )

	push	OFFSET ??_C@_08MDDFAFGM@mrsteed1?$AA@
	mov	ecx, OFFSET ?LogBook@@3VLogBookData@@A	; LogBook
	call	?Name@LogBookData@@QAEPADXZ		; LogBookData::Name
	push	eax
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN15@Reinit

; 529  : 				hf = new HeliMMClass( platform, COBRA );

	push	1088					; 00000440H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN24@Reinit
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	push	edx
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0HeliMMClass@@QAE@PAVSimBaseClass@@H@Z ; HeliMMClass::HeliMMClass
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN25@Reinit
$LN24@Reinit:
	mov	DWORD PTR tv145[ebp], 0
$LN25@Reinit:
	mov	eax, DWORD PTR tv145[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx+1812], edx
	jmp	$LN12@Reinit
$LN15@Reinit:

; 530  : 	    	else if ( stricmp( LogBook.Name(), "mrsteed2" ) == 0 )

	push	OFFSET ??_C@_08OIBIFGKP@mrsteed2?$AA@
	mov	ecx, OFFSET ?LogBook@@3VLogBookData@@A	; LogBook
	call	?Name@LogBookData@@QAEPADXZ		; LogBookData::Name
	push	eax
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@Reinit

; 531  : 				hf = new HeliMMClass( platform, MD500 );

	push	1088					; 00000440H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN26@Reinit
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	push	ecx
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0HeliMMClass@@QAE@PAVSimBaseClass@@H@Z ; HeliMMClass::HeliMMClass
	mov	DWORD PTR tv166[ebp], eax
	jmp	SHORT $LN27@Reinit
$LN26@Reinit:
	mov	DWORD PTR tv166[ebp], 0
$LN27@Reinit:
	mov	edx, DWORD PTR tv166[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+1812], ecx

; 532  : 			else

	jmp	SHORT $LN12@Reinit
$LN13@Reinit:

; 533  : 				hf = new HeliMMClass( platform, STABLE );

	push	1088					; 00000440H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN28@Reinit
	push	3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	push	eax
	mov	ecx, DWORD PTR $T6[ebp]
	call	??0HeliMMClass@@QAE@PAVSimBaseClass@@H@Z ; HeliMMClass::HeliMMClass
	mov	DWORD PTR tv181[ebp], eax
	jmp	SHORT $LN29@Reinit
$LN28@Reinit:
	mov	DWORD PTR tv181[ebp], 0
$LN29@Reinit:
	mov	ecx, DWORD PTR tv181[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+1812], eax
$LN12@Reinit:

; 534  : 		}
; 535  :       	hf->SetControls( 0.0f, 0.0f, 0.0f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1812]
	call	?SetControls@HeliMMClass@@QAEXMMMM@Z	; HeliMMClass::SetControls

; 536  : 		hf->Init( px, py, pz );

	push	ecx
	movss	xmm0, DWORD PTR _pz$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _py$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _px$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1812]
	call	?Init@HeliMMClass@@QAEXMMM@Z		; HeliMMClass::Init
	jmp	$LN7@Reinit
$LN19@Reinit:

; 537  : 	}
; 538  : 	else if (IsSet(InAir)){

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN10@Reinit

; 539  : 		// LRKLUDGE
; 540  : 		//Clamp vt to some minimum value
; 541  : 		if (!platform->IsPlayer()){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	jne	$LN8@Reinit

; 542  : 			vt		= max (vt, minVcas * 0.6F * KNOTS_TO_FTPSEC);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1120]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+76]
	mulss	xmm1, DWORD PTR __real@3f19999a
	mulss	xmm1, DWORD PTR __real@3fd80b03
	comiss	xmm0, xmm1
	jbe	SHORT $LN30@Reinit
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	movss	DWORD PTR tv218[ebp], xmm0
	jmp	SHORT $LN31@Reinit
$LN30@Reinit:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+76]
	mulss	xmm0, DWORD PTR __real@3f19999a
	mulss	xmm0, DWORD PTR __real@3fd80b03
	movss	DWORD PTR tv218[ebp], xmm0
$LN31@Reinit:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv218[ebp]
	movss	DWORD PTR [edx+1120], xmm0

; 543  : 			vcas	= vt * FTPSEC_TO_KNOTS;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	mulss	xmm0, DWORD PTR __real@3f17ac60
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1124], xmm0

; 544  : 
; 545  : 			if(!IsSet(GearBroken)){

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN8@Reinit

; 546  : 				gearPos		= 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1552], xmm0

; 547  : 				gearHandle	= -1.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax+1556], xmm0
$LN8@Reinit:

; 548  : 			}
; 549  : 		}		
; 550  : 
; 551  : 		ClearFlag(Trimming);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag

; 552  : 		ClearFlag(EngineOff);

	push	32768					; 00008000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag

; 553  : 		ClearFlag(EngineOff2);//TJL 01/14/04 Multi-engine

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag

; 554  : 		ReInitialize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReInitialize@AirframeClass@@AAEXXZ	; AirframeClass::ReInitialize

; 555  : 	}
; 556  : 	else {

	jmp	$LN7@Reinit
$LN10@Reinit:

; 557  : 		// Set our anchor point for low speed/high precision maneuvering
; 558  : 		groundAnchorX = px;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _px$[ebp]
	movss	DWORD PTR [ecx+112], xmm0

; 559  : 		groundAnchorY = py;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _py$[ebp]
	movss	DWORD PTR [edx+116], xmm0

; 560  : 		groundDeltaX = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+120], xmm0

; 561  : 		groundDeltaY = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+124], xmm0

; 562  : 
; 563  : 		if(!IsSet(GearBroken))	{

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN6@Reinit

; 564  : 			gearPos		= 1.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+1552], xmm0

; 565  : 			gearHandle	= 1.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+1556], xmm0
$LN6@Reinit:

; 566  : 		}
; 567  : 
; 568  : 		ClearFlag(Trimming);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag

; 569  : 		ReInitialize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReInitialize@AirframeClass@@AAEXXZ	; AirframeClass::ReInitialize
$LN7@Reinit:

; 570  : 	}
; 571  : 
; 572  : 	//MI CATIII as default
; 573  : 	//if(g_bCATIIIDefault && g_bEnableCATIIIExtension)	MI
; 574  : 	if(g_bCATIIIDefault && g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bCATIIIDefault@@3_NA	; g_bCATIIIDefault
	test	ecx, ecx
	je	SHORT $LN4@Reinit
	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	SHORT $LN4@Reinit

; 575  : 	{
; 576  : 		if(platform->IsPlayer()){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN4@Reinit

; 577  : 			SetFlag(CATLimiterIII);

	push	2097152					; 00200000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag
$LN4@Reinit:

; 578  : 		}
; 579  : 	}
; 580  : 	//MI RALT stuff
; 581  : 	if(g_bRealisticAvionics){

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	SHORT $LN2@Reinit

; 582  : 		if(platform->IsPlayer()){

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN2@Reinit

; 583  : 			//Cobra TJL 11/17/04 Why reinit to OFF?  Changing to ON
; 584  : 			platform->RALTStatus = AircraftClass::RaltStatus::RON;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	DWORD PTR [ecx+1004], 2
$LN2@Reinit:

; 585  : 		}
; 586  : 	}
; 587  : 	//MI PB and LL stuff
; 588  : 	if (platform->IsPlayer()){

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN1@Reinit

; 589  : 		//LLON = FALSE;
; 590  : 		PBON = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1616], 0
$LN1@Reinit:

; 591  : 	}
; 592  : 	//MI
; 593  : 	JFSSpinTime = auxaeroData->jfsSpinTime;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	mov	DWORD PTR [eax+1608], ecx

; 594  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Reinit@AirframeClass@@QAEXXZ$0:
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Reinit@AirframeClass@@QAEXXZ$1:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Reinit@AirframeClass@@QAEXXZ$2:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Reinit@AirframeClass@@QAEXXZ$3:
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Reinit@AirframeClass@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Reinit@AirframeClass@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Reinit@AirframeClass@@QAEXXZ ENDP			; AirframeClass::Reinit
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_idx$ = 8						; size = 4
?InitData@AirframeClass@@QAEXH@Z PROC			; AirframeClass::InitData
; _this$ = ecx

; 356  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 357  : 	// sfr: this has no base class to initialize...
; 358  : 	if (idx >= 0){

	cmp	DWORD PTR _idx$[ebp], 0
	jl	SHORT $LN2@InitData

; 359  : 		ReadData(idx);

	mov	eax, DWORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadData@AirframeClass@@AAEHH@Z	; AirframeClass::ReadData

; 360  : 		AeroRead(idx);

	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AeroRead@AirframeClass@@AAEXH@Z	; AirframeClass::AeroRead

; 361  : 		AuxAeroRead(idx); // JB 010714

	mov	edx, DWORD PTR _idx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AuxAeroRead@AirframeClass@@AAEXH@Z	; AirframeClass::AuxAeroRead

; 362  : 		EngineRead(idx);

	mov	eax, DWORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EngineRead@AirframeClass@@AAEXH@Z	; AirframeClass::EngineRead

; 363  : 		FcsRead(idx);

	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FcsRead@AirframeClass@@AAEXH@Z		; AirframeClass::FcsRead

; 364  : 	}
; 365  : 	else {

	jmp	SHORT $LN3@InitData
$LN2@InitData:

; 366  : 		MonoPrint ("Unknown airframe index %d, using F16 instead\n", idx);

	mov	edx, DWORD PTR _idx$[ebp]
	push	edx
	push	OFFSET ??_C@_0CO@IOOKMDAN@Unknown?5airframe?5index?5?$CFd?0?5using@
	call	_MonoPrint
	add	esp, 8

; 367  : 		ReadData(4);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadData@AirframeClass@@AAEHH@Z	; AirframeClass::ReadData

; 368  : 		AeroRead(4);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AeroRead@AirframeClass@@AAEXH@Z	; AirframeClass::AeroRead

; 369  : 		AuxAeroRead(4); // JB 010714

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AuxAeroRead@AirframeClass@@AAEXH@Z	; AirframeClass::AuxAeroRead

; 370  : 		EngineRead(4);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EngineRead@AirframeClass@@AAEXH@Z	; AirframeClass::EngineRead

; 371  : 		FcsRead(4);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FcsRead@AirframeClass@@AAEXH@Z		; AirframeClass::FcsRead
$LN3@InitData:

; 372  : 	}
; 373  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?InitData@AirframeClass@@QAEXH@Z ENDP			; AirframeClass::InitData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
tv88 = -16						; size = 4
tv81 = -12						; size = 4
_intfuel$1 = -8						; size = 4
_this$ = -4						; size = 4
_idx$ = 8						; size = 4
?Init@AirframeClass@@QAEXH@Z PROC			; AirframeClass::Init
; _this$ = ecx

; 376  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 	// stuff that ought to be read in (JPO)
; 378  : 	if (auxaeroData->fuelFwdRes == 0 && auxaeroData->fuelAftRes == 0) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR [ecx+252]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	$LN13@Init
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movss	xmm0, DWORD PTR [eax+256]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	$LN13@Init

; 379  : 		// everything else - guess based on F16 proportions.
; 380  : #if 0
; 381  : 	    platform->IsF16()) {
; 382  : 	    m_tankcap[TANK_FWDRES] = 480.0f;
; 383  : 	    m_tankcap[TANK_AFTRES] = 480.0f;
; 384  : 	    m_tankcap[TANK_A1] = 2810.0f - 480.0f;
; 385  : 	    m_tankcap[TANK_F1] = 3250.0f - 480.0f;
; 386  : 	    m_tankcap[TANK_WINGAL] = 550.0f;
; 387  : 	    m_tankcap[TANK_WINGFR] = 550.0f;
; 388  : 	    m_trate[TANK_A1] = m_trate[TANK_F1] = 20000.0f/3600.0f;
; 389  : 	    m_trate[TANK_WINGAL]  = m_trate[TANK_WINGFR]= 6000.0f/3600.0f;
; 390  : 	    m_trate[TANK_LEXT] = m_trate[TANK_REXT] = 30000.0f/3600.0f;
; 391  : 	    m_trate[TANK_CLINE] = 18000.0f/3600.0f;
; 392  : 	else { 
; 393  : #endif
; 394  : 	    float intfuel = aeroDataset[idx].inputData[AeroDataSet::InternalFuel];

	mov	ecx, DWORD PTR _idx$[ebp]
	imul	ecx, 220				; 000000dcH
	add	ecx, DWORD PTR ?aeroDataset@@3PAVAeroDataSet@@A ; aeroDataset
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [ecx+edx+16]
	movss	DWORD PTR _intfuel$1[ebp], xmm0

; 395  : 	    // assume 7.5% in resevoirs
; 396  : 	    m_tankcap[TANK_AFTRES] = m_tankcap[TANK_FWDRES] = intfuel * 0.075f;

	movss	xmm0, DWORD PTR _intfuel$1[ebp]
	mulss	xmm0, DWORD PTR __real@3d99999a
	movss	DWORD PTR tv81[ebp], xmm0
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv81[ebp]
	movss	DWORD PTR [ecx+eax+1724], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv81[ebp]
	movss	DWORD PTR [eax+edx+1724], xmm0

; 397  : 	    // 7.7% in each wing 
; 398  : 	    m_tankcap[TANK_WINGAL] = m_tankcap[TANK_WINGFR] = intfuel * 0.077f;

	movss	xmm0, DWORD PTR _intfuel$1[ebp]
	mulss	xmm0, DWORD PTR __real@3d9db22d
	movss	DWORD PTR tv88[ebp], xmm0
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv88[ebp]
	movss	DWORD PTR [edx+ecx+1724], xmm0
	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv88[ebp]
	movss	DWORD PTR [ecx+eax+1724], xmm0

; 399  : 	    intfuel -= m_tankcap[TANK_AFTRES] + m_tankcap[TANK_FWDRES] + 
; 400  : 		m_tankcap[TANK_WINGAL] + m_tankcap[TANK_WINGFR];

	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx+1724]
	addss	xmm0, DWORD PTR [esi+eax+1724]
	mov	edx, 4
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+edx+1724]
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+ecx+1724]
	movss	xmm1, DWORD PTR _intfuel$1[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _intfuel$1[ebp], xmm1

; 401  : 	    // rest split between fwd and aft tanks.
; 402  : 	    m_tankcap[TANK_F1] = intfuel / 2;

	movss	xmm0, DWORD PTR _intfuel$1[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax+1724], xmm0

; 403  : 	    m_tankcap[TANK_A1] = intfuel / 2;

	movss	xmm0, DWORD PTR _intfuel$1[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+edx+1724], xmm0

; 404  : 	    m_trate[TANK_A1] = m_trate[TANK_F1] = 4 * 20000.0f/3600.0f;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41b1c71c
	movss	DWORD PTR [edx+ecx+1760], xmm0
	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41b1c71c
	movss	DWORD PTR [ecx+eax+1760], xmm0

; 405  : 	    m_trate[TANK_WINGAL]  = m_trate[TANK_WINGFR]= 4 * 6000.0f/3600.0f;

	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40d55555
	movss	DWORD PTR [eax+edx+1760], xmm0
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40d55555
	movss	DWORD PTR [edx+ecx+1760], xmm0

; 406  : 	    m_trate[TANK_LEXT] = m_trate[TANK_REXT] = 4 * 30000.0f/3600.0f;

	mov	eax, 4
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42055555
	movss	DWORD PTR [ecx+eax+1760], xmm0
	mov	edx, 4
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42055555
	movss	DWORD PTR [eax+edx+1760], xmm0

; 407  : 	    m_trate[TANK_CLINE] = 4 * 18000.0f/3600.0f;

	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41a00000
	movss	DWORD PTR [edx+ecx+1760], xmm0

; 408  : 	}
; 409  : 	else {

	jmp	$LN12@Init
$LN13@Init:

; 410  : 	    m_tankcap[TANK_FWDRES] = auxaeroData->fuelFwdRes;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+252]
	mov	DWORD PTR [eax+edx+1724], ecx

; 411  : 	    m_tankcap[TANK_AFTRES] = auxaeroData->fuelAftRes;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+256]
	mov	DWORD PTR [edx+ecx+1724], eax

; 412  : 	    m_tankcap[TANK_A1] = auxaeroData->fuelAft1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+264]
	mov	DWORD PTR [ecx+eax+1724], edx

; 413  : 	    m_tankcap[TANK_F1] = auxaeroData->fuelFwd1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+260]
	mov	DWORD PTR [eax+edx+1724], ecx

; 414  : 	    m_tankcap[TANK_WINGAL] = auxaeroData->fuelWingAl;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+268]
	mov	DWORD PTR [edx+ecx+1724], eax

; 415  : 	    m_tankcap[TANK_WINGFR] = auxaeroData->fuelWingFr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+272]
	mov	DWORD PTR [ecx+eax+1724], edx

; 416  : 	    m_trate[TANK_A1] = auxaeroData->fuelAft1Rate;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+288]
	mov	DWORD PTR [eax+edx+1760], ecx

; 417  : 	    m_trate[TANK_F1] = auxaeroData->fuelFwd1Rate;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+284]
	mov	DWORD PTR [edx+ecx+1760], eax

; 418  : 	    m_trate[TANK_WINGAL]  = auxaeroData->fuelWingAlRate;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+292]
	mov	DWORD PTR [ecx+eax+1760], edx

; 419  : 	    m_trate[TANK_WINGFR]= auxaeroData->fuelWingFrRate;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+296]
	mov	DWORD PTR [eax+edx+1760], ecx

; 420  : 	    m_trate[TANK_LEXT] = m_trate[TANK_REXT] = auxaeroData->fuelWingExtRate;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 4
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+304]
	mov	DWORD PTR [edx+ecx+1760], eax
	mov	ecx, 4
	imul	ecx, 6
	mov	edx, 4
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [esi+ecx+1760]
	mov	DWORD PTR [eax+edx+1760], ecx

; 421  : 	    m_trate[TANK_CLINE] = auxaeroData->fuelClineRate;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+300]
	mov	DWORD PTR [edx+ecx+1760], eax
$LN12@Init:

; 422  : 
; 423  : 	    ShiAssert(m_tankcap[TANK_FWDRES] + m_tankcap[TANK_AFTRES] +
; 424  : 		m_tankcap[TANK_A1] + m_tankcap[TANK_F1] +
; 425  : 		m_tankcap[TANK_WINGAL] + m_tankcap[TANK_WINGFR] ==
; 426  : 		aeroDataset[idx].inputData[AeroDataSet::InternalFuel]);
; 427  : 	}
; 428  : 	FindExternalTanks();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindExternalTanks@AirframeClass@@QAEXXZ ; AirframeClass::FindExternalTanks

; 429  : 
; 430  : 	// tank transfer rates.
; 431  : 	m_trate[TANK_FWDRES] = 0.0f;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+ecx+1760], xmm0

; 432  : 	m_trate[TANK_AFTRES] = 0.0f;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax+1760], xmm0

; 433  : 
; 434  : 	// now split the fuel between all tanks.
; 435  : 	AllocateFuel(initialFuel);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1336]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AllocateFuel@AirframeClass@@QAEXM@Z	; AirframeClass::AllocateFuel

; 436  : 	/*--------------*/
; 437  : 	/* Initial Mass */
; 438  : 	/*--------------*/
; 439  : 	mass  = weight / GRAVITY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+44]
	divss	xmm0, DWORD PTR __real@4200b53f
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+40], xmm0

; 440  :     loadingFraction = weight/emptyWeight;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+44]
	divss	xmm0, DWORD PTR [eax+52]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1228], xmm0

; 441  : 
; 442  : 	/*------------------*/
; 443  : 	/* initial velocity */
; 444  : 	/*------------------*/
; 445  : 	Atmosphere();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Atmosphere@AirframeClass@@AAEXXZ	; AirframeClass::Atmosphere

; 446  : 
; 447  : 	if (IsSet(InAir)){

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN11@Init

; 448  : 		Initialize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Initialize@AirframeClass@@AAEXXZ	; AirframeClass::Initialize

; 449  : 		TrimModel();		

	mov	ecx, DWORD PTR _this$[ebp]
	call	?TrimModel@AirframeClass@@AAEXXZ	; AirframeClass::TrimModel

; 450  : #ifndef ACMI
; 451  : 		//InitializeEOM();
; 452  : #endif
; 453  : 	}
; 454  : 	else {

	jmp	$LN10@Init
$LN11@Init:

; 455  : 		vt			= 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1120], xmm0

; 456  : 		thrtab		= 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+184], xmm0

; 457  : 		dbrake		= 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1548], xmm0

; 458  : 		gearPos		= 1.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+1552], xmm0

; 459  : 		gearHandle	= 1.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+1556], xmm0

; 460  : 		// lights on on the ground JPO
; 461  : 		//MI not in realistic, now we have switches for that
; 462  : 		platform->ClearAcStatusBits(
; 463  : 			AircraftClass::ACSTATUS_EXT_LIGHTS | AircraftClass::ACSTATUS_EXT_NAVLIGHTS |
; 464  : 			AircraftClass::ACSTATUS_EXT_NAVLIGHTSFLASH | AircraftClass::ACSTATUS_EXT_TAILSTROBE
; 465  : 		);

	push	92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?ClearAcStatusBits@AircraftClass@@QAEXH@Z ; AircraftClass::ClearAcStatusBits

; 466  : 		speedBrake	= 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1560], xmm0

; 467  : 		pwrlev		= -1.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax+1516], xmm0

; 468  : 		sigma		= initialPsi;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1332]
	mov	DWORD PTR [ecx+1176], eax

; 469  : 		//Trigenometry();
; 470  : 		ClearFlag(Trimming);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag

; 471  : 		Initialize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Initialize@AirframeClass@@AAEXXZ	; AirframeClass::Initialize

; 472  : 		Aerodynamics();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Aerodynamics@AirframeClass@@AAEXXZ	; AirframeClass::Aerodynamics

; 473  : 		Gains();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Gains@AirframeClass@@AAEXXZ		; AirframeClass::Gains
$LN10@Init:

; 474  : 	}
; 475  : 
; 476  : 	// Keep the lights flashing
; 477  : 	if (auxaeroData->animStrobeOnTime == 0.0f) 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [edx+3052]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN9@Init

; 478  : 		auxaeroData->animStrobeOnTime = 0.08f;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR __real@3da3d70a
	movss	DWORD PTR [ecx+3052], xmm0
$LN9@Init:

; 479  : 	if (auxaeroData->animStrobeOffTime == 0.0f) 

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movss	xmm0, DWORD PTR [eax+3056]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@Init

; 480  : 		auxaeroData->animStrobeOffTime = 2.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [edx+3056], xmm0
$LN8@Init:

; 481  : 
; 482  : 	if (auxaeroData->animWingFlashOnTime == 0.0f) 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR [ecx+3060]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN7@Init

; 483  : 		auxaeroData->animWingFlashOnTime = 0.4f;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR [eax+3060], xmm0
$LN7@Init:

; 484  : 	if (auxaeroData->animWingFlashOffTime == 0.0f) 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [edx+3064]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN6@Init

; 485  : 		auxaeroData->animWingFlashOffTime = 0.5f;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [ecx+3064], xmm0
$LN6@Init:

; 486  : 
; 487  : 	// Get the height of the ground under us
; 488  : 	groundZ = OTWDriver.GetGroundLevel(x, y, &gndNormal);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1288				; 00000508H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1112]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1108]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+1272]

; 489  : 
; 490  : 	// Set our anchor point (only used if we start on the ground, but what the hey...)
; 491  : 	groundAnchorX = x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1108]
	mov	DWORD PTR [eax+112], edx

; 492  : 	groundAnchorY = y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1112]
	mov	DWORD PTR [eax+116], edx

; 493  : 	groundDeltaX = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+120], xmm0

; 494  : 	groundDeltaY = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+124], xmm0

; 495  : 
; 496  : 	//MI CATIII as default
; 497  : 	//if(g_bCATIIIDefault && g_bEnableCATIIIExtension)	MI
; 498  : 	if(g_bCATIIIDefault && g_bRealisticAvionics){

	movzx	edx, BYTE PTR ?g_bCATIIIDefault@@3_NA	; g_bCATIIIDefault
	test	edx, edx
	je	SHORT $LN4@Init
	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN4@Init

; 499  : 		if (platform->IsPlayer()){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN4@Init

; 500  : 			SetFlag(CATLimiterIII);

	push	2097152					; 00200000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag
$LN4@Init:

; 501  : 		}
; 502  : 	}
; 503  : 	//MI RALT stuff
; 504  : 	if (g_bRealisticAvionics){

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	SHORT $LN2@Init

; 505  : 		if (platform->IsPlayer()){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN2@Init

; 506  : 		    platform->RALTStatus = AircraftClass::RaltStatus::ROFF;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	DWORD PTR [edx+1004], 0
$LN2@Init:

; 507  : 		}
; 508  : 	}
; 509  : 	//MI PB and LL stuff
; 510  : 	if (platform->IsPlayer()){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN1@Init

; 511  : 		//LLON = FALSE;
; 512  : 		PBON = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1616], 0

; 513  : 		BrakesToggle = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1617], 0
$LN1@Init:

; 514  : 	}
; 515  : 	//MI
; 516  : 	JFSSpinTime = auxaeroData->jfsSpinTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+1608], eax

; 517  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?Init@AirframeClass@@QAEXH@Z ENDP			; AirframeClass::Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
tv77 = -28						; size = 4
$T1 = -24						; size = 4
tv69 = -20						; size = 4
$T2 = -16						; size = 4
$T3 = -12						; size = 4
$T4 = -8						; size = 4
_this$ = -4						; size = 4
??1AirframeClass@@QAE@XZ PROC				; AirframeClass::~AirframeClass
; _this$ = ecx

; 347  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 348  :     delete []gear;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1256]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T4[ebp], edx
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN4@AirframeCl
	push	3
	mov	ecx, DWORD PTR $T4[ebp]
	call	??_EGearData@@QAEPAXI@Z
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN5@AirframeCl
$LN4@AirframeCl:
	mov	DWORD PTR tv69[ebp], 0
$LN5@AirframeCl:

; 349  :     if (hf){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1812], 0
	je	SHORT $LN2@AirframeCl

; 350  : 		delete hf;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1812]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T3[ebp], eax
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN6@AirframeCl
	push	1
	mov	ecx, DWORD PTR $T3[ebp]
	call	??_GHeliMMClass@@QAEPAXI@Z
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN2@AirframeCl
$LN6@AirframeCl:
	mov	DWORD PTR tv77[ebp], 0
$LN2@AirframeCl:

; 351  :     }
; 352  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1AirframeClass@@QAE@XZ ENDP				; AirframeClass::~AirframeClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_l$1 = -8						; size = 4
_this$ = -4						; size = 4
_self$ = 8						; size = 4
??0AirframeClass@@QAE@PAVAircraftClass@@@Z PROC		; AirframeClass::AirframeClass
; _this$ = ecx

; 92   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 		memset(this, 0 , sizeof(AirframeClass));

	push	1852					; 0000073cH
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 94   : 	// Initialze interpolaters
; 95   : 	nzcgb = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1192], xmm0

; 96   : 	curMachBreak			= curAlphaBreak		= 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+800], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+796], 0

; 97   : 	curRollAlphaBreak	= curRollQbarBreak	= 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+808], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+804], 0

; 98   : 	curEngMachBreak		= curEngAltBreak	= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+816], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+812], 0

; 99   : 	jp01 = jp02 = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1400], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1396], 0

; 100  : 	jy01 = jy02 = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1488], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1484], 0

; 101  : 	platform = self;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _self$[ebp]
	mov	DWORD PTR [eax+1088], ecx

; 102  : 	vehicleIndex = 4; //default to f-16

	mov	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+92], dx

; 103  : 
; 104  : 	pstab	= rstab		= 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+672], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+668], xmm0

; 105  : 	plsdamp	= rlsdamp	= ylsdamp	= 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+684], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+680], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+676], xmm0

; 106  : 	zpdamp	= 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1492], xmm0

; 107  : 	dragIndex	= 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+48], xmm0

; 108  : 	loadingFraction = 1.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+1228], xmm0

; 109  : 	assymetry	= 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1232], xmm0

; 110  : 	tefFactor	= lefFactor = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1240], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1236], xmm0

; 111  : 	curMaxGs		= 9.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41100000
	movss	DWORD PTR [eax+1244], xmm0

; 112  : 	stallMode	= None;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1248], 0

; 113  : 	oscillationTimer		= 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+712], xmm0

; 114  : 	oscillationSlope		= 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+716], xmm0

; 115  : 	p	= q		= r		= 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1140], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1136], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1132], xmm0

; 116  : 	//xdot = ydot	= zdot	= 0.0F;
; 117  : 	alpdot = betdot =0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1304], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1300], xmm0

; 118  : 	initialFuel = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1336], xmm0

; 119  : 	tp04 = zp02 = kp04 = kp06 = wp02 = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1392], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1384], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1376], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1360], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1352], xmm0

; 120  : 	kr03 = kr04 = wr01 = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1428], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1424], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1420], xmm0

; 121  : 	ty03 = zy02 = ky04 = ky06 = wy02 = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1480], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1472], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1464], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1448], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1440], xmm0

; 122  : 	   
; 123  : 	ptrmcmd = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1536], xmm0

; 124  : 	rtrmcmd = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1540], xmm0

; 125  : 	ytrmcmd = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1544], xmm0

; 126  : 	//rshape2 = 0.0f;
; 127  : 	//pshape2 = 0.0f;
; 128  : 	//yshape2 = 0.0f;
; 129  : 	rshape1	= 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+688], xmm0

; 130  : 	pshape1	= 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+692], xmm0

; 131  : 	yshape1	= 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+696], xmm0

; 132  : 	slice	= 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1308], xmm0

; 133  : 	pitch	= 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1312], xmm0

; 134  : 	avgPdelta = avgRdelta = avgYdelta = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+708], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+704], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+700], xmm0

; 135  : 	//limiterAssault = 0.0f;
; 136  : 	stallMagnitude = 15.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR [ecx+1220], xmm0

; 137  : 	desiredMagnitude = 15.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR [edx+1224], xmm0

; 138  : 	throtl	= 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1512], xmm0

; 139  : 	engine1Throttle = 0.0F; //TJL 01/11/04

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1520], xmm0

; 140  : 	engine2Throttle = 0.0F; //TJL 01/11/04

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1524], xmm0

; 141  : 	speedBrake = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1560], xmm0

; 142  : 	dbrake	= 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1548], xmm0

; 143  : 	anozl	= 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+200], xmm0

; 144  : 	psi		= theta = phi	= 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1164], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1160], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1168], xmm0

; 145  : 	mu		= sigma = gmma	= 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1172], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1176], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1180], xmm0

; 146  : 	alpha	= beta	= 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1156], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1152], xmm0

; 147  : 	gearPos	= 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1552], xmm0

; 148  : 	gearHandle = -1.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax+1556], xmm0

; 149  : 		hookHandle = -1.0F; // JB carrier

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [ecx+1568], xmm0

; 150  : 	altGearDeployed = false; // JPO - marker

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1572], 0

; 151  : 	gear		= NULL; // JPO - need to free this ... but where...

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1256], 0

; 152  : 	grndphi = grndthe = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1268], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1264], xmm0

; 153  : 		lefPos = tefPos = 0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1580], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1576], xmm0

; 154  : 
; 155  : 	flags	= 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+88], 0

; 156  : 	ethrst	= 1.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+204], xmm0

; 157  : 	xaero	= yaero		= zaero		= 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+732], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+728], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+724], xmm0

; 158  : 	xwaero	= ywaero	= zwaero	= 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+756], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+752], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+748], xmm0

; 159  : 	xsaero	= ysaero	= zsaero	= 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+744], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+740], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+736], xmm0

; 160  : 	xprop	= yprop		= zprop		= 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+768], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+764], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+760], xmm0

; 161  : 	xwprop	= ywprop	= zwprop	= 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+792], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+788], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+784], xmm0

; 162  : 	xsprop	= ysprop	= zsprop	= 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+780], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+776], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+772], xmm0

; 163  : 	epuFuel	= 100.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [ecx+36], xmm0

; 164  : 	epuState	= AUTO;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1596], 1

; 165  : 	hydrAB	= 0; // JPO - start with none.

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1601], 0

; 166  : 	jfsaccumulator = 100.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [ecx+1604], xmm0

; 167  : 	externalFuel = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+32], xmm0

; 168  : 	SetFlag (Trimming);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag

; 169  : 	SetFlag (InAir);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag

; 170  : 	SetFlag(EngineStopped); // JPO - start off stopped - preflight will start it

	push	134217728				; 08000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag

; 171  : 	//TJL 01/11/04 Multi-Engine
; 172  : 	SetEngineFlag(EngineStopped2);

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEngineFlag@AirframeClass@@QAEXW4EngineFlags@1@@Z ; AirframeClass::SetEngineFlag

; 173  : 	pstick	= rstick	= ypedal	= 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1508], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1504], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1500], xmm0

; 174  : 	// assume not simple model
; 175  : 	simpleMode = SIMPLE_MODE_OFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+824], 0

; 176  : 	hf = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1812], 0

; 177  : 
; 178  : 	gsAvail = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+56], xmm0

; 179  : 	maxRollDelta = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+68], xmm0

; 180  : 	startRoll = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+72], xmm0

; 181  : 	thrust = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+188], xmm0

; 182  : 	thrust1 = 0.0F; //TJL 01/11/04 Engine 1

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+192], xmm0

; 183  : 	thrust2 = 0.0F; //TJL 01/11/04 Engine 2

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+212], xmm0

; 184  : 
; 185  : 	NextFailure = 0;		//Wombat778 2-24-04

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+820], 0

; 186  : 
; 187  : 	forcedHeading = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+252], xmm0

; 188  : 	forcedSpeed = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+256], xmm0

; 189  : 
; 190  : 	lastRStick = 0.0F;	//RAS 02Apr04:  Nose wheel steering hold last value

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+828], xmm0

; 191  : 	lastYPedal = 0.0F;	//RAS 02Apr04:  Hold pedal value

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+832], xmm0

; 192  : 	
; 193  : #if 1
; 194  : 	// Set our anchor so that when we're moving slowly we can accumulate our position in high precision
; 195  : 	groundAnchorX = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+112], xmm0

; 196  : 	groundAnchorY = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+116], xmm0

; 197  : 	groundDeltaX = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+120], xmm0

; 198  : 	groundDeltaY = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+124], xmm0

; 199  : #endif
; 200  : 
; 201  : 	// RV - Biker
; 202  : 	carrierStartPosEngaged = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+128], 0

; 203  : 
; 204  : 	memset(oldp01, 0, sizeof(oldp01));

	push	24					; 00000018H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 284				; 0000011cH
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 205  : 	memset(oldp02, 0, sizeof(oldp02));

	push	24					; 00000018H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 308				; 00000134H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 206  : 	memset(oldp03, 0, sizeof(oldp03));

	push	24					; 00000018H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 332				; 0000014cH
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 207  : 	memset(oldp04, 0, sizeof(oldp04));

	push	24					; 00000018H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 356				; 00000164H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 208  : 	memset(oldp05, 0, sizeof(oldp05));

	push	24					; 00000018H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 380				; 0000017cH
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 209  : 
; 210  : 	memset(oldr01, 0, sizeof(oldr01));

	push	24					; 00000018H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 404				; 00000194H
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 211  : 
; 212  : 	memset(oldy01, 0, sizeof(oldy01));

	push	24					; 00000018H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 428				; 000001acH
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 213  : 	//memset(oldy02, 0, sizeof(oldy02));
; 214  : 	memset(oldy03, 0, sizeof(oldy03));

	push	24					; 00000018H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 452				; 000001c4H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 215  : 	//memset(oldy04, 0, sizeof(oldy04));
; 216  : 
; 217  : 	memset(olda01, 0, sizeof(olda01));

	push	24					; 00000018H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 476				; 000001dcH
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 218  : 
; 219  : 	memset(oldRpm, 0, sizeof(oldRpm));

	push	24					; 00000018H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 500				; 000001f4H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 220  : 	//TJL 01/11/04 Multi-Engine
; 221  : 	memset(oldRpm2, 0, sizeof(oldRpm2));

	push	24					; 00000018H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 524				; 0000020cH
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 222  : 	memset(oldp01Eng2, 0, sizeof(oldp01Eng2));

	push	24					; 00000018H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 548				; 00000224H
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 223  : 	memset(olda012, 0, sizeof(olda012));

	push	24					; 00000018H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 572				; 0000023cH
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 224  : 	memset(oldTurb1, 0, sizeof(oldTurb1));//TJL 03/14/04

	push	24					; 00000018H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 596				; 00000254H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 225  : 	memset(oldRoll1, 0, sizeof(oldRoll1));//TJL 03/23/04

	push	24					; 00000018H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 620				; 0000026cH
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 226  :   
; 227  : 
; 228  : 	fuelFlow = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+24], xmm0

; 229  : 	oldnzcgs = 1.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+720], xmm0

; 230  : 	vRot = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1148], xmm0

; 231  : 	vtDot = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1208], xmm0

; 232  : 	//betdot = 0.0F;
; 233  : 	zr01 = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1408], xmm0

; 234  : 	ky05 = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1468], xmm0

; 235  : 
; 236  : 	//engineFlags = MasterFuelOff; // JPO - set up the engine and fuel systems
; 237  : 	SetEngineFlag(MasterFuelOff);//TJL 08/15/04 //Cobra 10/30/04 TJL

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEngineFlag@AirframeClass@@QAEXW4EngineFlags@1@@Z ; AirframeClass::SetEngineFlag

; 238  :     fuelSwitch = FS_NORM;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1680], 0

; 239  : 	fuelPump = FP_OFF; // JB 010414

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1684], 0

; 240  : 	airSource = AS_OFF; // JB 010414

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1800], 0

; 241  :     ClearFuel();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFuel@AirframeClass@@QAEXXZ	; AirframeClass::ClearFuel

; 242  :     memset(m_tankcap, 0, sizeof m_tankcap);

	push	36					; 00000024H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1724				; 000006bcH
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 243  :     memset(m_trate, 0, sizeof m_trate);

	push	36					; 00000024H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1760				; 000006e0H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 244  : 
; 245  : 	//MI init Landinglights and Parkingbrake
; 246  : 	//LLON = FALSE;
; 247  : 	PBON = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1616], 0

; 248  : 	BrakesToggle = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1617], 0

; 249  : 	epuBurnState = EpuNone;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1600], 0

; 250  : 	generators = GenNone;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1804], 0

; 251  : 
; 252  : 	//MI Home Fuel stuff
; 253  : 	HomeFuel = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1796], 0

; 254  : 	//MI JFS spin time
; 255  : 	JFSSpinTime = 240;	//4 minutes available

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43700000
	movss	DWORD PTR [ecx+1608], xmm0

; 256  : 	dragChute = DRAGC_STOWED;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1584], 0

; 257  : 	canopyState = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1588], 0

; 258  : 	nozzlePos = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1808], xmm0

; 259  : 	engEventTimer = SimLibElapsedTime;//TJL 02/23/04 engine 1 random timer

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [edx+228], eax

; 260  : 	engEventTimer2 = SimLibElapsedTime;//TJL 02/23/04 engine 2 random timers

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [ecx+232], edx

; 261  : 	engFlag1 = 0;//TJL 02/23/04

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+236], 0

; 262  : 	engFlag2 = 0;//TJL 02/23/04

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+240], 0

; 263  : 	flapPos = 0;//TJL 02/28/04

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+836], 0

; 264  : 	tefState = 0.0f;//TJL 02/28/04

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+840], xmm0

; 265  : 	turbTimer = SimLibElapsedTime;//TJL 03/14/04

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [ecx+244], edx

; 266  : 	turbOn = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+248], 0

; 267  : 	fuelFlowSS = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+96], xmm0

; 268  : 	fuelFlowSS2 = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+100], xmm0

; 269  :  	ftitLeft = 0.0f;//Cobra 10/30/04 TJL

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+104], xmm0

; 270  :  	ftitRight = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+108], xmm0

; 271  : 	carrierLand = 0; //Cobra

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1496], 0

; 272  : 
; 273  : 
; 274  : 	// Pilot head animation - Cobra
; 275  : 	AnimPilotAct = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+860], 0

; 276  : 	AnimPilotScenario = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+876], 0

; 277  : 	AnimPilotTime = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+856], 0

; 278  : 	AnimWSOAct = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+868], 0

; 279  : 	AnimWSOScenario = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+880], 0

; 280  : 	AnimWSOTime = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+864], 0

; 281  : 	maxAnimPilotScenarios = 5;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+884], 5

; 282  : 	maxAnimPilotActs = 9;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+872], 9

; 283  : 	// {PA_None = 0, PA_Forward, PA_ForwardDown, PA_Left, PA_Right, PA_LeftBack, PA_RightBack, PA_LeftBackUp, PA_RightBackUp};
; 284  : 	// 1st routine
; 285  : 	TheRoutine[0][0] = PA_None;

	mov	edx, 40					; 00000028H
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+888]
	mov	edx, 4
	imul	edx, 0
	mov	DWORD PTR [ecx+edx], 0

; 286  : 	TheRoutine[0][1] = PA_Left;

	mov	eax, 40					; 00000028H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+888]
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR [edx+eax], 3

; 287  : 	TheRoutine[0][2] = PA_LeftBackUp;

	mov	ecx, 40					; 00000028H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+888]
	mov	ecx, 4
	shl	ecx, 1
	mov	DWORD PTR [eax+ecx], 7

; 288  : 	TheRoutine[0][3] = PA_RightBackUp;

	mov	edx, 40					; 00000028H
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+888]
	mov	edx, 4
	imul	edx, 3
	mov	DWORD PTR [ecx+edx], 8

; 289  : 	TheRoutine[0][4] = PA_Right;

	mov	eax, 40					; 00000028H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+888]
	mov	eax, 4
	shl	eax, 2
	mov	DWORD PTR [edx+eax], 4

; 290  : 	TheRoutine[0][5] = PA_ForwardUp;

	mov	ecx, 40					; 00000028H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+888]
	mov	ecx, 4
	imul	ecx, 5
	mov	DWORD PTR [eax+ecx], 9

; 291  : 	TheRoutine[0][6] = PA_Forward;

	mov	edx, 40					; 00000028H
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+888]
	mov	edx, 4
	imul	edx, 6
	mov	DWORD PTR [ecx+edx], 1

; 292  : 	TheRoutine[0][7] = PA_ForwardDown;

	mov	eax, 40					; 00000028H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+888]
	mov	eax, 4
	imul	eax, 7
	mov	DWORD PTR [edx+eax], 2

; 293  : 	TheRoutine[0][8] = PA_Forward;

	mov	ecx, 40					; 00000028H
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+888]
	mov	ecx, 4
	shl	ecx, 3
	mov	DWORD PTR [eax+ecx], 1

; 294  : 	TheRoutine[0][9] = PA_End;

	mov	edx, 40					; 00000028H
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+888]
	mov	edx, 4
	imul	edx, 9
	mov	DWORD PTR [ecx+edx], 11			; 0000000bH

; 295  : 	// 2nd routine
; 296  : 	TheRoutine[1][0] = PA_None;

	mov	eax, 40					; 00000028H
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+888]
	mov	eax, 4
	imul	eax, 0
	mov	DWORD PTR [edx+eax], 0

; 297  : 	TheRoutine[1][1] = PA_Left;

	mov	ecx, 40					; 00000028H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+888]
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR [eax+ecx], 3

; 298  : 	TheRoutine[1][2] = PA_Right;

	mov	edx, 40					; 00000028H
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+888]
	mov	edx, 4
	shl	edx, 1
	mov	DWORD PTR [ecx+edx], 4

; 299  : 	TheRoutine[1][3] = PA_Forward;

	mov	eax, 40					; 00000028H
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+888]
	mov	eax, 4
	imul	eax, 3
	mov	DWORD PTR [edx+eax], 1

; 300  : 	TheRoutine[1][4] = PA_ForwardDown;

	mov	ecx, 40					; 00000028H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+888]
	mov	ecx, 4
	shl	ecx, 2
	mov	DWORD PTR [eax+ecx], 2

; 301  : 	TheRoutine[1][5] = PA_ForwardDown;

	mov	edx, 40					; 00000028H
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+888]
	mov	edx, 4
	imul	edx, 5
	mov	DWORD PTR [ecx+edx], 2

; 302  : 	TheRoutine[1][6] = PA_Forward;

	mov	eax, 40					; 00000028H
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+888]
	mov	eax, 4
	imul	eax, 6
	mov	DWORD PTR [edx+eax], 1

; 303  : 	TheRoutine[1][7] = PA_End;

	mov	ecx, 40					; 00000028H
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+888]
	mov	ecx, 4
	imul	ecx, 7
	mov	DWORD PTR [eax+ecx], 11			; 0000000bH

; 304  : 	TheRoutine[1][8] = PA_End;

	mov	edx, 40					; 00000028H
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+888]
	mov	edx, 4
	shl	edx, 3
	mov	DWORD PTR [ecx+edx], 11			; 0000000bH

; 305  : 	TheRoutine[1][9] = PA_End;

	mov	eax, 40					; 00000028H
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+888]
	mov	eax, 4
	imul	eax, 9
	mov	DWORD PTR [edx+eax], 11			; 0000000bH

; 306  : 	// 3rd routine
; 307  : 	TheRoutine[2][0] = PA_None;

	mov	ecx, 40					; 00000028H
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+888]
	mov	ecx, 4
	imul	ecx, 0
	mov	DWORD PTR [eax+ecx], 0

; 308  : 	TheRoutine[2][1] = PA_ForwardUp;

	mov	edx, 40					; 00000028H
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+888]
	mov	edx, 4
	shl	edx, 0
	mov	DWORD PTR [ecx+edx], 9

; 309  : 	TheRoutine[2][2] = PA_LeftBack;

	mov	eax, 40					; 00000028H
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+888]
	mov	eax, 4
	shl	eax, 1
	mov	DWORD PTR [edx+eax], 5

; 310  : 	TheRoutine[2][3] = PA_Right;

	mov	ecx, 40					; 00000028H
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+888]
	mov	ecx, 4
	imul	ecx, 3
	mov	DWORD PTR [eax+ecx], 4

; 311  : 	TheRoutine[2][4] = PA_RightBack;

	mov	edx, 40					; 00000028H
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+888]
	mov	edx, 4
	shl	edx, 2
	mov	DWORD PTR [ecx+edx], 6

; 312  : 	TheRoutine[2][5] = PA_Right;

	mov	eax, 40					; 00000028H
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+888]
	mov	eax, 4
	imul	eax, 5
	mov	DWORD PTR [edx+eax], 4

; 313  : 	TheRoutine[2][6] = PA_Forward;

	mov	ecx, 40					; 00000028H
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+888]
	mov	ecx, 4
	imul	ecx, 6
	mov	DWORD PTR [eax+ecx], 1

; 314  : 	TheRoutine[2][7] = PA_ForwardDown;

	mov	edx, 40					; 00000028H
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+888]
	mov	edx, 4
	imul	edx, 7
	mov	DWORD PTR [ecx+edx], 2

; 315  : 	TheRoutine[2][8] = PA_Forward;

	mov	eax, 40					; 00000028H
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+888]
	mov	eax, 4
	shl	eax, 3
	mov	DWORD PTR [edx+eax], 1

; 316  : 	TheRoutine[2][9] = PA_End;

	mov	ecx, 40					; 00000028H
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+888]
	mov	ecx, 4
	imul	ecx, 9
	mov	DWORD PTR [eax+ecx], 11			; 0000000bH

; 317  : 	// 4th routine
; 318  : 	TheRoutine[3][0] = PA_None;

	mov	edx, 40					; 00000028H
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+888]
	mov	edx, 4
	imul	edx, 0
	mov	DWORD PTR [ecx+edx], 0

; 319  : 	TheRoutine[3][1] = PA_Right;

	mov	eax, 40					; 00000028H
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+888]
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR [edx+eax], 4

; 320  : 	TheRoutine[3][2] = PA_ForwardUp;

	mov	ecx, 40					; 00000028H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+888]
	mov	ecx, 4
	shl	ecx, 1
	mov	DWORD PTR [eax+ecx], 9

; 321  : 	TheRoutine[3][3] = PA_Left;

	mov	edx, 40					; 00000028H
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+888]
	mov	edx, 4
	imul	edx, 3
	mov	DWORD PTR [ecx+edx], 3

; 322  : 	TheRoutine[3][4] = PA_Forward;

	mov	eax, 40					; 00000028H
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+888]
	mov	eax, 4
	shl	eax, 2
	mov	DWORD PTR [edx+eax], 1

; 323  : 	TheRoutine[3][5] = PA_ForwardDown;

	mov	ecx, 40					; 00000028H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+888]
	mov	ecx, 4
	imul	ecx, 5
	mov	DWORD PTR [eax+ecx], 2

; 324  : 	TheRoutine[3][6] = PA_Forward;

	mov	edx, 40					; 00000028H
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+888]
	mov	edx, 4
	imul	edx, 6
	mov	DWORD PTR [ecx+edx], 1

; 325  : 	TheRoutine[3][7] = PA_ForwardDown;

	mov	eax, 40					; 00000028H
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+888]
	mov	eax, 4
	imul	eax, 7
	mov	DWORD PTR [edx+eax], 2

; 326  : 	TheRoutine[3][8] = PA_Forward;

	mov	ecx, 40					; 00000028H
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+888]
	mov	ecx, 4
	shl	ecx, 3
	mov	DWORD PTR [eax+ecx], 1

; 327  : 	TheRoutine[3][9] = PA_End;

	mov	edx, 40					; 00000028H
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+888]
	mov	edx, 4
	imul	edx, 9
	mov	DWORD PTR [ecx+edx], 11			; 0000000bH

; 328  : 	// 5th routine
; 329  : 	TheRoutine[4][0] = PA_None;

	mov	eax, 40					; 00000028H
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+888]
	mov	eax, 4
	imul	eax, 0
	mov	DWORD PTR [edx+eax], 0

; 330  : 	TheRoutine[4][1] = PA_Left;

	mov	ecx, 40					; 00000028H
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+888]
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR [eax+ecx], 3

; 331  : 	TheRoutine[4][2] = PA_LeftBack;

	mov	edx, 40					; 00000028H
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+888]
	mov	edx, 4
	shl	edx, 1
	mov	DWORD PTR [ecx+edx], 5

; 332  : 	TheRoutine[4][3] = PA_LeftBackUp;

	mov	eax, 40					; 00000028H
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+888]
	mov	eax, 4
	imul	eax, 3
	mov	DWORD PTR [edx+eax], 7

; 333  : 	TheRoutine[4][4] = PA_Forward;

	mov	ecx, 40					; 00000028H
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+888]
	mov	ecx, 4
	shl	ecx, 2
	mov	DWORD PTR [eax+ecx], 1

; 334  : 	TheRoutine[4][5] = PA_RightBack;

	mov	edx, 40					; 00000028H
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+888]
	mov	edx, 4
	imul	edx, 5
	mov	DWORD PTR [ecx+edx], 6

; 335  : 	TheRoutine[4][6] = PA_RightBackUp;

	mov	eax, 40					; 00000028H
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+888]
	mov	eax, 4
	imul	eax, 6
	mov	DWORD PTR [edx+eax], 8

; 336  : 	TheRoutine[4][7] = PA_Right;

	mov	ecx, 40					; 00000028H
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+888]
	mov	ecx, 4
	imul	ecx, 7
	mov	DWORD PTR [eax+ecx], 4

; 337  : 	TheRoutine[4][8] = PA_Forward;

	mov	edx, 40					; 00000028H
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+888]
	mov	edx, 4
	shl	edx, 3
	mov	DWORD PTR [ecx+edx], 1

; 338  : 	TheRoutine[4][9] = PA_End;

	mov	eax, 40					; 00000028H
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+888]
	mov	eax, 4
	imul	eax, 9
	mov	DWORD PTR [edx+eax], 11			; 0000000bH

; 339  : 
; 340  : 	// MLR 2/23/2004 - Init to 0
; 341  : 	for(int l=0;l<8;l++){

	mov	DWORD PTR _l$1[ebp], 0
	jmp	SHORT $LN3@AirframeCl
$LN2@AirframeCl:
	mov	ecx, DWORD PTR _l$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _l$1[ebp], ecx
$LN3@AirframeCl:
	cmp	DWORD PTR _l$1[ebp], 8
	jge	SHORT $LN1@AirframeCl

; 342  : 		gearExtension[l] = 0;

	mov	edx, DWORD PTR _l$1[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx*4+1820], xmm0

; 343  : 	}

	jmp	SHORT $LN2@AirframeCl
$LN1@AirframeCl:

; 344  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0AirframeClass@@QAE@PAVAircraftClass@@@Z ENDP		; AirframeClass::AirframeClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GeneratorBreak@AirframeClass@@QAEXW4Generator@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_gen$ = 8						; size = 4
?GeneratorBreak@AirframeClass@@QAEXW4Generator@1@@Z PROC ; AirframeClass::GeneratorBreak, COMDAT
; _this$ = ecx

; 1134 : 	void GeneratorBreak(Generator gen) { generators |= (gen<<1); GeneratorOff(gen);  };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _gen$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	or	eax, DWORD PTR [ecx+1804]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1804], eax
	mov	eax, DWORD PTR _gen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GeneratorOff@AirframeClass@@QAEXW4Generator@1@@Z ; AirframeClass::GeneratorOff
	mov	esp, ebp
	pop	ebp
	ret	4
?GeneratorBreak@AirframeClass@@QAEXW4Generator@1@@Z ENDP ; AirframeClass::GeneratorBreak
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GeneratorOff@AirframeClass@@QAEXW4Generator@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_gen$ = 8						; size = 4
?GeneratorOff@AirframeClass@@QAEXW4Generator@1@@Z PROC	; AirframeClass::GeneratorOff, COMDAT
; _this$ = ecx

; 1133 : 	void GeneratorOff (Generator gen) { generators &= ~gen; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _gen$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+1804]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1804], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GeneratorOff@AirframeClass@@QAEXW4Generator@1@@Z ENDP	; AirframeClass::GeneratorOff
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?SetEngineFlag@AirframeClass@@QAEXW4EngineFlags@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ef$ = 8						; size = 4
?SetEngineFlag@AirframeClass@@QAEXW4EngineFlags@1@@Z PROC ; AirframeClass::SetEngineFlag, COMDAT
; _this$ = ecx

; 1071 : 	void SetEngineFlag(EngineFlags ef) { engineFlags |= ef; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1676]
	or	ecx, DWORD PTR _ef$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1676], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetEngineFlag@AirframeClass@@QAEXW4EngineFlags@1@@Z ENDP ; AirframeClass::SetEngineFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
$T1 = -36						; size = 8
tv187 = -28						; size = 8
tv183 = -20						; size = 4
_faultSys$ = -16					; size = 4
tv68 = -12						; size = 4
_sw$ = -8						; size = 4
_this$ = -4						; size = 4
?HookDown@AirframeClass@@QAEXXZ PROC			; AirframeClass::HookDown
; _this$ = ecx

; 1491 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 1492 :     int sw = platform->IsComplex() ? COMP_HOOK : SIMP_HOOK;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?IsComplex@AircraftClass@@QAEHXZ	; AircraftClass::IsComplex
	test	eax, eax
	je	SHORT $LN6@HookDown
	mov	DWORD PTR tv68[ebp], 23			; 00000017H
	jmp	SHORT $LN7@HookDown
$LN6@HookDown:
	mov	DWORD PTR tv68[ebp], 7
$LN7@HookDown:
	mov	ecx, DWORD PTR tv68[ebp]
	mov	DWORD PTR _sw$[ebp], ecx

; 1493 : 
; 1494 : 	FackClass*		faultSys;
; 1495 : 	faultSys	= ((AircraftClass*)(SimDriver.GetPlayerEntity()))->mFaults;

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	edx, DWORD PTR [eax+928]
	mov	DWORD PTR _faultSys$[ebp], edx

; 1496 : 
; 1497 : 	if(!IsSet(Hook))

	push	-2147483648				; 80000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN3@HookDown

; 1498 : 	{
; 1499 : 	    hookHandle = 1.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+1568], xmm0

; 1500 : 		SetFlag(Hook);

	push	-2147483648				; 80000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag

; 1501 : 		// MD -- 20031006: setting the fault was done in the cockpit callback but it will work better
; 1502 : 		// here and ensure the shared memory state is updated even when we aren't looking at the panel
; 1503 : 		if(faultSys && ((AircraftClass*)(SimDriver.GetPlayerEntity()))->af->platform->IsF16())

	cmp	DWORD PTR _faultSys$[ebp], 0
	je	SHORT $LN2@HookDown
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, DWORD PTR [eax+932]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?IsF16@AircraftClass@@QAEHXZ		; AircraftClass::IsF16
	test	eax, eax
	je	SHORT $LN2@HookDown

; 1504 : 				faultSys->SetCaution(hook_fault);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _faultSys$[ebp]
	call	?SetCaution@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetCaution
$LN2@HookDown:

; 1505 : 
; 1506 : 		if ( gACMIRec.IsRecording() )

	mov	ecx, OFFSET ?gACMIRec@@3VACMIRecorder@@A ; gACMIRec
	call	?IsRecording@ACMIRecorder@@QAEHXZ	; ACMIRecorder::IsRecording
	test	eax, eax
	je	$LN1@HookDown

; 1507 : 		{
; 1508 : 			acmiSwitch.hdr.time = SimLibElapsedTime * MSEC_TO_SEC + OTWDriver.todOffset;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR tv183[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv183[ebp]
	mov	eax, DWORD PTR tv183[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv187[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv187[ebp]
	mulss	xmm0, DWORD PTR __real@3a83126f
	addss	xmm0, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+32052
	movss	DWORD PTR ?acmiSwitch@@3UACMISwitchRecord@@A+1, xmm0

; 1509 : 			acmiSwitch.data.type = platform->Type();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	edx, ax
	mov	DWORD PTR ?acmiSwitch@@3UACMISwitchRecord@@A+5, edx

; 1510 : 			acmiSwitch.data.uniqueID = platform->Id();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	mov	DWORD PTR ?acmiSwitch@@3UACMISwitchRecord@@A+9, eax

; 1511 : 			acmiSwitch.data.switchNum = sw;

	mov	edx, DWORD PTR _sw$[ebp]
	mov	DWORD PTR ?acmiSwitch@@3UACMISwitchRecord@@A+13, edx

; 1512 : 			acmiSwitch.data.prevSwitchVal = platform->GetSwitch (sw);

	mov	eax, DWORD PTR _sw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?GetSwitch@SimMoverClass@@QAEHH@Z	; SimMoverClass::GetSwitch
	mov	DWORD PTR ?acmiSwitch@@3UACMISwitchRecord@@A+21, eax

; 1513 : 			acmiSwitch.data.switchVal = 1;

	mov	DWORD PTR ?acmiSwitch@@3UACMISwitchRecord@@A+17, 1

; 1514 : 			gACMIRec.SwitchRecord( &acmiSwitch );

	push	OFFSET ?acmiSwitch@@3UACMISwitchRecord@@A ; acmiSwitch
	mov	ecx, OFFSET ?gACMIRec@@3VACMIRecorder@@A ; gACMIRec
	call	?SwitchRecord@ACMIRecorder@@QAEXPAUACMISwitchRecord@@@Z ; ACMIRecorder::SwitchRecord
$LN1@HookDown:

; 1515 : 		}
; 1516 : 
; 1517 : 		platform->SetSwitch(sw, 1);

	push	1
	mov	edx, DWORD PTR _sw$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?SetSwitch@SimMoverClass@@QAEXHH@Z	; SimMoverClass::SetSwitch
$LN3@HookDown:

; 1518 : 	}
; 1519 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HookDown@AirframeClass@@QAEXXZ ENDP			; AirframeClass::HookDown
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
$T1 = -36						; size = 8
tv192 = -28						; size = 8
tv188 = -20						; size = 4
tv68 = -16						; size = 4
_sw$ = -12						; size = 4
_faultSys$ = -8						; size = 4
_this$ = -4						; size = 4
?HookUp@AirframeClass@@QAEXXZ PROC			; AirframeClass::HookUp
; _this$ = ecx

; 1460 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 1461 :     int sw = platform->IsComplex() ? COMP_HOOK : SIMP_HOOK;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?IsComplex@AircraftClass@@QAEHXZ	; AircraftClass::IsComplex
	test	eax, eax
	je	SHORT $LN6@HookUp
	mov	DWORD PTR tv68[ebp], 23			; 00000017H
	jmp	SHORT $LN7@HookUp
$LN6@HookUp:
	mov	DWORD PTR tv68[ebp], 7
$LN7@HookUp:
	mov	ecx, DWORD PTR tv68[ebp]
	mov	DWORD PTR _sw$[ebp], ecx

; 1462 : 
; 1463 : 	FackClass*		faultSys;
; 1464 : 	faultSys	= ((AircraftClass*)(SimDriver.GetPlayerEntity()))->mFaults;

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	edx, DWORD PTR [eax+928]
	mov	DWORD PTR _faultSys$[ebp], edx

; 1465 : 
; 1466 : 	if(IsSet(Hook))

	push	-2147483648				; 80000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN3@HookUp

; 1467 : 	{
; 1468 : 		hookHandle = -1.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax+1568], xmm0

; 1469 : 		ClearFlag(Hook);

	push	-2147483648				; 80000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag

; 1470 : 		// MD -- 20031006: setting the fault was done in the cockpit callback but it will work better
; 1471 : 		// here and ensure the shared memory state is updated even when we aren't looking at the panel
; 1472 : 		if(faultSys && faultSys->GetFault(hook_fault) && ((AircraftClass*)(SimDriver.GetPlayerEntity()))->af->platform->IsF16())

	cmp	DWORD PTR _faultSys$[ebp], 0
	je	SHORT $LN2@HookUp
	push	18					; 00000012H
	mov	ecx, DWORD PTR _faultSys$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN2@HookUp
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, DWORD PTR [eax+932]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?IsF16@AircraftClass@@QAEHXZ		; AircraftClass::IsF16
	test	eax, eax
	je	SHORT $LN2@HookUp

; 1473 : 			faultSys->ClearFault(hook_fault);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _faultSys$[ebp]
	call	?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::ClearFault
$LN2@HookUp:

; 1474 : 
; 1475 : 		if ( gACMIRec.IsRecording() )

	mov	ecx, OFFSET ?gACMIRec@@3VACMIRecorder@@A ; gACMIRec
	call	?IsRecording@ACMIRecorder@@QAEHXZ	; ACMIRecorder::IsRecording
	test	eax, eax
	je	$LN1@HookUp

; 1476 : 		{
; 1477 : 			acmiSwitch.hdr.time = SimLibElapsedTime * MSEC_TO_SEC + OTWDriver.todOffset;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR tv188[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv188[ebp]
	mov	eax, DWORD PTR tv188[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv192[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv192[ebp]
	mulss	xmm0, DWORD PTR __real@3a83126f
	addss	xmm0, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+32052
	movss	DWORD PTR ?acmiSwitch@@3UACMISwitchRecord@@A+1, xmm0

; 1478 : 			acmiSwitch.data.type = platform->Type();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	edx, ax
	mov	DWORD PTR ?acmiSwitch@@3UACMISwitchRecord@@A+5, edx

; 1479 : 			acmiSwitch.data.uniqueID = platform->Id();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	mov	DWORD PTR ?acmiSwitch@@3UACMISwitchRecord@@A+9, eax

; 1480 : 			acmiSwitch.data.switchNum = sw;

	mov	edx, DWORD PTR _sw$[ebp]
	mov	DWORD PTR ?acmiSwitch@@3UACMISwitchRecord@@A+13, edx

; 1481 : 			acmiSwitch.data.prevSwitchVal = platform->GetSwitch (sw);

	mov	eax, DWORD PTR _sw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?GetSwitch@SimMoverClass@@QAEHH@Z	; SimMoverClass::GetSwitch
	mov	DWORD PTR ?acmiSwitch@@3UACMISwitchRecord@@A+21, eax

; 1482 : 			acmiSwitch.data.switchVal = 0;

	mov	DWORD PTR ?acmiSwitch@@3UACMISwitchRecord@@A+17, 0

; 1483 : 			gACMIRec.SwitchRecord( &acmiSwitch );

	push	OFFSET ?acmiSwitch@@3UACMISwitchRecord@@A ; acmiSwitch
	mov	ecx, OFFSET ?gACMIRec@@3VACMIRecorder@@A ; gACMIRec
	call	?SwitchRecord@ACMIRecorder@@QAEXPAUACMISwitchRecord@@@Z ; ACMIRecorder::SwitchRecord
$LN1@HookUp:

; 1484 : 		}
; 1485 : 
; 1486 : 		platform->SetSwitch(sw, 0);

	push	0
	mov	edx, DWORD PTR _sw$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?SetSwitch@SimMoverClass@@QAEXHH@Z	; SimMoverClass::SetSwitch
$LN3@HookUp:

; 1487 : 	}
; 1488 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HookUp@AirframeClass@@QAEXXZ ENDP			; AirframeClass::HookUp
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
$T1 = -56						; size = 8
$T2 = -48						; size = 8
tv278 = -40						; size = 8
tv252 = -32						; size = 8
tv274 = -24						; size = 4
tv248 = -20						; size = 4
tv68 = -16						; size = 4
_faultSys$ = -12					; size = 4
_sw$ = -8						; size = 4
_this$ = -4						; size = 4
?ToggleHook@AirframeClass@@QAEXXZ PROC			; AirframeClass::ToggleHook
; _this$ = ecx

; 1405 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1406 :     int sw = platform->IsComplex() ? COMP_HOOK : SIMP_HOOK;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?IsComplex@AircraftClass@@QAEHXZ	; AircraftClass::IsComplex
	test	eax, eax
	je	SHORT $LN9@ToggleHook
	mov	DWORD PTR tv68[ebp], 23			; 00000017H
	jmp	SHORT $LN10@ToggleHook
$LN9@ToggleHook:
	mov	DWORD PTR tv68[ebp], 7
$LN10@ToggleHook:
	mov	ecx, DWORD PTR tv68[ebp]
	mov	DWORD PTR _sw$[ebp], ecx

; 1407 : 
; 1408 : 	FackClass*		faultSys;
; 1409 : 	faultSys	= ((AircraftClass*)(SimDriver.GetPlayerEntity()))->mFaults;

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	edx, DWORD PTR [eax+928]
	mov	DWORD PTR _faultSys$[ebp], edx

; 1410 : 
; 1411 : 	if(IsSet(Hook))

	push	-2147483648				; 80000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN6@ToggleHook

; 1412 : 	{
; 1413 :     hookHandle = -1.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax+1568], xmm0

; 1414 : 		ClearFlag(Hook);

	push	-2147483648				; 80000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag

; 1415 : 		// MD -- 20031006: setting the fault was done in the cockpit callback but it will work better
; 1416 : 		// here and ensure the shared memory state is updated even when we aren't looking at the panel
; 1417 : 		if(faultSys && faultSys->GetFault(hook_fault) && ((AircraftClass*)(SimDriver.GetPlayerEntity()))->af->platform->IsF16())

	cmp	DWORD PTR _faultSys$[ebp], 0
	je	SHORT $LN5@ToggleHook
	push	18					; 00000012H
	mov	ecx, DWORD PTR _faultSys$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN5@ToggleHook
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, DWORD PTR [eax+932]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?IsF16@AircraftClass@@QAEHXZ		; AircraftClass::IsF16
	test	eax, eax
	je	SHORT $LN5@ToggleHook

; 1418 : 			faultSys->ClearFault(hook_fault);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _faultSys$[ebp]
	call	?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::ClearFault
$LN5@ToggleHook:

; 1419 : 
; 1420 : 		if ( gACMIRec.IsRecording() )

	mov	ecx, OFFSET ?gACMIRec@@3VACMIRecorder@@A ; gACMIRec
	call	?IsRecording@ACMIRecorder@@QAEHXZ	; ACMIRecorder::IsRecording
	test	eax, eax
	je	$LN4@ToggleHook

; 1421 : 		{
; 1422 : 			acmiSwitch.hdr.time = SimLibElapsedTime * MSEC_TO_SEC + OTWDriver.todOffset;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR tv248[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv248[ebp]
	mov	eax, DWORD PTR tv248[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv252[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv252[ebp]
	mulss	xmm0, DWORD PTR __real@3a83126f
	addss	xmm0, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+32052
	movss	DWORD PTR ?acmiSwitch@@3UACMISwitchRecord@@A+1, xmm0

; 1423 : 			acmiSwitch.data.type = platform->Type();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	edx, ax
	mov	DWORD PTR ?acmiSwitch@@3UACMISwitchRecord@@A+5, edx

; 1424 : 			acmiSwitch.data.uniqueID = platform->Id();

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	mov	DWORD PTR ?acmiSwitch@@3UACMISwitchRecord@@A+9, eax

; 1425 : 			acmiSwitch.data.switchNum = sw;

	mov	edx, DWORD PTR _sw$[ebp]
	mov	DWORD PTR ?acmiSwitch@@3UACMISwitchRecord@@A+13, edx

; 1426 : 			acmiSwitch.data.prevSwitchVal = platform->GetSwitch (sw);

	mov	eax, DWORD PTR _sw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?GetSwitch@SimMoverClass@@QAEHH@Z	; SimMoverClass::GetSwitch
	mov	DWORD PTR ?acmiSwitch@@3UACMISwitchRecord@@A+21, eax

; 1427 : 			acmiSwitch.data.switchVal = 0;

	mov	DWORD PTR ?acmiSwitch@@3UACMISwitchRecord@@A+17, 0

; 1428 : 			gACMIRec.SwitchRecord( &acmiSwitch );

	push	OFFSET ?acmiSwitch@@3UACMISwitchRecord@@A ; acmiSwitch
	mov	ecx, OFFSET ?gACMIRec@@3VACMIRecorder@@A ; gACMIRec
	call	?SwitchRecord@ACMIRecorder@@QAEXPAUACMISwitchRecord@@@Z ; ACMIRecorder::SwitchRecord
$LN4@ToggleHook:

; 1429 : 		}
; 1430 : 
; 1431 : 		platform->SetSwitch(sw, 0);

	push	0
	mov	edx, DWORD PTR _sw$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?SetSwitch@SimMoverClass@@QAEXHH@Z	; SimMoverClass::SetSwitch

; 1432 : 	}
; 1433 :   else

	jmp	$LN3@ToggleHook
$LN6@ToggleHook:

; 1434 : 	{
; 1435 :     hookHandle = 1.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+1568], xmm0

; 1436 : 		SetFlag(Hook);

	push	-2147483648				; 80000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag

; 1437 : 		// MD -- 20031006: setting the fault was done in the cockpit callback but it will work better
; 1438 : 		// here and ensure the shared memory state is updated even when we aren't looking at the panel
; 1439 : 		if(faultSys && ((AircraftClass*)(SimDriver.GetPlayerEntity()))->af->platform->IsF16())

	cmp	DWORD PTR _faultSys$[ebp], 0
	je	SHORT $LN2@ToggleHook
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	edx, DWORD PTR [eax+932]
	mov	ecx, DWORD PTR [edx+1088]
	call	?IsF16@AircraftClass@@QAEHXZ		; AircraftClass::IsF16
	test	eax, eax
	je	SHORT $LN2@ToggleHook

; 1440 : 				faultSys->SetCaution(hook_fault);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _faultSys$[ebp]
	call	?SetCaution@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetCaution
$LN2@ToggleHook:

; 1441 : 
; 1442 : 		if ( gACMIRec.IsRecording() )

	mov	ecx, OFFSET ?gACMIRec@@3VACMIRecorder@@A ; gACMIRec
	call	?IsRecording@ACMIRecorder@@QAEHXZ	; ACMIRecorder::IsRecording
	test	eax, eax
	je	$LN1@ToggleHook

; 1443 : 		{
; 1444 : 			acmiSwitch.hdr.time = SimLibElapsedTime * MSEC_TO_SEC + OTWDriver.todOffset;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR tv274[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv274[ebp]
	mov	ecx, DWORD PTR tv274[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv278[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv278[ebp]
	mulss	xmm0, DWORD PTR __real@3a83126f
	addss	xmm0, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+32052
	movss	DWORD PTR ?acmiSwitch@@3UACMISwitchRecord@@A+1, xmm0

; 1445 : 			acmiSwitch.data.type = platform->Type();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	eax, ax
	mov	DWORD PTR ?acmiSwitch@@3UACMISwitchRecord@@A+5, eax

; 1446 : 			acmiSwitch.data.uniqueID = platform->Id();

	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	mov	DWORD PTR ?acmiSwitch@@3UACMISwitchRecord@@A+9, eax

; 1447 : 			acmiSwitch.data.switchNum = sw;

	mov	eax, DWORD PTR _sw$[ebp]
	mov	DWORD PTR ?acmiSwitch@@3UACMISwitchRecord@@A+13, eax

; 1448 : 			acmiSwitch.data.prevSwitchVal = platform->GetSwitch (sw);

	mov	ecx, DWORD PTR _sw$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?GetSwitch@SimMoverClass@@QAEHH@Z	; SimMoverClass::GetSwitch
	mov	DWORD PTR ?acmiSwitch@@3UACMISwitchRecord@@A+21, eax

; 1449 : 			acmiSwitch.data.switchVal = 1;

	mov	DWORD PTR ?acmiSwitch@@3UACMISwitchRecord@@A+17, 1

; 1450 : 			gACMIRec.SwitchRecord( &acmiSwitch );

	push	OFFSET ?acmiSwitch@@3UACMISwitchRecord@@A ; acmiSwitch
	mov	ecx, OFFSET ?gACMIRec@@3VACMIRecorder@@A ; gACMIRec
	call	?SwitchRecord@ACMIRecorder@@QAEXPAUACMISwitchRecord@@@Z ; ACMIRecorder::SwitchRecord
$LN1@ToggleHook:

; 1451 : 		}
; 1452 : 
; 1453 : 		platform->SetSwitch(sw, 1);

	push	1
	mov	eax, DWORD PTR _sw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?SetSwitch@SimMoverClass@@QAEXHH@Z	; SimMoverClass::SetSwitch
$LN3@ToggleHook:

; 1454 : 	}
; 1455 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleHook@AirframeClass@@QAEXXZ ENDP			; AirframeClass::ToggleHook
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TogglePB@AirframeClass@@QAEXXZ PROC			; AirframeClass::TogglePB
; _this$ = ecx

; 1385 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1386 : 	//not if we're rolling
; 1387 : 	if(vt > 1.0F * KNOTS_TO_FTPSEC)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1120]
	comiss	xmm0, DWORD PTR __real@3fd80b03
	jbe	SHORT $LN3@TogglePB

; 1388 : 	{
; 1389 : 		PBON = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1616], 0

; 1390 : 		ClearFlag(WheelBrakes);

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag

; 1391 : 		return;

	jmp	SHORT $LN4@TogglePB
$LN3@TogglePB:

; 1392 : 	}
; 1393 :     if(PBON) {

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+1616]
	test	eax, eax
	je	SHORT $LN2@TogglePB

; 1394 : 	PBON = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1616], 0

; 1395 : 	ClearFlag(WheelBrakes);

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag

; 1396 :     }
; 1397 :     else {

	jmp	SHORT $LN1@TogglePB
$LN2@TogglePB:

; 1398 : 	PBON = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1616], 1

; 1399 : 	SetFlag(WheelBrakes);		

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag
$LN1@TogglePB:
$LN4@TogglePB:

; 1400 :     }
; 1401 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TogglePB@AirframeClass@@QAEXXZ ENDP			; AirframeClass::TogglePB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CanopyToggle@AirframeClass@@QAEXXZ PROC		; AirframeClass::CanopyToggle
; _this$ = ecx

; 1813 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1814 : 	if (canopyState == true){

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1588]
	cmp	ecx, 1
	jne	SHORT $LN3@CanopyTogg

; 1815 : 		canopyState = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1588], 0
	jmp	SHORT $LN4@CanopyTogg
$LN3@CanopyTogg:

; 1816 : 	}
; 1817 : 	else if (!IsSet(InAir)){

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN4@CanopyTogg

; 1818 : 		canopyState = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1588], 1
$LN4@CanopyTogg:

; 1819 : 	}
; 1820 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CanopyToggle@AirframeClass@@QAEXXZ ENDP		; AirframeClass::CanopyToggle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
tv244 = -76						; size = 8
tv230 = -68						; size = 8
tv195 = -60						; size = 8
tv181 = -52						; size = 8
tv242 = -44						; size = 4
tv237 = -40						; size = 4
tv251 = -36						; size = 4
tv193 = -32						; size = 4
tv188 = -28						; size = 4
tv249 = -24						; size = 4
tv226 = -20						; size = 4
tv177 = -16						; size = 4
_MTBF$1 = -12						; size = 4
_this$ = -8						; size = 4
tv239 = -4						; size = 2
tv190 = -2						; size = 2
?RandomFailureModel@AirframeClass@@QAEXXZ PROC		; AirframeClass::RandomFailureModel
; _this$ = ecx

; 1830 : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	DWORD PTR _this$[ebp], ecx

; 1831 : 	if (g_bEnableRandomFailures && platform->IsPlayer()){

	movzx	eax, BYTE PTR ?g_bEnableRandomFailures@@3_NA ; g_bEnableRandomFailures
	test	eax, eax
	je	$LN5@RandomFail
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	$LN5@RandomFail

; 1832 : 		//isplayer shouldnt be necessary, but just in case.
; 1833 : 		float MTBF = g_fMeanTimeBetweenFailures;

	movss	xmm0, DWORD PTR ?g_fMeanTimeBetweenFailures@@3MA
	movss	DWORD PTR _MTBF$1[ebp], xmm0

; 1834 : 		// If a config variable exists, use it to override. 
; 1835 : 		// This way the feature can be used even before new ac.dats are available		
; 1836 : 		if (!MTBF)

	movss	xmm0, DWORD PTR _MTBF$1[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@RandomFail

; 1837 : 			MTBF = auxaeroData->MeanTimeBetweenFailures;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movss	xmm0, DWORD PTR [eax+612]
	movss	DWORD PTR _MTBF$1[ebp], xmm0
$LN8@RandomFail:

; 1838 : 		
; 1839 : 		if (MTBF) 

	movss	xmm0, DWORD PTR _MTBF$1[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN5@RandomFail

; 1840 : 		{
; 1841 : 			if (NextFailure==0){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+820], 0
	jne	$LN6@RandomFail

; 1842 : 				//If nextfailure is 0, then this is the first time this has been run
; 1843 : 				NextFailure = static_cast<VU_TIME>(vuxGameTime + ((rand()/(float)RAND_MAX) * (MTBF*7200000.0f)));  

	mov	edx, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	mov	DWORD PTR tv177[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv177[ebp]
	mov	eax, DWORD PTR tv177[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv181[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv181[ebp]
	movss	DWORD PTR tv249[ebp], xmm0
	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	movss	xmm1, DWORD PTR _MTBF$1[ebp]
	mulss	xmm1, DWORD PTR __real@4adbba00
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR tv249[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv188[ebp], xmm1
	fld	DWORD PTR tv188[ebp]
	fnstcw	WORD PTR tv190[ebp]
	movzx	eax, WORD PTR tv190[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv193[ebp], eax
	fldcw	WORD PTR tv193[ebp]
	fistp	QWORD PTR tv195[ebp]
	fldcw	WORD PTR tv190[ebp]
	mov	ecx, DWORD PTR tv195[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+820], ecx
$LN6@RandomFail:

; 1844 : 				//7200000 = 60sec*60min*1000ms  * 2 (beucase rand/randmax will average 0.5
; 1845 : 			}
; 1846 : 
; 1847 : 			if (vuxGameTime >= NextFailure)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	cmp	ecx, DWORD PTR [eax+820]
	jb	$LN5@RandomFail

; 1848 : 			{
; 1849 : 				//Make a failure.  Taken from Tom Waeltis code in SimRandomError
; 1850 : 
; 1851 : 				platform->mFaults->RandomFailure();	

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR [eax+928]
	call	?RandomFailure@FackClass@@QAEXXZ	; FackClass::RandomFailure

; 1852 : 				if (rand() % 100 < 20) 

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	cmp	edx, 20					; 00000014H
	jge	SHORT $LN4@RandomFail

; 1853 : 				{ // 20% failure chance of A system
; 1854 : 					HydrBreak (AirframeClass::HYDR_A_SYSTEM);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HydrBreak@AirframeClass@@QAEXH@Z	; AirframeClass::HydrBreak
$LN4@RandomFail:

; 1855 : 				}
; 1856 : 				if (rand() % 100 < 20) 

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	cmp	edx, 20					; 00000014H
	jge	SHORT $LN3@RandomFail

; 1857 : 				{ // 20% failure chance of B system
; 1858 : 					HydrBreak (AirframeClass::HYDR_B_SYSTEM);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HydrBreak@AirframeClass@@QAEXH@Z	; AirframeClass::HydrBreak
$LN3@RandomFail:

; 1859 : 				}
; 1860 : 				// also break the generators now and then
; 1861 : 				if (rand() % 7 == 1){

	call	_rand
	cdq
	mov	ecx, 7
	idiv	ecx
	cmp	edx, 1
	jne	SHORT $LN2@RandomFail

; 1862 : 					GeneratorBreak(AirframeClass::GenStdby);

	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GeneratorBreak@AirframeClass@@QAEXW4Generator@1@@Z ; AirframeClass::GeneratorBreak
$LN2@RandomFail:

; 1863 : 				}
; 1864 : 				if (rand() % 7 == 1){

	call	_rand
	cdq
	mov	ecx, 7
	idiv	ecx
	cmp	edx, 1
	jne	SHORT $LN1@RandomFail

; 1865 : 					GeneratorBreak(AirframeClass::GenMain);

	push	1024					; 00000400H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GeneratorBreak@AirframeClass@@QAEXW4Generator@1@@Z ; AirframeClass::GeneratorBreak
$LN1@RandomFail:

; 1866 : 				}
; 1867 : 				//Set the next failure
; 1868 : 				NextFailure = static_cast<VU_TIME>(vuxGameTime + ((rand()/(float)RAND_MAX) * (MTBF*7200000.0f)));

	mov	edx, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	mov	DWORD PTR tv226[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv226[ebp]
	mov	eax, DWORD PTR tv226[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv230[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv230[ebp]
	movss	DWORD PTR tv251[ebp], xmm0
	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	movss	xmm1, DWORD PTR _MTBF$1[ebp]
	mulss	xmm1, DWORD PTR __real@4adbba00
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR tv251[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv237[ebp], xmm1
	fld	DWORD PTR tv237[ebp]
	fnstcw	WORD PTR tv239[ebp]
	movzx	eax, WORD PTR tv239[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv242[ebp], eax
	fldcw	WORD PTR tv242[ebp]
	fistp	QWORD PTR tv244[ebp]
	fldcw	WORD PTR tv239[ebp]
	mov	ecx, DWORD PTR tv244[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+820], ecx
$LN5@RandomFail:

; 1869 : 			}
; 1870 : 		}
; 1871 : 	}
; 1872 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RandomFailureModel@AirframeClass@@QAEXXZ ENDP		; AirframeClass::RandomFailureModel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
tv315 = -44						; size = 4
tv302 = -40						; size = 4
tv275 = -36						; size = 4
tv251 = -32						; size = 4
tv238 = -28						; size = 4
tv211 = -24						; size = 4
tv189 = -20						; size = 4
tv170 = -16						; size = 4
tv154 = -12						; size = 4
_vflapmax$ = -8						; size = 4
_this$ = -4						; size = 4
?SetFlapsPlayer@AirframeClass@@QAEXXZ PROC		; AirframeClass::SetFlapsPlayer
; _this$ = ecx

; 1660 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1661 : 	float vflapmax = 250.0f;//F15

	movss	xmm0, DWORD PTR __real@437a0000
	movss	DWORD PTR _vflapmax$[ebp], xmm0

; 1662 : 
; 1663 : 	//F15A/B, C, E
; 1664 : 	if (auxaeroData->typeAC == 3 || auxaeroData->typeAC == 4 || auxaeroData->typeAC == 5)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+3880], 3
	je	SHORT $LN45@SetFlapsPl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax+3880], 4
	je	SHORT $LN45@SetFlapsPl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+3880], 5
	jne	$LN41@SetFlapsPl
$LN45@SetFlapsPl:

; 1665 : 	{
; 1666 : 		if (tefPos > 0 && (flapPos == 0 || flapPos == 4)){

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1580]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN44@SetFlapsPl
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+836], 0
	je	SHORT $LN43@SetFlapsPl
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+836], 4
	jne	SHORT $LN44@SetFlapsPl
$LN43@SetFlapsPl:

; 1667 : 			flapPos = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+836], 1

; 1668 : 			tefState = tefPos;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1580]
	mov	DWORD PTR [ecx+840], eax
$LN44@SetFlapsPl:

; 1669 : 		}
; 1670 : 		
; 1671 : 		if (vcas > vflapmax && flapPos == 1){

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1124]
	comiss	xmm0, DWORD PTR _vflapmax$[ebp]
	jbe	SHORT $LN42@SetFlapsPl
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+836], 1
	jne	SHORT $LN42@SetFlapsPl

; 1672 : 			TEFClose();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?TEFClose@AirframeClass@@QAEXXZ		; AirframeClass::TEFClose

; 1673 : 			flapPos = 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+836], 2
$LN42@SetFlapsPl:

; 1674 : 
; 1675 : 		}
; 1676 : 
; 1677 : 		if (vcas < vflapmax && flapPos == 2){

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _vflapmax$[ebp]
	comiss	xmm0, DWORD PTR [ecx+1124]
	jbe	SHORT $LN41@SetFlapsPl
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+836], 2
	jne	SHORT $LN41@SetFlapsPl

; 1678 : 			tefPos = tefState;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+840]
	mov	DWORD PTR [eax+1580], edx

; 1679 : 			flapPos = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+836], 1
$LN41@SetFlapsPl:

; 1680 : 		}
; 1681 : 
; 1682 : 	}//End F15
; 1683 : 
; 1684 : 	//F-18A-D, F-18E/F TEF scheduling
; 1685 : 	if (auxaeroData->typeAC == 8 || auxaeroData->typeAC == 9 || auxaeroData->typeAC == 10)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+3880], 8
	je	SHORT $LN39@SetFlapsPl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+3880], 9
	je	SHORT $LN39@SetFlapsPl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax+3880], 10		; 0000000aH
	jne	$LN1@SetFlapsPl
$LN39@SetFlapsPl:

; 1686 : 	{
; 1687 : 		if (mach > 1.05)

	mov	ecx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+1144]
	comisd	xmm0, QWORD PTR __real@3ff0cccccccccccd
	jbe	SHORT $LN38@SetFlapsPl

; 1688 : 		{
; 1689 : 			tefPos = 0;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+1580], xmm0
	jmp	$LN1@SetFlapsPl
$LN38@SetFlapsPl:

; 1690 : 		}
; 1691 : 		else if (mach < 1.05f && mach >= 0.9f)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f866666
	comiss	xmm0, DWORD PTR [eax+1144]
	jbe	$LN36@SetFlapsPl
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1144]
	comiss	xmm0, DWORD PTR __real@3f666666
	jb	$LN36@SetFlapsPl

; 1692 : 		{
; 1693 : 			if (alpha > 0.0f && alpha <= 15.0f)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1152]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN35@SetFlapsPl
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41700000
	comiss	xmm0, DWORD PTR [eax+1152]
	jb	SHORT $LN35@SetFlapsPl

; 1694 : 			{
; 1695 : 				tefPos = min (alpha, 9);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41100000
	comiss	xmm0, DWORD PTR [ecx+1152]
	jbe	SHORT $LN49@SetFlapsPl
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1152]
	movss	DWORD PTR tv154[ebp], xmm0
	jmp	SHORT $LN50@SetFlapsPl
$LN49@SetFlapsPl:
	movss	xmm0, DWORD PTR __real@41100000
	movss	DWORD PTR tv154[ebp], xmm0
$LN50@SetFlapsPl:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv154[ebp]
	movss	DWORD PTR [eax+1580], xmm0

; 1696 : 			}
; 1697 : 			else

	jmp	SHORT $LN34@SetFlapsPl
$LN35@SetFlapsPl:

; 1698 : 			{
; 1699 : 				tefPos = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1580], xmm0
$LN34@SetFlapsPl:

; 1700 : 			}

	jmp	$LN1@SetFlapsPl
$LN36@SetFlapsPl:

; 1701 : 		}
; 1702 : 		else if (mach < 0.9f &&  mach >= 0.6f)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f666666
	comiss	xmm0, DWORD PTR [edx+1144]
	jbe	$LN32@SetFlapsPl
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1144]
	comiss	xmm0, DWORD PTR __real@3f19999a
	jb	$LN32@SetFlapsPl

; 1703 : 		{
; 1704 : 			if (alpha > 0.0f && alpha <= 17.0f)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1152]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN31@SetFlapsPl
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41880000
	comiss	xmm0, DWORD PTR [edx+1152]
	jb	SHORT $LN31@SetFlapsPl

; 1705 : 			{
; 1706 : 				tefPos = min (alpha, 17);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41880000
	comiss	xmm0, DWORD PTR [eax+1152]
	jbe	SHORT $LN51@SetFlapsPl
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1152]
	movss	DWORD PTR tv170[ebp], xmm0
	jmp	SHORT $LN52@SetFlapsPl
$LN51@SetFlapsPl:
	movss	xmm0, DWORD PTR __real@41880000
	movss	DWORD PTR tv170[ebp], xmm0
$LN52@SetFlapsPl:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv170[ebp]
	movss	DWORD PTR [edx+1580], xmm0

; 1707 : 			}
; 1708 : 			else

	jmp	SHORT $LN30@SetFlapsPl
$LN31@SetFlapsPl:

; 1709 : 			{
; 1710 : 				tefPos = 0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1580], xmm0
$LN30@SetFlapsPl:

; 1711 : 			}

	jmp	$LN1@SetFlapsPl
$LN32@SetFlapsPl:

; 1712 : 		
; 1713 : 		}
; 1714 : 		else if (mach < 0.6f && mach > 0.1 && flapPos <= 10)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f19999a
	comiss	xmm0, DWORD PTR [ecx+1144]
	jbe	$LN28@SetFlapsPl
	mov	edx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+1144]
	comisd	xmm0, QWORD PTR __real@3fb999999999999a
	jbe	$LN28@SetFlapsPl
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+836], 10			; 0000000aH
	jg	$LN28@SetFlapsPl

; 1715 : 		{
; 1716 : 			if (alpha > 0.0f && alpha <= 17.0f)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1152]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN27@SetFlapsPl
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41880000
	comiss	xmm0, DWORD PTR [edx+1152]
	jb	SHORT $LN27@SetFlapsPl

; 1717 : 			{
; 1718 : 				tefPos = min (alpha, 17);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41880000
	comiss	xmm0, DWORD PTR [eax+1152]
	jbe	SHORT $LN53@SetFlapsPl
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1152]
	movss	DWORD PTR tv189[ebp], xmm0
	jmp	SHORT $LN54@SetFlapsPl
$LN53@SetFlapsPl:
	movss	xmm0, DWORD PTR __real@41880000
	movss	DWORD PTR tv189[ebp], xmm0
$LN54@SetFlapsPl:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv189[ebp]
	movss	DWORD PTR [edx+1580], xmm0

; 1719 : 			}
; 1720 : 			else

	jmp	SHORT $LN26@SetFlapsPl
$LN27@SetFlapsPl:

; 1721 : 			{
; 1722 : 				tefPos = 0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1580], xmm0
$LN26@SetFlapsPl:

; 1723 : 			}

	jmp	$LN1@SetFlapsPl
$LN28@SetFlapsPl:

; 1724 : 		}
; 1725 : 		//this assumes half/full left on and auto is amber
; 1726 : 		//F18A-D
; 1727 : 		else if (auxaeroData->typeAC == 8 || auxaeroData->typeAC == 9)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+3880], 8
	je	SHORT $LN23@SetFlapsPl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+3880], 9
	jne	$LN24@SetFlapsPl
$LN23@SetFlapsPl:

; 1728 : 		{
; 1729 : 			if (mach < 0.6f && vcas > 250.f)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f19999a
	comiss	xmm0, DWORD PTR [edx+1144]
	jbe	$LN20@SetFlapsPl
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1124]
	comiss	xmm0, DWORD PTR __real@437a0000
	jbe	$LN20@SetFlapsPl

; 1730 : 			{
; 1731 : 				if (alpha > 0.0f && alpha <= 17.0f)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1152]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN21@SetFlapsPl
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41880000
	comiss	xmm0, DWORD PTR [edx+1152]
	jb	SHORT $LN21@SetFlapsPl

; 1732 : 				{
; 1733 : 					tefPos = min (alpha, 17);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41880000
	comiss	xmm0, DWORD PTR [eax+1152]
	jbe	SHORT $LN55@SetFlapsPl
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1152]
	movss	DWORD PTR tv211[ebp], xmm0
	jmp	SHORT $LN56@SetFlapsPl
$LN55@SetFlapsPl:
	movss	xmm0, DWORD PTR __real@41880000
	movss	DWORD PTR tv211[ebp], xmm0
$LN56@SetFlapsPl:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv211[ebp]
	movss	DWORD PTR [edx+1580], xmm0

; 1734 : 				}
; 1735 : 				else

	jmp	SHORT $LN20@SetFlapsPl
$LN21@SetFlapsPl:

; 1736 : 				{
; 1737 : 					tefPos = 0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1580], xmm0
$LN20@SetFlapsPl:

; 1738 : 				}
; 1739 : 			}
; 1740 : 
; 1741 : 			//Flap HALF Setting
; 1742 : 			if (!platform->OnGround())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+1088]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	jne	$LN19@SetFlapsPl

; 1743 : 			{
; 1744 : 				if (flapPos == 20 && vcas <250.0f)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+836], 20			; 00000014H
	jne	SHORT $LN18@SetFlapsPl
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@437a0000
	comiss	xmm0, DWORD PTR [edx+1124]
	jbe	SHORT $LN18@SetFlapsPl

; 1745 : 				{
; 1746 : 					tefPos = min (4500/vcas, 30);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@458ca000
	divss	xmm0, DWORD PTR [eax+1124]
	movss	xmm1, DWORD PTR __real@41f00000
	comiss	xmm1, xmm0
	jbe	SHORT $LN57@SetFlapsPl
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@458ca000
	divss	xmm0, DWORD PTR [ecx+1124]
	movss	DWORD PTR tv238[ebp], xmm0
	jmp	SHORT $LN58@SetFlapsPl
$LN57@SetFlapsPl:
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR tv238[ebp], xmm0
$LN58@SetFlapsPl:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR [edx+1580], xmm0
	jmp	SHORT $LN16@SetFlapsPl
$LN18@SetFlapsPl:

; 1747 : 				}
; 1748 : 				//Flap FULL Setting
; 1749 : 				else if (flapPos == 30 && vcas < 250.0f)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+836], 30			; 0000001eH
	jne	SHORT $LN16@SetFlapsPl
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@437a0000
	comiss	xmm0, DWORD PTR [ecx+1124]
	jbe	SHORT $LN16@SetFlapsPl

; 1750 : 				{
; 1751 : 					tefPos = min (6500/vcas, 45);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@45cb2000
	divss	xmm0, DWORD PTR [edx+1124]
	movss	xmm1, DWORD PTR __real@42340000
	comiss	xmm1, xmm0
	jbe	SHORT $LN59@SetFlapsPl
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@45cb2000
	divss	xmm0, DWORD PTR [eax+1124]
	movss	DWORD PTR tv251[ebp], xmm0
	jmp	SHORT $LN60@SetFlapsPl
$LN59@SetFlapsPl:
	movss	xmm0, DWORD PTR __real@42340000
	movss	DWORD PTR tv251[ebp], xmm0
$LN60@SetFlapsPl:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv251[ebp]
	movss	DWORD PTR [ecx+1580], xmm0
$LN16@SetFlapsPl:

; 1752 : 				}
; 1753 : 			}
; 1754 : 			else

	jmp	SHORT $LN13@SetFlapsPl
$LN19@SetFlapsPl:

; 1755 : 			{
; 1756 : 				if (flapPos == 20)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+836], 20			; 00000014H
	jne	SHORT $LN14@SetFlapsPl

; 1757 : 				{
; 1758 : 					tefPos = 30;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR [eax+1580], xmm0
$LN14@SetFlapsPl:

; 1759 : 				}
; 1760 : 				if (flapPos == 30)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+836], 30			; 0000001eH
	jne	SHORT $LN13@SetFlapsPl

; 1761 : 				{
; 1762 : 					tefPos = 45;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42340000
	movss	DWORD PTR [edx+1580], xmm0
$LN13@SetFlapsPl:

; 1763 : 				}
; 1764 : 			}

	jmp	$LN1@SetFlapsPl
$LN24@SetFlapsPl:

; 1765 : 		}
; 1766 : 
; 1767 : 		//F18E/F
; 1768 : 		else if (auxaeroData->typeAC == 10)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+3880], 10		; 0000000aH
	jne	$LN1@SetFlapsPl

; 1769 : 		{
; 1770 : 			if (mach < 0.6f && vcas > 240.f)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f19999a
	comiss	xmm0, DWORD PTR [edx+1144]
	jbe	$LN8@SetFlapsPl
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1124]
	comiss	xmm0, DWORD PTR __real@43700000
	jbe	$LN8@SetFlapsPl

; 1771 : 			{
; 1772 : 				if (alpha > 0.0f && alpha <= 17.0f)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1152]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN9@SetFlapsPl
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41880000
	comiss	xmm0, DWORD PTR [edx+1152]
	jb	SHORT $LN9@SetFlapsPl

; 1773 : 				{
; 1774 : 					tefPos = min (alpha, 17);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41880000
	comiss	xmm0, DWORD PTR [eax+1152]
	jbe	SHORT $LN61@SetFlapsPl
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1152]
	movss	DWORD PTR tv275[ebp], xmm0
	jmp	SHORT $LN62@SetFlapsPl
$LN61@SetFlapsPl:
	movss	xmm0, DWORD PTR __real@41880000
	movss	DWORD PTR tv275[ebp], xmm0
$LN62@SetFlapsPl:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv275[ebp]
	movss	DWORD PTR [edx+1580], xmm0

; 1775 : 				}
; 1776 : 				else

	jmp	SHORT $LN8@SetFlapsPl
$LN9@SetFlapsPl:

; 1777 : 				{
; 1778 : 					tefPos = 0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1580], xmm0
$LN8@SetFlapsPl:

; 1779 : 				}
; 1780 : 			}
; 1781 : 		
; 1782 : 
; 1783 : 			//Flap HALF Setting
; 1784 : 			if (!platform->OnGround())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+1088]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	jne	$LN7@SetFlapsPl

; 1785 : 			{
; 1786 : 				if (flapPos == 20 && vcas <240.0f)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+836], 20			; 00000014H
	jne	SHORT $LN6@SetFlapsPl
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43700000
	comiss	xmm0, DWORD PTR [edx+1124]
	jbe	SHORT $LN6@SetFlapsPl

; 1787 : 				{
; 1788 : 					tefPos = min (4500/vcas, 30);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@458ca000
	divss	xmm0, DWORD PTR [eax+1124]
	movss	xmm1, DWORD PTR __real@41f00000
	comiss	xmm1, xmm0
	jbe	SHORT $LN63@SetFlapsPl
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@458ca000
	divss	xmm0, DWORD PTR [ecx+1124]
	movss	DWORD PTR tv302[ebp], xmm0
	jmp	SHORT $LN64@SetFlapsPl
$LN63@SetFlapsPl:
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR tv302[ebp], xmm0
$LN64@SetFlapsPl:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv302[ebp]
	movss	DWORD PTR [edx+1580], xmm0
	jmp	SHORT $LN4@SetFlapsPl
$LN6@SetFlapsPl:

; 1789 : 				}
; 1790 : 				//Flap FULL Setting
; 1791 : 				else if (flapPos == 30 && vcas < 240.0f)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+836], 30			; 0000001eH
	jne	SHORT $LN4@SetFlapsPl
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43700000
	comiss	xmm0, DWORD PTR [ecx+1124]
	jbe	SHORT $LN4@SetFlapsPl

; 1792 : 				{
; 1793 : 					tefPos = min (6500/vcas, 40);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@45cb2000
	divss	xmm0, DWORD PTR [edx+1124]
	movss	xmm1, DWORD PTR __real@42200000
	comiss	xmm1, xmm0
	jbe	SHORT $LN65@SetFlapsPl
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@45cb2000
	divss	xmm0, DWORD PTR [eax+1124]
	movss	DWORD PTR tv315[ebp], xmm0
	jmp	SHORT $LN66@SetFlapsPl
$LN65@SetFlapsPl:
	movss	xmm0, DWORD PTR __real@42200000
	movss	DWORD PTR tv315[ebp], xmm0
$LN66@SetFlapsPl:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv315[ebp]
	movss	DWORD PTR [ecx+1580], xmm0
$LN4@SetFlapsPl:

; 1794 : 				}
; 1795 : 			}
; 1796 : 			else

	jmp	SHORT $LN1@SetFlapsPl
$LN7@SetFlapsPl:

; 1797 : 			{
; 1798 : 				if (flapPos == 20)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+836], 20			; 00000014H
	jne	SHORT $LN2@SetFlapsPl

; 1799 : 				{
; 1800 : 					tefPos = 30;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR [eax+1580], xmm0
$LN2@SetFlapsPl:

; 1801 : 				}
; 1802 : 				if (flapPos == 30)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+836], 30			; 0000001eH
	jne	SHORT $LN1@SetFlapsPl

; 1803 : 				{
; 1804 : 					tefPos = 40;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42200000
	movss	DWORD PTR [edx+1580], xmm0
$LN1@SetFlapsPl:

; 1805 : 				}
; 1806 : 			}
; 1807 : 		}
; 1808 : 	}//end F18
; 1809 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetFlapsPlayer@AirframeClass@@QAEXXZ ENDP		; AirframeClass::SetFlapsPlayer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
tv182 = -44						; size = 4
tv181 = -40						; size = 4
tv174 = -36						; size = 4
_vdiff$1 = -32						; size = 4
tv145 = -28						; size = 4
tv144 = -24						; size = 4
tv137 = -20						; size = 4
_vflapmax$ = -16					; size = 4
_vflapmin$ = -12					; size = 4
_stage$2 = -8						; size = 4
_this$ = -4						; size = 4
_islanding$ = 8						; size = 1
?SetFlaps@AirframeClass@@QAEX_N@Z PROC			; AirframeClass::SetFlaps
; _this$ = ecx

; 1606 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1607 : #if 0
; 1608 :     float clmax = Math.TwodInterp(mach, aoamax, aeroData->mach, aeroData->alpha,
; 1609 :                     aeroData->clift, aeroData->numMach,
; 1610 :                     aeroData->numAlpha, &curMachBreak, &curAlphaBreak) *
; 1611 :             aeroData->clFactor;
; 1612 :     float vstall = (float)sqrt(2.0 * weight / (rho * area * clmax));
; 1613 : #endif
; 1614 :     float vflapmin = auxaeroData->maxFlapVcas - auxaeroData->flapVcasRange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movss	xmm0, DWORD PTR [ecx+180]
	subss	xmm0, DWORD PTR [eax+184]
	movss	DWORD PTR _vflapmin$[ebp], xmm0

; 1615 :     float vflapmax = auxaeroData->maxFlapVcas;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [edx+180]
	movss	DWORD PTR _vflapmax$[ebp], xmm0

; 1616 : 
; 1617 :     if (auxaeroData->hasTef != AUX_LEFTEF_MANUAL)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+84], 1
	je	SHORT $LN11@SetFlaps

; 1618 : 	return;

	jmp	$LN12@SetFlaps
$LN11@SetFlaps:

; 1619 : 	
; 1620 : 
; 1621 : 
; 1622 :     if (islanding) { // we want to get some flaps down

	movzx	edx, BYTE PTR _islanding$[ebp]
	test	edx, edx
	je	$LN10@SetFlaps

; 1623 : 	if (vcas > vflapmax) { // no flaps above vflapmax

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1124]
	comiss	xmm0, DWORD PTR _vflapmax$[ebp]
	jbe	SHORT $LN9@SetFlaps

; 1624 : 	    TEFClose();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?TEFClose@AirframeClass@@QAEXXZ		; AirframeClass::TEFClose

; 1625 : 	    LEFClose();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFClose@AirframeClass@@QAEXXZ		; AirframeClass::LEFClose
	jmp	$LN5@SetFlaps
$LN9@SetFlaps:

; 1626 : 	}
; 1627 : 	else if (vcas < vflapmin) { // everything below vstall

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _vflapmin$[ebp]
	comiss	xmm0, DWORD PTR [ecx+1124]
	jbe	SHORT $LN7@SetFlaps

; 1628 : 	    TEFMax();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?TEFMax@AirframeClass@@QAEXXZ		; AirframeClass::TEFMax

; 1629 : 	    LEFMax();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFMax@AirframeClass@@QAEXXZ		; AirframeClass::LEFMax

; 1630 : 	}
; 1631 : 	else { // interpolate

	jmp	$LN5@SetFlaps
$LN7@SetFlaps:

; 1632 : 	    float vdiff = (vcas - vflapmin) / auxaeroData->flapVcasRange;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1124]
	subss	xmm0, DWORD PTR _vflapmin$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	divss	xmm0, DWORD PTR [ecx+184]
	movss	DWORD PTR _vdiff$1[ebp], xmm0

; 1633 : 	    int stage = static_cast<int>(auxaeroData->tefNStages - vdiff * auxaeroData->tefNStages - 1);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cvtsi2ss xmm0, DWORD PTR [eax+108]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cvtsi2ss xmm1, DWORD PTR [edx+108]
	mulss	xmm1, DWORD PTR _vdiff$1[ebp]
	subss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@3f800000
	cvttss2si eax, xmm0
	mov	DWORD PTR _stage$2[ebp], eax

; 1634 : 	    stage = max(0, min(stage, auxaeroData->tefNStages));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _stage$2[ebp]
	cmp	eax, DWORD PTR [edx+108]
	jge	SHORT $LN14@SetFlaps
	mov	ecx, DWORD PTR _stage$2[ebp]
	mov	DWORD PTR tv137[ebp], ecx
	jmp	SHORT $LN15@SetFlaps
$LN14@SetFlaps:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR tv137[ebp], ecx
$LN15@SetFlaps:
	cmp	DWORD PTR tv137[ebp], 0
	jge	SHORT $LN18@SetFlaps
	mov	DWORD PTR tv145[ebp], 0
	jmp	SHORT $LN19@SetFlaps
$LN18@SetFlaps:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _stage$2[ebp]
	cmp	ecx, DWORD PTR [eax+108]
	jge	SHORT $LN16@SetFlaps
	mov	edx, DWORD PTR _stage$2[ebp]
	mov	DWORD PTR tv144[ebp], edx
	jmp	SHORT $LN17@SetFlaps
$LN16@SetFlaps:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR tv144[ebp], edx
$LN17@SetFlaps:
	mov	eax, DWORD PTR tv144[ebp]
	mov	DWORD PTR tv145[ebp], eax
$LN19@SetFlaps:
	mov	ecx, DWORD PTR tv145[ebp]
	mov	DWORD PTR _stage$2[ebp], ecx

; 1635 : 	    tefPos = stage * auxaeroData->tefMaxAngle / auxaeroData->tefNStages;

	cvtsi2ss xmm0, DWORD PTR _stage$2[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [eax+100]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cvtsi2ss xmm1, DWORD PTR [edx+108]
	divss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1580], xmm0

; 1636 : 	    if (auxaeroData->hasLef == AUX_LEFTEF_MANUAL) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+80], 1
	jne	$LN5@SetFlaps

; 1637 : 			stage = static_cast<int>(auxaeroData->lefNStages - (vdiff * auxaeroData->lefNStages) - 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2ss xmm0, DWORD PTR [ecx+112]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cvtsi2ss xmm1, DWORD PTR [eax+112]
	mulss	xmm1, DWORD PTR _vdiff$1[ebp]
	subss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@3f800000
	cvttss2si ecx, xmm0
	mov	DWORD PTR _stage$2[ebp], ecx

; 1638 : 			stage = max(0,min(stage, auxaeroData->lefNStages));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _stage$2[ebp]
	cmp	ecx, DWORD PTR [eax+112]
	jge	SHORT $LN20@SetFlaps
	mov	edx, DWORD PTR _stage$2[ebp]
	mov	DWORD PTR tv174[ebp], edx
	jmp	SHORT $LN21@SetFlaps
$LN20@SetFlaps:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR tv174[ebp], edx
$LN21@SetFlaps:
	cmp	DWORD PTR tv174[ebp], 0
	jge	SHORT $LN24@SetFlaps
	mov	DWORD PTR tv182[ebp], 0
	jmp	SHORT $LN25@SetFlaps
$LN24@SetFlaps:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _stage$2[ebp]
	cmp	edx, DWORD PTR [ecx+112]
	jge	SHORT $LN22@SetFlaps
	mov	eax, DWORD PTR _stage$2[ebp]
	mov	DWORD PTR tv181[ebp], eax
	jmp	SHORT $LN23@SetFlaps
$LN22@SetFlaps:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+112]
	mov	DWORD PTR tv181[ebp], eax
$LN23@SetFlaps:
	mov	ecx, DWORD PTR tv181[ebp]
	mov	DWORD PTR tv182[ebp], ecx
$LN25@SetFlaps:
	mov	edx, DWORD PTR tv182[ebp]
	mov	DWORD PTR _stage$2[ebp], edx

; 1639 : 			lefPos = stage * auxaeroData->lefMaxAngle / auxaeroData->lefNStages;

	cvtsi2ss xmm0, DWORD PTR _stage$2[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx+104]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cvtsi2ss xmm1, DWORD PTR [eax+112]
	divss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1576], xmm0
$LN5@SetFlaps:

; 1640 : 	    }
; 1641 : 	}
; 1642 :     }
; 1643 : 	//TJL 11/24/03 This is the code that gets called when aircraft takeoff and fly waypoints
; 1644 : 	// Going to change the code to raise flaps at 200 knots.
; 1645 :     else {

	jmp	SHORT $LN1@SetFlaps
$LN10@SetFlaps:

; 1646 : 	//if (vcas > vflapmax - (vflapmax - vflapmin)/2 )
; 1647 : 	if (vcas > 200 || vcas > vflapmax - (vflapmax - vflapmin)/2)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1124]
	comiss	xmm0, DWORD PTR __real@43480000
	ja	SHORT $LN2@SetFlaps
	movss	xmm0, DWORD PTR _vflapmax$[ebp]
	subss	xmm0, DWORD PTR _vflapmin$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR _vflapmax$[ebp]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1124]
	comiss	xmm0, xmm1
	jbe	SHORT $LN3@SetFlaps
$LN2@SetFlaps:

; 1648 : 		{
; 1649 : 	    TEFClose();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?TEFClose@AirframeClass@@QAEXXZ		; AirframeClass::TEFClose

; 1650 : 	    LEFClose();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFClose@AirframeClass@@QAEXXZ		; AirframeClass::LEFClose

; 1651 : 	}
; 1652 : 	else {

	jmp	SHORT $LN1@SetFlaps
$LN3@SetFlaps:

; 1653 : 	    TEFTakeoff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?TEFTakeoff@AirframeClass@@QAEXXZ	; AirframeClass::TEFTakeoff

; 1654 : 	    LEFTakeoff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFTakeoff@AirframeClass@@QAEXXZ	; AirframeClass::LEFTakeoff
$LN1@SetFlaps:
$LN12@SetFlaps:

; 1655 : 	}
; 1656 :     }
; 1657 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetFlaps@AirframeClass@@QAEX_N@Z ENDP			; AirframeClass::SetFlaps
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LEFTakeoff@AirframeClass@@QAEXXZ PROC			; AirframeClass::LEFTakeoff
; _this$ = ecx

; 1575 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1576 :     lefPos = auxaeroData->lefGround;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+168]
	mov	DWORD PTR [edx+1576], eax

; 1577 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?LEFTakeoff@AirframeClass@@QAEXXZ ENDP			; AirframeClass::LEFTakeoff
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LEFDec@AirframeClass@@QAEXXZ PROC			; AirframeClass::LEFDec
; _this$ = ecx

; 1569 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1570 :     lefPos -= auxaeroData->lefMaxAngle /auxaeroData->lefNStages;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cvtsi2ss xmm0, DWORD PTR [eax+112]
	movss	xmm1, DWORD PTR [ecx+104]
	divss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1576]
	subss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1576], xmm0

; 1571 :     if (lefPos < 0)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+1576]
	jbe	SHORT $LN1@LEFDec

; 1572 : 	lefPos = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1576], xmm0
$LN1@LEFDec:

; 1573 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?LEFDec@AirframeClass@@QAEXXZ ENDP			; AirframeClass::LEFDec
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LEFInc@AirframeClass@@QAEXXZ PROC			; AirframeClass::LEFInc
; _this$ = ecx

; 1563 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1564 :     lefPos += auxaeroData->lefMaxAngle /auxaeroData->lefNStages;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cvtsi2ss xmm0, DWORD PTR [eax+112]
	movss	xmm1, DWORD PTR [ecx+104]
	divss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm1, DWORD PTR [ecx+1576]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1576], xmm1

; 1565 :     if (lefPos > auxaeroData->lefMaxAngle)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1576]
	comiss	xmm0, DWORD PTR [ecx+104]
	jbe	SHORT $LN1@LEFInc

; 1566 : 	lefPos = auxaeroData->lefMaxAngle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+104]
	mov	DWORD PTR [edx+1576], eax
$LN1@LEFInc:

; 1567 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?LEFInc@AirframeClass@@QAEXXZ ENDP			; AirframeClass::LEFInc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LEFMax@AirframeClass@@QAEXXZ PROC			; AirframeClass::LEFMax
; _this$ = ecx

; 1559 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1560 :     lefPos = auxaeroData->lefMaxAngle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+104]
	mov	DWORD PTR [edx+1576], eax

; 1561 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?LEFMax@AirframeClass@@QAEXXZ ENDP			; AirframeClass::LEFMax
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LEFClose@AirframeClass@@QAEXXZ PROC			; AirframeClass::LEFClose
; _this$ = ecx

; 1555 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1556 :     lefPos = 0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1576], xmm0

; 1557 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?LEFClose@AirframeClass@@QAEXXZ ENDP			; AirframeClass::LEFClose
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TEFLEFStage3@AirframeClass@@QAEXXZ PROC		; AirframeClass::TEFLEFStage3
; _this$ = ecx

; 1600 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1601 :     TEFMax();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?TEFMax@AirframeClass@@QAEXXZ		; AirframeClass::TEFMax

; 1602 :     LEFMax();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFMax@AirframeClass@@QAEXXZ		; AirframeClass::LEFMax

; 1603 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TEFLEFStage3@AirframeClass@@QAEXXZ ENDP		; AirframeClass::TEFLEFStage3
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
tv72 = -12						; size = 4
_pos$ = -8						; size = 4
_this$ = -4						; size = 4
?TEFLEFStage2@AirframeClass@@QAEXXZ PROC		; AirframeClass::TEFLEFStage2
; _this$ = ecx

; 1588 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1589 : 	int pos = auxaeroData->tefNStages/2 + (auxaeroData->tefNStages%2) ? 1 : 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+108]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx+108]
	and	edx, -2147483647			; 80000001H
	jns	SHORT $LN7@TEFLEFStag
	dec	edx
	or	edx, -2					; fffffffeH
	inc	edx
$LN7@TEFLEFStag:
	add	eax, edx
	je	SHORT $LN5@TEFLEFStag
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN6@TEFLEFStag
$LN5@TEFLEFStag:
	mov	DWORD PTR tv72[ebp], 0
$LN6@TEFLEFStag:
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 1590 : 	if (auxaeroData->tefNStages > 1){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+108], 1
	jle	SHORT $LN2@TEFLEFStag

; 1591 :         tefPos = pos * auxaeroData->tefMaxAngle / auxaeroData->tefNStages;

	cvtsi2ss xmm0, DWORD PTR _pos$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx+100]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cvtsi2ss xmm1, DWORD PTR [eax+108]
	divss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1580], xmm0
$LN2@TEFLEFStag:

; 1592 : 	}
; 1593 :     pos = auxaeroData->lefNStages/2;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [eax+112]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _pos$[ebp], eax

; 1594 : 	if (auxaeroData->lefNStages > 1){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+112], 1
	jle	SHORT $LN1@TEFLEFStag

; 1595 :         lefPos = pos * auxaeroData->lefMaxAngle /auxaeroData->lefNStages;

	cvtsi2ss xmm0, DWORD PTR _pos$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx+104]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cvtsi2ss xmm1, DWORD PTR [eax+112]
	divss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1576], xmm0
$LN1@TEFLEFStag:

; 1596 : 	}
; 1597 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TEFLEFStage2@AirframeClass@@QAEXXZ ENDP		; AirframeClass::TEFLEFStage2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TEFLEFStage1@AirframeClass@@QAEXXZ PROC		; AirframeClass::TEFLEFStage1
; _this$ = ecx

; 1580 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1581 :     if (auxaeroData->tefNStages > 2)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+108], 2
	jle	SHORT $LN2@TEFLEFStag

; 1582 :         tefPos = auxaeroData->tefMaxAngle /auxaeroData->tefNStages;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cvtsi2ss xmm0, DWORD PTR [edx+108]
	movss	xmm1, DWORD PTR [eax+100]
	divss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1580], xmm1
$LN2@TEFLEFStag:

; 1583 :     if (auxaeroData->lefNStages > 2)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+112], 2
	jle	SHORT $LN1@TEFLEFStag

; 1584 :         lefPos = auxaeroData->lefMaxAngle /auxaeroData->lefNStages;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cvtsi2ss xmm0, DWORD PTR [eax+112]
	movss	xmm1, DWORD PTR [ecx+104]
	divss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1576], xmm1
$LN1@TEFLEFStag:

; 1585 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TEFLEFStage1@AirframeClass@@QAEXXZ ENDP		; AirframeClass::TEFLEFStage1
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TEFTakeoff@AirframeClass@@QAEXXZ PROC			; AirframeClass::TEFTakeoff
; _this$ = ecx

; 1549 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1550 :     tefPos = auxaeroData->tefTakeOff;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+120]
	mov	DWORD PTR [edx+1580], eax

; 1551 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TEFTakeoff@AirframeClass@@QAEXXZ ENDP			; AirframeClass::TEFTakeoff
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TEFDec@AirframeClass@@QAEXXZ PROC			; AirframeClass::TEFDec
; _this$ = ecx

; 1541 : void AirframeClass::TEFDec(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1542 :     tefPos -= auxaeroData->tefMaxAngle /auxaeroData->tefNStages;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cvtsi2ss xmm0, DWORD PTR [eax+108]
	movss	xmm1, DWORD PTR [ecx+100]
	divss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1580]
	subss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1580], xmm0

; 1543 : 	if (tefPos < 0){

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+1580]
	jbe	SHORT $LN1@TEFDec

; 1544 : 		tefPos = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1580], xmm0
$LN1@TEFDec:

; 1545 : 	}
; 1546 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TEFDec@AirframeClass@@QAEXXZ ENDP			; AirframeClass::TEFDec
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TEFInc@AirframeClass@@QAEXXZ PROC			; AirframeClass::TEFInc
; _this$ = ecx

; 1535 : void AirframeClass::TEFInc(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1536 :     tefPos += auxaeroData->tefMaxAngle /auxaeroData->tefNStages;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cvtsi2ss xmm0, DWORD PTR [eax+108]
	movss	xmm1, DWORD PTR [ecx+100]
	divss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm1, DWORD PTR [ecx+1580]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1580], xmm1

; 1537 : 	if (tefPos > auxaeroData->tefMaxAngle){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1580]
	comiss	xmm0, DWORD PTR [ecx+100]
	jbe	SHORT $LN1@TEFInc

; 1538 : 		tefPos = auxaeroData->tefMaxAngle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+100]
	mov	DWORD PTR [edx+1580], eax
$LN1@TEFInc:

; 1539 : 	}
; 1540 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TEFInc@AirframeClass@@QAEXXZ ENDP			; AirframeClass::TEFInc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TEFMax@AirframeClass@@QAEXXZ PROC			; AirframeClass::TEFMax
; _this$ = ecx

; 1531 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1532 :     tefPos = auxaeroData->tefMaxAngle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+100]
	mov	DWORD PTR [edx+1580], eax

; 1533 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TEFMax@AirframeClass@@QAEXXZ ENDP			; AirframeClass::TEFMax
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TEFClose@AirframeClass@@QAEXXZ PROC			; AirframeClass::TEFClose
; _this$ = ecx

; 1526 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1527 :     tefPos = 0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1580], xmm0

; 1528 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TEFClose@AirframeClass@@QAEXXZ ENDP			; AirframeClass::TEFClose
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
tv1247 = -204						; size = 8
tv1052 = -196						; size = 8
tv1206 = -188						; size = 8
tv1171 = -180						; size = 8
tv1005 = -172						; size = 8
tv958 = -164						; size = 4
tv861 = -160						; size = 4
tv1345 = -156						; size = 4
tv909 = -152						; size = 4
tv1347 = -148						; size = 4
tv769 = -144						; size = 4
tv923 = -140						; size = 4
tv1193 = -136						; size = 4
tv875 = -132						; size = 4
tv1156 = -128						; size = 4
tv847 = -124						; size = 4
tv1144 = -120						; size = 4
tv948 = -116						; size = 4
tv1134 = -112						; size = 4
tv937 = -108						; size = 4
tv1116 = -104						; size = 4
tv757 = -100						; size = 4
tv1104 = -96						; size = 4
tv1277 = -92						; size = 4
tv1094 = -88						; size = 4
tv897 = -84						; size = 4
tv1085 = -80						; size = 4
tv868 = -76						; size = 4
tv1074 = -72						; size = 4
tv854 = -68						; size = 4
tv1034 = -64						; size = 4
tv781 = -60						; size = 4
tv1026 = -56						; size = 4
tv1279 = -52						; size = 4
tv174 = -48						; size = 4
tv141 = -44						; size = 4
tv1243 = -40						; size = 4
tv1001 = -36						; size = 4
tv1202 = -32						; size = 4
tv1048 = -28						; size = 4
tv1167 = -24						; size = 4
tv564 = -20						; size = 4
tv525 = -16						; size = 4
_Trig$ = -12						; size = 8
_this$ = -4						; size = 4
?SetStallConditions@AirframeClass@@AAEXXZ PROC		; AirframeClass::SetStallConditions
; _this$ = ecx

; 835  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	mov	DWORD PTR _this$[ebp], ecx

; 836  : 	mlTrig Trig;
; 837  : 
; 838  : #if 0
; 839  : 	static count = 0;
; 840  : 	//if(!count)
; 841  : 		//MonoPrint("P*(Y+R): %f  P+R+Y/2: %f  Damp: %f  Alpha: %f\n  ",avgPdelta*(avgRdelta + avgYdelta),avgPdelta+avgRdelta+avgYdelta/2.0F,zp01,alpha);
; 842  : 
; 843  : 	count++;
; 844  : 	count %= 1;
; 845  : #endif
; 846  : 	//avgPdelta = (fabs(fabs(pstick) - pshape1)+ fabs(pshape1 - pshape2))/2.0f;
; 847  : 	//avgRdelta = (fabs(fabs(rstick) - rshape1)+ fabs(rshape1 - rshape2))/2.0f;
; 848  : 	//avgYdelta = (fabs(fabs(ypedal) - yshape1)+ fabs(yshape1 - yshape2))/2.0f;
; 849  : 
; 850  : 	avgPdelta = (float)fabs(fabs(pstick) - pshape1);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1500]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv757[ebp]
	movss	xmm0, DWORD PTR tv757[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+692]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+700]

; 851  : 	avgRdelta = (float)fabs(fabs(rstick) - rshape1);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1504]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv769[ebp]
	movss	xmm0, DWORD PTR tv769[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+688]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+704]

; 852  : 	avgYdelta = (float)fabs(fabs(ypedal) - yshape1);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1508]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv781[ebp]
	movss	xmm0, DWORD PTR tv781[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+696]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+708]

; 853  : 
; 854  : 	//pshape2 = pshape1;
; 855  : 	pshape1 = (float)fabs(pstick);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1500]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+692]

; 856  : 	
; 857  : 	//rshape2 = rshape1;
; 858  : 	rshape1 = (float)fabs(rstick);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1504]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+688]

; 859  : 	
; 860  : 	//yshape2 = yshape1;
; 861  : 	yshape1 = (float)fabs(ypedal);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1508]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+696]

; 862  : 	
; 863  :    if(platform->IsF16() &&
; 864  :       platform->AutopilotType() == AircraftClass::APOff)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?IsF16@AircraftClass@@QAEHXZ		; AircraftClass::IsF16
	test	eax, eax
	je	$LN1@SetStallCo
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
	cmp	eax, 4
	jne	$LN1@SetStallCo

; 865  : 	{		
; 866  : 		switch(stallMode)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1248]
	mov	DWORD PTR tv141[ebp], eax
	cmp	DWORD PTR tv141[ebp], 5
	ja	$LN43@SetStallCo
	mov	ecx, DWORD PTR tv141[ebp]
	jmp	DWORD PTR $LN54@SetStallCo[ecx*4]
$LN42@SetStallCo:

; 867  : 		{
; 868  : 		case None:
; 869  : 			
; 870  : 			zpdamp *= 0.99F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1492]
	mulss	xmm0, DWORD PTR __real@3f7d70a4
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1492], xmm0

; 871  : 			if((avgPdelta * (0.05F + avgRdelta + avgYdelta))/vcas > 0.0005F)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3d4ccccd
	addss	xmm0, DWORD PTR [ecx+704]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+708]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+700]
	mov	ecx, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [ecx+1124]
	comiss	xmm0, DWORD PTR __real@3a03126f
	jbe	$LN41@SetStallCo

; 872  : 			{
; 873  : 				zpdamp = (avgPdelta * (0.05F + avgRdelta + avgYdelta))/vcas * 5.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3d4ccccd
	addss	xmm0, DWORD PTR [edx+704]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+708]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+700]
	mov	edx, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [edx+1124]
	mulss	xmm0, DWORD PTR __real@40a00000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1492], xmm0

; 874  : 				zpdamp = min(zpdamp, 0.2F);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3e4ccccd
	comiss	xmm0, DWORD PTR [ecx+1492]
	jbe	SHORT $LN48@SetStallCo
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1492]
	movss	DWORD PTR tv174[ebp], xmm0
	jmp	SHORT $LN49@SetStallCo
$LN48@SetStallCo:
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR tv174[ebp], xmm0
$LN49@SetStallCo:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv174[ebp]
	movss	DWORD PTR [eax+1492], xmm0
$LN41@SetStallCo:

; 875  : 			}
; 876  : 						
; 877  : 			if(	!IsSet(Simplified)	&& 
; 878  : 				(	(!platform->OnGround () && vcas < 180.0f) ||
; 879  : 					( fabs(pshape) > 0.85F  && fabs(rshape) > 0.85F )	|| 
; 880  : 					( fabs(alpha)  > 18.0F)	||//&& IsSet(LowSpdHorn) )		||
; 881  : 					( fabs(pshape) > 0.6F	&& fabs(rshape) > 0.6F && IsSet(LowSpdHorn) ) ) )

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN36@SetStallCo
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+1088]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	jne	SHORT $LN38@SetStallCo
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43340000
	comiss	xmm0, DWORD PTR [ecx+1124]
	ja	$LN39@SetStallCo
$LN38@SetStallCo:
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+656]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv847[ebp]
	movss	xmm0, DWORD PTR tv847[ebp]
	comiss	xmm0, DWORD PTR __real@3f59999a
	jbe	SHORT $LN37@SetStallCo
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+660]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv854[ebp]
	movss	xmm0, DWORD PTR tv854[ebp]
	comiss	xmm0, DWORD PTR __real@3f59999a
	ja	$LN39@SetStallCo
$LN37@SetStallCo:
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1152]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv861[ebp]
	movss	xmm0, DWORD PTR tv861[ebp]
	comiss	xmm0, DWORD PTR __real@41900000
	ja	SHORT $LN39@SetStallCo
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+656]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv868[ebp]
	movss	xmm0, DWORD PTR tv868[ebp]
	comiss	xmm0, DWORD PTR __real@3f19999a
	jbe	$LN36@SetStallCo
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+660]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv875[ebp]
	movss	xmm0, DWORD PTR tv875[ebp]
	comiss	xmm0, DWORD PTR __real@3f19999a
	jbe	$LN36@SetStallCo
	push	524288					; 00080000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN36@SetStallCo
$LN39@SetStallCo:

; 882  : 			{
; 883  : 				loadingFraction = weight/emptyWeight;//me123

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+44]
	divss	xmm0, DWORD PTR [edx+52]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1228], xmm0

; 884  : 				if(	(!platform->OnGround () && vcas < 60.0f ||
; 885  : 					 !platform->OnGround () && fabs(alpha)  > 18.0F &&
; 886  : 					  vcas < 60.0f + 
; 887  : 					  60*(loadingFraction - 1.3F) + 
; 888  : 					  10*fabs(assymetry/weight)*10.0F) ||
; 889  : 
; 890  : 					alpha > 31.0F  - 9*(loadingFraction - 1.3F) - //me123 addet 9
; 891  : 								//me123 bulshit IsSet(LowSpdHorn)*3.0F 
; 892  : 								//me123 - IsSet(CATLimiterIII)*5.0F           
; 893  : 								- fabs(assymetry/weight)*10.0F		||// 10 from 5 me123
; 894  : 					alpha < -14.0F + (loadingFraction - 1.3F) +
; 895  : 								IsSet(LowSpdHorn)*3.0F + fabs(assymetry/weight)*5.0F )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+1088]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	jne	SHORT $LN34@SetStallCo
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42700000
	comiss	xmm0, DWORD PTR [ecx+1124]
	ja	$LN35@SetStallCo
$LN34@SetStallCo:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	jne	$LN33@SetStallCo
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1152]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv897[ebp]
	movss	xmm0, DWORD PTR tv897[ebp]
	comiss	xmm0, DWORD PTR __real@41900000
	jbe	$LN33@SetStallCo
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1228]
	subss	xmm0, DWORD PTR __real@3fa66666
	mulss	xmm0, DWORD PTR __real@42700000
	addss	xmm0, DWORD PTR __real@42700000
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+1232]
	divss	xmm1, DWORD PTR [ecx+44]
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv1277[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv909[ebp]
	movss	xmm0, DWORD PTR tv909[ebp]
	mulss	xmm0, DWORD PTR __real@41200000
	mulss	xmm0, DWORD PTR __real@41200000
	movss	xmm1, DWORD PTR tv1277[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	comiss	xmm1, DWORD PTR [edx+1124]
	ja	$LN35@SetStallCo
$LN33@SetStallCo:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1228]
	subss	xmm0, DWORD PTR __real@3fa66666
	mulss	xmm0, DWORD PTR __real@41100000
	movss	xmm1, DWORD PTR __real@41f80000
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1232]
	divss	xmm0, DWORD PTR [edx+44]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	DWORD PTR tv1279[ebp], xmm1
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv923[ebp]
	movss	xmm0, DWORD PTR tv923[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@41200000
	movss	xmm1, DWORD PTR tv1279[ebp]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1152]
	comiss	xmm0, xmm1
	ja	$LN35@SetStallCo
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1228]
	subss	xmm0, DWORD PTR __real@3fa66666
	addss	xmm0, DWORD PTR __real@c1600000
	push	524288					; 00080000H
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1345[ebp], xmm0
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@40400000
	movss	xmm1, DWORD PTR tv1345[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1232]
	divss	xmm0, DWORD PTR [eax+44]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	DWORD PTR tv1347[ebp], xmm1
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv937[ebp]
	movss	xmm0, DWORD PTR tv937[ebp]
	mulss	xmm0, DWORD PTR __real@40a00000
	movss	xmm1, DWORD PTR tv1347[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	comiss	xmm1, DWORD PTR [ecx+1152]
	jbe	$LN36@SetStallCo
$LN35@SetStallCo:

; 896  : 				{
; 897  : 					
; 898  : 					stallMode = EnteringDeepStall;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1248], 3

; 899  : 					if(alpha < 0.0F)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+1152]
	jbe	SHORT $LN32@SetStallCo

; 900  : 						pitch = (float)fabs(platform->platformAngles.singam) * platform->platformAngles.cosphi*qbar/-10.0F*DTR;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	push	ecx
	movss	xmm0, DWORD PTR [edx+364]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv948[ebp]
	movss	xmm0, DWORD PTR tv948[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mulss	xmm0, DWORD PTR [ecx+400]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+644]
	divss	xmm0, DWORD PTR __real@c1200000
	mulss	xmm0, DWORD PTR __real@3c8efa34
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1312], xmm0

; 901  : 					else

	jmp	SHORT $LN31@SetStallCo
$LN32@SetStallCo:

; 902  : 						pitch = (float)fabs(platform->platformAngles.singam) * platform->platformAngles.cosphi*qbar/-30.0F*DTR;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	push	ecx
	movss	xmm0, DWORD PTR [edx+364]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv958[ebp]
	movss	xmm0, DWORD PTR tv958[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mulss	xmm0, DWORD PTR [ecx+400]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+644]
	divss	xmm0, DWORD PTR __real@c1f00000
	mulss	xmm0, DWORD PTR __real@3c8efa34
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1312], xmm0
$LN31@SetStallCo:

; 903  : 					//slice = -r*20.0F + (assymetry/weight)*0.005F;		
; 904  : 					if(platform->platformAngles.sinmu > 0.0F)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR [edx+380]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN30@SetStallCo

; 905  : 						stallMagnitude = 10.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [eax+1220], xmm0

; 906  : 					else

	jmp	SHORT $LN29@SetStallCo
$LN30@SetStallCo:

; 907  : 						stallMagnitude = 5.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR [ecx+1220], xmm0
$LN29@SetStallCo:

; 908  : 					stallMagnitude += (1.0f - rand()/(float)RAND_MAX * 2.0f) * 5.0f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@40a00000
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm1, DWORD PTR [edx+1220]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1220], xmm1

; 909  : 					stallMagnitude *= loadingFraction;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1220]
	mulss	xmm0, DWORD PTR [edx+1228]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1220], xmm0

; 910  : 					if(platform->platformAngles.cosgam * platform->platformAngles.sinmu < 0.0F)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR [edx+368]
	mulss	xmm0, DWORD PTR [ecx+380]
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN28@SetStallCo

; 911  : 						slice -= stallMagnitude *0.02F* DTR;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1220]
	mulss	xmm0, DWORD PTR __real@3ca3d70a
	mulss	xmm0, DWORD PTR __real@3c8efa34
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+1308]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1308], xmm1

; 912  : 					else

	jmp	SHORT $LN27@SetStallCo
$LN28@SetStallCo:

; 913  : 						slice += stallMagnitude *0.02F* DTR;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1220]
	mulss	xmm0, DWORD PTR __real@3ca3d70a
	mulss	xmm0, DWORD PTR __real@3c8efa34
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+1308]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1308], xmm0
$LN27@SetStallCo:

; 914  : 					slice += (assymetry/weight)*0.05F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1232]
	divss	xmm0, DWORD PTR [eax+44]
	mulss	xmm0, DWORD PTR __real@3d4ccccd
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+1308]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1308], xmm0

; 915  : 					desiredMagnitude = stallMagnitude;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1220]
	mov	DWORD PTR [eax+1224], edx

; 916  : 
; 917  : 					mlSinCos(&Trig, vuxGameTime/(1200.0f/loadingFraction));

	mov	eax, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	mov	DWORD PTR tv1001[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv1001[ebp]
	mov	ecx, DWORD PTR tv1001[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv1005[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv1005[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@44960000
	divss	xmm1, DWORD PTR [edx+1228]
	divss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _Trig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 918  : 					oscillationTimer = Trig.sin;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Trig$[ebp]
	movss	DWORD PTR [ecx+712], xmm0

; 919  : 					oscillationSlope = Trig.cos;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Trig$[ebp+4]
	movss	DWORD PTR [edx+716], xmm0

; 920  : 
; 921  : 					oldp02[5] = 0.0F;

	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax+308], xmm0
$LN36@SetStallCo:

; 922  : 				}
; 923  : 			}
; 924  : 			break;

	jmp	$LN43@SetStallCo

; 925  : 
; 926  : 		case FlatSpin:
; 927  : 			//you're screwed
; 928  : 			break;

	jmp	$LN43@SetStallCo
$LN25@SetStallCo:

; 929  : 
; 930  : 		case Spinning:
; 931  : 			if( fabs(slice) > 1.0F)

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1308]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1026[ebp]
	movss	xmm0, DWORD PTR tv1026[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN24@SetStallCo

; 932  : 			{
; 933  : 				stallMode = FlatSpin;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1248], 6

; 934  : 				SetFlag(EngineOff);

	push	32768					; 00008000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag

; 935  : 				SetFlag(EngineOff2);//TJL 01/22/04 multi-engine

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag
	jmp	$LN20@SetStallCo
$LN24@SetStallCo:

; 936  : 			}
; 937  : 			else if( fabs(slice) < 0.25F)

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1308]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1034[ebp]
	movss	xmm0, DWORD PTR __real@3e800000
	comiss	xmm0, DWORD PTR tv1034[ebp]
	jbe	SHORT $LN20@SetStallCo

; 938  : 			{
; 939  : 				stallMode = DeepStall;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1248], 4

; 940  : 				if( alpha > 0.0f)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1152]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN21@SetStallCo

; 941  : 					oldp02[5] = alpha - 60.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1152]
	subss	xmm0, DWORD PTR __real@42700000
	mov	edx, 4
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+edx+308], xmm0

; 942  : 				else

	jmp	SHORT $LN20@SetStallCo
$LN21@SetStallCo:

; 943  : 					oldp02[5] = alpha + 40.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1152]
	addss	xmm0, DWORD PTR __real@42200000
	mov	edx, 4
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+edx+308], xmm0
$LN20@SetStallCo:

; 944  : 			}
; 945  : 			mlSinCos(&Trig, vuxGameTime/(1200.0f/loadingFraction));

	mov	ecx, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	mov	DWORD PTR tv1048[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv1048[ebp]
	mov	edx, DWORD PTR tv1048[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv1052[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv1052[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@44960000
	divss	xmm1, DWORD PTR [eax+1228]
	divss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _Trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 946  : 			oscillationTimer = Trig.sin;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Trig$[ebp]
	movss	DWORD PTR [edx+712], xmm0

; 947  : 			oscillationSlope = Trig.cos;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Trig$[ebp+4]
	movss	DWORD PTR [eax+716], xmm0

; 948  : 			break;

	jmp	$LN43@SetStallCo
$LN19@SetStallCo:

; 949  : 
; 950  : 		case EnteringDeepStall:
; 951  : 			if(platform->platformAngles.sinthe < -0.766044F && fabs(alpha * (rand()/(float)RAND_MAX + platform->platformAngles.cosphi)) < 15.0F)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR __real@bf441b76
	comiss	xmm0, DWORD PTR [edx+388]
	jbe	SHORT $LN18@SetStallCo
	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	addss	xmm0, DWORD PTR [ecx+400]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+1152]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1074[ebp]
	movss	xmm0, DWORD PTR __real@41700000
	comiss	xmm0, DWORD PTR tv1074[ebp]
	jbe	SHORT $LN18@SetStallCo

; 952  : 			{
; 953  : 				stallMode = Recovering;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1248], 2
	jmp	$LN13@SetStallCo
$LN18@SetStallCo:

; 954  : 			}
; 955  : 			else if(platform->platformAngles.sinthe < 0.342F && fabs(platform->platformAngles.cosphi) > 0.82F )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR __real@3eaf1aa0
	comiss	xmm0, DWORD PTR [edx+388]
	jbe	$LN13@SetStallCo
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+400]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1085[ebp]
	movss	xmm0, DWORD PTR tv1085[ebp]
	comiss	xmm0, DWORD PTR __real@3f51eb85
	jbe	$LN13@SetStallCo

; 956  : 			{
; 957  : 				if( alpha > 0.0f && fabs(alpha - (60.0f + oscillationTimer * stallMagnitude * max(0.0F,(0.3F - fabs(r))*3.3F))) < 10.0F &&
; 958  : 					oscillationSlope*q > 0.0F)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1152]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN15@SetStallCo
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1140]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1094[ebp]
	movss	xmm0, DWORD PTR __real@3e99999a
	subss	xmm0, DWORD PTR tv1094[ebp]
	mulss	xmm0, DWORD PTR __real@40533333
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN50@SetStallCo
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv525[ebp], xmm0
	jmp	SHORT $LN51@SetStallCo
$LN50@SetStallCo:
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1140]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1104[ebp]
	movss	xmm0, DWORD PTR __real@3e99999a
	subss	xmm0, DWORD PTR tv1104[ebp]
	mulss	xmm0, DWORD PTR __real@40533333
	movss	DWORD PTR tv525[ebp], xmm0
$LN51@SetStallCo:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+712]
	mulss	xmm0, DWORD PTR [eax+1220]
	mulss	xmm0, DWORD PTR tv525[ebp]
	addss	xmm0, DWORD PTR __real@42700000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1152]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1116[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	comiss	xmm0, DWORD PTR tv1116[ebp]
	jbe	SHORT $LN15@SetStallCo
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+716]
	mulss	xmm0, DWORD PTR [eax+1136]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN15@SetStallCo

; 959  : 				{
; 960  : 					stallMode = DeepStall;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1248], 4

; 961  : 					
; 962  : 					oldp02[5] = alpha - 60.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1152]
	subss	xmm0, DWORD PTR __real@42700000
	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax+308], xmm0

; 963  : 				}
; 964  : 				else if(alpha < 0.0f && fabs(alpha - (-40.0f + oscillationTimer * stallMagnitude * max(0.0F,(0.3F - fabs(r))*3.3F))) < 10.0F &&

	jmp	$LN13@SetStallCo
$LN15@SetStallCo:

; 965  : 						oscillationSlope*q > 0.0F)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [edx+1152]
	jbe	$LN13@SetStallCo
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1140]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1134[ebp]
	movss	xmm0, DWORD PTR __real@3e99999a
	subss	xmm0, DWORD PTR tv1134[ebp]
	mulss	xmm0, DWORD PTR __real@40533333
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN52@SetStallCo
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv564[ebp], xmm0
	jmp	SHORT $LN53@SetStallCo
$LN52@SetStallCo:
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1140]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1144[ebp]
	movss	xmm0, DWORD PTR __real@3e99999a
	subss	xmm0, DWORD PTR tv1144[ebp]
	mulss	xmm0, DWORD PTR __real@40533333
	movss	DWORD PTR tv564[ebp], xmm0
$LN53@SetStallCo:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+712]
	mulss	xmm0, DWORD PTR [eax+1220]
	mulss	xmm0, DWORD PTR tv564[ebp]
	addss	xmm0, DWORD PTR __real@c2200000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1152]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1156[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	comiss	xmm0, DWORD PTR tv1156[ebp]
	jbe	SHORT $LN13@SetStallCo
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+716]
	mulss	xmm0, DWORD PTR [eax+1136]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN13@SetStallCo

; 966  : 				{
; 967  : 					stallMode = DeepStall;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1248], 4

; 968  : 					oldp02[5] = alpha + 40.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1152]
	addss	xmm0, DWORD PTR __real@42200000
	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax+308], xmm0
$LN13@SetStallCo:

; 969  : 				}
; 970  : 			}
; 971  : 			mlSinCos(&Trig, vuxGameTime/(1200.0f/loadingFraction));

	mov	edx, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	mov	DWORD PTR tv1167[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv1167[ebp]
	mov	eax, DWORD PTR tv1167[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv1171[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv1171[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@44960000
	divss	xmm1, DWORD PTR [ecx+1228]
	divss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _Trig$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 972  : 			oscillationTimer = Trig.sin;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Trig$[ebp]
	movss	DWORD PTR [eax+712], xmm0

; 973  : 			oscillationSlope = Trig.cos;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Trig$[ebp+4]
	movss	DWORD PTR [ecx+716], xmm0

; 974  : 			break;

	jmp	$LN43@SetStallCo
$LN12@SetStallCo:

; 975  : 
; 976  : 		case DeepStall:
; 977  : 			pitch *= 0.9F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1312]
	mulss	xmm0, DWORD PTR __real@3f666666
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1312], xmm0

; 978  : 			//you leave the DeepStall in pitch.cpp
; 979  : 			if(stallMode == DeepStall && fabs(slice) > 0.3F && alpha < -10.0F)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1248], 4
	jne	SHORT $LN11@SetStallCo
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1308]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1193[ebp]
	movss	xmm0, DWORD PTR tv1193[ebp]
	comiss	xmm0, DWORD PTR __real@3e99999a
	jbe	SHORT $LN11@SetStallCo
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c1200000
	comiss	xmm0, DWORD PTR [eax+1152]
	jbe	SHORT $LN11@SetStallCo

; 980  : 			{
; 981  : 				stallMode = Spinning;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1248], 5

; 982  : 				oldp02[5] = alpha;

	mov	edx, 4
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1152]
	mov	DWORD PTR [eax+edx+308], ecx
$LN11@SetStallCo:

; 983  : 			}
; 984  : 			mlSinCos(&Trig, vuxGameTime/(1200.0f/loadingFraction));

	mov	edx, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	mov	DWORD PTR tv1202[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv1202[ebp]
	mov	eax, DWORD PTR tv1202[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv1206[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv1206[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@44960000
	divss	xmm1, DWORD PTR [ecx+1228]
	divss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _Trig$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 985  : 			oscillationTimer = Trig.sin;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Trig$[ebp]
	movss	DWORD PTR [eax+712], xmm0

; 986  : 			oscillationSlope = Trig.cos;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Trig$[ebp+4]
	movss	DWORD PTR [ecx+716], xmm0

; 987  : 			break;

	jmp	$LN43@SetStallCo
$LN10@SetStallCo:

; 988  : 
; 989  : 		case Recovering:
; 990  : 			
; 991  : 			if((alpha > g_fRecoveryAOA || alpha < -11.0f) && platform->platformAngles.sinthe > 0.342F)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1152]
	comiss	xmm0, DWORD PTR ?g_fRecoveryAOA@@3MA
	ja	SHORT $LN8@SetStallCo
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c1300000
	comiss	xmm0, DWORD PTR [eax+1152]
	jbe	$LN9@SetStallCo
$LN8@SetStallCo:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR [edx+388]
	comiss	xmm0, DWORD PTR __real@3eaf1aa0
	jbe	$LN9@SetStallCo

; 992  : 			{
; 993  : 				stallMode = EnteringDeepStall;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1248], 3

; 994  : 				stallMagnitude += (1.0f - rand()/(float)RAND_MAX * 2.0f) * 5.0f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@40a00000
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm1, DWORD PTR [ecx+1220]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1220], xmm1

; 995  : 				stallMagnitude *= loadingFraction;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1220]
	mulss	xmm0, DWORD PTR [ecx+1228]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1220], xmm0

; 996  : 				desiredMagnitude = stallMagnitude;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1220]
	mov	DWORD PTR [eax+1224], edx
$LN9@SetStallCo:

; 997  : 			}
; 998  : 			
; 999  : 			if(qbar > 30.0F && alpha < 18.0f)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+644]
	comiss	xmm0, DWORD PTR __real@41f00000
	jbe	SHORT $LN7@SetStallCo
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41900000
	comiss	xmm0, DWORD PTR [ecx+1152]
	jbe	SHORT $LN7@SetStallCo

; 1000 : 				stallMode = None;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1248], 0
$LN7@SetStallCo:

; 1001 : 
; 1002 : 			mlSinCos(&Trig, vuxGameTime/(1200.0f/loadingFraction));

	mov	eax, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	mov	DWORD PTR tv1243[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv1243[ebp]
	mov	ecx, DWORD PTR tv1243[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv1247[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv1247[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@44960000
	divss	xmm1, DWORD PTR [edx+1228]
	divss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _Trig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 1003 : 			oscillationTimer = Trig.sin;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Trig$[ebp]
	movss	DWORD PTR [ecx+712], xmm0

; 1004 : 			oscillationSlope = Trig.cos;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Trig$[ebp+4]
	movss	DWORD PTR [edx+716], xmm0
$LN43@SetStallCo:

; 1005 : 			break;
; 1006 : 		}
; 1007 : 
; 1008 : 		//check for low speed warning tone
; 1009 : 		if(platform->platformAngles.sinthe > .707 && 1.8888F * theta * RTD + 45.0F > vcas ||
; 1010 : 			(g_bRealisticAvionics && gearPos > 0.9F && cockpitFlightData.alpha >= 15.0F))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	cvtss2sd xmm0, DWORD PTR [ecx+388]
	comisd	xmm0, QWORD PTR __real@3fe69fbe76c8b439
	jbe	SHORT $LN4@SetStallCo
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3ff1c433
	mulss	xmm0, DWORD PTR [edx+1160]
	mulss	xmm0, DWORD PTR __real@42652ee1
	addss	xmm0, DWORD PTR __real@42340000
	mov	eax, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [eax+1124]
	ja	SHORT $LN5@SetStallCo
$LN4@SetStallCo:
	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	$LN6@SetStallCo
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1552]
	comiss	xmm0, DWORD PTR __real@3f666666
	jbe	SHORT $LN6@SetStallCo
	movss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+24
	comiss	xmm0, DWORD PTR __real@41700000
	jb	SHORT $LN6@SetStallCo
$LN5@SetStallCo:

; 1011 : 		{
; 1012 : 			
; 1013 : 			if(!IsSet(HornSilenced))

	push	1048576					; 00100000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN3@SetStallCo

; 1014 : 			{
; 1015 : 				SetFlag(LowSpdHorn);

	push	524288					; 00080000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag

; 1016 : 				//play tone
; 1017 : 				//F4SoundFXSetDist(auxaeroData->sndLowSpeed, TRUE, 0.0f, 1.0f);
; 1018 : 				 platform->SoundPos.Sfx(auxaeroData->sndLowSpeed); // MLR 5/16/2004 - 

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+2436]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMM@Z		; F4SoundPos::Sfx
$LN3@SetStallCo:

; 1019 : 			}
; 1020 : 
; 1021 : 		}

	jmp	SHORT $LN1@SetStallCo
$LN6@SetStallCo:

; 1022 : 		else if(IsSet(LowSpdHorn))

	push	524288					; 00080000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN1@SetStallCo

; 1023 : 		{
; 1024 : 			ClearFlag(HornSilenced);

	push	1048576					; 00100000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag

; 1025 : 			ClearFlag(LowSpdHorn);

	push	524288					; 00080000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag
$LN1@SetStallCo:

; 1026 : 		}
; 1027 : 	}
; 1028 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN54@SetStallCo:
	DD	$LN42@SetStallCo
	DD	$LN43@SetStallCo
	DD	$LN10@SetStallCo
	DD	$LN19@SetStallCo
	DD	$LN12@SetStallCo
	DD	$LN25@SetStallCo
?SetStallConditions@AirframeClass@@AAEXXZ ENDP		; AirframeClass::SetStallConditions
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_EGearData@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EGearData@@QAEPAXI@Z PROC				; GearData::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1GearData@@QAE@XZ		; GearData::~GearData
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GearData@@QAE@XZ			; GearData::~GearData
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EGearData@@QAEPAXI@Z ENDP				; GearData::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ??1GearData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1GearData@@QAE@XZ PROC				; GearData::~GearData, COMDAT
; _this$ = ecx

; 505  : 	~GearData(void) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1GearData@@QAE@XZ ENDP				; GearData::~GearData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\airframe.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0GearData@@QAE@XZ PROC				; GearData::GearData
; _this$ = ecx

; 1331 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1332 : 	strength	= 100.0F;	//how many hitpoints it has left		

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [eax], xmm0

; 1333 : 	vel			= 0.0F;		//at what rate is it currently compressing/extending in ft/s

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+4], xmm0

; 1334 : 	obstacle	= 0.0F;		//rock height/rut depth

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+8], xmm0

; 1335 : 	flags		= 0;		//gear stuck/broken, door stuck/broken,

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 1336 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0GearData@@QAE@XZ ENDP				; GearData::GearData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?checked_atan2@@YANNN@Z
_TEXT	SEGMENT
_z$ = -8						; size = 8
_y$ = 8							; size = 8
_x$ = 16						; size = 8
?checked_atan2@@YANNN@Z PROC				; checked_atan2, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 47   : 	double z;
; 48   : 	
; 49   : 	if (x == -0.0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@8000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@checked_at

; 50   : 		x = 0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _x$[ebp], xmm0
$LN8@checked_at:

; 51   : 	
; 52   : 	if (x != 0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@checked_at

; 53   : 		z = atan(y / x);

	movsd	xmm0, QWORD PTR _y$[ebp]
	divsd	xmm0, QWORD PTR _x$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR _z$[ebp]
	jmp	SHORT $LN4@checked_at
$LN7@checked_at:

; 54   : 	else if (y > 0)

	movsd	xmm0, QWORD PTR _y$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@checked_at

; 55   : 		z = HALF_DPI;

	movsd	xmm0, QWORD PTR __real@3ff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 56   : 	else

	jmp	SHORT $LN4@checked_at
$LN5@checked_at:

; 57   : 		z = -HALF_DPI;

	movsd	xmm0, QWORD PTR __real@bff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN4@checked_at:

; 58   : 
; 59   : 	if (x < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _x$[ebp]
	jbe	SHORT $LN1@checked_at

; 60   : 	{
; 61   : 		if (y < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _y$[ebp]
	jbe	SHORT $LN2@checked_at

; 62   : 			z -= DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	subsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 63   : 		else

	jmp	SHORT $LN1@checked_at
$LN2@checked_at:

; 64   : 			z += DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	addsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN1@checked_at:

; 65   : 	}
; 66   : 
; 67   : 	return z;

	fld	QWORD PTR _z$[ebp]

; 68   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?checked_atan2@@YANNN@Z ENDP				; checked_atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?mlSinCos@@YAXPAUmlTrig@@M@Z
_TEXT	SEGMENT
_trig$ = 8						; size = 4
_angle$ = 12						; size = 4
?mlSinCos@@YAXPAUmlTrig@@M@Z PROC			; mlSinCos, COMDAT

; 12   : {

	push	ebp
	mov	ebp, esp

; 13   : #if defined(_MSC_VER)
; 14   : 	__asm 
; 15   : 	{
; 16   : 		__asm	mov     ecx, trig;

	mov	ecx, DWORD PTR _trig$[ebp]

; 17   : 		__asm	fld     dword ptr [angle];

	fld	DWORD PTR _angle$[ebp]

; 18   : 		__asm	fsincos;

	fsincos

; 19   : 		__asm	fstp    dword ptr [ecx]trig.cos;

	fstp	DWORD PTR [ecx+4]

; 20   : 		__asm	fstp    dword ptr [ecx]trig.sin;

	fstp	DWORD PTR [ecx]

; 21   : 	}
; 22   : #else
; 23   : 	trig->sin = (Float32)sin(angle);
; 24   : 	trig->cos = (Float32)cos(angle);
; 25   : #endif
; 26   : }

	pop	ebp
	ret	0
?mlSinCos@@YAXPAUmlTrig@@M@Z ENDP			; mlSinCos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsPlayer@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPlayer@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsPlayer, COMDAT
; _this$ = ecx

; 113  : 	int IsPlayer (void)							{ return IsSetFalcFlag(FEC_HASPLAYERS); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetFalcFlag@FalconEntity@@QAEHH@Z	; FalconEntity::IsSetFalcFlag
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPlayer@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsPlayer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSetFalcFlag@FalconEntity@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z PROC		; FalconEntity::IsSetFalcFlag, COMDAT
; _this$ = ecx

; 112  : 	int IsSetFalcFlag (int flag)				{ return falconFlags & flag; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+136]
	and	eax, DWORD PTR _flag$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z ENDP		; FalconEntity::IsSetFalcFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?LastUpdateTime@VuEntity@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LastUpdateTime@VuEntity@@QBEKXZ PROC			; VuEntity::LastUpdateTime, COMDAT
; _this$ = ecx

; 172  : 	VU_TIME LastUpdateTime() const { return lastUpdateTime_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+100]
	mov	esp, ebp
	pop	ebp
	ret	0
?LastUpdateTime@VuEntity@@QBEKXZ ENDP			; VuEntity::LastUpdateTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Roll@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Roll@VuEntity@@QBEMXZ PROC				; VuEntity::Roll, COMDAT
; _this$ = ecx

; 166  : 	SM_SCALAR Roll() const { return orient_.roll_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+68]
	mov	esp, ebp
	pop	ebp
	ret	0
?Roll@VuEntity@@QBEMXZ ENDP				; VuEntity::Roll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Pitch@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Pitch@VuEntity@@QBEMXZ PROC				; VuEntity::Pitch, COMDAT
; _this$ = ecx

; 165  : 	SM_SCALAR Pitch() const { return orient_.pitch_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+64]
	mov	esp, ebp
	pop	ebp
	ret	0
?Pitch@VuEntity@@QBEMXZ ENDP				; VuEntity::Pitch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Yaw@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Yaw@VuEntity@@QBEMXZ PROC				; VuEntity::Yaw, COMDAT
; _this$ = ecx

; 164  : 	SM_SCALAR Yaw() const { return orient_.yaw_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?Yaw@VuEntity@@QBEMXZ ENDP				; VuEntity::Yaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZDelta@VuEntity@@QBEMXZ PROC				; VuEntity::ZDelta, COMDAT
; _this$ = ecx

; 163  : 	SM_SCALAR ZDelta() const { return pos_.dz_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::ZDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YDelta@VuEntity@@QBEMXZ PROC				; VuEntity::YDelta, COMDAT
; _this$ = ecx

; 162  : 	SM_SCALAR YDelta() const { return pos_.dy_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?YDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::YDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XDelta@VuEntity@@QBEMXZ PROC				; VuEntity::XDelta, COMDAT
; _this$ = ecx

; 161  : 	SM_SCALAR XDelta() const { return pos_.dx_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?XDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::XDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Type@VuEntity@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@VuEntity@@QBEGXZ PROC				; VuEntity::Type, COMDAT
; _this$ = ecx

; 154  : 	ushort Type() const       { return share_.entityType_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@VuEntity@@QBEGXZ ENDP				; VuEntity::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?SetUpdateTime@VuEntity@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_currentTime$ = 8					; size = 4
?SetUpdateTime@VuEntity@@QAEXK@Z PROC			; VuEntity::SetUpdateTime, COMDAT
; _this$ = ecx

; 119  : 	void SetUpdateTime(VU_TIME currentTime){ lastUpdateTime_ = currentTime; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _currentTime$[ebp]
	mov	DWORD PTR [eax+100], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUpdateTime@VuEntity@@QAEXK@Z ENDP			; VuEntity::SetUpdateTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??BVU_ID@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVU_ID@@QBEKXZ PROC					; VU_ID::operator unsigned long, COMDAT
; _this$ = ecx

; 162  : 	operator VU_KEY() const { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 		return (VU_KEY)(((unsigned short)creator_ << 16) | ((unsigned short)num_)); 

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??BVU_SESSION_ID@@QBEKXZ		; VU_SESSION_ID::operator unsigned long
	movzx	eax, ax
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx]
	or	eax, edx

; 164  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVU_ID@@QBEKXZ ENDP					; VU_ID::operator unsigned long
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??BVU_SESSION_ID@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVU_SESSION_ID@@QBEKXZ PROC				; VU_SESSION_ID::operator unsigned long, COMDAT
; _this$ = ecx

; 79   : 	operator unsigned long() const { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 		return (unsigned long) value_; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 81   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVU_SESSION_ID@@QBEKXZ ENDP				; VU_SESSION_ID::operator unsigned long
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?atan@@YAMM@Z PROC					; atan, COMDAT

; 505  :         {return (atanf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atanf
	add	esp, 4
	pop	ebp
	ret	0
?atan@@YAMM@Z ENDP					; atan
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 404  :         {return ((float)atan((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_atanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
