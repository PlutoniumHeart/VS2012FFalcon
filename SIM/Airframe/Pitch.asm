; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\Airframe\Pitch.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?gmmaHold@@3MA					; gmmaHold
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
_BSS	SEGMENT
?gmmaHold@@3MA DD 01H DUP (?)				; gmmaHold
_BSS	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
_DATA	SEGMENT
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	ORG $+4
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_DATA	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?Pitch@AirframeClass@@AAEXXZ			; AirframeClass::Pitch
PUBLIC	?PitchIt@AirframeClass@@QAEXMM@Z		; AirframeClass::PitchIt
PUBLIC	?IsSet@AirframeClass@@QBEHH@Z			; AirframeClass::IsSet
PUBLIC	?IsF16@AircraftClass@@QAEHXZ			; AircraftClass::IsF16
PUBLIC	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e99999a
PUBLIC	__real@3ecccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f333333
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f666666
PUBLIC	__real@3f7851ec
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@40533333
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@41100000
PUBLIC	__real@41200000
PUBLIC	__real@41e80000
PUBLIC	__real@4200b53f
PUBLIC	__real@420c0000
PUBLIC	__real@42340000
PUBLIC	__real@42652ee1
PUBLIC	__real@42700000
PUBLIC	__real@42aa0000
PUBLIC	__real@42b40000
PUBLIC	__real@42c80000
PUBLIC	__real@43070000
PUBLIC	__real@43340000
PUBLIC	__real@43480000
PUBLIC	__real@43b40000
PUBLIC	__real@bf800000
PUBLIC	__real@c0400000
PUBLIC	__real@c1100000
PUBLIC	__real@c1200000
PUBLIC	__real@c1a00000
PUBLIC	__real@c2200000
PUBLIC	__real@c3340000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_fabs:PROC
EXTRN	?F7Tust@SIMLIB_MATH_CLASS@@QAEMMMMMMQAMPAH@Z:PROC ; SIMLIB_MATH_CLASS::F7Tust
EXTRN	?FIAdamsBash@SIMLIB_MATH_CLASS@@QAEMMMQAM@Z:PROC ; SIMLIB_MATH_CLASS::FIAdamsBash
EXTRN	?GetLimiter@LimiterMgrClass@@QAEPAVLimiter@@HH@Z:PROC ; LimiterMgrClass::GetLimiter
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	?SimLibMinorFrameTime@@3MA:DWORD		; SimLibMinorFrameTime
EXTRN	?Math@@3VSIMLIB_MATH_CLASS@@A:BYTE		; Math
EXTRN	?gLimiterMgr@@3PAVLimiterMgrClass@@A:DWORD	; gLimiterMgr
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?g_bNewFm@@3_NA:BYTE				; g_bNewFm
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c3340000
CONST	SEGMENT
__real@c3340000 DD 0c3340000r			; -180
CONST	ENDS
;	COMDAT __real@c2200000
CONST	SEGMENT
__real@c2200000 DD 0c2200000r			; -40
CONST	ENDS
;	COMDAT __real@c1a00000
CONST	SEGMENT
__real@c1a00000 DD 0c1a00000r			; -20
CONST	ENDS
;	COMDAT __real@c1200000
CONST	SEGMENT
__real@c1200000 DD 0c1200000r			; -10
CONST	ENDS
;	COMDAT __real@c1100000
CONST	SEGMENT
__real@c1100000 DD 0c1100000r			; -9
CONST	ENDS
;	COMDAT __real@c0400000
CONST	SEGMENT
__real@c0400000 DD 0c0400000r			; -3
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@43b40000
CONST	SEGMENT
__real@43b40000 DD 043b40000r			; 360
CONST	ENDS
;	COMDAT __real@43480000
CONST	SEGMENT
__real@43480000 DD 043480000r			; 200
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@43070000
CONST	SEGMENT
__real@43070000 DD 043070000r			; 135
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42b40000
CONST	SEGMENT
__real@42b40000 DD 042b40000r			; 90
CONST	ENDS
;	COMDAT __real@42aa0000
CONST	SEGMENT
__real@42aa0000 DD 042aa0000r			; 85
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@42652ee1
CONST	SEGMENT
__real@42652ee1 DD 042652ee1r			; 57.2958
CONST	ENDS
;	COMDAT __real@42340000
CONST	SEGMENT
__real@42340000 DD 042340000r			; 45
CONST	ENDS
;	COMDAT __real@420c0000
CONST	SEGMENT
__real@420c0000 DD 0420c0000r			; 35
CONST	ENDS
;	COMDAT __real@4200b53f
CONST	SEGMENT
__real@4200b53f DD 04200b53fr			; 32.177
CONST	ENDS
;	COMDAT __real@41e80000
CONST	SEGMENT
__real@41e80000 DD 041e80000r			; 29
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40533333
CONST	SEGMENT
__real@40533333 DD 040533333r			; 3.3
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7851ec
CONST	SEGMENT
__real@3f7851ec DD 03f7851ecr			; 0.97
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ PROC ; SimulationDriver::GetPlayerEntity, COMDAT
; _this$ = ecx

; 76   : 	SimMoverClass *GetPlayerEntity() const { return const_cast<SimMoverClass*>(playerEntity); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ENDP ; SimulationDriver::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?IsF16@AircraftClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsF16@AircraftClass@@QAEHXZ PROC			; AircraftClass::IsF16, COMDAT
; _this$ = ecx

; 335  : 	int            IsF16 (void) {return (acFlags & isF16 ? TRUE : FALSE);}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+964]
	and	ecx, 1
	je	SHORT $LN3@IsF16
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsF16
$LN3@IsF16:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsF16:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsF16@AircraftClass@@QAEHXZ ENDP			; AircraftClass::IsF16
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?IsSet@AirframeClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_testFlag$ = 8						; size = 4
?IsSet@AirframeClass@@QBEHH@Z PROC			; AirframeClass::IsSet, COMDAT
; _this$ = ecx

; 1216 : 	int IsSet (int testFlag) const {return flags & testFlag ? 1 : 0;}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	and	ecx, DWORD PTR _testFlag$[ebp]
	je	SHORT $LN3@IsSet
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSet
$LN3@IsSet:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSet:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSet@AirframeClass@@QBEHH@Z ENDP			; AirframeClass::IsSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\pitch.cpp
_TEXT	SEGMENT
_oldalpha$ = -8						; size = 4
_this$ = -4						; size = 4
_aoacmd$ = 8						; size = 4
_dt$ = 12						; size = 4
?PitchIt@AirframeClass@@QAEXMM@Z PROC			; AirframeClass::PitchIt
; _this$ = ecx

; 473  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 474  : 	// JB 010714 mult by the momentum
; 475  : 	float oldalpha = alpha;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1152]
	movss	DWORD PTR _oldalpha$[ebp], xmm0

; 476  : 	alpha  = Math.F7Tust(aoacmd, tp01 * auxaeroData->pitchMomentum, 
; 477  : 		tp02 * auxaeroData->pitchMomentum, tp03 * auxaeroData->pitchMomentum,
; 478  : 		dt, oldp03, &jp01);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1396				; 00000574H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 332				; 0000014cH
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1348]
	mulss	xmm0, DWORD PTR [ecx+192]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1344]
	mulss	xmm0, DWORD PTR [ecx+192]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1340]
	mulss	xmm0, DWORD PTR [ecx+192]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _aoacmd$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?Math@@3VSIMLIB_MATH_CLASS@@A ; Math
	call	?F7Tust@SIMLIB_MATH_CLASS@@QAEMMMMMMQAMPAH@Z ; SIMLIB_MATH_CLASS::F7Tust
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+1152]

; 479  : 	alpdot = (alpha - oldalpha)/dt;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1152]
	subss	xmm0, DWORD PTR _oldalpha$[ebp]
	divss	xmm0, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1300], xmm0

; 480  : 	ShiAssert(!_isnan(alpha));
; 481  : 		
; 482  : 	if(alpha < -180.0F)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c3340000
	comiss	xmm0, DWORD PTR [eax+1152]
	jbe	$LN3@PitchIt

; 483  : 	{
; 484  : 		oldp03[0] += 360.0F;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+332]
	addss	xmm0, DWORD PTR __real@43b40000
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax+332], xmm0

; 485  : 		oldp03[1] += 360.0F;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+332]
	addss	xmm0, DWORD PTR __real@43b40000
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+ecx+332], xmm0

; 486  : 		oldp03[2] += 360.0F;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+332]
	addss	xmm0, DWORD PTR __real@43b40000
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+edx+332], xmm0

; 487  : 		oldp03[3] += 360.0F;

	mov	ecx, 4
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+332]
	addss	xmm0, DWORD PTR __real@43b40000
	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax+332], xmm0
	jmp	$LN1@PitchIt
$LN3@PitchIt:

; 488  : 	}
; 489  : 	else if(alpha > 180.0F)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1152]
	comiss	xmm0, DWORD PTR __real@43340000
	jbe	$LN1@PitchIt

; 490  : 	{
; 491  : 		oldp03[0] -= 360.0F;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+332]
	subss	xmm0, DWORD PTR __real@43b40000
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+edx+332], xmm0

; 492  : 		oldp03[1] -= 360.0F;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+332]
	subss	xmm0, DWORD PTR __real@43b40000
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax+332], xmm0

; 493  : 		oldp03[2] -= 360.0F;

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+332]
	subss	xmm0, DWORD PTR __real@43b40000
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+ecx+332], xmm0

; 494  : 		oldp03[3] -= 360.0F;

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+332]
	subss	xmm0, DWORD PTR __real@43b40000
	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+edx+332], xmm0
$LN1@PitchIt:

; 495  : 	}
; 496  : 	
; 497  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?PitchIt@AirframeClass@@QAEXMM@Z ENDP			; AirframeClass::PitchIt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\pitch.cpp
_TEXT	SEGMENT
_overshoot$1 = -308					; size = 4
tv1906 = -304						; size = 4
tv2318 = -300						; size = 4
tv2144 = -296						; size = 4
tv2378 = -292						; size = 4
tv1515 = -288						; size = 4
tv2308 = -284						; size = 4
tv2112 = -280						; size = 4
tv2376 = -276						; size = 4
tv2374 = -272						; size = 4
tv2264 = -268						; size = 4
tv2164 = -264						; size = 4
tv2254 = -260						; size = 4
tv2127 = -256						; size = 4
tv2234 = -252						; size = 4
tv2104 = -248						; size = 4
tv2217 = -244						; size = 4
tv1783 = -240						; size = 4
tv2202 = -236						; size = 4
tv1690 = -232						; size = 4
tv2194 = -228						; size = 4
tv2372 = -224						; size = 4
tv2174 = -220						; size = 4
tv1508 = -216						; size = 4
tv593 = -212						; size = 4
tv793 = -208						; size = 4
tv566 = -204						; size = 4
tv863 = -200						; size = 4
tv507 = -196						; size = 4
tv629 = -192						; size = 4
tv423 = -188						; size = 4
tv831 = -184						; size = 4
tv293 = -180						; size = 4
tv679 = -176						; size = 4
tv905 = -172						; size = 4
tv872 = -168						; size = 4
tv904 = -164						; size = 4
tv85 = -160						; size = 4
tv898 = -156						; size = 4
_playerAC$2 = -152					; size = 4
tv897 = -148						; size = 4
tv770 = -144						; size = 4
tv888 = -140						; size = 4
tv649 = -136						; size = 4
tv873 = -132						; size = 4
tv627 = -128						; size = 4
tv879 = -124						; size = 4
_slowspeedfactor$3 = -120				; size = 4
tv1249 = -116						; size = 4
tv546 = -112						; size = 4
tv1182 = -108						; size = 4
tv481 = -104						; size = 4
tv1151 = -100						; size = 4
tv351 = -96						; size = 4
tv1084 = -92						; size = 4
tv191 = -88						; size = 4
_eintg1$ = -84						; size = 4
tv846 = -80						; size = 4
tv1320 = -76						; size = 4
_alphadelta$4 = -72					; size = 4
_maxgcmd$ = -68						; size = 4
_minspeed$5 = -64					; size = 4
_slowspeed$6 = -60					; size = 4
tv1047 = -56						; size = 4
_tempMaxGs$7 = -52					; size = 4
_error$ = -48						; size = 4
_eprop$ = -44						; size = 4
_minCmd$ = -40						; size = 4
_ptcmd$ = -36						; size = 4
_cosmu_lim$ = -32					; size = 4
_eintg$ = -28						; size = 4
_aoacmd$ = -24						; size = 4
_maxNegGs$ = -20					; size = 4
_limiter$ = -16						; size = 4
_alphaError$ = -12					; size = 4
_maxCmd$ = -8						; size = 4
_this$ = -4						; size = 4
?Pitch@AirframeClass@@AAEXXZ PROC			; AirframeClass::Pitch
; _this$ = ecx

; 64   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	mov	DWORD PTR _this$[ebp], ecx

; 65   : 	//if(vt == 0.0F)
; 66   : 	//if(IsSet(Planted) || (!IsSet(InAir) && pstick <= 0.0F) )
; 67   : 	if(IsSet(Planted))

	push	4096					; 00001000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN94@Pitch

; 68   : 		return;

	jmp	$LN95@Pitch
$LN94@Pitch:

; 69   : 
; 70   : 	float error, eprop, eintg1, eintg;
; 71   : 	float cosmu_lim,alphaError;//, tempnzcgs;
; 72   : 	float aoacmd, ptcmd, maxNegGs, maxCmd;
; 73   : 	float minCmd = 0.0f; //Cobra 10/30/04 TJL

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _minCmd$[ebp], xmm0

; 74   : 	//float limitGs, alpdt1;
; 75   : 	Limiter *limiter = NULL;

	mov	DWORD PTR _limiter$[ebp], 0

; 76   : 	
; 77   : 	alphaError = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _alphaError$[ebp], xmm0

; 78   : 	cosmu_lim = max(0.0F,platform->platformAngles.cosmu);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx+384]
	jbe	SHORT $LN97@Pitch
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv85[ebp], xmm0
	jmp	SHORT $LN98@Pitch
$LN97@Pitch:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [eax+384]
	movss	DWORD PTR tv85[ebp], xmm0
$LN98@Pitch:
	movss	xmm0, DWORD PTR tv85[ebp]
	movss	DWORD PTR _cosmu_lim$[ebp], xmm0

; 79   : 	float maxgcmd = alpha + (maxGs - cl*qsom/GRAVITY - cosmu_lim* platform->platformAngles.cosgam) * (GRAVITY/(qsom*cnalpha));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+152]
	mulss	xmm0, DWORD PTR [edx+648]
	divss	xmm0, DWORD PTR __real@4200b53f
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+60]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR _cosmu_lim$[ebp]
	mulss	xmm0, DWORD PTR [edx+368]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+648]
	mulss	xmm0, DWORD PTR [ecx+140]
	movss	xmm2, DWORD PTR __real@4200b53f
	divss	xmm2, xmm0
	mulss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm1, DWORD PTR [edx+1152]
	movss	DWORD PTR _maxgcmd$[ebp], xmm1

; 80   : 	//tempnzcgs = (oldnzcgs + nzcgs)*0.5F;
; 81   : 
; 82   : 	/*--------------------------------*/
; 83   : 	/* Check for AOA/G command system */
; 84   : 	/*--------------------------------*/
; 85   : 	if (IsSet(AOACmdMode))

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN93@Pitch

; 86   : 	{
; 87   : 		/*------------------*/
; 88   : 		/* AOA command path */
; 89   : 		/*------------------*/
; 90   : 		
; 91   : 		if(IsSet(InAir))

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN92@Pitch

; 92   : 		{
; 93   : 		    alphaError = (float)(fabs(q*0.5F) + fabs(p))*0.1F*RTD;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1136]
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1508[ebp]
	movss	xmm0, DWORD PTR tv1508[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm1, DWORD PTR [ecx+1132]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv2372[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1515[ebp]
	movss	xmm0, DWORD PTR tv2372[ebp]
	addss	xmm0, DWORD PTR tv1515[ebp]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR _alphaError$[ebp], xmm0

; 94   : 			minCmd = aoamin - alphaError; // needed for non f16 case

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+172]
	subss	xmm0, DWORD PTR _alphaError$[ebp]
	movss	DWORD PTR _minCmd$[ebp], xmm0

; 95   : 			maxCmd = aoamax + alphaError;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+168]
	addss	xmm0, DWORD PTR _alphaError$[ebp]
	movss	DWORD PTR _maxCmd$[ebp], xmm0
$LN92@Pitch:

; 96   : 		}
; 97   : 
; 98   : 		if(IsSet(MPOverride) && (alpha > 29.0F))

	push	262144					; 00040000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN91@Pitch
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1152]
	comiss	xmm0, DWORD PTR __real@41e80000
	jbe	$LN91@Pitch

; 99   : 		{
; 100  : 			minCmd = max(gsAvail*(-1)*GRAVITY/(qsom*cnalpha),-9.0F);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+56]
	mulss	xmm0, DWORD PTR __real@bf800000
	mulss	xmm0, DWORD PTR __real@4200b53f
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+648]
	mulss	xmm1, DWORD PTR [ecx+140]
	divss	xmm0, xmm1
	comiss	xmm0, DWORD PTR __real@c1100000
	jbe	SHORT $LN99@Pitch
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+56]
	mulss	xmm0, DWORD PTR __real@bf800000
	mulss	xmm0, DWORD PTR __real@4200b53f
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+648]
	mulss	xmm1, DWORD PTR [ecx+140]
	divss	xmm0, xmm1
	movss	DWORD PTR tv191[ebp], xmm0
	jmp	SHORT $LN100@Pitch
$LN99@Pitch:
	movss	xmm0, DWORD PTR __real@c1100000
	movss	DWORD PTR tv191[ebp], xmm0
$LN100@Pitch:
	movss	xmm0, DWORD PTR tv191[ebp]
	movss	DWORD PTR _minCmd$[ebp], xmm0

; 101  : 		}
; 102  : 		else 

	jmp	$LN58@Pitch
$LN91@Pitch:

; 103  : 		{
; 104  : 			if(IsSet(CATLimiterIII))

	push	2097152					; 00200000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN89@Pitch

; 105  : 			{
; 106  : 				limiter = gLimiterMgr->GetLimiter(CatIIIAOALimiter,vehicleIndex);

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+92]
	push	eax
	push	6
	mov	ecx, DWORD PTR ?gLimiterMgr@@3PAVLimiterMgrClass@@A ; gLimiterMgr
	call	?GetLimiter@LimiterMgrClass@@QAEPAVLimiter@@HH@Z ; LimiterMgrClass::GetLimiter
	mov	DWORD PTR _limiter$[ebp], eax

; 107  : 				if(limiter)

	cmp	DWORD PTR _limiter$[ebp], 0
	je	SHORT $LN88@Pitch

; 108  : 					maxCmd = limiter->Limit(alpha - alphaError);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1152]
	subss	xmm0, DWORD PTR _alphaError$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _limiter$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _limiter$[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	fstp	DWORD PTR _maxCmd$[ebp]
$LN88@Pitch:

; 109  : 
; 110  : // 2002-03-12 MN use 9.0f G's only for F-16 and player entity - AI planes can use this code, too
; 111  : 			if(SimDriver.GetPlayerEntity() && platform == SimDriver.GetPlayerEntity() && platform->IsAirplane() && platform->IsF16()) // 2002-03-19 MODIFIED BY S.G. Lets make sure it's an airplane first. Seems odd to happen here but it CTD after ejecting (BT 1071)

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	$LN87@Pitch
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1088], eax
	jne	$LN87@Pitch
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	je	$LN87@Pitch
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?IsF16@AircraftClass@@QAEHXZ		; AircraftClass::IsF16
	test	eax, eax
	je	$LN87@Pitch

; 112  : 				maxCmd = min(maxCmd + alphaError, alpha + (9.0f - cl*qsom/GRAVITY - cosmu_lim* platform->platformAngles.cosgam) * (GRAVITY/(qsom*cnalpha)));

	movss	xmm0, DWORD PTR _maxCmd$[ebp]
	addss	xmm0, DWORD PTR _alphaError$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+152]
	mulss	xmm1, DWORD PTR [eax+648]
	divss	xmm1, DWORD PTR __real@4200b53f
	movss	xmm2, DWORD PTR __real@41100000
	subss	xmm2, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm1, DWORD PTR _cosmu_lim$[ebp]
	mulss	xmm1, DWORD PTR [edx+368]
	subss	xmm2, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+648]
	mulss	xmm1, DWORD PTR [ecx+140]
	movss	xmm3, DWORD PTR __real@4200b53f
	divss	xmm3, xmm1
	mulss	xmm2, xmm3
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm2, DWORD PTR [edx+1152]
	comiss	xmm2, xmm0
	jbe	SHORT $LN101@Pitch
	movss	xmm0, DWORD PTR _maxCmd$[ebp]
	addss	xmm0, DWORD PTR _alphaError$[ebp]
	movss	DWORD PTR tv293[ebp], xmm0
	jmp	SHORT $LN102@Pitch
$LN101@Pitch:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+152]
	mulss	xmm0, DWORD PTR [ecx+648]
	divss	xmm0, DWORD PTR __real@4200b53f
	movss	xmm1, DWORD PTR __real@41100000
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR _cosmu_lim$[ebp]
	mulss	xmm0, DWORD PTR [eax+368]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+648]
	mulss	xmm0, DWORD PTR [edx+140]
	movss	xmm2, DWORD PTR __real@4200b53f
	divss	xmm2, xmm0
	mulss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm1, DWORD PTR [eax+1152]
	movss	DWORD PTR tv293[ebp], xmm1
$LN102@Pitch:
	movss	xmm0, DWORD PTR tv293[ebp]
	movss	DWORD PTR _maxCmd$[ebp], xmm0

; 113  : 			else

	jmp	$LN86@Pitch
$LN87@Pitch:

; 114  : 				maxCmd = min(maxCmd + alphaError, alpha + (curMaxGs - cl*qsom/GRAVITY - cosmu_lim* platform->platformAngles.cosgam) * (GRAVITY/(qsom*cnalpha)));

	movss	xmm0, DWORD PTR _maxCmd$[ebp]
	addss	xmm0, DWORD PTR _alphaError$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+152]
	mulss	xmm1, DWORD PTR [edx+648]
	divss	xmm1, DWORD PTR __real@4200b53f
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [eax+1244]
	subss	xmm2, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm1, DWORD PTR _cosmu_lim$[ebp]
	mulss	xmm1, DWORD PTR [edx+368]
	subss	xmm2, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+648]
	mulss	xmm1, DWORD PTR [ecx+140]
	movss	xmm3, DWORD PTR __real@4200b53f
	divss	xmm3, xmm1
	mulss	xmm2, xmm3
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm2, DWORD PTR [edx+1152]
	comiss	xmm2, xmm0
	jbe	SHORT $LN103@Pitch
	movss	xmm0, DWORD PTR _maxCmd$[ebp]
	addss	xmm0, DWORD PTR _alphaError$[ebp]
	movss	DWORD PTR tv351[ebp], xmm0
	jmp	SHORT $LN104@Pitch
$LN103@Pitch:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+152]
	mulss	xmm0, DWORD PTR [ecx+648]
	divss	xmm0, DWORD PTR __real@4200b53f
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1244]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR _cosmu_lim$[ebp]
	mulss	xmm0, DWORD PTR [ecx+368]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+648]
	mulss	xmm0, DWORD PTR [eax+140]
	movss	xmm2, DWORD PTR __real@4200b53f
	divss	xmm2, xmm0
	mulss	xmm1, xmm2
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm1, DWORD PTR [ecx+1152]
	movss	DWORD PTR tv351[ebp], xmm1
$LN104@Pitch:
	movss	xmm0, DWORD PTR tv351[ebp]
	movss	DWORD PTR _maxCmd$[ebp], xmm0
$LN86@Pitch:

; 115  : 
; 116  : 			}
; 117  : 			else

	jmp	$LN80@Pitch
$LN89@Pitch:

; 118  : 			{
; 119  : 				//TJL 05/08/04
; 120  : 				float tempMaxGs = maxGs;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+60]
	movss	DWORD PTR _tempMaxGs$7[ebp], xmm0

; 121  : 				limiter = gLimiterMgr->GetLimiter(PosGLimiter, vehicleIndex);

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+92]
	push	ecx
	push	1
	mov	ecx, DWORD PTR ?gLimiterMgr@@3PAVLimiterMgrClass@@A ; gLimiterMgr
	call	?GetLimiter@LimiterMgrClass@@QAEPAVLimiter@@HH@Z ; LimiterMgrClass::GetLimiter
	mov	DWORD PTR _limiter$[ebp], eax

; 122  : 				if (limiter)

	cmp	DWORD PTR _limiter$[ebp], 0
	je	SHORT $LN84@Pitch

; 123  : 					tempMaxGs = limiter->Limit(alpha);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1152]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _limiter$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _limiter$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	fstp	DWORD PTR _tempMaxGs$7[ebp]
$LN84@Pitch:

; 124  : 				
; 125  : 				if (g_bNewFm)

	movzx	ecx, BYTE PTR ?g_bNewFm@@3_NA		; g_bNewFm
	test	ecx, ecx
	je	$LN83@Pitch

; 126  : 				//maxCmd = min(alpha + (maxGs - cl*qsom/GRAVITY - cosmu_lim* platform->platformAngles.cosgam) * (GRAVITY/(qsom*cnalpha)), aoamax);
; 127  : 				maxCmd = min(alpha + (tempMaxGs - cl*qsom/GRAVITY - cosmu_lim* platform->platformAngles.cosgam) * (GRAVITY/(qsom*cnalpha)), aoamax);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+152]
	mulss	xmm0, DWORD PTR [eax+648]
	divss	xmm0, DWORD PTR __real@4200b53f
	movss	xmm1, DWORD PTR _tempMaxGs$7[ebp]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR _cosmu_lim$[ebp]
	mulss	xmm0, DWORD PTR [edx+368]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+648]
	mulss	xmm0, DWORD PTR [ecx+140]
	movss	xmm2, DWORD PTR __real@4200b53f
	divss	xmm2, xmm0
	mulss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm1, DWORD PTR [edx+1152]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+168]
	comiss	xmm0, xmm1
	jbe	SHORT $LN105@Pitch
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+152]
	mulss	xmm0, DWORD PTR [edx+648]
	divss	xmm0, DWORD PTR __real@4200b53f
	movss	xmm1, DWORD PTR _tempMaxGs$7[ebp]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR _cosmu_lim$[ebp]
	mulss	xmm0, DWORD PTR [ecx+368]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+648]
	mulss	xmm0, DWORD PTR [eax+140]
	movss	xmm2, DWORD PTR __real@4200b53f
	divss	xmm2, xmm0
	mulss	xmm1, xmm2
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm1, DWORD PTR [ecx+1152]
	movss	DWORD PTR tv423[ebp], xmm1
	jmp	SHORT $LN106@Pitch
$LN105@Pitch:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+168]
	movss	DWORD PTR tv423[ebp], xmm0
$LN106@Pitch:
	movss	xmm0, DWORD PTR tv423[ebp]
	movss	DWORD PTR _maxCmd$[ebp], xmm0

; 128  : 				else

	jmp	$LN82@Pitch
$LN83@Pitch:

; 129  :   				//maxCmd = min(alpha + (maxGs - cl*qsom/GRAVITY - cosmu_lim* platform->platformAngles.cosgam) * (GRAVITY/(qsom*cnalpha)), aoamax + alphaError);
; 130  : 				maxCmd = min(alpha + (tempMaxGs - cl*qsom/GRAVITY - cosmu_lim* platform->platformAngles.cosgam) * (GRAVITY/(qsom*cnalpha)), aoamax + alphaError);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+152]
	mulss	xmm0, DWORD PTR [ecx+648]
	divss	xmm0, DWORD PTR __real@4200b53f
	movss	xmm1, DWORD PTR _tempMaxGs$7[ebp]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR _cosmu_lim$[ebp]
	mulss	xmm0, DWORD PTR [eax+368]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+648]
	mulss	xmm0, DWORD PTR [edx+140]
	movss	xmm2, DWORD PTR __real@4200b53f
	divss	xmm2, xmm0
	mulss	xmm1, xmm2
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm1, DWORD PTR [eax+1152]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+168]
	addss	xmm0, DWORD PTR _alphaError$[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN107@Pitch
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+152]
	mulss	xmm0, DWORD PTR [eax+648]
	divss	xmm0, DWORD PTR __real@4200b53f
	movss	xmm1, DWORD PTR _tempMaxGs$7[ebp]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR _cosmu_lim$[ebp]
	mulss	xmm0, DWORD PTR [edx+368]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+648]
	mulss	xmm0, DWORD PTR [ecx+140]
	movss	xmm2, DWORD PTR __real@4200b53f
	divss	xmm2, xmm0
	mulss	xmm1, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm1, DWORD PTR [edx+1152]
	movss	DWORD PTR tv481[ebp], xmm1
	jmp	SHORT $LN108@Pitch
$LN107@Pitch:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+168]
	addss	xmm0, DWORD PTR _alphaError$[ebp]
	movss	DWORD PTR tv481[ebp], xmm0
$LN108@Pitch:
	movss	xmm0, DWORD PTR tv481[ebp]
	movss	DWORD PTR _maxCmd$[ebp], xmm0
$LN82@Pitch:

; 131  : 	
; 132  : 				if (maxCmd < 0) maxCmd =0;

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _maxCmd$[ebp]
	jbe	SHORT $LN81@Pitch
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _maxCmd$[ebp], xmm0
$LN81@Pitch:

; 133  : 				limiter = gLimiterMgr->GetLimiter(AOALimiter,vehicleIndex);

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+92]
	push	edx
	push	17					; 00000011H
	mov	ecx, DWORD PTR ?gLimiterMgr@@3PAVLimiterMgrClass@@A ; gLimiterMgr
	call	?GetLimiter@LimiterMgrClass@@QAEPAVLimiter@@HH@Z ; LimiterMgrClass::GetLimiter
	mov	DWORD PTR _limiter$[ebp], eax

; 134  : 
; 135  : 				if (g_bNewFm && limiter)

	movzx	eax, BYTE PTR ?g_bNewFm@@3_NA		; g_bNewFm
	test	eax, eax
	je	SHORT $LN80@Pitch
	cmp	DWORD PTR _limiter$[ebp], 0
	je	SHORT $LN80@Pitch

; 136  : 				maxCmd =  min( limiter->Limit(alpha), maxCmd);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1152]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _limiter$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _limiter$[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	fstp	DWORD PTR tv1690[ebp]
	movss	xmm0, DWORD PTR _maxCmd$[ebp]
	comiss	xmm0, DWORD PTR tv1690[ebp]
	jbe	SHORT $LN109@Pitch
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1152]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _limiter$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _limiter$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	fstp	DWORD PTR tv507[ebp]
	jmp	SHORT $LN110@Pitch
$LN109@Pitch:
	movss	xmm0, DWORD PTR _maxCmd$[ebp]
	movss	DWORD PTR tv507[ebp], xmm0
$LN110@Pitch:
	movss	xmm0, DWORD PTR tv507[ebp]
	movss	DWORD PTR _maxCmd$[ebp], xmm0
$LN80@Pitch:

; 137  : 				//maxCmd *= (GRAVITY/(qsom*cnalpha));
; 138  : 				//maxCmd = min(maxCmd, aoamax);
; 139  : 				
; 140  : 				
; 141  : 
; 142  : 				//TJL 04/10/04 Adding limiter
; 143  : 				//TJL 05/07/04 Removing the dreaded code as this may have caused
; 144  : 				//major issues in the AI floating point calculations 
; 145  : 				//but I don't know why.  Possibly even missing aircraft!
; 146  : 			/*
; 147  : 				limiter = gLimiterMgr->GetLimiter(PosGLimiter, vehicleIndex);
; 148  : 				if (limiter)
; 149  : 					maxGs = limiter->Limit(alpha);
; 150  : 			*/
; 151  : 					
; 152  : 
; 153  : 			}	
; 154  : 
; 155  : 			if(platform->IsF16() )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?IsF16@AircraftClass@@QAEHXZ		; AircraftClass::IsF16
	test	eax, eax
	je	$LN58@Pitch

; 156  : 			{
; 157  : 				if(!IsSet(MPOverride) )

	push	262144					; 00040000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN78@Pitch

; 158  : 				{
; 159  : 					//negative G limiter
; 160  : 					if(gearPos)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1552]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN77@Pitch

; 161  : 					{
; 162  : 						maxNegGs = -1.0F;

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _maxNegGs$[ebp], xmm0

; 163  : 					}
; 164  : 					else

	jmp	SHORT $LN75@Pitch
$LN77@Pitch:

; 165  : 					{
; 166  : 						maxNegGs = -3.0F;

	movss	xmm0, DWORD PTR __real@c0400000
	movss	DWORD PTR _maxNegGs$[ebp], xmm0

; 167  : 						limiter = gLimiterMgr->GetLimiter(NegGLimiter,vehicleIndex);

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+92]
	push	ecx
	push	0
	mov	ecx, DWORD PTR ?gLimiterMgr@@3PAVLimiterMgrClass@@A ; gLimiterMgr
	call	?GetLimiter@LimiterMgrClass@@QAEPAVLimiter@@HH@Z ; LimiterMgrClass::GetLimiter
	mov	DWORD PTR _limiter$[ebp], eax

; 168  : 						if(limiter)

	cmp	DWORD PTR _limiter$[ebp], 0
	je	SHORT $LN75@Pitch

; 169  : 							maxNegGs = limiter->Limit(vcas);						

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1124]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _limiter$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _limiter$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	fstp	DWORD PTR _maxNegGs$[ebp]
$LN75@Pitch:

; 170  : 					}
; 171  : 					minCmd = max(maxNegGs*GRAVITY/(qsom*cnalpha), -10.0F);

	movss	xmm0, DWORD PTR _maxNegGs$[ebp]
	mulss	xmm0, DWORD PTR __real@4200b53f
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+648]
	mulss	xmm1, DWORD PTR [edx+140]
	divss	xmm0, xmm1
	comiss	xmm0, DWORD PTR __real@c1200000
	jbe	SHORT $LN111@Pitch
	movss	xmm0, DWORD PTR _maxNegGs$[ebp]
	mulss	xmm0, DWORD PTR __real@4200b53f
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+648]
	mulss	xmm1, DWORD PTR [ecx+140]
	divss	xmm0, xmm1
	movss	DWORD PTR tv546[ebp], xmm0
	jmp	SHORT $LN112@Pitch
$LN111@Pitch:
	movss	xmm0, DWORD PTR __real@c1200000
	movss	DWORD PTR tv546[ebp], xmm0
$LN112@Pitch:
	movss	xmm0, DWORD PTR tv546[ebp]
	movss	DWORD PTR _minCmd$[ebp], xmm0

; 172  : 				}
; 173  : 				else

	jmp	$LN74@Pitch
$LN78@Pitch:

; 174  : 				{
; 175  : 					minCmd = max(gsAvail*(-1)*GRAVITY/(qsom*cnalpha),-9.0F);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+56]
	mulss	xmm0, DWORD PTR __real@bf800000
	mulss	xmm0, DWORD PTR __real@4200b53f
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+648]
	mulss	xmm1, DWORD PTR [ecx+140]
	divss	xmm0, xmm1
	comiss	xmm0, DWORD PTR __real@c1100000
	jbe	SHORT $LN113@Pitch
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+56]
	mulss	xmm0, DWORD PTR __real@bf800000
	mulss	xmm0, DWORD PTR __real@4200b53f
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+648]
	mulss	xmm1, DWORD PTR [ecx+140]
	divss	xmm0, xmm1
	movss	DWORD PTR tv566[ebp], xmm0
	jmp	SHORT $LN114@Pitch
$LN113@Pitch:
	movss	xmm0, DWORD PTR __real@c1100000
	movss	DWORD PTR tv566[ebp], xmm0
$LN114@Pitch:
	movss	xmm0, DWORD PTR tv566[ebp]
	movss	DWORD PTR _minCmd$[ebp], xmm0
$LN74@Pitch:

; 176  : 				}
; 177  : 
; 178  : 				if (g_bNewFm )

	movzx	edx, BYTE PTR ?g_bNewFm@@3_NA		; g_bNewFm
	test	edx, edx
	je	$LN73@Pitch

; 179  : 				{
; 180  : 					float overshoot = alpha - maxCmd;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1152]
	subss	xmm0, DWORD PTR _maxCmd$[ebp]
	movss	DWORD PTR _overshoot$1[ebp], xmm0

; 181  : 					float minspeed = 90.0f;

	movss	xmm0, DWORD PTR __real@42b40000
	movss	DWORD PTR _minspeed$5[ebp], xmm0

; 182  : 					if(stallMode == None)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1248], 0
	jne	$LN65@Pitch

; 183  : 					{
; 184  : 						alphaError = 0; 

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _alphaError$[ebp], xmm0

; 185  : 						float alphadelta = maxCmd-2.0f - alpha;

	movss	xmm0, DWORD PTR _maxCmd$[ebp]
	subss	xmm0, DWORD PTR __real@40000000
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+1152]
	movss	DWORD PTR _alphadelta$4[ebp], xmm0

; 186  : 						if (alphadelta <0 )//aoa has overshot max

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _alphadelta$4[ebp]
	jbe	$LN71@Pitch

; 187  : 						{
; 188  : 							alphaError += alphadelta*0.4f;

	movss	xmm0, DWORD PTR _alphadelta$4[ebp]
	mulss	xmm0, DWORD PTR __real@3ecccccd
	addss	xmm0, DWORD PTR _alphaError$[ebp]
	movss	DWORD PTR _alphaError$[ebp], xmm0

; 189  : 			
; 190  : 							if (alpdot >0) // aoa going up 

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1300]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN70@Pitch

; 191  : 							{
; 192  : 								float slowspeedfactor =0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _slowspeedfactor$3[ebp], xmm0

; 193  : 								float slowspeed = 200.0f;

	movss	xmm0, DWORD PTR __real@43480000
	movss	DWORD PTR _slowspeed$6[ebp], xmm0

; 194  : 								if (vcas < slowspeed) slowspeedfactor = ((slowspeed-vcas)/slowspeed);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _slowspeed$6[ebp]
	comiss	xmm0, DWORD PTR [ecx+1124]
	jbe	SHORT $LN69@Pitch
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _slowspeed$6[ebp]
	subss	xmm0, DWORD PTR [edx+1124]
	divss	xmm0, DWORD PTR _slowspeed$6[ebp]
	movss	DWORD PTR _slowspeedfactor$3[ebp], xmm0
$LN69@Pitch:

; 195  : 								//vcas = 0 -> ssf = 1
; 196  : 								//vcas = 130 -> ssf = 0
; 197  : 								alphaError += min(10.0f,alpdot)*(0.2f+slowspeedfactor*0.7f); 

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1300]
	comiss	xmm0, DWORD PTR __real@41200000
	jbe	SHORT $LN115@Pitch
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR tv593[ebp], xmm0
	jmp	SHORT $LN116@Pitch
$LN115@Pitch:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1300]
	movss	DWORD PTR tv593[ebp], xmm0
$LN116@Pitch:
	movss	xmm0, DWORD PTR _slowspeedfactor$3[ebp]
	mulss	xmm0, DWORD PTR __real@3f333333
	addss	xmm0, DWORD PTR __real@3e4ccccd
	mulss	xmm0, DWORD PTR tv593[ebp]
	addss	xmm0, DWORD PTR _alphaError$[ebp]
	movss	DWORD PTR _alphaError$[ebp], xmm0

; 198  : 							}
; 199  : 							else // we are recovering

	jmp	SHORT $LN68@Pitch
$LN70@Pitch:

; 200  : 							alphaError -= alpdot*0.9f;// slow down the return

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1300]
	mulss	xmm0, DWORD PTR __real@3f666666
	movss	xmm1, DWORD PTR _alphaError$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _alphaError$[ebp], xmm1
$LN68@Pitch:
	jmp	SHORT $LN66@Pitch
$LN71@Pitch:

; 201  : 						}
; 202  : 						else if(!IsSet(CATLimiterIII)) 

	push	2097152					; 00200000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN66@Pitch

; 203  : 						{// aoa is below max
; 204  : 						alphaError += alphadelta* 0.1f;//aoa elastic  only cat I otw up

	movss	xmm0, DWORD PTR _alphadelta$4[ebp]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	addss	xmm0, DWORD PTR _alphaError$[ebp]
	movss	DWORD PTR _alphaError$[ebp], xmm0
$LN66@Pitch:

; 205  : 						}
; 206  : 						 if (vcas < minspeed)//simulate we loose authority

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _minspeed$5[ebp]
	comiss	xmm0, DWORD PTR [eax+1124]
	jbe	SHORT $LN65@Pitch

; 207  : 						{
; 208  : 							alphaError += ((minspeed-vcas)/minspeed)*10*(float)fabs(alpdot);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _minspeed$5[ebp]
	subss	xmm0, DWORD PTR [ecx+1124]
	divss	xmm0, DWORD PTR _minspeed$5[ebp]
	mulss	xmm0, DWORD PTR __real@41200000
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm1, DWORD PTR [edx+1300]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv2374[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1783[ebp]
	movss	xmm0, DWORD PTR tv2374[ebp]
	mulss	xmm0, DWORD PTR tv1783[ebp]
	addss	xmm0, DWORD PTR _alphaError$[ebp]
	movss	DWORD PTR _alphaError$[ebp], xmm0
$LN65@Pitch:

; 209  : 						}
; 210  : 					}
; 211  : 					if (maxgcmd) maxCmd = min(maxCmd + alphaError,maxgcmd);

	movss	xmm0, DWORD PTR _maxgcmd$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN64@Pitch
	movss	xmm0, DWORD PTR _maxCmd$[ebp]
	addss	xmm0, DWORD PTR _alphaError$[ebp]
	movss	xmm1, DWORD PTR _maxgcmd$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN117@Pitch
	movss	xmm0, DWORD PTR _maxCmd$[ebp]
	addss	xmm0, DWORD PTR _alphaError$[ebp]
	movss	DWORD PTR tv627[ebp], xmm0
	jmp	SHORT $LN118@Pitch
$LN117@Pitch:
	movss	xmm0, DWORD PTR _maxgcmd$[ebp]
	movss	DWORD PTR tv627[ebp], xmm0
$LN118@Pitch:
	movss	xmm0, DWORD PTR tv627[ebp]
	movss	DWORD PTR _maxCmd$[ebp], xmm0
$LN64@Pitch:

; 212  : 					maxCmd = max(minCmd,maxCmd);

	movss	xmm0, DWORD PTR _minCmd$[ebp]
	comiss	xmm0, DWORD PTR _maxCmd$[ebp]
	jbe	SHORT $LN119@Pitch
	movss	xmm0, DWORD PTR _minCmd$[ebp]
	movss	DWORD PTR tv629[ebp], xmm0
	jmp	SHORT $LN120@Pitch
$LN119@Pitch:
	movss	xmm0, DWORD PTR _maxCmd$[ebp]
	movss	DWORD PTR tv629[ebp], xmm0
$LN120@Pitch:
	movss	xmm0, DWORD PTR tv629[ebp]
	movss	DWORD PTR _maxCmd$[ebp], xmm0
$LN73@Pitch:

; 213  : 				}
; 214  : 
; 215  : 				if (alpha - alphaError > maxCmd)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1152]
	subss	xmm0, DWORD PTR _alphaError$[ebp]
	comiss	xmm0, DWORD PTR _maxCmd$[ebp]
	jbe	$LN63@Pitch

; 216  : 				{
; 217  : 					if (!g_bNewFm)

	movzx	ecx, BYTE PTR ?g_bNewFm@@3_NA		; g_bNewFm
	test	ecx, ecx
	jne	SHORT $LN62@Pitch

; 218  : 					pshape = max(-1.0F, (maxCmd - alpha - alphaError)/4.0F);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _maxCmd$[ebp]
	subss	xmm0, DWORD PTR [edx+1152]
	subss	xmm0, DWORD PTR _alphaError$[ebp]
	divss	xmm0, DWORD PTR __real@40800000
	movss	xmm1, DWORD PTR __real@bf800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN121@Pitch
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv649[ebp], xmm0
	jmp	SHORT $LN122@Pitch
$LN121@Pitch:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _maxCmd$[ebp]
	subss	xmm0, DWORD PTR [eax+1152]
	subss	xmm0, DWORD PTR _alphaError$[ebp]
	divss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR tv649[ebp], xmm0
$LN122@Pitch:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv649[ebp]
	movss	DWORD PTR [ecx+656], xmm0
	jmp	SHORT $LN60@Pitch
$LN62@Pitch:

; 219  : 					else if (stallMode == None)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+1248], 0
	jne	SHORT $LN60@Pitch

; 220  : 					pshape = pshape* 1.0f-((alpha - alphaError-maxCmd)/3.0f);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+656]
	mulss	xmm0, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1152]
	subss	xmm1, DWORD PTR _alphaError$[ebp]
	subss	xmm1, DWORD PTR _maxCmd$[ebp]
	divss	xmm1, DWORD PTR __real@40400000
	subss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+656], xmm0
$LN60@Pitch:

; 221  : 
; 222  : 
; 223  : 				}

	jmp	$LN58@Pitch
$LN63@Pitch:

; 224  : 				else if(alpha + alphaError < minCmd)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1152]
	addss	xmm0, DWORD PTR _alphaError$[ebp]
	movss	xmm1, DWORD PTR _minCmd$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN58@Pitch

; 225  : 				{
; 226  : 					pshape = min(1.0F,(minCmd - alpha + alphaError)/4.0F);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _minCmd$[ebp]
	subss	xmm0, DWORD PTR [ecx+1152]
	addss	xmm0, DWORD PTR _alphaError$[ebp]
	divss	xmm0, DWORD PTR __real@40800000
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN123@Pitch
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv679[ebp], xmm0
	jmp	SHORT $LN124@Pitch
$LN123@Pitch:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _minCmd$[ebp]
	subss	xmm0, DWORD PTR [edx+1152]
	addss	xmm0, DWORD PTR _alphaError$[ebp]
	divss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR tv679[ebp], xmm0
$LN124@Pitch:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv679[ebp]
	movss	DWORD PTR [eax+656], xmm0
$LN58@Pitch:

; 227  : 				}
; 228  : 			}					
; 229  : 		}
; 230  : 		
; 231  : 		if (pshape >= 0.0)

	mov	ecx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+656]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN57@Pitch

; 232  : 		{
; 233  : 			ptcmd = pshape * (maxCmd );

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+656]
	mulss	xmm0, DWORD PTR _maxCmd$[ebp]
	movss	DWORD PTR _ptcmd$[ebp], xmm0

; 234  : 		}
; 235  : 		else 

	jmp	SHORT $LN56@Pitch
$LN57@Pitch:

; 236  : 			ptcmd = -pshape * (minCmd);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+656]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _minCmd$[ebp]
	movss	DWORD PTR _ptcmd$[ebp], xmm0
$LN56@Pitch:

; 237  : 				
; 238  : 		/*---------------------------*/
; 239  : 		/* Forward path error signal */
; 240  : 		/*---------------------------*/
; 241  : 		error  = (ptcmd - (alpha - aoabias)) * kp05;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1152]
	subss	xmm0, DWORD PTR [edx+148]
	movss	xmm1, DWORD PTR _ptcmd$[ebp]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+1380]
	movss	DWORD PTR _error$[ebp], xmm1

; 242  : 		eprop  = kp02 * error;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1368]
	mulss	xmm0, DWORD PTR _error$[ebp]
	movss	DWORD PTR _eprop$[ebp], xmm0

; 243  : 		eintg1 = kp03 * error;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1372]
	mulss	xmm0, DWORD PTR _error$[ebp]
	movss	DWORD PTR _eintg1$[ebp], xmm0

; 244  : 	}
; 245  : 	//Go To G Command
; 246  : 	else

	jmp	$LN55@Pitch
$LN93@Pitch:

; 247  : 	{
; 248  : 		/*-----------------*/
; 249  : 		/* NZ command path */
; 250  : 		/*-----------------*/
; 251  : 		ptcmd = pshape*kp01;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+656]
	mulss	xmm0, DWORD PTR [ecx+1364]
	movss	DWORD PTR _ptcmd$[ebp], xmm0

; 252  : 		
; 253  : 		maxNegGs = -3.0F;

	movss	xmm0, DWORD PTR __real@c0400000
	movss	DWORD PTR _maxNegGs$[ebp], xmm0

; 254  : 		//me123 OWLOOK switch needet to enable overg's
; 255  : 		//if (g_bEnableAircraftLimits)	MI
; 256  : 
; 257  : // 2003-03-12 MN changed to check for player and F-16
; 258  : // guys, this code is also used by ALL AI planes in complex mode (having a TU-16 with 9G limit !!!)
; 259  : 		if(SimDriver.GetPlayerEntity() && platform == SimDriver.GetPlayerEntity() && platform->IsAirplane()  && platform->IsF16()) // 2002-03-19 MODIFIED BY S.G. Lets make sure it's an airplane first. Seems odd to happen here but it CTD after ejecting (BT 1071)

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	SHORT $LN54@Pitch
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+1088], eax
	jne	SHORT $LN54@Pitch
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+1088]
	mov	edx, DWORD PTR [eax+192]
	call	edx
	test	eax, eax
	je	SHORT $LN54@Pitch
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	call	?IsF16@AircraftClass@@QAEHXZ		; AircraftClass::IsF16
	test	eax, eax
	je	SHORT $LN54@Pitch

; 260  : 		maxCmd = 9.0f ;	

	movss	xmm0, DWORD PTR __real@41100000
	movss	DWORD PTR _maxCmd$[ebp], xmm0

; 261  : 		else

	jmp	SHORT $LN53@Pitch
$LN54@Pitch:

; 262  : 		maxCmd = curMaxGs ;// me123 status ok. changed from = curMaxGs to 9.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1244]
	movss	DWORD PTR _maxCmd$[ebp], xmm0
$LN53@Pitch:

; 263  : 		
; 264  : 		if( platform->IsF16() )

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1088]
	call	?IsF16@AircraftClass@@QAEHXZ		; AircraftClass::IsF16
	test	eax, eax
	je	$LN48@Pitch

; 265  : 		{
; 266  : 			if(!IsSet(MPOverride))

	push	262144					; 00040000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN51@Pitch

; 267  : 			{
; 268  : 				limiter = gLimiterMgr->GetLimiter(NegGLimiter,vehicleIndex);

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+92]
	push	ecx
	push	0
	mov	ecx, DWORD PTR ?gLimiterMgr@@3PAVLimiterMgrClass@@A ; gLimiterMgr
	call	?GetLimiter@LimiterMgrClass@@QAEPAVLimiter@@HH@Z ; LimiterMgrClass::GetLimiter
	mov	DWORD PTR _limiter$[ebp], eax

; 269  : 				if(limiter)

	cmp	DWORD PTR _limiter$[ebp], 0
	je	SHORT $LN50@Pitch

; 270  : 					maxNegGs = limiter->Limit(vcas);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1124]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _limiter$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _limiter$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	fstp	DWORD PTR _maxNegGs$[ebp]
$LN50@Pitch:

; 271  : 				maxNegGs = max(maxNegGs, -10.0F/(GRAVITY/(qsom*cnalpha)) );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+648]
	mulss	xmm0, DWORD PTR [edx+140]
	movss	xmm1, DWORD PTR __real@4200b53f
	divss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@c1200000
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR _maxNegGs$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN125@Pitch
	movss	xmm0, DWORD PTR _maxNegGs$[ebp]
	movss	DWORD PTR tv770[ebp], xmm0
	jmp	SHORT $LN126@Pitch
$LN125@Pitch:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+648]
	mulss	xmm0, DWORD PTR [ecx+140]
	movss	xmm1, DWORD PTR __real@4200b53f
	divss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@c1200000
	divss	xmm0, xmm1
	movss	DWORD PTR tv770[ebp], xmm0
$LN126@Pitch:
	movss	xmm0, DWORD PTR tv770[ebp]
	movss	DWORD PTR _maxNegGs$[ebp], xmm0

; 272  : 			}
; 273  : 			else

	jmp	SHORT $LN49@Pitch
$LN51@Pitch:

; 274  : 				maxNegGs = gsAvail*(-1);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+56]
	mulss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _maxNegGs$[ebp], xmm0
$LN49@Pitch:

; 275  : 			
; 276  : 			if(alpha < -10.0F && !IsSet(MPOverride))

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c1200000
	comiss	xmm0, DWORD PTR [eax+1152]
	jbe	$LN48@Pitch
	push	262144					; 00040000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN48@Pitch

; 277  : 			{
; 278  : 				pshape = min(1.0F,(aoamin - alpha)/4.0F);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+172]
	subss	xmm0, DWORD PTR [edx+1152]
	divss	xmm0, DWORD PTR __real@40800000
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN127@Pitch
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv793[ebp], xmm0
	jmp	SHORT $LN128@Pitch
$LN127@Pitch:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+172]
	subss	xmm0, DWORD PTR [ecx+1152]
	divss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR tv793[ebp], xmm0
$LN128@Pitch:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv793[ebp]
	movss	DWORD PTR [edx+656], xmm0

; 279  : 				ptcmd = pshape*kp01;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+656]
	mulss	xmm0, DWORD PTR [ecx+1364]
	movss	DWORD PTR _ptcmd$[ebp], xmm0
$LN48@Pitch:

; 280  : 			}			
; 281  : 		}
; 282  : 
; 283  : 		if(IsSet(CATLimiterIII))

	push	2097152					; 00200000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN44@Pitch

; 284  : 		{
; 285  : 			limiter = gLimiterMgr->GetLimiter(CatIIIAOALimiter,vehicleIndex);

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+92]
	push	eax
	push	6
	mov	ecx, DWORD PTR ?gLimiterMgr@@3PAVLimiterMgrClass@@A ; gLimiterMgr
	call	?GetLimiter@LimiterMgrClass@@QAEPAVLimiter@@HH@Z ; LimiterMgrClass::GetLimiter
	mov	DWORD PTR _limiter$[ebp], eax

; 286  : 			if(limiter)

	cmp	DWORD PTR _limiter$[ebp], 0
	je	SHORT $LN46@Pitch

; 287  : 				maxCmd = limiter->Limit(alpha)/( GRAVITY/(qsom*cnalpha));

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1152]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _limiter$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _limiter$[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	fstp	DWORD PTR tv1906[ebp]
	movss	xmm0, DWORD PTR tv1906[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+648]
	mulss	xmm1, DWORD PTR [ecx+140]
	movss	xmm2, DWORD PTR __real@4200b53f
	divss	xmm2, xmm1
	divss	xmm0, xmm2
	movss	DWORD PTR _maxCmd$[ebp], xmm0
$LN46@Pitch:

; 288  : 
; 289  : 			// 2002-03-12 MN Check for player - if not, use curMaxGs (which is the case for all AI planes)
; 290  : 			AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$2[ebp], eax

; 291  : 			if(playerAC && this == playerAC->af && platform->IsF16()){

	cmp	DWORD PTR _playerAC$2[ebp], 0
	je	SHORT $LN45@Pitch
	mov	edx, DWORD PTR _playerAC$2[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+932]
	jne	SHORT $LN45@Pitch
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?IsF16@AircraftClass@@QAEHXZ		; AircraftClass::IsF16
	test	eax, eax
	je	SHORT $LN45@Pitch

; 292  : 				// 2002-03-19 MODIFIED BY S.G. Lets make sure it's an airplane first. SimDriver.GetPlayerEntity()->af might be invalid if the player ejects
; 293  : 				maxCmd = min(maxCmd, 9.0F) - platform->platformAngles.cosgam*cosmu_lim;//,me123 status ok. changed curMaxGs to 9.0

	movss	xmm0, DWORD PTR __real@41100000
	comiss	xmm0, DWORD PTR _maxCmd$[ebp]
	jbe	SHORT $LN129@Pitch
	movss	xmm0, DWORD PTR _maxCmd$[ebp]
	movss	DWORD PTR tv831[ebp], xmm0
	jmp	SHORT $LN130@Pitch
$LN129@Pitch:
	movss	xmm0, DWORD PTR __real@41100000
	movss	DWORD PTR tv831[ebp], xmm0
$LN130@Pitch:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [eax+368]
	mulss	xmm0, DWORD PTR _cosmu_lim$[ebp]
	movss	xmm1, DWORD PTR tv831[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _maxCmd$[ebp], xmm1

; 294  : 			}
; 295  : 			else {

	jmp	SHORT $LN44@Pitch
$LN45@Pitch:

; 296  : 				maxCmd = min(maxCmd, curMaxGs) - platform->platformAngles.cosgam*cosmu_lim;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1244]
	comiss	xmm0, DWORD PTR _maxCmd$[ebp]
	jbe	SHORT $LN131@Pitch
	movss	xmm0, DWORD PTR _maxCmd$[ebp]
	movss	DWORD PTR tv846[ebp], xmm0
	jmp	SHORT $LN132@Pitch
$LN131@Pitch:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1244]
	movss	DWORD PTR tv846[ebp], xmm0
$LN132@Pitch:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR [ecx+368]
	mulss	xmm0, DWORD PTR _cosmu_lim$[ebp]
	movss	xmm1, DWORD PTR tv846[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _maxCmd$[ebp], xmm1
$LN44@Pitch:

; 297  : 			}
; 298  : 		}
; 299  : 		
; 300  : 		ptcmd = min ( max (ptcmd, max(maxNegGs,gsAvail*(-1)) ), min(gsAvail,maxCmd));

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+56]
	mulss	xmm0, DWORD PTR __real@bf800000
	movss	xmm1, DWORD PTR _maxNegGs$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN133@Pitch
	movss	xmm0, DWORD PTR _maxNegGs$[ebp]
	movss	DWORD PTR tv863[ebp], xmm0
	jmp	SHORT $LN134@Pitch
$LN133@Pitch:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+56]
	mulss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv863[ebp], xmm0
$LN134@Pitch:
	movss	xmm0, DWORD PTR _ptcmd$[ebp]
	comiss	xmm0, DWORD PTR tv863[ebp]
	jbe	SHORT $LN137@Pitch
	movss	xmm0, DWORD PTR _ptcmd$[ebp]
	movss	DWORD PTR tv873[ebp], xmm0
	jmp	SHORT $LN138@Pitch
$LN137@Pitch:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+56]
	mulss	xmm0, DWORD PTR __real@bf800000
	movss	xmm1, DWORD PTR _maxNegGs$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN135@Pitch
	movss	xmm0, DWORD PTR _maxNegGs$[ebp]
	movss	DWORD PTR tv872[ebp], xmm0
	jmp	SHORT $LN136@Pitch
$LN135@Pitch:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+56]
	mulss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv872[ebp], xmm0
$LN136@Pitch:
	movss	xmm0, DWORD PTR tv872[ebp]
	movss	DWORD PTR tv873[ebp], xmm0
$LN138@Pitch:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _maxCmd$[ebp]
	comiss	xmm0, DWORD PTR [eax+56]
	jbe	SHORT $LN139@Pitch
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+56]
	movss	DWORD PTR tv879[ebp], xmm0
	jmp	SHORT $LN140@Pitch
$LN139@Pitch:
	movss	xmm0, DWORD PTR _maxCmd$[ebp]
	movss	DWORD PTR tv879[ebp], xmm0
$LN140@Pitch:
	movss	xmm0, DWORD PTR tv879[ebp]
	comiss	xmm0, DWORD PTR tv873[ebp]
	jbe	$LN149@Pitch
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+56]
	mulss	xmm0, DWORD PTR __real@bf800000
	movss	xmm1, DWORD PTR _maxNegGs$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN141@Pitch
	movss	xmm0, DWORD PTR _maxNegGs$[ebp]
	movss	DWORD PTR tv888[ebp], xmm0
	jmp	SHORT $LN142@Pitch
$LN141@Pitch:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+56]
	mulss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv888[ebp], xmm0
$LN142@Pitch:
	movss	xmm0, DWORD PTR _ptcmd$[ebp]
	comiss	xmm0, DWORD PTR tv888[ebp]
	jbe	SHORT $LN145@Pitch
	movss	xmm0, DWORD PTR _ptcmd$[ebp]
	movss	DWORD PTR tv898[ebp], xmm0
	jmp	SHORT $LN146@Pitch
$LN145@Pitch:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+56]
	mulss	xmm0, DWORD PTR __real@bf800000
	movss	xmm1, DWORD PTR _maxNegGs$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN143@Pitch
	movss	xmm0, DWORD PTR _maxNegGs$[ebp]
	movss	DWORD PTR tv897[ebp], xmm0
	jmp	SHORT $LN144@Pitch
$LN143@Pitch:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+56]
	mulss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv897[ebp], xmm0
$LN144@Pitch:
	movss	xmm0, DWORD PTR tv897[ebp]
	movss	DWORD PTR tv898[ebp], xmm0
$LN146@Pitch:
	movss	xmm0, DWORD PTR tv898[ebp]
	movss	DWORD PTR tv905[ebp], xmm0
	jmp	SHORT $LN150@Pitch
$LN149@Pitch:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _maxCmd$[ebp]
	comiss	xmm0, DWORD PTR [eax+56]
	jbe	SHORT $LN147@Pitch
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+56]
	movss	DWORD PTR tv904[ebp], xmm0
	jmp	SHORT $LN148@Pitch
$LN147@Pitch:
	movss	xmm0, DWORD PTR _maxCmd$[ebp]
	movss	DWORD PTR tv904[ebp], xmm0
$LN148@Pitch:
	movss	xmm0, DWORD PTR tv904[ebp]
	movss	DWORD PTR tv905[ebp], xmm0
$LN150@Pitch:
	movss	xmm0, DWORD PTR tv905[ebp]
	movss	DWORD PTR _ptcmd$[ebp], xmm0

; 301  : 		
; 302  : 		/*-----------------------------*/
; 303  : 		/* nz load factor loop closure */
; 304  : 		/*-----------------------------*/
; 305  : 		//TJL 03/28/04 Removing the gear pos bias
; 306  : 		//put it back, just because no time to test what the issue here is with pitch errors
; 307  : 		if(IsSet(Simplified))

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN43@Pitch

; 308  : 		{
; 309  : 			error = (ptcmd - (nzcgs - platform->platformAngles.cosmu * platform->platformAngles.cosgam - 0.1F*gearPos*qsom/GRAVITY)) * kp05;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR [eax+384]
	mulss	xmm0, DWORD PTR [edx+368]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+268]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3dcccccd
	mulss	xmm0, DWORD PTR [ecx+1552]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+648]
	divss	xmm0, DWORD PTR __real@4200b53f
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR _ptcmd$[ebp]
	subss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+1380]
	movss	DWORD PTR _error$[ebp], xmm0

; 310  : 			//error = (ptcmd - (nzcgs - platform->platformAngles.cosmu * platform->platformAngles.cosgam - 0.1F*0.0f*qsom/GRAVITY)) * kp05;
; 311  : 		}
; 312  : 		else

	jmp	SHORT $LN42@Pitch
$LN43@Pitch:

; 313  : 		{
; 314  : 			error = (ptcmd - (nzcgs - cosmu_lim* platform->platformAngles.cosgam - 0.1F*gearPos*qsom/GRAVITY)) * kp05;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR _cosmu_lim$[ebp]
	mulss	xmm0, DWORD PTR [edx+368]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+268]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3dcccccd
	mulss	xmm0, DWORD PTR [ecx+1552]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+648]
	divss	xmm0, DWORD PTR __real@4200b53f
	subss	xmm1, xmm0
	movss	xmm0, DWORD PTR _ptcmd$[ebp]
	subss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+1380]
	movss	DWORD PTR _error$[ebp], xmm0
$LN42@Pitch:

; 315  : 			//error = (ptcmd - (nzcgs - cosmu_lim* platform->platformAngles.cosgam - 0.1F*0.0f*qsom/GRAVITY)) * kp05;
; 316  : 		}
; 317  : 
; 318  : 		eprop = kp02*error;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1368]
	mulss	xmm0, DWORD PTR _error$[ebp]
	movss	DWORD PTR _eprop$[ebp], xmm0

; 319  : 		eintg1 = kp03*error;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1372]
	mulss	xmm0, DWORD PTR _error$[ebp]
	movss	DWORD PTR _eintg1$[ebp], xmm0
$LN55@Pitch:

; 320  : 	}
; 321  : 	
; 322  : 	eintg = Math.FIAdamsBash (eintg1, SimLibMinorFrameTime, oldp02);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 308				; 00000134H
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR ?SimLibMinorFrameTime@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _eintg1$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?Math@@3VSIMLIB_MATH_CLASS@@A ; Math
	call	?FIAdamsBash@SIMLIB_MATH_CLASS@@QAEMMMQAM@Z ; SIMLIB_MATH_CLASS::FIAdamsBash
	fstp	DWORD PTR _eintg$[ebp]

; 323  : 	
; 324  : 	/*-------------*/
; 325  : 	/* aoa limiter */
; 326  : 	/*-------------*/
; 327  : 	
; 328  : 		if(qbar > 100.0f)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+644]
	comiss	xmm0, DWORD PTR __real@42c80000
	jbe	$LN41@Pitch

; 329  : 		{
; 330  : 			if(eintg > aoamax)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _eintg$[ebp]
	comiss	xmm0, DWORD PTR [edx+168]
	jbe	$LN40@Pitch

; 331  : 			{
; 332  : 				eintg       = aoamax;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+168]
	movss	DWORD PTR _eintg$[ebp], xmm0

; 333  : 				eprop       = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _eprop$[ebp], xmm0

; 334  : 				oldp02[0]   = aoamax;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+168]
	mov	DWORD PTR [edx+ecx+308], eax

; 335  : 				oldp02[1]   = aoamax;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+168]
	mov	DWORD PTR [edx+ecx+308], eax

; 336  : 				oldp02[2]   = 0.0;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+ecx+308], xmm0

; 337  : 				oldp02[3]   = 0.0;

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax+308], xmm0
	jmp	$LN38@Pitch
$LN40@Pitch:

; 338  : 			}
; 339  : 			else if(eintg < aoamin)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+172]
	comiss	xmm0, DWORD PTR _eintg$[ebp]
	jbe	$LN38@Pitch

; 340  : 			{
; 341  : 				eintg       = aoamin;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+172]
	movss	DWORD PTR _eintg$[ebp], xmm0

; 342  : 				eprop       = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _eprop$[ebp], xmm0

; 343  : 				oldp02[0]   = aoamin;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+172]
	mov	DWORD PTR [edx+ecx+308], eax

; 344  : 				oldp02[1]   = aoamin;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+172]
	mov	DWORD PTR [edx+ecx+308], eax

; 345  : 				oldp02[2]   = 0.0;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+ecx+308], xmm0

; 346  : 				oldp02[3]   = 0.0;

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax+308], xmm0
$LN38@Pitch:

; 347  : 			}
; 348  : 		}
; 349  : 		else

	jmp	$LN34@Pitch
$LN41@Pitch:

; 350  : 		{
; 351  : 			if(eintg > aoamax + alphaError )

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+168]
	addss	xmm0, DWORD PTR _alphaError$[ebp]
	movss	xmm1, DWORD PTR _eintg$[ebp]
	comiss	xmm1, xmm0
	jbe	$LN36@Pitch

; 352  : 			{
; 353  : 				eintg       = aoamax + alphaError;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+168]
	addss	xmm0, DWORD PTR _alphaError$[ebp]
	movss	DWORD PTR _eintg$[ebp], xmm0

; 354  : 				eprop       = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _eprop$[ebp], xmm0

; 355  : 				oldp02[0]   = eintg;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _eintg$[ebp]
	movss	DWORD PTR [edx+ecx+308], xmm0

; 356  : 				oldp02[1]   = eintg;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _eintg$[ebp]
	movss	DWORD PTR [ecx+eax+308], xmm0

; 357  : 				oldp02[2]   = eprop;

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _eprop$[ebp]
	movss	DWORD PTR [eax+edx+308], xmm0

; 358  : 				oldp02[3]   = eprop;

	mov	ecx, 4
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _eprop$[ebp]
	movss	DWORD PTR [edx+ecx+308], xmm0
	jmp	$LN34@Pitch
$LN36@Pitch:

; 359  : 			}
; 360  : 			else if(eintg < aoamin - alphaError)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+172]
	subss	xmm0, DWORD PTR _alphaError$[ebp]
	comiss	xmm0, DWORD PTR _eintg$[ebp]
	jbe	$LN34@Pitch

; 361  : 			{
; 362  : 				eintg       = aoamin - alphaError;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+172]
	subss	xmm0, DWORD PTR _alphaError$[ebp]
	movss	DWORD PTR _eintg$[ebp], xmm0

; 363  : 				eprop       = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _eprop$[ebp], xmm0

; 364  : 				oldp02[0]   = eintg;

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _eintg$[ebp]
	movss	DWORD PTR [eax+edx+308], xmm0

; 365  : 				oldp02[1]   = eintg;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _eintg$[ebp]
	movss	DWORD PTR [edx+ecx+308], xmm0

; 366  : 				oldp02[2]   = eprop;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _eprop$[ebp]
	movss	DWORD PTR [ecx+eax+308], xmm0

; 367  : 				oldp02[3]   = eprop;

	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _eprop$[ebp]
	movss	DWORD PTR [eax+edx+308], xmm0
$LN34@Pitch:

; 368  : 			}
; 369  : 		}
; 370  : 	
; 371  : 	/*---------------------------*/
; 372  : 	/* Update Alpha and alphadot */
; 373  : 	/*---------------------------*/
; 374  : 	aoacmd = eprop + eintg;

	movss	xmm0, DWORD PTR _eprop$[ebp]
	addss	xmm0, DWORD PTR _eintg$[ebp]
	movss	DWORD PTR _aoacmd$[ebp], xmm0

; 375  : 	if(IsSet(InAir))

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN33@Pitch

; 376  : 		aoacmd *= plsdamp;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _aoacmd$[ebp]
	mulss	xmm0, DWORD PTR [ecx+676]
	movss	DWORD PTR _aoacmd$[ebp], xmm0
$LN33@Pitch:

; 377  : 
; 378  : 	switch(stallMode)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1248]
	mov	DWORD PTR tv1047[ebp], eax
	mov	ecx, DWORD PTR tv1047[ebp]
	sub	ecx, 2
	mov	DWORD PTR tv1047[ebp], ecx
	cmp	DWORD PTR tv1047[ebp], 3
	ja	$LN31@Pitch
	mov	edx, DWORD PTR tv1047[ebp]
	jmp	DWORD PTR $LN159@Pitch[edx*4]
$LN30@Pitch:

; 379  : 	{
; 380  : 	case EnteringDeepStall:
; 381  : 		if( alpha > 0.0f)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1152]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN29@Pitch

; 382  : 			aoacmd = 60.0f + 5.0F * pshape;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40a00000
	mulss	xmm0, DWORD PTR [ecx+656]
	addss	xmm0, DWORD PTR __real@42700000
	movss	DWORD PTR _aoacmd$[ebp], xmm0

; 383  : 		else

	jmp	SHORT $LN28@Pitch
$LN29@Pitch:

; 384  : 			aoacmd = -40.0f + 5.0F * pshape;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40a00000
	mulss	xmm0, DWORD PTR [edx+656]
	addss	xmm0, DWORD PTR __real@c2200000
	movss	DWORD PTR _aoacmd$[ebp], xmm0
$LN28@Pitch:

; 385  : 		break;

	jmp	$LN31@Pitch
$LN27@Pitch:

; 386  : 		
; 387  : 	case DeepStall:
; 388  : 		if( alpha > 35.0f && qbar * platform->platformAngles.cosalp < 135.0f )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1152]
	comiss	xmm0, DWORD PTR __real@420c0000
	jbe	$LN26@Pitch
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+644]
	mulss	xmm0, DWORD PTR [edx+344]
	movss	xmm1, DWORD PTR __real@43070000
	comiss	xmm1, xmm0
	jbe	$LN26@Pitch

; 389  : 		{
; 390  : 			pshape *= max(1.0F - (float)fabs(r)*RTD/45.0F, 0.0F);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1140]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2104[ebp]
	movss	xmm0, DWORD PTR tv2104[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	divss	xmm0, DWORD PTR __real@42340000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	comiss	xmm1, DWORD PTR __real@00000000
	jbe	SHORT $LN151@Pitch
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1140]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2112[ebp]
	movss	xmm0, DWORD PTR tv2112[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	divss	xmm0, DWORD PTR __real@42340000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR tv1084[ebp], xmm1
	jmp	SHORT $LN152@Pitch
$LN151@Pitch:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv1084[ebp], xmm0
$LN152@Pitch:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+656]
	mulss	xmm0, DWORD PTR tv1084[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+656], xmm0

; 391  : 			
; 392  : 			if(oscillationTimer*pshape > 0)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+712]
	mulss	xmm0, DWORD PTR [eax+656]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN25@Pitch

; 393  : 				stallMagnitude += (float)fabs(pshape) * SimLibMinorFrameTime * 10.0F/(loadingFraction * loadingFraction);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+656]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2127[ebp]
	movss	xmm0, DWORD PTR tv2127[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMinorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@41200000
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1228]
	mulss	xmm1, DWORD PTR [eax+1228]
	divss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+1220]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1220], xmm0
	jmp	$LN22@Pitch
$LN25@Pitch:

; 394  : 			else if(pshape)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+656]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN23@Pitch

; 395  : 				stallMagnitude -= (float)fabs(pshape) * SimLibMinorFrameTime * 10.0F/(loadingFraction * loadingFraction);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+656]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2144[ebp]
	movss	xmm0, DWORD PTR tv2144[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMinorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@41200000
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1228]
	mulss	xmm1, DWORD PTR [eax+1228]
	divss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1220]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1220], xmm1

; 396  : 			else 

	jmp	SHORT $LN22@Pitch
$LN23@Pitch:

; 397  : 				stallMagnitude += (desiredMagnitude - stallMagnitude)/desiredMagnitude * SimLibMinorFrameTime/3;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1224]
	subss	xmm0, DWORD PTR [ecx+1220]
	mov	edx, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [edx+1224]
	mulss	xmm0, DWORD PTR ?SimLibMinorFrameTime@@3MA
	divss	xmm0, DWORD PTR __real@40400000
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+1220]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1220], xmm0
$LN22@Pitch:

; 398  : 			
; 399  : 			aoacmd = 60.0f + pshape * 5.0f + oscillationTimer * stallMagnitude * max(0.0F,(0.3F - (float)fabs(r))*3.3F);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1140]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2164[ebp]
	movss	xmm0, DWORD PTR __real@3e99999a
	subss	xmm0, DWORD PTR tv2164[ebp]
	mulss	xmm0, DWORD PTR __real@40533333
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN153@Pitch
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv1151[ebp], xmm0
	jmp	SHORT $LN154@Pitch
$LN153@Pitch:
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1140]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2174[ebp]
	movss	xmm0, DWORD PTR __real@3e99999a
	subss	xmm0, DWORD PTR tv2174[ebp]
	mulss	xmm0, DWORD PTR __real@40533333
	movss	DWORD PTR tv1151[ebp], xmm0
$LN154@Pitch:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+656]
	mulss	xmm0, DWORD PTR __real@40a00000
	addss	xmm0, DWORD PTR __real@42700000
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+712]
	mulss	xmm1, DWORD PTR [eax+1220]
	mulss	xmm1, DWORD PTR tv1151[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _aoacmd$[ebp], xmm0
	jmp	$LN15@Pitch
$LN26@Pitch:

; 400  : 		}
; 401  : 		else if(alpha < -20.0f && qbar * platform->platformAngles.cosalp < 135.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c1a00000
	comiss	xmm0, DWORD PTR [ecx+1152]
	jbe	$LN20@Pitch
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+644]
	mulss	xmm0, DWORD PTR [eax+344]
	movss	xmm1, DWORD PTR __real@43070000
	comiss	xmm1, xmm0
	jbe	$LN20@Pitch

; 402  : 		{
; 403  : 			pshape *= max(1.0F - (float)fabs(r)*RTD/45.0F, 0.0F);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1140]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2194[ebp]
	movss	xmm0, DWORD PTR tv2194[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	divss	xmm0, DWORD PTR __real@42340000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	comiss	xmm1, DWORD PTR __real@00000000
	jbe	SHORT $LN155@Pitch
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1140]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2202[ebp]
	movss	xmm0, DWORD PTR tv2202[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	divss	xmm0, DWORD PTR __real@42340000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR tv1182[ebp], xmm1
	jmp	SHORT $LN156@Pitch
$LN155@Pitch:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv1182[ebp], xmm0
$LN156@Pitch:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+656]
	mulss	xmm0, DWORD PTR tv1182[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+656], xmm0

; 404  : 			
; 405  : 			if(oscillationTimer*pshape > 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+712]
	mulss	xmm0, DWORD PTR [ecx+656]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN19@Pitch

; 406  : 				stallMagnitude += (float)fabs(pshape) * SimLibMinorFrameTime * 10.0F/(loadingFraction * loadingFraction);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+656]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2217[ebp]
	movss	xmm0, DWORD PTR tv2217[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMinorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@41200000
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+1228]
	mulss	xmm1, DWORD PTR [ecx+1228]
	divss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+1220]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1220], xmm0
	jmp	$LN16@Pitch
$LN19@Pitch:

; 407  : 			else if(pshape)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+656]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN17@Pitch

; 408  : 				stallMagnitude -= (float)fabs(pshape) * SimLibMinorFrameTime * 10.0F/(loadingFraction * loadingFraction);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+656]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2234[ebp]
	movss	xmm0, DWORD PTR tv2234[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMinorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@41200000
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+1228]
	mulss	xmm1, DWORD PTR [ecx+1228]
	divss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1220]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1220], xmm1

; 409  : 			else 

	jmp	SHORT $LN16@Pitch
$LN17@Pitch:

; 410  : 				stallMagnitude += (desiredMagnitude - stallMagnitude)/desiredMagnitude * SimLibMinorFrameTime/3;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1224]
	subss	xmm0, DWORD PTR [edx+1220]
	mov	eax, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [eax+1224]
	mulss	xmm0, DWORD PTR ?SimLibMinorFrameTime@@3MA
	divss	xmm0, DWORD PTR __real@40400000
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+1220]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1220], xmm0
$LN16@Pitch:

; 411  : 			
; 412  : 			aoacmd = -40.0f + pshape * 5.0f + oscillationTimer * stallMagnitude * max(0.0F,(0.3F - (float)fabs(r))*3.3F);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1140]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2254[ebp]
	movss	xmm0, DWORD PTR __real@3e99999a
	subss	xmm0, DWORD PTR tv2254[ebp]
	mulss	xmm0, DWORD PTR __real@40533333
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN157@Pitch
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv1249[ebp], xmm0
	jmp	SHORT $LN158@Pitch
$LN157@Pitch:
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1140]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2264[ebp]
	movss	xmm0, DWORD PTR __real@3e99999a
	subss	xmm0, DWORD PTR tv2264[ebp]
	mulss	xmm0, DWORD PTR __real@40533333
	movss	DWORD PTR tv1249[ebp], xmm0
$LN158@Pitch:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+656]
	mulss	xmm0, DWORD PTR __real@40a00000
	addss	xmm0, DWORD PTR __real@c2200000
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+712]
	mulss	xmm1, DWORD PTR [ecx+1220]
	mulss	xmm1, DWORD PTR tv1249[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _aoacmd$[ebp], xmm0

; 413  : 		}
; 414  : 		else

	jmp	SHORT $LN15@Pitch
$LN20@Pitch:

; 415  : 		{
; 416  : 			pitch = q;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1136]
	mov	DWORD PTR [edx+1312], ecx

; 417  : 			slice = r;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1140]
	mov	DWORD PTR [edx+1308], ecx

; 418  : 			stallMode = Recovering;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1248], 2

; 419  : 			stallMagnitude = 10.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [eax+1220], xmm0

; 420  : 			oldp02[5] = alpha;

	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1152]
	mov	DWORD PTR [edx+ecx+308], eax
$LN15@Pitch:

; 421  : 		}
; 422  : 		break;

	jmp	$LN31@Pitch
$LN14@Pitch:

; 423  : 		
; 424  : 	case Recovering:
; 425  : 		aoacmd = aoacmd + (oldp02[5] - aoacmd)*0.8F;

	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+308]
	subss	xmm0, DWORD PTR _aoacmd$[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	addss	xmm0, DWORD PTR _aoacmd$[ebp]
	movss	DWORD PTR _aoacmd$[ebp], xmm0

; 426  : 		oldp02[5] *= 0.9F;

	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+308]
	mulss	xmm0, DWORD PTR __real@3f666666
	mov	edx, 4
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+edx+308], xmm0

; 427  : 		break;

	jmp	$LN31@Pitch
$LN13@Pitch:

; 428  : 
; 429  : 	case Spinning:
; 430  : 		if(r)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1140]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN12@Pitch

; 431  : 		{
; 432  : 			if(platform->platformAngles.cosphi > 0.0F)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [eax+400]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN11@Pitch

; 433  : 				aoacmd = 60.0F + oscillationTimer * 5.0F/(float)fabs(r);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+712]
	mulss	xmm0, DWORD PTR __real@40a00000
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm1, DWORD PTR [edx+1140]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv2376[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2308[ebp]
	movss	xmm0, DWORD PTR tv2376[ebp]
	divss	xmm0, DWORD PTR tv2308[ebp]
	addss	xmm0, DWORD PTR __real@42700000
	movss	DWORD PTR _aoacmd$[ebp], xmm0

; 434  : 			else

	jmp	SHORT $LN10@Pitch
$LN11@Pitch:

; 435  : 				aoacmd = -40.0F - oscillationTimer * 5.0F/(float)fabs(r);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+712]
	mulss	xmm0, DWORD PTR __real@40a00000
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm1, DWORD PTR [ecx+1140]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv2378[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2318[ebp]
	movss	xmm0, DWORD PTR tv2378[ebp]
	divss	xmm0, DWORD PTR tv2318[ebp]
	movss	xmm1, DWORD PTR __real@c2200000
	subss	xmm1, xmm0
	movss	DWORD PTR _aoacmd$[ebp], xmm1
$LN10@Pitch:

; 436  : 		}
; 437  : 		else

	jmp	SHORT $LN7@Pitch
$LN12@Pitch:

; 438  : 		{
; 439  : 			if(platform->platformAngles.cosphi > 0.0F)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [eax+400]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN8@Pitch

; 440  : 				aoacmd = 60.0F + oscillationTimer * 5.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+712]
	mulss	xmm0, DWORD PTR __real@40a00000
	addss	xmm0, DWORD PTR __real@42700000
	movss	DWORD PTR _aoacmd$[ebp], xmm0

; 441  : 			else

	jmp	SHORT $LN7@Pitch
$LN8@Pitch:

; 442  : 				aoacmd = -40.0F - oscillationTimer * 5.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+712]
	mulss	xmm0, DWORD PTR __real@40a00000
	movss	xmm1, DWORD PTR __real@c2200000
	subss	xmm1, xmm0
	movss	DWORD PTR _aoacmd$[ebp], xmm1
$LN7@Pitch:
$LN31@Pitch:

; 443  : 		}
; 444  : 	}
; 445  : 	
; 446  : 	//if(!IsSet(InAir) && aoacmd < 0.0F)
; 447  : 	//	aoacmd = 0.0F;
; 448  : 
; 449  : 	PitchIt(aoacmd, SimLibMinorFrameTime);

	push	ecx
	movss	xmm0, DWORD PTR ?SimLibMinorFrameTime@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _aoacmd$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PitchIt@AirframeClass@@QAEXMM@Z	; AirframeClass::PitchIt

; 450  : 	
; 451  : 	switch(stallMode)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1248]
	mov	DWORD PTR tv1320[ebp], ecx
	cmp	DWORD PTR tv1320[ebp], 4
	je	SHORT $LN4@Pitch
	cmp	DWORD PTR tv1320[ebp], 5
	je	$LN2@Pitch
	cmp	DWORD PTR tv1320[ebp], 6
	je	SHORT $LN3@Pitch
	jmp	$LN1@Pitch
$LN4@Pitch:

; 452  : 	{
; 453  : 		case DeepStall:
; 454  : 			oldp02[5] *= 0.97F;

	mov	edx, 4
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+308]
	mulss	xmm0, DWORD PTR __real@3f7851ec
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+ecx+308], xmm0

; 455  : 			alpha += oldp02[5];

	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1152]
	addss	xmm0, DWORD PTR [edx+eax+308]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1152], xmm0

; 456  : 		break;

	jmp	$LN5@Pitch
$LN3@Pitch:

; 457  : 		case FlatSpin:
; 458  : 			oldp02[5] -= (90.0F + oldp02[5])* SimLibMinorFrameTime*0.2F;

	mov	ecx, 4
	imul	ecx, 5
	mov	edx, 4
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42b40000
	addss	xmm0, DWORD PTR [eax+edx+308]
	mulss	xmm0, DWORD PTR ?SimLibMinorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx+308]
	subss	xmm1, xmm0
	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax+308], xmm1

; 459  : 			alpha = oldp02[5];

	mov	edx, 4
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+edx+308]
	mov	DWORD PTR [eax+1152], edx

; 460  : 		break;

	jmp	$LN5@Pitch
$LN2@Pitch:

; 461  : 		
; 462  : 		case Spinning:
; 463  : 			oldp02[5] -= (85.0F + oldp02[5])* SimLibMinorFrameTime*0.2F;

	mov	eax, 4
	imul	eax, 5
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42aa0000
	addss	xmm0, DWORD PTR [edx+ecx+308]
	mulss	xmm0, DWORD PTR ?SimLibMinorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax+308]
	subss	xmm1, xmm0
	mov	edx, 4
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+edx+308], xmm1

; 464  : 			alpha = oldp02[5] + oscillationTimer * 5.0F;

	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+712]
	mulss	xmm0, DWORD PTR __real@40a00000
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+ecx+308]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1152], xmm0
$LN1@Pitch:
$LN5@Pitch:
$LN95@Pitch:

; 465  : 		break;
; 466  : 		default:
; 467  : 		break;
; 468  : 	}
; 469  : 	
; 470  : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN159@Pitch:
	DD	$LN14@Pitch
	DD	$LN30@Pitch
	DD	$LN27@Pitch
	DD	$LN13@Pitch
?Pitch@AirframeClass@@AAEXXZ ENDP			; AirframeClass::Pitch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
