; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\Airframe\limiters.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?gLimiterMgr@@3PAVLimiterMgrClass@@A		; gLimiterMgr
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
_BSS	SEGMENT
?gLimiterMgr@@3PAVLimiterMgrClass@@A DD 01H DUP (?)	; gLimiterMgr
_BSS	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	??0Limiter@@QAE@W4LimiterType@@@Z		; Limiter::Limiter
PUBLIC	?Limit@Limiter@@UAEMM@Z				; Limiter::Limit
PUBLIC	?Setup@Limiter@@UAEXPAD@Z			; Limiter::Setup
PUBLIC	??0LineLimiter@@QAE@XZ				; LineLimiter::LineLimiter
PUBLIC	?Setup@LineLimiter@@UAEXPAD@Z			; LineLimiter::Setup
PUBLIC	?Setup@LineLimiter@@QAEXMMMM@Z			; LineLimiter::Setup
PUBLIC	?Limit@LineLimiter@@UAEMM@Z			; LineLimiter::Limit
PUBLIC	??0ThreePointLimiter@@QAE@XZ			; ThreePointLimiter::ThreePointLimiter
PUBLIC	?Setup@ThreePointLimiter@@UAEXPAD@Z		; ThreePointLimiter::Setup
PUBLIC	?Setup@ThreePointLimiter@@QAEXPAM0@Z		; ThreePointLimiter::Setup
PUBLIC	?Limit@ThreePointLimiter@@UAEMM@Z		; ThreePointLimiter::Limit
PUBLIC	??0ValueLimiter@@QAE@XZ				; ValueLimiter::ValueLimiter
PUBLIC	?Setup@ValueLimiter@@UAEXPAD@Z			; ValueLimiter::Setup
PUBLIC	?Setup@ValueLimiter@@QAEXM@Z			; ValueLimiter::Setup
PUBLIC	?Limit@ValueLimiter@@UAEMM@Z			; ValueLimiter::Limit
PUBLIC	??0MinMaxLimiter@@QAE@XZ			; MinMaxLimiter::MinMaxLimiter
PUBLIC	?Setup@MinMaxLimiter@@UAEXPAD@Z			; MinMaxLimiter::Setup
PUBLIC	?Setup@MinMaxLimiter@@QAEXMM@Z			; MinMaxLimiter::Setup
PUBLIC	?Limit@MinMaxLimiter@@UAEMM@Z			; MinMaxLimiter::Limit
PUBLIC	??0PercentLimiter@@QAE@XZ			; PercentLimiter::PercentLimiter
PUBLIC	?Setup@PercentLimiter@@UAEXPAD@Z		; PercentLimiter::Setup
PUBLIC	?Setup@PercentLimiter@@QAEXM@Z			; PercentLimiter::Setup
PUBLIC	?Limit@PercentLimiter@@UAEMM@Z			; PercentLimiter::Limit
PUBLIC	??0LimiterMgrClass@@QAE@H@Z			; LimiterMgrClass::LimiterMgrClass
PUBLIC	??1LimiterMgrClass@@QAE@XZ			; LimiterMgrClass::~LimiterMgrClass
PUBLIC	?ReadLimiters@LimiterMgrClass@@QAEHPAVSimlibFileClass@@H@Z ; LimiterMgrClass::ReadLimiters
PUBLIC	?GetLimiter@LimiterMgrClass@@QAEPAVLimiter@@HH@Z ; LimiterMgrClass::GetLimiter
PUBLIC	?HasLimiter@LimiterMgrClass@@QAEHHH@Z		; LimiterMgrClass::HasLimiter
PUBLIC	??_7Limiter@@6B@				; Limiter::`vftable'
PUBLIC	??_7LineLimiter@@6B@				; LineLimiter::`vftable'
PUBLIC	??_7ThreePointLimiter@@6B@			; ThreePointLimiter::`vftable'
PUBLIC	??_7ValueLimiter@@6B@				; ValueLimiter::`vftable'
PUBLIC	??_7MinMaxLimiter@@6B@				; MinMaxLimiter::`vftable'
PUBLIC	??_7PercentLimiter@@6B@				; PercentLimiter::`vftable'
PUBLIC	??_C@_0M@ONLGMOD@?$CFf?5?$CFf?5?$CFf?5?$CFf?$AA@ ; `string'
PUBLIC	??_C@_0BC@BEGECIBC@?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?$AA@ ; `string'
PUBLIC	??_C@_02NJPGOMH@?$CFf?$AA@			; `string'
PUBLIC	??_C@_05KCDNKPCA@?$CFf?5?$CFf?$AA@		; `string'
PUBLIC	??_R4Limiter@@6B@				; Limiter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVLimiter@@@8				; Limiter `RTTI Type Descriptor'
PUBLIC	??_R3Limiter@@8					; Limiter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Limiter@@8					; Limiter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Limiter@@8			; Limiter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4LineLimiter@@6B@				; LineLimiter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVLineLimiter@@@8				; LineLimiter `RTTI Type Descriptor'
PUBLIC	??_R3LineLimiter@@8				; LineLimiter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2LineLimiter@@8				; LineLimiter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@LineLimiter@@8			; LineLimiter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ThreePointLimiter@@6B@			; ThreePointLimiter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVThreePointLimiter@@@8			; ThreePointLimiter `RTTI Type Descriptor'
PUBLIC	??_R3ThreePointLimiter@@8			; ThreePointLimiter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ThreePointLimiter@@8			; ThreePointLimiter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ThreePointLimiter@@8		; ThreePointLimiter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ValueLimiter@@6B@				; ValueLimiter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVValueLimiter@@@8			; ValueLimiter `RTTI Type Descriptor'
PUBLIC	??_R3ValueLimiter@@8				; ValueLimiter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ValueLimiter@@8				; ValueLimiter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ValueLimiter@@8			; ValueLimiter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4MinMaxLimiter@@6B@				; MinMaxLimiter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMinMaxLimiter@@@8			; MinMaxLimiter `RTTI Type Descriptor'
PUBLIC	??_R3MinMaxLimiter@@8				; MinMaxLimiter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MinMaxLimiter@@8				; MinMaxLimiter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MinMaxLimiter@@8			; MinMaxLimiter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4PercentLimiter@@6B@			; PercentLimiter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPercentLimiter@@@8			; PercentLimiter `RTTI Type Descriptor'
PUBLIC	??_R3PercentLimiter@@8				; PercentLimiter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PercentLimiter@@8				; PercentLimiter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PercentLimiter@@8			; PercentLimiter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_sscanf:PROC
EXTRN	_atoi:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?ReadLine@SimlibFileClass@@QAEHPADH@Z:PROC	; SimlibFileClass::ReadLine
EXTRN	?GetNext@SimlibFileClass@@QAEPADXZ:PROC		; SimlibFileClass::GetNext
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@PercentLimiter@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PercentLimiter@@8 DD FLAT:??_R0?AVPercentLimiter@@@8 ; PercentLimiter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PercentLimiter@@8
rdata$r	ENDS
;	COMDAT ??_R2PercentLimiter@@8
rdata$r	SEGMENT
??_R2PercentLimiter@@8 DD FLAT:??_R1A@?0A@EA@PercentLimiter@@8 ; PercentLimiter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Limiter@@8
rdata$r	ENDS
;	COMDAT ??_R3PercentLimiter@@8
rdata$r	SEGMENT
??_R3PercentLimiter@@8 DD 00H				; PercentLimiter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2PercentLimiter@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPercentLimiter@@@8
_DATA	SEGMENT
??_R0?AVPercentLimiter@@@8 DD FLAT:??_7type_info@@6B@	; PercentLimiter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPercentLimiter@@', 00H
_DATA	ENDS
;	COMDAT ??_R4PercentLimiter@@6B@
rdata$r	SEGMENT
??_R4PercentLimiter@@6B@ DD 00H				; PercentLimiter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPercentLimiter@@@8
	DD	FLAT:??_R3PercentLimiter@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@MinMaxLimiter@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MinMaxLimiter@@8 DD FLAT:??_R0?AVMinMaxLimiter@@@8 ; MinMaxLimiter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MinMaxLimiter@@8
rdata$r	ENDS
;	COMDAT ??_R2MinMaxLimiter@@8
rdata$r	SEGMENT
??_R2MinMaxLimiter@@8 DD FLAT:??_R1A@?0A@EA@MinMaxLimiter@@8 ; MinMaxLimiter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Limiter@@8
rdata$r	ENDS
;	COMDAT ??_R3MinMaxLimiter@@8
rdata$r	SEGMENT
??_R3MinMaxLimiter@@8 DD 00H				; MinMaxLimiter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2MinMaxLimiter@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMinMaxLimiter@@@8
_DATA	SEGMENT
??_R0?AVMinMaxLimiter@@@8 DD FLAT:??_7type_info@@6B@	; MinMaxLimiter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMinMaxLimiter@@', 00H
_DATA	ENDS
;	COMDAT ??_R4MinMaxLimiter@@6B@
rdata$r	SEGMENT
??_R4MinMaxLimiter@@6B@ DD 00H				; MinMaxLimiter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMinMaxLimiter@@@8
	DD	FLAT:??_R3MinMaxLimiter@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ValueLimiter@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ValueLimiter@@8 DD FLAT:??_R0?AVValueLimiter@@@8 ; ValueLimiter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ValueLimiter@@8
rdata$r	ENDS
;	COMDAT ??_R2ValueLimiter@@8
rdata$r	SEGMENT
??_R2ValueLimiter@@8 DD FLAT:??_R1A@?0A@EA@ValueLimiter@@8 ; ValueLimiter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Limiter@@8
rdata$r	ENDS
;	COMDAT ??_R3ValueLimiter@@8
rdata$r	SEGMENT
??_R3ValueLimiter@@8 DD 00H				; ValueLimiter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ValueLimiter@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVValueLimiter@@@8
_DATA	SEGMENT
??_R0?AVValueLimiter@@@8 DD FLAT:??_7type_info@@6B@	; ValueLimiter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVValueLimiter@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ValueLimiter@@6B@
rdata$r	SEGMENT
??_R4ValueLimiter@@6B@ DD 00H				; ValueLimiter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVValueLimiter@@@8
	DD	FLAT:??_R3ValueLimiter@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ThreePointLimiter@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ThreePointLimiter@@8 DD FLAT:??_R0?AVThreePointLimiter@@@8 ; ThreePointLimiter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ThreePointLimiter@@8
rdata$r	ENDS
;	COMDAT ??_R2ThreePointLimiter@@8
rdata$r	SEGMENT
??_R2ThreePointLimiter@@8 DD FLAT:??_R1A@?0A@EA@ThreePointLimiter@@8 ; ThreePointLimiter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Limiter@@8
rdata$r	ENDS
;	COMDAT ??_R3ThreePointLimiter@@8
rdata$r	SEGMENT
??_R3ThreePointLimiter@@8 DD 00H			; ThreePointLimiter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ThreePointLimiter@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVThreePointLimiter@@@8
_DATA	SEGMENT
??_R0?AVThreePointLimiter@@@8 DD FLAT:??_7type_info@@6B@ ; ThreePointLimiter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVThreePointLimiter@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ThreePointLimiter@@6B@
rdata$r	SEGMENT
??_R4ThreePointLimiter@@6B@ DD 00H			; ThreePointLimiter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVThreePointLimiter@@@8
	DD	FLAT:??_R3ThreePointLimiter@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@LineLimiter@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@LineLimiter@@8 DD FLAT:??_R0?AVLineLimiter@@@8 ; LineLimiter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3LineLimiter@@8
rdata$r	ENDS
;	COMDAT ??_R2LineLimiter@@8
rdata$r	SEGMENT
??_R2LineLimiter@@8 DD FLAT:??_R1A@?0A@EA@LineLimiter@@8 ; LineLimiter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Limiter@@8
rdata$r	ENDS
;	COMDAT ??_R3LineLimiter@@8
rdata$r	SEGMENT
??_R3LineLimiter@@8 DD 00H				; LineLimiter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2LineLimiter@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVLineLimiter@@@8
_DATA	SEGMENT
??_R0?AVLineLimiter@@@8 DD FLAT:??_7type_info@@6B@	; LineLimiter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVLineLimiter@@', 00H
_DATA	ENDS
;	COMDAT ??_R4LineLimiter@@6B@
rdata$r	SEGMENT
??_R4LineLimiter@@6B@ DD 00H				; LineLimiter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVLineLimiter@@@8
	DD	FLAT:??_R3LineLimiter@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Limiter@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Limiter@@8 DD FLAT:??_R0?AVLimiter@@@8	; Limiter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Limiter@@8
rdata$r	ENDS
;	COMDAT ??_R2Limiter@@8
rdata$r	SEGMENT
??_R2Limiter@@8 DD FLAT:??_R1A@?0A@EA@Limiter@@8	; Limiter::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Limiter@@8
rdata$r	SEGMENT
??_R3Limiter@@8 DD 00H					; Limiter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Limiter@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVLimiter@@@8
_DATA	SEGMENT
??_R0?AVLimiter@@@8 DD FLAT:??_7type_info@@6B@		; Limiter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVLimiter@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Limiter@@6B@
rdata$r	SEGMENT
??_R4Limiter@@6B@ DD 00H				; Limiter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVLimiter@@@8
	DD	FLAT:??_R3Limiter@@8
rdata$r	ENDS
;	COMDAT ??_C@_05KCDNKPCA@?$CFf?5?$CFf?$AA@
CONST	SEGMENT
??_C@_05KCDNKPCA@?$CFf?5?$CFf?$AA@ DB '%f %f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJPGOMH@?$CFf?$AA@
CONST	SEGMENT
??_C@_02NJPGOMH@?$CFf?$AA@ DB '%f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BEGECIBC@?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?$AA@
CONST	SEGMENT
??_C@_0BC@BEGECIBC@?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?$AA@ DB '%f %'
	DB	'f %f %f %f %f', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ONLGMOD@?$CFf?5?$CFf?5?$CFf?5?$CFf?$AA@
CONST	SEGMENT
??_C@_0M@ONLGMOD@?$CFf?5?$CFf?5?$CFf?5?$CFf?$AA@ DB '%f %f %f %f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7PercentLimiter@@6B@
CONST	SEGMENT
??_7PercentLimiter@@6B@ DD FLAT:??_R4PercentLimiter@@6B@ ; PercentLimiter::`vftable'
	DD	FLAT:?Limit@PercentLimiter@@UAEMM@Z
	DD	FLAT:?Setup@PercentLimiter@@UAEXPAD@Z
CONST	ENDS
;	COMDAT ??_7MinMaxLimiter@@6B@
CONST	SEGMENT
??_7MinMaxLimiter@@6B@ DD FLAT:??_R4MinMaxLimiter@@6B@	; MinMaxLimiter::`vftable'
	DD	FLAT:?Limit@MinMaxLimiter@@UAEMM@Z
	DD	FLAT:?Setup@MinMaxLimiter@@UAEXPAD@Z
CONST	ENDS
;	COMDAT ??_7ValueLimiter@@6B@
CONST	SEGMENT
??_7ValueLimiter@@6B@ DD FLAT:??_R4ValueLimiter@@6B@	; ValueLimiter::`vftable'
	DD	FLAT:?Limit@ValueLimiter@@UAEMM@Z
	DD	FLAT:?Setup@ValueLimiter@@UAEXPAD@Z
CONST	ENDS
;	COMDAT ??_7ThreePointLimiter@@6B@
CONST	SEGMENT
??_7ThreePointLimiter@@6B@ DD FLAT:??_R4ThreePointLimiter@@6B@ ; ThreePointLimiter::`vftable'
	DD	FLAT:?Limit@ThreePointLimiter@@UAEMM@Z
	DD	FLAT:?Setup@ThreePointLimiter@@UAEXPAD@Z
CONST	ENDS
;	COMDAT ??_7LineLimiter@@6B@
CONST	SEGMENT
??_7LineLimiter@@6B@ DD FLAT:??_R4LineLimiter@@6B@	; LineLimiter::`vftable'
	DD	FLAT:?Limit@LineLimiter@@UAEMM@Z
	DD	FLAT:?Setup@LineLimiter@@UAEXPAD@Z
CONST	ENDS
;	COMDAT ??_7Limiter@@6B@
CONST	SEGMENT
??_7Limiter@@6B@ DD FLAT:??_R4Limiter@@6B@		; Limiter::`vftable'
	DD	FLAT:?Limit@Limiter@@UAEMM@Z
	DD	FLAT:?Setup@Limiter@@UAEXPAD@Z
CONST	ENDS
xdata$x	SEGMENT
__ehfuncinfo$?ReadLimiters@LimiterMgrClass@@QAEHPAVSimlibFileClass@@H@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?ReadLimiters@LimiterMgrClass@@QAEHPAVSimlibFileClass@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ReadLimiters@LimiterMgrClass@@QAEHPAVSimlibFileClass@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadLimiters@LimiterMgrClass@@QAEHPAVSimlibFileClass@@H@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadLimiters@LimiterMgrClass@@QAEHPAVSimlibFileClass@@H@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadLimiters@LimiterMgrClass@@QAEHPAVSimlibFileClass@@H@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadLimiters@LimiterMgrClass@@QAEHPAVSimlibFileClass@@H@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadLimiters@LimiterMgrClass@@QAEHPAVSimlibFileClass@@H@Z$4
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv70 = -4						; size = 4
_key$ = 8						; size = 4
_dataset$ = 12						; size = 4
?HasLimiter@LimiterMgrClass@@QAEHHH@Z PROC		; LimiterMgrClass::HasLimiter
; _this$ = ecx

; 151  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 152  : /*	LimiterLink *cur = limiterDatasets[dataset];
; 153  : 
; 154  : 	while(cur)
; 155  : 	{
; 156  : 		if(cur->key == key)
; 157  : 			return TRUE;
; 158  : 
; 159  : 		cur = cur->next;
; 160  : 	}
; 161  : 
; 162  : 	return FALSE;*/
; 163  : 
; 164  : 	return limiterDatasets[dataset * NumLimiterTypes + key] ? 1 : 0;

	mov	eax, DWORD PTR _dataset$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+eax*4], 0
	je	SHORT $LN3@HasLimiter
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@HasLimiter
$LN3@HasLimiter:
	mov	DWORD PTR tv70[ebp], 0
$LN4@HasLimiter:
	mov	eax, DWORD PTR tv70[ebp]

; 165  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?HasLimiter@LimiterMgrClass@@QAEHHH@Z ENDP		; LimiterMgrClass::HasLimiter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_key$ = 8						; size = 4
_dataset$ = 12						; size = 4
?GetLimiter@LimiterMgrClass@@QAEPAVLimiter@@HH@Z PROC	; LimiterMgrClass::GetLimiter
; _this$ = ecx

; 168  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 169  : /*	LimiterLink *cur = limiterDatasets[dataset];
; 170  : 
; 171  : 	while(cur)
; 172  : 	{
; 173  : 		if(cur->key == key)
; 174  : 			return cur->limiter;
; 175  : 
; 176  : 		cur = cur->next;
; 177  : 	}
; 178  : 
; 179  : 	return NULL;*/
; 180  : 	return limiterDatasets[dataset * NumLimiterTypes + key];

	mov	eax, DWORD PTR _dataset$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax*4]

; 181  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetLimiter@LimiterMgrClass@@QAEPAVLimiter@@HH@Z ENDP	; LimiterMgrClass::GetLimiter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
_limiterType$ = -264					; size = 4
$T2 = -260						; size = 4
$T3 = -256						; size = 4
$T4 = -252						; size = 4
$T5 = -248						; size = 4
$T6 = -244						; size = 4
$T7 = -240						; size = 4
tv166 = -236						; size = 4
tv182 = -232						; size = 4
$T8 = -228						; size = 4
tv134 = -224						; size = 4
$T9 = -220						; size = 4
$T10 = -216						; size = 4
tv198 = -212						; size = 4
_numLimiters$ = -208					; size = 4
tv150 = -204						; size = 4
tv214 = -200						; size = 4
$T11 = -196						; size = 4
$T12 = -192						; size = 4
_i$ = -188						; size = 4
_key$ = -184						; size = 4
_this$ = -180						; size = 4
_buf$ = -176						; size = 160
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_file$ = 8						; size = 4
_dataset$ = 12						; size = 4
?ReadLimiters@LimiterMgrClass@@QAEHPAVSimlibFileClass@@H@Z PROC ; LimiterMgrClass::ReadLimiters
; _this$ = ecx

; 68   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReadLimiters@LimiterMgrClass@@QAEHPAVSimlibFileClass@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 252				; 000000fcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 69   : //	LimiterLink *next;
; 70   : //	LimiterLink *cur;
; 71   : 	int limiterType, key;
; 72   : 	int numLimiters, i;
; 73   : 	char buf[160];
; 74   : 
; 75   : 	if(!file || dataset < 0 || dataset > numDatasets)

	cmp	DWORD PTR _file$[ebp], 0
	je	SHORT $LN14@ReadLimite
	cmp	DWORD PTR _dataset$[ebp], 0
	jl	SHORT $LN14@ReadLimite
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dataset$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jle	SHORT $LN15@ReadLimite
$LN14@ReadLimite:

; 76   : 		return FALSE;

	xor	eax, eax
	jmp	$LN16@ReadLimite
$LN15@ReadLimite:

; 77   : /*
; 78   : 	if(limiterDatasets[dataset])
; 79   : 	{
; 80   : 		next = limiterDatasets[dataset];
; 81   : 		while(next)
; 82   : 		{
; 83   : 			cur = next;
; 84   : 			next = cur->next;
; 85   : 
; 86   : 			delete cur->limiter;
; 87   : 			cur->limiter = NULL;
; 88   : 			delete cur;
; 89   : 			cur = NULL;
; 90   : 		}
; 91   : 	}*/
; 92   : 
; 93   : 	numLimiters = atoi(file->GetNext());

	mov	ecx, DWORD PTR _file$[ebp]
	call	?GetNext@SimlibFileClass@@QAEPADXZ	; SimlibFileClass::GetNext
	push	eax
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _numLimiters$[ebp], eax

; 94   : 	if(!numLimiters)

	cmp	DWORD PTR _numLimiters$[ebp], 0
	jne	SHORT $LN13@ReadLimite

; 95   : 		return FALSE;

	xor	eax, eax
	jmp	$LN16@ReadLimite
$LN13@ReadLimite:

; 96   : 
; 97   : 	for(i = 0; i < numLimiters; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN12@ReadLimite
$LN11@ReadLimite:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN12@ReadLimite:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numLimiters$[ebp]
	jge	$LN10@ReadLimite

; 98   : 	{
; 99   : 	/*	next = limiterDatasets[dataset];
; 100  : 		limiterDatasets[dataset] = new LimiterLink;
; 101  : 		limiterDatasets[dataset]->next = next;*/
; 102  : 
; 103  : 		limiterType = atoi(file->GetNext());

	mov	ecx, DWORD PTR _file$[ebp]
	call	?GetNext@SimlibFileClass@@QAEPADXZ	; SimlibFileClass::GetNext
	push	eax
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _limiterType$[ebp], eax

; 104  : 		key = atoi(file->GetNext());

	mov	ecx, DWORD PTR _file$[ebp]
	call	?GetNext@SimlibFileClass@@QAEPADXZ	; SimlibFileClass::GetNext
	push	eax
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _key$[ebp], eax

; 105  : 
; 106  : 		if(limiterDatasets[dataset * NumLimiterTypes + key] )

	mov	ecx, DWORD PTR _dataset$[ebp]
	imul	ecx, 18					; 00000012H
	add	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+ecx*4], 0
	je	SHORT $LN9@ReadLimite

; 107  : 		{
; 108  : 			delete limiterDatasets[dataset * numDatasets + key];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _dataset$[ebp]
	imul	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T7[ebp], edx
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 109  : 			limiterDatasets[dataset * NumLimiterTypes + key]  = NULL;

	mov	ecx, DWORD PTR _dataset$[ebp]
	imul	ecx, 18					; 00000012H
	add	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*4], 0
$LN9@ReadLimite:

; 110  : 		}
; 111  : 
; 112  : 		switch(limiterType)

	mov	ecx, DWORD PTR _limiterType$[ebp]
	mov	DWORD PTR tv134[ebp], ecx
	cmp	DWORD PTR tv134[ebp], 4
	ja	$LN7@ReadLimite
	mov	edx, DWORD PTR tv134[ebp]
	jmp	DWORD PTR $LN34@ReadLimite[edx*4]
$LN6@ReadLimite:

; 113  : 		{
; 114  : 		case ltLine:
; 115  : 			//limiterDatasets[dataset]->limiter = new LineLimiter;
; 116  : 			limiterDatasets[dataset * NumLimiterTypes + key] = new LineLimiter;

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN18@ReadLimite
	mov	ecx, DWORD PTR $T9[ebp]
	call	??0LineLimiter@@QAE@XZ			; LineLimiter::LineLimiter
	mov	DWORD PTR tv150[ebp], eax
	jmp	SHORT $LN19@ReadLimite
$LN18@ReadLimite:
	mov	DWORD PTR tv150[ebp], 0
$LN19@ReadLimite:
	mov	eax, DWORD PTR tv150[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _dataset$[ebp]
	imul	ecx, 18					; 00000012H
	add	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 117  : 			break;

	jmp	$LN7@ReadLimite
$LN5@ReadLimite:

; 118  : 		case ltValue:
; 119  : 			//limiterDatasets[dataset]->limiter = new ValueLimiter;
; 120  : 			limiterDatasets[dataset * NumLimiterTypes + key] = new ValueLimiter;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN20@ReadLimite
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0ValueLimiter@@QAE@XZ			; ValueLimiter::ValueLimiter
	mov	DWORD PTR tv166[ebp], eax
	jmp	SHORT $LN21@ReadLimite
$LN20@ReadLimite:
	mov	DWORD PTR tv166[ebp], 0
$LN21@ReadLimite:
	mov	eax, DWORD PTR tv166[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _dataset$[ebp]
	imul	ecx, 18					; 00000012H
	add	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 121  : 			break;

	jmp	$LN7@ReadLimite
$LN4@ReadLimite:

; 122  : 		case ltPercent:
; 123  : 			//limiterDatasets[dataset]->limiter = new PercentLimiter;
; 124  : 			limiterDatasets[dataset * NumLimiterTypes + key] = new PercentLimiter;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T10[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN22@ReadLimite
	mov	ecx, DWORD PTR $T10[ebp]
	call	??0PercentLimiter@@QAE@XZ		; PercentLimiter::PercentLimiter
	mov	DWORD PTR tv182[ebp], eax
	jmp	SHORT $LN23@ReadLimite
$LN22@ReadLimite:
	mov	DWORD PTR tv182[ebp], 0
$LN23@ReadLimite:
	mov	eax, DWORD PTR tv182[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _dataset$[ebp]
	imul	ecx, 18					; 00000012H
	add	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 125  : 			break;

	jmp	$LN7@ReadLimite
$LN3@ReadLimite:

; 126  : 		case ltThreePt:
; 127  : 			//limiterDatasets[dataset]->limiter = new ThreePointLimiter;
; 128  : 			limiterDatasets[dataset * NumLimiterTypes + key] = new ThreePointLimiter;

	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T12[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T12[ebp], 0
	je	SHORT $LN24@ReadLimite
	mov	ecx, DWORD PTR $T12[ebp]
	call	??0ThreePointLimiter@@QAE@XZ		; ThreePointLimiter::ThreePointLimiter
	mov	DWORD PTR tv198[ebp], eax
	jmp	SHORT $LN25@ReadLimite
$LN24@ReadLimite:
	mov	DWORD PTR tv198[ebp], 0
$LN25@ReadLimite:
	mov	eax, DWORD PTR tv198[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _dataset$[ebp]
	imul	ecx, 18					; 00000012H
	add	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR $T5[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 129  : 			break;

	jmp	SHORT $LN7@ReadLimite
$LN2@ReadLimite:

; 130  : 			
; 131  : 		case ltMinMax:
; 132  : 			limiterDatasets[dataset * NumLimiterTypes + key] = new MinMaxLimiter;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T11[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN26@ReadLimite
	mov	ecx, DWORD PTR $T11[ebp]
	call	??0MinMaxLimiter@@QAE@XZ		; MinMaxLimiter::MinMaxLimiter
	mov	DWORD PTR tv214[ebp], eax
	jmp	SHORT $LN27@ReadLimite
$LN26@ReadLimite:
	mov	DWORD PTR tv214[ebp], 0
$LN27@ReadLimite:
	mov	eax, DWORD PTR tv214[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _dataset$[ebp]
	imul	ecx, 18					; 00000012H
	add	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
$LN7@ReadLimite:

; 133  : 			break;			
; 134  : 
; 135  : 		}
; 136  : 		
; 137  : 		//limiterDatasets[dataset]->key = key;
; 138  : 
; 139  : 		file->ReadLine(buf,160);

	push	160					; 000000a0H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _file$[ebp]
	call	?ReadLine@SimlibFileClass@@QAEHPADH@Z	; SimlibFileClass::ReadLine

; 140  : /*		if(limiterDatasets[dataset]->limiter)
; 141  : 			limiterDatasets[dataset]->limiter->Setup(buf);*/
; 142  : 		if(limiterDatasets[dataset * NumLimiterTypes + key])

	mov	ecx, DWORD PTR _dataset$[ebp]
	imul	ecx, 18					; 00000012H
	add	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+ecx*4], 0
	je	SHORT $LN1@ReadLimite

; 143  : 			limiterDatasets[dataset * NumLimiterTypes + key]->Setup(buf);

	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dataset$[ebp]
	imul	edx, 18					; 00000012H
	add	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	eax, DWORD PTR _dataset$[ebp]
	imul	eax, 18					; 00000012H
	add	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+4]
	call	eax
$LN1@ReadLimite:

; 144  : 		
; 145  : 	}

	jmp	$LN11@ReadLimite
$LN10@ReadLimite:

; 146  : 
; 147  : 	return TRUE;

	mov	eax, 1
$LN16@ReadLimite:

; 148  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN34@ReadLimite:
	DD	$LN6@ReadLimite
	DD	$LN5@ReadLimite
	DD	$LN4@ReadLimite
	DD	$LN3@ReadLimite
	DD	$LN2@ReadLimite
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ReadLimiters@LimiterMgrClass@@QAEHPAVSimlibFileClass@@H@Z$0:
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ReadLimiters@LimiterMgrClass@@QAEHPAVSimlibFileClass@@H@Z$1:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ReadLimiters@LimiterMgrClass@@QAEHPAVSimlibFileClass@@H@Z$2:
	mov	eax, DWORD PTR $T10[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ReadLimiters@LimiterMgrClass@@QAEHPAVSimlibFileClass@@H@Z$3:
	mov	eax, DWORD PTR $T12[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ReadLimiters@LimiterMgrClass@@QAEHPAVSimlibFileClass@@H@Z$4:
	mov	eax, DWORD PTR $T11[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ReadLimiters@LimiterMgrClass@@QAEHPAVSimlibFileClass@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-256]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReadLimiters@LimiterMgrClass@@QAEHPAVSimlibFileClass@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReadLimiters@LimiterMgrClass@@QAEHPAVSimlibFileClass@@H@Z ENDP ; LimiterMgrClass::ReadLimiters
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
??1LimiterMgrClass@@QAE@XZ PROC				; LimiterMgrClass::~LimiterMgrClass
; _this$ = ecx

; 35   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 36   : /*	LimiterLink *next;
; 37   : 	LimiterLink *cur;
; 38   : 
; 39   : 	for(int i = 0; i < numDatasets; i++)
; 40   : 	{
; 41   : 		next = limiterDatasets[i];
; 42   : 		while(next)
; 43   : 		{
; 44   : 			cur = next;
; 45   : 			next = cur->next;
; 46   : 
; 47   : 			delete cur->limiter;
; 48   : 			cur->limiter = NULL;
; 49   : 			delete cur;
; 50   : 			cur = NULL;
; 51   : 		}
; 52   : 
; 53   : 	}*/
; 54   : 
; 55   : 	delete [] limiterDatasets;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 56   : 	limiterDatasets = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 57   : 
; 58   : #ifdef USE_SH_POOLS
; 59   : 	ThreePointLimiter::ReleaseStorage();
; 60   : 	ValueLimiter::ReleaseStorage();
; 61   : 	PercentLimiter::ReleaseStorage();
; 62   : 	LineLimiter::ReleaseStorage();
; 63   : 	MinMaxLimiter::ReleaseStorage();
; 64   : #endif
; 65   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1LimiterMgrClass@@QAE@XZ ENDP				; LimiterMgrClass::~LimiterMgrClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
$T1 = -12						; size = 4
_this$ = -8						; size = 4
_i$ = -4						; size = 4
_numdatasets$ = 8					; size = 4
??0LimiterMgrClass@@QAE@H@Z PROC			; LimiterMgrClass::LimiterMgrClass
; _this$ = ecx

; 15   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 16   : 	int i;
; 17   : 
; 18   : 	numDatasets = numdatasets;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _numdatasets$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 19   : 	limiterDatasets = new Limiter *[numdatasets * NumLimiterTypes];

	mov	eax, DWORD PTR _numdatasets$[ebp]
	imul	eax, 18					; 00000012H
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax], ecx

; 20   : 	for(i = 0; i< numdatasets * NumLimiterTypes; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@LimiterMgr
$LN2@LimiterMgr:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@LimiterMgr:
	mov	eax, DWORD PTR _numdatasets$[ebp]
	imul	eax, 18					; 00000012H
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN4@LimiterMgr

; 21   : 	{
; 22   : 		limiterDatasets[i] = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 23   : 	}

	jmp	SHORT $LN2@LimiterMgr
$LN4@LimiterMgr:

; 24   : 
; 25   : #ifdef USE_SH_POOLS
; 26   : 	ThreePointLimiter::InitializeStorage();
; 27   : 	ValueLimiter::InitializeStorage();
; 28   : 	PercentLimiter::InitializeStorage();
; 29   : 	LineLimiter::InitializeStorage();
; 30   : 	MinMaxLimiter::InitializeStorage();
; 31   : #endif
; 32   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0LimiterMgrClass@@QAE@H@Z ENDP			; LimiterMgrClass::LimiterMgrClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?Limit@PercentLimiter@@UAEMM@Z PROC			; PercentLimiter::Limit
; _this$ = ecx

; 379  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 380  : 	return x*percent;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR tv69[ebp], xmm0
	fld	DWORD PTR tv69[ebp]

; 381  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Limit@PercentLimiter@@UAEMM@Z ENDP			; PercentLimiter::Limit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newPercent$ = 8					; size = 4
?Setup@PercentLimiter@@QAEXM@Z PROC			; PercentLimiter::Setup
; _this$ = ecx

; 374  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 	percent = newPercent;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _newPercent$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 376  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Setup@PercentLimiter@@QAEXM@Z ENDP			; PercentLimiter::Setup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_x$ = -4						; size = 4
_string$ = 8						; size = 4
?Setup@PercentLimiter@@UAEXPAD@Z PROC			; PercentLimiter::Setup
; _this$ = ecx

; 366  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 367  : 	float x;
; 368  : 
; 369  : 	if(sscanf(string, "%f",&x) == 1)

	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jne	SHORT $LN1@Setup

; 370  : 		Setup(x);	

	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Setup@PercentLimiter@@QAEXM@Z		; PercentLimiter::Setup
$LN1@Setup:

; 371  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Setup@PercentLimiter@@UAEXPAD@Z ENDP			; PercentLimiter::Setup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0PercentLimiter@@QAE@XZ PROC				; PercentLimiter::PercentLimiter
; _this$ = ecx

; 361  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Limiter@@QAE@W4LimiterType@@@Z	; Limiter::Limiter
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PercentLimiter@@6B@

; 362  : 	percent = 1.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+8], xmm0

; 363  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0PercentLimiter@@QAE@XZ ENDP				; PercentLimiter::PercentLimiter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv80 = -12						; size = 4
tv71 = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?Limit@MinMaxLimiter@@UAEMM@Z PROC			; MinMaxLimiter::Limit
; _this$ = ecx

; 353  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 354  : 	return min(maximum, max(x, minimum));

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	comiss	xmm0, DWORD PTR [eax+8]
	jbe	SHORT $LN3@Limit
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR tv71[ebp], xmm0
	jmp	SHORT $LN4@Limit
$LN3@Limit:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR tv71[ebp], xmm0
$LN4@Limit:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv71[ebp]
	comiss	xmm0, DWORD PTR [edx+12]
	jbe	SHORT $LN7@Limit
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR tv81[ebp], xmm0
	jmp	SHORT $LN8@Limit
$LN7@Limit:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	comiss	xmm0, DWORD PTR [ecx+8]
	jbe	SHORT $LN5@Limit
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR tv80[ebp], xmm0
	jmp	SHORT $LN6@Limit
$LN5@Limit:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR tv80[ebp], xmm0
$LN6@Limit:
	movss	xmm0, DWORD PTR tv80[ebp]
	movss	DWORD PTR tv81[ebp], xmm0
$LN8@Limit:
	fld	DWORD PTR tv81[ebp]

; 355  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Limit@MinMaxLimiter@@UAEMM@Z ENDP			; MinMaxLimiter::Limit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Min$ = 8						; size = 4
_Max$ = 12						; size = 4
?Setup@MinMaxLimiter@@QAEXMM@Z PROC			; MinMaxLimiter::Setup
; _this$ = ecx

; 347  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 348  : 	minimum = Min;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Min$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 349  : 	maximum = Max;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Max$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 350  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Setup@MinMaxLimiter@@QAEXMM@Z ENDP			; MinMaxLimiter::Setup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_min$ = -8						; size = 4
_max$ = -4						; size = 4
_string$ = 8						; size = 4
?Setup@MinMaxLimiter@@UAEXPAD@Z PROC			; MinMaxLimiter::Setup
; _this$ = ecx

; 339  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 340  : 	float min, max;
; 341  : 
; 342  : 	if(sscanf(string, "%f %f",&min, &max) == 2)

	lea	eax, DWORD PTR _max$[ebp]
	push	eax
	lea	ecx, DWORD PTR _min$[ebp]
	push	ecx
	push	OFFSET ??_C@_05KCDNKPCA@?$CFf?5?$CFf?$AA@
	mov	edx, DWORD PTR _string$[ebp]
	push	edx
	call	_sscanf
	add	esp, 16					; 00000010H
	cmp	eax, 2
	jne	SHORT $LN1@Setup

; 343  : 		Setup(min, max);	

	push	ecx
	movss	xmm0, DWORD PTR _max$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _min$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Setup@MinMaxLimiter@@QAEXMM@Z		; MinMaxLimiter::Setup
$LN1@Setup:

; 344  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Setup@MinMaxLimiter@@UAEXPAD@Z ENDP			; MinMaxLimiter::Setup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0MinMaxLimiter@@QAE@XZ PROC				; MinMaxLimiter::MinMaxLimiter
; _this$ = ecx

; 333  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Limiter@@QAE@W4LimiterType@@@Z	; Limiter::Limiter
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MinMaxLimiter@@6B@

; 334  : 	minimum = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+8], xmm0

; 335  : 	maximum = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+12], xmm0

; 336  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0MinMaxLimiter@@QAE@XZ ENDP				; MinMaxLimiter::MinMaxLimiter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Limit@ValueLimiter@@UAEMM@Z PROC			; ValueLimiter::Limit
; _this$ = ecx

; 325  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 326  : 	return value;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]

; 327  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Limit@ValueLimiter@@UAEMM@Z ENDP			; ValueLimiter::Limit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newValue$ = 8						; size = 4
?Setup@ValueLimiter@@QAEXM@Z PROC			; ValueLimiter::Setup
; _this$ = ecx

; 319  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 320  : 	value = newValue;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _newValue$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 321  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Setup@ValueLimiter@@QAEXM@Z ENDP			; ValueLimiter::Setup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_x$ = -4						; size = 4
_string$ = 8						; size = 4
?Setup@ValueLimiter@@UAEXPAD@Z PROC			; ValueLimiter::Setup
; _this$ = ecx

; 311  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 312  : 	float x;
; 313  : 
; 314  : 	if(sscanf(string, "%f",&x) == 1)

	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jne	SHORT $LN1@Setup

; 315  : 		Setup(x);	

	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Setup@ValueLimiter@@QAEXM@Z		; ValueLimiter::Setup
$LN1@Setup:

; 316  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Setup@ValueLimiter@@UAEXPAD@Z ENDP			; ValueLimiter::Setup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ValueLimiter@@QAE@XZ PROC				; ValueLimiter::ValueLimiter
; _this$ = ecx

; 306  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Limiter@@QAE@W4LimiterType@@@Z	; Limiter::Limiter
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ValueLimiter@@6B@

; 307  : 	value = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+8], xmm0

; 308  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0ValueLimiter@@QAE@XZ ENDP				; ValueLimiter::ValueLimiter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
tv153 = -20						; size = 4
tv147 = -16						; size = 4
tv139 = -12						; size = 4
tv130 = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?Limit@ThreePointLimiter@@UAEMM@Z PROC			; ThreePointLimiter::Limit
; _this$ = ecx

; 291  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 292  : 	if( x > upperX )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	comiss	xmm0, DWORD PTR [eax+8]
	jbe	SHORT $LN6@Limit

; 293  : 		return m2*upperX + b2;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+24]
	mulss	xmm0, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR tv130[ebp], xmm0
	fld	DWORD PTR tv130[ebp]
	jmp	$LN1@Limit
	jmp	SHORT $LN1@Limit
$LN6@Limit:

; 294  : 	else if ( x < lowerX)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+16]
	comiss	xmm0, DWORD PTR _x$[ebp]
	jbe	SHORT $LN4@Limit

; 295  : 		return m1*lowerX + b1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+20]
	mulss	xmm0, DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR tv139[ebp], xmm0
	fld	DWORD PTR tv139[ebp]
	jmp	SHORT $LN1@Limit
	jmp	SHORT $LN1@Limit
$LN4@Limit:

; 296  : 	else if(x>middleX)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	comiss	xmm0, DWORD PTR [edx+12]
	jbe	SHORT $LN2@Limit

; 297  : 		return m2*x + b2;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR tv147[ebp], xmm0
	fld	DWORD PTR tv147[ebp]
	jmp	SHORT $LN1@Limit

; 298  : 	else

	jmp	SHORT $LN1@Limit
$LN2@Limit:

; 299  : 		return m1*x + b1;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+20]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR tv153[ebp], xmm0
	fld	DWORD PTR tv153[ebp]
$LN1@Limit:

; 300  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Limit@ThreePointLimiter@@UAEMM@Z ENDP			; ThreePointLimiter::Limit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
_tempY$ = -20						; size = 4
_tempX$ = -16						; size = 4
_i$ = -12						; size = 4
_this$ = -8						; size = 4
_j$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?Setup@ThreePointLimiter@@QAEXPAM0@Z PROC		; ThreePointLimiter::Setup
; _this$ = ecx

; 259  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 260  : 	float tempX, tempY;
; 261  : 	int		i,j;
; 262  : 
; 263  : 	for(i = 0; i < 2; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@Setup
$LN6@Setup:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@Setup:
	cmp	DWORD PTR _i$[ebp], 2
	jge	$LN5@Setup

; 264  : 	{
; 265  : 		for(j = 2; j > i; j--)

	mov	DWORD PTR _j$[ebp], 2
	jmp	SHORT $LN4@Setup
$LN3@Setup:
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN4@Setup:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _i$[ebp]
	jle	$LN2@Setup

; 266  : 		{
; 267  : 			if(x[j-1] > x[j])

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4-4]
	comiss	xmm0, DWORD PTR [esi+edx*4]
	jbe	SHORT $LN1@Setup

; 268  : 			{
; 269  : 				tempX = x[j];

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	movss	DWORD PTR _tempX$[ebp], xmm0

; 270  : 				tempY = y[j];

	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	movss	DWORD PTR _tempY$[ebp], xmm0

; 271  : 				x[j] = x[j-1];

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [esi+eax*4-4]
	mov	DWORD PTR [edx+ecx*4], eax

; 272  : 				y[j] = y[j-1];

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR [esi+eax*4-4]
	mov	DWORD PTR [edx+ecx*4], eax

; 273  : 				x[j-1] = tempX;

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR _tempX$[ebp]
	movss	DWORD PTR [edx+ecx*4-4], xmm0

; 274  : 				y[j-1] = tempY;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	movss	xmm0, DWORD PTR _tempY$[ebp]
	movss	DWORD PTR [ecx+eax*4-4], xmm0
$LN1@Setup:

; 275  : 			}
; 276  : 		}

	jmp	$LN3@Setup
$LN2@Setup:

; 277  : 	}

	jmp	$LN6@Setup
$LN5@Setup:

; 278  : 
; 279  : 	upperX = x[2];

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [eax+8], edx

; 280  : 	middleX = x[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+12], eax

; 281  : 	lowerX = x[0];

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+16], ecx

; 282  : 	
; 283  : 	m1 = (y[1] - y[0])/(x[1] - x[0]);

	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _y$[ebp]
	mov	esi, DWORD PTR _y$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	subss	xmm0, DWORD PTR [esi+eax]
	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _x$[ebp]
	mov	esi, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR [ecx+edx]
	subss	xmm1, DWORD PTR [esi+eax]
	divss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+20], xmm0

; 284  : 	b1 = y[0] - m1 * x[0];

	mov	eax, 4
	imul	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [edx+20]
	mulss	xmm0, DWORD PTR [esi+ecx]
	mov	ecx, DWORD PTR _y$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+28], xmm1

; 285  : 
; 286  : 	m2 = (y[1] - y[2])/(x[1] - x[2]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _y$[ebp]
	mov	esi, DWORD PTR _y$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	subss	xmm0, DWORD PTR [esi+ecx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _x$[ebp]
	mov	esi, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	subss	xmm1, DWORD PTR [esi+ecx]
	divss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+24], xmm0

; 287  : 	b2 = y[1] - m2 * x[1];

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [esi+edx]
	mov	edx, DWORD PTR _y$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+32], xmm1

; 288  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?Setup@ThreePointLimiter@@QAEXPAM0@Z ENDP		; ThreePointLimiter::Setup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
_this$ = -32						; size = 4
_x$ = -28						; size = 12
_y$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_string$ = 8						; size = 4
?Setup@ThreePointLimiter@@UAEXPAD@Z PROC		; ThreePointLimiter::Setup
; _this$ = ecx

; 250  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 251  : 	float x[3],y[3];
; 252  : 	if(sscanf(string, "%f %f %f %f %f %f",&x[0],&y[0],&x[1],&y[1],&x[2],&y[2]) == 6)

	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _y$[ebp+eax]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	lea	eax, DWORD PTR _x$[ebp+edx]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	lea	edx, DWORD PTR _y$[ebp+ecx]
	push	edx
	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _x$[ebp+eax]
	push	ecx
	mov	edx, 4
	imul	edx, 0
	lea	eax, DWORD PTR _y$[ebp+edx]
	push	eax
	mov	ecx, 4
	imul	ecx, 0
	lea	edx, DWORD PTR _x$[ebp+ecx]
	push	edx
	push	OFFSET ??_C@_0BC@BEGECIBC@?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?5?$CFf?$AA@
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	call	_sscanf
	add	esp, 32					; 00000020H
	cmp	eax, 6
	jne	SHORT $LN2@Setup

; 253  : 	{
; 254  : 		Setup(x,y);	

	lea	ecx, DWORD PTR _y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Setup@ThreePointLimiter@@QAEXPAM0@Z	; ThreePointLimiter::Setup
$LN2@Setup:

; 255  : 	}
; 256  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?Setup@ThreePointLimiter@@UAEXPAD@Z ENDP		; ThreePointLimiter::Setup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ThreePointLimiter@@QAE@XZ PROC			; ThreePointLimiter::ThreePointLimiter
; _this$ = ecx

; 238  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Limiter@@QAE@W4LimiterType@@@Z	; Limiter::Limiter
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ThreePointLimiter@@6B@

; 239  : 	m1 = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+20], xmm0

; 240  : 	b1 = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+28], xmm0

; 241  : 	m2 = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+24], xmm0

; 242  : 	b2 = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+32], xmm0

; 243  : 	upperX = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+8], xmm0

; 244  : 	middleX = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+12], xmm0

; 245  : 	lowerX = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+16], xmm0

; 246  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0ThreePointLimiter@@QAE@XZ ENDP			; ThreePointLimiter::ThreePointLimiter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
tv138 = -16						; size = 4
tv132 = -12						; size = 4
tv91 = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?Limit@LineLimiter@@UAEMM@Z PROC			; LineLimiter::Limit
; _this$ = ecx

; 225  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 226  : 	if( x > upperX )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	comiss	xmm0, DWORD PTR [eax+8]
	jbe	SHORT $LN4@Limit

; 227  : 		return m*upperX + b;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+16]
	mulss	xmm0, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR tv91[ebp], xmm0
	fld	DWORD PTR tv91[ebp]
	jmp	SHORT $LN1@Limit
	jmp	SHORT $LN1@Limit
$LN4@Limit:

; 228  : 	else if ( x < lowerX)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+12]
	comiss	xmm0, DWORD PTR _x$[ebp]
	jbe	SHORT $LN2@Limit

; 229  : 		return m*lowerX + b;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+16]
	mulss	xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+20]
	movss	DWORD PTR tv132[ebp], xmm0
	fld	DWORD PTR tv132[ebp]
	jmp	SHORT $LN1@Limit

; 230  : 	else

	jmp	SHORT $LN1@Limit
$LN2@Limit:

; 231  : 		return m*x + b;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+16]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR tv138[ebp], xmm0
	fld	DWORD PTR tv138[ebp]
$LN1@Limit:

; 232  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Limit@LineLimiter@@UAEMM@Z ENDP			; LineLimiter::Limit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
tv79 = -12						; size = 4
tv76 = -8						; size = 4
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
?Setup@LineLimiter@@QAEXMMMM@Z PROC			; LineLimiter::Setup
; _this$ = ecx

; 217  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 	m = (y2 - y1)/(x2 - x1);

	movss	xmm0, DWORD PTR _y2$[ebp]
	subss	xmm0, DWORD PTR _y1$[ebp]
	movss	xmm1, DWORD PTR _x2$[ebp]
	subss	xmm1, DWORD PTR _x1$[ebp]
	divss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 219  : 	b = y1 - m * x1;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+16]
	mulss	xmm0, DWORD PTR _x1$[ebp]
	movss	xmm1, DWORD PTR _y1$[ebp]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+20], xmm1

; 220  : 	upperX = max(x1,x2);

	movss	xmm0, DWORD PTR _x1$[ebp]
	comiss	xmm0, DWORD PTR _x2$[ebp]
	jbe	SHORT $LN3@Setup
	movss	xmm0, DWORD PTR _x1$[ebp]
	movss	DWORD PTR tv76[ebp], xmm0
	jmp	SHORT $LN4@Setup
$LN3@Setup:
	movss	xmm0, DWORD PTR _x2$[ebp]
	movss	DWORD PTR tv76[ebp], xmm0
$LN4@Setup:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv76[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 221  : 	lowerX = min(x1,x2);

	movss	xmm0, DWORD PTR _x2$[ebp]
	comiss	xmm0, DWORD PTR _x1$[ebp]
	jbe	SHORT $LN5@Setup
	movss	xmm0, DWORD PTR _x1$[ebp]
	movss	DWORD PTR tv79[ebp], xmm0
	jmp	SHORT $LN6@Setup
$LN5@Setup:
	movss	xmm0, DWORD PTR _x2$[ebp]
	movss	DWORD PTR tv79[ebp], xmm0
$LN6@Setup:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv79[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 222  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Setup@LineLimiter@@QAEXMMMM@Z ENDP			; LineLimiter::Setup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
_this$ = -20						; size = 4
_x1$ = -16						; size = 4
_y1$ = -12						; size = 4
_x2$ = -8						; size = 4
_y2$ = -4						; size = 4
_string$ = 8						; size = 4
?Setup@LineLimiter@@UAEXPAD@Z PROC			; LineLimiter::Setup
; _this$ = ecx

; 210  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 211  : 	float x1,y1,x2,y2;
; 212  : 	if(sscanf(string, "%f %f %f %f",&x1,&y1,&x2,&y2) == 4)

	lea	eax, DWORD PTR _y2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _y1$[ebp]
	push	edx
	lea	eax, DWORD PTR _x1$[ebp]
	push	eax
	push	OFFSET ??_C@_0M@ONLGMOD@?$CFf?5?$CFf?5?$CFf?5?$CFf?$AA@
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 24					; 00000018H
	cmp	eax, 4
	jne	SHORT $LN1@Setup

; 213  : 		Setup(x1,y1,x2,y2);	

	push	ecx
	movss	xmm0, DWORD PTR _y2$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x2$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y1$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x1$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Setup@LineLimiter@@QAEXMMMM@Z		; LineLimiter::Setup
$LN1@Setup:

; 214  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Setup@LineLimiter@@UAEXPAD@Z ENDP			; LineLimiter::Setup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0LineLimiter@@QAE@XZ PROC				; LineLimiter::LineLimiter
; _this$ = ecx

; 202  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Limiter@@QAE@W4LimiterType@@@Z	; Limiter::Limiter
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7LineLimiter@@6B@

; 203  : 	m = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+16], xmm0

; 204  : 	b = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+20], xmm0

; 205  : 	upperX = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0

; 206  : 	lowerX = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+12], xmm0

; 207  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0LineLimiter@@QAE@XZ ENDP				; LineLimiter::LineLimiter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\limiters.h
;	COMDAT ?Setup@Limiter@@UAEXPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Setup@Limiter@@UAEXPAD@Z PROC				; Limiter::Setup, COMDAT
; _this$ = ecx

; 48   : 	virtual void Setup(char *)	{;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?Setup@Limiter@@UAEXPAD@Z ENDP				; Limiter::Setup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?Limit@Limiter@@UAEMM@Z PROC				; Limiter::Limit
; _this$ = ecx

; 193  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 194  : 	return x;

	fld	DWORD PTR _x$[ebp]

; 195  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Limit@Limiter@@UAEMM@Z ENDP				; Limiter::Limit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\airframe\limiters.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ltype$ = 8						; size = 4
??0Limiter@@QAE@W4LimiterType@@@Z PROC			; Limiter::Limiter
; _this$ = ecx

; 188  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Limiter@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ltype$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 189  : 
; 190  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Limiter@@QAE@W4LimiterType@@@Z ENDP			; Limiter::Limiter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
END
