; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\Aircraft\Damage.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?flag_keep_smoke_trails@@3HA			; flag_keep_smoke_trails
PUBLIC	?minwingvortexalt@@3MA				; minwingvortexalt
PUBLIC	?maxwingvortexalt@@3MA				; maxwingvortexalt
PUBLIC	?wingvortexAlpha@@3MA				; wingvortexAlpha
PUBLIC	?wingvortexgs@@3MA				; wingvortexgs
PUBLIC	?wingvortexAlphaHigh@@3MA			; wingvortexAlphaHigh
PUBLIC	?wingvortexAlphaLimit@@3MA			; wingvortexAlphaLimit
PUBLIC	?wingvtxTrailSizeCx@@3MA			; wingvtxTrailSizeCx
PUBLIC	?wingvtxTrailAlphaCx@@3MA			; wingvtxTrailAlphaCx
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?vortexAOA@@3MA					; vortexAOA
PUBLIC	?vortexAOALimit@@3MA				; vortexAOALimit
PUBLIC	?vortexMinSpeedLimit@@3MA			; vortexMinSpeedLimit
PUBLIC	?vortexMaxaltLimit@@3MA				; vortexMaxaltLimit
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?vortexG@@3MA					; vortexG
PUBLIC	?vortex1AlphaCx@@3MA				; vortex1AlphaCx
PUBLIC	?vortex1SizeCx@@3MA				; vortex1SizeCx
PUBLIC	?vortex2AlphaCx@@3MA				; vortex2AlphaCx
PUBLIC	?vortex2SizeCx@@3MA				; vortex2SizeCx
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?engineTrailSize@@3MA				; engineTrailSize
PUBLIC	?engineTrailAlpha@@3MA				; engineTrailAlpha
PUBLIC	?engineTrailMargin@@3MA				; engineTrailMargin
PUBLIC	?engineTrailRPMFactor@@3MA			; engineTrailRPMFactor
PUBLIC	?damageTrailSizeCx@@3MA				; damageTrailSizeCx
PUBLIC	?damageTrailAlphaCx@@3MA			; damageTrailAlphaCx
PUBLIC	?contrailMargin@@3MA				; contrailMargin
PUBLIC	?contrailLowValue@@3MA				; contrailLowValue
PUBLIC	?contrailHighValue@@3MA				; contrailHighValue
PUBLIC	?contrailLow10Percent@@3MA			; contrailLow10Percent
PUBLIC	?contrailLow90Percent@@3MA			; contrailLow90Percent
PUBLIC	?contrailHigh110Percent@@3MA			; contrailHigh110Percent
PUBLIC	?orientation@@3PAUTrotation@@A			; orientation
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
_BSS	SEGMENT
?flag_keep_smoke_trails@@3HA DD 01H DUP (?)		; flag_keep_smoke_trails
?minwingvortexalt@@3MA DD 01H DUP (?)			; minwingvortexalt
?vortex1AlphaCx@@3MA DD 01H DUP (?)			; vortex1AlphaCx
?vortex1SizeCx@@3MA DD 01H DUP (?)			; vortex1SizeCx
?vortex2AlphaCx@@3MA DD 01H DUP (?)			; vortex2AlphaCx
?vortex2SizeCx@@3MA DD 01H DUP (?)			; vortex2SizeCx
?contrailLowValue@@3MA DD 01H DUP (?)			; contrailLowValue
?contrailHighValue@@3MA DD 01H DUP (?)			; contrailHighValue
?contrailLow10Percent@@3MA DD 01H DUP (?)		; contrailLow10Percent
?contrailLow90Percent@@3MA DD 01H DUP (?)		; contrailLow90Percent
?contrailHigh110Percent@@3MA DD 01H DUP (?)		; contrailHigh110Percent
?orientation@@3PAUTrotation@@A DD 01H DUP (?)		; orientation
_BSS	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
_NEAR_CLIP DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
_DATA	SEGMENT
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
?maxwingvortexalt@@3MA DD 046c35000r		; 25000	; maxwingvortexalt
?wingvortexAlpha@@3MA DD 041400000r		; 12	; wingvortexAlpha
?wingvortexgs@@3MA DD 040600000r		; 3.5	; wingvortexgs
?wingvortexAlphaHigh@@3MA DD 041a00000r		; 20	; wingvortexAlphaHigh
?wingvortexAlphaLimit@@3MA DD 041ec0000r	; 29.5	; wingvortexAlphaLimit
?wingvtxTrailSizeCx@@3MA DD 03f800000r		; 1	; wingvtxTrailSizeCx
?wingvtxTrailAlphaCx@@3MA DD 03f800000r		; 1	; wingvtxTrailAlphaCx
?vortexAOA@@3MA DD 041a00000r			; 20	; vortexAOA
?vortexAOALimit@@3MA DD 041ec0000r		; 29.5	; vortexAOALimit
?vortexMinSpeedLimit@@3MA DD 043160000r		; 150	; vortexMinSpeedLimit
?vortexMaxaltLimit@@3MA DD 04708b800r		; 35000	; vortexMaxaltLimit
?vortexG@@3MA DD 040a00000r			; 5	; vortexG
?engineTrailSize@@3MA DD 03f800000r		; 1	; engineTrailSize
?engineTrailAlpha@@3MA DD 03f800000r		; 1	; engineTrailAlpha
?engineTrailMargin@@3MA DD 03f800000r		; 1	; engineTrailMargin
?engineTrailRPMFactor@@3MA DD 03f800000r	; 1	; engineTrailRPMFactor
?damageTrailSizeCx@@3MA DD 03f800000r		; 1	; damageTrailSizeCx
?damageTrailAlphaCx@@3MA DD 03f800000r		; 1	; damageTrailAlphaCx
?contrailMargin@@3MA DD 03f800000r		; 1	; contrailMargin
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_DATA	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	_asinf
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	?abs@@YAMM@Z					; abs
PUBLIC	?asin@@YAMM@Z					; asin
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?SetYPR@VuEntity@@QAEXMMM@Z			; VuEntity::SetYPR
PUBLIC	?SetYPRDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetYPRDelta
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?Type@VuEntity@@QBEGXZ				; VuEntity::Type
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?XDelta@VuEntity@@QBEMXZ			; VuEntity::XDelta
PUBLIC	?YDelta@VuEntity@@QBEMXZ			; VuEntity::YDelta
PUBLIC	?ZDelta@VuEntity@@QBEMXZ			; VuEntity::ZDelta
PUBLIC	?Yaw@VuEntity@@QBEMXZ				; VuEntity::Yaw
PUBLIC	?Pitch@VuEntity@@QBEMXZ				; VuEntity::Pitch
PUBLIC	?Roll@VuEntity@@QBEMXZ				; VuEntity::Roll
PUBLIC	?YawDelta@VuEntity@@QBEMXZ			; VuEntity::YawDelta
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?RequestOutOfBandTransmit@VuMessage@@QAEXXZ	; VuMessage::RequestOutOfBandTransmit
PUBLIC	?IsSim@FalconEntity@@QAEHXZ			; FalconEntity::IsSim
PUBLIC	?IsSetFalcFlag@FalconEntity@@QAEHH@Z		; FalconEntity::IsSetFalcFlag
PUBLIC	?mlSinCos@@YAXPAUmlTrig@@M@Z			; mlSinCos
PUBLIC	?checked_atan2@@YANNN@Z				; checked_atan2
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?Radius@DrawableObject@@QBEMXZ			; DrawableObject::Radius
PUBLIC	?GetNumSlots@DrawableBSP@@QAEHXZ		; DrawableBSP::GetNumSlots
PUBLIC	?GetNumDynamicVertices@DrawableBSP@@QAEHXZ	; DrawableBSP::GetNumDynamicVertices
PUBLIC	?GenerateFastRandom@@YAJXZ			; GenerateFastRandom
PUBLIC	?PRANDInt5@@YAHXZ				; PRANDInt5
PUBLIC	?PRANDInt3@@YAHXZ				; PRANDInt3
PUBLIC	?PRANDFloat@@YAMXZ				; PRANDFloat
PUBLIC	?PRANDFloatPos@@YAMXZ				; PRANDFloatPos
PUBLIC	?GetDomain@SimBaseClass@@QBEEXZ			; SimBaseClass::GetDomain
PUBLIC	?GetClass@SimBaseClass@@QBEEXZ			; SimBaseClass::GetClass
PUBLIC	?GetType@SimBaseClass@@QBEEXZ			; SimBaseClass::GetType
PUBLIC	?GetSType@SimBaseClass@@QBEEXZ			; SimBaseClass::GetSType
PUBLIC	?GetSPType@SimBaseClass@@QBEEXZ			; SimBaseClass::GetSPType
PUBLIC	?IsSetFlag@SimBaseClass@@QBEHH@Z		; SimBaseClass::IsSetFlag
PUBLIC	?PowerOutput@SimBaseClass@@QAEMXZ		; SimBaseClass::PowerOutput
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	?GetDOFValue@SimMoverClass@@QAEMH@Z		; SimMoverClass::GetDOFValue
PUBLIC	?LEFOn@AircraftClass@@QAEXW4LEFStateFlags@1@@Z	; AircraftClass::LEFOn
PUBLIC	?LEFState@AircraftClass@@QAEHW4LEFStateFlags@1@@Z ; AircraftClass::LEFState
PUBLIC	?IsF16@AircraftClass@@QAEHXZ			; AircraftClass::IsF16
PUBLIC	?IsComplex@AircraftClass@@QAEHXZ		; AircraftClass::IsComplex
PUBLIC	?ApplyDamage@AircraftClass@@UAEXPAVFalconDamageMessage@@@Z ; AircraftClass::ApplyDamage
PUBLIC	?SetColorContrail@AircraftClass@@QAEXH@Z	; AircraftClass::SetColorContrail
PUBLIC	?AddEngineTrails@AircraftClass@@QAEXHPAK0@Z	; AircraftClass::AddEngineTrails
PUBLIC	?CancelEngineTrails@AircraftClass@@QAEXPAK0@Z	; AircraftClass::CancelEngineTrails
PUBLIC	?InitDamageStation@AircraftClass@@QAEXXZ	; AircraftClass::InitDamageStation
PUBLIC	?CleanupDamageStation@AircraftClass@@QAEXXZ	; AircraftClass::CleanupDamageStation
PUBLIC	?CleanupVortex@AircraftClass@@QAEXXZ		; AircraftClass::CleanupVortex
PUBLIC	?RunExplosion@AircraftClass@@QAEXXZ		; AircraftClass::RunExplosion
PUBLIC	?ShowDamage@AircraftClass@@QAEXXZ		; AircraftClass::ShowDamage
PUBLIC	?CleanupDamage@AircraftClass@@QAEXXZ		; AircraftClass::CleanupDamage
PUBLIC	?CheckObjectCollision@AircraftClass@@QAEXXZ	; AircraftClass::CheckObjectCollision
PUBLIC	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ	; AircraftClass::DBrain
PUBLIC	?RunCautionChecks@AircraftClass@@QAEXXZ		; AircraftClass::RunCautionChecks
PUBLIC	?AddFault@AircraftClass@@QAEXHIHH@Z		; AircraftClass::AddFault
PUBLIC	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
PUBLIC	?CreateDamageF16Piece@AircraftClass@@IAEHPAUDamageF16PieceStructure@@PAH@Z ; AircraftClass::CreateDamageF16Piece
PUBLIC	?CreateDamageF16Effects@AircraftClass@@IAEHXZ	; AircraftClass::CreateDamageF16Effects
PUBLIC	?SetupDamageF16Effects@AircraftClass@@IAEXPAUDamageF16PieceStructure@@@Z ; AircraftClass::SetupDamageF16Effects
PUBLIC	?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ; FalconSessionEntity::GetPlayerEntity
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
PUBLIC	?SetATCFlag@DigitalBrain@@QAEXH@Z		; DigitalBrain::SetATCFlag
PUBLIC	?SetATCStatus@DigitalBrain@@QAEXW4AtcStatusEnum@@@Z ; DigitalBrain::SetATCStatus
PUBLIC	?SetWaitTimer@DigitalBrain@@QAEXK@Z		; DigitalBrain::SetWaitTimer
PUBLIC	?Thrust@AirframeClass@@QAEMXZ			; AirframeClass::Thrust
PUBLIC	?GeneratorOff@AirframeClass@@QAEXW4Generator@1@@Z ; AirframeClass::GeneratorOff
PUBLIC	?GeneratorBreak@AirframeClass@@QAEXW4Generator@1@@Z ; AirframeClass::GeneratorBreak
PUBLIC	?GetAeroData@AirframeClass@@QBEMH@Z		; AirframeClass::GetAeroData
PUBLIC	?SetFlag@AirframeClass@@QAEXH@Z			; AirframeClass::SetFlag
PUBLIC	?ClearFlag@AirframeClass@@QAEXH@Z		; AirframeClass::ClearFlag
PUBLIC	?IsSet@AirframeClass@@QBEHH@Z			; AirframeClass::IsSet
PUBLIC	?CollisionsOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::CollisionsOn
PUBLIC	?Scale@OTWDriverClass@@QAEMXZ			; OTWDriverClass::Scale
PUBLIC	?SetChaseAzEl@OTWDriverClass@@QAEXMM@Z		; OTWDriverClass::SetChaseAzEl
PUBLIC	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ	; SimObjectType::BaseData
PUBLIC	?Parent@SimWeaponClass@@QAEPAVFalconEntity@@XZ	; SimWeaponClass::Parent
PUBLIC	?BreakRecord@AircraftTurbulence@@QAEXXZ		; AircraftTurbulence::BreakRecord
PUBLIC	?Online@UIComms@@QAEHXZ				; UIComms::Online
PUBLIC	?Get3DDistance@@YAMAAUTpoint@@0@Z		; Get3DDistance
PUBLIC	?Get3DMiddle@@YA?AUTpoint@@AAU1@0@Z		; Get3DMiddle
PUBLIC	?AssignACOrientation@@YAXAAPAUTrotation@@AAUTpoint@@11_N@Z ; AssignACOrientation
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA	; `GenerateFastRandom'::`2'::LastRandom
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@360637bd
PUBLIC	__real@3727c5ac
PUBLIC	__real@38d1b717
PUBLIC	__real@3c8efa34
PUBLIC	__real@3cf5c28f
PUBLIC	__real@3db2b8c1
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e19999a
PUBLIC	__real@3e32b8c1
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e800000
PUBLIC	__real@3e860a91
PUBLIC	__real@3ecccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f060a91
PUBLIC	__real@3f19999a
PUBLIC	__real@3f32b8c1
PUBLIC	__real@3f400000
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f555555
PUBLIC	__real@3f5f66f1
PUBLIC	__real@3f666666
PUBLIC	__real@3f75be09
PUBLIC	__real@3f75c28f
PUBLIC	__real@3f800000
PUBLIC	__real@3f880000
PUBLIC	__real@3f900000
PUBLIC	__real@3f91361d
PUBLIC	__real@3f9c61a9
PUBLIC	__real@3fa00000
PUBLIC	__real@3fc00000
PUBLIC	__real@3feccccccccccccd
PUBLIC	__real@3ff5be09
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@40000000
PUBLIC	__real@40060a91
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@400c000000000000
PUBLIC	__real@40200000
PUBLIC	__real@40400000
PUBLIC	__real@4046d3f0
PUBLIC	__real@40490fd9
PUBLIC	__real@40700000
PUBLIC	__real@40800000
PUBLIC	__real@40900000
PUBLIC	__real@4096cbe3
PUBLIC	__real@40a00000
PUBLIC	__real@40c90fd9
PUBLIC	__real@40e00000
PUBLIC	__real@40f00000
PUBLIC	__real@40fb53cf
PUBLIC	__real@41000000
PUBLIC	__real@41080000
PUBLIC	__real@41100000
PUBLIC	__real@41200000
PUBLIC	__real@41700000
PUBLIC	__real@41a00000
PUBLIC	__real@41c80000
PUBLIC	__real@41f00000
PUBLIC	__real@420c0000
PUBLIC	__real@42200000
PUBLIC	__real@42340000
PUBLIC	__real@42480000
PUBLIC	__real@42652ee1
PUBLIC	__real@42700000
PUBLIC	__real@42a00000
PUBLIC	__real@42aa0000
PUBLIC	__real@42b40000
PUBLIC	__real@42f00000
PUBLIC	__real@43340000
PUBLIC	__real@43480000
PUBLIC	__real@437a0000
PUBLIC	__real@43960000
PUBLIC	__real@43fa0000
PUBLIC	__real@447a0000
PUBLIC	__real@451c4000
PUBLIC	__real@459c4000
PUBLIC	__real@45bde1b0
PUBLIC	__real@461c4000
PUBLIC	__real@462be000
PUBLIC	__real@466a6000
PUBLIC	__real@46c35000
PUBLIC	__real@477fff00
PUBLIC	__real@8000000000000000
PUBLIC	__real@bc23d70a
PUBLIC	__real@bdb2b8c1
PUBLIC	__real@bf400000
PUBLIC	__real@bff921fb54442d18
PUBLIC	__real@c046d3f0
PUBLIC	__real@c0c90fd9
PUBLIC	__real@c0e00000
PUBLIC	__real@c0fb53cf
PUBLIC	__real@c1200000
PUBLIC	__real@c2340000
PUBLIC	__real@c2480000
PUBLIC	__real@c2b40000
PUBLIC	__real@c3340000
PUBLIC	__real@c3480000
PUBLIC	__real@c3fa0000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_asin:PROC
EXTRN	_atan:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_sin:PROC
EXTRN	_rand:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?F4IsBadReadPtr@@YA_NPBXI@Z:PROC		; F4IsBadReadPtr
EXTRN	?SetPosition@VuEntity@@QAEXMMM@Z:PROC		; VuEntity::SetPosition
EXTRN	?SetDelta@VuEntity@@QAEXMMM@Z:PROC		; VuEntity::SetDelta
EXTRN	?IsLocal@VuEntity@@QBEEXZ:PROC			; VuEntity::IsLocal
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?GetChildOffset@DrawableBSP@@QAEXHPAUTpoint@@@Z:PROC ; DrawableBSP::GetChildOffset
EXTRN	?SetDOFangle@DrawableBSP@@QAEXHM@Z:PROC		; DrawableBSP::SetDOFangle
EXTRN	?SetSwitchMask@DrawableBSP@@QAEXHK@Z:PROC	; DrawableBSP::SetSwitchMask
EXTRN	?GetDOFangle@DrawableBSP@@QAEMH@Z:PROC		; DrawableBSP::GetDOFangle
EXTRN	?GetDynamicCoords@DrawableBSP@@QAEXHPAM00@Z:PROC ; DrawableBSP::GetDynamicCoords
EXTRN	?GetBoundingBox@DrawableBSP@@QAEXPAUTpoint@@0@Z:PROC ; DrawableBSP::GetBoundingBox
EXTRN	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z:PROC ; MatrixMult
EXTRN	?Sfx@F4SoundPos@@QAEXHHMM@Z:PROC		; F4SoundPos::Sfx
EXTRN	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z:PROC ; DrawableParticleSys::PS_AddParticleEx
EXTRN	?PS_KillTrail@DrawableParticleSys@@SAXK@Z:PROC	; DrawableParticleSys::PS_KillTrail
EXTRN	?PS_EmitTrail@DrawableParticleSys@@SAKKHMMMMM@Z:PROC ; DrawableParticleSys::PS_EmitTrail
EXTRN	?FalconSendMessage@@YAXPAVVuMessage@@H@Z:PROC	; FalconSendMessage
EXTRN	?SetFlag@SimBaseClass@@QAEXH@Z:PROC		; SimBaseClass::SetFlag
EXTRN	?UnSetFlag@SimBaseClass@@QAEXH@Z:PROC		; SimBaseClass::UnSetFlag
EXTRN	?ApplyDamage@SimVehicleClass@@UAEXPAVFalconDamageMessage@@@Z:PROC ; SimVehicleClass::ApplyDamage
EXTRN	?SetAutopilot@AircraftClass@@QAEXW4AutoPilotType@1@@Z:PROC ; AircraftClass::SetAutopilot
EXTRN	?LandingCheck@AircraftClass@@QAEHMMH@Z:PROC	; AircraftClass::LandingCheck
EXTRN	??0FalconDamageMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconDamageMessage::FalconDamageMessage
EXTRN	?MapVisId@@YAKK@Z:PROC				; MapVisId
EXTRN	??0SimStaticClass@@QAE@H@Z:PROC			; SimStaticClass::SimStaticClass
EXTRN	?CalculateGroundPlane@AirframeClass@@ABEXPAM0@Z:PROC ; AirframeClass::CalculateGroundPlane
EXTRN	?EngineTrail@AirframeClass@@QAEHXZ:PROC		; AirframeClass::EngineTrail
EXTRN	?HydrBreak@AirframeClass@@QAEXH@Z:PROC		; AirframeClass::HydrBreak
EXTRN	?ResetOrientation@AirframeClass@@QAEXXZ:PROC	; AirframeClass::ResetOrientation
EXTRN	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z:PROC ; OTWDriverClass::GetGroundLevel
EXTRN	?GetApproxGroundLevel@OTWDriverClass@@QAEMMM@Z:PROC ; OTWDriverClass::GetApproxGroundLevel
EXTRN	?CreateVisualObject@OTWDriverClass@@QAEXPAVSimBaseClass@@HPAUTpoint@@PAUTrotation@@M@Z:PROC ; OTWDriverClass::CreateVisualObject
EXTRN	?AddSfxRequest@OTWDriverClass@@QAEXPAVSfxClass@@@Z:PROC ; OTWDriverClass::AddSfxRequest
EXTRN	??0SfxClass@@QAE@HHPAVSimBaseClass@@MMPAUTpoint@@MM@Z:PROC ; SfxClass::SfxClass
EXTRN	?GetParentAircraft@EjectedPilotClass@@QAEPAVAircraftClass@@XZ:PROC ; EjectedPilotClass::GetParentAircraft
EXTRN	?SetFault@FackClass@@QAEXHH@Z:PROC		; FackClass::SetFault
EXTRN	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z:PROC ; FackClass::GetFault
EXTRN	?JoystickPlayEffect@@YAHHH@Z:PROC		; JoystickPlayEffect
EXTRN	?RecordPosition@AircraftTurbulence@@QAEXMMMM@Z:PROC ; AircraftTurbulence::RecordPosition
EXTRN	?CalcTransformMatrix@@YAXPAVSimBaseClass@@@Z:PROC ; CalcTransformMatrix
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?SimLibMajorFrameTime@@3MA:DWORD		; SimLibMajorFrameTime
EXTRN	?SimLibElapsedTime@@3KA:DWORD			; SimLibElapsedTime
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?Origin@@3UTpoint@@B:BYTE			; Origin
EXTRN	?IMatrix@@3UTrotation@@B:BYTE			; IMatrix
EXTRN	?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A:DWORD ; Falcon4ClassTable
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?aeroDataset@@3PAVAeroDataSet@@A:DWORD		; aeroDataset
EXTRN	?PlayerOptions@@3VPlayerOptionsClass@@A:BYTE	; PlayerOptions
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?g_bRealisticAvionics@@3_NA:BYTE		; g_bRealisticAvionics
EXTRN	?realWeather@@3PAVRealWeather@@A:DWORD		; realWeather
EXTRN	?g_intellivibeData@@3VIntellivibeData@@A:BYTE	; g_intellivibeData
EXTRN	?gSharedIntellivibe@@3PAXA:DWORD		; gSharedIntellivibe
EXTRN	?g_bDisableFunkyChicken@@3_NA:BYTE		; g_bDisableFunkyChicken
EXTRN	?gCommsMgr@@3PAVUIComms@@A:DWORD		; gCommsMgr
EXTRN	?g_fCarrierStartTolerance@@3MA:DWORD		; g_fCarrierStartTolerance
EXTRN	?g_bWakeTurbulence@@3_NA:BYTE			; g_bWakeTurbulence
EXTRN	?g_bNewDamageEffects@@3_NA:BYTE			; g_bNewDamageEffects
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA
_BSS	SEGMENT
?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA DD 01H DUP (?) ; `GenerateFastRandom'::`2'::LastRandom
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c3fa0000
CONST	SEGMENT
__real@c3fa0000 DD 0c3fa0000r			; -500
CONST	ENDS
;	COMDAT __real@c3480000
CONST	SEGMENT
__real@c3480000 DD 0c3480000r			; -200
CONST	ENDS
;	COMDAT __real@c3340000
CONST	SEGMENT
__real@c3340000 DD 0c3340000r			; -180
CONST	ENDS
;	COMDAT __real@c2b40000
CONST	SEGMENT
__real@c2b40000 DD 0c2b40000r			; -90
CONST	ENDS
;	COMDAT __real@c2480000
CONST	SEGMENT
__real@c2480000 DD 0c2480000r			; -50
CONST	ENDS
;	COMDAT __real@c2340000
CONST	SEGMENT
__real@c2340000 DD 0c2340000r			; -45
CONST	ENDS
;	COMDAT __real@c1200000
CONST	SEGMENT
__real@c1200000 DD 0c1200000r			; -10
CONST	ENDS
;	COMDAT __real@c0fb53cf
CONST	SEGMENT
__real@c0fb53cf DD 0c0fb53cfr			; -7.85398
CONST	ENDS
;	COMDAT __real@c0e00000
CONST	SEGMENT
__real@c0e00000 DD 0c0e00000r			; -7
CONST	ENDS
;	COMDAT __real@c0c90fd9
CONST	SEGMENT
__real@c0c90fd9 DD 0c0c90fd9r			; -6.28318
CONST	ENDS
;	COMDAT __real@c046d3f0
CONST	SEGMENT
__real@c046d3f0 DD 0c046d3f0r			; -3.10669
CONST	ENDS
;	COMDAT __real@bff921fb54442d18
CONST	SEGMENT
__real@bff921fb54442d18 DQ 0bff921fb54442d18r	; -1.5708
CONST	ENDS
;	COMDAT __real@bf400000
CONST	SEGMENT
__real@bf400000 DD 0bf400000r			; -0.75
CONST	ENDS
;	COMDAT __real@bdb2b8c1
CONST	SEGMENT
__real@bdb2b8c1 DD 0bdb2b8c1r			; -0.0872665
CONST	ENDS
;	COMDAT __real@bc23d70a
CONST	SEGMENT
__real@bc23d70a DD 0bc23d70ar			; -0.01
CONST	ENDS
;	COMDAT __real@8000000000000000
CONST	SEGMENT
__real@8000000000000000 DQ 08000000000000000r	; -0
CONST	ENDS
;	COMDAT __real@477fff00
CONST	SEGMENT
__real@477fff00 DD 0477fff00r			; 65535
CONST	ENDS
;	COMDAT __real@46c35000
CONST	SEGMENT
__real@46c35000 DD 046c35000r			; 25000
CONST	ENDS
;	COMDAT __real@466a6000
CONST	SEGMENT
__real@466a6000 DD 0466a6000r			; 15000
CONST	ENDS
;	COMDAT __real@462be000
CONST	SEGMENT
__real@462be000 DD 0462be000r			; 11000
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@45bde1b0
CONST	SEGMENT
__real@45bde1b0 DD 045bde1b0r			; 6076.21
CONST	ENDS
;	COMDAT __real@459c4000
CONST	SEGMENT
__real@459c4000 DD 0459c4000r			; 5000
CONST	ENDS
;	COMDAT __real@451c4000
CONST	SEGMENT
__real@451c4000 DD 0451c4000r			; 2500
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@43960000
CONST	SEGMENT
__real@43960000 DD 043960000r			; 300
CONST	ENDS
;	COMDAT __real@437a0000
CONST	SEGMENT
__real@437a0000 DD 0437a0000r			; 250
CONST	ENDS
;	COMDAT __real@43480000
CONST	SEGMENT
__real@43480000 DD 043480000r			; 200
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@42f00000
CONST	SEGMENT
__real@42f00000 DD 042f00000r			; 120
CONST	ENDS
;	COMDAT __real@42b40000
CONST	SEGMENT
__real@42b40000 DD 042b40000r			; 90
CONST	ENDS
;	COMDAT __real@42aa0000
CONST	SEGMENT
__real@42aa0000 DD 042aa0000r			; 85
CONST	ENDS
;	COMDAT __real@42a00000
CONST	SEGMENT
__real@42a00000 DD 042a00000r			; 80
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@42652ee1
CONST	SEGMENT
__real@42652ee1 DD 042652ee1r			; 57.2958
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@42340000
CONST	SEGMENT
__real@42340000 DD 042340000r			; 45
CONST	ENDS
;	COMDAT __real@42200000
CONST	SEGMENT
__real@42200000 DD 042200000r			; 40
CONST	ENDS
;	COMDAT __real@420c0000
CONST	SEGMENT
__real@420c0000 DD 0420c0000r			; 35
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@41c80000
CONST	SEGMENT
__real@41c80000 DD 041c80000r			; 25
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@41080000
CONST	SEGMENT
__real@41080000 DD 041080000r			; 8.5
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40fb53cf
CONST	SEGMENT
__real@40fb53cf DD 040fb53cfr			; 7.85398
CONST	ENDS
;	COMDAT __real@40f00000
CONST	SEGMENT
__real@40f00000 DD 040f00000r			; 7.5
CONST	ENDS
;	COMDAT __real@40e00000
CONST	SEGMENT
__real@40e00000 DD 040e00000r			; 7
CONST	ENDS
;	COMDAT __real@40c90fd9
CONST	SEGMENT
__real@40c90fd9 DD 040c90fd9r			; 6.28318
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@4096cbe3
CONST	SEGMENT
__real@4096cbe3 DD 04096cbe3r			; 4.71239
CONST	ENDS
;	COMDAT __real@40900000
CONST	SEGMENT
__real@40900000 DD 040900000r			; 4.5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40700000
CONST	SEGMENT
__real@40700000 DD 040700000r			; 3.75
CONST	ENDS
;	COMDAT __real@40490fd9
CONST	SEGMENT
__real@40490fd9 DD 040490fd9r			; 3.14159
CONST	ENDS
;	COMDAT __real@4046d3f0
CONST	SEGMENT
__real@4046d3f0 DD 04046d3f0r			; 3.10669
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40200000
CONST	SEGMENT
__real@40200000 DD 040200000r			; 2.5
CONST	ENDS
;	COMDAT __real@400c000000000000
CONST	SEGMENT
__real@400c000000000000 DQ 0400c000000000000r	; 3.5
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@40060a91
CONST	SEGMENT
__real@40060a91 DD 040060a91r			; 2.09439
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3ff5be09
CONST	SEGMENT
__real@3ff5be09 DD 03ff5be09r			; 1.91986
CONST	ENDS
;	COMDAT __real@3feccccccccccccd
CONST	SEGMENT
__real@3feccccccccccccd DQ 03feccccccccccccdr	; 0.9
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3fa00000
CONST	SEGMENT
__real@3fa00000 DD 03fa00000r			; 1.25
CONST	ENDS
;	COMDAT __real@3f9c61a9
CONST	SEGMENT
__real@3f9c61a9 DD 03f9c61a9r			; 1.22173
CONST	ENDS
;	COMDAT __real@3f91361d
CONST	SEGMENT
__real@3f91361d DD 03f91361dr			; 1.13446
CONST	ENDS
;	COMDAT __real@3f900000
CONST	SEGMENT
__real@3f900000 DD 03f900000r			; 1.125
CONST	ENDS
;	COMDAT __real@3f880000
CONST	SEGMENT
__real@3f880000 DD 03f880000r			; 1.0625
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f75c28f
CONST	SEGMENT
__real@3f75c28f DD 03f75c28fr			; 0.96
CONST	ENDS
;	COMDAT __real@3f75be09
CONST	SEGMENT
__real@3f75be09 DD 03f75be09r			; 0.959931
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f5f66f1
CONST	SEGMENT
__real@3f5f66f1 DD 03f5f66f1r			; 0.872665
CONST	ENDS
;	COMDAT __real@3f555555
CONST	SEGMENT
__real@3f555555 DD 03f555555r			; 0.833333
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f32b8c1
CONST	SEGMENT
__real@3f32b8c1 DD 03f32b8c1r			; 0.698132
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f060a91
CONST	SEGMENT
__real@3f060a91 DD 03f060a91r			; 0.523599
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3e860a91
CONST	SEGMENT
__real@3e860a91 DD 03e860a91r			; 0.261799
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e32b8c1
CONST	SEGMENT
__real@3e32b8c1 DD 03e32b8c1r			; 0.174533
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3db2b8c1
CONST	SEGMENT
__real@3db2b8c1 DD 03db2b8c1r			; 0.0872665
CONST	ENDS
;	COMDAT __real@3cf5c28f
CONST	SEGMENT
__real@3cf5c28f DD 03cf5c28fr			; 0.03
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@38d1b717
CONST	SEGMENT
__real@38d1b717 DD 038d1b717r			; 0.0001
CONST	ENDS
;	COMDAT __real@3727c5ac
CONST	SEGMENT
__real@3727c5ac DD 03727c5acr			; 1e-005
CONST	ENDS
;	COMDAT __real@360637bd
CONST	SEGMENT
__real@360637bd DD 0360637bdr			; 2e-006
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?RunExplosion@AircraftClass@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RunExplosion@AircraftClass@@QAEXXZ$0
__unwindtable$?SetupDamageF16Effects@AircraftClass@@IAEXPAUDamageF16PieceStructure@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetupDamageF16Effects@AircraftClass@@IAEXPAUDamageF16PieceStructure@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SetupDamageF16Effects@AircraftClass@@IAEXPAUDamageF16PieceStructure@@@Z$1
__unwindtable$?CheckObjectCollision@AircraftClass@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckObjectCollision@AircraftClass@@QAEXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckObjectCollision@AircraftClass@@QAEXXZ$1
__ehfuncinfo$?SetupDamageF16Effects@AircraftClass@@IAEXPAUDamageF16PieceStructure@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetupDamageF16Effects@AircraftClass@@IAEXPAUDamageF16PieceStructure@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CheckObjectCollision@AircraftClass@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CheckObjectCollision@AircraftClass@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?RunExplosion@AircraftClass@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RunExplosion@AircraftClass@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\damage.cpp
_TEXT	SEGMENT
_orientation$ = 8					; size = 4
_origin$ = 12						; size = 4
_position$ = 16						; size = 4
_worldPosition$ = 20					; size = 4
_right$ = 24						; size = 1
?AssignACOrientation@@YAXAAPAUTrotation@@AAUTpoint@@11_N@Z PROC ; AssignACOrientation

; 3379 : {

	push	ebp
	mov	ebp, esp

; 3380 : 	// FRB - not now
; 3381 : 	if (!orientation)

	mov	eax, DWORD PTR _orientation$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@AssignACOr

; 3382 : 		return;

	jmp	$LN4@AssignACOr
$LN3@AssignACOr:

; 3383 : 
; 3384 : 	if ( right )

	movzx	ecx, BYTE PTR _right$[ebp]
	test	ecx, ecx
	je	$LN2@AssignACOr

; 3385 : 	{
; 3386 : 		position.x = orientation->M11*origin.x + orientation->M12*origin.y + orientation->M13*origin.z + worldPosition.x;

	mov	edx, DWORD PTR _orientation$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _origin$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _orientation$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _origin$[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _orientation$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _origin$[ebp]
	movss	xmm1, DWORD PTR [eax+8]
	mulss	xmm1, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _worldPosition$[ebp]
	addss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _position$[ebp]
	movss	DWORD PTR [eax], xmm0

; 3387 : 		position.y = orientation->M21*origin.x + orientation->M22*origin.y + orientation->M23*origin.z + worldPosition.y;

	mov	ecx, DWORD PTR _orientation$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _origin$[ebp]
	movss	xmm0, DWORD PTR [edx+12]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _orientation$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _origin$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _orientation$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _origin$[ebp]
	movss	xmm1, DWORD PTR [edx+20]
	mulss	xmm1, DWORD PTR [eax+8]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _worldPosition$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _position$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 3388 : 		position.z = orientation->M31*origin.x + orientation->M32*origin.y + orientation->M33*origin.z + worldPosition.z;

	mov	eax, DWORD PTR _orientation$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _origin$[ebp]
	movss	xmm0, DWORD PTR [ecx+24]
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _orientation$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _origin$[ebp]
	movss	xmm1, DWORD PTR [ecx+28]
	mulss	xmm1, DWORD PTR [edx+4]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _orientation$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _origin$[ebp]
	movss	xmm1, DWORD PTR [ecx+32]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _worldPosition$[ebp]
	addss	xmm0, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _position$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 3389 : 	}
; 3390 : 	else

	jmp	$LN1@AssignACOr
$LN2@AssignACOr:

; 3391 : 	{
; 3392 : 		position.x = orientation->M11*origin.x + orientation->M12*-origin.y + orientation->M13*origin.z + worldPosition.x;

	mov	edx, DWORD PTR _orientation$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _origin$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _orientation$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _origin$[ebp]
	movss	xmm1, DWORD PTR [ecx+4]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _orientation$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _origin$[ebp]
	movss	xmm1, DWORD PTR [eax+8]
	mulss	xmm1, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _worldPosition$[ebp]
	addss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _position$[ebp]
	movss	DWORD PTR [eax], xmm0

; 3393 : 		position.y = orientation->M21*origin.x + orientation->M22*-origin.y + orientation->M23*origin.z + worldPosition.y;

	mov	ecx, DWORD PTR _orientation$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _origin$[ebp]
	movss	xmm0, DWORD PTR [edx+12]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _orientation$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _origin$[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, DWORD PTR [edx+16]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _orientation$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _origin$[ebp]
	movss	xmm1, DWORD PTR [edx+20]
	mulss	xmm1, DWORD PTR [eax+8]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _worldPosition$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _position$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 3394 : 		position.z = orientation->M31*origin.x + orientation->M32*-origin.y + orientation->M33*origin.z + worldPosition.z;

	mov	eax, DWORD PTR _orientation$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _origin$[ebp]
	movss	xmm0, DWORD PTR [ecx+24]
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _orientation$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _origin$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, DWORD PTR [ecx+28]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _orientation$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _origin$[ebp]
	movss	xmm1, DWORD PTR [ecx+32]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _worldPosition$[ebp]
	addss	xmm0, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _position$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
$LN1@AssignACOr:
$LN4@AssignACOr:

; 3395 : 	}
; 3396 : }

	pop	ebp
	ret	0
?AssignACOrientation@@YAXAAPAUTrotation@@AAUTpoint@@11_N@Z ENDP ; AssignACOrientation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\damage.cpp
_TEXT	SEGMENT
_middle$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
$T1 = 8							; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
?Get3DMiddle@@YA?AUTpoint@@AAU1@0@Z PROC		; Get3DMiddle

; 3367 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 3368 : 	Tpoint middle;
; 3369 : 
; 3370 : 	middle.x = (a.x + b.x) / 2.0f;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _middle$[ebp], xmm0

; 3371 : 	middle.y = (a.y + b.y) / 2.0f;

	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [eax+4]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _middle$[ebp+4], xmm0

; 3372 : 	middle.z = (a.z + b.z) / 2.0f;

	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	addss	xmm0, DWORD PTR [edx+8]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _middle$[ebp+8], xmm0

; 3373 : 
; 3374 : 	return middle;

	mov	eax, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR _middle$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _middle$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _middle$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR $T1[ebp]

; 3375 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?Get3DMiddle@@YA?AUTpoint@@AAU1@0@Z ENDP		; Get3DMiddle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\damage.cpp
_TEXT	SEGMENT
_dz$ = -12						; size = 4
_dy$ = -8						; size = 4
_dx$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?Get3DDistance@@YAMAAUTpoint@@0@Z PROC			; Get3DDistance

; 3358 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 3359 : 	float	dx = a.x - b.x;

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR _dx$[ebp], xmm0

; 3360 : 	float	dy = a.y - b.y;

	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _dy$[ebp], xmm0

; 3361 : 	float	dz = a.z - b.z;

	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR _dz$[ebp], xmm0

; 3362 : 
; 3363 : 	return sqrtf( dx * dx + dy * dy + dz * dz);

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dz$[ebp]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4

; 3364 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Get3DDistance@@YAMAAUTpoint@@0@Z ENDP			; Get3DDistance
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\include\uicomms.h
;	COMDAT ?Online@UIComms@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Online@UIComms@@QAEHXZ PROC				; UIComms::Online, COMDAT
; _this$ = ecx

; 118  : 		BOOL Online()					{ return(Online_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+64]
	mov	esp, ebp
	pop	ebp
	ret	0
?Online@UIComms@@QAEHXZ ENDP				; UIComms::Online
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\acturbulence.h
;	COMDAT ?BreakRecord@AircraftTurbulence@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BreakRecord@AircraftTurbulence@@QAEXXZ PROC		; AircraftTurbulence::BreakRecord, COMDAT
; _this$ = ecx

; 28   : 	void BreakRecord(void) {breakRecord = 1;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 1
	mov	esp, ebp
	pop	ebp
	ret	0
?BreakRecord@AircraftTurbulence@@QAEXXZ ENDP		; AircraftTurbulence::BreakRecord
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simweapn.h
;	COMDAT ?Parent@SimWeaponClass@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Parent@SimWeaponClass@@QAEPAVFalconEntity@@XZ PROC	; SimWeaponClass::Parent, COMDAT
; _this$ = ecx

; 45   : 	FalconEntity* Parent(void) { return parent.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?Parent@SimWeaponClass@@QAEPAVFalconEntity@@XZ ENDP	; SimWeaponClass::Parent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\object.h
;	COMDAT ?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ PROC	; SimObjectType::BaseData, COMDAT
; _this$ = ecx

; 92   : 	FalconEntity* BaseData(void) { return baseData.get(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ENDP	; SimObjectType::BaseData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\otwdrive.h
;	COMDAT ?SetChaseAzEl@OTWDriverClass@@QAEXMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_az$ = 8						; size = 4
_el$ = 12						; size = 4
?SetChaseAzEl@OTWDriverClass@@QAEXMM@Z PROC		; OTWDriverClass::SetChaseAzEl, COMDAT
; _this$ = ecx

; 475  : 	  {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 			chaseAz = az;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _az$[ebp]
	movss	DWORD PTR [eax+32284], xmm0

; 477  : 			chaseEl = el;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _el$[ebp]
	movss	DWORD PTR [ecx+32288], xmm0

; 478  : 	  }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetChaseAzEl@OTWDriverClass@@QAEXMM@Z ENDP		; OTWDriverClass::SetChaseAzEl
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\otwdrive.h
;	COMDAT ?Scale@OTWDriverClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Scale@OTWDriverClass@@QAEMXZ PROC			; OTWDriverClass::Scale, COMDAT
; _this$ = ecx

; 342  :       float Scale (void) { return objectScale;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+32124]
	mov	esp, ebp
	pop	ebp
	ret	0
?Scale@OTWDriverClass@@QAEMXZ ENDP			; OTWDriverClass::Scale
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?CollisionsOn@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?CollisionsOn@PlayerOptionsClass@@QAEHXZ PROC		; PlayerOptionsClass::CollisionsOn, COMDAT
; _this$ = ecx

; 153  : 	int CollisionsOn (void)									{ return !(SimFlags & SIM_NO_COLLISIONS) && TRUE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	and	ecx, 32					; 00000020H
	jne	SHORT $LN3@Collisions
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@Collisions
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@Collisions
$LN3@Collisions:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Collisions:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?CollisionsOn@PlayerOptionsClass@@QAEHXZ ENDP		; PlayerOptionsClass::CollisionsOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?IsSet@AirframeClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_testFlag$ = 8						; size = 4
?IsSet@AirframeClass@@QBEHH@Z PROC			; AirframeClass::IsSet, COMDAT
; _this$ = ecx

; 1216 : 	int IsSet (int testFlag) const {return flags & testFlag ? 1 : 0;}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	and	ecx, DWORD PTR _testFlag$[ebp]
	je	SHORT $LN3@IsSet
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSet
$LN3@IsSet:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSet:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSet@AirframeClass@@QBEHH@Z ENDP			; AirframeClass::IsSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?ClearFlag@AirframeClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newFlag$ = 8						; size = 4
?ClearFlag@AirframeClass@@QAEXH@Z PROC			; AirframeClass::ClearFlag, COMDAT
; _this$ = ecx

; 1215 : 	void ClearFlag (int newFlag) {flags &= ~newFlag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _newFlag$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+88]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+88], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearFlag@AirframeClass@@QAEXH@Z ENDP			; AirframeClass::ClearFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?SetFlag@AirframeClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newFlag$ = 8						; size = 4
?SetFlag@AirframeClass@@QAEXH@Z PROC			; AirframeClass::SetFlag, COMDAT
; _this$ = ecx

; 1214 : 	void SetFlag (int newFlag) {flags |= newFlag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	or	ecx, DWORD PTR _newFlag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+88], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFlag@AirframeClass@@QAEXH@Z ENDP			; AirframeClass::SetFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetAeroData@AirframeClass@@QBEMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_which$ = 8						; size = 4
?GetAeroData@AirframeClass@@QBEMH@Z PROC		; AirframeClass::GetAeroData, COMDAT
; _this$ = ecx

; 1207 : 	float GetAeroData(int which) const { return aeroDataset[vehicleIndex].inputData[which]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+92]
	imul	ecx, 220				; 000000dcH
	add	ecx, DWORD PTR ?aeroDataset@@3PAVAeroDataSet@@A ; aeroDataset
	mov	edx, DWORD PTR _which$[ebp]
	fld	DWORD PTR [ecx+edx*4+16]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAeroData@AirframeClass@@QBEMH@Z ENDP		; AirframeClass::GetAeroData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GeneratorBreak@AirframeClass@@QAEXW4Generator@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_gen$ = 8						; size = 4
?GeneratorBreak@AirframeClass@@QAEXW4Generator@1@@Z PROC ; AirframeClass::GeneratorBreak, COMDAT
; _this$ = ecx

; 1134 : 	void GeneratorBreak(Generator gen) { generators |= (gen<<1); GeneratorOff(gen);  };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _gen$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	or	eax, DWORD PTR [ecx+1804]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1804], eax
	mov	eax, DWORD PTR _gen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GeneratorOff@AirframeClass@@QAEXW4Generator@1@@Z ; AirframeClass::GeneratorOff
	mov	esp, ebp
	pop	ebp
	ret	4
?GeneratorBreak@AirframeClass@@QAEXW4Generator@1@@Z ENDP ; AirframeClass::GeneratorBreak
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GeneratorOff@AirframeClass@@QAEXW4Generator@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_gen$ = 8						; size = 4
?GeneratorOff@AirframeClass@@QAEXW4Generator@1@@Z PROC	; AirframeClass::GeneratorOff, COMDAT
; _this$ = ecx

; 1133 : 	void GeneratorOff (Generator gen) { generators &= ~gen; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _gen$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+1804]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1804], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GeneratorOff@AirframeClass@@QAEXW4Generator@1@@Z ENDP	; AirframeClass::GeneratorOff
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?Thrust@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Thrust@AirframeClass@@QAEMXZ PROC			; AirframeClass::Thrust, COMDAT
; _this$ = ecx

; 840  : 	float Thrust() { return thrust; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+188]
	mov	esp, ebp
	pop	ebp
	ret	0
?Thrust@AirframeClass@@QAEMXZ ENDP			; AirframeClass::Thrust
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?SetWaitTimer@DigitalBrain@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_timer$ = 8						; size = 4
?SetWaitTimer@DigitalBrain@@QAEXK@Z PROC		; DigitalBrain::SetWaitTimer, COMDAT
; _this$ = ecx

; 766  : 	void			SetWaitTimer(VU_TIME timer)		{waittimer = timer;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _timer$[ebp]
	mov	DWORD PTR [eax+344], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWaitTimer@DigitalBrain@@QAEXK@Z ENDP		; DigitalBrain::SetWaitTimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?SetATCStatus@DigitalBrain@@QAEXW4AtcStatusEnum@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_status$ = 8						; size = 4
?SetATCStatus@DigitalBrain@@QAEXW4AtcStatusEnum@@@Z PROC ; DigitalBrain::SetATCStatus, COMDAT
; _this$ = ecx

; 764  : 	void			SetATCStatus(AtcStatusEnum status)		{atcstatus = status;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax+328], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetATCStatus@DigitalBrain@@QAEXW4AtcStatusEnum@@@Z ENDP ; DigitalBrain::SetATCStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?SetATCFlag@DigitalBrain@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetATCFlag@DigitalBrain@@QAEXH@Z PROC			; DigitalBrain::SetATCFlag, COMDAT
; _this$ = ecx

; 707  : 	void	SetATCFlag(int flag)							{atcFlags |= flag;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+300]
	or	ecx, DWORD PTR _flag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+300], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetATCFlag@DigitalBrain@@QAEXH@Z ENDP			; DigitalBrain::SetATCFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ PROC ; SimulationDriver::GetPlayerEntity, COMDAT
; _this$ = ecx

; 76   : 	SimMoverClass *GetPlayerEntity() const { return const_cast<SimMoverClass*>(playerEntity); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ENDP ; SimulationDriver::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ PROC ; FalconSessionEntity::GetPlayerEntity, COMDAT
; _this$ = ecx

; 138  : 	FalconEntity* GetPlayerEntity(void) const     { return playerEntityPtr.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ENDP ; FalconSessionEntity::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\damage.cpp
_TEXT	SEGMENT
$T2 = -76						; size = 4
$T3 = -72						; size = 4
tv132 = -68						; size = 4
$T4 = -64						; size = 4
tv272 = -60						; size = 4
$T5 = -56						; size = 4
_this$ = -52						; size = 4
_ptr$ = -48						; size = 4
_tmpSimBase$ = -44					; size = 4
_piececenter$ = -40					; size = 12
_slot$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_piece$ = 8						; size = 4
?SetupDamageF16Effects@AircraftClass@@IAEXPAUDamageF16PieceStructure@@@Z PROC ; AircraftClass::SetupDamageF16Effects
; _this$ = ecx

; 1037 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetupDamageF16Effects@AircraftClass@@IAEXPAUDamageF16PieceStructure@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1038 : 	Tpoint slot;
; 1039 : 	Tpoint piececenter;
; 1040 : 	piececenter.x = XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _piececenter$[ebp]

; 1041 : 	piececenter.y = YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _piececenter$[ebp+4]

; 1042 : 	piececenter.z = ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _piececenter$[ebp+8]

; 1043 : 
; 1044 : 	SimBaseClass *tmpSimBase = new SimStaticClass(Type());//new SimBaseClass(Type());

	push	592					; 00000250H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN14@SetupDamag
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	eax, ax
	push	eax
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0SimStaticClass@@QAE@H@Z		; SimStaticClass::SimStaticClass
	mov	DWORD PTR tv132[ebp], eax
	jmp	SHORT $LN15@SetupDamag
$LN14@SetupDamag:
	mov	DWORD PTR tv132[ebp], 0
$LN15@SetupDamag:
	mov	ecx, DWORD PTR tv132[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _tmpSimBase$[ebp], edx

; 1045 : 	tmpSimBase -> SetYPR (Yaw(), 0.0f, 0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _tmpSimBase$[ebp]
	call	?SetYPR@VuEntity@@QAEXMMM@Z		; VuEntity::SetYPR

; 1046 : 	CalcTransformMatrix (tmpSimBase);

	mov	eax, DWORD PTR _tmpSimBase$[ebp]
	push	eax
	call	?CalcTransformMatrix@@YAXPAVSimBaseClass@@@Z ; CalcTransformMatrix
	add	esp, 4

; 1047 : 	OTWDriver.CreateVisualObject(tmpSimBase, piece->damage, &piececenter, (Trotation *) &tmpSimBase->dmx, OTWDriver.Scale());

	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?Scale@OTWDriverClass@@QAEMXZ		; OTWDriverClass::Scale
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _tmpSimBase$[ebp]
	add	ecx, 296				; 00000128H
	push	ecx
	lea	edx, DWORD PTR _piececenter$[ebp]
	push	edx
	mov	eax, DWORD PTR _piece$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _tmpSimBase$[ebp]
	push	edx
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?CreateVisualObject@OTWDriverClass@@QAEXPAVSimBaseClass@@HPAUTpoint@@PAUTrotation@@M@Z ; OTWDriverClass::CreateVisualObject

; 1048 : 
; 1049 : 	DrawableBSP *ptr = (DrawableBSP *) tmpSimBase -> drawPointer;

	mov	eax, DWORD PTR _tmpSimBase$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	mov	DWORD PTR _ptr$[ebp], ecx

; 1050 : 	ptr -> SetSwitchMask(DAMAGEF16_SWITCH, piece->mask);

	mov	edx, DWORD PTR _piece$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	0
	mov	ecx, DWORD PTR _ptr$[ebp]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask

; 1051 : 	if (piece -> mask & DAMAGEF16_BACK) {

	mov	ecx, DWORD PTR _piece$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 16					; 00000010H
	je	SHORT $LN11@SetupDamag

; 1052 : 		if (piece -> mask & DAMAGEF16_FRONT) {

	mov	eax, DWORD PTR _piece$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 32					; 00000020H
	je	SHORT $LN10@SetupDamag

; 1053 : 			if (!(piece -> mask & DAMAGEF16_NOSE)) {

	mov	edx, DWORD PTR _piece$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 64					; 00000040H
	jne	SHORT $LN9@SetupDamag

; 1054 : 				ptr -> SetSwitchMask(DAMAGEF16_NOSEBREAK_SWITCH, 1);

	push	1
	push	1
	mov	ecx, DWORD PTR _ptr$[ebp]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask
$LN9@SetupDamag:

; 1055 : 			}
; 1056 : //			ptr -> SetSwitchMask(DAMAGEF16_CANOPYBREAK_SWITCH, 1);
; 1057 : 		}
; 1058 : 		else {

	jmp	SHORT $LN8@SetupDamag
$LN10@SetupDamag:

; 1059 : 			ptr -> SetSwitchMask(DAMAGEF16_FRONTBREAK_SWITCH, 1);

	push	1
	push	2
	mov	ecx, DWORD PTR _ptr$[ebp]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask
$LN8@SetupDamag:

; 1060 : 		}
; 1061 : 		if (!(piece -> mask & DAMAGEF16_RWING)) {

	mov	ecx, DWORD PTR _piece$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 1
	jne	SHORT $LN7@SetupDamag

; 1062 : 			ptr -> SetSwitchMask(DAMAGEF16_RWINGBREAK_SWITCH, 1);

	push	1
	push	4
	mov	ecx, DWORD PTR _ptr$[ebp]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask
$LN7@SetupDamag:

; 1063 : 		}
; 1064 : 		if (!(piece -> mask & DAMAGEF16_LWING)) {

	mov	eax, DWORD PTR _piece$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2
	jne	SHORT $LN6@SetupDamag

; 1065 : 			ptr -> SetSwitchMask(DAMAGEF16_LWINGBREAK_SWITCH, 1);

	push	1
	push	3
	mov	ecx, DWORD PTR _ptr$[ebp]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask
$LN6@SetupDamag:

; 1066 : 		}
; 1067 : 	}

	jmp	SHORT $LN1@SetupDamag
$LN11@SetupDamag:

; 1068 : 	else if (piece -> mask & DAMAGEF16_FRONT) {

	mov	edx, DWORD PTR _piece$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 32					; 00000020H
	je	SHORT $LN4@SetupDamag

; 1069 : 		if (!(piece -> mask & DAMAGEF16_NOSE)) {

	mov	ecx, DWORD PTR _piece$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 64					; 00000040H
	jne	SHORT $LN3@SetupDamag

; 1070 : 			ptr -> SetSwitchMask(DAMAGEF16_NOSEBREAK_SWITCH, 1);

	push	1
	push	1
	mov	ecx, DWORD PTR _ptr$[ebp]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask
$LN3@SetupDamag:

; 1071 : 		}
; 1072 : 		ptr -> SetSwitchMask(DAMAGEF16_FRONTBREAK_SWITCH, 1);

	push	1
	push	2
	mov	ecx, DWORD PTR _ptr$[ebp]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask
	jmp	SHORT $LN1@SetupDamag
$LN4@SetupDamag:

; 1073 : //		ptr -> SetSwitchMask(DAMAGEF16_CANOPYBREAK_SWITCH, 1);
; 1074 : 	}
; 1075 : 	else if (piece -> mask & DAMAGEF16_NOSE) {

	mov	eax, DWORD PTR _piece$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 64					; 00000040H
	je	SHORT $LN1@SetupDamag

; 1076 : 		ptr -> SetSwitchMask(DAMAGEF16_NOSEBREAK_SWITCH, 1);

	push	1
	push	1
	mov	ecx, DWORD PTR _ptr$[ebp]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask
$LN1@SetupDamag:

; 1077 : 	}
; 1078 : 
; 1079 : 	ptr -> GetChildOffset(piece->index, &slot);

	lea	edx, DWORD PTR _slot$[ebp]
	push	edx
	mov	eax, DWORD PTR _piece$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _ptr$[ebp]
	call	?GetChildOffset@DrawableBSP@@QAEXHPAUTpoint@@@Z ; DrawableBSP::GetChildOffset

; 1080 : 	slot.x = -slot.x;

	movss	xmm0, DWORD PTR _slot$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _slot$[ebp], xmm0

; 1081 : 	slot.y = -slot.y;

	movss	xmm0, DWORD PTR _slot$[ebp+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _slot$[ebp+4], xmm0

; 1082 : 	slot.z = -slot.z;

	movss	xmm0, DWORD PTR _slot$[ebp+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _slot$[ebp+8], xmm0

; 1083 : 
; 1084 : 	tmpSimBase -> SetPosition (piececenter.x, piececenter.y, piececenter.z);

	push	ecx
	movss	xmm0, DWORD PTR _piececenter$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _piececenter$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _piececenter$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _tmpSimBase$[ebp]
	call	?SetPosition@VuEntity@@QAEXMMM@Z	; VuEntity::SetPosition

; 1085 : 	tmpSimBase->SetDelta (piece->dx, piece->dy, piece->dz);

	mov	edx, DWORD PTR _piece$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+32]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _piece$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _piece$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _tmpSimBase$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta

; 1086 : 	tmpSimBase->SetYPRDelta (piece->yd, piece->pd, piece->rd);

	mov	edx, DWORD PTR _piece$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+44]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _piece$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+40]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _piece$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+36]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _tmpSimBase$[ebp]
	call	?SetYPRDelta@VuEntity@@QAEXMMM@Z	; VuEntity::SetYPRDelta

; 1087 : 	OTWDriver.AddSfxRequest( 
; 1088 : 		new SfxClass(
; 1089 : 										piece->sfxtype, piece->sfxflag, tmpSimBase, 
; 1090 : 										piece->lifetime, OTWDriver.Scale(),
; 1091 : 										&slot, piece -> pitch, piece -> roll
; 1092 : 										  )
; 1093 : 							);

	push	192					; 000000c0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN16@SetupDamag
	mov	edx, DWORD PTR _piece$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+52]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _piece$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+48]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _slot$[ebp]
	push	ecx
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?Scale@OTWDriverClass@@QAEMXZ		; OTWDriverClass::Scale
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _piece$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+20]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _tmpSimBase$[ebp]
	push	eax
	mov	ecx, DWORD PTR _piece$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _piece$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0SfxClass@@QAE@HHPAVSimBaseClass@@MMPAUTpoint@@MM@Z ; SfxClass::SfxClass
	mov	DWORD PTR tv272[ebp], eax
	jmp	SHORT $LN17@SetupDamag
$LN16@SetupDamag:
	mov	DWORD PTR tv272[ebp], 0
$LN17@SetupDamag:
	mov	edx, DWORD PTR tv272[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?AddSfxRequest@OTWDriverClass@@QAEXPAVSfxClass@@@Z ; OTWDriverClass::AddSfxRequest

; 1094 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetupDamageF16Effects@AircraftClass@@IAEXPAUDamageF16PieceStructure@@@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?SetupDamageF16Effects@AircraftClass@@IAEXPAUDamageF16PieceStructure@@@Z$1:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SetupDamageF16Effects@AircraftClass@@IAEXPAUDamageF16PieceStructure@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetupDamageF16Effects@AircraftClass@@IAEXPAUDamageF16PieceStructure@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetupDamageF16Effects@AircraftClass@@IAEXPAUDamageF16PieceStructure@@@Z ENDP ; AircraftClass::SetupDamageF16Effects
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\damage.cpp
_TEXT	SEGMENT
tv149 = -416						; size = 4
_groundZ$ = -412					; size = 4
_numpiece$ = -408					; size = 4
_i$ = -404						; size = 4
_this$ = -400						; size = 4
_piece$ = -396						; size = 392
__$ArrayPad$ = -4					; size = 4
?CreateDamageF16Effects@AircraftClass@@IAEHXZ PROC	; AircraftClass::CreateDamageF16Effects
; _this$ = ecx

; 1097 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1098 : 	if (!IsF16()) return 0;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsF16@AircraftClass@@QAEHXZ		; AircraftClass::IsF16
	test	eax, eax
	jne	SHORT $LN6@CreateDama
	xor	eax, eax
	jmp	$LN7@CreateDama
$LN6@CreateDama:

; 1099 : 
; 1100 : 	float groundZ = OTWDriver.GetApproxGroundLevel (XPos(), YPos());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetApproxGroundLevel@OTWDriverClass@@QAEMMM@Z ; OTWDriverClass::GetApproxGroundLevel
	fstp	DWORD PTR _groundZ$[ebp]

; 1101 : 	if (  ZPos() - groundZ  < -500.0f ) return 0;	// not ground explosion

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv149[ebp]
	movss	xmm0, DWORD PTR tv149[ebp]
	subss	xmm0, DWORD PTR _groundZ$[ebp]
	movss	xmm1, DWORD PTR __real@c3fa0000
	comiss	xmm1, xmm0
	jbe	SHORT $LN5@CreateDama
	xor	eax, eax
	jmp	$LN7@CreateDama
$LN5@CreateDama:

; 1102 : 
; 1103 : 	DamageF16PieceStructure piece[7];
; 1104 : 	int	i = DAMAGEF16_ALL;

	mov	DWORD PTR _i$[ebp], 127			; 0000007fH

; 1105 : 	int numpiece = CreateDamageF16Piece (piece, &i);

	lea	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _piece$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateDamageF16Piece@AircraftClass@@IAEHPAUDamageF16PieceStructure@@PAH@Z ; AircraftClass::CreateDamageF16Piece
	mov	DWORD PTR _numpiece$[ebp], eax

; 1106 : 	if (!numpiece) return 0;

	cmp	DWORD PTR _numpiece$[ebp], 0
	jne	SHORT $LN4@CreateDama
	xor	eax, eax
	jmp	SHORT $LN7@CreateDama
$LN4@CreateDama:

; 1107 : 
; 1108 : 	for (i=0; i < numpiece; i++) 

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@CreateDama
$LN2@CreateDama:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@CreateDama:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numpiece$[ebp]
	jge	SHORT $LN1@CreateDama

; 1109 : 		SetupDamageF16Effects (&(piece[i]));

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 56					; 00000038H
	lea	edx, DWORD PTR _piece$[ebp+ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetupDamageF16Effects@AircraftClass@@IAEXPAUDamageF16PieceStructure@@@Z ; AircraftClass::SetupDamageF16Effects
	jmp	SHORT $LN2@CreateDama
$LN1@CreateDama:

; 1110 : 
; 1111 : 	return 1;

	mov	eax, 1
$LN7@CreateDama:

; 1112 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateDamageF16Effects@AircraftClass@@IAEHXZ ENDP	; AircraftClass::CreateDamageF16Effects
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\damage.cpp
_TEXT	SEGMENT
_j$1 = -116						; size = 4
tv1129 = -112						; size = 4
tv1122 = -108						; size = 4
tv1116 = -104						; size = 4
tv1110 = -100						; size = 4
tv1165 = -96						; size = 4
tv763 = -92						; size = 4
tv1167 = -88						; size = 4
tv759 = -84						; size = 4
tv1161 = -80						; size = 4
tv755 = -76						; size = 4
tv1163 = -72						; size = 4
tv751 = -68						; size = 4
tv747 = -64						; size = 4
tv1159 = -60						; size = 4
tv743 = -56						; size = 4
_range1$ = -52						; size = 4
_k$2 = -48						; size = 4
_range2$ = -44						; size = 4
_range$ = -40						; size = 4
_l$3 = -36						; size = 4
_r$ = -32						; size = 4
_p$ = -28						; size = 4
_i$4 = -24						; size = 4
_damagetype$ = -20					; size = 4
_speed$ = -16						; size = 4
_this$ = -12						; size = 4
_dirflag$ = -8						; size = 4
_numpiece$ = -4						; size = 4
_piece$ = 8						; size = 4
_mask$ = 12						; size = 4
?CreateDamageF16Piece@AircraftClass@@IAEHPAUDamageF16PieceStructure@@PAH@Z PROC ; AircraftClass::CreateDamageF16Piece
; _this$ = ecx

; 861  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	mov	DWORD PTR _this$[ebp], ecx

; 862  : 	float p = (float)asin(dmx[0][2]);

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 1
	push	ecx
	movss	xmm0, DWORD PTR [edx+eax]
	movss	DWORD PTR [esp], xmm0
	call	?asin@@YAMM@Z				; asin
	add	esp, 4
	fstp	DWORD PTR _p$[ebp]

; 863  : 	if (p > 70.0f*DTR) return 0;	

	movss	xmm0, DWORD PTR _p$[ebp]
	comiss	xmm0, DWORD PTR __real@3f9c61a9
	jbe	SHORT $LN52@CreateDama
	xor	eax, eax
	jmp	$LN53@CreateDama
$LN52@CreateDama:

; 864  : 
; 865  : 	float r = (float)atan2(dmx[1][2], dmx[2][2]);

	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 1
	cvtss2sd xmm0, DWORD PTR [eax+ecx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 1
	cvtss2sd xmm0, DWORD PTR [ecx+edx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _r$[ebp]

; 866  : 	float range = 5.0f * DTR;

	movss	xmm0, DWORD PTR __real@3db2b8c1
	movss	DWORD PTR _range$[ebp], xmm0

; 867  : 	float range1 = 15.0f * DTR;

	movss	xmm0, DWORD PTR __real@3e860a91
	movss	DWORD PTR _range1$[ebp], xmm0

; 868  : 	float range2 = 50.0f * DTR;

	movss	xmm0, DWORD PTR __real@3f5f66f1
	movss	DWORD PTR _range2$[ebp], xmm0

; 869  : 	int	damagetype = 0;

	mov	DWORD PTR _damagetype$[ebp], 0

; 870  : 
; 871  : 	if (r > range) {

	movss	xmm0, DWORD PTR _r$[ebp]
	comiss	xmm0, DWORD PTR _range$[ebp]
	jbe	SHORT $LN51@CreateDama

; 872  : 		damagetype |= 0x2;		// right

	mov	eax, DWORD PTR _damagetype$[ebp]
	or	eax, 2
	mov	DWORD PTR _damagetype$[ebp], eax

; 873  : 		if (r > range2) damagetype |= 0x10;

	movss	xmm0, DWORD PTR _r$[ebp]
	comiss	xmm0, DWORD PTR _range2$[ebp]
	jbe	SHORT $LN50@CreateDama
	mov	ecx, DWORD PTR _damagetype$[ebp]
	or	ecx, 16					; 00000010H
	mov	DWORD PTR _damagetype$[ebp], ecx
$LN50@CreateDama:

; 874  : 	}

	jmp	SHORT $LN47@CreateDama
$LN51@CreateDama:

; 875  : 	else if (r < -range) {

	movss	xmm0, DWORD PTR _range$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, DWORD PTR _r$[ebp]
	jbe	SHORT $LN47@CreateDama

; 876  : 		damagetype |= 0x1;		// left

	mov	edx, DWORD PTR _damagetype$[ebp]
	or	edx, 1
	mov	DWORD PTR _damagetype$[ebp], edx

; 877  : 		if (r < -range2) damagetype |= 0x10;

	movss	xmm0, DWORD PTR _range2$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, DWORD PTR _r$[ebp]
	jbe	SHORT $LN47@CreateDama
	mov	eax, DWORD PTR _damagetype$[ebp]
	or	eax, 16					; 00000010H
	mov	DWORD PTR _damagetype$[ebp], eax
$LN47@CreateDama:

; 878  : 	}
; 879  : 
; 880  : 	if (p > range) {

	movss	xmm0, DWORD PTR _p$[ebp]
	comiss	xmm0, DWORD PTR _range$[ebp]
	jbe	SHORT $LN42@CreateDama

; 881  : 		if (p > range2) damagetype |= 0x1c;

	movss	xmm0, DWORD PTR _p$[ebp]
	comiss	xmm0, DWORD PTR _range2$[ebp]
	jbe	SHORT $LN45@CreateDama
	mov	ecx, DWORD PTR _damagetype$[ebp]
	or	ecx, 28					; 0000001cH
	mov	DWORD PTR _damagetype$[ebp], ecx
	jmp	SHORT $LN42@CreateDama
$LN45@CreateDama:

; 882  : 		else if (p > range1) damagetype |= 0x8;

	movss	xmm0, DWORD PTR _p$[ebp]
	comiss	xmm0, DWORD PTR _range1$[ebp]
	jbe	SHORT $LN43@CreateDama
	mov	edx, DWORD PTR _damagetype$[ebp]
	or	edx, 8
	mov	DWORD PTR _damagetype$[ebp], edx
	jmp	SHORT $LN42@CreateDama
$LN43@CreateDama:

; 883  : 		else damagetype |= 0x4;

	mov	eax, DWORD PTR _damagetype$[ebp]
	or	eax, 4
	mov	DWORD PTR _damagetype$[ebp], eax
$LN42@CreateDama:

; 884  : 	}
; 885  : 	float speed = (float)sqrt(XDelta()*XDelta()+YDelta()*YDelta()+ZDelta()*ZDelta());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv743[ebp]
	movss	xmm0, DWORD PTR tv743[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1159[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv747[ebp]
	movss	xmm0, DWORD PTR tv1159[ebp]
	mulss	xmm0, DWORD PTR tv747[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1161[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv751[ebp]
	movss	xmm0, DWORD PTR tv751[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1163[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv755[ebp]
	movss	xmm0, DWORD PTR tv1163[ebp]
	mulss	xmm0, DWORD PTR tv755[ebp]
	movss	xmm1, DWORD PTR tv1161[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1165[ebp], xmm1
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv759[ebp]
	movss	xmm0, DWORD PTR tv759[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1167[ebp], xmm0
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv763[ebp]
	movss	xmm0, DWORD PTR tv1167[ebp]
	mulss	xmm0, DWORD PTR tv763[ebp]
	movss	xmm1, DWORD PTR tv1165[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _speed$[ebp]

; 886  : 	if (damagetype) {

	cmp	DWORD PTR _damagetype$[ebp], 0
	je	SHORT $LN37@CreateDama

; 887  : 		if (speed > 200.0f && speed < 500.0f) {

	movss	xmm0, DWORD PTR _speed$[ebp]
	comiss	xmm0, DWORD PTR __real@43480000
	jbe	SHORT $LN40@CreateDama
	movss	xmm0, DWORD PTR __real@43fa0000
	comiss	xmm0, DWORD PTR _speed$[ebp]
	jbe	SHORT $LN40@CreateDama

; 888  : 			if (damagetype & 0x4) damagetype |= 8;

	mov	ecx, DWORD PTR _damagetype$[ebp]
	and	ecx, 4
	je	SHORT $LN39@CreateDama
	mov	edx, DWORD PTR _damagetype$[ebp]
	or	edx, 8
	mov	DWORD PTR _damagetype$[ebp], edx
$LN39@CreateDama:

; 889  : 		}

	jmp	SHORT $LN37@CreateDama
$LN40@CreateDama:

; 890  : 		else if (speed > 500.0f) damagetype |= 0x10;

	movss	xmm0, DWORD PTR _speed$[ebp]
	comiss	xmm0, DWORD PTR __real@43fa0000
	jbe	SHORT $LN37@CreateDama
	mov	eax, DWORD PTR _damagetype$[ebp]
	or	eax, 16					; 00000010H
	mov	DWORD PTR _damagetype$[ebp], eax
$LN37@CreateDama:

; 891  : 	}
; 892  : 
; 893  : 	int dirflag = DAMAGEF16_TOFRONT;

	mov	DWORD PTR _dirflag$[ebp], 4

; 894  : 	int	numpiece = 0;

	mov	DWORD PTR _numpiece$[ebp], 0

; 895  : 	if (damagetype & 0x10) 

	mov	ecx, DWORD PTR _damagetype$[ebp]
	and	ecx, 16					; 00000010H
	je	$LN36@CreateDama

; 896  : 	{			// full damage
; 897  : 		if (damagetype & 0xc) {			// damage to the front

	mov	edx, DWORD PTR _damagetype$[ebp]
	and	edx, 12					; 0000000cH
	je	$LN35@CreateDama

; 898  : 			dirflag = DAMAGEF16_TOFRONT;

	mov	DWORD PTR _dirflag$[ebp], 4

; 899  : 			numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_LWING, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _dirflag$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _numpiece$[ebp]
	imul	eax, 56					; 00000038H
	add	eax, DWORD PTR _piece$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 900  : 			numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_LSTAB, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _mask$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dirflag$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _numpiece$[ebp]
	imul	ecx, 56					; 00000038H
	add	ecx, DWORD PTR _piece$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 901  : 			numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_RWING, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _mask$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _dirflag$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _numpiece$[ebp]
	imul	edx, 56					; 00000038H
	add	edx, DWORD PTR _piece$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 902  : 			numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_RSTAB, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _dirflag$[ebp]
	push	edx
	push	8
	mov	eax, DWORD PTR _numpiece$[ebp]
	imul	eax, 56					; 00000038H
	add	eax, DWORD PTR _piece$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 903  : 			numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_NOSE,  dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _mask$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dirflag$[ebp]
	push	eax
	push	64					; 00000040H
	mov	ecx, DWORD PTR _numpiece$[ebp]
	imul	ecx, 56					; 00000038H
	add	ecx, DWORD PTR _piece$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 904  : 			numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_FRONT, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _mask$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _dirflag$[ebp]
	push	ecx
	push	32					; 00000020H
	mov	edx, DWORD PTR _numpiece$[ebp]
	imul	edx, 56					; 00000038H
	add	edx, DWORD PTR _piece$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 905  : 			numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_BACK,  dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _dirflag$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _numpiece$[ebp]
	imul	eax, 56					; 00000038H
	add	eax, DWORD PTR _piece$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 906  : 			*mask &= DAMAGEF16_BACK;

	mov	ecx, DWORD PTR _mask$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 16					; 00000010H
	mov	eax, DWORD PTR _mask$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	$LN33@CreateDama
$LN35@CreateDama:

; 907  : 		}
; 908  : 		else if (damagetype & 0x3)

	mov	ecx, DWORD PTR _damagetype$[ebp]
	and	ecx, 3
	je	$LN33@CreateDama

; 909  : 		{	// damage to the left or right
; 910  : 			if (damagetype & 0x1)

	mov	edx, DWORD PTR _damagetype$[ebp]
	and	edx, 1
	je	SHORT $LN32@CreateDama

; 911  : 				dirflag = DAMAGEF16_TOLEFT;

	mov	DWORD PTR _dirflag$[ebp], 1

; 912  : 			else

	jmp	SHORT $LN31@CreateDama
$LN32@CreateDama:

; 913  : 				dirflag = DAMAGEF16_TORIGHT;

	mov	DWORD PTR _dirflag$[ebp], 2
$LN31@CreateDama:

; 914  : 
; 915  : 			numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_LWING, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _dirflag$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _numpiece$[ebp]
	imul	eax, 56					; 00000038H
	add	eax, DWORD PTR _piece$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 916  : 			numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_LSTAB, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _mask$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dirflag$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _numpiece$[ebp]
	imul	ecx, 56					; 00000038H
	add	ecx, DWORD PTR _piece$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 917  : 			numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_RWING, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _mask$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _dirflag$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _numpiece$[ebp]
	imul	edx, 56					; 00000038H
	add	edx, DWORD PTR _piece$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 918  : 			numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_RSTAB, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _dirflag$[ebp]
	push	edx
	push	8
	mov	eax, DWORD PTR _numpiece$[ebp]
	imul	eax, 56					; 00000038H
	add	eax, DWORD PTR _piece$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 919  : 			numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_ONLYBODY, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _mask$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dirflag$[ebp]
	push	eax
	push	112					; 00000070H
	mov	ecx, DWORD PTR _numpiece$[ebp]
	imul	ecx, 56					; 00000038H
	add	ecx, DWORD PTR _piece$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 920  : 			*mask &= DAMAGEF16_ONLYBODY;

	mov	edx, DWORD PTR _mask$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 112				; 00000070H
	mov	ecx, DWORD PTR _mask$[ebp]
	mov	DWORD PTR [ecx], eax
$LN33@CreateDama:

; 921  : 		}
; 922  : 	}
; 923  : 	else

	jmp	$LN15@CreateDama
$LN36@CreateDama:

; 924  : 	{
; 925  : 		if (damagetype & 0x1)

	mov	edx, DWORD PTR _damagetype$[ebp]
	and	edx, 1
	je	$LN29@CreateDama

; 926  : 		{				// damage to the left
; 927  : 			dirflag = DAMAGEF16_TOLEFT;

	mov	DWORD PTR _dirflag$[ebp], 1

; 928  : 			if (damagetype & 0x4) {			// damage to the nose

	mov	eax, DWORD PTR _damagetype$[ebp]
	and	eax, 4
	je	$LN28@CreateDama

; 929  : 				dirflag |= DAMAGEF16_TOFRONT;

	mov	ecx, DWORD PTR _dirflag$[ebp]
	or	ecx, 4
	mov	DWORD PTR _dirflag$[ebp], ecx

; 930  : 				numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_LWING, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _mask$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _dirflag$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _numpiece$[ebp]
	imul	edx, 56					; 00000038H
	add	edx, DWORD PTR _piece$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 931  : 				numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_LSTAB, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _dirflag$[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _numpiece$[ebp]
	imul	eax, 56					; 00000038H
	add	eax, DWORD PTR _piece$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 932  : 				numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_NOSE, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _mask$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dirflag$[ebp]
	push	eax
	push	64					; 00000040H
	mov	ecx, DWORD PTR _numpiece$[ebp]
	imul	ecx, 56					; 00000038H
	add	ecx, DWORD PTR _piece$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 933  : 				numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_NOLEFTANDNOSE, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _mask$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _dirflag$[ebp]
	push	ecx
	push	57					; 00000039H
	mov	edx, DWORD PTR _numpiece$[ebp]
	imul	edx, 56					; 00000038H
	add	edx, DWORD PTR _piece$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 934  : 				*mask &= DAMAGEF16_NOLEFTANDNOSE;

	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 57					; 00000039H
	mov	edx, DWORD PTR _mask$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	$LN25@CreateDama
$LN28@CreateDama:

; 935  : 			}
; 936  : 			else if (damagetype & 0x8) {	// damage to the front

	mov	eax, DWORD PTR _damagetype$[ebp]
	and	eax, 8
	je	$LN26@CreateDama

; 937  : 				dirflag |= DAMAGEF16_TOFRONT;

	mov	ecx, DWORD PTR _dirflag$[ebp]
	or	ecx, 4
	mov	DWORD PTR _dirflag$[ebp], ecx

; 938  : 				numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_LWING, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _mask$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _dirflag$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _numpiece$[ebp]
	imul	edx, 56					; 00000038H
	add	edx, DWORD PTR _piece$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 939  : 				numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_LSTAB, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _dirflag$[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _numpiece$[ebp]
	imul	eax, 56					; 00000038H
	add	eax, DWORD PTR _piece$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 940  : 				numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_NOSE, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _mask$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dirflag$[ebp]
	push	eax
	push	64					; 00000040H
	mov	ecx, DWORD PTR _numpiece$[ebp]
	imul	ecx, 56					; 00000038H
	add	ecx, DWORD PTR _piece$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 941  : 				numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_FRONT, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _mask$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _dirflag$[ebp]
	push	ecx
	push	32					; 00000020H
	mov	edx, DWORD PTR _numpiece$[ebp]
	imul	edx, 56					; 00000038H
	add	edx, DWORD PTR _piece$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 942  : 				numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_BACKWITHRIGHT, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _dirflag$[ebp]
	push	edx
	push	25					; 00000019H
	mov	eax, DWORD PTR _numpiece$[ebp]
	imul	eax, 56					; 00000038H
	add	eax, DWORD PTR _piece$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 943  : 				*mask &= DAMAGEF16_BACKWITHRIGHT;

	mov	ecx, DWORD PTR _mask$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 25					; 00000019H
	mov	eax, DWORD PTR _mask$[ebp]
	mov	DWORD PTR [eax], edx

; 944  : 			}
; 945  : 			else {

	jmp	$LN25@CreateDama
$LN26@CreateDama:

; 946  : 				numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_LWING, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _mask$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dirflag$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _numpiece$[ebp]
	imul	ecx, 56					; 00000038H
	add	ecx, DWORD PTR _piece$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 947  : 				numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_LSTAB, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _mask$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _dirflag$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _numpiece$[ebp]
	imul	edx, 56					; 00000038H
	add	edx, DWORD PTR _piece$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 948  : 				numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_NOLEFT, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _dirflag$[ebp]
	push	edx
	push	121					; 00000079H
	mov	eax, DWORD PTR _numpiece$[ebp]
	imul	eax, 56					; 00000038H
	add	eax, DWORD PTR _piece$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 949  : 				*mask &= DAMAGEF16_NOLEFT;

	mov	ecx, DWORD PTR _mask$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 121				; 00000079H
	mov	eax, DWORD PTR _mask$[ebp]
	mov	DWORD PTR [eax], edx
$LN25@CreateDama:

; 950  : 			}

	jmp	$LN15@CreateDama
$LN29@CreateDama:

; 951  : 		}
; 952  : 		else if (damagetype & 0x2)

	mov	ecx, DWORD PTR _damagetype$[ebp]
	and	ecx, 2
	je	$LN23@CreateDama

; 953  : 		{		// damage to the right
; 954  : 			dirflag = DAMAGEF16_TORIGHT;

	mov	DWORD PTR _dirflag$[ebp], 2

; 955  : 			if (damagetype & 0x4) {			// damage to the nose

	mov	edx, DWORD PTR _damagetype$[ebp]
	and	edx, 4
	je	$LN22@CreateDama

; 956  : 				dirflag |= DAMAGEF16_TOFRONT;

	mov	eax, DWORD PTR _dirflag$[ebp]
	or	eax, 4
	mov	DWORD PTR _dirflag$[ebp], eax

; 957  : 				numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_RWING, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _mask$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dirflag$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _numpiece$[ebp]
	imul	ecx, 56					; 00000038H
	add	ecx, DWORD PTR _piece$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 958  : 				numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_RSTAB, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _mask$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _dirflag$[ebp]
	push	ecx
	push	8
	mov	edx, DWORD PTR _numpiece$[ebp]
	imul	edx, 56					; 00000038H
	add	edx, DWORD PTR _piece$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 959  : 				numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_NOSE, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _dirflag$[ebp]
	push	edx
	push	64					; 00000040H
	mov	eax, DWORD PTR _numpiece$[ebp]
	imul	eax, 56					; 00000038H
	add	eax, DWORD PTR _piece$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 960  : 				numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_NORIGHTANDNOSE, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _mask$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dirflag$[ebp]
	push	eax
	push	54					; 00000036H
	mov	ecx, DWORD PTR _numpiece$[ebp]
	imul	ecx, 56					; 00000038H
	add	ecx, DWORD PTR _piece$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 961  : 				*mask &= DAMAGEF16_NORIGHTANDNOSE;

	mov	edx, DWORD PTR _mask$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 54					; 00000036H
	mov	ecx, DWORD PTR _mask$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	$LN19@CreateDama
$LN22@CreateDama:

; 962  : 			}
; 963  : 			else if (damagetype & 0x8) {	// damage to the front

	mov	edx, DWORD PTR _damagetype$[ebp]
	and	edx, 8
	je	$LN20@CreateDama

; 964  : 				dirflag |= DAMAGEF16_TOFRONT;

	mov	eax, DWORD PTR _dirflag$[ebp]
	or	eax, 4
	mov	DWORD PTR _dirflag$[ebp], eax

; 965  : 				numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_RWING, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _mask$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dirflag$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _numpiece$[ebp]
	imul	ecx, 56					; 00000038H
	add	ecx, DWORD PTR _piece$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 966  : 				numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_RSTAB, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _mask$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _dirflag$[ebp]
	push	ecx
	push	8
	mov	edx, DWORD PTR _numpiece$[ebp]
	imul	edx, 56					; 00000038H
	add	edx, DWORD PTR _piece$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 967  : 				numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_NOSE, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _dirflag$[ebp]
	push	edx
	push	64					; 00000040H
	mov	eax, DWORD PTR _numpiece$[ebp]
	imul	eax, 56					; 00000038H
	add	eax, DWORD PTR _piece$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 968  : 				numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_FRONT, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _mask$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dirflag$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _numpiece$[ebp]
	imul	ecx, 56					; 00000038H
	add	ecx, DWORD PTR _piece$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 969  : 				numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_BACKWITHLEFT, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _mask$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _dirflag$[ebp]
	push	ecx
	push	22					; 00000016H
	mov	edx, DWORD PTR _numpiece$[ebp]
	imul	edx, 56					; 00000038H
	add	edx, DWORD PTR _piece$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 970  : 				*mask &= DAMAGEF16_BACKWITHLEFT;

	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 22					; 00000016H
	mov	edx, DWORD PTR _mask$[ebp]
	mov	DWORD PTR [edx], ecx

; 971  : 			}
; 972  : 			else {

	jmp	$LN19@CreateDama
$LN20@CreateDama:

; 973  : 				numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_RWING, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _dirflag$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _numpiece$[ebp]
	imul	eax, 56					; 00000038H
	add	eax, DWORD PTR _piece$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 974  : 				numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_RSTAB, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _mask$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dirflag$[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR _numpiece$[ebp]
	imul	ecx, 56					; 00000038H
	add	ecx, DWORD PTR _piece$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 975  : 				numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_NORIGHT, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _mask$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _dirflag$[ebp]
	push	ecx
	push	118					; 00000076H
	mov	edx, DWORD PTR _numpiece$[ebp]
	imul	edx, 56					; 00000038H
	add	edx, DWORD PTR _piece$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 976  : 				*mask &= DAMAGEF16_NORIGHT;

	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 118				; 00000076H
	mov	edx, DWORD PTR _mask$[ebp]
	mov	DWORD PTR [edx], ecx
$LN19@CreateDama:

; 977  : 			}

	jmp	$LN15@CreateDama
$LN23@CreateDama:

; 978  : 		}
; 979  : 		else if (damagetype & 0x4)

	mov	eax, DWORD PTR _damagetype$[ebp]
	and	eax, 4
	je	SHORT $LN17@CreateDama

; 980  : 		{		// damage to the nose
; 981  : 			dirflag = DAMAGEF16_TOFRONT;

	mov	DWORD PTR _dirflag$[ebp], 4

; 982  : 			numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_NOSE, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _mask$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dirflag$[ebp]
	push	eax
	push	64					; 00000040H
	mov	ecx, DWORD PTR _numpiece$[ebp]
	imul	ecx, 56					; 00000038H
	add	ecx, DWORD PTR _piece$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 983  : 			numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_NONOSE, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _mask$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _dirflag$[ebp]
	push	ecx
	push	63					; 0000003fH
	mov	edx, DWORD PTR _numpiece$[ebp]
	imul	edx, 56					; 00000038H
	add	edx, DWORD PTR _piece$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 984  : 			*mask &= DAMAGEF16_NONOSE;

	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _mask$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	$LN15@CreateDama
$LN17@CreateDama:

; 985  : 		}
; 986  : 		else if (damagetype & 0x8)

	mov	eax, DWORD PTR _damagetype$[ebp]
	and	eax, 8
	je	$LN15@CreateDama

; 987  : 		{		// damage to the front
; 988  : 			dirflag = DAMAGEF16_TOFRONT;

	mov	DWORD PTR _dirflag$[ebp], 4

; 989  : 			numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_NOSE, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _mask$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dirflag$[ebp]
	push	eax
	push	64					; 00000040H
	mov	ecx, DWORD PTR _numpiece$[ebp]
	imul	ecx, 56					; 00000038H
	add	ecx, DWORD PTR _piece$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 990  : 			numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_FRONT, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _mask$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _dirflag$[ebp]
	push	ecx
	push	32					; 00000020H
	mov	edx, DWORD PTR _numpiece$[ebp]
	imul	edx, 56					; 00000038H
	add	edx, DWORD PTR _piece$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 991  : 			numpiece += SetDamageF16PieceType (&(piece[numpiece]), DAMAGEF16_BACKWITHWING, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _dirflag$[ebp]
	push	edx
	push	31					; 0000001fH
	mov	eax, DWORD PTR _numpiece$[ebp]
	imul	eax, 56					; 00000038H
	add	eax, DWORD PTR _piece$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 992  : 			*mask &= DAMAGEF16_BACKWITHWING;

	mov	ecx, DWORD PTR _mask$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 31					; 0000001fH
	mov	eax, DWORD PTR _mask$[ebp]
	mov	DWORD PTR [eax], edx
$LN15@CreateDama:

; 993  : 		}
; 994  : 	}
; 995  : 
; 996  : 	if (!numpiece) {	// if no damage, randomized damage parts

	cmp	DWORD PTR _numpiece$[ebp], 0
	jne	$LN14@CreateDama

; 997  : 		int i = DAMAGEF16_BACK;

	mov	DWORD PTR _i$4[ebp], 16			; 00000010H

; 998  : 		if (p > 0.0f) {

	movss	xmm0, DWORD PTR _p$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN11@CreateDama

; 999  : 			if (PRANDFloatPos() > 0.5f) {

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv1110[ebp]
	movss	xmm0, DWORD PTR tv1110[ebp]
	comiss	xmm0, DWORD PTR __real@3f000000
	jbe	SHORT $LN11@CreateDama

; 1000 : 				dirflag |= DAMAGEF16_TOFRONT;

	mov	ecx, DWORD PTR _dirflag$[ebp]
	or	ecx, 4
	mov	DWORD PTR _dirflag$[ebp], ecx

; 1001 : 				i |= DAMAGEF16_FRONT;

	mov	edx, DWORD PTR _i$4[ebp]
	or	edx, 32					; 00000020H
	mov	DWORD PTR _i$4[ebp], edx

; 1002 : 				if (PRANDFloatPos() > 0.5f) {

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv1116[ebp]
	movss	xmm0, DWORD PTR tv1116[ebp]
	comiss	xmm0, DWORD PTR __real@3f000000
	jbe	SHORT $LN11@CreateDama

; 1003 : 					i |= DAMAGEF16_NOSE;

	mov	eax, DWORD PTR _i$4[ebp]
	or	eax, 64					; 00000040H
	mov	DWORD PTR _i$4[ebp], eax
$LN11@CreateDama:

; 1004 : 				}
; 1005 : 			}
; 1006 : 		}
; 1007 : 		if (r > 0.0f) {

	movss	xmm0, DWORD PTR _r$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN10@CreateDama

; 1008 : 			if (PRANDFloatPos() > 0.5f) {

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv1122[ebp]
	movss	xmm0, DWORD PTR tv1122[ebp]
	comiss	xmm0, DWORD PTR __real@3f000000
	jbe	SHORT $LN9@CreateDama

; 1009 : 				dirflag |= DAMAGEF16_TORIGHT;

	mov	ecx, DWORD PTR _dirflag$[ebp]
	or	ecx, 2
	mov	DWORD PTR _dirflag$[ebp], ecx

; 1010 : 				i |= DAMAGEF16_LWING | DAMAGEF16_LSTAB;

	mov	edx, DWORD PTR _i$4[ebp]
	or	edx, 6
	mov	DWORD PTR _i$4[ebp], edx
	jmp	SHORT $LN8@CreateDama
$LN9@CreateDama:

; 1011 : 			}
; 1012 : 			else i |= DAMAGEF16_RWING | DAMAGEF16_RSTAB;

	mov	eax, DWORD PTR _i$4[ebp]
	or	eax, 9
	mov	DWORD PTR _i$4[ebp], eax
$LN8@CreateDama:

; 1013 : 		}
; 1014 : 		else {

	jmp	SHORT $LN5@CreateDama
$LN10@CreateDama:

; 1015 : 			if (PRANDFloatPos() > 0.5f) {

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv1129[ebp]
	movss	xmm0, DWORD PTR tv1129[ebp]
	comiss	xmm0, DWORD PTR __real@3f000000
	jbe	SHORT $LN6@CreateDama

; 1016 : 				dirflag |= DAMAGEF16_TOLEFT;

	mov	ecx, DWORD PTR _dirflag$[ebp]
	or	ecx, 1
	mov	DWORD PTR _dirflag$[ebp], ecx

; 1017 : 				i |= DAMAGEF16_RWING | DAMAGEF16_RSTAB;

	mov	edx, DWORD PTR _i$4[ebp]
	or	edx, 9
	mov	DWORD PTR _i$4[ebp], edx
	jmp	SHORT $LN5@CreateDama
$LN6@CreateDama:

; 1018 : 			}
; 1019 : 			else i |= DAMAGEF16_LWING | DAMAGEF16_LSTAB;

	mov	eax, DWORD PTR _i$4[ebp]
	or	eax, 6
	mov	DWORD PTR _i$4[ebp], eax
$LN5@CreateDama:

; 1020 : 		}
; 1021 : 		int j = i ^ 0x7f;

	mov	ecx, DWORD PTR _i$4[ebp]
	xor	ecx, 127				; 0000007fH
	mov	DWORD PTR _j$1[ebp], ecx

; 1022 : 		int k;
; 1023 : 		int l = 1;

	mov	DWORD PTR _l$3[ebp], 1

; 1024 : 		for (k=0; k < 7; k++) {

	mov	DWORD PTR _k$2[ebp], 0
	jmp	SHORT $LN4@CreateDama
$LN3@CreateDama:
	mov	edx, DWORD PTR _k$2[ebp]
	add	edx, 1
	mov	DWORD PTR _k$2[ebp], edx
$LN4@CreateDama:
	cmp	DWORD PTR _k$2[ebp], 7
	jge	SHORT $LN2@CreateDama

; 1025 : 			if (l & j) {

	mov	eax, DWORD PTR _l$3[ebp]
	and	eax, DWORD PTR _j$1[ebp]
	je	SHORT $LN1@CreateDama

; 1026 : 				numpiece += SetDamageF16PieceType (&(piece[numpiece]), l, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _mask$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dirflag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _l$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _numpiece$[ebp]
	imul	edx, 56					; 00000038H
	add	edx, DWORD PTR _piece$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax
$LN1@CreateDama:

; 1027 : 			}
; 1028 : 			l <<= 1;

	mov	eax, DWORD PTR _l$3[ebp]
	shl	eax, 1
	mov	DWORD PTR _l$3[ebp], eax

; 1029 : 		}

	jmp	SHORT $LN3@CreateDama
$LN2@CreateDama:

; 1030 : 		numpiece += SetDamageF16PieceType (&(piece[numpiece]), i, dirflag, *mask, speed);

	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _mask$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dirflag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _numpiece$[ebp]
	imul	edx, 56					; 00000038H
	add	edx, DWORD PTR _piece$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ; AircraftClass::SetDamageF16PieceType
	add	eax, DWORD PTR _numpiece$[ebp]
	mov	DWORD PTR _numpiece$[ebp], eax

; 1031 : 		*mask &= i;

	mov	eax, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, DWORD PTR _i$4[ebp]
	mov	edx, DWORD PTR _mask$[ebp]
	mov	DWORD PTR [edx], ecx
$LN14@CreateDama:

; 1032 : 	}
; 1033 : 	return numpiece;

	mov	eax, DWORD PTR _numpiece$[ebp]
$LN53@CreateDama:

; 1034 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CreateDamageF16Piece@AircraftClass@@IAEHPAUDamageF16PieceStructure@@PAH@Z ENDP ; AircraftClass::CreateDamageF16Piece
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\damage.cpp
_TEXT	SEGMENT
tv689 = -96						; size = 4
tv682 = -92						; size = 4
tv675 = -88						; size = 4
tv644 = -84						; size = 4
tv635 = -80						; size = 4
tv628 = -76						; size = 4
tv608 = -72						; size = 4
tv601 = -68						; size = 4
tv579 = -64						; size = 4
tv572 = -60						; size = 4
tv550 = -56						; size = 4
tv543 = -52						; size = 4
tv524 = -48						; size = 4
tv516 = -44						; size = 4
tv482 = -40						; size = 4
tv433 = -36						; size = 4
tv394 = -32						; size = 4
_this$ = -28						; size = 4
tv83 = -24						; size = 4
_s$ = -20						; size = 4
_angle2$ = -16						; size = 4
_angle1$ = -12						; size = 4
_roll$ = -8						; size = 4
_angle$ = -4						; size = 4
_piece$ = 8						; size = 4
_type$ = 12						; size = 4
_flag$ = 16						; size = 4
_mask$ = 20						; size = 4
_speed$ = 24						; size = 4
?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z PROC ; AircraftClass::SetDamageF16PieceType
; _this$ = ecx

; 614  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 615  : 	if (!(type & mask)) return 0;

	mov	eax, DWORD PTR _type$[ebp]
	and	eax, DWORD PTR _mask$[ebp]
	jne	SHORT $LN40@SetDamageF
	xor	eax, eax
	jmp	$LN41@SetDamageF
$LN40@SetDamageF:

; 616  : 
; 617  : 	piece -> damage = MapVisId(DAMAGEF16_ID);

	push	1288					; 00000508H
	call	?MapVisId@@YAKK@Z			; MapVisId
	add	esp, 4
	mov	ecx, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 618  : 	piece -> mask = type;

	mov	edx, DWORD PTR _piece$[ebp]
	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [edx], eax

; 619  : 	piece -> sfxtype = SFX_SMOKING_PART;

	mov	ecx, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [ecx+16], 3

; 620  : 	piece -> sfxflag = SFX_F16CRASHLANDING | SFX_MOVES | SFX_BOUNCES;

	mov	edx, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [edx+12], -2147483615		; 80000021H

; 621  : 	piece -> lifetime = 300.0f;

	mov	eax, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@43960000
	movss	DWORD PTR [eax+20], xmm0

; 622  : 
; 623  : 	piece -> pitch = 0.0f;

	mov	ecx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+48], xmm0

; 624  : 	piece -> roll = 0.0f;

	mov	edx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+52], xmm0

; 625  : 
; 626  : 	piece -> yd = 0.0f;

	mov	eax, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+36], xmm0

; 627  : 	piece -> pd = 0.0f;

	mov	ecx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+40], xmm0

; 628  : 	piece -> rd = 0.0f;

	mov	edx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+44], xmm0

; 629  : 
; 630  : 	piece -> dx = 1.0f;

	mov	eax, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+24], xmm0

; 631  : 	piece -> dy = 1.0f;

	mov	ecx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+28], xmm0

; 632  : 	piece -> dz = 1.0f;

	mov	edx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+32], xmm0

; 633  : 
; 634  : 	float angle=0.0F, angle1=0.0F, angle2=0.0F, roll=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _angle$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _angle1$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _angle2$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _roll$[ebp], xmm0

; 635  : 
; 636  : 	if (PRANDFloatPos() > 0.5f)

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv394[ebp]
	movss	xmm0, DWORD PTR tv394[ebp]
	comiss	xmm0, DWORD PTR __real@3f000000
	jbe	SHORT $LN39@SetDamageF

; 637  : 		roll = 110.0f * DTR;

	movss	xmm0, DWORD PTR __real@3ff5be09
	movss	DWORD PTR _roll$[ebp], xmm0

; 638  : 	else

	jmp	SHORT $LN38@SetDamageF
$LN39@SetDamageF:

; 639  : 		roll = 40.0f * DTR;

	movss	xmm0, DWORD PTR __real@3f32b8c1
	movss	DWORD PTR _roll$[ebp], xmm0
$LN38@SetDamageF:

; 640  : 
; 641  : 	angle1 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _angle1$[ebp], xmm0

; 642  : 	angle2 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _angle2$[ebp], xmm0

; 643  : 	switch (type) {

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv83[ebp], eax
	mov	ecx, DWORD PTR tv83[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv83[ebp], ecx
	cmp	DWORD PTR tv83[ebp], 120		; 00000078H
	ja	$LN6@SetDamageF
	mov	edx, DWORD PTR tv83[ebp]
	movzx	eax, BYTE PTR $LN43@SetDamageF[edx]
	jmp	DWORD PTR $LN44@SetDamageF[eax*4]
$LN35@SetDamageF:

; 644  : 		case DAMAGEF16_NOLEFTANDNOSE:
; 645  : 		case DAMAGEF16_NOLEFT:
; 646  : 			piece -> sfxflag |= SFX_F16CRASH_OBJECT;

	mov	ecx, DWORD PTR _piece$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	or	edx, 1073741824				; 40000000H
	mov	eax, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [eax+12], edx

; 647  : 			piece -> roll = -roll;

	movss	xmm0, DWORD PTR _roll$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _piece$[ebp]
	movss	DWORD PTR [ecx+52], xmm0

; 648  : 			piece -> index = DAMAGEF16_FRONT_SLOTINDEX;

	mov	edx, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [edx+4], 1

; 649  : 			speed += 20.0f;

	movss	xmm0, DWORD PTR _speed$[ebp]
	addss	xmm0, DWORD PTR __real@41a00000
	movss	DWORD PTR _speed$[ebp], xmm0

; 650  : 			angle = 270.0f * DTR;

	movss	xmm0, DWORD PTR __real@4096cbe3
	movss	DWORD PTR _angle$[ebp], xmm0

; 651  : 			piece -> dz = 2.0f;

	mov	eax, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [eax+32], xmm0

; 652  : 			piece -> dx = 0.75f;

	mov	ecx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR [ecx+24], xmm0

; 653  : 			break;

	jmp	$LN36@SetDamageF
$LN34@SetDamageF:

; 654  : 
; 655  : 		case DAMAGEF16_NORIGHTANDNOSE:
; 656  : 		case DAMAGEF16_NORIGHT:
; 657  : 			piece -> sfxflag |= SFX_F16CRASH_OBJECT;

	mov	edx, DWORD PTR _piece$[ebp]
	mov	eax, DWORD PTR [edx+12]
	or	eax, 1073741824				; 40000000H
	mov	ecx, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 658  : 			piece -> roll = roll;

	mov	edx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR _roll$[ebp]
	movss	DWORD PTR [edx+52], xmm0

; 659  : 			piece -> index = DAMAGEF16_FRONT_SLOTINDEX;

	mov	eax, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [eax+4], 1

; 660  : 			speed += 20.0f;

	movss	xmm0, DWORD PTR _speed$[ebp]
	addss	xmm0, DWORD PTR __real@41a00000
	movss	DWORD PTR _speed$[ebp], xmm0

; 661  : 			angle = 270.0f * DTR;

	movss	xmm0, DWORD PTR __real@4096cbe3
	movss	DWORD PTR _angle$[ebp], xmm0

; 662  : 			piece -> dz = 2.0f;

	mov	ecx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [ecx+32], xmm0

; 663  : 			piece -> dx = 0.75f;

	mov	edx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR [edx+24], xmm0

; 664  : 			break;

	jmp	$LN36@SetDamageF
$LN33@SetDamageF:

; 665  : 
; 666  : 		case DAMAGEF16_ONLYBODY:
; 667  : 			piece -> sfxflag |= SFX_F16CRASH_OBJECT;

	mov	eax, DWORD PTR _piece$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	or	ecx, 1073741824				; 40000000H
	mov	edx, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 668  : 			if (PRANDFloatPos() > 0.5f) roll = -roll;

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv433[ebp]
	movss	xmm0, DWORD PTR tv433[ebp]
	comiss	xmm0, DWORD PTR __real@3f000000
	jbe	SHORT $LN32@SetDamageF
	movss	xmm0, DWORD PTR _roll$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _roll$[ebp], xmm0
$LN32@SetDamageF:

; 669  : 			piece -> roll = roll;

	mov	eax, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR _roll$[ebp]
	movss	DWORD PTR [eax+52], xmm0

; 670  : 			piece -> index = DAMAGEF16_FRONT_SLOTINDEX;

	mov	ecx, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [ecx+4], 1

; 671  : 			speed += 20.0f;

	movss	xmm0, DWORD PTR _speed$[ebp]
	addss	xmm0, DWORD PTR __real@41a00000
	movss	DWORD PTR _speed$[ebp], xmm0

; 672  : 			angle = 360.0f * DTR;

	movss	xmm0, DWORD PTR __real@40c90fd9
	movss	DWORD PTR _angle$[ebp], xmm0

; 673  : 			piece -> dz = 1.5f;

	mov	edx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR [edx+32], xmm0

; 674  : 			piece -> dx = 0.75f;

	mov	eax, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR [eax+24], xmm0

; 675  : 			break;

	jmp	$LN36@SetDamageF
$LN31@SetDamageF:

; 676  : 
; 677  : 		case DAMAGEF16_NONOSE:
; 678  : 			piece -> sfxflag |= SFX_F16CRASH_OBJECT;

	mov	ecx, DWORD PTR _piece$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	or	edx, 1073741824				; 40000000H
	mov	eax, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [eax+12], edx

; 679  : 			piece -> index = DAMAGEF16_FRONT_SLOTINDEX;

	mov	ecx, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [ecx+4], 1

; 680  : 			speed += 10.0f;

	movss	xmm0, DWORD PTR _speed$[ebp]
	addss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR _speed$[ebp], xmm0

; 681  : 			angle = 270.0f * DTR;

	movss	xmm0, DWORD PTR __real@4096cbe3
	movss	DWORD PTR _angle$[ebp], xmm0

; 682  : 			piece -> dz = 1.25f;

	mov	edx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3fa00000
	movss	DWORD PTR [edx+32], xmm0

; 683  : 			piece -> dx = 0.5f;

	mov	eax, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [eax+24], xmm0

; 684  : 			break;

	jmp	$LN36@SetDamageF
$LN30@SetDamageF:

; 685  : 
; 686  : 		case DAMAGEF16_BACKWITHWING:
; 687  : 			piece -> index = DAMAGEF16_BACK_SLOTINDEX;

	mov	ecx, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [ecx+4], 2

; 688  : 			speed += 15.0f;

	movss	xmm0, DWORD PTR _speed$[ebp]
	addss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR _speed$[ebp], xmm0

; 689  : 			angle = 270.0f * DTR;

	movss	xmm0, DWORD PTR __real@4096cbe3
	movss	DWORD PTR _angle$[ebp], xmm0

; 690  : 			piece -> dz = 2.0f;

	mov	edx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [edx+32], xmm0

; 691  : 			piece -> dx = 0.75f;

	mov	eax, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR [eax+24], xmm0

; 692  : 			break;

	jmp	$LN36@SetDamageF
$LN29@SetDamageF:

; 693  : 
; 694  : 		case DAMAGEF16_BACKWITHLEFT:
; 695  : 			piece -> roll = roll;

	mov	ecx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR _roll$[ebp]
	movss	DWORD PTR [ecx+52], xmm0

; 696  : 			piece -> index = DAMAGEF16_BACK_SLOTINDEX;

	mov	edx, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [edx+4], 2

; 697  : 			speed += 15.0f;

	movss	xmm0, DWORD PTR _speed$[ebp]
	addss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR _speed$[ebp], xmm0

; 698  : 			angle = 270.0f * DTR;

	movss	xmm0, DWORD PTR __real@4096cbe3
	movss	DWORD PTR _angle$[ebp], xmm0

; 699  : 			piece -> dz = 2.0f;

	mov	eax, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [eax+32], xmm0

; 700  : 			piece -> dx = 0.75f;

	mov	ecx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR [ecx+24], xmm0

; 701  : 			break;

	jmp	$LN36@SetDamageF
$LN28@SetDamageF:

; 702  : 
; 703  : 		case DAMAGEF16_BACKWITHRIGHT:
; 704  : 			piece -> roll = -roll;

	movss	xmm0, DWORD PTR _roll$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _piece$[ebp]
	movss	DWORD PTR [edx+52], xmm0

; 705  : 			piece -> index = DAMAGEF16_BACK_SLOTINDEX;

	mov	eax, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [eax+4], 2

; 706  : 			speed += 15.0f;

	movss	xmm0, DWORD PTR _speed$[ebp]
	addss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR _speed$[ebp], xmm0

; 707  : 			angle = 270.0f * DTR;

	movss	xmm0, DWORD PTR __real@4096cbe3
	movss	DWORD PTR _angle$[ebp], xmm0

; 708  : 			piece -> dz = 2.0f;

	mov	ecx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [ecx+32], xmm0

; 709  : 			piece -> dx = 0.75f;

	mov	edx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR [edx+24], xmm0

; 710  : 			break;

	jmp	$LN36@SetDamageF
$LN27@SetDamageF:

; 711  : 
; 712  : 		case DAMAGEF16_BACK:
; 713  : 			if (PRANDFloatPos() > 0.5f) roll = -roll;

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv482[ebp]
	movss	xmm0, DWORD PTR tv482[ebp]
	comiss	xmm0, DWORD PTR __real@3f000000
	jbe	SHORT $LN26@SetDamageF
	movss	xmm0, DWORD PTR _roll$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _roll$[ebp], xmm0
$LN26@SetDamageF:

; 714  : 			piece -> roll = roll;

	mov	eax, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR _roll$[ebp]
	movss	DWORD PTR [eax+52], xmm0

; 715  : 			piece -> index = DAMAGEF16_BACK_SLOTINDEX;

	mov	ecx, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [ecx+4], 2

; 716  : 			speed += 25.0f;

	movss	xmm0, DWORD PTR _speed$[ebp]
	addss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR _speed$[ebp], xmm0

; 717  : 			angle = 360.0f * DTR;

	movss	xmm0, DWORD PTR __real@40c90fd9
	movss	DWORD PTR _angle$[ebp], xmm0

; 718  : 			piece -> dz = 1.25f;

	mov	edx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3fa00000
	movss	DWORD PTR [edx+32], xmm0

; 719  : 			piece -> dx = 0.75f;

	mov	eax, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR [eax+24], xmm0

; 720  : 			break;

	jmp	$LN36@SetDamageF
$LN25@SetDamageF:

; 721  : 
; 722  : 		case DAMAGEF16_FRONT:
; 723  : 			piece -> sfxflag |= SFX_F16CRASH_OBJECT;

	mov	ecx, DWORD PTR _piece$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	or	edx, 1073741824				; 40000000H
	mov	eax, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [eax+12], edx

; 724  : 			piece -> roll = 40.0f*DTR;

	mov	ecx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3f32b8c1
	movss	DWORD PTR [ecx+52], xmm0

; 725  : 			piece -> index = DAMAGEF16_FRONT_SLOTINDEX;

	mov	edx, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [edx+4], 1

; 726  : 			speed += 30.0f;

	movss	xmm0, DWORD PTR _speed$[ebp]
	addss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR _speed$[ebp], xmm0

; 727  : 			angle = 360.0f * DTR;

	movss	xmm0, DWORD PTR __real@40c90fd9
	movss	DWORD PTR _angle$[ebp], xmm0

; 728  : 			piece -> dz = 1.125f;

	mov	eax, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3f900000
	movss	DWORD PTR [eax+32], xmm0

; 729  : 			break;

	jmp	$LN36@SetDamageF
$LN24@SetDamageF:

; 730  : 
; 731  : 		case DAMAGEF16_NOSE:
; 732  : 			piece -> pitch = -5.0f*DTR;

	mov	ecx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@bdb2b8c1
	movss	DWORD PTR [ecx+48], xmm0

; 733  : 			piece -> sfxflag |= SFX_BOUNCES;

	mov	edx, DWORD PTR _piece$[ebp]
	mov	eax, DWORD PTR [edx+12]
	or	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 734  : 			piece -> index = DAMAGEF16_NOSE_SLOTINDEX;

	mov	edx, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [edx+4], 0

; 735  : 			speed += 50.0f;

	movss	xmm0, DWORD PTR _speed$[ebp]
	addss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR _speed$[ebp], xmm0

; 736  : 			angle = 450.0f * DTR;

	movss	xmm0, DWORD PTR __real@40fb53cf
	movss	DWORD PTR _angle$[ebp], xmm0

; 737  : 			piece -> dx = 1.5f;

	mov	eax, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR [eax+24], xmm0

; 738  : 			piece -> dx += PRANDFloatPos();

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv516[ebp]
	mov	ecx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR tv516[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _piece$[ebp]
	movss	DWORD PTR [edx+24], xmm0

; 739  : 			if (flag & DAMAGEF16_TOLEFTRIGHT) {

	mov	eax, DWORD PTR _flag$[ebp]
	and	eax, 3
	je	SHORT $LN23@SetDamageF

; 740  : 				piece -> dy += PRANDFloatPos();

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv524[ebp]
	mov	ecx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR tv524[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _piece$[ebp]
	movss	DWORD PTR [edx+28], xmm0
$LN23@SetDamageF:

; 741  : 			}
; 742  : 			break;

	jmp	$LN36@SetDamageF
$LN22@SetDamageF:

; 743  : 
; 744  : 		case DAMAGEF16_RWING:
; 745  : 			piece -> sfxflag |= SFX_BOUNCES;

	mov	eax, DWORD PTR _piece$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 746  : 			piece -> index = DAMAGEF16_RWING_SLOTINDEX;

	mov	eax, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [eax+4], 3

; 747  : 			if (flag & DAMAGEF16_TOLEFT) {

	mov	ecx, DWORD PTR _flag$[ebp]
	and	ecx, 1
	je	SHORT $LN21@SetDamageF

; 748  : 				speed += 30.0f;

	movss	xmm0, DWORD PTR _speed$[ebp]
	addss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR _speed$[ebp], xmm0

; 749  : 				piece -> dy = 0.75f;

	mov	edx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR [edx+28], xmm0

; 750  : 			}
; 751  : 			else {

	jmp	SHORT $LN20@SetDamageF
$LN21@SetDamageF:

; 752  : 				speed += 40.0f;

	movss	xmm0, DWORD PTR _speed$[ebp]
	addss	xmm0, DWORD PTR __real@42200000
	movss	DWORD PTR _speed$[ebp], xmm0

; 753  : 				piece -> dy = 1.5f;

	mov	eax, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR [eax+28], xmm0
$LN20@SetDamageF:

; 754  : 			}
; 755  : 			if (flag & DAMAGEF16_TOFRONT) {

	mov	ecx, DWORD PTR _flag$[ebp]
	and	ecx, 4
	je	SHORT $LN19@SetDamageF

; 756  : 				piece -> dx += PRANDFloatPos();

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv543[ebp]
	mov	edx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR tv543[ebp]
	addss	xmm0, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _piece$[ebp]
	movss	DWORD PTR [eax+24], xmm0
$LN19@SetDamageF:

; 757  : 			}
; 758  : 			piece -> dy += PRANDFloatPos();

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv550[ebp]
	mov	ecx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR tv550[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _piece$[ebp]
	movss	DWORD PTR [edx+28], xmm0

; 759  : 			angle = 360.0f * DTR;

	movss	xmm0, DWORD PTR __real@40c90fd9
	movss	DWORD PTR _angle$[ebp], xmm0

; 760  : 			piece -> dz = 1.0625f;

	mov	eax, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3f880000
	movss	DWORD PTR [eax+32], xmm0

; 761  : 			break;

	jmp	$LN36@SetDamageF
$LN18@SetDamageF:

; 762  : 
; 763  : 		case DAMAGEF16_LWING:
; 764  : 			piece -> sfxflag |= SFX_BOUNCES;

	mov	ecx, DWORD PTR _piece$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	or	edx, 32					; 00000020H
	mov	eax, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [eax+12], edx

; 765  : 			piece -> index = DAMAGEF16_LWING_SLOTINDEX;

	mov	ecx, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [ecx+4], 4

; 766  : 			if (flag & DAMAGEF16_TORIGHT) {

	mov	edx, DWORD PTR _flag$[ebp]
	and	edx, 2
	je	SHORT $LN17@SetDamageF

; 767  : 				speed += 30.0f;

	movss	xmm0, DWORD PTR _speed$[ebp]
	addss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR _speed$[ebp], xmm0

; 768  : 				piece -> dy = 0.75f;

	mov	eax, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR [eax+28], xmm0

; 769  : 			}
; 770  : 			else {

	jmp	SHORT $LN16@SetDamageF
$LN17@SetDamageF:

; 771  : 				speed += 40.0f;

	movss	xmm0, DWORD PTR _speed$[ebp]
	addss	xmm0, DWORD PTR __real@42200000
	movss	DWORD PTR _speed$[ebp], xmm0

; 772  : 				piece -> dy = 1.5f;

	mov	ecx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR [ecx+28], xmm0
$LN16@SetDamageF:

; 773  : 			}
; 774  : 			if (flag & DAMAGEF16_TOFRONT) {

	mov	edx, DWORD PTR _flag$[ebp]
	and	edx, 4
	je	SHORT $LN15@SetDamageF

; 775  : 				piece -> dx += PRANDFloatPos();

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv572[ebp]
	mov	eax, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR tv572[ebp]
	addss	xmm0, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _piece$[ebp]
	movss	DWORD PTR [ecx+24], xmm0
$LN15@SetDamageF:

; 776  : 			}
; 777  : 			piece -> dy += PRANDFloatPos();

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv579[ebp]
	mov	edx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR tv579[ebp]
	addss	xmm0, DWORD PTR [edx+28]
	mov	eax, DWORD PTR _piece$[ebp]
	movss	DWORD PTR [eax+28], xmm0

; 778  : 			angle = -360.0f * DTR;

	movss	xmm0, DWORD PTR __real@c0c90fd9
	movss	DWORD PTR _angle$[ebp], xmm0

; 779  : 			piece -> dz = 1.0625f;

	mov	ecx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3f880000
	movss	DWORD PTR [ecx+32], xmm0

; 780  : 			break;

	jmp	$LN36@SetDamageF
$LN14@SetDamageF:

; 781  : 
; 782  : 		case DAMAGEF16_LSTAB:
; 783  : 			piece -> sfxflag |= SFX_BOUNCES;

	mov	edx, DWORD PTR _piece$[ebp]
	mov	eax, DWORD PTR [edx+12]
	or	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 784  : 			piece -> index = DAMAGEF16_LSTAB_SLOTINDEX;

	mov	edx, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [edx+4], 5

; 785  : 			if (flag & DAMAGEF16_TORIGHT) {

	mov	eax, DWORD PTR _flag$[ebp]
	and	eax, 2
	je	SHORT $LN13@SetDamageF

; 786  : 				speed += 40.0f;

	movss	xmm0, DWORD PTR _speed$[ebp]
	addss	xmm0, DWORD PTR __real@42200000
	movss	DWORD PTR _speed$[ebp], xmm0

; 787  : 				piece -> dy = 0.75f;

	mov	ecx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR [ecx+28], xmm0

; 788  : 			}
; 789  : 			else {

	jmp	SHORT $LN12@SetDamageF
$LN13@SetDamageF:

; 790  : 				speed += 50.0f;

	movss	xmm0, DWORD PTR _speed$[ebp]
	addss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR _speed$[ebp], xmm0

; 791  : 				piece -> dy = 1.5f;

	mov	edx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR [edx+28], xmm0
$LN12@SetDamageF:

; 792  : 			}
; 793  : 			if (flag & DAMAGEF16_TOFRONT) {

	mov	eax, DWORD PTR _flag$[ebp]
	and	eax, 4
	je	SHORT $LN11@SetDamageF

; 794  : 				piece -> dx += PRANDFloatPos();

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv601[ebp]
	mov	ecx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR tv601[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _piece$[ebp]
	movss	DWORD PTR [edx+24], xmm0
$LN11@SetDamageF:

; 795  : 			}
; 796  : 			piece -> dy += PRANDFloatPos();

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv608[ebp]
	mov	eax, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR tv608[ebp]
	addss	xmm0, DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _piece$[ebp]
	movss	DWORD PTR [ecx+28], xmm0

; 797  : 			angle = -450.0f * DTR;

	movss	xmm0, DWORD PTR __real@c0fb53cf
	movss	DWORD PTR _angle$[ebp], xmm0

; 798  : 			break;

	jmp	$LN36@SetDamageF
$LN10@SetDamageF:

; 799  : 
; 800  : 		case DAMAGEF16_RSTAB:
; 801  : 			piece -> sfxflag |= SFX_BOUNCES;

	mov	edx, DWORD PTR _piece$[ebp]
	mov	eax, DWORD PTR [edx+12]
	or	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 802  : 			piece -> index = DAMAGEF16_RSTAB_SLOTINDEX;

	mov	edx, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [edx+4], 6

; 803  : 			if (flag & DAMAGEF16_TOLEFT) {

	mov	eax, DWORD PTR _flag$[ebp]
	and	eax, 1
	je	SHORT $LN9@SetDamageF

; 804  : 				speed += 40.0f;

	movss	xmm0, DWORD PTR _speed$[ebp]
	addss	xmm0, DWORD PTR __real@42200000
	movss	DWORD PTR _speed$[ebp], xmm0

; 805  : 				piece -> dy = 0.75f;

	mov	ecx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR [ecx+28], xmm0

; 806  : 			}
; 807  : 			else {

	jmp	SHORT $LN8@SetDamageF
$LN9@SetDamageF:

; 808  : 				speed += 50.0f;

	movss	xmm0, DWORD PTR _speed$[ebp]
	addss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR _speed$[ebp], xmm0

; 809  : 				piece -> dy = 1.5f;

	mov	edx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR [edx+28], xmm0
$LN8@SetDamageF:

; 810  : 			}
; 811  : 			if (flag & DAMAGEF16_TOFRONT) {

	mov	eax, DWORD PTR _flag$[ebp]
	and	eax, 4
	je	SHORT $LN7@SetDamageF

; 812  : 				piece -> dx += PRANDFloatPos();

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv628[ebp]
	mov	ecx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR tv628[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _piece$[ebp]
	movss	DWORD PTR [edx+24], xmm0
$LN7@SetDamageF:

; 813  : 			}
; 814  : 			piece -> dy += PRANDFloatPos();

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv635[ebp]
	mov	eax, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR tv635[ebp]
	addss	xmm0, DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _piece$[ebp]
	movss	DWORD PTR [ecx+28], xmm0

; 815  : 			angle = 450.0f * DTR;

	movss	xmm0, DWORD PTR __real@40fb53cf
	movss	DWORD PTR _angle$[ebp], xmm0

; 816  : 			break;

	jmp	SHORT $LN36@SetDamageF
$LN6@SetDamageF:

; 817  : 
; 818  : 		default:
; 819  : 			angle = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _angle$[ebp], xmm0
$LN36@SetDamageF:

; 820  : 		break;
; 821  : 	}
; 822  : 
; 823  : 	speed += 50.0f * PRANDFloatPos();

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv644[ebp]
	movss	xmm0, DWORD PTR tv644[ebp]
	mulss	xmm0, DWORD PTR __real@42480000
	addss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR _speed$[ebp], xmm0

; 824  : 
; 825  : 	angle1 = 180.0f * DTR;

	movss	xmm0, DWORD PTR __real@40490fd9
	movss	DWORD PTR _angle1$[ebp], xmm0

; 826  : 	angle2 = 360.0f * DTR;

	movss	xmm0, DWORD PTR __real@40c90fd9
	movss	DWORD PTR _angle2$[ebp], xmm0

; 827  : 	float s = speed * 0.1f;

	movss	xmm0, DWORD PTR _speed$[ebp]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _s$[ebp], xmm0

; 828  : 	if (s > 8.0f) s = 8.0f;

	movss	xmm0, DWORD PTR _s$[ebp]
	comiss	xmm0, DWORD PTR __real@41000000
	jbe	SHORT $LN5@SetDamageF
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR _s$[ebp], xmm0
$LN5@SetDamageF:

; 829  : 	s = 1.0f / (9.0f - s);

	movss	xmm0, DWORD PTR __real@41100000
	subss	xmm0, DWORD PTR _s$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movss	DWORD PTR _s$[ebp], xmm1

; 830  : 	angle *= s;

	movss	xmm0, DWORD PTR _angle$[ebp]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _angle$[ebp], xmm0

; 831  : 	angle1 *= s;

	movss	xmm0, DWORD PTR _angle1$[ebp]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _angle1$[ebp], xmm0

; 832  : 	angle2 *= s;

	movss	xmm0, DWORD PTR _angle2$[ebp]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _angle2$[ebp], xmm0

; 833  : 	if (flag & DAMAGEF16_TOLEFTRIGHT) {

	mov	edx, DWORD PTR _flag$[ebp]
	and	edx, 3
	je	SHORT $LN2@SetDamageF

; 834  : 		if (flag & DAMAGEF16_TOFRONT) {

	mov	eax, DWORD PTR _flag$[ebp]
	and	eax, 4
	je	SHORT $LN3@SetDamageF

; 835  : 			angle *= 2.5f;

	movss	xmm0, DWORD PTR _angle$[ebp]
	mulss	xmm0, DWORD PTR __real@40200000
	movss	DWORD PTR _angle$[ebp], xmm0

; 836  : 			angle1 *= 2.0f;

	movss	xmm0, DWORD PTR _angle1$[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _angle1$[ebp], xmm0

; 837  : 			angle2 *= 1.5f;

	movss	xmm0, DWORD PTR _angle2$[ebp]
	mulss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR _angle2$[ebp], xmm0
$LN3@SetDamageF:

; 838  : 		}
; 839  : 		if (flag & DAMAGEF16_TOLEFT) {

	mov	ecx, DWORD PTR _flag$[ebp]
	and	ecx, 1
	je	SHORT $LN2@SetDamageF

; 840  : 			angle = -angle;

	movss	xmm0, DWORD PTR _angle$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _angle$[ebp], xmm0

; 841  : 			angle1 = -angle1;

	movss	xmm0, DWORD PTR _angle1$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _angle1$[ebp], xmm0

; 842  : 			angle2 = -angle2;

	movss	xmm0, DWORD PTR _angle2$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _angle2$[ebp], xmm0
$LN2@SetDamageF:

; 843  : 		}
; 844  : 	}
; 845  : 	piece -> yd = angle;

	mov	edx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [edx+36], xmm0

; 846  : 	piece -> pd = angle1;

	mov	eax, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR _angle1$[ebp]
	movss	DWORD PTR [eax+40], xmm0

; 847  : 	piece -> rd = angle2;

	mov	ecx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR _angle2$[ebp]
	movss	DWORD PTR [ecx+44], xmm0

; 848  : 
; 849  : 	piece -> dx *= XDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv675[ebp]
	mov	edx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR tv675[ebp]
	mulss	xmm0, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _piece$[ebp]
	movss	DWORD PTR [eax+24], xmm0

; 850  : 	piece -> dy *= YDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv682[ebp]
	mov	ecx, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR tv682[ebp]
	mulss	xmm0, DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _piece$[ebp]
	movss	DWORD PTR [edx+28], xmm0

; 851  : 	piece -> dz *= ZDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv689[ebp]
	mov	eax, DWORD PTR _piece$[ebp]
	movss	xmm0, DWORD PTR tv689[ebp]
	mulss	xmm0, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _piece$[ebp]
	movss	DWORD PTR [ecx+32], xmm0

; 852  : 
; 853  : 	if ( this != SimDriver.GetPlayerEntity() ) {

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	cmp	DWORD PTR _this$[ebp], eax
	je	SHORT $LN1@SetDamageF

; 854  : 		piece -> sfxflag &= ~SFX_F16CRASH_OBJECT;

	mov	edx, DWORD PTR _piece$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, -1073741825			; bfffffffH
	mov	ecx, DWORD PTR _piece$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN1@SetDamageF:

; 855  : 	}
; 856  : 
; 857  : 	return 1;

	mov	eax, 1
$LN41@SetDamageF:

; 858  : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN44@SetDamageF:
	DD	$LN22@SetDamageF
	DD	$LN18@SetDamageF
	DD	$LN14@SetDamageF
	DD	$LN10@SetDamageF
	DD	$LN27@SetDamageF
	DD	$LN29@SetDamageF
	DD	$LN28@SetDamageF
	DD	$LN30@SetDamageF
	DD	$LN25@SetDamageF
	DD	$LN34@SetDamageF
	DD	$LN35@SetDamageF
	DD	$LN31@SetDamageF
	DD	$LN24@SetDamageF
	DD	$LN33@SetDamageF
	DD	$LN6@SetDamageF
$LN43@SetDamageF:
	DB	0
	DB	1
	DB	14					; 0000000eH
	DB	2
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	3
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	4
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	5
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	6
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	7
	DB	8
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	9
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	10					; 0000000aH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	9
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	10					; 0000000aH
?SetDamageF16PieceType@AircraftClass@@IAEHPAUDamageF16PieceStructure@@HHHM@Z ENDP ; AircraftClass::SetDamageF16PieceType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\damage.cpp
_TEXT	SEGMENT
tv70 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_failures$ = 8						; size = 4
_failuresPossible$ = 12					; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?AddFault@AircraftClass@@QAEXHIHH@Z PROC		; AircraftClass::AddFault
; _this$ = ecx

; 3213 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 3214 :     int i;
; 3215 :     
; 3216 :     //	failures = numToBreak * (float)rand() / (float)RAND_MAX;
; 3217 :     
; 3218 :     for(i = 0; i < failures; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@AddFault
$LN8@AddFault:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@AddFault:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _failures$[ebp]
	jge	SHORT $LN7@AddFault

; 3219 :     {
; 3220 : 	mFaults->SetFault(failuresPossible, !isDigital);

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+948], 0
	jne	SHORT $LN12@AddFault
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN13@AddFault
$LN12@AddFault:
	mov	DWORD PTR tv70[ebp], 0
$LN13@AddFault:
	mov	eax, DWORD PTR tv70[ebp]
	push	eax
	mov	ecx, DWORD PTR _failuresPossible$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXHH@Z		; FackClass::SetFault

; 3221 :     }

	jmp	SHORT $LN8@AddFault
$LN7@AddFault:

; 3222 :     // JPO - break hydraulics occasionally
; 3223 :     if ((failuresPossible & FaultClass::eng_fault) &&
; 3224 : 	(mFaults->GetFault(FaultClass::eng_fault) & FaultClass::hydr))  {

	mov	eax, DWORD PTR _failuresPossible$[ebp]
	and	eax, 8
	je	SHORT $LN6@AddFault
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	and	eax, 32768				; 00008000H
	je	SHORT $LN6@AddFault

; 3225 : 	if (rand() % 100 < 20) { // 20% failure chance of A system

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	cmp	edx, 20					; 00000014H
	jge	SHORT $LN5@AddFault

; 3226 : 	    af->HydrBreak (AirframeClass::HYDR_A_SYSTEM);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+932]
	call	?HydrBreak@AirframeClass@@QAEXH@Z	; AirframeClass::HydrBreak
$LN5@AddFault:

; 3227 : 	}
; 3228 : 	if (rand() % 100 < 20) { // 20% failure chance of B system

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	cmp	edx, 20					; 00000014H
	jge	SHORT $LN6@AddFault

; 3229 : 	    af->HydrBreak (AirframeClass::HYDR_B_SYSTEM);

	push	2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+932]
	call	?HydrBreak@AirframeClass@@QAEXH@Z	; AirframeClass::HydrBreak
$LN6@AddFault:

; 3230 : 	}
; 3231 :     }
; 3232 :     // also break the generators now and then
; 3233 :     if (failuresPossible & FaultClass::eng_fault) {

	mov	eax, DWORD PTR _failuresPossible$[ebp]
	and	eax, 8
	je	SHORT $LN10@AddFault

; 3234 : 	if (rand() % 7 == 1)

	call	_rand
	cdq
	mov	ecx, 7
	idiv	ecx
	cmp	edx, 1
	jne	SHORT $LN2@AddFault

; 3235 : 	    af->GeneratorBreak(AirframeClass::GenStdby);

	push	64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+932]
	call	?GeneratorBreak@AirframeClass@@QAEXW4Generator@1@@Z ; AirframeClass::GeneratorBreak
$LN2@AddFault:

; 3236 : 	if (rand() % 7 == 1)

	call	_rand
	cdq
	mov	ecx, 7
	idiv	ecx
	cmp	edx, 1
	jne	SHORT $LN10@AddFault

; 3237 : 	    af->GeneratorBreak(AirframeClass::GenMain);

	push	1024					; 00000400H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+932]
	call	?GeneratorBreak@AirframeClass@@QAEXW4Generator@1@@Z ; AirframeClass::GeneratorBreak
$LN10@AddFault:

; 3238 :     }
; 3239 : #if 0
; 3240 : int failedThing;
; 3241 : int i, j = 0;
; 3242 : int failedThings[FaultClass::NumFaultListSubSystems];
; 3243 : BOOL Found;
; 3244 : int canFail;
; 3245 : int numFunctions = 0;
; 3246 : int failedFunc;
; 3247 : 
; 3248 : 	failures = numToBreak * (float)rand() / (float)RAND_MAX;
; 3249 : 
; 3250 : 	for(i = 0; i < FaultClass::NumFaultListSubSystems; i++) {
; 3251 :       if(failuresPossible & (1 << i)) {
; 3252 : 			failedThings[j] = i;
; 3253 : 			j++;
; 3254 : 		}
; 3255 : 	}
; 3256 :    
; 3257 : 	for(i = 0; i < failures; i++) {
; 3258 : 		Found = FALSE;
; 3259 : 
; 3260 : 		do {
; 3261 : 			failedThing = j * (float)rand() / (float)RAND_MAX;
; 3262 :          numFunctions = 0;
; 3263 : 
; 3264 : 			if(failedThings[failedThing] != -1) {
; 3265 :             // FLCS is a special case, as it has 1 informational fault which MUST happen first
; 3266 :             if ((FaultClass::type_FSubSystem)failedThings[failedThing] == FaultClass::flcs_fault &&
; 3267 :                !mFaults->GetFault(FaultClass::flcs_fault))
; 3268 :             {
; 3269 :                failedFunc = 1;
; 3270 :                numFunctions = -1;
; 3271 :                while (failedFunc)
; 3272 :                {
; 3273 :                   numFunctions ++;
; 3274 :                   if (FaultClass::sngl & (1 << numFunctions))
; 3275 :                      failedFunc --;
; 3276 :                }
; 3277 :             }
; 3278 :             else
; 3279 :             {
; 3280 :                canFail   = mFaults->Breakable((FaultClass::type_FSubSystem)failedThings[failedThing]);
; 3281 : 
; 3282 :                // How many functions?
; 3283 :                while (canFail)
; 3284 :                {
; 3285 :                   if (canFail & 0x1)
; 3286 :                      numFunctions ++;
; 3287 :                   canFail = canFail >> 1;
; 3288 :                }
; 3289 : 
; 3290 :                // pick 1 of canFail things
; 3291 :                failedFunc = numFunctions * (float)rand() / (float)RAND_MAX + 1;
; 3292 : 
; 3293 :                // Find that function
; 3294 :                canFail   = mFaults->Breakable((FaultClass::type_FSubSystem)failedThings[failedThing]);
; 3295 :                numFunctions = -1;
; 3296 :                while (failedFunc)
; 3297 :                {
; 3298 :                   numFunctions ++;
; 3299 :                   if (canFail & (1 << numFunctions))
; 3300 :                      failedFunc --;
; 3301 :                }
; 3302 :             }
; 3303 : 
; 3304 : 				mFaults->SetFault((FaultClass::type_FSubSystem)failedThings[failedThing],
; 3305 : 						(FaultClass::type_FFunction) (1 << numFunctions),	
; 3306 : 						(FaultClass::type_FSeverity) FaultClass::fail,
; 3307 : 						!isDigital);	// none, fail for now
; 3308 : 	if (failedThings[failedThing] == FaultClass::eng_fault &&
; 3309 : 		(1 << numFunctions) == hydr) {
; 3310 : 		if (rand() % 100 < 20) { // 20% failure chance of A system
; 3311 : 			af->HydrBreak (Airframe::HYDR_A_SYSTEM);
; 3312 : 		}
; 3313 : 		if (rand() % 100 < 20) { // 20% failure chance of B system
; 3314 : 			af->HydrBreak (Airframe::HYDR_B_SYSTEM);
; 3315 : 		}
; 3316 : 	}
; 3317 : 
; 3318 :             MonoPrint ("Failed %s %s\n", FaultClass::mpFSubSystemNames[failedThings[failedThing]],
; 3319 :                FaultClass::mpFFunctionNames[numFunctions+1]);
; 3320 : 				failedThings[failedThing] = -1;
; 3321 : 				Found = TRUE;
; 3322 : 			}
; 3323 : 		}
; 3324 : 		while(Found = FALSE);
; 3325 : 	}
; 3326 : #endif
; 3327 : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?AddFault@AircraftClass@@QAEXHIHH@Z ENDP		; AircraftClass::AddFault
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\damage.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RunCautionChecks@AircraftClass@@QAEXXZ PROC		; AircraftClass::RunCautionChecks
; _this$ = ecx

; 3330 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3331 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RunCautionChecks@AircraftClass@@QAEXXZ ENDP		; AircraftClass::RunCautionChecks
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ PROC	; AircraftClass::DBrain, COMDAT
; _this$ = ecx

; 624  : 	DigitalBrain *DBrain(void)			{return (DigitalBrain *)theBrain;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+672]
	mov	esp, ebp
	pop	ebp
	ret	0
?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ENDP	; AircraftClass::DBrain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\damage.cpp
_TEXT	SEGMENT
$T2 = -928						; size = 8
$T3 = -920						; size = 8
$T4 = -912						; size = 8
$T5 = -904						; size = 8
$T6 = -896						; size = 8
$T7 = -888						; size = 8
$T8 = -880						; size = 8
$T9 = -872						; size = 8
_gndGmma$10 = -864					; size = 4
_relMu$11 = -860					; size = 4
tv2309 = -856						; size = 4
tv2209 = -852						; size = 4
tv3232 = -848						; size = 4
tv2724 = -844						; size = 4
tv2305 = -840						; size = 4
tv2483 = -836						; size = 4
tv2301 = -832						; size = 4
tv2702 = -828						; size = 4
tv3166 = -824						; size = 4
tv2532 = -820						; size = 4
tv2297 = -816						; size = 4
tv2416 = -812						; size = 4
tv2293 = -808						; size = 4
tv3244 = -804						; size = 4
tv3164 = -800						; size = 4
tv2589 = -796						; size = 4
tv2289 = -792						; size = 4
tv2567 = -788						; size = 4
tv2283 = -784						; size = 4
tv2508 = -780						; size = 4
tv2266 = -776						; size = 4
tv2452 = -772						; size = 4
tv3162 = -768						; size = 4
tv2750 = -764						; size = 4
tv2261 = -760						; size = 4
tv2720 = -756						; size = 4
tv2247 = -752						; size = 4
tv2706 = -748						; size = 4
tv3160 = -744						; size = 4
tv2597 = -740						; size = 4
tv2243 = -736						; size = 4
tv2585 = -732						; size = 4
tv2239 = -728						; size = 4
tv2571 = -724						; size = 4
tv3158 = -720						; size = 4
tv2536 = -716						; size = 4
tv2235 = -712						; size = 4
tv2521 = -708						; size = 4
tv2231 = -704						; size = 4
tv2496 = -700						; size = 4
tv3156 = -696						; size = 4
tv2472 = -692						; size = 4
tv2227 = -688						; size = 4
tv2426 = -684						; size = 4
tv2215 = -680						; size = 4
tv2403 = -676						; size = 4
tv3154 = -672						; size = 4
tv2745 = -668						; size = 4
tv2695 = -664						; size = 4
tv3246 = -660						; size = 4
tv2689 = -656						; size = 4
tv2715 = -652						; size = 4
tv2641 = -648						; size = 4
tv2711 = -644						; size = 4
tv2629 = -640						; size = 4
tv3242 = -636						; size = 4
tv2617 = -632						; size = 4
tv2328 = -628						; size = 4
tv2605 = -624						; size = 4
tv2647 = -620						; size = 4
tv3260 = -616						; size = 4
tv2635 = -612						; size = 4
tv3137 = -608						; size = 4
tv2623 = -604						; size = 4
tv3262 = -600						; size = 4
tv2611 = -596						; size = 4
tv3129 = -592						; size = 4
tv2601 = -588						; size = 4
tv3256 = -584						; size = 4
tv2593 = -580						; size = 4
tv3122 = -576						; size = 4
tv3240 = -572						; size = 4
tv3258 = -568						; size = 4
tv2580 = -564						; size = 4
tv3114 = -560						; size = 4
tv2576 = -556						; size = 4
$T12 = -552						; size = 4
tv3236 = -548						; size = 4
tv3252 = -544						; size = 4
tv2541 = -540						; size = 4
tv3033 = -536						; size = 4
tv3234 = -532						; size = 4
tv3254 = -528						; size = 4
tv2528 = -524						; size = 4
tv3025 = -520						; size = 4
tv2515 = -516						; size = 4
tv3248 = -512						; size = 4
tv2501 = -508						; size = 4
tv3018 = -504						; size = 4
tv2490 = -500						; size = 4
tv3250 = -496						; size = 4
tv2478 = -492						; size = 4
tv3010 = -488						; size = 4
tv2463 = -484						; size = 4
$T13 = -480						; size = 4
tv2443 = -476						; size = 4
tv2888 = -472						; size = 4
tv2422 = -468						; size = 4
tv2864 = -464						; size = 4
tv2410 = -460						; size = 4
tv2771 = -456						; size = 4
tv2755 = -452						; size = 4
tv3238 = -448						; size = 4
tv1423 = -444						; size = 4
tv533 = -440						; size = 4
$T14 = -436						; size = 4
tv1706 = -432						; size = 4
tv1412 = -428						; size = 4
tv1717 = -424						; size = 4
_noseAngle$15 = -420					; size = 4
tv536 = -416						; size = 4
_gearOffset$16 = -412					; size = 4
tv1887 = -408						; size = 4
tv949 = -404						; size = 4
$T17 = -400						; size = 4
tv540 = -396						; size = 4
tv517 = -392						; size = 4
tv539 = -388						; size = 4
tv1668 = -384						; size = 4
_tmp$18 = -380						; size = 4
_numDynamics$19 = -376					; size = 4
_objData$ = -372					; size = 4
_deltaX$20 = -368					; size = 4
_impactAngle$21 = -364					; size = 4
_deltaY$22 = -360					; size = 4
_vt$23 = -356						; size = 4
_obj$ = -352						; size = 4
_changeval$24 = -348					; size = 4
_numSlots$25 = -344					; size = 4
_onCatPosition$26 = -338				; size = 1
_setOnObject$ = -337					; size = 1
_relVel$27 = -336					; size = 4
_cdof$28 = -332						; size = 4
_message$ = -328					; size = 4
_theObject$ = -324					; size = 4
_this$ = -320						; size = 4
_pos$29 = -316						; size = 12
_maxB$30 = -304						; size = 12
_pos$31 = -292						; size = 12
_noseGear$32 = -280					; size = 12
_noseGear$33 = -268					; size = 12
_PSvec$34 = -256					; size = 12
_randPos1$35 = -244					; size = 12
_vec$36 = -232						; size = 12
_org$37 = -220						; size = 12
_vec$38 = -208						; size = 12
_org$39 = -196						; size = 12
_randPos2$40 = -184					; size = 12
_randPos4$41 = -172					; size = 12
_randPos3$42 = -160					; size = 12
_velocity$43 = -148					; size = 12
_Myvec$44 = -136					; size = 12
_Objvec$45 = -124					; size = 12
_tmpPos$46 = -112					; size = 12
_relVec$47 = -100					; size = 12
_minB$48 = -88						; size = 12
_vec$49 = -76						; size = 12
_pos$50 = -64						; size = 12
_startAngle$51 = -52					; size = 12
_noseDir$52 = -40					; size = 12
_startPos$53 = -28					; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?CheckObjectCollision@AircraftClass@@QAEXXZ PROC	; AircraftClass::CheckObjectCollision
; _this$ = ecx

; 2653 : void AircraftClass::CheckObjectCollision (void) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CheckObjectCollision@AircraftClass@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 916				; 00000394H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2654 : 
; 2655 : 	SimObjectType *obj;
; 2656 : 	SimBaseClass *theObject;
; 2657 : 	SimObjectLocalData *objData;
; 2658 : 	FalconDamageMessage *message;
; 2659 : 	bool setOnObject = false; // JB carrier

	mov	BYTE PTR _setOnObject$[ebp], 0

; 2660 : 
; 2661 : 	// no detection on ground when not moving
; 2662 : 	//if (!af->IsSet(AirframeClass::OnObject) && // JB carrier
; 2663 : 	//	OnGround() && af->vt == 0.0f )
; 2664 : 	//{
; 2665 : 	//	return;
; 2666 : 	//}
; 2667 : 	//
; 2668 : 	//if (!af->IsSet(AirframeClass::OnObject) && // JB carrier
; 2669 : 	//	OnGround() && af->vcas <= 50.0f  && gCommsMgr && gCommsMgr->Online()) // JB 010107
; 2670 : 	//{
; 2671 : 	//	return; // JB 010107
; 2672 : 	//} //Cobra Test removal
; 2673 : 
; 2674 : 	// loop thru all targets
; 2675 :     for(obj = targetList; obj; obj = obj->next) 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+660]
	mov	DWORD PTR _obj$[ebp], ecx
	jmp	SHORT $LN94@CheckObjec
$LN93@CheckObjec:
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _obj$[ebp], eax
$LN94@CheckObjec:
	cmp	DWORD PTR _obj$[ebp], 0
	je	$LN92@CheckObjec

; 2676 :     {
; 2677 :       	objData = obj->localData;

	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _objData$[ebp], edx

; 2678 : 		   theObject = (SimBaseClass*)obj->BaseData();

	mov	ecx, DWORD PTR _obj$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR _theObject$[ebp], eax

; 2679 : 
; 2680 : 			if (theObject == NULL) {

	cmp	DWORD PTR _theObject$[ebp], 0
	jne	SHORT $LN91@CheckObjec

; 2681 : 				continue;

	jmp	SHORT $LN93@CheckObjec
$LN91@CheckObjec:

; 2682 : 			}
; 2683 : 
; 2684 : 			// RV - Biker - Don't collide with weapons belonging to us
; 2685 : 			if (theObject->IsWeapon() && ((SimWeaponClass*)theObject)->Parent() == this) {

	mov	eax, DWORD PTR _theObject$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	eax, DWORD PTR [edx+204]
	call	eax
	test	eax, eax
	je	SHORT $LN90@CheckObjec
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Parent@SimWeaponClass@@QAEPAVFalconEntity@@XZ ; SimWeaponClass::Parent
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN90@CheckObjec

; 2686 : 				continue;

	jmp	SHORT $LN93@CheckObjec
$LN90@CheckObjec:

; 2687 : 			}
; 2688 : 
; 2689 : 			if (F4IsBadReadPtr(theObject, sizeof(SimBaseClass)) || !theObject->IsSim() || (OnGround() && !theObject->OnGround())) {

	push	592					; 00000250H
	mov	ecx, DWORD PTR _theObject$[ebp]
	push	ecx
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN88@CheckObjec
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN88@CheckObjec
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	je	SHORT $LN89@CheckObjec
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	jne	SHORT $LN89@CheckObjec
$LN88@CheckObjec:

; 2690 : 					continue;

	jmp	$LN93@CheckObjec
$LN89@CheckObjec:

; 2691 : 				}
; 2692 : 
; 2693 : 			if (theObject->drawPointer == NULL) {

	mov	ecx, DWORD PTR _theObject$[ebp]
	cmp	DWORD PTR [ecx+332], 0
	jne	SHORT $LN87@CheckObjec

; 2694 : 				continue;

	jmp	$LN93@CheckObjec
$LN87@CheckObjec:

; 2695 : 			}
; 2696 : 
; 2697 : 			// RV - Biker - We cannot collide with something that far away
; 2698 : 			if (objData->range > 1.0f * NM_TO_FT) {

	mov	edx, DWORD PTR _objData$[ebp]
	movss	xmm0, DWORD PTR [edx+44]
	comiss	xmm0, DWORD PTR __real@45bde1b0
	jbe	SHORT $LN86@CheckObjec

; 2699 :          	continue;

	jmp	$LN93@CheckObjec
$LN86@CheckObjec:

; 2700 :       	}
; 2701 : 
; 2702 : 		// Stop now if the spheres don't overlap
; 2703 : 		// special case the tanker -- we want to be able to get in closer
; 2704 : 			// JB carrier
; 2705 : 			if (af->IsSet(AirframeClass::OnObject) || !OnGround()) {	

	push	1073741824				; 40000000H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN84@CheckObjec
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	jne	$LN85@CheckObjec
$LN84@CheckObjec:

; 2706 : 				if (IsSetFlag(I_AM_A_TANKER) || theObject->IsSetFlag(I_AM_A_TANKER)) {

	push	4096					; 00001000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	jne	SHORT $LN82@CheckObjec
	push	4096					; 00001000H
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	$LN83@CheckObjec
$LN82@CheckObjec:

; 2707 : 				//if ( objData->range >  0.1f * theObject->GetGfx()->Radius()){// + GetGfx()->Radius() ) // PJW
; 2708 : 				//	continue;
; 2709 : 				//}
; 2710 : 				if ( objData->range > 0.2F * theObject->drawPointer->Radius() + theObject->drawPointer->Radius() ){

	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	ecx, DWORD PTR [ecx+332]
	call	?Radius@DrawableObject@@QBEMXZ		; DrawableObject::Radius
	fstp	DWORD PTR tv2209[ebp]
	movss	xmm0, DWORD PTR tv2209[ebp]
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	mov	edx, DWORD PTR _theObject$[ebp]
	mov	ecx, DWORD PTR [edx+332]
	movss	DWORD PTR tv3154[ebp], xmm0
	call	?Radius@DrawableObject@@QBEMXZ		; DrawableObject::Radius
	fstp	DWORD PTR tv2215[ebp]
	movss	xmm0, DWORD PTR tv3154[ebp]
	addss	xmm0, DWORD PTR tv2215[ebp]
	mov	eax, DWORD PTR _objData$[ebp]
	movss	xmm1, DWORD PTR [eax+44]
	comiss	xmm1, xmm0
	jbe	SHORT $LN81@CheckObjec

; 2711 : 					continue;

	jmp	$LN93@CheckObjec
$LN81@CheckObjec:

; 2712 : 				}
; 2713 : 
; 2714 : 				Tpoint org, vec, pos;
; 2715 : 
; 2716 : 				org.x = XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _org$37[ebp]

; 2717 : 				org.y = YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _org$37[ebp+4]

; 2718 : 				org.z = ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _org$37[ebp+8]

; 2719 : 				vec.x = XDelta() - theObject->XDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv2227[ebp]
	movss	xmm0, DWORD PTR tv2227[ebp]
	mov	ecx, DWORD PTR _theObject$[ebp]
	movss	DWORD PTR tv3156[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv2231[ebp]
	movss	xmm0, DWORD PTR tv3156[ebp]
	subss	xmm0, DWORD PTR tv2231[ebp]
	movss	DWORD PTR _vec$38[ebp], xmm0

; 2720 : 				vec.y = YDelta() - theObject->YDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv2235[ebp]
	movss	xmm0, DWORD PTR tv2235[ebp]
	mov	ecx, DWORD PTR _theObject$[ebp]
	movss	DWORD PTR tv3158[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv2239[ebp]
	movss	xmm0, DWORD PTR tv3158[ebp]
	subss	xmm0, DWORD PTR tv2239[ebp]
	movss	DWORD PTR _vec$38[ebp+4], xmm0

; 2721 : 				vec.z = ZDelta() - theObject->ZDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv2243[ebp]
	movss	xmm0, DWORD PTR tv2243[ebp]
	mov	ecx, DWORD PTR _theObject$[ebp]
	movss	DWORD PTR tv3160[ebp], xmm0
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv2247[ebp]
	movss	xmm0, DWORD PTR tv3160[ebp]
	subss	xmm0, DWORD PTR tv2247[ebp]
	movss	DWORD PTR _vec$38[ebp+8], xmm0

; 2722 : 				// we're within the range of the object's radius.
; 2723 : 				// for ships, this may be a BIG radius -- longer than
; 2724 : 				// high.  Let's also check the bounding box
; 2725 : 				// scale the box so we might possibly miss it
; 2726 : 				if ( !theObject->drawPointer->GetRayHit( &org, &vec, &pos, 0.1f ) )

	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _pos$29[ebp]
	push	ecx
	lea	edx, DWORD PTR _vec$38[ebp]
	push	edx
	lea	eax, DWORD PTR _org$37[ebp]
	push	eax
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	edx, DWORD PTR [ecx+332]
	mov	eax, DWORD PTR _theObject$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+332]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	test	eax, eax
	jne	SHORT $LN80@CheckObjec

; 2727 : 					continue;

	jmp	$LN93@CheckObjec
$LN80@CheckObjec:

; 2728 : 				
; 2729 : 
; 2730 :  			} else

	jmp	$LN72@CheckObjec
$LN83@CheckObjec:

; 2731 : 			{
; 2732 : 				if ( objData->range > theObject->drawPointer->Radius() + drawPointer->Radius())

	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	ecx, DWORD PTR [ecx+332]
	call	?Radius@DrawableObject@@QBEMXZ		; DrawableObject::Radius
	fstp	DWORD PTR tv2261[ebp]
	movss	xmm0, DWORD PTR tv2261[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+332]
	movss	DWORD PTR tv3162[ebp], xmm0
	call	?Radius@DrawableObject@@QBEMXZ		; DrawableObject::Radius
	fstp	DWORD PTR tv2266[ebp]
	movss	xmm0, DWORD PTR tv3162[ebp]
	addss	xmm0, DWORD PTR tv2266[ebp]
	mov	eax, DWORD PTR _objData$[ebp]
	movss	xmm1, DWORD PTR [eax+44]
	comiss	xmm1, xmm0
	jbe	SHORT $LN77@CheckObjec

; 2733 : 					if (theObject->GetDomain() != DOMAIN_SEA || theObject->GetClass() != CLASS_VEHICLE || theObject->GetType() != TYPE_CAPITAL_SHIP || carrierInitTimer >= 30.0f)

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?GetDomain@SimBaseClass@@QBEEXZ		; SimBaseClass::GetDomain
	movzx	ecx, al
	cmp	ecx, 4
	jne	SHORT $LN76@CheckObjec
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?GetClass@SimBaseClass@@QBEEXZ		; SimBaseClass::GetClass
	movzx	edx, al
	cmp	edx, 7
	jne	SHORT $LN76@CheckObjec
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?GetType@SimBaseClass@@QBEEXZ		; SimBaseClass::GetType
	movzx	eax, al
	cmp	eax, 4
	jne	SHORT $LN76@CheckObjec
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+3564]
	comiss	xmm0, DWORD PTR __real@41f00000
	jb	SHORT $LN77@CheckObjec
$LN76@CheckObjec:

; 2734 : 				{
; 2735 : 					continue;

	jmp	$LN93@CheckObjec
$LN77@CheckObjec:

; 2736 : 				}
; 2737 : 				//else if ( theObject->OnGround() )
; 2738 : 				//{
; 2739 : 					Tpoint org, vec, pos;
; 2740 : 
; 2741 : 					org.x = XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _org$39[ebp]

; 2742 : 					org.y = YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _org$39[ebp+4]

; 2743 : 					if (af->IsSet(AirframeClass::OnObject)) // JB carrier

	push	1073741824				; 40000000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+932]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN75@CheckObjec

; 2744 : 						org.z = ZPos() + 5; // Make sure its detecting that we are on top // JB carrier

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv2283[ebp]
	movss	xmm0, DWORD PTR tv2283[ebp]
	addss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR _org$39[ebp+8], xmm0

; 2745 : 					else // JB carrier

	jmp	SHORT $LN74@CheckObjec
$LN75@CheckObjec:

; 2746 : 						org.z = ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _org$39[ebp+8]
$LN74@CheckObjec:

; 2747 : 					vec.x = XDelta() - theObject->XDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv2289[ebp]
	movss	xmm0, DWORD PTR tv2289[ebp]
	mov	ecx, DWORD PTR _theObject$[ebp]
	movss	DWORD PTR tv3164[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv2293[ebp]
	movss	xmm0, DWORD PTR tv3164[ebp]
	subss	xmm0, DWORD PTR tv2293[ebp]
	movss	DWORD PTR _vec$36[ebp], xmm0

; 2748 : 					vec.y = YDelta() - theObject->YDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv2297[ebp]
	movss	xmm0, DWORD PTR tv2297[ebp]
	mov	ecx, DWORD PTR _theObject$[ebp]
	movss	DWORD PTR tv3166[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv2301[ebp]
	movss	xmm0, DWORD PTR tv3166[ebp]
	subss	xmm0, DWORD PTR tv2301[ebp]
	movss	DWORD PTR _vec$36[ebp+4], xmm0

; 2749 : 					vec.z = ZDelta() - theObject->ZDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv2305[ebp]
	movss	xmm0, DWORD PTR tv2305[ebp]
	mov	ecx, DWORD PTR _theObject$[ebp]
	movss	DWORD PTR tv3232[ebp], xmm0
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv2309[ebp]
	movss	xmm0, DWORD PTR tv3232[ebp]
	subss	xmm0, DWORD PTR tv2309[ebp]
	movss	DWORD PTR _vec$36[ebp+8], xmm0

; 2750 : 					// we're within the range of the object's radius.
; 2751 : 					// for ships, this may be a BIG radius -- longer than
; 2752 : 					// high.  Let's also check the bounding box
; 2753 : 
; 2754 : 					if (!theObject->drawPointer->GetRayHit(&org, &vec, &pos, 1.0f)) {

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _pos$31[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec$36[ebp]
	push	ecx
	lea	edx, DWORD PTR _org$39[ebp]
	push	edx
	mov	eax, DWORD PTR _theObject$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	mov	edx, DWORD PTR _theObject$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+332]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	test	eax, eax
	jne	SHORT $LN72@CheckObjec

; 2755 : 						if (theObject->GetDomain() != DOMAIN_SEA || theObject->GetClass() != CLASS_VEHICLE || theObject->GetType() != TYPE_CAPITAL_SHIP || carrierInitTimer >= 30.0f)

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?GetDomain@SimBaseClass@@QBEEXZ		; SimBaseClass::GetDomain
	movzx	eax, al
	cmp	eax, 4
	jne	SHORT $LN71@CheckObjec
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?GetClass@SimBaseClass@@QBEEXZ		; SimBaseClass::GetClass
	movzx	ecx, al
	cmp	ecx, 7
	jne	SHORT $LN71@CheckObjec
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?GetType@SimBaseClass@@QBEEXZ		; SimBaseClass::GetType
	movzx	edx, al
	cmp	edx, 4
	jne	SHORT $LN71@CheckObjec
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+3564]
	comiss	xmm0, DWORD PTR __real@41f00000
	jb	SHORT $LN72@CheckObjec
$LN71@CheckObjec:

; 2756 : 						continue;

	jmp	$LN93@CheckObjec
$LN72@CheckObjec:

; 2757 : 					}
; 2758 : 					
; 2759 : 				//}
; 2760 : 			}
; 2761 : 		}
; 2762 : 		else // on ground

	jmp	SHORT $LN69@CheckObjec
$LN85@CheckObjec:

; 2763 : 		{
; 2764 : 			if ( objData->range > theObject->drawPointer->Radius()){// + drawPointer->Radius() ) { // PJW

	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	ecx, DWORD PTR [ecx+332]
	call	?Radius@DrawableObject@@QBEMXZ		; DrawableObject::Radius
	fstp	DWORD PTR tv2328[ebp]
	mov	edx, DWORD PTR _objData$[ebp]
	movss	xmm0, DWORD PTR [edx+44]
	comiss	xmm0, DWORD PTR tv2328[ebp]
	jbe	SHORT $LN69@CheckObjec

; 2765 : 					continue;

	jmp	$LN93@CheckObjec
$LN69@CheckObjec:

; 2766 : 			}
; 2767 : 		}
; 2768 : 
; 2769 : 		// Don't collide ejecting pilots with their aircraft
; 2770 : 		if (theObject->IsEject())

	mov	eax, DWORD PTR _theObject$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	eax, DWORD PTR [edx+188]
	call	eax
	test	eax, eax
	je	SHORT $LN67@CheckObjec

; 2771 : 		{
; 2772 : 			if (((EjectedPilotClass*)theObject)->GetParentAircraft() == this)

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?GetParentAircraft@EjectedPilotClass@@QAEPAVAircraftClass@@XZ ; EjectedPilotClass::GetParentAircraft
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN67@CheckObjec

; 2773 : 				continue;

	jmp	$LN93@CheckObjec
$LN67@CheckObjec:

; 2774 : 		}
; 2775 : 
; 2776 : 		//***********************************************
; 2777 : 		// If we get here, we've decided we've collided!
; 2778 : 		//***********************************************
; 2779 : 
; 2780 : 		// JB carrier start
; 2781 : 		if (IsAirplane() && theObject->GetDomain() == DOMAIN_SEA && theObject->GetClass() == CLASS_VEHICLE && theObject->GetType() == TYPE_CAPITAL_SHIP) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	je	$LN18@CheckObjec
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?GetDomain@SimBaseClass@@QBEEXZ		; SimBaseClass::GetDomain
	movzx	ecx, al
	cmp	ecx, 4
	jne	$LN18@CheckObjec
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?GetClass@SimBaseClass@@QBEEXZ		; SimBaseClass::GetClass
	movzx	edx, al
	cmp	edx, 7
	jne	$LN18@CheckObjec
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?GetType@SimBaseClass@@QBEEXZ		; SimBaseClass::GetType
	movzx	eax, al
	cmp	eax, 4
	jne	$LN18@CheckObjec

; 2782 : 			if (carrierInitTimer < 30.0f)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41f00000
	comiss	xmm0, DWORD PTR [ecx+3564]
	jbe	SHORT $LN65@CheckObjec

; 2783 : 				carrierInitTimer += SimLibMajorFrameTime;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+3564]
	addss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+3564], xmm0
$LN65@CheckObjec:

; 2784 : 
; 2785 : 			// RV - Biker - Carrier hitbox
; 2786 : 			Tpoint minB; Tpoint maxB;
; 2787 : 			((DrawableBSP*) theObject->drawPointer)->GetBoundingBox(&minB, &maxB);

	lea	ecx, DWORD PTR _maxB$30[ebp]
	push	ecx
	lea	edx, DWORD PTR _minB$48[ebp]
	push	edx
	mov	eax, DWORD PTR _theObject$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	call	?GetBoundingBox@DrawableBSP@@QAEXPAUTpoint@@0@Z ; DrawableBSP::GetBoundingBox

; 2788 : 			
; 2789 : 			// JB 010731 Hack for unfixed hitboxes.
; 2790 : 			//if (minB.z < -193.0f && minB.z > -194.0f)
; 2791 : 			//	minB.z = -72.0f;
; 2792 : 
; 2793 : 			// RV - Biker - Try to get the values from slot data
; 2794 : 			Tpoint startPos;
; 2795 : 			Tpoint tmpPos;
; 2796 : 			Tpoint startAngle;
; 2797 : 
; 2798 : 			startPos.x = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _startPos$53[ebp], xmm0

; 2799 : 			startPos.y = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _startPos$53[ebp+4], xmm0

; 2800 : 			startPos.z = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _startPos$53[ebp+8], xmm0

; 2801 : 
; 2802 : 			startAngle.x = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _startAngle$51[ebp], xmm0

; 2803 : 			startAngle.y = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _startAngle$51[ebp+4], xmm0

; 2804 : 			startAngle.z = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _startAngle$51[ebp+8], xmm0

; 2805 : 			
; 2806 : 			int numSlots = ((DrawableBSP*) theObject->drawPointer)->GetNumSlots();

	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	ecx, DWORD PTR [ecx+332]
	call	?GetNumSlots@DrawableBSP@@QAEHXZ	; DrawableBSP::GetNumSlots
	mov	DWORD PTR _numSlots$25[ebp], eax

; 2807 : 			int numDynamics = ((DrawableBSP*) theObject->drawPointer)->GetNumDynamicVertices();

	mov	edx, DWORD PTR _theObject$[ebp]
	mov	ecx, DWORD PTR [edx+332]
	call	?GetNumDynamicVertices@DrawableBSP@@QAEHXZ ; DrawableBSP::GetNumDynamicVertices
	mov	DWORD PTR _numDynamics$19[ebp], eax

; 2808 : 
; 2809 : 			// RV - Biker - Choose take-off slot randomly 
; 2810 : 			if (numSlots > 0 && takeoffSlot > numSlots - 1) {

	cmp	DWORD PTR _numSlots$25[ebp], 0
	jle	SHORT $LN64@CheckObjec
	mov	eax, DWORD PTR _numSlots$25[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+3568], eax
	jle	SHORT $LN64@CheckObjec

; 2811 : 				takeoffSlot = rand()%numSlots;

	call	_rand
	cdq
	idiv	DWORD PTR _numSlots$25[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3568], edx
$LN64@CheckObjec:

; 2812 : 			}
; 2813 : 
; 2814 : 			if (numSlots > 0) {

	cmp	DWORD PTR _numSlots$25[ebp], 0
	jle	SHORT $LN63@CheckObjec

; 2815 : 				((DrawableBSP*) theObject->drawPointer)->GetChildOffset(takeoffSlot, &tmpPos);

	lea	ecx, DWORD PTR _tmpPos$46[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+3568]
	push	eax
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	ecx, DWORD PTR [ecx+332]
	call	?GetChildOffset@DrawableBSP@@QAEXHPAUTpoint@@@Z ; DrawableBSP::GetChildOffset

; 2816 : 			}
; 2817 : 			else {

	jmp	SHORT $LN62@CheckObjec
$LN63@CheckObjec:

; 2818 : 				tmpPos.x = max(minB.x * 0.75f, -200.0f);

	movss	xmm0, DWORD PTR _minB$48[ebp]
	mulss	xmm0, DWORD PTR __real@3f400000
	comiss	xmm0, DWORD PTR __real@c3480000
	jbe	SHORT $LN97@CheckObjec
	movss	xmm0, DWORD PTR _minB$48[ebp]
	mulss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR tv517[ebp], xmm0
	jmp	SHORT $LN98@CheckObjec
$LN97@CheckObjec:
	movss	xmm0, DWORD PTR __real@c3480000
	movss	DWORD PTR tv517[ebp], xmm0
$LN98@CheckObjec:
	movss	xmm0, DWORD PTR tv517[ebp]
	movss	DWORD PTR _tmpPos$46[ebp], xmm0

; 2819 : 				tmpPos.y = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _tmpPos$46[ebp+4], xmm0

; 2820 : 				tmpPos.z = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _tmpPos$46[ebp+8], xmm0
$LN62@CheckObjec:

; 2821 : 			}
; 2822 : 
; 2823 : 			// RV - Biker - Read takeoff angle from dynamic data
; 2824 : 			if (numDynamics > 0) {

	cmp	DWORD PTR _numDynamics$19[ebp], 0
	jle	SHORT $LN61@CheckObjec

; 2825 : 				((DrawableBSP*) theObject->drawPointer)->GetDynamicCoords(min(takeoffSlot, numDynamics-1), &startAngle.x, &startAngle.y, &startAngle.z);

	mov	edx, DWORD PTR _numDynamics$19[ebp]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+3568], edx
	jge	SHORT $LN99@CheckObjec
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+3568]
	mov	DWORD PTR tv533[ebp], edx
	jmp	SHORT $LN100@CheckObjec
$LN99@CheckObjec:
	mov	eax, DWORD PTR _numDynamics$19[ebp]
	sub	eax, 1
	mov	DWORD PTR tv533[ebp], eax
$LN100@CheckObjec:
	lea	ecx, DWORD PTR _startAngle$51[ebp+8]
	push	ecx
	lea	edx, DWORD PTR _startAngle$51[ebp+4]
	push	edx
	lea	eax, DWORD PTR _startAngle$51[ebp]
	push	eax
	mov	ecx, DWORD PTR tv533[ebp]
	push	ecx
	mov	edx, DWORD PTR _theObject$[ebp]
	mov	ecx, DWORD PTR [edx+332]
	call	?GetDynamicCoords@DrawableBSP@@QAEXHPAM00@Z ; DrawableBSP::GetDynamicCoords
$LN61@CheckObjec:

; 2826 : 			}
; 2827 : 			
; 2828 : 			startAngle.x = max(min(startAngle.x, 45.0f), -45.0f) * DTR;

	movss	xmm0, DWORD PTR __real@42340000
	comiss	xmm0, DWORD PTR _startAngle$51[ebp]
	jbe	SHORT $LN101@CheckObjec
	movss	xmm0, DWORD PTR _startAngle$51[ebp]
	movss	DWORD PTR tv536[ebp], xmm0
	jmp	SHORT $LN102@CheckObjec
$LN101@CheckObjec:
	movss	xmm0, DWORD PTR __real@42340000
	movss	DWORD PTR tv536[ebp], xmm0
$LN102@CheckObjec:
	movss	xmm0, DWORD PTR tv536[ebp]
	comiss	xmm0, DWORD PTR __real@c2340000
	jbe	SHORT $LN105@CheckObjec
	movss	xmm0, DWORD PTR __real@42340000
	comiss	xmm0, DWORD PTR _startAngle$51[ebp]
	jbe	SHORT $LN103@CheckObjec
	movss	xmm0, DWORD PTR _startAngle$51[ebp]
	movss	DWORD PTR tv539[ebp], xmm0
	jmp	SHORT $LN104@CheckObjec
$LN103@CheckObjec:
	movss	xmm0, DWORD PTR __real@42340000
	movss	DWORD PTR tv539[ebp], xmm0
$LN104@CheckObjec:
	movss	xmm0, DWORD PTR tv539[ebp]
	movss	DWORD PTR tv540[ebp], xmm0
	jmp	SHORT $LN106@CheckObjec
$LN105@CheckObjec:
	movss	xmm0, DWORD PTR __real@c2340000
	movss	DWORD PTR tv540[ebp], xmm0
$LN106@CheckObjec:
	movss	xmm0, DWORD PTR tv540[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR _startAngle$51[ebp], xmm0

; 2829 : 
; 2830 : 			// RV - Biker - Rotate AC with carrier 
; 2831 : 			if (af->vt <= 1.0f && af->Thrust() <= 1.0f && (carrierInitTimer < 10.0f || theObject->YawDelta() != 0.0f)) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR [ecx+1120]
	jb	$LN60@CheckObjec
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+932]
	call	?Thrust@AirframeClass@@QAEMXZ		; AirframeClass::Thrust
	fstp	DWORD PTR tv2403[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv2403[ebp]
	jb	$LN60@CheckObjec
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	comiss	xmm0, DWORD PTR [eax+3564]
	ja	SHORT $LN59@CheckObjec
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?YawDelta@VuEntity@@QBEMXZ		; VuEntity::YawDelta
	fstp	DWORD PTR tv2410[ebp]
	movss	xmm0, DWORD PTR tv2410[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN60@CheckObjec
$LN59@CheckObjec:

; 2832 : 				af->sigma = theObject->Yaw() + startAngle.x;

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv2416[ebp]
	movss	xmm0, DWORD PTR tv2416[ebp]
	addss	xmm0, DWORD PTR _startAngle$51[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	DWORD PTR [edx+1176], xmm0

; 2833 : 				af->ResetOrientation();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?ResetOrientation@AirframeClass@@QAEXXZ	; AirframeClass::ResetOrientation
$LN60@CheckObjec:

; 2834 : 			}
; 2835 : 			
; 2836 : 			if (theObject->Yaw() >= 178.0f*DTR || theObject->Yaw() <= -178.0f*DTR) {

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv2422[ebp]
	movss	xmm0, DWORD PTR tv2422[ebp]
	comiss	xmm0, DWORD PTR __real@4046d3f0
	jae	SHORT $LN57@CheckObjec
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv2426[ebp]
	movss	xmm0, DWORD PTR __real@c046d3f0
	comiss	xmm0, DWORD PTR tv2426[ebp]
	jb	SHORT $LN58@CheckObjec
$LN57@CheckObjec:

; 2837 : 				startPos.x = -tmpPos.x;

	movss	xmm0, DWORD PTR _tmpPos$46[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _startPos$53[ebp], xmm0

; 2838 : 				startPos.y = -tmpPos.y;

	movss	xmm0, DWORD PTR _tmpPos$46[ebp+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _startPos$53[ebp+4], xmm0

; 2839 : 				startPos.z =  tmpPos.z;

	movss	xmm0, DWORD PTR _tmpPos$46[ebp+8]
	movss	DWORD PTR _startPos$53[ebp+8], xmm0

; 2840 : 			}
; 2841 : 			else {

	jmp	SHORT $LN56@CheckObjec
$LN58@CheckObjec:

; 2842 : 				MatrixMult(&((DrawableBSP*) theObject->drawPointer)->orientation, &tmpPos, &startPos );

	lea	ecx, DWORD PTR _startPos$53[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmpPos$46[ebp]
	push	edx
	mov	eax, DWORD PTR _theObject$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	add	ecx, 48					; 00000030H
	push	ecx
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 2843 : 				startPos.z = tmpPos.z;

	movss	xmm0, DWORD PTR _tmpPos$46[ebp+8]
	movss	DWORD PTR _startPos$53[ebp+8], xmm0
$LN56@CheckObjec:

; 2844 : 			}
; 2845 : 			
; 2846 : 			if (startPos.z != 0.0f && numSlots > 0)

	movss	xmm0, DWORD PTR _startPos$53[ebp+8]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN55@CheckObjec
	cmp	DWORD PTR _numSlots$25[ebp], 0
	jle	SHORT $LN55@CheckObjec

; 2847 : 				minB.z = startPos.z;

	movss	xmm0, DWORD PTR _startPos$53[ebp+8]
	movss	DWORD PTR _minB$48[ebp+8], xmm0
$LN55@CheckObjec:

; 2848 : 
; 2849 : 			float deltaX = abs(af->x - theObject->XPos());

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv2443[ebp]
	movss	xmm0, DWORD PTR [esi+1108]
	subss	xmm0, DWORD PTR tv2443[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	fstp	DWORD PTR _deltaX$20[ebp]

; 2850 : 			float deltaY = abs(af->y - theObject->YPos());

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+932]
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv2452[ebp]
	movss	xmm0, DWORD PTR [esi+1112]
	subss	xmm0, DWORD PTR tv2452[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	fstp	DWORD PTR _deltaY$22[ebp]

; 2851 : 
; 2852 : 			// RV - Biker - Move AC in correct position
; 2853 : 			if (af->vt <= 1.0f && af->Thrust() <= 1.0f && carrierInitTimer < 25.0f) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR [edx+1120]
	jb	$LN51@CheckObjec
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?Thrust@AirframeClass@@QAEMXZ		; AirframeClass::Thrust
	fstp	DWORD PTR tv2463[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv2463[ebp]
	jb	$LN51@CheckObjec
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41c80000
	comiss	xmm0, DWORD PTR [ecx+3564]
	jbe	$LN51@CheckObjec

; 2854 : 				if ((deltaX < abs(startPos.x) - 2.5f || deltaX > abs(startPos.x) + 2.5f)) {

	push	ecx
	movss	xmm0, DWORD PTR _startPos$53[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	fstp	DWORD PTR tv2472[ebp]
	movss	xmm0, DWORD PTR tv2472[ebp]
	subss	xmm0, DWORD PTR __real@40200000
	comiss	xmm0, DWORD PTR _deltaX$20[ebp]
	ja	SHORT $LN52@CheckObjec
	push	ecx
	movss	xmm0, DWORD PTR _startPos$53[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	fstp	DWORD PTR tv2478[ebp]
	movss	xmm0, DWORD PTR tv2478[ebp]
	addss	xmm0, DWORD PTR __real@40200000
	movss	xmm1, DWORD PTR _deltaX$20[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN53@CheckObjec
$LN52@CheckObjec:

; 2855 : 					af->x = theObject->XPos() + startPos.x;

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv2483[ebp]
	movss	xmm0, DWORD PTR tv2483[ebp]
	addss	xmm0, DWORD PTR _startPos$53[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	DWORD PTR [eax+1108], xmm0
$LN53@CheckObjec:

; 2856 : 				}
; 2857 : 			
; 2858 : 				if ((deltaY < abs(startPos.y) - 2.5f || deltaY > abs(startPos.y) + 2.5f)) {

	push	ecx
	movss	xmm0, DWORD PTR _startPos$53[ebp+4]
	movss	DWORD PTR [esp], xmm0
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	fstp	DWORD PTR tv2490[ebp]
	movss	xmm0, DWORD PTR tv2490[ebp]
	subss	xmm0, DWORD PTR __real@40200000
	comiss	xmm0, DWORD PTR _deltaY$22[ebp]
	ja	SHORT $LN50@CheckObjec
	push	ecx
	movss	xmm0, DWORD PTR _startPos$53[ebp+4]
	movss	DWORD PTR [esp], xmm0
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	fstp	DWORD PTR tv2496[ebp]
	movss	xmm0, DWORD PTR tv2496[ebp]
	addss	xmm0, DWORD PTR __real@40200000
	movss	xmm1, DWORD PTR _deltaY$22[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN51@CheckObjec
$LN50@CheckObjec:

; 2859 : 					af->y = theObject->YPos() + startPos.y;

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv2501[ebp]
	movss	xmm0, DWORD PTR tv2501[ebp]
	addss	xmm0, DWORD PTR _startPos$53[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	DWORD PTR [edx+1112], xmm0
$LN51@CheckObjec:

; 2860 : 				}
; 2861 : 			}
; 2862 : 
; 2863 : 			// RV - Biker - Check if AC is in correct position otherwise reject "CTRL K"
; 2864 : 			bool onCatPosition = false;

	mov	BYTE PTR _onCatPosition$26[ebp], 0

; 2865 : 
; 2866 : 			if (deltaX >= abs(startPos.x) - 5.0f &&
; 2867 : 				deltaX <= abs(startPos.x) + 5.0f &&
; 2868 : 				deltaY >= abs(startPos.y) - 5.0f &&
; 2869 : 				deltaY <= abs(startPos.y) + 5.0f &&
; 2870 : 				abs(Yaw() - startAngle.x - theObject->Yaw()) <= 5.0f * DTR)

	push	ecx
	movss	xmm0, DWORD PTR _startPos$53[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	fstp	DWORD PTR tv2508[ebp]
	movss	xmm0, DWORD PTR tv2508[ebp]
	subss	xmm0, DWORD PTR __real@40a00000
	movss	xmm1, DWORD PTR _deltaX$20[ebp]
	comiss	xmm1, xmm0
	jb	$LN49@CheckObjec
	push	ecx
	movss	xmm0, DWORD PTR _startPos$53[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	fstp	DWORD PTR tv2515[ebp]
	movss	xmm0, DWORD PTR tv2515[ebp]
	addss	xmm0, DWORD PTR __real@40a00000
	comiss	xmm0, DWORD PTR _deltaX$20[ebp]
	jb	$LN49@CheckObjec
	push	ecx
	movss	xmm0, DWORD PTR _startPos$53[ebp+4]
	movss	DWORD PTR [esp], xmm0
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	fstp	DWORD PTR tv2521[ebp]
	movss	xmm0, DWORD PTR tv2521[ebp]
	subss	xmm0, DWORD PTR __real@40a00000
	movss	xmm1, DWORD PTR _deltaY$22[ebp]
	comiss	xmm1, xmm0
	jb	$LN49@CheckObjec
	push	ecx
	movss	xmm0, DWORD PTR _startPos$53[ebp+4]
	movss	DWORD PTR [esp], xmm0
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	fstp	DWORD PTR tv2528[ebp]
	movss	xmm0, DWORD PTR tv2528[ebp]
	addss	xmm0, DWORD PTR __real@40a00000
	comiss	xmm0, DWORD PTR _deltaY$22[ebp]
	jb	SHORT $LN49@CheckObjec
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv2532[ebp]
	movss	xmm0, DWORD PTR tv2532[ebp]
	subss	xmm0, DWORD PTR _startAngle$51[ebp]
	mov	ecx, DWORD PTR _theObject$[ebp]
	movss	DWORD PTR tv3234[ebp], xmm0
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv2536[ebp]
	movss	xmm0, DWORD PTR tv3234[ebp]
	subss	xmm0, DWORD PTR tv2536[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	fstp	DWORD PTR tv2541[ebp]
	movss	xmm0, DWORD PTR __real@3db2b8c1
	comiss	xmm0, DWORD PTR tv2541[ebp]
	jb	SHORT $LN49@CheckObjec

; 2871 : 			{
; 2872 : 				onCatPosition = true;

	mov	BYTE PTR _onCatPosition$26[ebp], 1
	jmp	SHORT $LN47@CheckObjec
$LN49@CheckObjec:

; 2873 : 			}
; 2874 : 			else if (numSlots > 0 && af->vt <= 1.0f) {

	cmp	DWORD PTR _numSlots$25[ebp], 0
	jle	SHORT $LN47@CheckObjec
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR [ecx+1120]
	jb	SHORT $LN47@CheckObjec

; 2875 : 				af->ClearFlag(AirframeClass::Hook);

	push	-2147483648				; 80000000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+932]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag
$LN47@CheckObjec:

; 2876 : 			}
; 2877 : 
; 2878 : 			// RV - Biker - Deploy catapult deflector
; 2879 : 			if (numSlots > 0) {

	cmp	DWORD PTR _numSlots$25[ebp], 0
	jle	$LN35@CheckObjec

; 2880 : 				float changeval;
; 2881 : 				float cdof = ((DrawableBSP*) theObject->drawPointer)->GetDOFangle(takeoffSlot+10);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3568]
	add	ecx, 10					; 0000000aH
	push	ecx
	mov	edx, DWORD PTR _theObject$[ebp]
	mov	ecx, DWORD PTR [edx+332]
	call	?GetDOFangle@DrawableBSP@@QAEMH@Z	; DrawableBSP::GetDOFangle
	fstp	DWORD PTR _cdof$28[ebp]

; 2882 : 				
; 2883 : 				if(af->IsSet(AirframeClass::Hook) && onCatPosition == true) {

	push	-2147483648				; 80000000H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN45@CheckObjec
	movzx	ecx, BYTE PTR _onCatPosition$26[ebp]
	cmp	ecx, 1
	jne	$LN45@CheckObjec

; 2884 : 					if (cdof < 55.0f * DTR) {

	movss	xmm0, DWORD PTR __real@3f75be09
	comiss	xmm0, DWORD PTR _cdof$28[ebp]
	jbe	SHORT $LN44@CheckObjec

; 2885 : 						changeval = 30.0f * DTR * SimLibMajorFrameTime;

	movss	xmm0, DWORD PTR __real@3f060a91
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	movss	DWORD PTR _changeval$24[ebp], xmm0

; 2886 : 					}
; 2887 : 					else {

	jmp	SHORT $LN43@CheckObjec
$LN44@CheckObjec:

; 2888 : 						changeval = 10.0f * DTR * SimLibMajorFrameTime;

	movss	xmm0, DWORD PTR __real@3e32b8c1
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	movss	DWORD PTR _changeval$24[ebp], xmm0
$LN43@CheckObjec:

; 2889 : 					}
; 2890 : 					if (cdof < 65.0f * DTR) {

	movss	xmm0, DWORD PTR __real@3f91361d
	comiss	xmm0, DWORD PTR _cdof$28[ebp]
	jbe	SHORT $LN42@CheckObjec

; 2891 : 						cdof += changeval;

	movss	xmm0, DWORD PTR _cdof$28[ebp]
	addss	xmm0, DWORD PTR _changeval$24[ebp]
	movss	DWORD PTR _cdof$28[ebp], xmm0

; 2892 : 						if (cdof >= 65.0f * DTR) {

	movss	xmm0, DWORD PTR _cdof$28[ebp]
	comiss	xmm0, DWORD PTR __real@3f91361d
	jb	SHORT $LN41@CheckObjec

; 2893 : 							cdof = 65.0f * DTR;

	movss	xmm0, DWORD PTR __real@3f91361d
	movss	DWORD PTR _cdof$28[ebp], xmm0
$LN41@CheckObjec:

; 2894 : 						}
; 2895 : 						((DrawableBSP*) theObject->drawPointer)->SetDOFangle(takeoffSlot+10, cdof);

	push	ecx
	movss	xmm0, DWORD PTR _cdof$28[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+3568]
	add	eax, 10					; 0000000aH
	push	eax
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	ecx, DWORD PTR [ecx+332]
	call	?SetDOFangle@DrawableBSP@@QAEXHM@Z	; DrawableBSP::SetDOFangle
$LN42@CheckObjec:

; 2896 : 					}
; 2897 : 
; 2898 : 					//RV - I-Hawk - Add Cat steam effects when trapped   
; 2899 : 
; 2900 : 					Tpoint pos, randPos1, randPos2, randPos3, randPos4, noseGear, vec;
; 2901 : 
; 2902 : 					noseGear.x = af->GetAeroData(AeroDataSet::NosGearX) + XPos();

	push	14					; 0000000eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+932]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR tv2567[ebp]
	movss	xmm0, DWORD PTR tv2567[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv3236[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv2571[ebp]
	movss	xmm0, DWORD PTR tv3236[ebp]
	addss	xmm0, DWORD PTR tv2571[ebp]
	movss	DWORD PTR _noseGear$32[ebp], xmm0

; 2903 : 					noseGear.y = af->GetAeroData(AeroDataSet::NosGearY) + YPos(); 

	push	15					; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR tv2576[ebp]
	movss	xmm0, DWORD PTR tv2576[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv3238[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv2580[ebp]
	movss	xmm0, DWORD PTR tv3238[ebp]
	addss	xmm0, DWORD PTR tv2580[ebp]
	movss	DWORD PTR _noseGear$32[ebp+4], xmm0

; 2904 : 					noseGear.z = af->GetAeroData(AeroDataSet::NosGearZ) - 5.0f + ZPos();

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR tv2585[ebp]
	movss	xmm0, DWORD PTR tv2585[ebp]
	subss	xmm0, DWORD PTR __real@40a00000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv3240[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv2589[ebp]
	movss	xmm0, DWORD PTR tv3240[ebp]
	addss	xmm0, DWORD PTR tv2589[ebp]
	movss	DWORD PTR _noseGear$32[ebp+8], xmm0

; 2905 : 
; 2906 : 					pos.x = theObject->XPos() + startPos.x;

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv2593[ebp]
	movss	xmm0, DWORD PTR tv2593[ebp]
	addss	xmm0, DWORD PTR _startPos$53[ebp]
	movss	DWORD PTR _pos$50[ebp], xmm0

; 2907 : 					pos.y = theObject->YPos() + startPos.y;

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv2597[ebp]
	movss	xmm0, DWORD PTR tv2597[ebp]
	addss	xmm0, DWORD PTR _startPos$53[ebp+4]
	movss	DWORD PTR _pos$50[ebp+4], xmm0

; 2908 : 					pos.z = theObject->ZPos() + startPos.z;

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv2601[ebp]
	movss	xmm0, DWORD PTR tv2601[ebp]
	addss	xmm0, DWORD PTR _startPos$53[ebp+8]
	movss	DWORD PTR _pos$50[ebp+8], xmm0

; 2909 : 
; 2910 : 					randPos1.x = pos.x + 120.0f * PRANDFloat();

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv2605[ebp]
	movss	xmm0, DWORD PTR tv2605[ebp]
	mulss	xmm0, DWORD PTR __real@42f00000
	addss	xmm0, DWORD PTR _pos$50[ebp]
	movss	DWORD PTR _randPos1$35[ebp], xmm0

; 2911 : 					randPos1.y = pos.y + 35.0f * PRANDFloat();

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv2611[ebp]
	movss	xmm0, DWORD PTR tv2611[ebp]
	mulss	xmm0, DWORD PTR __real@420c0000
	addss	xmm0, DWORD PTR _pos$50[ebp+4]
	movss	DWORD PTR _randPos1$35[ebp+4], xmm0

; 2912 : 
; 2913 : 					randPos2.x = pos.x + 85.0f * PRANDFloat();

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv2617[ebp]
	movss	xmm0, DWORD PTR tv2617[ebp]
	mulss	xmm0, DWORD PTR __real@42aa0000
	addss	xmm0, DWORD PTR _pos$50[ebp]
	movss	DWORD PTR _randPos2$40[ebp], xmm0

; 2914 : 					randPos2.y = pos.y - 35.0f * PRANDFloat();

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv2623[ebp]
	movss	xmm0, DWORD PTR tv2623[ebp]
	mulss	xmm0, DWORD PTR __real@420c0000
	movss	xmm1, DWORD PTR _pos$50[ebp+4]
	subss	xmm1, xmm0
	movss	DWORD PTR _randPos2$40[ebp+4], xmm1

; 2915 : 
; 2916 : 					randPos3.x = pos.x - 45.0f * PRANDFloat();

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv2629[ebp]
	movss	xmm0, DWORD PTR tv2629[ebp]
	mulss	xmm0, DWORD PTR __real@42340000
	movss	xmm1, DWORD PTR _pos$50[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _randPos3$42[ebp], xmm1

; 2917 : 					randPos3.y = pos.y + 25.0f * PRANDFloat();

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv2635[ebp]
	movss	xmm0, DWORD PTR tv2635[ebp]
	mulss	xmm0, DWORD PTR __real@41c80000
	addss	xmm0, DWORD PTR _pos$50[ebp+4]
	movss	DWORD PTR _randPos3$42[ebp+4], xmm0

; 2918 : 
; 2919 : 					randPos4.x = pos.x - 60.0f * PRANDFloat();

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv2641[ebp]
	movss	xmm0, DWORD PTR tv2641[ebp]
	mulss	xmm0, DWORD PTR __real@42700000
	movss	xmm1, DWORD PTR _pos$50[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _randPos4$41[ebp], xmm1

; 2920 : 					randPos4.y = pos.y + 60.0f * PRANDFloat();

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv2647[ebp]
	movss	xmm0, DWORD PTR tv2647[ebp]
	mulss	xmm0, DWORD PTR __real@42700000
	addss	xmm0, DWORD PTR _pos$50[ebp+4]
	movss	DWORD PTR _randPos4$41[ebp+4], xmm0

; 2921 : 
; 2922 : 					randPos1.z = randPos2.z = randPos3.z = randPos4.z = pos.z;

	movss	xmm0, DWORD PTR _pos$50[ebp+8]
	movss	DWORD PTR _randPos4$41[ebp+8], xmm0
	movss	xmm0, DWORD PTR _randPos4$41[ebp+8]
	movss	DWORD PTR _randPos3$42[ebp+8], xmm0
	movss	xmm0, DWORD PTR _randPos3$42[ebp+8]
	movss	DWORD PTR _randPos2$40[ebp+8], xmm0
	movss	xmm0, DWORD PTR _randPos2$40[ebp+8]
	movss	DWORD PTR _randPos1$35[ebp+8], xmm0

; 2923 : 
; 2924 : 					//Randomize the vector a bit... Yaw pushes the smoke away more
; 2925 : 					//quickly, Delta make it hover a bit longer over the deck...
; 2926 : 					if ( (rand() & 3) != 3 )

	call	_rand
	and	eax, 3
	cmp	eax, 3
	je	SHORT $LN40@CheckObjec

; 2927 : 					{
; 2928 :                         vec.x = theObject->Yaw();

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR _vec$49[ebp]

; 2929 :                         vec.y = theObject->Yaw();

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR _vec$49[ebp+4]

; 2930 : 					}
; 2931 : 
; 2932 : 					else

	jmp	SHORT $LN39@CheckObjec
$LN40@CheckObjec:

; 2933 : 					{
; 2934 :                         vec.x = theObject->XDelta();

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR _vec$49[ebp]

; 2935 : 						vec.y = theObject->YDelta();

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR _vec$49[ebp+4]
$LN39@CheckObjec:

; 2936 : 					}
; 2937 : 					
; 2938 : 					vec.z = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vec$49[ebp+8], xmm0

; 2939 : 
; 2940 : 					//The main steam SFX 
; 2941 : 					DrawableParticleSys::PS_AddParticleEx(
; 2942 : 								(SFX_CAT_STEAM + 1), &pos, &vec);

	lea	edx, DWORD PTR _vec$49[ebp]
	push	edx
	lea	eax, DWORD PTR _pos$50[ebp]
	push	eax
	push	89					; 00000059H
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH

; 2943 : 
; 2944 : 					//Some random deck "leaks" steam SFX 
; 2945 : 					DrawableParticleSys::PS_AddParticleEx(
; 2946 : 								(SFX_CAT_RANDOM_STEAM + 1), &randPos1, &vec);

	lea	ecx, DWORD PTR _vec$49[ebp]
	push	ecx
	lea	edx, DWORD PTR _randPos1$35[ebp]
	push	edx
	push	88					; 00000058H
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH

; 2947 : 
; 2948 : 					DrawableParticleSys::PS_AddParticleEx(
; 2949 : 								(SFX_CAT_RANDOM_STEAM + 1), &randPos2, &vec);

	lea	eax, DWORD PTR _vec$49[ebp]
	push	eax
	lea	ecx, DWORD PTR _randPos2$40[ebp]
	push	ecx
	push	88					; 00000058H
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH

; 2950 : 
; 2951 : 					DrawableParticleSys::PS_AddParticleEx(
; 2952 : 								(SFX_CAT_RANDOM_STEAM + 1), &randPos3, &vec);

	lea	edx, DWORD PTR _vec$49[ebp]
	push	edx
	lea	eax, DWORD PTR _randPos3$42[ebp]
	push	eax
	push	88					; 00000058H
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH

; 2953 : 
; 2954 : 					DrawableParticleSys::PS_AddParticleEx(
; 2955 : 								(SFX_CAT_RANDOM_STEAM + 1), &randPos4, &vec);

	lea	ecx, DWORD PTR _vec$49[ebp]
	push	ecx
	lea	edx, DWORD PTR _randPos4$41[ebp]
	push	edx
	push	88					; 00000058H
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH

; 2956 : 				}
; 2957 : 				else {

	jmp	$LN35@CheckObjec
$LN45@CheckObjec:

; 2958 : 					if (cdof > 55.0f * DTR) {

	movss	xmm0, DWORD PTR _cdof$28[ebp]
	comiss	xmm0, DWORD PTR __real@3f75be09
	jbe	SHORT $LN37@CheckObjec

; 2959 : 						changeval = 10.0f * DTR * SimLibMajorFrameTime;

	movss	xmm0, DWORD PTR __real@3e32b8c1
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	movss	DWORD PTR _changeval$24[ebp], xmm0

; 2960 : 					}
; 2961 : 					else {

	jmp	SHORT $LN36@CheckObjec
$LN37@CheckObjec:

; 2962 : 						changeval = 120.0f * DTR * SimLibMajorFrameTime;

	movss	xmm0, DWORD PTR __real@40060a91
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	movss	DWORD PTR _changeval$24[ebp], xmm0
$LN36@CheckObjec:

; 2963 : 					}
; 2964 : 					if (cdof > 0.0f * DTR) {

	movss	xmm0, DWORD PTR _cdof$28[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN35@CheckObjec

; 2965 : 						cdof -= changeval;

	movss	xmm0, DWORD PTR _cdof$28[ebp]
	subss	xmm0, DWORD PTR _changeval$24[ebp]
	movss	DWORD PTR _cdof$28[ebp], xmm0

; 2966 : 						if (cdof <= 0.0f * DTR) {

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _cdof$28[ebp]
	jb	SHORT $LN34@CheckObjec

; 2967 : 							cdof = 0.0f * DTR;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _cdof$28[ebp], xmm0
$LN34@CheckObjec:

; 2968 : 						}
; 2969 : 						((DrawableBSP*) theObject->drawPointer)->SetDOFangle(takeoffSlot+10, cdof);

	push	ecx
	movss	xmm0, DWORD PTR _cdof$28[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3568]
	add	ecx, 10					; 0000000aH
	push	ecx
	mov	edx, DWORD PTR _theObject$[ebp]
	mov	ecx, DWORD PTR [edx+332]
	call	?SetDOFangle@DrawableBSP@@QAEXHM@Z	; DrawableBSP::SetDOFangle
$LN35@CheckObjec:

; 2970 : 					}
; 2971 : 				}
; 2972 : 			}
; 2973 : 
; 2974 : 			// RV - Biker - Give nose gear offset when carrier takeoff
; 2975 : 			float gearOffset = min(5.0f, af->GetAeroData(AeroDataSet::NosGearZ)-5.0f);

	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR tv2689[ebp]
	movss	xmm0, DWORD PTR tv2689[ebp]
	subss	xmm0, DWORD PTR __real@40a00000
	comiss	xmm0, DWORD PTR __real@40a00000
	jbe	SHORT $LN107@CheckObjec
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR tv949[ebp], xmm0
	jmp	SHORT $LN108@CheckObjec
$LN107@CheckObjec:
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR tv2695[ebp]
	movss	xmm0, DWORD PTR tv2695[ebp]
	subss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR tv949[ebp], xmm0
$LN108@CheckObjec:
	movss	xmm0, DWORD PTR tv949[ebp]
	movss	DWORD PTR _gearOffset$16[ebp], xmm0

; 2976 : 			
; 2977 : 			minB.z = minB.z - gearOffset;

	movss	xmm0, DWORD PTR _minB$48[ebp+8]
	subss	xmm0, DWORD PTR _gearOffset$16[ebp]
	movss	DWORD PTR _minB$48[ebp+8], xmm0

; 2978 : 
; 2979 : 			// RV - I-Hawk - Add AC launch smoke effect when doing the take-off run 
; 2980 : 			Tpoint noseGear, PSvec;
; 2981 : 
; 2982 : 			noseGear.x = af->GetAeroData(AeroDataSet::NosGearX) + XPos();

	push	14					; 0000000eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+932]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR tv2702[ebp]
	movss	xmm0, DWORD PTR tv2702[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv3242[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv2706[ebp]
	movss	xmm0, DWORD PTR tv3242[ebp]
	addss	xmm0, DWORD PTR tv2706[ebp]
	movss	DWORD PTR _noseGear$33[ebp], xmm0

; 2983 : 			noseGear.y = af->GetAeroData(AeroDataSet::NosGearY) + YPos(); 

	push	15					; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR tv2711[ebp]
	movss	xmm0, DWORD PTR tv2711[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv3244[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv2715[ebp]
	movss	xmm0, DWORD PTR tv3244[ebp]
	addss	xmm0, DWORD PTR tv2715[ebp]
	movss	DWORD PTR _noseGear$33[ebp+4], xmm0

; 2984 : 			noseGear.z = af->GetAeroData(AeroDataSet::NosGearZ) - gearOffset + ZPos();

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR tv2720[ebp]
	movss	xmm0, DWORD PTR tv2720[ebp]
	subss	xmm0, DWORD PTR _gearOffset$16[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv3246[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv2724[ebp]
	movss	xmm0, DWORD PTR tv3246[ebp]
	addss	xmm0, DWORD PTR tv2724[ebp]
	movss	DWORD PTR _noseGear$33[ebp+8], xmm0

; 2985 : 
; 2986 : 			PSvec.x = (theObject->XDelta());

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR _PSvec$34[ebp]

; 2987 : 			PSvec.y = (theObject->YDelta());

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR _PSvec$34[ebp+4]

; 2988 : 			PSvec.z = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PSvec$34[ebp+8], xmm0

; 2989 : 
; 2990 : 			if ( af->vcas > 40.0f && af->vcas < 180.0f && af->IsSet(AirframeClass::OnObject) && !(af->IsSet(AirframeClass::Hook)) )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR [eax+1124]
	comiss	xmm0, DWORD PTR __real@42200000
	jbe	SHORT $LN33@CheckObjec
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR __real@43340000
	comiss	xmm0, DWORD PTR [edx+1124]
	jbe	SHORT $LN33@CheckObjec
	push	1073741824				; 40000000H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN33@CheckObjec
	push	-2147483648				; 80000000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN33@CheckObjec

; 2991 : 			{
; 2992 :                 DrawableParticleSys::PS_AddParticleEx(
; 2993 : 								(SFX_CAT_LAUNCH + 1), &noseGear, &PSvec);

	lea	edx, DWORD PTR _PSvec$34[ebp]
	push	edx
	lea	eax, DWORD PTR _noseGear$33[ebp]
	push	eax
	push	64					; 00000040H
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
$LN33@CheckObjec:

; 2994 : 			}
; 2995 : 
; 2996 : 			//if(/*(ZPos() <= minB.z * /*.96*/.90f && ZPos() > minB.z * /*1.02*/1.1f || */(ZPos() > -g_fCarrierStartTolerance && af->vcas < 10.0f /*.01*/))//Cobra aircraft coming in at 6.5 knots and thus failing this check
; 2997 : 			if ((ZPos() <= minB.z * 0.96f && ZPos() > minB.z - 0.5f) || (ZPos() > -g_fCarrierStartTolerance && af->vcas < 10.0f)) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv2745[ebp]
	movss	xmm0, DWORD PTR _minB$48[ebp+8]
	mulss	xmm0, DWORD PTR __real@3f75c28f
	comiss	xmm0, DWORD PTR tv2745[ebp]
	jb	SHORT $LN30@CheckObjec
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv2750[ebp]
	movss	xmm0, DWORD PTR tv2750[ebp]
	movss	xmm1, DWORD PTR _minB$48[ebp+8]
	subss	xmm1, DWORD PTR __real@3f000000
	comiss	xmm0, xmm1
	ja	SHORT $LN31@CheckObjec
$LN30@CheckObjec:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv2755[ebp]
	movss	xmm0, DWORD PTR tv2755[ebp]
	movss	xmm1, DWORD PTR ?g_fCarrierStartTolerance@@3MA
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, xmm1
	jbe	$LN32@CheckObjec
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR __real@41200000
	comiss	xmm0, DWORD PTR [edx+1124]
	jbe	$LN32@CheckObjec
$LN31@CheckObjec:

; 2998 : 				// the eagle has landed
; 2999 : 				attachedEntity = theObject;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	DWORD PTR [eax+1828], ecx

; 3000 : 				af->SetFlag(AirframeClass::OnObject);

	push	1073741824				; 40000000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+932]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag

; 3001 : 				af->SetFlag(AirframeClass::OverRunway);

	push	8388608					; 00800000H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag

; 3002 : 				setOnObject = true;

	mov	BYTE PTR _setOnObject$[ebp], 1

; 3003 : 				
; 3004 : 				// Set our anchor so that when we're moving slowly we can accumulate our position in high precision
; 3005 : 				// RV - Biker - Do the offset if desired
; 3006 : 				if (carrierStartPosEngaged == 0 && abs(theObject->YawDelta()) < 0.25f && carrierInitTimer > 1.0f) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+3560], 0
	jne	$LN29@CheckObjec
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?YawDelta@VuEntity@@QBEMXZ		; VuEntity::YawDelta
	push	ecx
	fstp	DWORD PTR [esp]
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	fstp	DWORD PTR tv2771[ebp]
	movss	xmm0, DWORD PTR __real@3e800000
	comiss	xmm0, DWORD PTR tv2771[ebp]
	jbe	$LN29@CheckObjec
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+3564]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN29@CheckObjec

; 3007 : 					carrierStartPosEngaged = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3560], 1

; 3008 : 					af->x = af->x + startPos.x;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR [edx+1108]
	addss	xmm0, DWORD PTR _startPos$53[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	DWORD PTR [ecx+1108], xmm0

; 3009 : 					af->y = af->y + startPos.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR [eax+1112]
	addss	xmm0, DWORD PTR _startPos$53[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	DWORD PTR [edx+1112], xmm0
$LN29@CheckObjec:

; 3010 : 				}
; 3011 : 				af->groundAnchorX = af->x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [ecx+1108]
	mov	DWORD PTR [eax+112], ecx

; 3012 : 				af->groundAnchorY = af->y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [eax+1112]
	mov	DWORD PTR [edx+116], eax

; 3013 : 				af->groundDeltaX = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+120], xmm0

; 3014 : 				af->groundDeltaY = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+124], xmm0

; 3015 : 				af->platform->SetFlag( ON_GROUND );

	push	128					; 00000080H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+1088]
	call	?SetFlag@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetFlag

; 3016 : 				
; 3017 : 				float gndGmma, relMu;
; 3018 : 				
; 3019 : 				af->CalculateGroundPlane(&gndGmma, &relMu);

	lea	ecx, DWORD PTR _relMu$11[ebp]
	push	ecx
	lea	edx, DWORD PTR _gndGmma$10[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?CalculateGroundPlane@AirframeClass@@ABEXPAM0@Z ; AirframeClass::CalculateGroundPlane

; 3020 : 				
; 3021 : 				af->stallMode = AirframeClass::None;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	DWORD PTR [edx+1248], 0

; 3022 : 				af->slice = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1308], xmm0

; 3023 : 				af->pitch = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+1312], xmm0

; 3024 : 
; 3025 : 				if(af->IsSet(af->GearBroken) || af->gearPos <= 0.1F) {

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN27@CheckObjec
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR __real@3dcccccd
	comiss	xmm0, DWORD PTR [eax+1552]
	jb	$LN25@CheckObjec
$LN27@CheckObjec:

; 3026 : 					if (af->platform->DBrain() && !af->platform->IsSetFalcFlag(FEC_INVULNERABLE)) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	ecx, DWORD PTR [edx+1088]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	test	eax, eax
	je	$LN25@CheckObjec
	push	32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	ecx, DWORD PTR [ecx+1088]
	call	?IsSetFalcFlag@FalconEntity@@QAEHH@Z	; FalconEntity::IsSetFalcFlag
	test	eax, eax
	jne	$LN25@CheckObjec

; 3027 : 						af->platform->DBrain()->SetATCFlag(DigitalBrain::Landed);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+1088]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, eax
	call	?SetATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::SetATCFlag

; 3028 : 						af->platform->DBrain()->SetATCStatus(lCrashed);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	ecx, DWORD PTR [edx+1088]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, eax
	call	?SetATCStatus@DigitalBrain@@QAEXW4AtcStatusEnum@@@Z ; DigitalBrain::SetATCStatus

; 3029 : 						// KCK NOTE:: Don't set timer for players
; 3030 : 						if(af->platform != SimDriver.GetPlayerEntity())

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+932]
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	cmp	DWORD PTR [esi+1088], eax
	je	SHORT $LN25@CheckObjec

; 3031 : 							af->platform->DBrain()->SetWaitTimer(SimLibElapsedTime + 1 * CampaignMinutes);

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 60000				; 0000ea60H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+1088]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, eax
	call	?SetWaitTimer@DigitalBrain@@QAEXK@Z	; DigitalBrain::SetWaitTimer
$LN25@CheckObjec:

; 3032 : 					}
; 3033 : 				}
; 3034 : 
; 3035 : 				Tpoint velocity;
; 3036 : 				Tpoint noseDir;
; 3037 : 				float impactAngle, noseAngle;
; 3038 : 				float tmp;
; 3039 : 
; 3040 : 				float vt = GetVt();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR _vt$23[ebp]

; 3041 : 				velocity.x = af->xdot/vt;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR [edx+1196]
	divss	xmm0, DWORD PTR _vt$23[ebp]
	movss	DWORD PTR _velocity$43[ebp], xmm0

; 3042 : 				velocity.y = af->ydot/vt;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR [ecx+1200]
	divss	xmm0, DWORD PTR _vt$23[ebp]
	movss	DWORD PTR _velocity$43[ebp+4], xmm0

; 3043 : 				velocity.z = af->zdot/vt;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR [eax+1204]
	divss	xmm0, DWORD PTR _vt$23[ebp]
	movss	DWORD PTR _velocity$43[ebp+8], xmm0

; 3044 : 				
; 3045 : 				noseDir.x = af->platform->platformAngles.costhe * af->platform->platformAngles.cospsi;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+1088]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	ecx, DWORD PTR [edx+1088]
	movss	xmm0, DWORD PTR [eax+392]
	mulss	xmm0, DWORD PTR [ecx+408]
	movss	DWORD PTR _noseDir$52[ebp], xmm0

; 3046 : 				noseDir.y = af->platform->platformAngles.costhe * af->platform->platformAngles.sinpsi;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+1088]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	edx, DWORD PTR [eax+1088]
	movss	xmm0, DWORD PTR [ecx+392]
	mulss	xmm0, DWORD PTR [edx+404]
	movss	DWORD PTR _noseDir$52[ebp+4], xmm0

; 3047 : 				noseDir.z = -af->platform->platformAngles.sinthe;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+1088]
	movss	xmm0, DWORD PTR [edx+388]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _noseDir$52[ebp+8], xmm0

; 3048 : 				tmp = (float)sqrt(noseDir.x*noseDir.x + noseDir.y*noseDir.y + noseDir.z*noseDir.z);

	movss	xmm0, DWORD PTR _noseDir$52[ebp]
	mulss	xmm0, DWORD PTR _noseDir$52[ebp]
	movss	xmm1, DWORD PTR _noseDir$52[ebp+4]
	mulss	xmm1, DWORD PTR _noseDir$52[ebp+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _noseDir$52[ebp+8]
	mulss	xmm1, DWORD PTR _noseDir$52[ebp+8]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _tmp$18[ebp]

; 3049 : 				noseDir.x /= tmp;

	movss	xmm0, DWORD PTR _noseDir$52[ebp]
	divss	xmm0, DWORD PTR _tmp$18[ebp]
	movss	DWORD PTR _noseDir$52[ebp], xmm0

; 3050 : 				noseDir.y /= tmp;

	movss	xmm0, DWORD PTR _noseDir$52[ebp+4]
	divss	xmm0, DWORD PTR _tmp$18[ebp]
	movss	DWORD PTR _noseDir$52[ebp+4], xmm0

; 3051 : 				noseDir.z /= tmp;

	movss	xmm0, DWORD PTR _noseDir$52[ebp+8]
	divss	xmm0, DWORD PTR _tmp$18[ebp]
	movss	DWORD PTR _noseDir$52[ebp+8], xmm0

; 3052 : 				
; 3053 : 				noseAngle = af->gndNormal.x*noseDir.x + af->gndNormal.y*noseDir.y + af->gndNormal.z*noseDir.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR [ecx+1288]
	mulss	xmm0, DWORD PTR _noseDir$52[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm1, DWORD PTR [eax+1292]
	mulss	xmm1, DWORD PTR _noseDir$52[ebp+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm1, DWORD PTR [edx+1296]
	mulss	xmm1, DWORD PTR _noseDir$52[ebp+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _noseAngle$15[ebp], xmm0

; 3054 : 				impactAngle = af->gndNormal.x*velocity.x + af->gndNormal.y*velocity.y + af->gndNormal.z*velocity.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR [ecx+1288]
	mulss	xmm0, DWORD PTR _velocity$43[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm1, DWORD PTR [eax+1292]
	mulss	xmm1, DWORD PTR _velocity$43[ebp+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm1, DWORD PTR [edx+1296]
	mulss	xmm1, DWORD PTR _velocity$43[ebp+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _impactAngle$21[ebp], xmm0

; 3055 : 				
; 3056 : 				impactAngle = (float)fabs(impactAngle);

	push	ecx
	movss	xmm0, DWORD PTR _impactAngle$21[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _impactAngle$21[ebp]

; 3057 : 
; 3058 : 				if (ZPos() > -g_fCarrierStartTolerance) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv2864[ebp]
	movss	xmm0, DWORD PTR tv2864[ebp]
	movss	xmm1, DWORD PTR ?g_fCarrierStartTolerance@@3MA
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, xmm1
	jbe	SHORT $LN24@CheckObjec

; 3059 : 					// We just started inside the carrier
; 3060 : 					SetAutopilot(APOff);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAutopilot@AircraftClass@@QAEXW4AutoPilotType@1@@Z ; AircraftClass::SetAutopilot

; 3061 : 					af->onObjectHeight = minB.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR _minB$48[ebp+8]
	movss	DWORD PTR [ecx+1816], xmm0

; 3062 : 					noseAngle = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _noseAngle$15[ebp], xmm0

; 3063 : 					impactAngle = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _impactAngle$21[ebp], xmm0

; 3064 : 				}
; 3065 : 				else

	jmp	SHORT $LN23@CheckObjec
$LN24@CheckObjec:

; 3066 : 					af->onObjectHeight = ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	fstp	DWORD PTR [eax+1816]
$LN23@CheckObjec:

; 3067 : 
; 3068 : 				if (vt == 0.0f)

	movss	xmm0, DWORD PTR _vt$23[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN22@CheckObjec

; 3069 : 					continue;

	jmp	$LN93@CheckObjec
$LN22@CheckObjec:

; 3070 : 
; 3071 : 				// do the landing check (no damage)
; 3072 : 				if (!af->IsSet(AirframeClass::InAir) || af->platform->LandingCheck(noseAngle, impactAngle, COVERAGE_OBJECT)) {

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN20@CheckObjec
	push	15					; 0000000fH
	push	ecx
	movss	xmm0, DWORD PTR _impactAngle$21[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _noseAngle$15[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+1088]
	call	?LandingCheck@AircraftClass@@QAEHMMH@Z	; AircraftClass::LandingCheck
	test	eax, eax
	je	SHORT $LN21@CheckObjec
$LN20@CheckObjec:

; 3073 : 					af->ClearFlag (AirframeClass::InAir);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag

; 3074 : 					continue;

	jmp	$LN93@CheckObjec
$LN21@CheckObjec:

; 3075 : 				}
; 3076 : 			}

	jmp	SHORT $LN18@CheckObjec
$LN32@CheckObjec:

; 3077 : 			else if(ZPos() <= minB.z * 0.96f)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv2888[ebp]
	movss	xmm0, DWORD PTR _minB$48[ebp+8]
	mulss	xmm0, DWORD PTR __real@3f75c28f
	comiss	xmm0, DWORD PTR tv2888[ebp]
	jb	SHORT $LN18@CheckObjec

; 3078 : 				continue;

	jmp	$LN93@CheckObjec
$LN18@CheckObjec:

; 3079 : 		}
; 3080 : 
; 3081 : 		if (isDigital || !PlayerOptions.CollisionsOn())

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+948], 0
	jne	SHORT $LN16@CheckObjec
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?CollisionsOn@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::CollisionsOn
	test	eax, eax
	jne	SHORT $LN17@CheckObjec
$LN16@CheckObjec:

; 3082 : 			continue;

	jmp	$LN93@CheckObjec
$LN17@CheckObjec:

; 3083 : 		// JB carrier end
; 3084 : 
; 3085 : 		//Cobra Lest Dewdog whine forever
; 3086 : 		//This should keep online players from "colliding"
; 3087 : 		if (!af->IsSet(AirframeClass::OnObject) && OnGround() && af->vcas <= 50.0f
; 3088 : 			&& gCommsMgr && gCommsMgr->Online())

	push	1073741824				; 40000000H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN15@CheckObjec
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	je	SHORT $LN15@CheckObjec
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR __real@42480000
	comiss	xmm0, DWORD PTR [edx+1124]
	jb	SHORT $LN15@CheckObjec
	cmp	DWORD PTR ?gCommsMgr@@3PAVUIComms@@A, 0	; gCommsMgr
	je	SHORT $LN15@CheckObjec
	mov	ecx, DWORD PTR ?gCommsMgr@@3PAVUIComms@@A ; gCommsMgr
	call	?Online@UIComms@@QAEHXZ			; UIComms::Online
	test	eax, eax
	je	SHORT $LN15@CheckObjec

; 3089 : 		{
; 3090 : 			continue;

	jmp	$LN93@CheckObjec
$LN15@CheckObjec:

; 3091 : 		}
; 3092 : 
; 3093 : 		// RV - Biker - If we are in initialization don't crash
; 3094 : 		if (carrierInitTimer < 30.0f) {

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41f00000
	comiss	xmm0, DWORD PTR [eax+3564]
	jbe	SHORT $LN14@CheckObjec

; 3095 : 			continue;

	jmp	$LN93@CheckObjec
$LN14@CheckObjec:

; 3096 : 		}
; 3097 : 
; 3098 : 		// 2002-04-17 MN fix for killer chaff / flare
; 3099 : 		if (theObject->GetType() == TYPE_BOMB && 
; 3100 : 			(theObject->GetSType() == STYPE_CHAFF || theObject->GetSType() == STYPE_FLARE1) &&
; 3101 : 			(theObject->GetSPType() == SPTYPE_CHAFF1 || theObject->GetSPType() == SPTYPE_CHAFF1+1))

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?GetType@SimBaseClass@@QBEEXZ		; SimBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 2
	jne	SHORT $LN13@CheckObjec
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?GetSType@SimBaseClass@@QBEEXZ		; SimBaseClass::GetSType
	movzx	edx, al
	cmp	edx, 1
	je	SHORT $LN12@CheckObjec
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?GetSType@SimBaseClass@@QBEEXZ		; SimBaseClass::GetSType
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN13@CheckObjec
$LN12@CheckObjec:
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?GetSPType@SimBaseClass@@QBEEXZ		; SimBaseClass::GetSPType
	movzx	ecx, al
	cmp	ecx, 1
	je	SHORT $LN11@CheckObjec
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?GetSPType@SimBaseClass@@QBEEXZ		; SimBaseClass::GetSPType
	movzx	edx, al
	cmp	edx, 2
	jne	SHORT $LN13@CheckObjec
$LN11@CheckObjec:

; 3102 : 			continue;

	jmp	$LN93@CheckObjec
$LN13@CheckObjec:

; 3103 : 		
; 3104 : 		if (!isDigital)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+948], 0
	jne	SHORT $LN10@CheckObjec

; 3105 : 			g_intellivibeData.CollisionCounter++;

	mov	ecx, DWORD PTR ?g_intellivibeData@@3VIntellivibeData@@A+8
	add	ecx, 1
	mov	DWORD PTR ?g_intellivibeData@@3VIntellivibeData@@A+8, ecx
$LN10@CheckObjec:

; 3106 : 
; 3107 : 		// send message to self
; 3108 : 		// VuTargetEntity *owner_session = (VuTargetEntity*)vuDatabase->Find(OwnerId());
; 3109 : 		message = new FalconDamageMessage (Id(), FalconLocalGame);

	push	98					; 00000062H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T14[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T14[ebp], 0
	je	SHORT $LN111@CheckObjec
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN109@CheckObjec
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv1412[ebp], eax
	jmp	SHORT $LN110@CheckObjec
$LN109@CheckObjec:
	mov	DWORD PTR tv1412[ebp], 0
$LN110@CheckObjec:
	push	1
	mov	eax, DWORD PTR tv1412[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR $T14[ebp]
	call	??0FalconDamageMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconDamageMessage::FalconDamageMessage
	mov	DWORD PTR tv1423[ebp], eax
	jmp	SHORT $LN112@CheckObjec
$LN111@CheckObjec:
	mov	DWORD PTR tv1423[ebp], 0
$LN112@CheckObjec:
	mov	ecx, DWORD PTR tv1423[ebp]
	mov	DWORD PTR $T13[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T13[ebp]
	mov	DWORD PTR _message$[ebp], edx

; 3110 : 		message->dataBlock.fEntityID  = theObject->Id();

	lea	eax, DWORD PTR $T9[ebp]
	push	eax
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR [eax+74], ecx
	mov	DWORD PTR [eax+78], edx

; 3111 : 
; 3112 :         message->dataBlock.fCampID    = theObject->GetCampID();

	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	mov	ecx, DWORD PTR _message$[ebp]
	mov	WORD PTR [ecx+82], ax

; 3113 :         message->dataBlock.fSide      = theObject->GetCountry();

	mov	edx, DWORD PTR _theObject$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	edx, DWORD PTR [eax+120]
	call	edx
	mov	ecx, DWORD PTR _message$[ebp]
	mov	BYTE PTR [ecx+87], al

; 3114 : 
; 3115 : 		if (theObject->IsAirplane())

	mov	edx, DWORD PTR _theObject$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	edx, DWORD PTR [eax+192]
	call	edx
	test	eax, eax
	je	SHORT $LN9@CheckObjec

; 3116 : 		   message->dataBlock.fPilotID   = ((SimMoverClass*)theObject)->pilotSlot;

	mov	eax, DWORD PTR _message$[ebp]
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	dl, BYTE PTR [ecx+665]
	mov	BYTE PTR [eax+84], dl

; 3117 : 		else

	jmp	SHORT $LN8@CheckObjec
$LN9@CheckObjec:

; 3118 : 		   message->dataBlock.fPilotID   = 255;

	mov	eax, DWORD PTR _message$[ebp]
	mov	BYTE PTR [eax+84], 255			; 000000ffH
$LN8@CheckObjec:

; 3119 : 		message->dataBlock.fIndex     = theObject->Type();

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	ecx, DWORD PTR _message$[ebp]
	mov	WORD PTR [ecx+85], ax

; 3120 : 		message->dataBlock.fWeaponID  = theObject->Type();

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	edx, DWORD PTR _message$[ebp]
	mov	WORD PTR [edx+88], ax

; 3121 : 		message->dataBlock.fWeaponUID = theObject->Id();

	lea	eax, DWORD PTR $T8[ebp]
	push	eax
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR [eax+90], ecx
	mov	DWORD PTR [eax+94], edx

; 3122 : 
; 3123 : 		message->dataBlock.dEntityID  = Id();

	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _message$[ebp]
	mov	DWORD PTR [ecx+60], edx
	mov	DWORD PTR [ecx+64], eax

; 3124 : 		ShiAssert(GetCampaignObject())
; 3125 : 		message->dataBlock.dCampID = GetCampID();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	mov	ecx, DWORD PTR _message$[ebp]
	mov	WORD PTR [ecx+68], ax

; 3126 : 		message->dataBlock.dSide   = GetCountry();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+120]
	call	edx
	mov	ecx, DWORD PTR _message$[ebp]
	mov	BYTE PTR [ecx+73], al

; 3127 : 		if (IsAirplane())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+192]
	call	edx
	test	eax, eax
	je	SHORT $LN7@CheckObjec

; 3128 : 		   message->dataBlock.dPilotID   = pilotSlot;

	mov	eax, DWORD PTR _message$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+665]
	mov	BYTE PTR [eax+70], dl

; 3129 : 		else

	jmp	SHORT $LN6@CheckObjec
$LN7@CheckObjec:

; 3130 : 		   message->dataBlock.dPilotID   = 255;

	mov	eax, DWORD PTR _message$[ebp]
	mov	BYTE PTR [eax+70], 255			; 000000ffH
$LN6@CheckObjec:

; 3131 : 		message->dataBlock.dIndex     = Type();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	ecx, DWORD PTR _message$[ebp]
	mov	WORD PTR [ecx+71], ax

; 3132 : 		message->dataBlock.damageType = FalconDamageType::ObjectCollisionDamage;

	mov	edx, DWORD PTR _message$[ebp]
	mov	DWORD PTR [edx+48], 6

; 3133 : 
; 3134 : 		Tpoint Objvec, Myvec, relVec;
; 3135 : 		float relVel;
; 3136 : 
; 3137 : 		Myvec.x = XDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR _Myvec$44[ebp]

; 3138 : 		Myvec.y = YDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR _Myvec$44[ebp+4]

; 3139 : 		Myvec.z = ZDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR _Myvec$44[ebp+8]

; 3140 : 
; 3141 : 		Objvec.x = theObject->XDelta();

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR _Objvec$45[ebp]

; 3142 : 		Objvec.y = theObject->YDelta();

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR _Objvec$45[ebp+4]

; 3143 : 		Objvec.z = theObject->ZDelta();

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR _Objvec$45[ebp+8]

; 3144 : 
; 3145 : 		relVec.x = Myvec.x - Objvec.x;

	movss	xmm0, DWORD PTR _Myvec$44[ebp]
	subss	xmm0, DWORD PTR _Objvec$45[ebp]
	movss	DWORD PTR _relVec$47[ebp], xmm0

; 3146 : 		relVec.y = Myvec.y - Objvec.y;

	movss	xmm0, DWORD PTR _Myvec$44[ebp+4]
	subss	xmm0, DWORD PTR _Objvec$45[ebp+4]
	movss	DWORD PTR _relVec$47[ebp+4], xmm0

; 3147 : 		relVec.z = Myvec.z - Objvec.z;

	movss	xmm0, DWORD PTR _Myvec$44[ebp+8]
	subss	xmm0, DWORD PTR _Objvec$45[ebp+8]
	movss	DWORD PTR _relVec$47[ebp+8], xmm0

; 3148 : 
; 3149 : 		relVel = (float)sqrt(relVec.x*relVec.x + relVec.y*relVec.y + relVec.z*relVec.z);

	movss	xmm0, DWORD PTR _relVec$47[ebp]
	mulss	xmm0, DWORD PTR _relVec$47[ebp]
	movss	xmm1, DWORD PTR _relVec$47[ebp+4]
	mulss	xmm1, DWORD PTR _relVec$47[ebp+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _relVec$47[ebp+8]
	mulss	xmm1, DWORD PTR _relVec$47[ebp+8]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _relVel$27[ebp]

; 3150 : 
; 3151 : 		// for now use maxStrength as amount of damage.
; 3152 : 		// later we'll want to add other factors into the equation --
; 3153 : 		// on ground, speed, etc....	
; 3154 : 		
; 3155 : 		message->dataBlock.damageRandomFact = 1.0f;

	mov	eax, DWORD PTR _message$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+56], xmm0

; 3156 : 
; 3157 : 		message->dataBlock.damageStrength = min(1000.0F, relVel * theObject->Mass() * 0.0001F + relVel * relVel * theObject->Mass()* 0.000002F);

	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	eax, DWORD PTR [edx+388]
	call	eax
	fstp	DWORD PTR tv3010[ebp]
	movss	xmm0, DWORD PTR tv3010[ebp]
	mulss	xmm0, DWORD PTR _relVel$27[ebp]
	mulss	xmm0, DWORD PTR __real@38d1b717
	movss	xmm1, DWORD PTR _relVel$27[ebp]
	mulss	xmm1, DWORD PTR _relVel$27[ebp]
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	eax, DWORD PTR [edx+388]
	movss	DWORD PTR tv3248[ebp], xmm0
	movss	DWORD PTR tv3250[ebp], xmm1
	call	eax
	fstp	DWORD PTR tv3018[ebp]
	movss	xmm0, DWORD PTR tv3250[ebp]
	mulss	xmm0, DWORD PTR tv3018[ebp]
	mulss	xmm0, DWORD PTR __real@360637bd
	movss	xmm1, DWORD PTR tv3248[ebp]
	addss	xmm1, xmm0
	comiss	xmm1, DWORD PTR __real@447a0000
	jbe	SHORT $LN113@CheckObjec
	movss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR tv1668[ebp], xmm0
	jmp	$LN114@CheckObjec
$LN113@CheckObjec:
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	eax, DWORD PTR [edx+388]
	call	eax
	fstp	DWORD PTR tv3025[ebp]
	movss	xmm0, DWORD PTR tv3025[ebp]
	mulss	xmm0, DWORD PTR _relVel$27[ebp]
	mulss	xmm0, DWORD PTR __real@38d1b717
	movss	xmm1, DWORD PTR _relVel$27[ebp]
	mulss	xmm1, DWORD PTR _relVel$27[ebp]
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	eax, DWORD PTR [edx+388]
	movss	DWORD PTR tv3252[ebp], xmm0
	movss	DWORD PTR tv3254[ebp], xmm1
	call	eax
	fstp	DWORD PTR tv3033[ebp]
	movss	xmm0, DWORD PTR tv3254[ebp]
	mulss	xmm0, DWORD PTR tv3033[ebp]
	mulss	xmm0, DWORD PTR __real@360637bd
	movss	xmm1, DWORD PTR tv3252[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv1668[ebp], xmm1
$LN114@CheckObjec:
	mov	ecx, DWORD PTR _message$[ebp]
	movss	xmm0, DWORD PTR tv1668[ebp]
	movss	DWORD PTR [ecx+52], xmm0

; 3158 : 	
; 3159 : 		message->RequestOutOfBandTransmit ();

	mov	ecx, DWORD PTR _message$[ebp]
	call	?RequestOutOfBandTransmit@VuMessage@@QAEXXZ ; VuMessage::RequestOutOfBandTransmit

; 3160 : 
; 3161 : 		if (message->dataBlock.damageStrength > 0.0f) // JB carrier

	mov	edx, DWORD PTR _message$[ebp]
	movss	xmm0, DWORD PTR [edx+52]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN5@CheckObjec

; 3162 : 			FalconSendMessage (message,TRUE);

	push	1
	mov	eax, DWORD PTR _message$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN5@CheckObjec:

; 3163 : 
; 3164 : 		// send message to other ship
; 3165 : 		// owner_session = (VuTargetEntity*)vuDatabase->Find(theObject->OwnerId());
; 3166 : 		message = new FalconDamageMessage (theObject->Id(), FalconLocalGame);

	push	98					; 00000062H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T17[ebp], 0
	je	SHORT $LN117@CheckObjec
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN115@CheckObjec
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv1706[ebp], eax
	jmp	SHORT $LN116@CheckObjec
$LN115@CheckObjec:
	mov	DWORD PTR tv1706[ebp], 0
$LN116@CheckObjec:
	push	1
	mov	edx, DWORD PTR tv1706[ebp]
	push	edx
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T17[ebp]
	call	??0FalconDamageMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconDamageMessage::FalconDamageMessage
	mov	DWORD PTR tv1717[ebp], eax
	jmp	SHORT $LN118@CheckObjec
$LN117@CheckObjec:
	mov	DWORD PTR tv1717[ebp], 0
$LN118@CheckObjec:
	mov	eax, DWORD PTR tv1717[ebp]
	mov	DWORD PTR $T12[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T12[ebp]
	mov	DWORD PTR _message$[ebp], ecx

; 3167 : 		message->dataBlock.fEntityID  = Id();

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR [eax+74], ecx
	mov	DWORD PTR [eax+78], edx

; 3168 : 		ShiAssert(GetCampaignObject())
; 3169 : 		message->dataBlock.fCampID = GetCampID();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	mov	ecx, DWORD PTR _message$[ebp]
	mov	WORD PTR [ecx+82], ax

; 3170 : 		message->dataBlock.fSide   = GetCountry();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+120]
	call	edx
	mov	ecx, DWORD PTR _message$[ebp]
	mov	BYTE PTR [ecx+87], al

; 3171 : 		message->dataBlock.fPilotID   = pilotSlot;

	mov	edx, DWORD PTR _message$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+665]
	mov	BYTE PTR [edx+84], cl

; 3172 : 		message->dataBlock.fIndex     = Type();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	edx, DWORD PTR _message$[ebp]
	mov	WORD PTR [edx+85], ax

; 3173 : 		message->dataBlock.fWeaponID  = Type();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	ecx, DWORD PTR _message$[ebp]
	mov	WORD PTR [ecx+88], ax

; 3174 : 		message->dataBlock.fWeaponUID = theObject->Id();

	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR [eax+90], ecx
	mov	DWORD PTR [eax+94], edx

; 3175 : 
; 3176 : 		message->dataBlock.dEntityID  = theObject->Id();

	lea	ecx, DWORD PTR $T7[ebp]
	push	ecx
	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _message$[ebp]
	mov	DWORD PTR [ecx+60], edx
	mov	DWORD PTR [ecx+64], eax

; 3177 : 		message->dataBlock.dCampID = theObject->GetCampID();

	mov	edx, DWORD PTR _theObject$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	mov	ecx, DWORD PTR _message$[ebp]
	mov	WORD PTR [ecx+68], ax

; 3178 : 		message->dataBlock.dSide   = theObject->GetCountry();

	mov	edx, DWORD PTR _theObject$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	edx, DWORD PTR [eax+120]
	call	edx
	mov	ecx, DWORD PTR _message$[ebp]
	mov	BYTE PTR [ecx+73], al

; 3179 : 		if (theObject->IsAirplane())

	mov	edx, DWORD PTR _theObject$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	edx, DWORD PTR [eax+192]
	call	edx
	test	eax, eax
	je	SHORT $LN4@CheckObjec

; 3180 : 		   message->dataBlock.dPilotID   = ((SimMoverClass*)theObject)->pilotSlot;

	mov	eax, DWORD PTR _message$[ebp]
	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	dl, BYTE PTR [ecx+665]
	mov	BYTE PTR [eax+70], dl

; 3181 : 		else

	jmp	SHORT $LN3@CheckObjec
$LN4@CheckObjec:

; 3182 : 		   message->dataBlock.dPilotID   = 255;

	mov	eax, DWORD PTR _message$[ebp]
	mov	BYTE PTR [eax+70], 255			; 000000ffH
$LN3@CheckObjec:

; 3183 : 		message->dataBlock.dIndex     = theObject->Type();

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	ecx, DWORD PTR _message$[ebp]
	mov	WORD PTR [ecx+71], ax

; 3184 : 		// for now use maxStrength as amount of damage.
; 3185 : 		// later we'll want to add other factors into the equation --
; 3186 : 		// on ground, speed, etc....
; 3187 : 		
; 3188 : 		message->dataBlock.damageRandomFact = 1.0f;

	mov	edx, DWORD PTR _message$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+56], xmm0

; 3189 : 		message->dataBlock.damageStrength = min(1000.0F, relVel * Mass() * 0.0001F + relVel * relVel * Mass()* 0.000002F);

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+388]
	call	eax
	fstp	DWORD PTR tv3114[ebp]
	movss	xmm0, DWORD PTR tv3114[ebp]
	mulss	xmm0, DWORD PTR _relVel$27[ebp]
	mulss	xmm0, DWORD PTR __real@38d1b717
	movss	xmm1, DWORD PTR _relVel$27[ebp]
	mulss	xmm1, DWORD PTR _relVel$27[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+388]
	movss	DWORD PTR tv3256[ebp], xmm0
	movss	DWORD PTR tv3258[ebp], xmm1
	call	eax
	fstp	DWORD PTR tv3122[ebp]
	movss	xmm0, DWORD PTR tv3258[ebp]
	mulss	xmm0, DWORD PTR tv3122[ebp]
	mulss	xmm0, DWORD PTR __real@360637bd
	movss	xmm1, DWORD PTR tv3256[ebp]
	addss	xmm1, xmm0
	comiss	xmm1, DWORD PTR __real@447a0000
	jbe	SHORT $LN119@CheckObjec
	movss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR tv1887[ebp], xmm0
	jmp	$LN120@CheckObjec
$LN119@CheckObjec:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+388]
	call	eax
	fstp	DWORD PTR tv3129[ebp]
	movss	xmm0, DWORD PTR tv3129[ebp]
	mulss	xmm0, DWORD PTR _relVel$27[ebp]
	mulss	xmm0, DWORD PTR __real@38d1b717
	movss	xmm1, DWORD PTR _relVel$27[ebp]
	mulss	xmm1, DWORD PTR _relVel$27[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+388]
	movss	DWORD PTR tv3260[ebp], xmm0
	movss	DWORD PTR tv3262[ebp], xmm1
	call	eax
	fstp	DWORD PTR tv3137[ebp]
	movss	xmm0, DWORD PTR tv3262[ebp]
	mulss	xmm0, DWORD PTR tv3137[ebp]
	mulss	xmm0, DWORD PTR __real@360637bd
	movss	xmm1, DWORD PTR tv3260[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv1887[ebp], xmm1
$LN120@CheckObjec:
	mov	ecx, DWORD PTR _message$[ebp]
	movss	xmm0, DWORD PTR tv1887[ebp]
	movss	DWORD PTR [ecx+52], xmm0

; 3190 : 				
; 3191 : 		message->dataBlock.damageType = FalconDamageType::ObjectCollisionDamage;

	mov	edx, DWORD PTR _message$[ebp]
	mov	DWORD PTR [edx+48], 6

; 3192 : 		message->RequestOutOfBandTransmit ();

	mov	ecx, DWORD PTR _message$[ebp]
	call	?RequestOutOfBandTransmit@VuMessage@@QAEXXZ ; VuMessage::RequestOutOfBandTransmit

; 3193 : 	
; 3194 : 		if (message->dataBlock.damageStrength > 0.0f) // JB carrier

	mov	eax, DWORD PTR _message$[ebp]
	movss	xmm0, DWORD PTR [eax+52]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN2@CheckObjec

; 3195 : 			FalconSendMessage (message,TRUE);

	push	1
	mov	ecx, DWORD PTR _message$[ebp]
	push	ecx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN2@CheckObjec:

; 3196 : 	} // end target list loop

	jmp	$LN93@CheckObjec
$LN92@CheckObjec:

; 3197 : 
; 3198 : 	// JB carrier start
; 3199 : 	if (!setOnObject && af->IsSet(AirframeClass::OnObject))

	movzx	edx, BYTE PTR _setOnObject$[ebp]
	test	edx, edx
	jne	$LN1@CheckObjec
	push	1073741824				; 40000000H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN1@CheckObjec

; 3200 : 	{
; 3201 : 		attachedEntity = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1828], 0

; 3202 : 		af->ClearFlag(AirframeClass::OverRunway);

	push	8388608					; 00800000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+932]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag

; 3203 : 		af->ClearFlag(AirframeClass::OnObject);

	push	1073741824				; 40000000H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag

; 3204 : 		af->ClearFlag(AirframeClass::Planted);

	push	4096					; 00001000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag

; 3205 : 		af->platform->UnSetFlag( ON_GROUND );

	push	128					; 00000080H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+1088]
	call	?UnSetFlag@SimBaseClass@@QAEXH@Z	; SimBaseClass::UnSetFlag

; 3206 : 		af->SetFlag (AirframeClass::InAir);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag
$LN1@CheckObjec:

; 3207 : 	}
; 3208 : 	// JB carrier end
; 3209 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CheckObjectCollision@AircraftClass@@QAEXXZ$0:
	mov	eax, DWORD PTR $T14[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CheckObjectCollision@AircraftClass@@QAEXXZ$1:
	mov	eax, DWORD PTR $T17[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CheckObjectCollision@AircraftClass@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-924]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CheckObjectCollision@AircraftClass@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CheckObjectCollision@AircraftClass@@QAEXXZ ENDP	; AircraftClass::CheckObjectCollision
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\damage.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
?CleanupDamage@AircraftClass@@QAEXXZ PROC		; AircraftClass::CleanupDamage
; _this$ = ecx

; 2618 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2619 : 	for (int i = 0; i < TRAIL_MAX; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@CleanupDam
$LN3@CleanupDam:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@CleanupDam:
	cmp	DWORD PTR _i$1[ebp], 3
	jge	SHORT $LN5@CleanupDam

; 2620 : 	{
; 2621 : 		if ( smokeTrail[i] )

	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx*4+1160], 0
	je	SHORT $LN1@CleanupDam

; 2622 : 		{
; 2623 : 
; 2624 : 		/* RV - I-Hawk - RV new trails call changes
; 2625 : 		OTWDriver.AddSfxRequest(
; 2626 : 			new SfxClass (
; 2627 : 			11.2f,							// time to live
; 2628 : 			smokeTrail[i]) );		// scale
; 2629 : 			*/
; 2630 : 			DrawableParticleSys::PS_KillTrail(smokeTrail_trail[i]);

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+1172]
	push	edx
	call	?PS_KillTrail@DrawableParticleSys@@SAXK@Z ; DrawableParticleSys::PS_KillTrail
	add	esp, 4

; 2631 : 			smokeTrail[i] = smokeTrail_trail[i] = NULL;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+1172], 0
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx*4+1160], 0
$LN1@CleanupDam:

; 2632 : 		}
; 2633 :   }

	jmp	SHORT $LN3@CleanupDam
$LN5@CleanupDam:

; 2634 :   return;
; 2635 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CleanupDamage@AircraftClass@@QAEXXZ ENDP		; AircraftClass::CleanupDamage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\damage.cpp
_TEXT	SEGMENT
_trig$1 = -828						; size = 8
tv3319 = -820						; size = 4
tv3315 = -816						; size = 4
tv3479 = -812						; size = 4
tv3712 = -808						; size = 4
tv3566 = -804						; size = 4
tv3304 = -800						; size = 4
tv3397 = -796						; size = 4
tv2534 = -792						; size = 4
tv3588 = -788						; size = 4
tv3293 = -784						; size = 4
tv3499 = -780						; size = 4
tv3644 = -776						; size = 4
_radius$2 = -772					; size = 4
tv3245 = -768						; size = 4
tv3375 = -764						; size = 4
tv3241 = -760						; size = 4
tv3601 = -756						; size = 4
tv3236 = -752						; size = 4
tv3577 = -748						; size = 4
_PSaltCx$3 = -744					; size = 4
tv3541 = -740						; size = 4
tv3083 = -736						; size = 4
tv3490 = -732						; size = 4
_trailAltCx$4 = -728					; size = 4
tv3468 = -724						; size = 4
tv2937 = -720						; size = 4
tv3406 = -716						; size = 4
_acaoa$5 = -712						; size = 4
tv3386 = -708						; size = 4
_acweight$6 = -704					; size = 4
tv3329 = -700						; size = 4
tv2758 = -696						; size = 4
tv3606 = -692						; size = 4
tv3642 = -688						; size = 4
tv3596 = -684						; size = 4
tv2733 = -680						; size = 4
tv3730 = -676						; size = 4
tv2725 = -672						; size = 4
tv3728 = -668						; size = 4
tv3640 = -664						; size = 4
tv3726 = -660						; size = 4
tv2716 = -656						; size = 4
tv3504 = -652						; size = 4
tv2708 = -648						; size = 4
tv3494 = -644						; size = 4
tv2668 = -640						; size = 4
tv3724 = -636						; size = 4
tv2661 = -632						; size = 4
tv3722 = -628						; size = 4
tv2650 = -624						; size = 4
tv3720 = -620						; size = 4
tv2646 = -616						; size = 4
tv3411 = -612						; size = 4
tv2629 = -608						; size = 4
tv3401 = -604						; size = 4
tv2603 = -600						; size = 4
tv3718 = -596						; size = 4
tv2599 = -592						; size = 4
tv3716 = -588						; size = 4
tv2563 = -584						; size = 4
tv3714 = -580						; size = 4
tv2559 = -576						; size = 4
tv3324 = -572						; size = 4
tv2555 = -568						; size = 4
tv3646 = -564						; size = 4
tv224 = -560						; size = 4
_strength$7 = -556					; size = 4
_y$8 = -552						; size = 4
_currentMach$9 = -548					; size = 4
_x$10 = -544						; size = 4
_hasMilSmoke$ = -540					; size = 4
_wingtipTrailAltCx$11 = -536				; size = 4
tv1113 = -532						; size = 4
tv1196 = -528						; size = 4
_doturb$12 = -524					; size = 4
tv1247 = -520						; size = 4
_dotrails$13 = -516					; size = 4
tv177 = -512						; size = 4
_offset$14 = -508					; size = 4
tv134 = -504						; size = 4
_doAOAVortex$15 = -500					; size = 4
_offset$16 = -496					; size = 4
_currentVCAS$17 = -492					; size = 4
_offset$18 = -488					; size = 4
_Xoffset$19 = -484					; size = 4
_offset$20 = -480					; size = 4
_Zoffset$21 = -476					; size = 4
_doGVortex$22 = -472					; size = 4
_radius$ = -468						; size = 4
_enablePS1$23 = -464					; size = 4
_i$24 = -460						; size = 4
_enablePS3$25 = -456					; size = 4
_enablePS2$26 = -452					; size = 4
_orientation$27 = -448					; size = 4
_currentAOA$28 = -444					; size = 4
_orientation$ = -440					; size = 4
_orientation$29 = -436					; size = 4
_orientation$30 = -432					; size = 4
_currentG$31 = -428					; size = 4
_PSCx$32 = -424						; size = 4
_vortexCondition$33 = -417				; size = 1
_orientation$34 = -416					; size = 4
_largeVortex$35 = -412					; size = 4
_theSFX$36 = -408					; size = 4
_this$ = -404						; size = 4
_lvtx2$37 = -400					; size = 12
_lvtxPS2$38 = -388					; size = 12
_rvtx2$39 = -376					; size = 12
_lvtx2$40 = -364					; size = 12
_lvtxPS1$41 = -352					; size = 12
_rvtxPS2$42 = -340					; size = 12
_rvtxPS1$43 = -328					; size = 12
_rvtxPS3$44 = -316					; size = 12
_rvtx2$45 = -304					; size = 12
_lvtx2$46 = -292					; size = 12
_rvtx2$47 = -280					; size = 12
_lvtxPS3$48 = -268					; size = 12
_lvtx2$49 = -256					; size = 12
_rvtx2$50 = -244					; size = 12
_rvtx1$51 = -232					; size = 12
_lvtx1$52 = -220					; size = 12
_vtx1$53 = -208						; size = 12
_pos$54 = -196						; size = 12
_rtip$55 = -184						; size = 12
_rearOffset$ = -172					; size = 12
_ltip$56 = -160						; size = 12
_tp$57 = -148						; size = 12
_tp$58 = -136						; size = 12
_tp$59 = -124						; size = 12
_tp$60 = -112						; size = 12
_tp$61 = -100						; size = 12
_vtx5$62 = -88						; size = 12
_PSvec$63 = -76						; size = 12
_vtx4$64 = -64						; size = 12
_vtx3$65 = -52						; size = 12
_vtx2$66 = -40						; size = 12
_pos$67 = -28						; size = 12
_pos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?ShowDamage@AircraftClass@@QAEXXZ PROC			; AircraftClass::ShowDamage
; _this$ = ecx

; 1499 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 828				; 0000033cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1500 :    BOOL hasMilSmoke = FALSE;

	mov	DWORD PTR _hasMilSmoke$[ebp], 0

; 1501 :    float radius;
; 1502 :    Tpoint pos, rearOffset;
; 1503 : 
; 1504 :    //RV - I-Hawk - set Contrails margin band variables for appropraite contrails insertion checks later...
; 1505 :    if (!contrailLowValue) // Make sure I assigned contrails weather values only once

	movss	xmm0, DWORD PTR ?contrailLowValue@@3MA
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	$LN162@ShowDamage

; 1506 :    {
; 1507 : 		contrailLowValue = ((WeatherClass*)realWeather)->contrailLow;

	mov	eax, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	movss	xmm0, DWORD PTR [eax+16032]
	movss	DWORD PTR ?contrailLowValue@@3MA, xmm0

; 1508 : 		contrailHighValue = ((WeatherClass*)realWeather)->contrailHigh;

	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	movss	xmm0, DWORD PTR [ecx+16036]
	movss	DWORD PTR ?contrailHighValue@@3MA, xmm0

; 1509 : 		contrailLow10Percent = (((WeatherClass*)realWeather)->contrailLow * 0.1f);

	mov	edx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	movss	xmm0, DWORD PTR [edx+16032]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR ?contrailLow10Percent@@3MA, xmm0

; 1510 : 		contrailLow90Percent = (((WeatherClass*)realWeather)->contrailLow * 0.9f);

	mov	eax, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	movss	xmm0, DWORD PTR [eax+16032]
	mulss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR ?contrailLow90Percent@@3MA, xmm0

; 1511 : 		contrailHigh110Percent = (((WeatherClass*)realWeather)->contrailHigh + contrailLow10Percent);

	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	movss	xmm0, DWORD PTR [ecx+16036]
	addss	xmm0, DWORD PTR ?contrailLow10Percent@@3MA
	movss	DWORD PTR ?contrailHigh110Percent@@3MA, xmm0
$LN162@ShowDamage:

; 1512 :    }
; 1513 : 
; 1514 :    //RV - I-Hawk - Set damage trails locations based on how many engines there are, can be set only once
; 1515 : 	if (!damageTrailLocationSet)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+1456]
	test	eax, eax
	jne	$LN161@ShowDamage

; 1516 : 	{
; 1517 : 		switch (af->auxaeroData->nEngines)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+344]
	mov	DWORD PTR tv134[ebp], ecx
	mov	edx, DWORD PTR tv134[ebp]
	sub	edx, 1
	mov	DWORD PTR tv134[ebp], edx
	cmp	DWORD PTR tv134[ebp], 7
	ja	$LN159@ShowDamage
	mov	eax, DWORD PTR tv134[ebp]
	jmp	DWORD PTR $LN165@ShowDamage[eax*4]
$LN158@ShowDamage:

; 1518 : 		{
; 1519 : 			// 1 - damage point will be on that engine
; 1520 : 			case 1:
; 1521 : 				damageTrailLocation0 = damageTrailLocation1 = af->auxaeroData->engineLocation[0];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+348]
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1444				; 000005a4H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1444				; 000005a4H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1432				; 00000598H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 1522 : 				break;

	jmp	$LN159@ShowDamage
$LN157@ShowDamage:

; 1523 : 			// 2- damage location depends on space between the engines
; 1524 : 			case 2:
; 1525 : 				if ( rand() & 1 )

	call	_rand
	and	eax, 1
	je	SHORT $LN156@ShowDamage

; 1526 : 				{
; 1527 : 					damageTrailLocation0 = af->auxaeroData->engineLocation[0];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+348]
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1432				; 00000598H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx

; 1528 : 					damageTrailLocation1 = af->auxaeroData->engineLocation[1];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR [edx+eax+348]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1444				; 000005a4H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx

; 1529 : 				}
; 1530 : 				else

	jmp	SHORT $LN155@ShowDamage
$LN156@ShowDamage:

; 1531 : 				{
; 1532 : 					damageTrailLocation0 = af->auxaeroData->engineLocation[1];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+348]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1432				; 00000598H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 1533 : 					damageTrailLocation1 = af->auxaeroData->engineLocation[0];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+348]
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1444				; 000005a4H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
$LN155@ShowDamage:

; 1534 : 				}
; 1535 : 				break;

	jmp	$LN159@ShowDamage
$LN154@ShowDamage:

; 1536 : 			// 3- damage points will be selected randomly
; 1537 : 			case 3:
; 1538 : 				switch ( PRANDInt3() )

	call	?PRANDInt3@@YAHXZ			; PRANDInt3
	mov	DWORD PTR tv177[ebp], eax
	cmp	DWORD PTR tv177[ebp], 0
	je	SHORT $LN151@ShowDamage
	cmp	DWORD PTR tv177[ebp], 1
	je	$LN150@ShowDamage
	cmp	DWORD PTR tv177[ebp], 2
	je	$LN149@ShowDamage
	jmp	$LN152@ShowDamage
$LN151@ShowDamage:

; 1539 : 				{
; 1540 : 					case 0:
; 1541 : 						damageTrailLocation0 = af->auxaeroData->engineLocation[0];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	lea	ecx, DWORD PTR [edx+eax+348]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1432				; 00000598H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx

; 1542 : 						damageTrailLocation1 = af->auxaeroData->engineLocation[1];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+348]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1444				; 000005a4H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 1543 : 						break;

	jmp	$LN152@ShowDamage
$LN150@ShowDamage:

; 1544 : 					case 1:
; 1545 : 						damageTrailLocation0 = af->auxaeroData->engineLocation[1];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+348]
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1432				; 00000598H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx

; 1546 : 						damageTrailLocation1 = af->auxaeroData->engineLocation[2];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	lea	ecx, DWORD PTR [edx+eax+348]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1444				; 000005a4H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
$LN149@ShowDamage:

; 1547 : 					case 2:
; 1548 : 						damageTrailLocation0 = af->auxaeroData->engineLocation[2];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	lea	eax, DWORD PTR [ecx+edx+348]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1432				; 00000598H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 1549 : 						damageTrailLocation1 = af->auxaeroData->engineLocation[0];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+348]
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1444				; 000005a4H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
$LN152@ShowDamage:

; 1550 : 						break;
; 1551 : 				}
; 1552 : 				break;

	jmp	$LN159@ShowDamage
$LN148@ShowDamage:

; 1553 : 			// 4+ engines - damage points will be selected randomly
; 1554 : 			case 4:
; 1555 : 			case 5:
; 1556 : 			case 6:
; 1557 : 			case 7:
; 1558 : 			case 8:
; 1559 : 				switch ( PRANDInt5() )

	call	?PRANDInt5@@YAHXZ			; PRANDInt5
	mov	DWORD PTR tv224[ebp], eax
	cmp	DWORD PTR tv224[ebp], 4
	ja	$LN146@ShowDamage
	mov	eax, DWORD PTR tv224[ebp]
	jmp	DWORD PTR $LN166@ShowDamage[eax*4]
$LN145@ShowDamage:

; 1560 : 				{
; 1561 : 					case 0:
; 1562 : 						damageTrailLocation0 = af->auxaeroData->engineLocation[0];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+348]
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1432				; 00000598H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx

; 1563 : 						damageTrailLocation1 = af->auxaeroData->engineLocation[2];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	lea	ecx, DWORD PTR [edx+eax+348]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1444				; 000005a4H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx

; 1564 : 						break;

	jmp	$LN146@ShowDamage
$LN144@ShowDamage:

; 1565 : 					case 1:
; 1566 : 						damageTrailLocation0 = af->auxaeroData->engineLocation[1];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+348]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1432				; 00000598H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 1567 : 						damageTrailLocation1 = af->auxaeroData->engineLocation[3];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 3
	lea	edx, DWORD PTR [eax+ecx+348]
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1444				; 000005a4H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
$LN143@ShowDamage:

; 1568 : 					case 2:
; 1569 : 						damageTrailLocation0 = af->auxaeroData->engineLocation[2];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	lea	ecx, DWORD PTR [edx+eax+348]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1432				; 00000598H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx

; 1570 : 						damageTrailLocation1 = af->auxaeroData->engineLocation[1];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+348]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1444				; 000005a4H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 1571 : 						break;

	jmp	$LN146@ShowDamage
$LN142@ShowDamage:

; 1572 : 					case 3:
; 1573 : 						damageTrailLocation0 = af->auxaeroData->engineLocation[0];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+348]
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1432				; 00000598H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx

; 1574 : 						damageTrailLocation1 = af->auxaeroData->engineLocation[1];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR [edx+eax+348]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1444				; 000005a4H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx

; 1575 : 						break;

	jmp	SHORT $LN146@ShowDamage
$LN141@ShowDamage:

; 1576 : 					case 4:
; 1577 : 						damageTrailLocation0 = af->auxaeroData->engineLocation[3];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, 12					; 0000000cH
	imul	edx, 3
	lea	eax, DWORD PTR [ecx+edx+348]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1432				; 00000598H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 1578 : 						damageTrailLocation1 = af->auxaeroData->engineLocation[2];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	lea	edx, DWORD PTR [eax+ecx+348]
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1444				; 000005a4H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
$LN146@ShowDamage:
$LN159@ShowDamage:

; 1579 : 						break;
; 1580 : 				}
; 1581 : 				break;
; 1582 : 		}
; 1583 : 		damageTrailLocationSet = true; //do not try to set damage location more than once... 

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1456], 1
$LN161@ShowDamage:

; 1584 : 	}
; 1585 : 
; 1586 :    // handle case when moving slow and/or on ground -- no trails
; 1587 :     // MLR 12/14/2003 - The trail code will handle this
; 1588 : #if 1 // MLR_NEWTRAILCODE
; 1589 :    if (GetVt() < 40.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv2534[ebp]
	movss	xmm0, DWORD PTR __real@42200000
	comiss	xmm0, DWORD PTR tv2534[ebp]
	jbe	$LN140@ShowDamage

; 1590 :    {
; 1591 :        for (int i = 0; i < TRAIL_MAX; i++) {

	mov	DWORD PTR _i$24[ebp], 0
	jmp	SHORT $LN139@ShowDamage
$LN138@ShowDamage:
	mov	ecx, DWORD PTR _i$24[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$24[ebp], ecx
$LN139@ShowDamage:
	cmp	DWORD PTR _i$24[ebp], 3
	jge	SHORT $LN137@ShowDamage

; 1592 : 		   if ( smokeTrail[i] )

	mov	edx, DWORD PTR _i$24[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx*4+1160], 0
	je	SHORT $LN136@ShowDamage

; 1593 : 				{/* RV - I-Hawk - RV new trails call changes
; 1594 : 				OTWDriver.AddSfxRequest(
; 1595 : 				new SfxClass (
; 1596 : 				15.2f,							// time to live
; 1597 : 				smokeTrail[i]) );		// scale 
; 1598 : 				*/
; 1599 : 				DrawableParticleSys::PS_KillTrail(smokeTrail_trail[i]);

	mov	ecx, DWORD PTR _i$24[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+1172]
	push	eax
	call	?PS_KillTrail@DrawableParticleSys@@SAXK@Z ; DrawableParticleSys::PS_KillTrail
	add	esp, 4

; 1600 : 				smokeTrail[i] = smokeTrail_trail[i] = NULL;

	mov	ecx, DWORD PTR _i$24[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+1172], 0
	mov	eax, DWORD PTR _i$24[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+1160], 0
$LN136@ShowDamage:

; 1601 : 			}
; 1602 :        }

	jmp	SHORT $LN138@ShowDamage
$LN137@ShowDamage:

; 1603 :        CancelEngineTrails(conTrails, conTrails_trail);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1216				; 000004c0H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1184				; 000004a0H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CancelEngineTrails@AircraftClass@@QAEXPAK0@Z ; AircraftClass::CancelEngineTrails

; 1604 :        CancelEngineTrails(engineTrails, engineTrails_trail);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1344				; 00000540H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1312				; 00000520H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CancelEngineTrails@AircraftClass@@QAEXPAK0@Z ; AircraftClass::CancelEngineTrails

; 1605 : 
; 1606 :        // no do puffy smoke if damaged
; 1607 : 	   if ( pctStrength < 0.50f )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	comiss	xmm0, DWORD PTR [eax+292]
	jbe	$LN135@ShowDamage

; 1608 : 	   {
; 1609 : 			rearOffset.x = PRANDFloat() * 20.0f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv2555[ebp]
	movss	xmm0, DWORD PTR tv2555[ebp]
	mulss	xmm0, DWORD PTR __real@41a00000
	movss	DWORD PTR _rearOffset$[ebp], xmm0

; 1610 : 			rearOffset.y = PRANDFloat() * 20.0f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv2559[ebp]
	movss	xmm0, DWORD PTR tv2559[ebp]
	mulss	xmm0, DWORD PTR __real@41a00000
	movss	DWORD PTR _rearOffset$[ebp+4], xmm0

; 1611 : 			rearOffset.z = -PRANDFloatPos() * 20.0f;

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv2563[ebp]
	movss	xmm0, DWORD PTR tv2563[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@41a00000
	movss	DWORD PTR _rearOffset$[ebp+8], xmm0

; 1612 : 
; 1613 : 	   		pos.x = XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _pos$[ebp]

; 1614 : 	   		pos.y = YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _pos$[ebp+4]

; 1615 : 	   		pos.z = ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _pos$[ebp+8]

; 1616 : 
; 1617 : 			/*
; 1618 : 			OTWDriver.AddSfxRequest(
; 1619 : 					new SfxClass (SFX_TRAILSMOKE,			// type
; 1620 : 					SFX_MOVES | SFX_NO_GROUND_CHECK,						// flags
; 1621 : 					&pos,							// world pos
; 1622 : 					&rearOffset,							// vector
; 1623 : 					3.5f,							// time to live
; 1624 : 					4.5f ));		// scale
; 1625 : 					*/
; 1626 : 			DrawableParticleSys::PS_AddParticleEx((SFX_TRAILSMOKE + 1),
; 1627 : 												&pos,
; 1628 : 												&rearOffset);

	lea	ecx, DWORD PTR _rearOffset$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	push	93					; 0000005dH
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
$LN135@ShowDamage:

; 1629 : 	   }
; 1630 : 	   return;

	jmp	$LN163@ShowDamage
$LN140@ShowDamage:

; 1631 :    }
; 1632 : #endif
; 1633 : 
; 1634 :    // mig29's, f4's and f5's all smoke when at MIL power
; 1635 :    // it's not damage, but since we handle the smoke here anyway.....
; 1636 : 
; 1637 :    if (!OnGround() &&
; 1638 :        af->EngineTrail() >= 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	jne	SHORT $LN134@ShowDamage
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	call	?EngineTrail@AirframeClass@@QAEHXZ	; AirframeClass::EngineTrail
	test	eax, eax
	jl	SHORT $LN134@ShowDamage

; 1639 :    {
; 1640 : //       if ( OTWDriver.renderer && OTWDriver.renderer->GetAlphaMode() )
; 1641 : 	   hasMilSmoke = af->EngineTrail();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+932]
	call	?EngineTrail@AirframeClass@@QAEHXZ	; AirframeClass::EngineTrail
	mov	DWORD PTR _hasMilSmoke$[ebp], eax
$LN134@ShowDamage:

; 1642 :    }
; 1643 : 
; 1644 :    // get rear offset behind the plane
; 1645 :    if ( drawPointer )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+332], 0
	je	SHORT $LN133@ShowDamage

; 1646 :    		radius = drawPointer->Radius();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+332]
	call	?Radius@DrawableObject@@QBEMXZ		; DrawableObject::Radius
	fstp	DWORD PTR _radius$[ebp]

; 1647 :    else

	jmp	SHORT $LN132@ShowDamage
$LN133@ShowDamage:

; 1648 :    		radius = 25.0f;

	movss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR _radius$[ebp], xmm0
$LN132@ShowDamage:

; 1649 :    rearOffset.x = -dmx[0][0]*radius;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _rearOffset$[ebp], xmm0

; 1650 :    rearOffset.y = -dmx[0][1]*radius;

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _rearOffset$[ebp+4], xmm0

; 1651 :    rearOffset.z = -dmx[0][2]*radius;

	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _rearOffset$[ebp+8], xmm0

; 1652 : 
; 1653 :    // check for contrail alt
; 1654 :    // also this can be toggled by the player
; 1655 :    //JAM 24Nov03
; 1656 :   //RV I-Hawk - contrails use 10% margin band for fading in/out 
; 1657 :    if ( -ZPos() > contrailLow90Percent &&
; 1658 :         -ZPos() < contrailHigh110Percent )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv2599[ebp]
	movss	xmm0, DWORD PTR tv2599[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, DWORD PTR ?contrailLow90Percent@@3MA
	jbe	SHORT $LN131@ShowDamage
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv2603[ebp]
	movss	xmm0, DWORD PTR tv2603[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR ?contrailHigh110Percent@@3MA
	comiss	xmm1, xmm0
	jbe	SHORT $LN131@ShowDamage

; 1659 :    {
; 1660 :        AddEngineTrails(TRAIL_CONTRAIL, conTrails, conTrails_trail); 

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1216				; 000004c0H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1184				; 000004a0H
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddEngineTrails@AircraftClass@@QAEXHPAK0@Z ; AircraftClass::AddEngineTrails

; 1661 :    }
; 1662 :    else 

	jmp	SHORT $LN130@ShowDamage
$LN131@ShowDamage:

; 1663 :    {
; 1664 :        CancelEngineTrails(conTrails, conTrails_trail);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1216				; 000004c0H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1184				; 000004a0H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CancelEngineTrails@AircraftClass@@QAEXPAK0@Z ; AircraftClass::CancelEngineTrails
$LN130@ShowDamage:

; 1665 :    }
; 1666 : 
; 1667 :   //RV I-Hawk - Separated player smoke from contrails... but emmit trail only if not declared damaged
; 1668 :    if ( playerSmokeOn && pctStrength > 0.50f  )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1468], 0
	je	SHORT $LN129@ShowDamage
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+292]
	comiss	xmm0, DWORD PTR __real@3f000000
	jbe	SHORT $LN129@ShowDamage

; 1669 :    {
; 1670 : 	   //Pick different color based on UI munition screen setting
; 1671 : 	   AddEngineTrails( colorContrail, colorConTrails, colorConTrails_trail);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1280				; 00000500H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1248				; 000004e0H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1460]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddEngineTrails@AircraftClass@@QAEXHPAK0@Z ; AircraftClass::AddEngineTrails

; 1672 :    }
; 1673 :    else 

	jmp	SHORT $LN128@ShowDamage
$LN129@ShowDamage:

; 1674 :    {
; 1675 :        CancelEngineTrails(colorConTrails, colorConTrails_trail);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1280				; 00000500H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1248				; 000004e0H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CancelEngineTrails@AircraftClass@@QAEXPAK0@Z ; AircraftClass::CancelEngineTrails
$LN128@ShowDamage:

; 1676 :    }
; 1677 : 
; 1678 :    // JPO - maybe some wing tip vortexes
; 1679 :    if ( af->auxaeroData->wingTipLocation.y != 0   &&
; 1680 : 	   af->auxaeroData->wingTipLocation.y < 500 &&
; 1681 : 	   GetKias() > 80 )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR [ecx+448]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN33@ShowDamage
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR __real@43fa0000
	comiss	xmm0, DWORD PTR [ecx+448]
	jbe	$LN33@ShowDamage
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+224]
	call	edx
	fstp	DWORD PTR tv2629[ebp]
	movss	xmm0, DWORD PTR tv2629[ebp]
	comiss	xmm0, DWORD PTR __real@42a00000
	jbe	$LN33@ShowDamage

; 1682 :    {
; 1683 : 
; 1684 : 	   //RV - I-Hawk - define variables for trails generation conditions
; 1685 : 	   int dotrails = 0;

	mov	DWORD PTR _dotrails$13[ebp], 0

; 1686 : 	   int doturb = 0;

	mov	DWORD PTR _doturb$12[ebp], 0

; 1687 : 	   int doGVortex = 0;

	mov	DWORD PTR _doGVortex$22[ebp], 0

; 1688 : 	   int doAOAVortex = 0;

	mov	DWORD PTR _doAOAVortex$15[ebp], 0

; 1689 : 	   
; 1690 : 	   //Read here from data
; 1691 : 	   float currentG = af->nzcgb;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR [ecx+1192]
	movss	DWORD PTR _currentG$31[ebp], xmm0

; 1692 : 	   float currentAOA = af->alpha;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR [eax+1152]
	movss	DWORD PTR _currentAOA$28[ebp], xmm0

; 1693 : 	   float currentVCAS = af->vcas;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR [edx+1124]
	movss	DWORD PTR _currentVCAS$17[ebp], xmm0

; 1694 : 	   bool vortexCondition = false;

	mov	BYTE PTR _vortexCondition$33[ebp], 0

; 1695 : 	   wingvortexAlphaLimit = vortexAOALimit = af->auxaeroData->vortexAOALimit;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [edx+604]
	movss	DWORD PTR ?vortexAOALimit@@3MA, xmm0
	movss	xmm0, DWORD PTR ?vortexAOALimit@@3MA
	movss	DWORD PTR ?wingvortexAlphaLimit@@3MA, xmm0

; 1696 : 
; 1697 : 	   //check here if vortex trail (the first basic one) is defined	
; 1698 : 	   if ( af->auxaeroData->vortex1Location.y )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	movss	xmm0, DWORD PTR [edx+544]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN126@ShowDamage

; 1699 : 	   {
; 1700 : 		   vortexCondition = true;

	mov	BYTE PTR _vortexCondition$33[ebp], 1
$LN126@ShowDamage:

; 1701 : 	   }
; 1702 : 
; 1703 : 	   //RV - I-Hawk - do wingtip vortex trails based on G & AOA or based on AOA only if above certain value...
; 1704 : 	   if( ( OTWDriver.renderer				&& 
; 1705 : 		   /*OTWDriver.renderer->GetAlphaMode() &&*/
; 1706 : 		   -ZPos() > minwingvortexalt		&& 
; 1707 : 		   -ZPos() < maxwingvortexalt )		&&
; 1708 : 
; 1709 : 		   ( (currentAOA > wingvortexAlpha	&& currentG > wingvortexgs ) ||
; 1710 : 			 (currentAOA > wingvortexAlphaHigh && currentAOA < wingvortexAlphaLimit &&
; 1711 : 			  currentVCAS > vortexMinSpeedLimit) ) )

	cmp	DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576, 0
	je	$LN125@ShowDamage
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv2646[ebp]
	movss	xmm0, DWORD PTR tv2646[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, DWORD PTR ?minwingvortexalt@@3MA
	jbe	$LN125@ShowDamage
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv2650[ebp]
	movss	xmm0, DWORD PTR tv2650[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR ?maxwingvortexalt@@3MA
	comiss	xmm1, xmm0
	jbe	SHORT $LN125@ShowDamage
	movss	xmm0, DWORD PTR _currentAOA$28[ebp]
	comiss	xmm0, DWORD PTR ?wingvortexAlpha@@3MA
	jbe	SHORT $LN123@ShowDamage
	movss	xmm0, DWORD PTR _currentG$31[ebp]
	comiss	xmm0, DWORD PTR ?wingvortexgs@@3MA
	ja	SHORT $LN124@ShowDamage
$LN123@ShowDamage:
	movss	xmm0, DWORD PTR _currentAOA$28[ebp]
	comiss	xmm0, DWORD PTR ?wingvortexAlphaHigh@@3MA
	jbe	SHORT $LN125@ShowDamage
	movss	xmm0, DWORD PTR ?wingvortexAlphaLimit@@3MA
	comiss	xmm0, DWORD PTR _currentAOA$28[ebp]
	jbe	SHORT $LN125@ShowDamage
	movss	xmm0, DWORD PTR _currentVCAS$17[ebp]
	comiss	xmm0, DWORD PTR ?vortexMinSpeedLimit@@3MA
	jbe	SHORT $LN125@ShowDamage
$LN124@ShowDamage:

; 1712 : 	   {
; 1713 : 		   dotrails = 1;

	mov	DWORD PTR _dotrails$13[ebp], 1
$LN125@ShowDamage:

; 1714 : 	   }
; 1715 : 
; 1716 : 	   //RV - I-Hawk - adding new Vortex trails and PS instead of the 3D model switch
; 1717 :    	   if ( OTWDriver.renderer && currentG > vortexG && vortexCondition && -ZPos() < vortexMaxaltLimit )

	cmp	DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576, 0
	je	SHORT $LN122@ShowDamage
	movss	xmm0, DWORD PTR _currentG$31[ebp]
	comiss	xmm0, DWORD PTR ?vortexG@@3MA
	jbe	SHORT $LN122@ShowDamage
	movzx	eax, BYTE PTR _vortexCondition$33[ebp]
	test	eax, eax
	je	SHORT $LN122@ShowDamage
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv2661[ebp]
	movss	xmm0, DWORD PTR tv2661[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR ?vortexMaxaltLimit@@3MA
	comiss	xmm1, xmm0
	jbe	SHORT $LN122@ShowDamage

; 1718 : 	   {
; 1719 : 		   doGVortex = 1;

	mov	DWORD PTR _doGVortex$22[ebp], 1
$LN122@ShowDamage:

; 1720 : 	   }
; 1721 : 
; 1722 : 	   if ( OTWDriver.renderer && currentAOA > vortexAOA &&
; 1723 : 		   currentAOA < vortexAOALimit &&
; 1724 : 		   vortexCondition &&
; 1725 : 		   -ZPos() < vortexMaxaltLimit )

	cmp	DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576, 0
	je	SHORT $LN121@ShowDamage
	movss	xmm0, DWORD PTR _currentAOA$28[ebp]
	comiss	xmm0, DWORD PTR ?vortexAOA@@3MA
	jbe	SHORT $LN121@ShowDamage
	movss	xmm0, DWORD PTR ?vortexAOALimit@@3MA
	comiss	xmm0, DWORD PTR _currentAOA$28[ebp]
	jbe	SHORT $LN121@ShowDamage
	movzx	ecx, BYTE PTR _vortexCondition$33[ebp]
	test	ecx, ecx
	je	SHORT $LN121@ShowDamage
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv2668[ebp]
	movss	xmm0, DWORD PTR tv2668[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR ?vortexMaxaltLimit@@3MA
	comiss	xmm1, xmm0
	jbe	SHORT $LN121@ShowDamage

; 1726 : 	   {
; 1727 : 		   doAOAVortex = 1;

	mov	DWORD PTR _doAOAVortex$15[ebp], 1
$LN121@ShowDamage:

; 1728 : 	   }	
; 1729 : 
; 1730 : 		if( g_bWakeTurbulence)

	movzx	edx, BYTE PTR ?g_bWakeTurbulence@@3_NA	; g_bWakeTurbulence
	test	edx, edx
	je	SHORT $LN117@ShowDamage

; 1731 : 		{
; 1732 : 			if(lVortex && rVortex)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+3576], 0
	je	SHORT $LN117@ShowDamage
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+3580], 0
	je	SHORT $LN117@ShowDamage

; 1733 : 			{
; 1734 : 				//if(GetKias() > 40)
; 1735 : 			if (af->IsSet(AirframeClass::InAir))

	push	2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+932]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN118@ShowDamage

; 1736 : 				// MLR - IMHO this isn't correct, a wing can generate lift with the a/c still on the ground.
; 1737 : 				//       even though the lift may not be enough to allow for lift off.
; 1738 : 				{
; 1739 : 					doturb = 1;

	mov	DWORD PTR _doturb$12[ebp], 1

; 1740 : 				}
; 1741 : 				else

	jmp	SHORT $LN117@ShowDamage
$LN118@ShowDamage:

; 1742 : 				{
; 1743 : 					lVortex->BreakRecord();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3576]
	call	?BreakRecord@AircraftTurbulence@@QAEXXZ	; AircraftTurbulence::BreakRecord

; 1744 : 					rVortex->BreakRecord();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+3580]
	call	?BreakRecord@AircraftTurbulence@@QAEXXZ	; AircraftTurbulence::BreakRecord
$LN117@ShowDamage:

; 1745 : 				}
; 1746 : 			}
; 1747 : 		}
; 1748 : 
; 1749 : 	   
; 1750 : 	   if(dotrails ||  doturb)

	cmp	DWORD PTR _dotrails$13[ebp], 0
	jne	SHORT $LN115@ShowDamage
	cmp	DWORD PTR _doturb$12[ebp], 0
	je	$LN33@ShowDamage
$LN115@ShowDamage:

; 1751 : 	   {
; 1752 : 			 Trotation *orientation = 0L;

	mov	DWORD PTR _orientation$34[ebp], 0

; 1753 : 		   // only do this if we have to
; 1754 : 			 if ((DrawableBSP*)drawPointer)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+332], 0
	je	SHORT $LN114@ShowDamage

; 1755 : 					orientation = &((DrawableBSP*)drawPointer)->orientation;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	add	ecx, 48					; 00000030H
	mov	DWORD PTR _orientation$34[ebp], ecx
$LN114@ShowDamage:

; 1756 : 		   
; 1757 : 		   if(orientation)

	cmp	DWORD PTR _orientation$34[ebp], 0
	je	$LN33@ShowDamage

; 1758 : 		   {
; 1759 : 			   Tpoint tp = af->auxaeroData->wingTipLocation;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 444				; 000001bcH
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _tp$57[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _tp$57[ebp+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR _tp$57[ebp+8], ecx

; 1760 : 			   Tpoint pos, ltip,rtip;
; 1761 : 			   
; 1762 : 			   pos.x = XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _pos$54[ebp]

; 1763 : 			   pos.y = YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _pos$54[ebp+4]

; 1764 : 			   pos.z = ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _pos$54[ebp+8]

; 1765 : 			   
; 1766 : 			   if(af->auxaeroData->hasSwingWing)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+92], 0
	je	$LN112@ShowDamage

; 1767 : 			   {
; 1768 : 				   mlTrig trig;
; 1769 : 				   mlSinCos(&trig, swingWingAngle);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+3544]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trig$1[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 1770 : 				   
; 1771 : 				   float x,y;
; 1772 : 				   x = tp.x - af->auxaeroData->swingWingHinge.x;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	movss	xmm0, DWORD PTR _tp$57[ebp]
	subss	xmm0, DWORD PTR [eax+3868]
	movss	DWORD PTR _x$10[ebp], xmm0

; 1773 : 				   y = tp.y - af->auxaeroData->swingWingHinge.y;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	movss	xmm0, DWORD PTR _tp$57[ebp+4]
	subss	xmm0, DWORD PTR [eax+3872]
	movss	DWORD PTR _y$8[ebp], xmm0

; 1774 : 				   tp.x = x * cos(swingWingAngle) - y * sin(swingWingAngle) + af->auxaeroData->swingWingHinge.x;

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+3544]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv2708[ebp]
	movss	xmm0, DWORD PTR tv2708[ebp]
	mulss	xmm0, DWORD PTR _x$10[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm1, DWORD PTR [edx+3544]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv3640[ebp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv2716[ebp]
	movss	xmm0, DWORD PTR tv2716[ebp]
	mulss	xmm0, DWORD PTR _y$8[ebp]
	movss	xmm1, DWORD PTR tv3640[ebp]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	addss	xmm1, DWORD PTR [edx+3868]
	movss	DWORD PTR _tp$57[ebp], xmm1

; 1775 : 				   tp.y = x * sin(swingWingAngle) + y * cos(swingWingAngle) + af->auxaeroData->swingWingHinge.y;

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+3544]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv2725[ebp]
	movss	xmm0, DWORD PTR tv2725[ebp]
	mulss	xmm0, DWORD PTR _x$10[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm1, DWORD PTR [ecx+3544]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv3642[ebp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv2733[ebp]
	movss	xmm0, DWORD PTR tv2733[ebp]
	mulss	xmm0, DWORD PTR _y$8[ebp]
	movss	xmm1, DWORD PTR tv3642[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	addss	xmm1, DWORD PTR [ecx+3872]
	movss	DWORD PTR _tp$57[ebp+4], xmm1
$LN112@ShowDamage:

; 1776 : 			   }
; 1777 : 
; 1778 : 			   AssignACOrientation(orientation, tp, ltip, pos, false);

	push	0
	lea	edx, DWORD PTR _pos$54[ebp]
	push	edx
	lea	eax, DWORD PTR _ltip$56[ebp]
	push	eax
	lea	ecx, DWORD PTR _tp$57[ebp]
	push	ecx
	lea	edx, DWORD PTR _orientation$34[ebp]
	push	edx
	call	?AssignACOrientation@@YAXAAPAUTrotation@@AAUTpoint@@11_N@Z ; AssignACOrientation
	add	esp, 20					; 00000014H

; 1779 : 			   AssignACOrientation(orientation, tp, rtip, pos, true);

	push	1
	lea	eax, DWORD PTR _pos$54[ebp]
	push	eax
	lea	ecx, DWORD PTR _rtip$55[ebp]
	push	ecx
	lea	edx, DWORD PTR _tp$57[ebp]
	push	edx
	lea	eax, DWORD PTR _orientation$34[ebp]
	push	eax
	call	?AssignACOrientation@@YAXAAPAUTrotation@@AAUTpoint@@11_N@Z ; AssignACOrientation
	add	esp, 20					; 00000014H

; 1780 : 			  
; 1781 : 			   if(dotrails)

	cmp	DWORD PTR _dotrails$13[ebp], 0
	je	$LN111@ShowDamage

; 1782 : 			   {
; 1783 : 				   //RV - I-Hawk - RV new trails call changes
; 1784 : 				   if(lwingvortex == NULL) 

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1376], 0
	jne	SHORT $LN110@ShowDamage

; 1785 : 				   {
; 1786 : 					   //lwingvortex = new DrawableTrail(TRAIL_WINGTIPVTX);
; 1787 : 					   lwingvortex = TRAIL_WINGTIPVTX;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1376], 19		; 00000013H
$LN110@ShowDamage:

; 1788 : 					   //OTWDriver.InsertObject(lwingvortex);
; 1789 : 				   }
; 1790 : 				   //OTWDriver.AddTrailHead (lwingvortex, ltip.x, ltip.y, ltip.z );
; 1791 : 
; 1792 : 				   //RV - I-Hawk - Added alpha/size change with altitude, speed and G for wingtip vortex
; 1793 : 				   wingvtxTrailAlphaCx = wingvtxTrailSizeCx = 1;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?wingvtxTrailSizeCx@@3MA, xmm0
	movss	xmm0, DWORD PTR ?wingvtxTrailSizeCx@@3MA
	movss	DWORD PTR ?wingvtxTrailAlphaCx@@3MA, xmm0

; 1794 : 
; 1795 : 				   if ( currentG > 3.5 )

	cvtss2sd xmm0, DWORD PTR _currentG$31[ebp]
	comisd	xmm0, QWORD PTR __real@400c000000000000
	jbe	SHORT $LN109@ShowDamage

; 1796 : 				   {
; 1797 :                       wingvtxTrailAlphaCx += (currentG - 5) * 0.1f; 

	movss	xmm0, DWORD PTR _currentG$31[ebp]
	subss	xmm0, DWORD PTR __real@40a00000
	mulss	xmm0, DWORD PTR __real@3dcccccd
	addss	xmm0, DWORD PTR ?wingvtxTrailAlphaCx@@3MA
	movss	DWORD PTR ?wingvtxTrailAlphaCx@@3MA, xmm0
$LN109@ShowDamage:

; 1798 : 				   }
; 1799 : 
; 1800 : 				   if ( currentVCAS < 250 && currentVCAS > vortexMinSpeedLimit )

	movss	xmm0, DWORD PTR __real@437a0000
	comiss	xmm0, DWORD PTR _currentVCAS$17[ebp]
	jbe	SHORT $LN108@ShowDamage
	movss	xmm0, DWORD PTR _currentVCAS$17[ebp]
	comiss	xmm0, DWORD PTR ?vortexMinSpeedLimit@@3MA
	jbe	SHORT $LN108@ShowDamage

; 1801 : 				   {
; 1802 : 					   wingvtxTrailAlphaCx *= (currentVCAS - vortexMinSpeedLimit) / (250.0f - vortexMinSpeedLimit);

	movss	xmm0, DWORD PTR _currentVCAS$17[ebp]
	subss	xmm0, DWORD PTR ?vortexMinSpeedLimit@@3MA
	movss	xmm1, DWORD PTR __real@437a0000
	subss	xmm1, DWORD PTR ?vortexMinSpeedLimit@@3MA
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR ?wingvtxTrailAlphaCx@@3MA
	movss	DWORD PTR ?wingvtxTrailAlphaCx@@3MA, xmm0
$LN108@ShowDamage:

; 1803 : 				   }
; 1804 : 
; 1805 : 				   float wingtipTrailAltCx = 1.0f - ( -ZPos() / maxwingvortexalt );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv2758[ebp]
	movss	xmm0, DWORD PTR tv2758[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR ?maxwingvortexalt@@3MA
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR _wingtipTrailAltCx$11[ebp], xmm1

; 1806 : 				   wingvtxTrailAlphaCx *= wingtipTrailAltCx;

	movss	xmm0, DWORD PTR ?wingvtxTrailAlphaCx@@3MA
	mulss	xmm0, DWORD PTR _wingtipTrailAltCx$11[ebp]
	movss	DWORD PTR ?wingvtxTrailAlphaCx@@3MA, xmm0

; 1807 : 				   wingvtxTrailSizeCx *=  wingtipTrailAltCx;

	movss	xmm0, DWORD PTR ?wingvtxTrailSizeCx@@3MA
	mulss	xmm0, DWORD PTR _wingtipTrailAltCx$11[ebp]
	movss	DWORD PTR ?wingvtxTrailSizeCx@@3MA, xmm0

; 1808 : 
; 1809 : 				   //Never let the sizeCx get below 0.6 as it would cause the trail to start
; 1810 : 				   //with a puff smaller than 0.5, may cause freezes.
; 1811 : 				   if ( wingvtxTrailSizeCx < 0.6f )

	movss	xmm0, DWORD PTR __real@3f19999a
	comiss	xmm0, DWORD PTR ?wingvtxTrailSizeCx@@3MA
	jbe	SHORT $LN107@ShowDamage

; 1812 : 				   {
; 1813 : 					   wingvtxTrailSizeCx = 0.6f; 

	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR ?wingvtxTrailSizeCx@@3MA, xmm0
$LN107@ShowDamage:

; 1814 : 				   }
; 1815 : 
; 1816 : 				   //Never let the alphaCx get below 0
; 1817 : 				   if ( wingvtxTrailAlphaCx < 0 )

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR ?wingvtxTrailAlphaCx@@3MA
	jbe	SHORT $LN106@ShowDamage

; 1818 : 				   {
; 1819 : 						wingvtxTrailAlphaCx = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?wingvtxTrailAlphaCx@@3MA, xmm0
$LN106@ShowDamage:

; 1820 : 				   }
; 1821 : 
; 1822 : 				   lwingvortex_trail = DrawableParticleSys::PS_EmitTrail(lwingvortex_trail, lwingvortex, ltip.x, ltip.y, ltip.z, wingvtxTrailAlphaCx, wingvtxTrailSizeCx);

	push	ecx
	movss	xmm0, DWORD PTR ?wingvtxTrailSizeCx@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?wingvtxTrailAlphaCx@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ltip$56[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ltip$56[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ltip$56[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1376]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1380]
	push	eax
	call	?PS_EmitTrail@DrawableParticleSys@@SAKKHMMMMM@Z ; DrawableParticleSys::PS_EmitTrail
	add	esp, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1380], eax

; 1823 : 				   
; 1824 : 				   if(rwingvortex == NULL)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+1384], 0
	jne	SHORT $LN105@ShowDamage

; 1825 : 				   {
; 1826 : 					   //rwingvortex = new DrawableTrail(TRAIL_WINGTIPVTX);
; 1827 : 					   rwingvortex = TRAIL_WINGTIPVTX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1384], 19		; 00000013H
$LN105@ShowDamage:

; 1828 : 					   //OTWDriver.InsertObject(rwingvortex);
; 1829 : 				   }
; 1830 : 				   
; 1831 : 				   //OTWDriver.AddTrailHead (rwingvortex, rtip.x, rtip.y, rtip.z );
; 1832 : 
; 1833 : 				   rwingvortex_trail = DrawableParticleSys::PS_EmitTrail(rwingvortex_trail, rwingvortex, rtip.x, rtip.y, rtip.z, wingvtxTrailAlphaCx, wingvtxTrailSizeCx);

	push	ecx
	movss	xmm0, DWORD PTR ?wingvtxTrailSizeCx@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?wingvtxTrailAlphaCx@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rtip$55[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rtip$55[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rtip$55[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1384]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1388]
	push	ecx
	call	?PS_EmitTrail@DrawableParticleSys@@SAKKHMMMMM@Z ; DrawableParticleSys::PS_EmitTrail
	add	esp, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1388], eax
$LN111@ShowDamage:

; 1834 : 			   }
; 1835 : 			   
; 1836 : 			   
; 1837 : 			   if(doturb)

	cmp	DWORD PTR _doturb$12[ebp], 0
	je	$LN104@ShowDamage

; 1838 : 			   {
; 1839 : 					float acweight = af->weight * 0.00001f;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR [ecx+44]
	mulss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR _acweight$6[ebp], xmm0

; 1840 : 					float acaoa = currentAOA * 0.1f;

	movss	xmm0, DWORD PTR _currentAOA$28[ebp]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _acaoa$5[ebp], xmm0

; 1841 : 					float strength = acweight * acaoa;

	movss	xmm0, DWORD PTR _acweight$6[ebp]
	mulss	xmm0, DWORD PTR _acaoa$5[ebp]
	movss	DWORD PTR _strength$7[ebp], xmm0

; 1842 : 
; 1843 : 					lVortex->RecordPosition(strength, ltip.x, ltip.y, ltip.z);

	push	ecx
	movss	xmm0, DWORD PTR _ltip$56[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ltip$56[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ltip$56[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _strength$7[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+3576]
	call	?RecordPosition@AircraftTurbulence@@QAEXMMMM@Z ; AircraftTurbulence::RecordPosition

; 1844 : 				    rVortex->RecordPosition(strength, rtip.x, rtip.y, rtip.z);

	push	ecx
	movss	xmm0, DWORD PTR _rtip$55[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rtip$55[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rtip$55[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _strength$7[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3580]
	call	?RecordPosition@AircraftTurbulence@@QAEXMMMM@Z ; AircraftTurbulence::RecordPosition
$LN104@ShowDamage:

; 1845 : 			   }
; 1846 : 
; 1847 : #if NEW_VORTEX_TRAILS
; 1848 : 
; 1849 : 			  //RV - I-Hawk - Vortex stuff starting here
; 1850 : 			  if( doGVortex || doAOAVortex )

	cmp	DWORD PTR _doGVortex$22[ebp], 0
	jne	SHORT $LN102@ShowDamage
	cmp	DWORD PTR _doAOAVortex$15[ebp], 0
	je	$LN103@ShowDamage
$LN102@ShowDamage:

; 1851 : 				{
; 1852 : 				  //Get the vortex locations from data. vortexAOALimit was already taken
; 1853 : 				  //since it was used above with the wingtip trails
; 1854 : 
; 1855 : 				  Tpoint vtx1 = af->auxaeroData->vortex1Location;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 540				; 0000021cH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vtx1$53[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vtx1$53[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vtx1$53[ebp+8], eax

; 1856 : 					Tpoint vtx2 = af->auxaeroData->vortex2Location;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 552				; 00000228H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vtx2$66[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vtx2$66[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vtx2$66[ebp+8], eax

; 1857 : 					Tpoint vtx3 = af->auxaeroData->vortexPS1Location;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 564				; 00000234H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vtx3$65[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vtx3$65[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vtx3$65[ebp+8], eax

; 1858 : 					Tpoint vtx4 = af->auxaeroData->vortexPS2Location;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 576				; 00000240H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vtx4$64[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vtx4$64[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vtx4$64[ebp+8], eax

; 1859 : 					Tpoint vtx5 = af->auxaeroData->vortexPS3Location;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 588				; 0000024cH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vtx5$62[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vtx5$62[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vtx5$62[ebp+8], eax

; 1860 : 					int largeVortex = af->auxaeroData->largeVortex;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+600]
	mov	DWORD PTR _largeVortex$35[ebp], ecx

; 1861 : 
; 1862 : 					Tpoint pos, PSvec;
; 1863 : 					Tpoint lvtx1, rvtx1;
; 1864 : 					int theSFX;
; 1865 : 					float Xoffset, Zoffset, currentMach = af->mach;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR [eax+1144]
	movss	DWORD PTR _currentMach$9[ebp], xmm0

; 1866 : 
; 1867 : 					//Get world position of AC
; 1868 : 					pos.x = XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _pos$67[ebp]

; 1869 : 					pos.y = YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _pos$67[ebp+4]

; 1870 : 					pos.z = ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _pos$67[ebp+8]

; 1871 : 
; 1872 : 					//Get the AC heading ( the Delta() direction )
; 1873 : 					PSvec.x = XDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR _PSvec$63[ebp]

; 1874 : 					PSvec.y = YDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR _PSvec$63[ebp+4]

; 1875 : 					PSvec.z = ZDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR _PSvec$63[ebp+8]

; 1876 :                     
; 1877 : 					AssignACOrientation(orientation, vtx1, lvtx1, pos, false);

	push	0
	lea	ecx, DWORD PTR _pos$67[ebp]
	push	ecx
	lea	edx, DWORD PTR _lvtx1$52[ebp]
	push	edx
	lea	eax, DWORD PTR _vtx1$53[ebp]
	push	eax
	lea	ecx, DWORD PTR _orientation$34[ebp]
	push	ecx
	call	?AssignACOrientation@@YAXAAPAUTrotation@@AAUTpoint@@11_N@Z ; AssignACOrientation
	add	esp, 20					; 00000014H

; 1878 : 					AssignACOrientation(orientation, vtx1, rvtx1, pos, true);

	push	1
	lea	edx, DWORD PTR _pos$67[ebp]
	push	edx
	lea	eax, DWORD PTR _rvtx1$51[ebp]
	push	eax
	lea	ecx, DWORD PTR _vtx1$53[ebp]
	push	ecx
	lea	edx, DWORD PTR _orientation$34[ebp]
	push	edx
	call	?AssignACOrientation@@YAXAAPAUTrotation@@AAUTpoint@@11_N@Z ; AssignACOrientation
	add	esp, 20					; 00000014H

; 1879 : 
; 1880 : 					vortex1AlphaCx = vortex1SizeCx = 1;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?vortex1SizeCx@@3MA, xmm0
	movss	xmm0, DWORD PTR ?vortex1SizeCx@@3MA
	movss	DWORD PTR ?vortex1AlphaCx@@3MA, xmm0

; 1881 : 
; 1882 : 					//normalize the alpha and size Cxs by G
; 1883 : 					if ( doGVortex )

	cmp	DWORD PTR _doGVortex$22[ebp], 0
	je	SHORT $LN101@ShowDamage

; 1884 : 					{
; 1885 : 						vortex1AlphaCx += ( currentG - 8.5f  ) * 0.2f;

	movss	xmm0, DWORD PTR _currentG$31[ebp]
	subss	xmm0, DWORD PTR __real@41080000
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	addss	xmm0, DWORD PTR ?vortex1AlphaCx@@3MA
	movss	DWORD PTR ?vortex1AlphaCx@@3MA, xmm0

; 1886 : 						vortex1SizeCx += ( currentG - 7.5f ) * 0.1f; 

	movss	xmm0, DWORD PTR _currentG$31[ebp]
	subss	xmm0, DWORD PTR __real@40f00000
	mulss	xmm0, DWORD PTR __real@3dcccccd
	addss	xmm0, DWORD PTR ?vortex1SizeCx@@3MA
	movss	DWORD PTR ?vortex1SizeCx@@3MA, xmm0
$LN101@ShowDamage:

; 1887 : 					}
; 1888 : 					
; 1889 : 					//normalize by AOA
; 1890 : 					//If both G and AOA conditions are filled, use only G values to calculate Cxs
; 1891 : 					if ( doAOAVortex && !doGVortex ) 

	cmp	DWORD PTR _doAOAVortex$15[ebp], 0
	je	SHORT $LN100@ShowDamage
	cmp	DWORD PTR _doGVortex$22[ebp], 0
	jne	SHORT $LN100@ShowDamage

; 1892 : 					{
; 1893 : 						vortex1AlphaCx += ( currentAOA - vortexAOALimit  ) *  ( 1.0f / vortexAOALimit );

	movss	xmm0, DWORD PTR _currentAOA$28[ebp]
	subss	xmm0, DWORD PTR ?vortexAOALimit@@3MA
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, DWORD PTR ?vortexAOALimit@@3MA
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR ?vortex1AlphaCx@@3MA
	movss	DWORD PTR ?vortex1AlphaCx@@3MA, xmm0

; 1894 : 						vortex1SizeCx += ( currentAOA - vortexAOA ) * 0.03f;

	movss	xmm0, DWORD PTR _currentAOA$28[ebp]
	subss	xmm0, DWORD PTR ?vortexAOA@@3MA
	mulss	xmm0, DWORD PTR __real@3cf5c28f
	addss	xmm0, DWORD PTR ?vortex1SizeCx@@3MA
	movss	DWORD PTR ?vortex1SizeCx@@3MA, xmm0
$LN100@ShowDamage:

; 1895 : 					}
; 1896 : 
; 1897 : 					//normalize by altitude, only the alpha Cx, not size Cx
; 1898 : 					float trailAltCx = 1.0f - ( -ZPos() / vortexMaxaltLimit ); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv2937[ebp]
	movss	xmm0, DWORD PTR tv2937[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR ?vortexMaxaltLimit@@3MA
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR _trailAltCx$4[ebp], xmm1

; 1899 : 					vortex1AlphaCx *= trailAltCx;

	movss	xmm0, DWORD PTR ?vortex1AlphaCx@@3MA
	mulss	xmm0, DWORD PTR _trailAltCx$4[ebp]
	movss	DWORD PTR ?vortex1AlphaCx@@3MA, xmm0

; 1900 : 					
; 1901 : 					//make sure we never get the Cxs below 0
; 1902 : 					if ( vortex1AlphaCx < 0 || vortex1SizeCx < 0  )

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR ?vortex1AlphaCx@@3MA
	ja	SHORT $LN98@ShowDamage
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR ?vortex1SizeCx@@3MA
	jbe	SHORT $LN99@ShowDamage
$LN98@ShowDamage:

; 1903 : 					{
; 1904 : 						vortex1AlphaCx = vortex1SizeCx = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?vortex1SizeCx@@3MA, xmm0
	movss	xmm0, DWORD PTR ?vortex1SizeCx@@3MA
	movss	DWORD PTR ?vortex1AlphaCx@@3MA, xmm0
$LN99@ShowDamage:

; 1905 : 					}
; 1906 : 
; 1907 :                     //Use the larger trails/PS when specified in .dat file (for larger ACs)
; 1908 : 					//largeVortex is a bitwise used variable. Deciding size/types of the trails/PS
; 1909 : 					//according to the appropriate bits as mentioned below
; 1910 : 
; 1911 : 					//bit 0 is to decide for the 1st vortex trail
; 1912 : 					//bit 1 is to decide for the 2nd vortex trail
; 1913 : 					//bits 2,3,4 are to decide for the 3 PS generators
; 1914 : 
; 1915 : 					if( lvortex1 == NULL || rvortex1 == NULL ) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1392], 0
	je	SHORT $LN96@ShowDamage
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1400], 0
	jne	SHORT $LN94@ShowDamage
$LN96@ShowDamage:

; 1916 : 					{
; 1917 : 						if ( largeVortex & 1 ) //check if bit 0 of largeVortex is set

	mov	edx, DWORD PTR _largeVortex$35[ebp]
	and	edx, 1
	je	SHORT $LN95@ShowDamage

; 1918 : 						{
; 1919 : 							lvortex1 = rvortex1 = TRAIL_VORTEX_LARGE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1400], 54		; 00000036H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1392], 54		; 00000036H

; 1920 : 						}
; 1921 : 					 else

	jmp	SHORT $LN94@ShowDamage
$LN95@ShowDamage:

; 1922 : 						{
; 1923 : 							lvortex1 = rvortex1 = TRAIL_VORTEX;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1400], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1392], 1
$LN94@ShowDamage:

; 1924 : 						}
; 1925 : 					}
; 1926 : 					
; 1927 : 					lvortex1_trail = DrawableParticleSys::PS_EmitTrail(lvortex1_trail, lvortex1, lvtx1.x, lvtx1.y, lvtx1.z, vortex1AlphaCx, vortex1SizeCx);

	push	ecx
	movss	xmm0, DWORD PTR ?vortex1SizeCx@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?vortex1AlphaCx@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _lvtx1$52[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _lvtx1$52[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _lvtx1$52[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1392]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1396]
	push	ecx
	call	?PS_EmitTrail@DrawableParticleSys@@SAKKHMMMMM@Z ; DrawableParticleSys::PS_EmitTrail
	add	esp, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1396], eax

; 1928 : 					rvortex1_trail = DrawableParticleSys::PS_EmitTrail(rvortex1_trail, rvortex1, rvtx1.x, rvtx1.y, rvtx1.z, vortex1AlphaCx, vortex1SizeCx);

	push	ecx
	movss	xmm0, DWORD PTR ?vortex1SizeCx@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?vortex1AlphaCx@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rvtx1$51[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rvtx1$51[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rvtx1$51[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1400]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1404]
	push	eax
	call	?PS_EmitTrail@DrawableParticleSys@@SAKKHMMMMM@Z ; DrawableParticleSys::PS_EmitTrail
	add	esp, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1404], eax

; 1929 : 
; 1930 : 					//if AC has a second trail location defined
; 1931 : 
; 1932 : 					//using bits 5,6,7 of largeVortex to decide if this position will be used
; 1933 : 					//as a trail or as PS. This leavs option for some ACs to have
; 1934 : 					//wide vortex over the entire body and wings.
; 1935 : 					if ( vtx2.y && !(largeVortex & 32) && !(largeVortex & 64) && !(largeVortex & 128) )

	movss	xmm0, DWORD PTR _vtx2$66[ebp+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN93@ShowDamage
	mov	edx, DWORD PTR _largeVortex$35[ebp]
	and	edx, 32					; 00000020H
	jne	$LN93@ShowDamage
	mov	eax, DWORD PTR _largeVortex$35[ebp]
	and	eax, 64					; 00000040H
	jne	$LN93@ShowDamage
	mov	ecx, DWORD PTR _largeVortex$35[ebp]
	and	ecx, 128				; 00000080H
	jne	$LN93@ShowDamage

; 1936 : 					{
; 1937 : 						Tpoint lvtx2, rvtx2;
; 1938 : 
; 1939 : 						AssignACOrientation(orientation, vtx2, lvtx2, pos, false);

	push	0
	lea	edx, DWORD PTR _pos$67[ebp]
	push	edx
	lea	eax, DWORD PTR _lvtx2$49[ebp]
	push	eax
	lea	ecx, DWORD PTR _vtx2$66[ebp]
	push	ecx
	lea	edx, DWORD PTR _orientation$34[ebp]
	push	edx
	call	?AssignACOrientation@@YAXAAPAUTrotation@@AAUTpoint@@11_N@Z ; AssignACOrientation
	add	esp, 20					; 00000014H

; 1940 : 						AssignACOrientation(orientation, vtx2, rvtx2, pos, true);

	push	1
	lea	eax, DWORD PTR _pos$67[ebp]
	push	eax
	lea	ecx, DWORD PTR _rvtx2$50[ebp]
	push	ecx
	lea	edx, DWORD PTR _vtx2$66[ebp]
	push	edx
	lea	eax, DWORD PTR _orientation$34[ebp]
	push	eax
	call	?AssignACOrientation@@YAXAAPAUTrotation@@AAUTpoint@@11_N@Z ; AssignACOrientation
	add	esp, 20					; 00000014H

; 1941 : 
; 1942 : 						//Use same alpha Cx for the second trail as the first trail
; 1943 : 						vortex2AlphaCx = vortex1AlphaCx;

	movss	xmm0, DWORD PTR ?vortex1AlphaCx@@3MA
	movss	DWORD PTR ?vortex2AlphaCx@@3MA, xmm0

; 1944 : 						vortex2SizeCx = vortex1SizeCx;

	movss	xmm0, DWORD PTR ?vortex1SizeCx@@3MA
	movss	DWORD PTR ?vortex2SizeCx@@3MA, xmm0

; 1945 : 						
; 1946 : 						if( lvortex2 == NULL || rvortex2 == NULL ) 

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1408], 0
	je	SHORT $LN91@ShowDamage
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+1416], 0
	jne	SHORT $LN89@ShowDamage
$LN91@ShowDamage:

; 1947 : 						{
; 1948 : 							if ( largeVortex & 2 ) //check if bit 1 of largeVortex is set

	mov	eax, DWORD PTR _largeVortex$35[ebp]
	and	eax, 2
	je	SHORT $LN90@ShowDamage

; 1949 : 							{
; 1950 : 								lvortex2 = rvortex2 = TRAIL_VORTEX_LARGE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1416], 54		; 00000036H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1408], 54		; 00000036H

; 1951 : 							}
; 1952 : 							else

	jmp	SHORT $LN89@ShowDamage
$LN90@ShowDamage:

; 1953 : 							{
; 1954 : 									lvortex2 = rvortex2 = TRAIL_VORTEX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1416], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1408], 1
$LN89@ShowDamage:

; 1955 : 							}
; 1956 : 						}
; 1957 : 						
; 1958 : 						lvortex2_trail = DrawableParticleSys::PS_EmitTrail(lvortex2_trail, lvortex2, lvtx2.x, lvtx2.y, lvtx2.z, vortex2AlphaCx, vortex2SizeCx);

	push	ecx
	movss	xmm0, DWORD PTR ?vortex2SizeCx@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?vortex2AlphaCx@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _lvtx2$49[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _lvtx2$49[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _lvtx2$49[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1408]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1412]
	push	edx
	call	?PS_EmitTrail@DrawableParticleSys@@SAKKHMMMMM@Z ; DrawableParticleSys::PS_EmitTrail
	add	esp, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1412], eax

; 1959 : 						rvortex2_trail = DrawableParticleSys::PS_EmitTrail(rvortex2_trail, rvortex2, rvtx2.x, rvtx2.y, rvtx2.z, vortex2AlphaCx, vortex2SizeCx);

	push	ecx
	movss	xmm0, DWORD PTR ?vortex2SizeCx@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?vortex2AlphaCx@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rvtx2$50[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rvtx2$50[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rvtx2$50[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1416]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1420]
	push	edx
	call	?PS_EmitTrail@DrawableParticleSys@@SAKKHMMMMM@Z ; DrawableParticleSys::PS_EmitTrail
	add	esp, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1420], eax
$LN93@ShowDamage:

; 1960 : 					}
; 1961 : 
; 1962 : 					//are we doing the PS vortex?
; 1963 : 					if ( ( (currentG > 7.0f) ||( currentAOA > ((vortexAOALimit + vortexAOA) / 2.0f )) ) && 
; 1964 : 						 ( vtx3.y || vtx4.y || vtx5.y ))

	movss	xmm0, DWORD PTR _currentG$31[ebp]
	comiss	xmm0, DWORD PTR __real@40e00000
	ja	SHORT $LN87@ShowDamage
	movss	xmm0, DWORD PTR ?vortexAOALimit@@3MA
	addss	xmm0, DWORD PTR ?vortexAOA@@3MA
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR _currentAOA$28[ebp]
	comiss	xmm1, xmm0
	jbe	$LN38@ShowDamage
$LN87@ShowDamage:
	movss	xmm0, DWORD PTR _vtx3$65[ebp+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN86@ShowDamage
	movss	xmm0, DWORD PTR _vtx4$64[ebp+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN86@ShowDamage
	movss	xmm0, DWORD PTR _vtx5$62[ebp+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN38@ShowDamage
$LN86@ShowDamage:

; 1965 : 					{
; 1966 : 
; 1967 : 						//local position variables for the PS vortex effects 
; 1968 : 						Tpoint lvtxPS1, rvtxPS1, lvtxPS2, rvtxPS2, lvtxPS3, rvtxPS3;
; 1969 : 
; 1970 : 						//determine if the PS is used and how (which type of PS, strong, weak etc)
; 1971 : 						int enablePS1, enablePS2, enablePS3;
; 1972 : 						enablePS1 = enablePS2 = enablePS3 = 0;

	mov	DWORD PTR _enablePS3$25[ebp], 0
	mov	edx, DWORD PTR _enablePS3$25[ebp]
	mov	DWORD PTR _enablePS2$26[ebp], edx
	mov	eax, DWORD PTR _enablePS2$26[ebp]
	mov	DWORD PTR _enablePS1$23[ebp], eax

; 1973 : 
; 1974 : 						//fix Z positioning 1 feet up, as it's always when pulling up,
; 1975 : 						//and we are using the ZDelta() for the PS vector
; 1976 : 						vtx3.z -= 1.0f;

	movss	xmm0, DWORD PTR _vtx3$65[ebp+8]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vtx3$65[ebp+8], xmm0

; 1977 : 						vtx4.z -= 1.0f;

	movss	xmm0, DWORD PTR _vtx4$64[ebp+8]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vtx4$64[ebp+8], xmm0

; 1978 : 						vtx5.z -= 1.0f;

	movss	xmm0, DWORD PTR _vtx5$62[ebp+8]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vtx5$62[ebp+8], xmm0

; 1979 : 
; 1980 : 						// if we are using the larger vortex PS, give it another feet up correction
; 1981 : 						if ( largeVortex & 4 )

	mov	ecx, DWORD PTR _largeVortex$35[ebp]
	and	ecx, 4
	je	SHORT $LN85@ShowDamage

; 1982 : 						{
; 1983 : 							vtx3.z -= 1.0f;

	movss	xmm0, DWORD PTR _vtx3$65[ebp+8]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vtx3$65[ebp+8], xmm0
$LN85@ShowDamage:

; 1984 : 						}
; 1985 : 
; 1986 : 						if ( largeVortex & 8 )

	mov	edx, DWORD PTR _largeVortex$35[ebp]
	and	edx, 8
	je	SHORT $LN84@ShowDamage

; 1987 : 						{
; 1988 : 							vtx4.z -= 1.0f;

	movss	xmm0, DWORD PTR _vtx4$64[ebp+8]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vtx4$64[ebp+8], xmm0
$LN84@ShowDamage:

; 1989 : 						}
; 1990 : 
; 1991 : 						if ( largeVortex & 16 )

	mov	eax, DWORD PTR _largeVortex$35[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN83@ShowDamage

; 1992 : 						{
; 1993 : 							vtx5.z -= 1.0f;

	movss	xmm0, DWORD PTR _vtx5$62[ebp+8]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vtx5$62[ebp+8], xmm0
$LN83@ShowDamage:

; 1994 : 						}
; 1995 : 
; 1996 : 						Xoffset = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _Xoffset$19[ebp], xmm0

; 1997 : 
; 1998 : 						//fix X positioning as using the XDelta() for vector, so if AC is too fast
; 1999 : 						//need to reposition the PS origin
; 2000 : 						if ( currentMach > 0.9 )

	cvtss2sd xmm0, DWORD PTR _currentMach$9[ebp]
	comisd	xmm0, QWORD PTR __real@3feccccccccccccd
	jbe	SHORT $LN82@ShowDamage

; 2001 : 						{
; 2002 : 							Xoffset = (currentMach - 0.9f) * -7.0f;

	movss	xmm0, DWORD PTR _currentMach$9[ebp]
	subss	xmm0, DWORD PTR __real@3f666666
	mulss	xmm0, DWORD PTR __real@c0e00000
	movss	DWORD PTR _Xoffset$19[ebp], xmm0

; 2003 : 							vtx3.x += Xoffset;

	movss	xmm0, DWORD PTR _vtx3$65[ebp]
	addss	xmm0, DWORD PTR _Xoffset$19[ebp]
	movss	DWORD PTR _vtx3$65[ebp], xmm0

; 2004 : 							vtx4.x += Xoffset;

	movss	xmm0, DWORD PTR _vtx4$64[ebp]
	addss	xmm0, DWORD PTR _Xoffset$19[ebp]
	movss	DWORD PTR _vtx4$64[ebp], xmm0

; 2005 : 							vtx5.x += Xoffset;

	movss	xmm0, DWORD PTR _vtx5$62[ebp]
	addss	xmm0, DWORD PTR _Xoffset$19[ebp]
	movss	DWORD PTR _vtx5$62[ebp], xmm0
$LN82@ShowDamage:

; 2006 : 						}
; 2007 : 
; 2008 : 						//fix Z positioning when pulling high G, to make the vortex seen below the
; 2009 : 						//wing as less as possible
; 2010 : 						if ( currentG > 7.0f )

	movss	xmm0, DWORD PTR _currentG$31[ebp]
	comiss	xmm0, DWORD PTR __real@40e00000
	jbe	$LN78@ShowDamage

; 2011 : 						{
; 2012 : 							if ( largeVortex & 4 )

	mov	ecx, DWORD PTR _largeVortex$35[ebp]
	and	ecx, 4
	je	SHORT $LN80@ShowDamage

; 2013 : 							{
; 2014 :                  Zoffset = (currentG - 7.0f) * 1.0f;

	movss	xmm0, DWORD PTR _currentG$31[ebp]
	subss	xmm0, DWORD PTR __real@40e00000
	mulss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _Zoffset$21[ebp], xmm0

; 2015 : 							}
; 2016 : 
; 2017 : 							else

	jmp	SHORT $LN79@ShowDamage
$LN80@ShowDamage:

; 2018 : 							{
; 2019 : 								Zoffset = (currentG - 7.0f) * - 0.75f;

	movss	xmm0, DWORD PTR _currentG$31[ebp]
	subss	xmm0, DWORD PTR __real@40e00000
	mulss	xmm0, DWORD PTR __real@bf400000
	movss	DWORD PTR _Zoffset$21[ebp], xmm0
$LN79@ShowDamage:

; 2020 : 							}
; 2021 : 
; 2022 : 							vtx3.z += Zoffset;

	movss	xmm0, DWORD PTR _vtx3$65[ebp+8]
	addss	xmm0, DWORD PTR _Zoffset$21[ebp]
	movss	DWORD PTR _vtx3$65[ebp+8], xmm0

; 2023 : 							vtx4.z += Zoffset;

	movss	xmm0, DWORD PTR _vtx4$64[ebp+8]
	addss	xmm0, DWORD PTR _Zoffset$21[ebp]
	movss	DWORD PTR _vtx4$64[ebp+8], xmm0

; 2024 : 							vtx5.z += Zoffset;

	movss	xmm0, DWORD PTR _vtx5$62[ebp+8]
	addss	xmm0, DWORD PTR _Zoffset$21[ebp]
	movss	DWORD PTR _vtx5$62[ebp+8], xmm0

; 2025 : 
; 2026 : 							// check if bits 5,6 or 7 are set, means that vortex2 is used as a PS
; 2027 : 							// so fix it as well...
; 2028 : 							if ( largeVortex & 224 )

	mov	edx, DWORD PTR _largeVortex$35[ebp]
	and	edx, 224				; 000000e0H
	je	SHORT $LN78@ShowDamage

; 2029 : 							{
; 2030 : 								vtx2.z += Zoffset;

	movss	xmm0, DWORD PTR _vtx2$66[ebp+8]
	addss	xmm0, DWORD PTR _Zoffset$21[ebp]
	movss	DWORD PTR _vtx2$66[ebp+8], xmm0
$LN78@ShowDamage:

; 2031 : 							}
; 2032 : 						}
; 2033 : 
; 2034 : 						//Start to determine a Cx for the PS effects, I'm using this Cx
; 2035 : 						//to decide when the PS will be rendered and which type for each position
; 2036 : 
; 2037 : 						float PSCx = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PSCx$32[ebp], xmm0

; 2038 : 
; 2039 : 						//Get a G or AOA factor
; 2040 : 						if ( doGVortex )

	cmp	DWORD PTR _doGVortex$22[ebp], 0
	je	SHORT $LN77@ShowDamage

; 2041 :               PSCx += currentG / 9.0f;

	movss	xmm0, DWORD PTR _currentG$31[ebp]
	divss	xmm0, DWORD PTR __real@41100000
	addss	xmm0, DWORD PTR _PSCx$32[ebp]
	movss	DWORD PTR _PSCx$32[ebp], xmm0
$LN77@ShowDamage:

; 2042 : 
; 2043 : 						if ( doAOAVortex && !doGVortex )

	cmp	DWORD PTR _doAOAVortex$15[ebp], 0
	je	SHORT $LN76@ShowDamage
	cmp	DWORD PTR _doGVortex$22[ebp], 0
	jne	SHORT $LN76@ShowDamage

; 2044 : 							PSCx += currentAOA / vortexAOALimit;

	movss	xmm0, DWORD PTR _currentAOA$28[ebp]
	divss	xmm0, DWORD PTR ?vortexAOALimit@@3MA
	addss	xmm0, DWORD PTR _PSCx$32[ebp]
	movss	DWORD PTR _PSCx$32[ebp], xmm0
$LN76@ShowDamage:

; 2045 : 						
; 2046 : 						//Get altitude factor as vortex should get thinner with altitude
; 2047 : 						float PSaltCx = 1.0f - (-ZPos() / vortexMaxaltLimit); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv3083[ebp]
	movss	xmm0, DWORD PTR tv3083[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR ?vortexMaxaltLimit@@3MA
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR _PSaltCx$3[ebp], xmm1

; 2048 :                         
; 2049 : 						//Multiply the Cx with the altitude Factor
; 2050 : 						PSCx *= PSaltCx;

	movss	xmm0, DWORD PTR _PSCx$32[ebp]
	mulss	xmm0, DWORD PTR _PSaltCx$3[ebp]
	movss	DWORD PTR _PSCx$32[ebp], xmm0

; 2051 : 
; 2052 : 						//Now I decide how to set the enablePSx (x=1,2,3) according to the PSCx
; 2053 : 						//enablePSx = 0 means No PS
; 2054 : 						//enablePSx = 1 means weak PS
; 2055 : 						//enablePSx = 2 means medium PS
; 2056 : 						//enablePSx = 3 means strong PS
; 2057 : 						//
; 2058 : 						//size will be decide according to the vortexLarge bits
; 2059 : 
; 2060 : 						if ( PSCx > 0.8f )

	movss	xmm0, DWORD PTR _PSCx$32[ebp]
	comiss	xmm0, DWORD PTR __real@3f4ccccd
	jbe	SHORT $LN75@ShowDamage

; 2061 : 						{
; 2062 : 							enablePS1 = 3;

	mov	DWORD PTR _enablePS1$23[ebp], 3

; 2063 : 							enablePS2 = 3;

	mov	DWORD PTR _enablePS2$26[ebp], 3

; 2064 : 							enablePS3 = 2;

	mov	DWORD PTR _enablePS3$25[ebp], 2
$LN75@ShowDamage:

; 2065 : 						}
; 2066 : 
; 2067 : 						if ( PSCx <= 0.8f && PSCx > 0.6f )

	movss	xmm0, DWORD PTR __real@3f4ccccd
	comiss	xmm0, DWORD PTR _PSCx$32[ebp]
	jb	SHORT $LN74@ShowDamage
	movss	xmm0, DWORD PTR _PSCx$32[ebp]
	comiss	xmm0, DWORD PTR __real@3f19999a
	jbe	SHORT $LN74@ShowDamage

; 2068 : 						{
; 2069 : 							enablePS1 = 3;

	mov	DWORD PTR _enablePS1$23[ebp], 3

; 2070 : 							enablePS2 = 2;

	mov	DWORD PTR _enablePS2$26[ebp], 2

; 2071 : 							enablePS3 = 2;

	mov	DWORD PTR _enablePS3$25[ebp], 2
$LN74@ShowDamage:

; 2072 : 						}
; 2073 : 
; 2074 : 						if ( PSCx <= 0.6f && PSCx > 0.4f )

	movss	xmm0, DWORD PTR __real@3f19999a
	comiss	xmm0, DWORD PTR _PSCx$32[ebp]
	jb	SHORT $LN73@ShowDamage
	movss	xmm0, DWORD PTR _PSCx$32[ebp]
	comiss	xmm0, DWORD PTR __real@3ecccccd
	jbe	SHORT $LN73@ShowDamage

; 2075 : 						{
; 2076 : 							enablePS1 = 2;

	mov	DWORD PTR _enablePS1$23[ebp], 2

; 2077 : 							enablePS2 = 2;

	mov	DWORD PTR _enablePS2$26[ebp], 2

; 2078 : 							enablePS3 = 1;

	mov	DWORD PTR _enablePS3$25[ebp], 1
$LN73@ShowDamage:

; 2079 : 						}
; 2080 : 
; 2081 : 						if ( PSCx <= 0.4f && PSCx > 0.2f )

	movss	xmm0, DWORD PTR __real@3ecccccd
	comiss	xmm0, DWORD PTR _PSCx$32[ebp]
	jb	SHORT $LN72@ShowDamage
	movss	xmm0, DWORD PTR _PSCx$32[ebp]
	comiss	xmm0, DWORD PTR __real@3e4ccccd
	jbe	SHORT $LN72@ShowDamage

; 2082 : 						{
; 2083 : 							enablePS1 = 2;

	mov	DWORD PTR _enablePS1$23[ebp], 2

; 2084 : 							enablePS2 = 1;

	mov	DWORD PTR _enablePS2$26[ebp], 1

; 2085 : 							enablePS3 = 1;

	mov	DWORD PTR _enablePS3$25[ebp], 1
$LN72@ShowDamage:

; 2086 : 						}
; 2087 : 
; 2088 : 						if ( PSCx < 0.2f )

	movss	xmm0, DWORD PTR __real@3e4ccccd
	comiss	xmm0, DWORD PTR _PSCx$32[ebp]
	jbe	SHORT $LN71@ShowDamage

; 2089 : 						{
; 2090 : 							enablePS1 = 1;

	mov	DWORD PTR _enablePS1$23[ebp], 1

; 2091 : 							enablePS2 = 0;

	mov	DWORD PTR _enablePS2$26[ebp], 0

; 2092 : 							enablePS3 = 0;

	mov	DWORD PTR _enablePS3$25[ebp], 0
$LN71@ShowDamage:

; 2093 : 						}
; 2094 : 
; 2095 : 						//Execute the PS
; 2096 : 
; 2097 : 						if ( enablePS1 && vtx3.y )

	cmp	DWORD PTR _enablePS1$23[ebp], 0
	je	$LN60@ShowDamage
	movss	xmm0, DWORD PTR _vtx3$65[ebp+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN60@ShowDamage

; 2098 : 						{
; 2099 : 
; 2100 : 							AssignACOrientation(orientation, vtx3, lvtxPS1, pos, false);

	push	0
	lea	eax, DWORD PTR _pos$67[ebp]
	push	eax
	lea	ecx, DWORD PTR _lvtxPS1$41[ebp]
	push	ecx
	lea	edx, DWORD PTR _vtx3$65[ebp]
	push	edx
	lea	eax, DWORD PTR _orientation$34[ebp]
	push	eax
	call	?AssignACOrientation@@YAXAAPAUTrotation@@AAUTpoint@@11_N@Z ; AssignACOrientation
	add	esp, 20					; 00000014H

; 2101 : 							AssignACOrientation(orientation, vtx3, rvtxPS1, pos, true);

	push	1
	lea	ecx, DWORD PTR _pos$67[ebp]
	push	ecx
	lea	edx, DWORD PTR _rvtxPS1$43[ebp]
	push	edx
	lea	eax, DWORD PTR _vtx3$65[ebp]
	push	eax
	lea	ecx, DWORD PTR _orientation$34[ebp]
	push	ecx
	call	?AssignACOrientation@@YAXAAPAUTrotation@@AAUTpoint@@11_N@Z ; AssignACOrientation
	add	esp, 20					; 00000014H

; 2102 : 							
; 2103 : 							switch ( enablePS1 )

	mov	edx, DWORD PTR _enablePS1$23[ebp]
	mov	DWORD PTR tv1113[ebp], edx
	cmp	DWORD PTR tv1113[ebp], 1
	je	SHORT $LN67@ShowDamage
	cmp	DWORD PTR tv1113[ebp], 2
	je	SHORT $LN65@ShowDamage
	cmp	DWORD PTR tv1113[ebp], 3
	je	SHORT $LN63@ShowDamage
	jmp	SHORT $LN61@ShowDamage
$LN67@ShowDamage:

; 2104 : 							{
; 2105 : 							case 1:
; 2106 : 								theSFX = SFX_VORTEX_WEAK;

	mov	DWORD PTR _theSFX$36[ebp], 135		; 00000087H

; 2107 : 								
; 2108 : 								if ( largeVortex & 4 ) //check if bit 2 of largeVortex is set

	mov	eax, DWORD PTR _largeVortex$35[ebp]
	and	eax, 4
	je	SHORT $LN66@ShowDamage

; 2109 : 								{
; 2110 : 									theSFX = SFX_VORTEX_LARGE_WEAK;

	mov	DWORD PTR _theSFX$36[ebp], 138		; 0000008aH
$LN66@ShowDamage:

; 2111 : 								}
; 2112 :                                 break;

	jmp	SHORT $LN68@ShowDamage
$LN65@ShowDamage:

; 2113 : 
; 2114 : 							case 2:
; 2115 : 								theSFX = SFX_VORTEX_MEDIUM;

	mov	DWORD PTR _theSFX$36[ebp], 134		; 00000086H

; 2116 : 								if ( largeVortex & 4 )

	mov	ecx, DWORD PTR _largeVortex$35[ebp]
	and	ecx, 4
	je	SHORT $LN64@ShowDamage

; 2117 : 									theSFX = SFX_VORTEX_LARGE_MEDIUM;

	mov	DWORD PTR _theSFX$36[ebp], 137		; 00000089H
$LN64@ShowDamage:

; 2118 : 								break;

	jmp	SHORT $LN68@ShowDamage
$LN63@ShowDamage:

; 2119 : 
; 2120 : 							case 3:
; 2121 : 								theSFX = SFX_VORTEX_STRONG;

	mov	DWORD PTR _theSFX$36[ebp], 133		; 00000085H

; 2122 : 								if ( largeVortex & 4 )

	mov	edx, DWORD PTR _largeVortex$35[ebp]
	and	edx, 4
	je	SHORT $LN62@ShowDamage

; 2123 : 									theSFX = SFX_VORTEX_LARGE_STRONG;

	mov	DWORD PTR _theSFX$36[ebp], 136		; 00000088H
$LN62@ShowDamage:

; 2124 : 								break;

	jmp	SHORT $LN68@ShowDamage
$LN61@ShowDamage:

; 2125 : 
; 2126 : 							default:
; 2127 : 								theSFX = SFX_VORTEX_MEDIUM;

	mov	DWORD PTR _theSFX$36[ebp], 134		; 00000086H
$LN68@ShowDamage:

; 2128 : 								break;
; 2129 : 							}
; 2130 : 
; 2131 : 							DrawableParticleSys::PS_AddParticleEx(
; 2132 : 								(theSFX + 1), &rvtxPS1, &PSvec);

	lea	eax, DWORD PTR _PSvec$63[ebp]
	push	eax
	lea	ecx, DWORD PTR _rvtxPS1$43[ebp]
	push	ecx
	mov	edx, DWORD PTR _theSFX$36[ebp]
	add	edx, 1
	push	edx
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH

; 2133 : 
; 2134 : 							DrawableParticleSys::PS_AddParticleEx(
; 2135 : 								(theSFX + 1), &lvtxPS1, &PSvec);

	lea	eax, DWORD PTR _PSvec$63[ebp]
	push	eax
	lea	ecx, DWORD PTR _lvtxPS1$41[ebp]
	push	ecx
	mov	edx, DWORD PTR _theSFX$36[ebp]
	add	edx, 1
	push	edx
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH

; 2136 : 
; 2137 : 							//the second trail position is used as a PS, so add a PS1 type there...
; 2138 : 							if ( vtx2.y && largeVortex & 32 )

	movss	xmm0, DWORD PTR _vtx2$66[ebp+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN60@ShowDamage
	mov	eax, DWORD PTR _largeVortex$35[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN60@ShowDamage

; 2139 : 							{
; 2140 : 								Tpoint lvtx2, rvtx2;
; 2141 : 
; 2142 : 								AssignACOrientation(orientation, vtx2, lvtx2, pos, false);

	push	0
	lea	ecx, DWORD PTR _pos$67[ebp]
	push	ecx
	lea	edx, DWORD PTR _lvtx2$37[ebp]
	push	edx
	lea	eax, DWORD PTR _vtx2$66[ebp]
	push	eax
	lea	ecx, DWORD PTR _orientation$34[ebp]
	push	ecx
	call	?AssignACOrientation@@YAXAAPAUTrotation@@AAUTpoint@@11_N@Z ; AssignACOrientation
	add	esp, 20					; 00000014H

; 2143 : 								AssignACOrientation(orientation, vtx2, rvtx2, pos, true);

	push	1
	lea	edx, DWORD PTR _pos$67[ebp]
	push	edx
	lea	eax, DWORD PTR _rvtx2$39[ebp]
	push	eax
	lea	ecx, DWORD PTR _vtx2$66[ebp]
	push	ecx
	lea	edx, DWORD PTR _orientation$34[ebp]
	push	edx
	call	?AssignACOrientation@@YAXAAPAUTrotation@@AAUTpoint@@11_N@Z ; AssignACOrientation
	add	esp, 20					; 00000014H

; 2144 : 
; 2145 : 								DrawableParticleSys::PS_AddParticleEx(
; 2146 : 								(theSFX + 1), &rvtx2, &PSvec);

	lea	eax, DWORD PTR _PSvec$63[ebp]
	push	eax
	lea	ecx, DWORD PTR _rvtx2$39[ebp]
	push	ecx
	mov	edx, DWORD PTR _theSFX$36[ebp]
	add	edx, 1
	push	edx
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH

; 2147 : 
; 2148 : 								DrawableParticleSys::PS_AddParticleEx(
; 2149 : 								(theSFX + 1), &lvtx2, &PSvec);

	lea	eax, DWORD PTR _PSvec$63[ebp]
	push	eax
	lea	ecx, DWORD PTR _lvtx2$37[ebp]
	push	ecx
	mov	edx, DWORD PTR _theSFX$36[ebp]
	add	edx, 1
	push	edx
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
$LN60@ShowDamage:

; 2150 : 							}
; 2151 : 						}
; 2152 : 
; 2153 : 						if ( enablePS2 && vtx4.y )

	cmp	DWORD PTR _enablePS2$26[ebp], 0
	je	$LN49@ShowDamage
	movss	xmm0, DWORD PTR _vtx4$64[ebp+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN49@ShowDamage

; 2154 : 						{
; 2155 : 
; 2156 : 							AssignACOrientation(orientation, vtx4, lvtxPS2, pos, false);

	push	0
	lea	eax, DWORD PTR _pos$67[ebp]
	push	eax
	lea	ecx, DWORD PTR _lvtxPS2$38[ebp]
	push	ecx
	lea	edx, DWORD PTR _vtx4$64[ebp]
	push	edx
	lea	eax, DWORD PTR _orientation$34[ebp]
	push	eax
	call	?AssignACOrientation@@YAXAAPAUTrotation@@AAUTpoint@@11_N@Z ; AssignACOrientation
	add	esp, 20					; 00000014H

; 2157 : 							AssignACOrientation(orientation, vtx4, rvtxPS2, pos, true);

	push	1
	lea	ecx, DWORD PTR _pos$67[ebp]
	push	ecx
	lea	edx, DWORD PTR _rvtxPS2$42[ebp]
	push	edx
	lea	eax, DWORD PTR _vtx4$64[ebp]
	push	eax
	lea	ecx, DWORD PTR _orientation$34[ebp]
	push	ecx
	call	?AssignACOrientation@@YAXAAPAUTrotation@@AAUTpoint@@11_N@Z ; AssignACOrientation
	add	esp, 20					; 00000014H

; 2158 : 							
; 2159 : 							switch ( enablePS2 )

	mov	edx, DWORD PTR _enablePS2$26[ebp]
	mov	DWORD PTR tv1196[ebp], edx
	cmp	DWORD PTR tv1196[ebp], 1
	je	SHORT $LN56@ShowDamage
	cmp	DWORD PTR tv1196[ebp], 2
	je	SHORT $LN54@ShowDamage
	cmp	DWORD PTR tv1196[ebp], 3
	je	SHORT $LN52@ShowDamage
	jmp	SHORT $LN50@ShowDamage
$LN56@ShowDamage:

; 2160 : 							{
; 2161 : 							case 1:
; 2162 : 								theSFX = SFX_VORTEX_WEAK;

	mov	DWORD PTR _theSFX$36[ebp], 135		; 00000087H

; 2163 : 								if ( largeVortex & 8 ) //check if bit 3 of largeVortex is set

	mov	eax, DWORD PTR _largeVortex$35[ebp]
	and	eax, 8
	je	SHORT $LN55@ShowDamage

; 2164 : 									theSFX = SFX_VORTEX_LARGE_WEAK;

	mov	DWORD PTR _theSFX$36[ebp], 138		; 0000008aH
$LN55@ShowDamage:

; 2165 :                                 break;

	jmp	SHORT $LN57@ShowDamage
$LN54@ShowDamage:

; 2166 : 
; 2167 : 							case 2:
; 2168 : 								theSFX = SFX_VORTEX_MEDIUM;

	mov	DWORD PTR _theSFX$36[ebp], 134		; 00000086H

; 2169 : 								if ( largeVortex & 8 )

	mov	ecx, DWORD PTR _largeVortex$35[ebp]
	and	ecx, 8
	je	SHORT $LN53@ShowDamage

; 2170 : 									theSFX = SFX_VORTEX_LARGE_MEDIUM;

	mov	DWORD PTR _theSFX$36[ebp], 137		; 00000089H
$LN53@ShowDamage:

; 2171 : 								break;

	jmp	SHORT $LN57@ShowDamage
$LN52@ShowDamage:

; 2172 : 
; 2173 : 							case 3:
; 2174 : 								theSFX = SFX_VORTEX_STRONG;

	mov	DWORD PTR _theSFX$36[ebp], 133		; 00000085H

; 2175 : 								if ( largeVortex & 8 )

	mov	edx, DWORD PTR _largeVortex$35[ebp]
	and	edx, 8
	je	SHORT $LN51@ShowDamage

; 2176 : 									theSFX = SFX_VORTEX_LARGE_STRONG;

	mov	DWORD PTR _theSFX$36[ebp], 136		; 00000088H
$LN51@ShowDamage:

; 2177 : 								break;

	jmp	SHORT $LN57@ShowDamage
$LN50@ShowDamage:

; 2178 : 
; 2179 : 							default:
; 2180 : 								theSFX = SFX_VORTEX_MEDIUM;

	mov	DWORD PTR _theSFX$36[ebp], 134		; 00000086H
$LN57@ShowDamage:

; 2181 : 								break;
; 2182 : 							}
; 2183 : 
; 2184 : 							DrawableParticleSys::PS_AddParticleEx(
; 2185 : 								(theSFX + 1), &rvtxPS2, &PSvec);

	lea	eax, DWORD PTR _PSvec$63[ebp]
	push	eax
	lea	ecx, DWORD PTR _rvtxPS2$42[ebp]
	push	ecx
	mov	edx, DWORD PTR _theSFX$36[ebp]
	add	edx, 1
	push	edx
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH

; 2186 : 
; 2187 : 							DrawableParticleSys::PS_AddParticleEx(
; 2188 : 								(theSFX + 1), &lvtxPS2, &PSvec);

	lea	eax, DWORD PTR _PSvec$63[ebp]
	push	eax
	lea	ecx, DWORD PTR _lvtxPS2$38[ebp]
	push	ecx
	mov	edx, DWORD PTR _theSFX$36[ebp]
	add	edx, 1
	push	edx
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH

; 2189 : 
; 2190 : 							//the second trail position is used as a PS, so add a PS2 type there...
; 2191 : 							if ( vtx2.y && largeVortex & 64 )

	movss	xmm0, DWORD PTR _vtx2$66[ebp+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN49@ShowDamage
	mov	eax, DWORD PTR _largeVortex$35[ebp]
	and	eax, 64					; 00000040H
	je	SHORT $LN49@ShowDamage

; 2192 : 							{
; 2193 : 								Tpoint lvtx2, rvtx2;
; 2194 : 
; 2195 : 								AssignACOrientation(orientation, vtx2, lvtx2, pos, false);

	push	0
	lea	ecx, DWORD PTR _pos$67[ebp]
	push	ecx
	lea	edx, DWORD PTR _lvtx2$46[ebp]
	push	edx
	lea	eax, DWORD PTR _vtx2$66[ebp]
	push	eax
	lea	ecx, DWORD PTR _orientation$34[ebp]
	push	ecx
	call	?AssignACOrientation@@YAXAAPAUTrotation@@AAUTpoint@@11_N@Z ; AssignACOrientation
	add	esp, 20					; 00000014H

; 2196 : 								AssignACOrientation(orientation, vtx2, rvtx2, pos, true);

	push	1
	lea	edx, DWORD PTR _pos$67[ebp]
	push	edx
	lea	eax, DWORD PTR _rvtx2$47[ebp]
	push	eax
	lea	ecx, DWORD PTR _vtx2$66[ebp]
	push	ecx
	lea	edx, DWORD PTR _orientation$34[ebp]
	push	edx
	call	?AssignACOrientation@@YAXAAPAUTrotation@@AAUTpoint@@11_N@Z ; AssignACOrientation
	add	esp, 20					; 00000014H

; 2197 : 
; 2198 : 								DrawableParticleSys::PS_AddParticleEx(
; 2199 : 								(theSFX + 1), &rvtx2, &PSvec);

	lea	eax, DWORD PTR _PSvec$63[ebp]
	push	eax
	lea	ecx, DWORD PTR _rvtx2$47[ebp]
	push	ecx
	mov	edx, DWORD PTR _theSFX$36[ebp]
	add	edx, 1
	push	edx
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH

; 2200 : 
; 2201 : 								DrawableParticleSys::PS_AddParticleEx(
; 2202 : 								(theSFX + 1), &lvtx2, &PSvec);

	lea	eax, DWORD PTR _PSvec$63[ebp]
	push	eax
	lea	ecx, DWORD PTR _lvtx2$46[ebp]
	push	ecx
	mov	edx, DWORD PTR _theSFX$36[ebp]
	add	edx, 1
	push	edx
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
$LN49@ShowDamage:

; 2203 : 							}
; 2204 : 						}
; 2205 : 
; 2206 : 						if ( enablePS3 && vtx5.y )

	cmp	DWORD PTR _enablePS3$25[ebp], 0
	je	$LN38@ShowDamage
	movss	xmm0, DWORD PTR _vtx5$62[ebp+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN38@ShowDamage

; 2207 : 						{
; 2208 : 
; 2209 : 							AssignACOrientation(orientation, vtx5, lvtxPS3, pos, false);

	push	0
	lea	eax, DWORD PTR _pos$67[ebp]
	push	eax
	lea	ecx, DWORD PTR _lvtxPS3$48[ebp]
	push	ecx
	lea	edx, DWORD PTR _vtx5$62[ebp]
	push	edx
	lea	eax, DWORD PTR _orientation$34[ebp]
	push	eax
	call	?AssignACOrientation@@YAXAAPAUTrotation@@AAUTpoint@@11_N@Z ; AssignACOrientation
	add	esp, 20					; 00000014H

; 2210 : 							AssignACOrientation(orientation, vtx5, rvtxPS3, pos, true);

	push	1
	lea	ecx, DWORD PTR _pos$67[ebp]
	push	ecx
	lea	edx, DWORD PTR _rvtxPS3$44[ebp]
	push	edx
	lea	eax, DWORD PTR _vtx5$62[ebp]
	push	eax
	lea	ecx, DWORD PTR _orientation$34[ebp]
	push	ecx
	call	?AssignACOrientation@@YAXAAPAUTrotation@@AAUTpoint@@11_N@Z ; AssignACOrientation
	add	esp, 20					; 00000014H

; 2211 : 							
; 2212 : 							switch ( enablePS3 )

	mov	edx, DWORD PTR _enablePS3$25[ebp]
	mov	DWORD PTR tv1247[ebp], edx
	cmp	DWORD PTR tv1247[ebp], 1
	je	SHORT $LN45@ShowDamage
	cmp	DWORD PTR tv1247[ebp], 2
	je	SHORT $LN43@ShowDamage
	cmp	DWORD PTR tv1247[ebp], 3
	je	SHORT $LN41@ShowDamage
	jmp	SHORT $LN39@ShowDamage
$LN45@ShowDamage:

; 2213 : 							{
; 2214 : 							case 1:
; 2215 : 								theSFX = SFX_VORTEX_WEAK;

	mov	DWORD PTR _theSFX$36[ebp], 135		; 00000087H

; 2216 : 								if ( largeVortex & 16 ) //check if bit 4 of largeVortex is set

	mov	eax, DWORD PTR _largeVortex$35[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN44@ShowDamage

; 2217 : 									theSFX = SFX_VORTEX_LARGE_WEAK;

	mov	DWORD PTR _theSFX$36[ebp], 138		; 0000008aH
$LN44@ShowDamage:

; 2218 :                                 break;

	jmp	SHORT $LN46@ShowDamage
$LN43@ShowDamage:

; 2219 : 
; 2220 : 							case 2:
; 2221 : 								theSFX = SFX_VORTEX_MEDIUM;

	mov	DWORD PTR _theSFX$36[ebp], 134		; 00000086H

; 2222 : 								if ( largeVortex & 16 )

	mov	ecx, DWORD PTR _largeVortex$35[ebp]
	and	ecx, 16					; 00000010H
	je	SHORT $LN42@ShowDamage

; 2223 : 									theSFX = SFX_VORTEX_LARGE_MEDIUM;

	mov	DWORD PTR _theSFX$36[ebp], 137		; 00000089H
$LN42@ShowDamage:

; 2224 : 								break;

	jmp	SHORT $LN46@ShowDamage
$LN41@ShowDamage:

; 2225 : 
; 2226 : 							case 3:
; 2227 : 								theSFX = SFX_VORTEX_STRONG;

	mov	DWORD PTR _theSFX$36[ebp], 133		; 00000085H

; 2228 : 								if ( largeVortex & 16 )

	mov	edx, DWORD PTR _largeVortex$35[ebp]
	and	edx, 16					; 00000010H
	je	SHORT $LN40@ShowDamage

; 2229 : 									theSFX = SFX_VORTEX_LARGE_STRONG;

	mov	DWORD PTR _theSFX$36[ebp], 136		; 00000088H
$LN40@ShowDamage:

; 2230 : 								break;

	jmp	SHORT $LN46@ShowDamage
$LN39@ShowDamage:

; 2231 : 
; 2232 : 							default:
; 2233 : 								theSFX = SFX_VORTEX_MEDIUM;

	mov	DWORD PTR _theSFX$36[ebp], 134		; 00000086H
$LN46@ShowDamage:

; 2234 : 								break;
; 2235 : 							}
; 2236 : 
; 2237 : 							DrawableParticleSys::PS_AddParticleEx(
; 2238 : 								(theSFX + 1), &rvtxPS3, &PSvec);

	lea	eax, DWORD PTR _PSvec$63[ebp]
	push	eax
	lea	ecx, DWORD PTR _rvtxPS3$44[ebp]
	push	ecx
	mov	edx, DWORD PTR _theSFX$36[ebp]
	add	edx, 1
	push	edx
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH

; 2239 : 
; 2240 : 							DrawableParticleSys::PS_AddParticleEx(
; 2241 : 								(theSFX + 1), &lvtxPS3, &PSvec);

	lea	eax, DWORD PTR _PSvec$63[ebp]
	push	eax
	lea	ecx, DWORD PTR _lvtxPS3$48[ebp]
	push	ecx
	mov	edx, DWORD PTR _theSFX$36[ebp]
	add	edx, 1
	push	edx
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH

; 2242 : 
; 2243 : 							//the second trail position is used as a PS, so add a PS3 type there...
; 2244 : 							if ( vtx2.y && largeVortex & 64 )

	movss	xmm0, DWORD PTR _vtx2$66[ebp+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN38@ShowDamage
	mov	eax, DWORD PTR _largeVortex$35[ebp]
	and	eax, 64					; 00000040H
	je	SHORT $LN38@ShowDamage

; 2245 : 							{
; 2246 : 								Tpoint lvtx2, rvtx2;
; 2247 : 
; 2248 : 								AssignACOrientation(orientation, vtx2, lvtx2, pos, false);

	push	0
	lea	ecx, DWORD PTR _pos$67[ebp]
	push	ecx
	lea	edx, DWORD PTR _lvtx2$40[ebp]
	push	edx
	lea	eax, DWORD PTR _vtx2$66[ebp]
	push	eax
	lea	ecx, DWORD PTR _orientation$34[ebp]
	push	ecx
	call	?AssignACOrientation@@YAXAAPAUTrotation@@AAUTpoint@@11_N@Z ; AssignACOrientation
	add	esp, 20					; 00000014H

; 2249 : 								AssignACOrientation(orientation, vtx2, rvtx2, pos, true);

	push	1
	lea	edx, DWORD PTR _pos$67[ebp]
	push	edx
	lea	eax, DWORD PTR _rvtx2$45[ebp]
	push	eax
	lea	ecx, DWORD PTR _vtx2$66[ebp]
	push	ecx
	lea	edx, DWORD PTR _orientation$34[ebp]
	push	edx
	call	?AssignACOrientation@@YAXAAPAUTrotation@@AAUTpoint@@11_N@Z ; AssignACOrientation
	add	esp, 20					; 00000014H

; 2250 : 
; 2251 : 								DrawableParticleSys::PS_AddParticleEx(
; 2252 : 								(theSFX + 1), &rvtx2, &PSvec);

	lea	eax, DWORD PTR _PSvec$63[ebp]
	push	eax
	lea	ecx, DWORD PTR _rvtx2$45[ebp]
	push	ecx
	mov	edx, DWORD PTR _theSFX$36[ebp]
	add	edx, 1
	push	edx
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH

; 2253 : 
; 2254 : 								DrawableParticleSys::PS_AddParticleEx(
; 2255 : 								(theSFX + 1), &lvtx2, &PSvec);

	lea	eax, DWORD PTR _PSvec$63[ebp]
	push	eax
	lea	ecx, DWORD PTR _lvtx2$40[ebp]
	push	ecx
	mov	edx, DWORD PTR _theSFX$36[ebp]
	add	edx, 1
	push	edx
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
$LN38@ShowDamage:

; 2256 : 							}
; 2257 : 						}
; 2258 : 					}
; 2259 : 			  }
; 2260 : 			  else //Kill the trails, PS needs no killing

	jmp	$LN33@ShowDamage
$LN103@ShowDamage:

; 2261 : 			  {
; 2262 : 				   if (lvortex1) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1392], 0
	je	SHORT $LN36@ShowDamage

; 2263 : 				   {
; 2264 : 					  DrawableParticleSys::PS_KillTrail(lvortex1_trail);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1396]
	push	edx
	call	?PS_KillTrail@DrawableParticleSys@@SAXK@Z ; DrawableParticleSys::PS_KillTrail
	add	esp, 4

; 2265 : 			          lvortex1 = lvortex1_trail = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1396], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1392], 0
$LN36@ShowDamage:

; 2266 : 				   }
; 2267 : 				   if (rvortex1) 

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+1400], 0
	je	SHORT $LN35@ShowDamage

; 2268 : 				   {
; 2269 : 		   			 DrawableParticleSys::PS_KillTrail(rvortex1_trail);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1404]
	push	ecx
	call	?PS_KillTrail@DrawableParticleSys@@SAXK@Z ; DrawableParticleSys::PS_KillTrail
	add	esp, 4

; 2270 : 					 rvortex1 = rvortex1_trail = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1404], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1400], 0
$LN35@ShowDamage:

; 2271 : 				   }
; 2272 : 
; 2273 : 				   if (lvortex2) 

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1408], 0
	je	SHORT $LN34@ShowDamage

; 2274 : 				   {
; 2275 : 					  DrawableParticleSys::PS_KillTrail(lvortex2_trail);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1412]
	push	eax
	call	?PS_KillTrail@DrawableParticleSys@@SAXK@Z ; DrawableParticleSys::PS_KillTrail
	add	esp, 4

; 2276 : 			          lvortex2 = lvortex2_trail = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1412], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1408], 0
$LN34@ShowDamage:

; 2277 : 				   }
; 2278 : 				   if (rvortex2) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1416], 0
	je	SHORT $LN33@ShowDamage

; 2279 : 				   {
; 2280 : 		   			 DrawableParticleSys::PS_KillTrail(rvortex2_trail);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1420]
	push	edx
	call	?PS_KillTrail@DrawableParticleSys@@SAXK@Z ; DrawableParticleSys::PS_KillTrail
	add	esp, 4

; 2281 : 					 rvortex2 = rvortex2_trail = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1420], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1416], 0
$LN33@ShowDamage:

; 2282 : 				   }
; 2283 : 			  }
; 2284 : #endif
; 2285 : 			 }
; 2286 : 	   }
; 2287 : 
; 2288 : #if 0  // MLR 10/3/2004 - This is handled in ::Sleep() now.
; 2289 : 	   { // make the wingtip vortices (smoke trails) independent of the a/c
; 2290 : 		   if (lwingvortex) 
; 2291 : 		   {
; 2292 : 
; 2293 : 		   	/* RV - I-Hawk - RV new trails call changes
; 2294 : 			   OTWDriver.AddSfxRequest(
; 2295 : 				   new SfxClass (
; 2296 : 				   21.2f,			// time to live
; 2297 : 				   lwingvortex) );		// scale*/
; 2298 : 
; 2299 : 			   DrawableParticleSys::PS_KillTrail(lwingvortex_trail);
; 2300 : 			   lwingvortex = lwingvortex_trail = NULL;
; 2301 : 
; 2302 : 		   }
; 2303 : 
; 2304 : 		   if (rwingvortex) 
; 2305 : 		   {
; 2306 : 	   /*
; 2307 : 			   OTWDriver.AddSfxRequest(
; 2308 : 				   new SfxClass (
; 2309 : 				   21.2f,			// time to live
; 2310 : 				   rwingvortex) );		// scale
; 2311 : 		   */
; 2312 : 			   DrawableParticleSys::PS_KillTrail(rwingvortex_trail);
; 2313 : 			   rwingvortex = rwingvortex_trail = NULL;
; 2314 : 		   }
; 2315 : 	   }
; 2316 : #endif
; 2317 : 	 }
; 2318 : 
; 2319 :    // do military power smoke if its that type of craft
; 2320 :    // PowerOutput() runs from 0.7 (flight idle) to 1.5 (max ab) with 1.0 being mil power
; 2321 :    // M.N. added Poweroutput > 0.65, stops smoke trails when engine is shut down.
; 2322 :    //if ( !OnGround() && af->EngineTrail() >= 0 && OTWDriver.renderer /*&& OTWDriver.renderer->GetAlphaMode()*/) {
; 2323 :       /* if (PowerOutput() <= 1.0f && PowerOutput() > 0.65f)
; 2324 :        {
; 2325 : 	   AddEngineTrails(af->EngineTrail(), engineTrails); // smoke
; 2326 :        }
; 2327 :        else CancelEngineTrails(engineTrails);
; 2328 :    }*/
; 2329 :    //Cobra TJL 11/12/04 Allow engine smoke on ground and make it between 80% to 100% power
; 2330 :    //Cobra limit smoke to under 10000 feet
; 2331 :    //RV I-Hawk - allow engine smoke till 11000, 1K feet as a fade in/out margin band...
; 2332 :   if ( af->EngineTrail() >= 0 && OTWDriver.renderer)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+932]
	call	?EngineTrail@AirframeClass@@QAEHXZ	; AirframeClass::EngineTrail
	test	eax, eax
	jl	$LN30@ShowDamage
	cmp	DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576, 0
	je	$LN30@ShowDamage

; 2333 :   {
; 2334 :       if (PowerOutput() <= 1.0f && PowerOutput() > 0.80f && -ZPos() < 11000.0f)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?PowerOutput@SimBaseClass@@QAEMXZ	; SimBaseClass::PowerOutput
	fstp	DWORD PTR tv3236[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv3236[ebp]
	jb	$LN31@ShowDamage
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PowerOutput@SimBaseClass@@QAEMXZ	; SimBaseClass::PowerOutput
	fstp	DWORD PTR tv3241[ebp]
	movss	xmm0, DWORD PTR tv3241[ebp]
	comiss	xmm0, DWORD PTR __real@3f4ccccd
	jbe	SHORT $LN31@ShowDamage
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv3245[ebp]
	movss	xmm0, DWORD PTR tv3245[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR __real@462be000
	comiss	xmm1, xmm0
	jbe	SHORT $LN31@ShowDamage

; 2335 :        {
; 2336 : 	   AddEngineTrails(af->EngineTrail(), engineTrails, engineTrails_trail); // smoke

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1344				; 00000540H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1312				; 00000520H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+932]
	call	?EngineTrail@AirframeClass@@QAEHXZ	; AirframeClass::EngineTrail
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddEngineTrails@AircraftClass@@QAEXHPAK0@Z ; AircraftClass::AddEngineTrails

; 2337 :        }
; 2338 :        else

	jmp	SHORT $LN30@ShowDamage
$LN31@ShowDamage:

; 2339 : 	   {
; 2340 : 		   CancelEngineTrails(engineTrails, engineTrails_trail);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1344				; 00000540H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1312				; 00000520H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CancelEngineTrails@AircraftClass@@QAEXPAK0@Z ; AircraftClass::CancelEngineTrails
$LN30@ShowDamage:

; 2341 : 	   }
; 2342 :   }
; 2343 : 	if ( pctStrength > 0.50f )

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+292]
	comiss	xmm0, DWORD PTR __real@3f000000
	jbe	SHORT $LN29@ShowDamage

; 2344 : 	{
; 2345 : 		if (!hasMilSmoke && smokeTrail[TRAIL_DAMAGE] /*&& smokeTrail[TRAIL_DAMAGE]->InDisplayList(*/ )

	cmp	DWORD PTR _hasMilSmoke$[ebp], 0
	jne	SHORT $LN28@ShowDamage
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+1160], 0
	je	SHORT $LN28@ShowDamage

; 2346 : 		{
; 2347 : 			/* RV - I-Hawk - RV new trails call changes
; 2348 : 			OTWDriver.AddSfxRequest(
; 2349 : 			new SfxClass (
; 2350 : 			11.2f,							// time to live
; 2351 : 			smokeTrail[TRAIL_DAMAGE]) );		// scale
; 2352 : 			*/
; 2353 : 			DrawableParticleSys::PS_KillTrail(smokeTrail_trail[TRAIL_DAMAGE]);

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+1172]
	push	ecx
	call	?PS_KillTrail@DrawableParticleSys@@SAXK@Z ; DrawableParticleSys::PS_KillTrail
	add	esp, 4

; 2354 : 			smokeTrail[TRAIL_DAMAGE] = smokeTrail_trail[TRAIL_DAMAGE] = NULL;

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+1172], 0
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+1160], 0
$LN28@ShowDamage:

; 2355 : 		}
; 2356 : 
; 2357 : 		return;

	jmp	$LN163@ShowDamage
$LN29@ShowDamage:

; 2358 : 	}
; 2359 : 
; 2360 :    // if we're dying, just maitain the status quo...
; 2361 :    if ( pctStrength < 0.0f )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+292]
	jbe	$LN27@ShowDamage

; 2362 :    {
; 2363 : 	    radius = 3.0f;

	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR _radius$[ebp], xmm0

; 2364 : 		 //RV - I-Hawk - RV new trails call changes
; 2365 : 	    if ( smokeTrail[TRAIL_DAMAGE] )

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx+1160], 0
	je	$LN25@ShowDamage

; 2366 : 		 {
; 2367 : 		   Trotation *orientation = &((DrawableBSP*)drawPointer)->orientation;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	add	ecx, 48					; 00000030H
	mov	DWORD PTR _orientation$30[ebp], ecx

; 2368 : 		   
; 2369 : 		   if(orientation)

	je	$LN25@ShowDamage

; 2370 : 			 {
; 2371 : 				Tpoint tp = damageTrailLocation0;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1432				; 00000598H
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _tp$58[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _tp$58[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _tp$58[ebp+8], edx

; 2372 : 				float offset = 2.0f;

	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _offset$16[ebp], xmm0

; 2373 : 				  //If it's the bigger trail, set larger offset.
; 2374 : 				if ( smokeTrail[TRAIL_DAMAGE] == TRAIL_BURNING_SMOKE2 )

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+1160], 30		; 0000001eH
	jne	SHORT $LN24@ShowDamage

; 2375 : 					offset = 5.0f;

	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR _offset$16[ebp], xmm0
$LN24@ShowDamage:

; 2376 : 
; 2377 : 				pos.x = orientation->M11*(tp.x + offset) + orientation->M12*tp.y + orientation->M13*tp.z + XPos();

	movss	xmm0, DWORD PTR _tp$58[ebp]
	addss	xmm0, DWORD PTR _offset$16[ebp]
	mov	edx, DWORD PTR _orientation$30[ebp]
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _orientation$30[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR _tp$58[ebp+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _orientation$30[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR _tp$58[ebp+8]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv3644[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv3293[ebp]
	movss	xmm0, DWORD PTR tv3644[ebp]
	addss	xmm0, DWORD PTR tv3293[ebp]
	movss	DWORD PTR _pos$[ebp], xmm0

; 2378 : 				pos.y = orientation->M21*(tp.x + offset) + orientation->M22*tp.y + orientation->M23*tp.z + YPos();

	movss	xmm0, DWORD PTR _tp$58[ebp]
	addss	xmm0, DWORD PTR _offset$16[ebp]
	mov	edx, DWORD PTR _orientation$30[ebp]
	mulss	xmm0, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _orientation$30[ebp]
	movss	xmm1, DWORD PTR [eax+16]
	mulss	xmm1, DWORD PTR _tp$58[ebp+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _orientation$30[ebp]
	movss	xmm1, DWORD PTR [ecx+20]
	mulss	xmm1, DWORD PTR _tp$58[ebp+8]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv3646[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv3304[ebp]
	movss	xmm0, DWORD PTR tv3646[ebp]
	addss	xmm0, DWORD PTR tv3304[ebp]
	movss	DWORD PTR _pos$[ebp+4], xmm0

; 2379 : 				pos.z = orientation->M31*(tp.x + offset) + orientation->M32*tp.y + orientation->M33*tp.z + ZPos();

	movss	xmm0, DWORD PTR _tp$58[ebp]
	addss	xmm0, DWORD PTR _offset$16[ebp]
	mov	edx, DWORD PTR _orientation$30[ebp]
	mulss	xmm0, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _orientation$30[ebp]
	movss	xmm1, DWORD PTR [eax+28]
	mulss	xmm1, DWORD PTR _tp$58[ebp+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _orientation$30[ebp]
	movss	xmm1, DWORD PTR [ecx+32]
	mulss	xmm1, DWORD PTR _tp$58[ebp+8]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv3712[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv3315[ebp]
	movss	xmm0, DWORD PTR tv3712[ebp]
	addss	xmm0, DWORD PTR tv3315[ebp]
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 2380 : 
; 2381 : 				//OTWDriver.AddTrailHead (smokeTrail[TRAIL_DAMAGE], pos.x, pos.y, pos.z );
; 2382 : 
; 2383 : 				//RV - I-Hawk added check so damage trail alpha/size change with altitude
; 2384 : 				// but never goes too low...
; 2385 : 				if ( -ZPos() < 25000.0f)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv3319[ebp]
	movss	xmm0, DWORD PTR tv3319[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR __real@46c35000
	comiss	xmm1, xmm0
	jbe	$LN23@ShowDamage

; 2386 : 				{
; 2387 : 							damageTrailAlphaCx = (( 15000.0f - (-ZPos())) / 15000.0f) * 0.25f + 1;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv3324[ebp]
	movss	xmm0, DWORD PTR tv3324[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR __real@466a6000
	subss	xmm1, xmm0
	divss	xmm1, DWORD PTR __real@466a6000
	mulss	xmm1, DWORD PTR __real@3e800000
	addss	xmm1, DWORD PTR __real@3f800000
	movss	DWORD PTR ?damageTrailAlphaCx@@3MA, xmm1

; 2388 : 							damageTrailSizeCx =  (( 15000.0f - (-ZPos())) / 15000.0f) * 0.15f + 1;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv3329[ebp]
	movss	xmm0, DWORD PTR tv3329[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR __real@466a6000
	subss	xmm1, xmm0
	divss	xmm1, DWORD PTR __real@466a6000
	mulss	xmm1, DWORD PTR __real@3e19999a
	addss	xmm1, DWORD PTR __real@3f800000
	movss	DWORD PTR ?damageTrailSizeCx@@3MA, xmm1

; 2389 : 				}
; 2390 : 				else

	jmp	SHORT $LN22@ShowDamage
$LN23@ShowDamage:

; 2391 : 				{
; 2392 : 							damageTrailAlphaCx = (( 15000.0f - (25000.0f)) / 15000.0f) * 0.25f + 1; 

	movss	xmm0, DWORD PTR __real@3f555555
	movss	DWORD PTR ?damageTrailAlphaCx@@3MA, xmm0

; 2393 : 							damageTrailSizeCx =  (( 15000.0f - (25000.0f)) / 15000.0f) * 0.15f + 1;

	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR ?damageTrailSizeCx@@3MA, xmm0
$LN22@ShowDamage:

; 2394 : 				}
; 2395 : 				smokeTrail_trail[TRAIL_DAMAGE] = DrawableParticleSys::PS_EmitTrail(smokeTrail_trail[TRAIL_DAMAGE], smokeTrail[TRAIL_DAMAGE], pos.x, pos.y, pos.z, damageTrailAlphaCx, damageTrailSizeCx);

	push	ecx
	movss	xmm0, DWORD PTR ?damageTrailSizeCx@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?damageTrailAlphaCx@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+1160]
	push	ecx
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+1172]
	push	ecx
	call	?PS_EmitTrail@DrawableParticleSys@@SAKKHMMMMM@Z ; DrawableParticleSys::PS_EmitTrail
	add	esp, 28					; 0000001cH
	mov	edx, 4
	imul	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx+1172], eax
$LN25@ShowDamage:

; 2396 : 			 }
; 2397 : 		 }
; 2398 :     
; 2399 : 		//RV I-Hawk - Removing this as no need for additional trails when damaged...
; 2400 : 		if ( smokeTrail[TRAIL_ENGINE1] )

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx+1160], 0
	je	$LN20@ShowDamage

; 2401 : 		{
; 2402 : 			Trotation *orientation = &((DrawableBSP*)drawPointer)->orientation;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+332]
	add	edx, 48					; 00000030H
	mov	DWORD PTR _orientation$29[ebp], edx

; 2403 : 		   
; 2404 : 			if (orientation)

	je	$LN20@ShowDamage

; 2405 : 			{
; 2406 : 	   			Tpoint tp = damageTrailLocation1;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1444				; 000005a4H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tp$60[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _tp$60[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _tp$60[ebp+8], eax

; 2407 : 				float offset = 5.0f;

	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR _offset$14[ebp], xmm0

; 2408 : 
; 2409 : 				pos.x = orientation->M11*(tp.x + offset) + orientation->M12*tp.y + orientation->M13*tp.z + XPos();

	movss	xmm0, DWORD PTR _tp$60[ebp]
	addss	xmm0, DWORD PTR _offset$14[ebp]
	mov	ecx, DWORD PTR _orientation$29[ebp]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _orientation$29[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR _tp$60[ebp+4]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _orientation$29[ebp]
	movss	xmm1, DWORD PTR [eax+8]
	mulss	xmm1, DWORD PTR _tp$60[ebp+8]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv3714[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv3375[ebp]
	movss	xmm0, DWORD PTR tv3714[ebp]
	addss	xmm0, DWORD PTR tv3375[ebp]
	movss	DWORD PTR _pos$[ebp], xmm0

; 2410 : 				pos.y = orientation->M21*(tp.x + offset) + orientation->M22*tp.y + orientation->M23*tp.z + YPos();

	movss	xmm0, DWORD PTR _tp$60[ebp]
	addss	xmm0, DWORD PTR _offset$14[ebp]
	mov	ecx, DWORD PTR _orientation$29[ebp]
	mulss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _orientation$29[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR _tp$60[ebp+4]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _orientation$29[ebp]
	movss	xmm1, DWORD PTR [eax+20]
	mulss	xmm1, DWORD PTR _tp$60[ebp+8]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv3716[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv3386[ebp]
	movss	xmm0, DWORD PTR tv3716[ebp]
	addss	xmm0, DWORD PTR tv3386[ebp]
	movss	DWORD PTR _pos$[ebp+4], xmm0

; 2411 : 				pos.z = orientation->M31*(tp.x + offset) + orientation->M32*tp.y + orientation->M33*tp.z + ZPos();

	movss	xmm0, DWORD PTR _tp$60[ebp]
	addss	xmm0, DWORD PTR _offset$14[ebp]
	mov	ecx, DWORD PTR _orientation$29[ebp]
	mulss	xmm0, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _orientation$29[ebp]
	movss	xmm1, DWORD PTR [edx+28]
	mulss	xmm1, DWORD PTR _tp$60[ebp+4]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _orientation$29[ebp]
	movss	xmm1, DWORD PTR [eax+32]
	mulss	xmm1, DWORD PTR _tp$60[ebp+8]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv3718[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv3397[ebp]
	movss	xmm0, DWORD PTR tv3718[ebp]
	addss	xmm0, DWORD PTR tv3397[ebp]
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 2412 : 
; 2413 : 				//OTWDriver.AddTrailHead (smokeTrail[TRAIL_ENGINE1], pos.x, pos.y, pos.z );
; 2414 : 				
; 2415 : 				//RV - I-Hawk - damage trails size/alpha change with altitude
; 2416 : 				if ( -ZPos() < 25000.0f)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv3401[ebp]
	movss	xmm0, DWORD PTR tv3401[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR __real@46c35000
	comiss	xmm1, xmm0
	jbe	$LN19@ShowDamage

; 2417 : 				{
; 2418 : 					 damageTrailAlphaCx = (( 15000.0f - (-ZPos())) / 15000.0f) * 0.25f + 1;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv3406[ebp]
	movss	xmm0, DWORD PTR tv3406[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR __real@466a6000
	subss	xmm1, xmm0
	divss	xmm1, DWORD PTR __real@466a6000
	mulss	xmm1, DWORD PTR __real@3e800000
	addss	xmm1, DWORD PTR __real@3f800000
	movss	DWORD PTR ?damageTrailAlphaCx@@3MA, xmm1

; 2419 : 					 damageTrailSizeCx =  (( 15000.0f - (-ZPos())) / 15000.0f) * 0.15f + 1;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv3411[ebp]
	movss	xmm0, DWORD PTR tv3411[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR __real@466a6000
	subss	xmm1, xmm0
	divss	xmm1, DWORD PTR __real@466a6000
	mulss	xmm1, DWORD PTR __real@3e19999a
	addss	xmm1, DWORD PTR __real@3f800000
	movss	DWORD PTR ?damageTrailSizeCx@@3MA, xmm1

; 2420 : 				}
; 2421 : 				else 

	jmp	SHORT $LN18@ShowDamage
$LN19@ShowDamage:

; 2422 : 				{
; 2423 : 					damageTrailAlphaCx = (( 15000.0f - (25000.0f)) / 15000.0f) * 0.25f + 1; 

	movss	xmm0, DWORD PTR __real@3f555555
	movss	DWORD PTR ?damageTrailAlphaCx@@3MA, xmm0

; 2424 : 					damageTrailSizeCx =  (( 15000.0f - (25000.0f)) / 15000.0f) * 0.15f + 1;

	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR ?damageTrailSizeCx@@3MA, xmm0
$LN18@ShowDamage:

; 2425 : 				}
; 2426 : 				smokeTrail_trail[TRAIL_ENGINE1] = DrawableParticleSys::PS_EmitTrail(
; 2427 : 											smokeTrail_trail[TRAIL_ENGINE1], 
; 2428 : 											smokeTrail[TRAIL_ENGINE1], pos.x, pos.y, pos.z, damageTrailAlphaCx, damageTrailSizeCx );

	push	ecx
	movss	xmm0, DWORD PTR ?damageTrailSizeCx@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?damageTrailAlphaCx@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+1160]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+1172]
	push	eax
	call	?PS_EmitTrail@DrawableParticleSys@@SAKKHMMMMM@Z ; DrawableParticleSys::PS_EmitTrail
	add	esp, 28					; 0000001cH
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+1172], eax
$LN20@ShowDamage:

; 2429 : 			}
; 2430 : 		}
; 2431 : 			return;

	jmp	$LN163@ShowDamage
$LN27@ShowDamage:

; 2432 : 	 }
; 2433 : 
; 2434 : 	// at this point we know we've got enough damage for 1 trail in
; 2435 : 	// the center
; 2436 : 
; 2437 : 	//RV - I-Hawk - RV new trails call changes
; 2438 : 	if (!smokeTrail[TRAIL_DAMAGE])

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+1160], 0
	jne	SHORT $LN15@ShowDamage

; 2439 : 	{
; 2440 : 
; 2441 : 	   //smokeTrail[TRAIL_DAMAGE] = new DrawableTrail(TRAIL_SMOKE);	// smoke
; 2442 : 	   //OTWDriver.InsertObject(smokeTrail[TRAIL_DAMAGE]);
; 2443 : 		//
; 2444 : 		//Set smaller/larger damage trail based on the number of engines...
; 2445 : 		// the large planes 3/4 engines and distanced 2 engines, will have larger trails...
; 2446 : 
; 2447 : 		//I-Hawk - Set damage trails size based on the AC radius
; 2448 : 		float radius = drawPointer->Radius();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+332]
	call	?Radius@DrawableObject@@QBEMXZ		; DrawableObject::Radius
	fstp	DWORD PTR _radius$2[ebp]

; 2449 : 
; 2450 : 		if ( radius > 50.0f )

	movss	xmm0, DWORD PTR _radius$2[ebp]
	comiss	xmm0, DWORD PTR __real@42480000
	jbe	SHORT $LN16@ShowDamage

; 2451 : 	  {
; 2452 : 			smokeTrail[TRAIL_DAMAGE] = TRAIL_BURNING_SMOKE2;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+1160], 30		; 0000001eH

; 2453 : 		}
; 2454 : 
; 2455 : 		else 

	jmp	SHORT $LN15@ShowDamage
$LN16@ShowDamage:

; 2456 : 		{
; 2457 : 			smokeTrail[TRAIL_DAMAGE] = TRAIL_BURNING_SMOKE;

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+1160], 29		; 0000001dH
$LN15@ShowDamage:

; 2458 : 		}
; 2459 : 	}
; 2460 : 
; 2461 : 	//RV I-Hawk - Get orientation of location
; 2462 : 	Trotation *orientation = &((DrawableBSP*)drawPointer)->orientation;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+332]
	add	edx, 48					; 00000030H
	mov	DWORD PTR _orientation$[ebp], edx

; 2463 : 		   
; 2464 : 	if (orientation)

	je	$LN11@ShowDamage

; 2465 : 	{
; 2466 : 		Tpoint tp = damageTrailLocation0; 

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1432				; 00000598H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tp$61[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _tp$61[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _tp$61[ebp+8], eax

; 2467 : 		float offset = 2.0f;

	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _offset$20[ebp], xmm0

; 2468 : 
; 2469 : 		//If it's the bigger trail, set larger offset.
; 2470 : 		if ( smokeTrail[TRAIL_DAMAGE] == TRAIL_BURNING_SMOKE2 )

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx+1160], 30		; 0000001eH
	jne	SHORT $LN13@ShowDamage

; 2471 : 		{
; 2472 : 			offset = 5.0f;

	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR _offset$20[ebp], xmm0
$LN13@ShowDamage:

; 2473 : 		}
; 2474 : 
; 2475 : 		pos.x = orientation->M11*(tp.x + offset) + orientation->M12*tp.y + orientation->M13*tp.z + XPos();

	movss	xmm0, DWORD PTR _tp$61[ebp]
	addss	xmm0, DWORD PTR _offset$20[ebp]
	mov	eax, DWORD PTR _orientation$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _orientation$[ebp]
	movss	xmm1, DWORD PTR [ecx+4]
	mulss	xmm1, DWORD PTR _tp$61[ebp+4]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _orientation$[ebp]
	movss	xmm1, DWORD PTR [edx+8]
	mulss	xmm1, DWORD PTR _tp$61[ebp+8]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv3720[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv3468[ebp]
	movss	xmm0, DWORD PTR tv3720[ebp]
	addss	xmm0, DWORD PTR tv3468[ebp]
	movss	DWORD PTR _pos$[ebp], xmm0

; 2476 : 		pos.y = orientation->M21*(tp.x + offset) + orientation->M22*tp.y + orientation->M23*tp.z + YPos();

	movss	xmm0, DWORD PTR _tp$61[ebp]
	addss	xmm0, DWORD PTR _offset$20[ebp]
	mov	eax, DWORD PTR _orientation$[ebp]
	mulss	xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _orientation$[ebp]
	movss	xmm1, DWORD PTR [ecx+16]
	mulss	xmm1, DWORD PTR _tp$61[ebp+4]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _orientation$[ebp]
	movss	xmm1, DWORD PTR [edx+20]
	mulss	xmm1, DWORD PTR _tp$61[ebp+8]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv3722[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv3479[ebp]
	movss	xmm0, DWORD PTR tv3722[ebp]
	addss	xmm0, DWORD PTR tv3479[ebp]
	movss	DWORD PTR _pos$[ebp+4], xmm0

; 2477 : 		pos.z = orientation->M31*(tp.x + offset) + orientation->M32*tp.y + orientation->M33*tp.z + ZPos();

	movss	xmm0, DWORD PTR _tp$61[ebp]
	addss	xmm0, DWORD PTR _offset$20[ebp]
	mov	eax, DWORD PTR _orientation$[ebp]
	mulss	xmm0, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _orientation$[ebp]
	movss	xmm1, DWORD PTR [ecx+28]
	mulss	xmm1, DWORD PTR _tp$61[ebp+4]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _orientation$[ebp]
	movss	xmm1, DWORD PTR [edx+32]
	mulss	xmm1, DWORD PTR _tp$61[ebp+8]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv3724[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv3490[ebp]
	movss	xmm0, DWORD PTR tv3724[ebp]
	addss	xmm0, DWORD PTR tv3490[ebp]
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 2478 : 
; 2479 : 		//OTWDriver.AddTrailHead (smokeTrail[TRAIL_DAMAGE], pos.x, pos.y, pos.z );
; 2480 : 		//
; 2481 : 		//RV - I-Hawk added check so damage trail alpha/size change with altitude
; 2482 : 		// but never goes too low...
; 2483 : 
; 2484 : 		if ( -ZPos() < 25000.0f)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv3494[ebp]
	movss	xmm0, DWORD PTR tv3494[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR __real@46c35000
	comiss	xmm1, xmm0
	jbe	$LN12@ShowDamage

; 2485 : 		{
; 2486 : 			damageTrailAlphaCx = (( 15000.0f - (-ZPos())) / 15000.0f) * 0.25f + 1;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv3499[ebp]
	movss	xmm0, DWORD PTR tv3499[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR __real@466a6000
	subss	xmm1, xmm0
	divss	xmm1, DWORD PTR __real@466a6000
	mulss	xmm1, DWORD PTR __real@3e800000
	addss	xmm1, DWORD PTR __real@3f800000
	movss	DWORD PTR ?damageTrailAlphaCx@@3MA, xmm1

; 2487 : 			damageTrailSizeCx =  (( 15000.0f - (-ZPos())) / 15000.0f) * 0.15f + 1;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv3504[ebp]
	movss	xmm0, DWORD PTR tv3504[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR __real@466a6000
	subss	xmm1, xmm0
	divss	xmm1, DWORD PTR __real@466a6000
	mulss	xmm1, DWORD PTR __real@3e19999a
	addss	xmm1, DWORD PTR __real@3f800000
	movss	DWORD PTR ?damageTrailSizeCx@@3MA, xmm1

; 2488 : 		}
; 2489 : 		else 

	jmp	SHORT $LN11@ShowDamage
$LN12@ShowDamage:

; 2490 : 		{
; 2491 : 			damageTrailAlphaCx = (( 15000.0f - (25000.0f)) / 15000.0f) * 0.25f + 1; 

	movss	xmm0, DWORD PTR __real@3f555555
	movss	DWORD PTR ?damageTrailAlphaCx@@3MA, xmm0

; 2492 : 			damageTrailSizeCx =  (( 15000.0f - (25000.0f)) / 15000.0f) * 0.15f + 1;

	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR ?damageTrailSizeCx@@3MA, xmm0
$LN11@ShowDamage:

; 2493 : 		}
; 2494 : 	}
; 2495 : 	smokeTrail_trail[TRAIL_DAMAGE] = DrawableParticleSys::PS_EmitTrail(
; 2496 : 														smokeTrail_trail[TRAIL_DAMAGE], smokeTrail[TRAIL_DAMAGE], 
; 2497 : 														pos.x, pos.y, pos.z, damageTrailAlphaCx, damageTrailSizeCx );

	push	ecx
	movss	xmm0, DWORD PTR ?damageTrailSizeCx@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?damageTrailAlphaCx@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+1160]
	push	edx
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+1172]
	push	edx
	call	?PS_EmitTrail@DrawableParticleSys@@SAKKHMMMMM@Z ; DrawableParticleSys::PS_EmitTrail
	add	esp, 28					; 0000001cH
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+1172], eax

; 2498 : 
; 2499 : 	// now test for additional damage and add smoke trails on the left and right
; 2500 : 	if ( pctStrength < 0.25f )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3e800000
	comiss	xmm0, DWORD PTR [eax+292]
	jbe	$LN8@ShowDamage

; 2501 : 	{
; 2502 : 
; 2503 : 		//RV I-Hawk - Get orientation of location  
; 2504 : 		Trotation *orientation = &((DrawableBSP*)drawPointer)->orientation;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+332]
	add	edx, 48					; 00000030H
	mov	DWORD PTR _orientation$27[ebp], edx

; 2505 : 		   
; 2506 : 		if(orientation)

	je	$LN8@ShowDamage

; 2507 : 		{
; 2508 : 			if ( af->auxaeroData->nEngines >= 3 || ( af->auxaeroData->nEngines == 2
; 2509 : 		       && (fabs(af->auxaeroData->engineLocation[0].y - af->auxaeroData->engineLocation[1].y) > 15.0f) ) 
; 2510 : 			)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+344], 3
	jge	$LN7@ShowDamage
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+344], 2
	jne	$LN8@ShowDamage
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	mov	ecx, DWORD PTR [ecx+4]
	mov	esi, 12					; 0000000cH
	shl	esi, 0
	movss	xmm0, DWORD PTR [edx+eax+352]
	subss	xmm0, DWORD PTR [ecx+esi+352]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv3541[ebp]
	movss	xmm0, DWORD PTR tv3541[ebp]
	comiss	xmm0, DWORD PTR __real@41700000
	jbe	$LN8@ShowDamage
$LN7@ShowDamage:

; 2511 : 			{
; 2512 : 				radius = 3.0f;

	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR _radius$[ebp], xmm0

; 2513 : 
; 2514 : 				Tpoint tp = damageTrailLocation1;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1444				; 000005a4H
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _tp$59[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _tp$59[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _tp$59[ebp+8], edx

; 2515 : 
; 2516 : 				float offset = 2.0f;

	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _offset$18[ebp], xmm0

; 2517 : 
; 2518 : 				//If it's the bigger trail, set larger offset.
; 2519 : 				if ( smokeTrail[TRAIL_DAMAGE] == TRAIL_BURNING_SMOKE2 )

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+1160], 30		; 0000001eH
	jne	SHORT $LN6@ShowDamage

; 2520 : 					offset = 5.0f;

	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR _offset$18[ebp], xmm0
$LN6@ShowDamage:

; 2521 : 
; 2522 : 				pos.x = orientation->M11*(tp.x + offset) + orientation->M12*tp.y + orientation->M13*tp.z + XPos();

	movss	xmm0, DWORD PTR _tp$59[ebp]
	addss	xmm0, DWORD PTR _offset$18[ebp]
	mov	edx, DWORD PTR _orientation$27[ebp]
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _orientation$27[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR _tp$59[ebp+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _orientation$27[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR _tp$59[ebp+8]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv3726[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv3566[ebp]
	movss	xmm0, DWORD PTR tv3726[ebp]
	addss	xmm0, DWORD PTR tv3566[ebp]
	movss	DWORD PTR _pos$[ebp], xmm0

; 2523 : 				pos.y = orientation->M21*(tp.x + offset) + orientation->M22*tp.y + orientation->M23*tp.z + YPos();

	movss	xmm0, DWORD PTR _tp$59[ebp]
	addss	xmm0, DWORD PTR _offset$18[ebp]
	mov	edx, DWORD PTR _orientation$27[ebp]
	mulss	xmm0, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _orientation$27[ebp]
	movss	xmm1, DWORD PTR [eax+16]
	mulss	xmm1, DWORD PTR _tp$59[ebp+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _orientation$27[ebp]
	movss	xmm1, DWORD PTR [ecx+20]
	mulss	xmm1, DWORD PTR _tp$59[ebp+8]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv3728[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv3577[ebp]
	movss	xmm0, DWORD PTR tv3728[ebp]
	addss	xmm0, DWORD PTR tv3577[ebp]
	movss	DWORD PTR _pos$[ebp+4], xmm0

; 2524 : 				pos.z = orientation->M31*(tp.x + offset) + orientation->M32*tp.y + orientation->M33*tp.z + ZPos();

	movss	xmm0, DWORD PTR _tp$59[ebp]
	addss	xmm0, DWORD PTR _offset$18[ebp]
	mov	edx, DWORD PTR _orientation$27[ebp]
	mulss	xmm0, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _orientation$27[ebp]
	movss	xmm1, DWORD PTR [eax+28]
	mulss	xmm1, DWORD PTR _tp$59[ebp+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _orientation$27[ebp]
	movss	xmm1, DWORD PTR [ecx+32]
	mulss	xmm1, DWORD PTR _tp$59[ebp+8]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv3730[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv3588[ebp]
	movss	xmm0, DWORD PTR tv3730[ebp]
	addss	xmm0, DWORD PTR tv3588[ebp]
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 2525 : 
; 2526 : 				//RV - I-Hawk - RV new trails call changes	
; 2527 : 				if (!smokeTrail[TRAIL_ENGINE1])

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx+1160], 0
	jne	SHORT $LN5@ShowDamage

; 2528 : 				{
; 2529 : 
; 2530 : 					//smokeTrail[TRAIL_ENGINE1] = new DrawableTrail(TRAIL_SMOKE);	// smoke
; 2531 : 					//OTWDriver.InsertObject(smokeTrail[TRAIL_ENGINE1]);
; 2532 : 					
; 2533 : 					//If we are here, it's a big bird, so use bigger dmage trail
; 2534 : 		    		smokeTrail[TRAIL_ENGINE1] = TRAIL_BURNING_SMOKE2;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+1160], 30		; 0000001eH
$LN5@ShowDamage:

; 2535 : 				}
; 2536 : 
; 2537 : 			    //OTWDriver.AddTrailHead (smokeTrail[TRAIL_ENGINE1],  pos.x, pos.y, pos.z );
; 2538 : 			    
; 2539 : 				//RV - I-Hawk - damage trails size/alpha change with altitude 
; 2540 : 				if ( -ZPos() < 25000.0f)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv3596[ebp]
	movss	xmm0, DWORD PTR tv3596[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR __real@46c35000
	comiss	xmm1, xmm0
	jbe	$LN4@ShowDamage

; 2541 : 				{
; 2542 : 					damageTrailAlphaCx = (( 15000.0f - (-ZPos())) / 15000.0f) * 0.25f + 1;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv3601[ebp]
	movss	xmm0, DWORD PTR tv3601[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR __real@466a6000
	subss	xmm1, xmm0
	divss	xmm1, DWORD PTR __real@466a6000
	mulss	xmm1, DWORD PTR __real@3e800000
	addss	xmm1, DWORD PTR __real@3f800000
	movss	DWORD PTR ?damageTrailAlphaCx@@3MA, xmm1

; 2543 : 					damageTrailSizeCx =  (( 15000.0f - (-ZPos())) / 15000.0f) * 0.15f + 1;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv3606[ebp]
	movss	xmm0, DWORD PTR tv3606[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR __real@466a6000
	subss	xmm1, xmm0
	divss	xmm1, DWORD PTR __real@466a6000
	mulss	xmm1, DWORD PTR __real@3e19999a
	addss	xmm1, DWORD PTR __real@3f800000
	movss	DWORD PTR ?damageTrailSizeCx@@3MA, xmm1

; 2544 : 				}
; 2545 : 				else 

	jmp	SHORT $LN3@ShowDamage
$LN4@ShowDamage:

; 2546 : 				{
; 2547 : 					damageTrailAlphaCx = (( 15000.0f - (25000.0f)) / 15000.0f) * 0.25f + 1; 

	movss	xmm0, DWORD PTR __real@3f555555
	movss	DWORD PTR ?damageTrailAlphaCx@@3MA, xmm0

; 2548 : 					damageTrailSizeCx =  (( 15000.0f - (25000.0f)) / 15000.0f) * 0.15f + 1;

	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR ?damageTrailSizeCx@@3MA, xmm0
$LN3@ShowDamage:

; 2549 : 				}
; 2550 : 				smokeTrail_trail[TRAIL_ENGINE1] = DrawableParticleSys::PS_EmitTrail(
; 2551 : 					smokeTrail_trail[TRAIL_ENGINE1], smokeTrail[TRAIL_ENGINE1], 
; 2552 : 					pos.x, pos.y, pos.z, damageTrailAlphaCx, damageTrailSizeCx
; 2553 : 				);

	push	ecx
	movss	xmm0, DWORD PTR ?damageTrailSizeCx@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?damageTrailAlphaCx@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+1160]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+1172]
	push	edx
	call	?PS_EmitTrail@DrawableParticleSys@@SAKKHMMMMM@Z ; DrawableParticleSys::PS_EmitTrail
	add	esp, 28					; 0000001cH
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+1172], eax
$LN8@ShowDamage:

; 2554 : 			}
; 2555 : 		}
; 2556 : 	}
; 2557 : 
; 2558 : 	if ( pctStrength < 0.15f )
; 2559 : 	{ 
; 2560 : 
; 2561 : 		// RV I-Hawk - Do nothing here... no need for more than 2 damage trails max...
; 2562 : 
; 2563 : 		//
; 2564 : 		//pos.x = -dmx[1][0]*radius + XPos() + rearOffset.x * 0.75f;
; 2565 : 		//pos.y = -dmx[1][1]*radius + YPos() + rearOffset.y * 0.75f;
; 2566 : 		//pos.z = -dmx[1][2]*radius + ZPos() + rearOffset.z * 0.75f;
; 2567 : 
; 2568 : 		////RV - I-Hawk - RV new trails call changes
; 2569 : 		//if (!smokeTrail[TRAIL_ENGINE2])
; 2570 : 		//{
; 2571 : 		////smokeTrail[TRAIL_ENGINE2] = new DrawableTrail(TRAIL_SMOKE);	// smoke
; 2572 : 		////smokeTrail[TRAIL_ENGINE2] = new DrawableTrail(TRAIL_BURNING_SMOKE);	// smoke
; 2573 : 		////OTWDriver.InsertObject(smokeTrail[TRAIL_ENGINE2]);
; 2574 : 		//smokeTrail[TRAIL_ENGINE2] = TRAIL_BURNING_SMOKE;
; 2575 : 		//}
; 2576 : 		////OTWDriver.AddTrailHead (smokeTrail[TRAIL_ENGINE2],  pos.x, pos.y, pos.z );
; 2577 : 		////
; 2578 : 		////RV - I-Hawk - damage trails size/alpha change with altitude 
; 2579 : 		//if ( -ZPos() < 25000.0f)
; 2580 : 		//{
; 2581 : 		//damageTrailAlpha = (( 10000.0f - (-ZPos())) / 10000.0f) * 0.25f + 1;
; 2582 : 		//damageTrailSize =  (( 10000.0f - (-ZPos())) / 10000.0f) * 0.25f + 1;
; 2583 : 		//}
; 2584 : 		//else 
; 2585 : 		//{
; 2586 : 		//damageTrailAlpha = (( 10000.0f - (25000.0f)) / 10000.0f) * 0.25f + 1; 
; 2587 : 		//damageTrailSize =  (( 10000.0f - (25000.0f)) / 10000.0f) * 0.25f + 1;
; 2588 : 		//}
; 2589 : 		//smokeTrail_trail[TRAIL_ENGINE2] = DrawableParticleSys::PS_EmitTrail(smokeTrail_trail[TRAIL_ENGINE2], smokeTrail[TRAIL_ENGINE2], pos.x, pos.y, pos.z, damageTrailAlpha, damageTrailSize);
; 2590 : 
; 2591 : 		//// occasionalyy add a smoke cloud
; 2592 : 		///*
; 2593 : 		//if ( sfxTimer > 0.2f && (rand() & 0x3) == 0x3 )
; 2594 : 		//{
; 2595 : 		//sfxTimer = 0.0f;
; 2596 : 		//OTWDriver.AddSfxRequest(
; 2597 : 		//	new SfxClass (SFX_TRAILSMOKE,				// type
; 2598 : 		//	&pos,							// world pos
; 2599 : 		//	2.5f,							// time to live
; 2600 : 		//	2.0f ) );		// scale
; 2601 : 		//}
; 2602 : 		//
; 2603 :    }
; 2604 : 
; 2605 :    // occasionally, perturb the controls
; 2606 : 	 // JB 010104
; 2607 :    //if ( pctStrength < 0.5f && (rand() & 0xf) == 0xf)
; 2608 : 	if (!g_bDisableFunkyChicken && pctStrength < 0.5f && (rand() & 0xf) == 0xf)

	movzx	ecx, BYTE PTR ?g_bDisableFunkyChicken@@3_NA ; g_bDisableFunkyChicken
	test	ecx, ecx
	jne	SHORT $LN1@ShowDamage
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	comiss	xmm0, DWORD PTR [edx+292]
	jbe	SHORT $LN1@ShowDamage
	call	_rand
	and	eax, 15					; 0000000fH
	cmp	eax, 15					; 0000000fH
	jne	SHORT $LN1@ShowDamage

; 2609 : 	{
; 2610 : 	 // JB 010104
; 2611 : 		  ioPerturb = 0.5f + ( 1.0f - pctStrength );

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR [eax+292]
	addss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+676], xmm0
$LN1@ShowDamage:
$LN163@ShowDamage:

; 2612 : 		  // good place also to stick in a damage, clunky sound....
; 2613 :   }
; 2614 : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN165@ShowDamage:
	DD	$LN158@ShowDamage
	DD	$LN157@ShowDamage
	DD	$LN154@ShowDamage
	DD	$LN148@ShowDamage
	DD	$LN148@ShowDamage
	DD	$LN148@ShowDamage
	DD	$LN148@ShowDamage
	DD	$LN148@ShowDamage
$LN166@ShowDamage:
	DD	$LN145@ShowDamage
	DD	$LN144@ShowDamage
	DD	$LN143@ShowDamage
	DD	$LN142@ShowDamage
	DD	$LN141@ShowDamage
?ShowDamage@AircraftClass@@QAEXXZ ENDP			; AircraftClass::ShowDamage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\damage.cpp
_TEXT	SEGMENT
_classPtr$ = -232					; size = 4
tv682 = -228						; size = 4
$T2 = -224						; size = 4
tv656 = -220						; size = 4
tv596 = -216						; size = 4
tv766 = -212						; size = 4
tv592 = -208						; size = 4
tv770 = -204						; size = 4
tv588 = -200						; size = 4
_az$3 = -196						; size = 4
tv750 = -192						; size = 4
tv661 = -188						; size = 4
tv746 = -184						; size = 4
tv691 = -180						; size = 4
tv742 = -176						; size = 4
tv686 = -172						; size = 4
tv724 = -168						; size = 4
tv768 = -164						; size = 4
tv774 = -160						; size = 4
tv670 = -156						; size = 4
tv704 = -152						; size = 4
tv665 = -148						; size = 4
tv700 = -144						; size = 4
tv764 = -140						; size = 4
tv772 = -136						; size = 4
tv652 = -132						; size = 4
tv695 = -128						; size = 4
tv674 = -124						; size = 4
$T4 = -120						; size = 4
tv244 = -116						; size = 4
_i$ = -112						; size = 4
_tmpSimBase$ = -108					; size = 4
_this$ = -104						; size = 4
_tpim$ = -100						; size = 36
_vec$5 = -64						; size = 12
_tpo$ = -52						; size = 12
_PSvec$ = -40						; size = 12
_pos$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?RunExplosion@AircraftClass@@QAEXXZ PROC		; AircraftClass::RunExplosion
; _this$ = ecx

; 1118 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RunExplosion@AircraftClass@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 220				; 000000dcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 	int				i;
; 1120 : 	Tpoint			pos;
; 1121 : 	SimBaseClass	*tmpSimBase;
; 1122 : 	Falcon4EntityClassType *classPtr;
; 1123 : 	Tpoint			tpo = Origin;

	mov	eax, DWORD PTR ?Origin@@3UTpoint@@B
	mov	DWORD PTR _tpo$[ebp], eax
	mov	ecx, DWORD PTR ?Origin@@3UTpoint@@B+4
	mov	DWORD PTR _tpo$[ebp+4], ecx
	mov	edx, DWORD PTR ?Origin@@3UTpoint@@B+8
	mov	DWORD PTR _tpo$[ebp+8], edx

; 1124 : 	Trotation		tpim = IMatrix;

	mov	ecx, 9
	mov	esi, OFFSET ?IMatrix@@3UTrotation@@B	; IMatrix
	lea	edi, DWORD PTR _tpim$[ebp]
	rep movsd

; 1125 : 
; 1126 : 	//RV - I-Hawk - Added a 0 vector for RV new PS calls
; 1127 : 	Tpoint PSvec;
; 1128 : 	PSvec.x = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PSvec$[ebp], xmm0

; 1129 : 	PSvec.y = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PSvec$[ebp+4], xmm0

; 1130 : 	PSvec.z = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PSvec$[ebp+8], xmm0

; 1131 : 
; 1132 : 	SoundPos.Sfx(SFX_BOOMA1 + PRANDInt5());

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	0
	call	?PRANDInt5@@YAHXZ			; PRANDInt5
	add	eax, 43					; 0000002bH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMM@Z		; F4SoundPos::Sfx

; 1133 : 
; 1134 : 
; 1135 : ////////////////////
; 1136 : 	if ( this == SimDriver.GetPlayerEntity() ) {

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	cmp	DWORD PTR _this$[ebp], eax
	jne	$LN12@RunExplosi

; 1137 : 		float az = (float)atan2 (dmx[0][1], dmx[0][0]);

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	cvtss2sd xmm0, DWORD PTR [edx+eax]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 0
	cvtss2sd xmm0, DWORD PTR [eax+ecx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _az$3[ebp]

; 1138 : 		OTWDriver.SetChaseAzEl(az, 0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _az$3[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?SetChaseAzEl@OTWDriverClass@@QAEXMM@Z	; OTWDriverClass::SetChaseAzEl
$LN12@RunExplosi:

; 1139 : 	}
; 1140 : 	if (CreateDamageF16Effects ()) return;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateDamageF16Effects@AircraftClass@@IAEHXZ ; AircraftClass::CreateDamageF16Effects
	test	eax, eax
	je	SHORT $LN11@RunExplosi
	jmp	$LN13@RunExplosi
$LN11@RunExplosi:

; 1141 : ////////////////////
; 1142 : 
; 1143 : 
; 1144 : 	// 1st do primary explosion
; 1145 :     pos.x = XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _pos$[ebp]

; 1146 :     pos.y = YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _pos$[ebp+4]

; 1147 :     pos.z = ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _pos$[ebp+8]

; 1148 : 
; 1149 : 	if ( OnGround( ) )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+148]
	call	edx
	test	eax, eax
	je	$LN10@RunExplosi

; 1150 : 	{
; 1151 : 		pos.z = OTWDriver.GetGroundLevel( pos.x, pos.y ) - 4.0f;

	push	0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	fstp	DWORD PTR tv588[ebp]
	movss	xmm0, DWORD PTR tv588[ebp]
	subss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 1152 : 		SetDelta( XDelta() * 0.1f, YDelta() * 0.1f, -50.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@c2480000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv592[ebp]
	movss	xmm0, DWORD PTR tv592[ebp]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv596[ebp]
	movss	xmm0, DWORD PTR tv596[ebp]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta

; 1153 : 		/*
; 1154 :     	OTWDriver.AddSfxRequest(
; 1155 :   			new SfxClass (SFX_GROUND_EXPLOSION,				// type
; 1156 : 			&pos,							// world pos
; 1157 : 			1.2f,							// time to live
; 1158 : 			100.0f ) );		// scale
; 1159 : 			*/
; 1160 : 
; 1161 : 		DrawableParticleSys::PS_AddParticleEx(
; 1162 : 			(SFX_GROUND_EXPLOSION + 1), &pos, &PSvec
; 1163 : 		);

	lea	eax, DWORD PTR _PSvec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	push	6
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH

; 1164 : 
; 1165 : 	}
; 1166 : 	else

	jmp	SHORT $LN9@RunExplosi
$LN10@RunExplosi:

; 1167 : 	{
; 1168 : 		Tpoint vec = { XDelta(), YDelta(), ZDelta() }; //I-Hawk - Added vector for AC explosion effect

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR _vec$5[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR _vec$5[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR _vec$5[ebp+8]

; 1169 : 
; 1170 : 		/*
; 1171 :     	OTWDriver.AddSfxRequest(
; 1172 :   			new SfxClass (SFX_AC_AIR_EXPLOSION,				// type
; 1173 : 			&pos,							// world pos
; 1174 : 			2.0f,							// time to live
; 1175 : 			200.0f + 200 * PRANDFloatPos() ) );		// scale
; 1176 : 			*/
; 1177 : 
; 1178 : 		DrawableParticleSys::PS_AddParticleEx(
; 1179 : 			(SFX_AC_AIR_EXPLOSION + 1), &pos, &vec
; 1180 : 		);

	lea	edx, DWORD PTR _vec$5[ebp]
	push	edx
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	push	1
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
$LN9@RunExplosi:

; 1181 : 	}
; 1182 : 
; 1183 : 	// Add the parts (appairently hardcoded at 4)
; 1184 : 	// Recoded by KCK on 6/23 to remove damage station BS
; 1185 : 	// KCK NOTE: Why are we creating SimBaseClass entities here?
; 1186 : 	// Can't we just pass the stinking drawable object?
; 1187 : 	// Ed seems to think not, if we want to keep the rotation deltas.
; 1188 : 	for (i=0; i<4; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@RunExplosi
$LN7@RunExplosi:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN8@RunExplosi:
	cmp	DWORD PTR _i$[ebp], 4
	jge	$LN6@RunExplosi

; 1189 : 		{
; 1190 : 		tmpSimBase = new SimStaticClass(Type());//SimBaseClass(Type());

	push	592					; 00000250H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN15@RunExplosi
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	edx, ax
	push	edx
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0SimStaticClass@@QAE@H@Z		; SimStaticClass::SimStaticClass
	mov	DWORD PTR tv244[ebp], eax
	jmp	SHORT $LN16@RunExplosi
$LN15@RunExplosi:
	mov	DWORD PTR tv244[ebp], 0
$LN16@RunExplosi:
	mov	eax, DWORD PTR tv244[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _tmpSimBase$[ebp], ecx

; 1191 : 		classPtr = &Falcon4ClassTable[Type()-VU_LAST_ENTITY_TYPE];

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	edx, ax
	sub	edx, 100				; 00000064H
	imul	edx, 81					; 00000051H
	add	edx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	DWORD PTR _classPtr$[ebp], edx

; 1192 : 		CalcTransformMatrix (tmpSimBase);

	mov	eax, DWORD PTR _tmpSimBase$[ebp]
	push	eax
	call	?CalcTransformMatrix@@YAXPAVSimBaseClass@@@Z ; CalcTransformMatrix
	add	esp, 4

; 1193 : 		OTWDriver.CreateVisualObject(tmpSimBase, classPtr->visType[i+2], &tpo, &tpim, OTWDriver.Scale());

	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?Scale@OTWDriverClass@@QAEMXZ		; OTWDriverClass::Scale
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _tpim$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tpo$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _classPtr$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2+64]
	push	edx
	mov	eax, DWORD PTR _tmpSimBase$[ebp]
	push	eax
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?CreateVisualObject@OTWDriverClass@@QAEXPAVSimBaseClass@@HPAUTpoint@@PAUTrotation@@M@Z ; OTWDriverClass::CreateVisualObject

; 1194 : 		tmpSimBase->SetPosition (pos.x, pos.y, pos.z);

	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _tmpSimBase$[ebp]
	call	?SetPosition@VuEntity@@QAEXMMM@Z	; VuEntity::SetPosition

; 1195 : 
; 1196 : 		if (!i)

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN5@RunExplosi

; 1197 : 			{
; 1198 : 			tmpSimBase->SetDelta (XDelta(), YDelta(), ZDelta());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _tmpSimBase$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta
$LN5@RunExplosi:

; 1199 : 			}
; 1200 : 		if (!OnGround())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	jne	$LN4@RunExplosi

; 1201 : 			{
; 1202 : 			tmpSimBase->SetDelta (	XDelta() + 50.0f * PRANDFloat(),
; 1203 : 									YDelta() + 50.0f * PRANDFloat(),
; 1204 : 									ZDelta() + 50.0f * PRANDFloat() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv652[ebp]
	movss	xmm0, DWORD PTR tv652[ebp]
	movss	DWORD PTR tv764[ebp], xmm0
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv656[ebp]
	movss	xmm0, DWORD PTR tv656[ebp]
	mulss	xmm0, DWORD PTR __real@42480000
	movss	xmm1, DWORD PTR tv764[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv661[ebp]
	movss	xmm0, DWORD PTR tv661[ebp]
	movss	DWORD PTR tv766[ebp], xmm0
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv665[ebp]
	movss	xmm0, DWORD PTR tv665[ebp]
	mulss	xmm0, DWORD PTR __real@42480000
	movss	xmm1, DWORD PTR tv766[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv670[ebp]
	movss	xmm0, DWORD PTR tv670[ebp]
	movss	DWORD PTR tv768[ebp], xmm0
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv674[ebp]
	movss	xmm0, DWORD PTR tv674[ebp]
	mulss	xmm0, DWORD PTR __real@42480000
	movss	xmm1, DWORD PTR tv768[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _tmpSimBase$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta

; 1205 : 			}
; 1206 : 		else

	jmp	$LN3@RunExplosi
$LN4@RunExplosi:

; 1207 : 			{
; 1208 : 			tmpSimBase->SetDelta (	XDelta() + 50.0f * PRANDFloat(),
; 1209 : 									YDelta() + 50.0f * PRANDFloat(),
; 1210 : 									ZDelta() - 50.0f * PRANDFloatPos() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv682[ebp]
	movss	xmm0, DWORD PTR tv682[ebp]
	movss	DWORD PTR tv770[ebp], xmm0
	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv686[ebp]
	movss	xmm0, DWORD PTR tv686[ebp]
	mulss	xmm0, DWORD PTR __real@42480000
	movss	xmm1, DWORD PTR tv770[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv691[ebp]
	movss	xmm0, DWORD PTR tv691[ebp]
	movss	DWORD PTR tv772[ebp], xmm0
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv695[ebp]
	movss	xmm0, DWORD PTR tv695[ebp]
	mulss	xmm0, DWORD PTR __real@42480000
	movss	xmm1, DWORD PTR tv772[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv700[ebp]
	movss	xmm0, DWORD PTR tv700[ebp]
	movss	DWORD PTR tv774[ebp], xmm0
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv704[ebp]
	movss	xmm0, DWORD PTR tv704[ebp]
	mulss	xmm0, DWORD PTR __real@42480000
	movss	xmm1, DWORD PTR tv774[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _tmpSimBase$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta
$LN3@RunExplosi:

; 1211 : 			}
; 1212 : 		tmpSimBase->SetYPR (Yaw(), Pitch(), Roll());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _tmpSimBase$[ebp]
	call	?SetYPR@VuEntity@@QAEXMMM@Z		; VuEntity::SetYPR

; 1213 : 
; 1214 : 		if (!i)

	cmp	DWORD PTR _i$[ebp], 0
	jne	$LN2@RunExplosi

; 1215 : 			{
; 1216 : 			// First peice is more steady and is flaming
; 1217 : 			tmpSimBase->SetYPRDelta ( 0.0F, 0.0F, 10.0F + PRANDFloat() * 30.0F * DTR);

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv724[ebp]
	movss	xmm0, DWORD PTR tv724[ebp]
	mulss	xmm0, DWORD PTR __real@41f00000
	mulss	xmm0, DWORD PTR __real@3c8efa34
	addss	xmm0, DWORD PTR __real@41200000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _tmpSimBase$[ebp]
	call	?SetYPRDelta@VuEntity@@QAEXMMM@Z	; VuEntity::SetYPRDelta

; 1218 : 			/*
; 1219 : 			OTWDriver.AddSfxRequest(
; 1220 :   			new SfxClass (SFX_FLAMING_PART,				// type
; 1221 : 				SFX_MOVES | SFX_USES_GRAVITY | SFX_EXPLODE_WHEN_DONE,
; 1222 : 				tmpSimBase,								// sim base *
; 1223 : 				3.0f + PRANDFloatPos() * 4.0F,			// time to live
; 1224 : 				1.0F ) );								// scale
; 1225 : 				*/
; 1226 : 			pos.x = XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _pos$[ebp]

; 1227 : 			pos.y = YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _pos$[ebp+4]

; 1228 : 			pos.z = ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _pos$[ebp+8]

; 1229 : 
; 1230 : 			DrawableParticleSys::PS_AddParticleEx((SFX_FLAMING_PART + 1), &pos, &PSvec);

	lea	ecx, DWORD PTR _PSvec$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	push	5
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH

; 1231 : 			}
; 1232 : 		else

	jmp	$LN1@RunExplosi
$LN2@RunExplosi:

; 1233 : 			{
; 1234 : 			// spin piece a random amount
; 1235 : 			tmpSimBase->SetYPRDelta (	PRANDFloat() * 30.0F * DTR,
; 1236 : 										PRANDFloat() * 30.0F * DTR,
; 1237 : 										PRANDFloat() * 30.0F * DTR);

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv742[ebp]
	movss	xmm0, DWORD PTR tv742[ebp]
	mulss	xmm0, DWORD PTR __real@41f00000
	mulss	xmm0, DWORD PTR __real@3c8efa34
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv746[ebp]
	movss	xmm0, DWORD PTR tv746[ebp]
	mulss	xmm0, DWORD PTR __real@41f00000
	mulss	xmm0, DWORD PTR __real@3c8efa34
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv750[ebp]
	movss	xmm0, DWORD PTR tv750[ebp]
	mulss	xmm0, DWORD PTR __real@41f00000
	mulss	xmm0, DWORD PTR __real@3c8efa34
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _tmpSimBase$[ebp]
	call	?SetYPRDelta@VuEntity@@QAEXMMM@Z	; VuEntity::SetYPRDelta

; 1238 : 			/*
; 1239 : 			OTWDriver.AddSfxRequest(
; 1240 : 				new SfxClass (SFX_SMOKING_PART,			// type
; 1241 : 				SFX_MOVES | SFX_USES_GRAVITY | SFX_BOUNCES | SFX_EXPLODE_WHEN_DONE,
; 1242 : 				tmpSimBase,								// sim base *
; 1243 : 				4.0f * PRANDFloatPos() + (float)((i+1)*(i+1)),	// time to live
; 1244 : 				1.0 ) );								// scale
; 1245 : 				*/
; 1246 : 			pos.x = XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _pos$[ebp]

; 1247 : 			pos.y = YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _pos$[ebp+4]

; 1248 : 			pos.z = ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _pos$[ebp+8]

; 1249 : 
; 1250 : 			DrawableParticleSys::PS_AddParticleEx((SFX_SMOKING_PART + 1), &pos, &PSvec);

	lea	eax, DWORD PTR _PSvec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	push	4
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
$LN1@RunExplosi:

; 1251 : 			}
; 1252 : 		}

	jmp	$LN7@RunExplosi
$LN6@RunExplosi:
$LN13@RunExplosi:

; 1253 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?RunExplosion@AircraftClass@@QAEXXZ$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?RunExplosion@AircraftClass@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RunExplosion@AircraftClass@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?RunExplosion@AircraftClass@@QAEXXZ ENDP		; AircraftClass::RunExplosion
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\damage.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CleanupVortex@AircraftClass@@QAEXXZ PROC		; AircraftClass::CleanupVortex
; _this$ = ecx

; 525  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 526  : 	if ( dustTrail ){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1424], 0
	je	SHORT $LN7@CleanupVor

; 527  : 
; 528  :         DrawableParticleSys::PS_KillTrail(dustTrail_trail);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1428]
	push	edx
	call	?PS_KillTrail@DrawableParticleSys@@SAXK@Z ; DrawableParticleSys::PS_KillTrail
	add	esp, 4

; 529  : 		dustTrail = dustTrail_trail = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1428], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1424], 0
$LN7@CleanupVor:

; 530  : 	}
; 531  : 
; 532  : 	if ( lwingvortex ){

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+1376], 0
	je	SHORT $LN6@CleanupVor

; 533  : 
; 534  : 		DrawableParticleSys::PS_KillTrail(lwingvortex_trail);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1380]
	push	ecx
	call	?PS_KillTrail@DrawableParticleSys@@SAXK@Z ; DrawableParticleSys::PS_KillTrail
	add	esp, 4

; 535  : 		lwingvortex = lwingvortex_trail = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1380], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1376], 0
$LN6@CleanupVor:

; 536  : 	}
; 537  : 
; 538  : 	if ( rwingvortex ){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1384], 0
	je	SHORT $LN5@CleanupVor

; 539  : 
; 540  : 		DrawableParticleSys::PS_KillTrail(rwingvortex_trail);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1388]
	push	eax
	call	?PS_KillTrail@DrawableParticleSys@@SAXK@Z ; DrawableParticleSys::PS_KillTrail
	add	esp, 4

; 541  : 		rwingvortex = rwingvortex_trail = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1388], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1384], 0
$LN5@CleanupVor:

; 542  : 	}
; 543  : 
; 544  : 	if ( rvortex1 ){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1400], 0
	je	SHORT $LN4@CleanupVor

; 545  : 
; 546  : 		DrawableParticleSys::PS_KillTrail(rvortex1_trail);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1404]
	push	edx
	call	?PS_KillTrail@DrawableParticleSys@@SAXK@Z ; DrawableParticleSys::PS_KillTrail
	add	esp, 4

; 547  : 		rvortex1 = rvortex1_trail = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1404], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1400], 0
$LN4@CleanupVor:

; 548  : 	}
; 549  : 
; 550  : 	if ( lvortex1 ){

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+1392], 0
	je	SHORT $LN3@CleanupVor

; 551  : 
; 552  : 		DrawableParticleSys::PS_KillTrail(lvortex1_trail);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1396]
	push	ecx
	call	?PS_KillTrail@DrawableParticleSys@@SAXK@Z ; DrawableParticleSys::PS_KillTrail
	add	esp, 4

; 553  : 		lvortex1 = lvortex1_trail = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1396], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1392], 0
$LN3@CleanupVor:

; 554  : 	}
; 555  : 
; 556  : 	if ( rvortex2 ){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1416], 0
	je	SHORT $LN2@CleanupVor

; 557  : 
; 558  : 		DrawableParticleSys::PS_KillTrail(rvortex2_trail);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1420]
	push	eax
	call	?PS_KillTrail@DrawableParticleSys@@SAXK@Z ; DrawableParticleSys::PS_KillTrail
	add	esp, 4

; 559  : 		rvortex2 = rvortex2_trail = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1420], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1416], 0
$LN2@CleanupVor:

; 560  : 	}
; 561  : 
; 562  : 	if ( lvortex2 ){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1408], 0
	je	SHORT $LN8@CleanupVor

; 563  : 
; 564  : 		DrawableParticleSys::PS_KillTrail(lvortex2_trail);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1412]
	push	edx
	call	?PS_KillTrail@DrawableParticleSys@@SAXK@Z ; DrawableParticleSys::PS_KillTrail
	add	esp, 4

; 565  : 		lvortex2 = lvortex2_trail = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1412], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1408], 0
$LN8@CleanupVor:

; 566  : 	}
; 567  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CleanupVortex@AircraftClass@@QAEXXZ ENDP		; AircraftClass::CleanupVortex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\damage.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = -4						; size = 4
?CleanupDamageStation@AircraftClass@@QAEXXZ PROC	; AircraftClass::CleanupDamageStation
; _this$ = ecx

; 489  : void AircraftClass::CleanupDamageStation(){

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 490  :     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 491  :     for (i=0; i<TRAIL_MAX; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@CleanupDam
$LN9@CleanupDam:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@CleanupDam:
	cmp	DWORD PTR _i$[ebp], 3
	jge	SHORT $LN8@CleanupDam

; 492  : 		if (smokeTrail[i]){

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx*4+1160], 0
	je	SHORT $LN7@CleanupDam

; 493  : 
; 494  : 		//RV - I-Hawk - RV new trails call changes
; 495  : 	    //OTWDriver.RemoveObject(smokeTrail[i], TRUE);
; 496  : 		DrawableParticleSys::PS_KillTrail(smokeTrail_trail[i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+1172]
	push	edx
	call	?PS_KillTrail@DrawableParticleSys@@SAXK@Z ; DrawableParticleSys::PS_KillTrail
	add	esp, 4

; 497  : 	    smokeTrail[i] = smokeTrail_trail[i] = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+1172], 0
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx*4+1160], 0
$LN7@CleanupDam:

; 498  : 	}
; 499  :     }

	jmp	SHORT $LN9@CleanupDam
$LN8@CleanupDam:

; 500  :     for (i = 0; i < MAXENGINES; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@CleanupDam
$LN5@CleanupDam:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@CleanupDam:
	cmp	DWORD PTR _i$[ebp], 8
	jge	$LN11@CleanupDam

; 501  : 	if (conTrails[i])

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx*4+1184], 0
	je	SHORT $LN3@CleanupDam

; 502  : 	{
; 503  : 	    //OTWDriver.RemoveObject(conTrails[i], TRUE);
; 504  : 		DrawableParticleSys::PS_KillTrail(conTrails_trail[i]);

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+1216]
	push	eax
	call	?PS_KillTrail@DrawableParticleSys@@SAXK@Z ; DrawableParticleSys::PS_KillTrail
	add	esp, 4

; 505  : 	    conTrails[i] = conTrails_trail[i] = NULL;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+1216], 0
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+1184], 0
$LN3@CleanupDam:

; 506  : 	}
; 507  : 
; 508  : 		if (colorConTrails[i]){

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx*4+1248], 0
	je	SHORT $LN2@CleanupDam

; 509  : 			//OTWDriver.RemoveObject(conTrails[i], TRUE);
; 510  : 			DrawableParticleSys::PS_KillTrail(colorConTrails_trail[i]);

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+1280]
	push	eax
	call	?PS_KillTrail@DrawableParticleSys@@SAXK@Z ; DrawableParticleSys::PS_KillTrail
	add	esp, 4

; 511  : 			colorConTrails[i] = colorConTrails_trail[i] = NULL;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+1280], 0
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+1248], 0
$LN2@CleanupDam:

; 512  : 		}
; 513  : 
; 514  : 
; 515  : 		if (engineTrails[i]){

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx*4+1312], 0
	je	SHORT $LN1@CleanupDam

; 516  : 	    //OTWDriver.RemoveObject(engineTrails[i], TRUE);
; 517  : 		DrawableParticleSys::PS_KillTrail(engineTrails_trail[i]);

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+1344]
	push	eax
	call	?PS_KillTrail@DrawableParticleSys@@SAXK@Z ; DrawableParticleSys::PS_KillTrail
	add	esp, 4

; 518  : 	    engineTrails[i] = engineTrails_trail[i] = NULL;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+1344], 0
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+1312], 0
$LN1@CleanupDam:

; 519  : 	}
; 520  :     }

	jmp	$LN5@CleanupDam
$LN11@CleanupDam:

; 521  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CleanupDamageStation@AircraftClass@@QAEXXZ ENDP	; AircraftClass::CleanupDamageStation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\damage.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InitDamageStation@AircraftClass@@QAEXXZ PROC		; AircraftClass::InitDamageStation
; _this$ = ecx

; 485  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 486  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InitDamageStation@AircraftClass@@QAEXXZ ENDP		; AircraftClass::InitDamageStation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\damage.cpp
_TEXT	SEGMENT
_nEngines$ = -16					; size = 4
tv71 = -12						; size = 4
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
_tlist$ = 8						; size = 4
_tlist_trail$ = 12					; size = 4
?CancelEngineTrails@AircraftClass@@QAEXPAK0@Z PROC	; AircraftClass::CancelEngineTrails
; _this$ = ecx

; 1482 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1483 :     int nEngines = min(MAXENGINES, af->auxaeroData->nEngines);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+344], 8
	jle	SHORT $LN7@CancelEngi
	mov	DWORD PTR tv71[ebp], 8
	jmp	SHORT $LN8@CancelEngi
$LN7@CancelEngi:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+344]
	mov	DWORD PTR tv71[ebp], eax
$LN8@CancelEngi:
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR _nEngines$[ebp], ecx

; 1484 :     for(int i = 0; i < nEngines; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@CancelEngi
$LN3@CancelEngi:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN4@CancelEngi:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _nEngines$[ebp]
	jge	SHORT $LN5@CancelEngi

; 1485 : 	if (tlist[i]) {

	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _tlist$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 0
	je	SHORT $LN1@CancelEngi

; 1486 : 		/* RV - I-Hawk - RV new trails call changes
; 1487 : 	    OTWDriver.AddSfxRequest(
; 1488 : 		new SfxClass (
; 1489 : 		21.2f,							// time to live
; 1490 : 		tlist[i]) );		// scale
; 1491 : 		*/
; 1492 : 		DrawableParticleSys::PS_KillTrail(tlist_trail[i]);

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _tlist_trail$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	?PS_KillTrail@DrawableParticleSys@@SAXK@Z ; DrawableParticleSys::PS_KillTrail
	add	esp, 4

; 1493 : 	    tlist[i] = tlist_trail[i] = NULL;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _tlist_trail$[ebp]
	mov	DWORD PTR [ecx+eax*4], 0
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _tlist$[ebp]
	mov	DWORD PTR [eax+edx*4], 0
$LN1@CancelEngi:

; 1494 : 	}
; 1495 :     }

	jmp	SHORT $LN3@CancelEngi
$LN5@CancelEngi:

; 1496 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CancelEngineTrails@AircraftClass@@QAEXPAK0@Z ENDP	; AircraftClass::CancelEngineTrails
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\damage.cpp
_TEXT	SEGMENT
$T1 = -400						; size = 12
$T2 = -388						; size = 12
$T3 = -376						; size = 12
$T4 = -364						; size = 12
_noz$ = -352						; size = 8
tv1095 = -344						; size = 4
tv1281 = -340						; size = 4
tv1085 = -336						; size = 4
tv1299 = -332						; size = 4
tv1075 = -328						; size = 4
tv1309 = -324						; size = 4
tv1018 = -320						; size = 4
tv1290 = -316						; size = 4
tv1008 = -312						; size = 4
tv1253 = -308						; size = 4
tv969 = -304						; size = 4
tv1304 = -300						; size = 4
tv959 = -296						; size = 4
tv1295 = -292						; size = 4
tv1271 = -288						; size = 4
tv1285 = -284						; size = 4
tv1263 = -280						; size = 4
tv1275 = -276						; size = 4
tv1318 = -272						; size = 4
tv1313 = -268						; size = 4
tv919 = -264						; size = 4
tv1324 = -260						; size = 4
tv1258 = -256						; size = 4
_nTrails$ = -252					; size = 4
tv149 = -248						; size = 4
_thrz$ = -244						; size = 4
_offset$5 = -240					; size = 4
_thrx$ = -236						; size = 4
_thry$ = -232						; size = 4
tv157 = -228						; size = 4
_i$6 = -224						; size = 4
_i$7 = -220						; size = 4
_i$8 = -216						; size = 4
_i$9 = -212						; size = 4
_nEngines$ = -208					; size = 4
_i$10 = -204						; size = 4
_tp$11 = -200						; size = 4
_nContrails$ = -196					; size = 4
_orientation$ = -192					; size = 4
_this$ = -188						; size = 4
_smokeVel$12 = -184					; size = 12
$T13 = -172						; size = 12
$T14 = -160						; size = 12
$T15 = -148						; size = 12
$T16 = -136						; size = 12
_vec$ = -124						; size = 12
_pos$ = -112						; size = 12
_ContrailsLocation$ = -100				; size = 96
__$ArrayPad$ = -4					; size = 4
_ttype$ = 8						; size = 4
_tlist$ = 12						; size = 4
_tlist_trail$ = 16					; size = 4
?AddEngineTrails@AircraftClass@@QAEXHPAK0@Z PROC	; AircraftClass::AddEngineTrails
; _this$ = ecx

; 1256 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 400				; 00000190H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1257 : 	// 2002-02-16 ADDED BY S.G. It's been seen that drawPointer is NULL here and &((DrawableBSP*)drawPointer)->orientation is simply drawPointer+0x2C hence why orientation is never NULL
; 1258 : 	if (!drawPointer)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+332], 0
	jne	SHORT $LN50@AddEngineT

; 1259 : 		return;

	jmp	$LN51@AddEngineT
$LN50@AddEngineT:

; 1260 : 
; 1261 : 	Tpoint pos,vec;
; 1262 : 
; 1263 : 	Trotation *orientation = &((DrawableBSP*)drawPointer)->orientation;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+332]
	add	edx, 48					; 00000030H
	mov	DWORD PTR _orientation$[ebp], edx

; 1264 : 
; 1265 :     mlTrig noz;
; 1266 :     mlSinCos(&noz, af->nozzlePos);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1808]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _noz$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 1267 : 
; 1268 : 	float thrx = -noz.cos ;

	movss	xmm0, DWORD PTR _noz$[ebp+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _thrx$[ebp], xmm0

; 1269 : 	float thry = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _thry$[ebp], xmm0

; 1270 : 	float thrz =  noz.sin ;

	movss	xmm0, DWORD PTR _noz$[ebp]
	movss	DWORD PTR _thrz$[ebp], xmm0

; 1271 : 
; 1272 : 	vec.x = orientation->M11*thrx + orientation->M12*thry + orientation->M13*thrz;

	mov	eax, DWORD PTR _orientation$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _thrx$[ebp]
	mov	ecx, DWORD PTR _orientation$[ebp]
	movss	xmm1, DWORD PTR [ecx+4]
	mulss	xmm1, DWORD PTR _thry$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _orientation$[ebp]
	movss	xmm1, DWORD PTR [edx+8]
	mulss	xmm1, DWORD PTR _thrz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _vec$[ebp], xmm0

; 1273 : 	vec.y = orientation->M21*thrx + orientation->M22*thry + orientation->M23*thrz;

	mov	eax, DWORD PTR _orientation$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _thrx$[ebp]
	mov	ecx, DWORD PTR _orientation$[ebp]
	movss	xmm1, DWORD PTR [ecx+16]
	mulss	xmm1, DWORD PTR _thry$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _orientation$[ebp]
	movss	xmm1, DWORD PTR [edx+20]
	mulss	xmm1, DWORD PTR _thrz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _vec$[ebp+4], xmm0

; 1274 : 	vec.z = orientation->M31*thrx + orientation->M32*thry + orientation->M33*thrz;

	mov	eax, DWORD PTR _orientation$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR _thrx$[ebp]
	mov	ecx, DWORD PTR _orientation$[ebp]
	movss	xmm1, DWORD PTR [ecx+28]
	mulss	xmm1, DWORD PTR _thry$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _orientation$[ebp]
	movss	xmm1, DWORD PTR [edx+32]
	mulss	xmm1, DWORD PTR _thrz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _vec$[ebp+8], xmm0

; 1275 : 
; 1276 : 	ShiAssert(orientation);
; 1277 : 	if (!orientation)

	cmp	DWORD PTR _orientation$[ebp], 0
	jne	SHORT $LN49@AddEngineT

; 1278 : 		return;

	jmp	$LN51@AddEngineT
$LN49@AddEngineT:

; 1279 : 	
; 1280 : 	/*
; 1281 : 	RV - I-Hawk 
; 1282 : 
; 1283 : 	If trails are contrails or CTRL-S trails we will unite
; 1284 : 	trails emmiters locations based on engines locations.
; 1285 : 	if 2 engines are close enough, no need for a trail for each engine but enough to have one
; 1286 : 	trail for both...
; 1287 : 	*/
; 1288 : 
; 1289 : 	int nTrails;
; 1290 : 	int nEngines = min(MAXENGINES, af->auxaeroData->nEngines);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+344], 8
	jle	SHORT $LN53@AddEngineT
	mov	DWORD PTR tv149[ebp], 8
	jmp	SHORT $LN54@AddEngineT
$LN53@AddEngineT:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+344]
	mov	DWORD PTR tv149[ebp], eax
$LN54@AddEngineT:
	mov	ecx, DWORD PTR tv149[ebp]
	mov	DWORD PTR _nEngines$[ebp], ecx

; 1291 : 	int nContrails;
; 1292 : 	Tpoint ContrailsLocation[MAXENGINES];
; 1293 :     //if this are the regular engine trails, don't bother getting in here...
; 1294 : 	if (tlist == conTrails || tlist == colorConTrails)

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1184				; 000004a0H
	cmp	DWORD PTR _tlist$[ebp], edx
	je	SHORT $LN47@AddEngineT
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1248				; 000004e0H
	cmp	DWORD PTR _tlist$[ebp], eax
	jne	$LN48@AddEngineT
$LN47@AddEngineT:

; 1295 : 	{
; 1296 :         switch ( af->auxaeroData->nEngines )    //how many engines? 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+344]
	mov	DWORD PTR tv157[ebp], ecx
	mov	edx, DWORD PTR tv157[ebp]
	sub	edx, 1
	mov	DWORD PTR tv157[ebp], edx
	cmp	DWORD PTR tv157[ebp], 3
	ja	$LN19@AddEngineT
	mov	eax, DWORD PTR tv157[ebp]
	jmp	DWORD PTR $LN55@AddEngineT[eax*4]
$LN44@AddEngineT:

; 1297 : 		{
; 1298 : 			case 1:
; 1299 : 				nContrails = 1;

	mov	DWORD PTR _nContrails$[ebp], 1

; 1300 : 				ContrailsLocation[0] = af->auxaeroData->engineLocation[0];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+348]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	lea	ecx, DWORD PTR _ContrailsLocation$[ebp+eax]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], edx

; 1301 : 				break;

	jmp	$LN45@AddEngineT
$LN43@AddEngineT:

; 1302 : 			case 2:
; 1303 : 				if ( fabs(af->auxaeroData->engineLocation[0].y - af->auxaeroData->engineLocation[1].y) < 9.0f )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	mov	ecx, DWORD PTR [ecx+4]
	mov	esi, 12					; 0000000cH
	shl	esi, 0
	movss	xmm0, DWORD PTR [edx+eax+352]
	subss	xmm0, DWORD PTR [ecx+esi+352]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv919[ebp]
	movss	xmm0, DWORD PTR __real@41100000
	comiss	xmm0, DWORD PTR tv919[ebp]
	jbe	$LN42@AddEngineT

; 1304 : 				{
; 1305 : 					ContrailsLocation[0].x = af->auxaeroData->engineLocation[0].x;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR [ecx+edx+348]
	mov	DWORD PTR _ContrailsLocation$[ebp+eax], ecx

; 1306 : 					ContrailsLocation[0].y = (af->auxaeroData->engineLocation[0].y + af->auxaeroData->engineLocation[1].y) / 2.0f ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+932]
	mov	eax, DWORD PTR [eax+4]
	mov	esi, 12					; 0000000cH
	shl	esi, 0
	movss	xmm0, DWORD PTR [ecx+edx+352]
	addss	xmm0, DWORD PTR [eax+esi+352]
	divss	xmm0, DWORD PTR __real@40000000
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	movss	DWORD PTR _ContrailsLocation$[ebp+ecx+4], xmm0

; 1307 : 					ContrailsLocation[0].z = af->auxaeroData->engineLocation[0].z;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR [ecx+edx+356]
	mov	DWORD PTR _ContrailsLocation$[ebp+eax+8], ecx

; 1308 : 					nContrails = 1;

	mov	DWORD PTR _nContrails$[ebp], 1

; 1309 : 				}
; 1310 : 				else

	jmp	SHORT $LN38@AddEngineT
$LN42@AddEngineT:

; 1311 : 				{
; 1312 : 					nContrails = nEngines;

	mov	edx, DWORD PTR _nEngines$[ebp]
	mov	DWORD PTR _nContrails$[ebp], edx

; 1313 : 					for (int i = 0; i < MAXENGINES; i++)

	mov	DWORD PTR _i$8[ebp], 0
	jmp	SHORT $LN40@AddEngineT
$LN39@AddEngineT:
	mov	eax, DWORD PTR _i$8[ebp]
	add	eax, 1
	mov	DWORD PTR _i$8[ebp], eax
$LN40@AddEngineT:
	cmp	DWORD PTR _i$8[ebp], 8
	jge	SHORT $LN38@AddEngineT

; 1314 : 						ContrailsLocation[i] = af->auxaeroData->engineLocation[i];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$8[ebp]
	imul	ecx, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+ecx+348]
	mov	eax, DWORD PTR _i$8[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _ContrailsLocation$[ebp+eax]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN39@AddEngineT
$LN38@AddEngineT:

; 1315 : 				}
; 1316 : 				break;

	jmp	$LN45@AddEngineT
$LN37@AddEngineT:

; 1317 : 
; 1318 : 			//
; 1319 : 			//I-Hawk
; 1320 : 			//in case of 3 engines I assume the second is set as the middle one...
; 1321 : 			//3 engines A/C will always have one at the middle and the other two
; 1322 : 			//on simetrical positions on the sides... so enough to check distance
; 1323 : 			//from middle to one side 
; 1324 : 			//
; 1325 : 			case 3:
; 1326 : 				if ( fabs(af->auxaeroData->engineLocation[1].y - af->auxaeroData->engineLocation[2].y) < 4.5f )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	mov	ecx, DWORD PTR [ecx+4]
	mov	esi, 12					; 0000000cH
	shl	esi, 1
	movss	xmm0, DWORD PTR [edx+eax+352]
	subss	xmm0, DWORD PTR [ecx+esi+352]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv959[ebp]
	movss	xmm0, DWORD PTR __real@40900000
	comiss	xmm0, DWORD PTR tv959[ebp]
	jbe	$LN36@AddEngineT

; 1327 : 				{
; 1328 : 					if ((Get3DDistance (af->auxaeroData->engineLocation[1], af->auxaeroData->engineLocation[2])) < 4.5f )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	lea	eax, DWORD PTR [ecx+edx+348]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+348]
	push	edx
	call	?Get3DDistance@@YAMAAUTpoint@@0@Z	; Get3DDistance
	add	esp, 8
	fstp	DWORD PTR tv969[ebp]
	movss	xmm0, DWORD PTR __real@40900000
	comiss	xmm0, DWORD PTR tv969[ebp]
	jbe	SHORT $LN35@AddEngineT

; 1329 : 					{
; 1330 : 						nContrails = 1;

	mov	DWORD PTR _nContrails$[ebp], 1

; 1331 : 						ContrailsLocation[0] = af->auxaeroData->engineLocation[1];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR [edx+eax+348]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	lea	eax, DWORD PTR _ContrailsLocation$[ebp+edx]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
$LN35@AddEngineT:

; 1332 : 					}
; 1333 : 				}
; 1334 : 				else

	jmp	SHORT $LN31@AddEngineT
$LN36@AddEngineT:

; 1335 : 				{
; 1336 : 					nContrails = nEngines;

	mov	edx, DWORD PTR _nEngines$[ebp]
	mov	DWORD PTR _nContrails$[ebp], edx

; 1337 : 					for (int i = 0; i < MAXENGINES; i++)

	mov	DWORD PTR _i$9[ebp], 0
	jmp	SHORT $LN33@AddEngineT
$LN32@AddEngineT:
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax
$LN33@AddEngineT:
	cmp	DWORD PTR _i$9[ebp], 8
	jge	SHORT $LN31@AddEngineT

; 1338 : 						ContrailsLocation[i] = af->auxaeroData->engineLocation[i];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$9[ebp]
	imul	ecx, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+ecx+348]
	mov	eax, DWORD PTR _i$9[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _ContrailsLocation$[ebp+eax]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN32@AddEngineT
$LN31@AddEngineT:

; 1339 : 				}
; 1340 : 				break;

	jmp	$LN45@AddEngineT
$LN30@AddEngineT:

; 1341 : 			
; 1342 : 			//I-Hawk
; 1343 : 			//4 engine, assuming ordered in data from left to right...
; 1344 : 			//
; 1345 : 			case 4:
; 1346 : 				nContrails = 0; //make sure we get this changed in one of the conditions below...

	mov	DWORD PTR _nContrails$[ebp], 0

; 1347 : 				if ( fabs(af->auxaeroData->engineLocation[0].y - af->auxaeroData->engineLocation[1].y) < 9.0f )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	mov	ecx, DWORD PTR [ecx+4]
	mov	esi, 12					; 0000000cH
	shl	esi, 0
	movss	xmm0, DWORD PTR [edx+eax+352]
	subss	xmm0, DWORD PTR [ecx+esi+352]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1008[ebp]
	movss	xmm0, DWORD PTR __real@41100000
	comiss	xmm0, DWORD PTR tv1008[ebp]
	jbe	$LN28@AddEngineT

; 1348 : 				{
; 1349 : 					if ((Get3DDistance (af->auxaeroData->engineLocation[0], af->auxaeroData->engineLocation[1])) < 9.0f )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+348]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+348]
	push	edx
	call	?Get3DDistance@@YAMAAUTpoint@@0@Z	; Get3DDistance
	add	esp, 8
	fstp	DWORD PTR tv1018[ebp]
	movss	xmm0, DWORD PTR __real@41100000
	comiss	xmm0, DWORD PTR tv1018[ebp]
	jbe	$LN28@AddEngineT

; 1350 : 					{
; 1351 : 						nContrails = 2;

	mov	DWORD PTR _nContrails$[ebp], 2

; 1352 : 						ContrailsLocation[0] = Get3DMiddle (af->auxaeroData->engineLocation[0], af->auxaeroData->engineLocation[1]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR [edx+eax+348]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	lea	eax, DWORD PTR [ecx+edx+348]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	?Get3DMiddle@@YA?AUTpoint@@AAU1@0@Z	; Get3DMiddle
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T16[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T16[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T16[ebp+8], edx
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	lea	ecx, DWORD PTR _ContrailsLocation$[ebp+eax]
	mov	edx, DWORD PTR $T16[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T16[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T16[ebp+8]
	mov	DWORD PTR [ecx+8], edx

; 1353 : 						ContrailsLocation[1] = Get3DMiddle (af->auxaeroData->engineLocation[2], af->auxaeroData->engineLocation[3]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 12					; 0000000cH
	imul	eax, 3
	lea	ecx, DWORD PTR [edx+eax+348]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	lea	eax, DWORD PTR [ecx+edx+348]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	?Get3DMiddle@@YA?AUTpoint@@AAU1@0@Z	; Get3DMiddle
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T14[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T14[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T14[ebp+8], edx
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR _ContrailsLocation$[ebp+eax]
	mov	edx, DWORD PTR $T14[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T14[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T14[ebp+8]
	mov	DWORD PTR [ecx+8], edx
$LN28@AddEngineT:

; 1354 : 					}
; 1355 : 				}
; 1356 : 				if ( fabs(af->auxaeroData->engineLocation[1].y - af->auxaeroData->engineLocation[2].y) < 9.0f )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	mov	ecx, DWORD PTR [ecx+4]
	mov	esi, 12					; 0000000cH
	shl	esi, 1
	movss	xmm0, DWORD PTR [edx+eax+352]
	subss	xmm0, DWORD PTR [ecx+esi+352]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1075[ebp]
	movss	xmm0, DWORD PTR __real@41100000
	comiss	xmm0, DWORD PTR tv1075[ebp]
	jbe	$LN24@AddEngineT

; 1357 : 				{
; 1358 : 					if ((Get3DDistance (af->auxaeroData->engineLocation[1], af->auxaeroData->engineLocation[2])) < 9.0f )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	lea	eax, DWORD PTR [ecx+edx+348]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+348]
	push	edx
	call	?Get3DDistance@@YAMAAUTpoint@@0@Z	; Get3DDistance
	add	esp, 8
	fstp	DWORD PTR tv1085[ebp]
	movss	xmm0, DWORD PTR __real@41100000
	comiss	xmm0, DWORD PTR tv1085[ebp]
	jbe	$LN24@AddEngineT

; 1359 : 					{
; 1360 : 						if ((Get3DDistance (af->auxaeroData->engineLocation[0], af->auxaeroData->engineLocation[3])) < 9.0f )	

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 12					; 0000000cH
	imul	eax, 3
	lea	ecx, DWORD PTR [edx+eax+348]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	lea	eax, DWORD PTR [ecx+edx+348]
	push	eax
	call	?Get3DDistance@@YAMAAUTpoint@@0@Z	; Get3DDistance
	add	esp, 8
	fstp	DWORD PTR tv1095[ebp]
	movss	xmm0, DWORD PTR __real@41100000
	comiss	xmm0, DWORD PTR tv1095[ebp]
	jbe	$LN25@AddEngineT

; 1361 : 						{
; 1362 : 							nContrails = 1;

	mov	DWORD PTR _nContrails$[ebp], 1

; 1363 : 							ContrailsLocation[0] = Get3DMiddle (af->auxaeroData->engineLocation[1], af->auxaeroData->engineLocation[2]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	lea	edx, DWORD PTR [eax+ecx+348]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR [edx+eax+348]
	push	ecx
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	call	?Get3DMiddle@@YA?AUTpoint@@AAU1@0@Z	; Get3DMiddle
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T13[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T13[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR $T13[ebp+8], eax
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR _ContrailsLocation$[ebp+ecx]
	mov	eax, DWORD PTR $T13[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T13[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T13[ebp+8]
	mov	DWORD PTR [edx+8], eax

; 1364 : 						}
; 1365 : 						else

	jmp	$LN24@AddEngineT
$LN25@AddEngineT:

; 1366 : 						{
; 1367 : 							nContrails = 3;

	mov	DWORD PTR _nContrails$[ebp], 3

; 1368 : 							ContrailsLocation[0] = af->auxaeroData->engineLocation[0];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+348]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	lea	ecx, DWORD PTR _ContrailsLocation$[ebp+eax]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], edx

; 1369 : 							ContrailsLocation[1] = Get3DMiddle (af->auxaeroData->engineLocation[1], af->auxaeroData->engineLocation[2]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	lea	ecx, DWORD PTR [edx+eax+348]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+348]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	?Get3DMiddle@@YA?AUTpoint@@AAU1@0@Z	; Get3DMiddle
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T15[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T15[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T15[ebp+8], edx
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR _ContrailsLocation$[ebp+eax]
	mov	edx, DWORD PTR $T15[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T15[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T15[ebp+8]
	mov	DWORD PTR [ecx+8], edx

; 1370 : 							ContrailsLocation[2] = af->auxaeroData->engineLocation[3];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 12					; 0000000cH
	imul	eax, 3
	lea	ecx, DWORD PTR [edx+eax+348]
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	lea	eax, DWORD PTR _ContrailsLocation$[ebp+edx]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
$LN24@AddEngineT:

; 1371 : 						}
; 1372 : 					}
; 1373 : 				}
; 1374 : 				if ( !nContrails )  //engines are not close enough to unite, so keep a trail for each one

	cmp	DWORD PTR _nContrails$[ebp], 0
	jne	SHORT $LN20@AddEngineT

; 1375 : 				{
; 1376 :                 nContrails = nEngines;

	mov	edx, DWORD PTR _nEngines$[ebp]
	mov	DWORD PTR _nContrails$[ebp], edx

; 1377 : 				for (int i = 0; i < MAXENGINES; i++)

	mov	DWORD PTR _i$7[ebp], 0
	jmp	SHORT $LN22@AddEngineT
$LN21@AddEngineT:
	mov	eax, DWORD PTR _i$7[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7[ebp], eax
$LN22@AddEngineT:
	cmp	DWORD PTR _i$7[ebp], 8
	jge	SHORT $LN20@AddEngineT

; 1378 : 					ContrailsLocation[i] = af->auxaeroData->engineLocation[i];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$7[ebp]
	imul	ecx, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+ecx+348]
	mov	eax, DWORD PTR _i$7[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _ContrailsLocation$[ebp+eax]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN21@AddEngineT
$LN20@AddEngineT:

; 1379 : 				}
; 1380 : 				break;

	jmp	SHORT $LN45@AddEngineT
$LN19@AddEngineT:

; 1381 : 			case 5:
; 1382 : 			case 6:
; 1383 : 			case 7:
; 1384 : 			case 8:
; 1385 : 			default: 
; 1386 : 				nContrails = nEngines;

	mov	eax, DWORD PTR _nEngines$[ebp]
	mov	DWORD PTR _nContrails$[ebp], eax

; 1387 : 				for (int i = 0; i < MAXENGINES; i++)

	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN18@AddEngineT
$LN17@AddEngineT:
	mov	ecx, DWORD PTR _i$6[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$6[ebp], ecx
$LN18@AddEngineT:
	cmp	DWORD PTR _i$6[ebp], 8
	jge	SHORT $LN16@AddEngineT

; 1388 : 					ContrailsLocation[i] = af->auxaeroData->engineLocation[i];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$6[ebp]
	imul	edx, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+edx+348]
	mov	ecx, DWORD PTR _i$6[ebp]
	imul	ecx, 12					; 0000000cH
	lea	edx, DWORD PTR _ContrailsLocation$[ebp+ecx]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax
	jmp	SHORT $LN17@AddEngineT
$LN16@AddEngineT:
$LN45@AddEngineT:

; 1389 : 				break;
; 1390 : 		}
; 1391 : 		nTrails = nContrails;

	mov	ecx, DWORD PTR _nContrails$[ebp]
	mov	DWORD PTR _nTrails$[ebp], ecx

; 1392 : 	}
; 1393 :     else

	jmp	SHORT $LN15@AddEngineT
$LN48@AddEngineT:

; 1394 : 		nTrails = nEngines;  // in case of regular engine smoke, we keep a trail for each engine

	mov	edx, DWORD PTR _nEngines$[ebp]
	mov	DWORD PTR _nTrails$[ebp], edx
$LN15@AddEngineT:

; 1395 :     //
; 1396 : 	for(int i = 0; i < nTrails; i++)

	mov	DWORD PTR _i$10[ebp], 0
	jmp	SHORT $LN14@AddEngineT
$LN13@AddEngineT:
	mov	eax, DWORD PTR _i$10[ebp]
	add	eax, 1
	mov	DWORD PTR _i$10[ebp], eax
$LN14@AddEngineT:
	mov	ecx, DWORD PTR _i$10[ebp]
	cmp	ecx, DWORD PTR _nTrails$[ebp]
	jge	$LN12@AddEngineT

; 1397 : 	{
; 1398 : 		//RV - I-Hawk - RV new trails call changes
; 1399 : 		if(tlist[i] == NULL) 

	mov	edx, DWORD PTR _i$10[ebp]
	mov	eax, DWORD PTR _tlist$[ebp]
	cmp	DWORD PTR [eax+edx*4], 0
	jne	SHORT $LN11@AddEngineT

; 1400 : 		{
; 1401 : 			//tlist[i] = new DrawableTrail(ttype);
; 1402 : 			//OTWDriver.InsertObject(tlist[i]);
; 1403 : 			tlist[i] = ttype;

	mov	ecx, DWORD PTR _i$10[ebp]
	mov	edx, DWORD PTR _tlist$[ebp]
	mov	eax, DWORD PTR _ttype$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
$LN11@AddEngineT:

; 1404 : 		}
; 1405 : 		
; 1406 : 		Tpoint *tp;
; 1407 : 		if ( tlist != conTrails && tlist != colorConTrails)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1184				; 000004a0H
	cmp	DWORD PTR _tlist$[ebp], ecx
	je	SHORT $LN10@AddEngineT
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1248				; 000004e0H
	cmp	DWORD PTR _tlist$[ebp], edx
	je	SHORT $LN10@AddEngineT

; 1408 : 		{
; 1409 : 			tp = &af->auxaeroData->engineLocation[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$10[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR [edx+eax+348]
	mov	DWORD PTR _tp$11[ebp], ecx

; 1410 : 		}
; 1411 : 		else 

	jmp	SHORT $LN9@AddEngineT
$LN10@AddEngineT:

; 1412 : 		{
; 1413 : 			tp = &ContrailsLocation[i];

	mov	edx, DWORD PTR _i$10[ebp]
	imul	edx, 12					; 0000000cH
	lea	eax, DWORD PTR _ContrailsLocation$[ebp+edx]
	mov	DWORD PTR _tp$11[ebp], eax
$LN9@AddEngineT:

; 1414 : 		}
; 1415 : 
; 1416 : 		ShiAssert(tp)
; 1417 : 		if (!tp)

	cmp	DWORD PTR _tp$11[ebp], 0
	jne	SHORT $LN8@AddEngineT

; 1418 : 			return;

	jmp	$LN51@AddEngineT
$LN8@AddEngineT:

; 1419 : 
; 1420 : 		float offset = -10.0f;

	movss	xmm0, DWORD PTR __real@c1200000
	movss	DWORD PTR _offset$5[ebp], xmm0

; 1421 : 
; 1422 : 		pos.x = orientation->M11*(tp->x + offset) + orientation->M12*tp->y + orientation->M13*tp->z;

	mov	ecx, DWORD PTR _tp$11[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR _offset$5[ebp]
	mov	edx, DWORD PTR _orientation$[ebp]
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _orientation$[ebp]
	mov	ecx, DWORD PTR _tp$11[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _orientation$[ebp]
	mov	eax, DWORD PTR _tp$11[ebp]
	movss	xmm1, DWORD PTR [edx+8]
	mulss	xmm1, DWORD PTR [eax+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _pos$[ebp], xmm0

; 1423 : 		pos.y = orientation->M21*(tp->x + offset) + orientation->M22*tp->y + orientation->M23*tp->z;

	mov	ecx, DWORD PTR _tp$11[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR _offset$5[ebp]
	mov	edx, DWORD PTR _orientation$[ebp]
	mulss	xmm0, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _orientation$[ebp]
	mov	ecx, DWORD PTR _tp$11[ebp]
	movss	xmm1, DWORD PTR [eax+16]
	mulss	xmm1, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _orientation$[ebp]
	mov	eax, DWORD PTR _tp$11[ebp]
	movss	xmm1, DWORD PTR [edx+20]
	mulss	xmm1, DWORD PTR [eax+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _pos$[ebp+4], xmm0

; 1424 : 		pos.z = orientation->M31*(tp->x + offset) + orientation->M32*tp->y + orientation->M33*tp->z;

	mov	ecx, DWORD PTR _tp$11[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR _offset$5[ebp]
	mov	edx, DWORD PTR _orientation$[ebp]
	mulss	xmm0, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _orientation$[ebp]
	mov	ecx, DWORD PTR _tp$11[ebp]
	movss	xmm1, DWORD PTR [eax+28]
	mulss	xmm1, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _orientation$[ebp]
	mov	eax, DWORD PTR _tp$11[ebp]
	movss	xmm1, DWORD PTR [edx+32]
	mulss	xmm1, DWORD PTR [eax+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 1425 : 
; 1426 : #if 1// MLR_NEWTRAILCODE
; 1427 : 		Tpoint smokeVel;
; 1428 : 		smokeVel.x = vec.x * af->thrust * 2.5f ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR _vec$[ebp]
	mulss	xmm0, DWORD PTR [edx+188]
	mulss	xmm0, DWORD PTR __real@40200000
	movss	DWORD PTR _smokeVel$12[ebp], xmm0

; 1429 : 		smokeVel.y = vec.y * af->thrust * 2.5f ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR _vec$[ebp+4]
	mulss	xmm0, DWORD PTR [ecx+188]
	mulss	xmm0, DWORD PTR __real@40200000
	movss	DWORD PTR _smokeVel$12[ebp+4], xmm0

; 1430 : 		smokeVel.z = vec.z * af->thrust * 2.5f ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR _vec$[ebp+8]
	mulss	xmm0, DWORD PTR [eax+188]
	mulss	xmm0, DWORD PTR __real@40200000
	movss	DWORD PTR _smokeVel$12[ebp+8], xmm0

; 1431 : 		//tlist[i]->SetHeadVelocity(&smokeVel);
; 1432 : #endif
; 1433 : 		pos.x += XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1253[ebp]
	movss	xmm0, DWORD PTR tv1253[ebp]
	addss	xmm0, DWORD PTR _pos$[ebp]
	movss	DWORD PTR _pos$[ebp], xmm0

; 1434 : 		pos.y += YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1258[ebp]
	movss	xmm0, DWORD PTR tv1258[ebp]
	addss	xmm0, DWORD PTR _pos$[ebp+4]
	movss	DWORD PTR _pos$[ebp+4], xmm0

; 1435 : 		pos.z += ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1263[ebp]
	movss	xmm0, DWORD PTR tv1263[ebp]
	addss	xmm0, DWORD PTR _pos$[ebp+8]
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 1436 : 
; 1437 : 		//OTWDriver.AddTrailHead (tlist[i], pos.x, pos.y, pos.z );
; 1438 : 		//tlist[i]->KeepStaleSegs (flag_keep_smoke_trails);
; 1439 : 		//
; 1440 : 		//RV - I-Hawk - engine trails size/alpha change with altitude
; 1441 : 		engineTrailMargin = 1;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?engineTrailMargin@@3MA, xmm0

; 1442 : 		if (tlist != conTrails){

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1184				; 000004a0H
	cmp	DWORD PTR _tlist$[ebp], ecx
	je	$LN7@AddEngineT

; 1443 : 			if (tlist != colorConTrails){

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1248				; 000004e0H
	cmp	DWORD PTR _tlist$[ebp], edx
	je	$LN6@AddEngineT

; 1444 : 
; 1445 : 				// if trail is engine trail, use 1K feet margin between 11K and 10K for trail fade-in/out...
; 1446 : 				if ( -ZPos() > 10000.0f ){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1271[ebp]
	movss	xmm0, DWORD PTR tv1271[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, DWORD PTR __real@461c4000
	jbe	SHORT $LN5@AddEngineT

; 1447 : 					engineTrailMargin *= ( 11000.0f - (-ZPos())) / 1000.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1275[ebp]
	movss	xmm0, DWORD PTR tv1275[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR __real@462be000
	subss	xmm1, xmm0
	divss	xmm1, DWORD PTR __real@447a0000
	mulss	xmm1, DWORD PTR ?engineTrailMargin@@3MA
	movss	DWORD PTR ?engineTrailMargin@@3MA, xmm1
$LN5@AddEngineT:

; 1448 : 				}
; 1449 : 				  
; 1450 : 				//RV - I-Hawk
; 1451 : 				//Engine trails are fading in with RPM, at 80% the 
; 1452 : 			    //engineTrailRPMFactor = 0.25, and slowly increasing based on RPM until it gets to
; 1453 : 			    //be 1 at 100% RPM. Always multiplying the difference by 3.75 and adding 0.25 because maximum difference
; 1454 : 				//in RPM is: 1 - 0.8 = 0.2 -> 0.2 * 3.75 +0.25 = 1... so factor run between 0.25 to 1.
; 1455 : 				//
; 1456 : 				engineTrailRPMFactor = ( PowerOutput() - 0.8f ) * 3.75f + 0.25f;   

	mov	ecx, DWORD PTR _this$[ebp]
	call	?PowerOutput@SimBaseClass@@QAEMXZ	; SimBaseClass::PowerOutput
	fstp	DWORD PTR tv1281[ebp]
	movss	xmm0, DWORD PTR tv1281[ebp]
	subss	xmm0, DWORD PTR __real@3f4ccccd
	mulss	xmm0, DWORD PTR __real@40700000
	addss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR ?engineTrailRPMFactor@@3MA, xmm0

; 1457 : 				engineTrailAlpha = ((( 5000.0f - (-ZPos())) / 5000.0f) * 0.25f + 1) * engineTrailMargin * engineTrailRPMFactor;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1285[ebp]
	movss	xmm0, DWORD PTR tv1285[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR __real@459c4000
	subss	xmm1, xmm0
	divss	xmm1, DWORD PTR __real@459c4000
	mulss	xmm1, DWORD PTR __real@3e800000
	addss	xmm1, DWORD PTR __real@3f800000
	mulss	xmm1, DWORD PTR ?engineTrailMargin@@3MA
	mulss	xmm1, DWORD PTR ?engineTrailRPMFactor@@3MA
	movss	DWORD PTR ?engineTrailAlpha@@3MA, xmm1

; 1458 : 				engineTrailSize =  (( 5000.0f - (-ZPos())) / 5000.0f) * 0.25f + 1;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1290[ebp]
	movss	xmm0, DWORD PTR tv1290[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR __real@459c4000
	subss	xmm1, xmm0
	divss	xmm1, DWORD PTR __real@459c4000
	mulss	xmm1, DWORD PTR __real@3e800000
	addss	xmm1, DWORD PTR __real@3f800000
	movss	DWORD PTR ?engineTrailSize@@3MA, xmm1
$LN6@AddEngineT:

; 1459 : 			}
; 1460 : 		}
; 1461 : 		//trail is contrail... use 10% of ContrailLow value as margin for fade-in/out
; 1462 : 		else {

	jmp	$LN4@AddEngineT
$LN7@AddEngineT:

; 1463 : 			if ( -ZPos() > (contrailLow90Percent) && -ZPos() < contrailLowValue ){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1295[ebp]
	movss	xmm0, DWORD PTR tv1295[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, DWORD PTR ?contrailLow90Percent@@3MA
	jbe	SHORT $LN3@AddEngineT
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1299[ebp]
	movss	xmm0, DWORD PTR tv1299[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR ?contrailLowValue@@3MA
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@AddEngineT

; 1464 : 				engineTrailMargin *= ( -ZPos() - contrailLow90Percent) / contrailLow10Percent;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1304[ebp]
	movss	xmm0, DWORD PTR tv1304[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm0, DWORD PTR ?contrailLow90Percent@@3MA
	divss	xmm0, DWORD PTR ?contrailLow10Percent@@3MA
	mulss	xmm0, DWORD PTR ?engineTrailMargin@@3MA
	movss	DWORD PTR ?engineTrailMargin@@3MA, xmm0
$LN3@AddEngineT:

; 1465 : 			}
; 1466 : 			if ( -ZPos() > (contrailHighValue) && -ZPos() < contrailHigh110Percent ){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1309[ebp]
	movss	xmm0, DWORD PTR tv1309[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, DWORD PTR ?contrailHighValue@@3MA
	jbe	$LN2@AddEngineT
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1313[ebp]
	movss	xmm0, DWORD PTR tv1313[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR ?contrailHigh110Percent@@3MA
	comiss	xmm1, xmm0
	jbe	SHORT $LN2@AddEngineT

; 1467 : 				engineTrailMargin *= ( fabs( -ZPos() - contrailHigh110Percent) ) / contrailLow10Percent;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1318[ebp]
	movss	xmm0, DWORD PTR tv1318[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm0, DWORD PTR ?contrailHigh110Percent@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1324[ebp]
	movss	xmm0, DWORD PTR tv1324[ebp]
	divss	xmm0, DWORD PTR ?contrailLow10Percent@@3MA
	mulss	xmm0, DWORD PTR ?engineTrailMargin@@3MA
	movss	DWORD PTR ?engineTrailMargin@@3MA, xmm0
$LN2@AddEngineT:

; 1468 : 			}
; 1469 : 			engineTrailAlpha = engineTrailMargin; //Really means (1 * EngineTrailMargin) ... 

	movss	xmm0, DWORD PTR ?engineTrailMargin@@3MA
	movss	DWORD PTR ?engineTrailAlpha@@3MA, xmm0

; 1470 : 			engineTrailSize = 1;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?engineTrailSize@@3MA, xmm0
$LN4@AddEngineT:

; 1471 : 		}
; 1472 : 		if (tlist == colorConTrails)

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1248				; 000004e0H
	cmp	DWORD PTR _tlist$[ebp], eax
	jne	SHORT $LN1@AddEngineT

; 1473 : 		{ 
; 1474 : 			engineTrailAlpha = 1;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?engineTrailAlpha@@3MA, xmm0

; 1475 : 			engineTrailSize = 1;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?engineTrailSize@@3MA, xmm0
$LN1@AddEngineT:

; 1476 : 		}
; 1477 : 		tlist_trail[i] = DrawableParticleSys::PS_EmitTrail(tlist_trail[i], tlist[i], pos.x, pos.y, pos.z, engineTrailAlpha, engineTrailSize);

	push	ecx
	movss	xmm0, DWORD PTR ?engineTrailSize@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?engineTrailAlpha@@3MA
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$10[ebp]
	mov	edx, DWORD PTR _tlist$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _i$10[ebp]
	mov	edx, DWORD PTR _tlist_trail$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	?PS_EmitTrail@DrawableParticleSys@@SAKKHMMMMM@Z ; DrawableParticleSys::PS_EmitTrail
	add	esp, 28					; 0000001cH
	mov	ecx, DWORD PTR _i$10[ebp]
	mov	edx, DWORD PTR _tlist_trail$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 1478 : 	}

	jmp	$LN13@AddEngineT
$LN12@AddEngineT:
$LN51@AddEngineT:

; 1479 : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN55@AddEngineT:
	DD	$LN44@AddEngineT
	DD	$LN43@AddEngineT
	DD	$LN37@AddEngineT
	DD	$LN30@AddEngineT
?AddEngineTrails@AircraftClass@@QAEXHPAK0@Z ENDP	; AircraftClass::AddEngineTrails
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\damage.cpp
_TEXT	SEGMENT
tv64 = -8						; size = 4
_this$ = -4						; size = 4
_color$ = 8						; size = 4
?SetColorContrail@AircraftClass@@QAEXH@Z PROC		; AircraftClass::SetColorContrail
; _this$ = ecx

; 3334 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3335 : 	switch (color)

	mov	eax, DWORD PTR _color$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 4
	ja	SHORT $LN1@SetColorCo
	mov	ecx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN11@SetColorCo[ecx*4]
$LN6@SetColorCo:

; 3336 : 	{
; 3337 : 	case 0:
; 3338 : 		colorContrail = TRAIL_CONTRAIL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1460], 0
$LN5@SetColorCo:

; 3339 : 
; 3340 : 	case 1:
; 3341 : 		colorContrail = TRAIL_COLOR_0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1460], 40		; 00000028H
$LN4@SetColorCo:

; 3342 : 		
; 3343 : 	case 2:
; 3344 : 		colorContrail = TRAIL_COLOR_1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1460], 41		; 00000029H
$LN3@SetColorCo:

; 3345 : 
; 3346 : 	case 3:
; 3347 : 		colorContrail = TRAIL_COLOR_2;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1460], 42		; 0000002aH
$LN2@SetColorCo:

; 3348 : 
; 3349 : 	case 4:
; 3350 : 		colorContrail = TRAIL_COLOR_3;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1460], 43		; 0000002bH
$LN1@SetColorCo:

; 3351 : 
; 3352 : 	default:
; 3353 : 		colorContrail = TRAIL_CONTRAIL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1460], 0

; 3354 : 	}
; 3355 : 	return;
; 3356 : }

	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN11@SetColorCo:
	DD	$LN6@SetColorCo
	DD	$LN5@SetColorCo
	DD	$LN4@SetColorCo
	DD	$LN3@SetColorCo
	DD	$LN2@SetColorCo
?SetColorContrail@AircraftClass@@QAEXH@Z ENDP		; AircraftClass::SetColorContrail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\damage.cpp
_TEXT	SEGMENT
tv1333 = -316						; size = 8
tv1088 = -308						; size = 4
tv1084 = -304						; size = 4
tv1523 = -300						; size = 4
tv1196 = -296						; size = 4
tv1527 = -292						; size = 4
tv1531 = -288						; size = 4
tv1210 = -284						; size = 4
tv1295 = -280						; size = 4
tv1156 = -276						; size = 4
tv1571 = -272						; size = 4
tv1096 = -268						; size = 4
tv1281 = -264						; size = 4
tv1222 = -260						; size = 4
tv1569 = -256						; size = 4
tv1529 = -252						; size = 4
tv1271 = -248						; size = 4
tv1162 = -244						; size = 4
tv1535 = -240						; size = 4
tv1104 = -236						; size = 4
tv1261 = -232						; size = 4
tv1100 = -228						; size = 4
tv1533 = -224						; size = 4
tv1525 = -220						; size = 4
tv1236 = -216						; size = 4
tv1092 = -212						; size = 4
tv561 = -208						; size = 4
tv749 = -204						; size = 4
_relVel$1 = -200					; size = 4
tv809 = -196						; size = 4
tv680 = -192						; size = 4
tv721 = -188						; size = 4
tv940 = -184						; size = 4
tv795 = -180						; size = 4
tv926 = -176						; size = 4
tv735 = -172						; size = 4
tv893 = -168						; size = 4
_startStrength$ = -164					; size = 4
tv890 = -160						; size = 4
tv798 = -156						; size = 4
tv879 = -152						; size = 4
tv784 = -148						; size = 4
tv868 = -144						; size = 4
tv746 = -140						; size = 4
_rz$ = -136						; size = 4
tv724 = -132						; size = 4
tv854 = -128						; size = 4
tv710 = -124						; size = 4
tv823 = -120						; size = 4
tv820 = -116						; size = 4
tv865 = -112						; size = 4
_ry$ = -108						; size = 4
_damageDone$ = -104					; size = 4
_sinAta$ = -100						; size = 4
_range$ = -96						; size = 4
_dy$ = -92						; size = 4
_dz$ = -88						; size = 4
_rx$ = -84						; size = 4
_dx$ = -80						; size = 4
_objMass$2 = -76					; size = 4
_failures$ = -72					; size = 4
_failuresPossible$ = -68				; size = 4
_deltaSig$3 = -64					; size = 4
_deltaGmma$4 = -60					; size = 4
_cosAta$ = -56						; size = 4
_octant$ = -52						; size = 4
_object$ = -48						; size = 4
_this$ = -44						; size = 4
_Myvec$5 = -40						; size = 12
_Objvec$6 = -28						; size = 12
_relVec$7 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_damageMessage$ = 8					; size = 4
?ApplyDamage@AircraftClass@@UAEXPAVFalconDamageMessage@@@Z PROC ; AircraftClass::ApplyDamage
; _this$ = ecx

; 112  : void AircraftClass::ApplyDamage (FalconDamageMessage* damageMessage){

	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 113  : 	float rx=0.0F, ry=0.0F, rz=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _rx$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ry$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _rz$[ebp], xmm0

; 114  : 	float cosAta=1.0F, sinAta=0.0F;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _cosAta$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _sinAta$[ebp], xmm0

; 115  : 	int octant=0;

	mov	DWORD PTR _octant$[ebp], 0

; 116  : 	long failuresPossible=0;

	mov	DWORD PTR _failuresPossible$[ebp], 0

; 117  : 	int	failures = 0;

	mov	DWORD PTR _failures$[ebp], 0

; 118  : 	int startStrength=0, damageDone=0;

	mov	DWORD PTR _startStrength$[ebp], 0
	mov	DWORD PTR _damageDone$[ebp], 0

; 119  : 	SimBaseClass *object=NULL;

	mov	DWORD PTR _object$[ebp], 0

; 120  : 	float dx=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dx$[ebp], xmm0

; 121  : 	float dy=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dy$[ebp], xmm0

; 122  : 	float dz=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dz$[ebp], xmm0

; 123  : 	float range=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _range$[ebp], xmm0

; 124  : 
; 125  : 	if (IsDead() || IsExploding() ){

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+340]
	call	eax
	test	eax, eax
	jne	SHORT $LN62@ApplyDamag
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+208]
	call	eax
	test	eax, eax
	je	SHORT $LN63@ApplyDamag
$LN62@ApplyDamag:

; 126  :       return;

	jmp	$LN64@ApplyDamag
$LN63@ApplyDamag:

; 127  : 	}
; 128  : 
; 129  :    object = (SimBaseClass *)vuDatabase->Find(damageMessage->dataBlock.fEntityID);

	mov	ecx, DWORD PTR _damageMessage$[ebp]
	mov	edx, DWORD PTR [ecx+78]
	push	edx
	mov	eax, DWORD PTR [ecx+74]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _object$[ebp], eax

; 130  :    if(object)

	cmp	DWORD PTR _object$[ebp], 0
	je	$LN61@ApplyDamag

; 131  :    {
; 132  : 	   dx		= object->XPos() - XPos();

	mov	ecx, DWORD PTR _object$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1084[ebp]
	movss	xmm0, DWORD PTR tv1084[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1523[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1088[ebp]
	movss	xmm0, DWORD PTR tv1523[ebp]
	subss	xmm0, DWORD PTR tv1088[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 133  : 	   dy		= object->YPos() - YPos();

	mov	ecx, DWORD PTR _object$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1092[ebp]
	movss	xmm0, DWORD PTR tv1092[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1525[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1096[ebp]
	movss	xmm0, DWORD PTR tv1525[ebp]
	subss	xmm0, DWORD PTR tv1096[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 134  : 	   dz		= object->ZPos() - ZPos();

	mov	ecx, DWORD PTR _object$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1100[ebp]
	movss	xmm0, DWORD PTR tv1100[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1527[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1104[ebp]
	movss	xmm0, DWORD PTR tv1527[ebp]
	subss	xmm0, DWORD PTR tv1104[ebp]
	movss	DWORD PTR _dz$[ebp], xmm0

; 135  : 	   range	= (float)(dx * dx + dy * dy + dz * dz);

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dz$[ebp]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _range$[ebp], xmm0

; 136  : 
; 137  : 		// Find relative position
; 138  : 	   rx		= dmx[0][0] * dx + dmx[0][1] * dy + dmx[0][2] * dz;

	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 139  : 	   ry		= dmx[1][0] * dx + dmx[1][1] * dy + dmx[1][2] * dz;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 140  : 	   rz		= dmx[2][0] * dx + dmx[2][1] * dy + dmx[2][2] * dz;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rz$[ebp], xmm0

; 141  : 
; 142  :       // Find the octant
; 143  :       octant = 0;

	mov	DWORD PTR _octant$[ebp], 0

; 144  :       if (rx > 0.0F) // In front

	movss	xmm0, DWORD PTR _rx$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN60@ApplyDamag

; 145  :          octant = 1;

	mov	DWORD PTR _octant$[ebp], 1
$LN60@ApplyDamag:

; 146  : 
; 147  :       if (ry > 0.0F) // On right

	movss	xmm0, DWORD PTR _ry$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN59@ApplyDamag

; 148  :          octant += 2;

	mov	ecx, DWORD PTR _octant$[ebp]
	add	ecx, 2
	mov	DWORD PTR _octant$[ebp], ecx
$LN59@ApplyDamag:

; 149  : 
; 150  :       if (rz > 0.0F) // below

	movss	xmm0, DWORD PTR _rz$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN58@ApplyDamag

; 151  :          octant += 4;

	mov	edx, DWORD PTR _octant$[ebp]
	add	edx, 4
	mov	DWORD PTR _octant$[ebp], edx
$LN58@ApplyDamag:

; 152  : 	
; 153  : 	   cosAta = rx/range;

	movss	xmm0, DWORD PTR _rx$[ebp]
	divss	xmm0, DWORD PTR _range$[ebp]
	movss	DWORD PTR _cosAta$[ebp], xmm0

; 154  : 	   sinAta = (float)sqrt(range-rx * rx)/range;

	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR _rx$[ebp]
	movss	xmm1, DWORD PTR _range$[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv1156[ebp]
	movss	xmm0, DWORD PTR tv1156[ebp]
	divss	xmm0, DWORD PTR _range$[ebp]
	movss	DWORD PTR _sinAta$[ebp], xmm0

; 155  :    }
; 156  : 	else

	jmp	SHORT $LN57@ApplyDamag
$LN61@ApplyDamag:

; 157  : 	{
; 158  : 		cosAta = 1.0F;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _cosAta$[ebp], xmm0

; 159  : 		sinAta = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _sinAta$[ebp], xmm0

; 160  : 		octant = FloatToInt32(PRANDFloatPos() * 7.0F);

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv1162[ebp]
	movss	xmm0, DWORD PTR tv1162[ebp]
	mulss	xmm0, DWORD PTR __real@40e00000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _octant$[ebp], eax
$LN57@ApplyDamag:

; 161  : 	}
; 162  : 
; 163  :    if(damageMessage->dataBlock.damageType == FalconDamageType::ObjectCollisionDamage)

	mov	eax, DWORD PTR _damageMessage$[ebp]
	cmp	DWORD PTR [eax+48], 6
	jne	$LN56@ApplyDamag

; 164  :    {
; 165  : 		Tpoint Objvec,Myvec,relVec;
; 166  : 		float relVel=0.0F, objMass=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _relVel$1[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _objMass$2[ebp], xmm0

; 167  : 		
; 168  : 		float deltaSig=0.0F, deltaGmma=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _deltaSig$3[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _deltaGmma$4[ebp], xmm0

; 169  : 		
; 170  : 			
; 171  : 
; 172  : 		Myvec.x = XDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR _Myvec$5[ebp]

; 173  : 		Myvec.y = YDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR _Myvec$5[ebp+4]

; 174  : 		Myvec.z = ZDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR _Myvec$5[ebp+8]

; 175  : 		
; 176  : 		if (object && object->IsSim())

	cmp	DWORD PTR _object$[ebp], 0
	je	$LN55@ApplyDamag
	mov	ecx, DWORD PTR _object$[ebp]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	$LN55@ApplyDamag

; 177  : 		{
; 178  : 			Objvec.x = object->XDelta();

	mov	ecx, DWORD PTR _object$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR _Objvec$6[ebp]

; 179  : 			Objvec.y = object->YDelta();

	mov	ecx, DWORD PTR _object$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR _Objvec$6[ebp+4]

; 180  : 			Objvec.z = object->ZDelta();

	mov	ecx, DWORD PTR _object$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR _Objvec$6[ebp+8]

; 181  : 			objMass = object->Mass();			

	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	eax, DWORD PTR [edx+388]
	call	eax
	fstp	DWORD PTR _objMass$2[ebp]

; 182  : 
; 183  : 			if(object->IsAirplane())

	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	je	SHORT $LN54@ApplyDamag

; 184  : 				deltaSig = ((AircraftClass*)object)->af->sigma - af->sigma;

	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR [edx+1176]
	subss	xmm0, DWORD PTR [ecx+1176]
	movss	DWORD PTR _deltaSig$3[ebp], xmm0

; 185  : 			else

	jmp	SHORT $LN53@ApplyDamag
$LN54@ApplyDamag:

; 186  : 				deltaSig = object->Yaw() - af->sigma;

	mov	ecx, DWORD PTR _object$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv1196[ebp]
	movss	xmm0, DWORD PTR tv1196[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	subss	xmm0, DWORD PTR [eax+1176]
	movss	DWORD PTR _deltaSig$3[ebp], xmm0
$LN53@ApplyDamag:

; 187  : 
; 188  : 			if(deltaSig*RTD < -180.0F)

	movss	xmm0, DWORD PTR _deltaSig$3[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	xmm1, DWORD PTR __real@c3340000
	comiss	xmm1, xmm0
	jbe	SHORT $LN52@ApplyDamag

; 189  : 				deltaSig += 360.0F*DTR;

	movss	xmm0, DWORD PTR _deltaSig$3[ebp]
	addss	xmm0, DWORD PTR __real@40c90fd9
	movss	DWORD PTR _deltaSig$3[ebp], xmm0
	jmp	SHORT $LN50@ApplyDamag
$LN52@ApplyDamag:

; 190  : 			else if(deltaSig*RTD > 180.0F)

	movss	xmm0, DWORD PTR _deltaSig$3[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	comiss	xmm0, DWORD PTR __real@43340000
	jbe	SHORT $LN50@ApplyDamag

; 191  : 				deltaSig -= 360.0F*DTR;

	movss	xmm0, DWORD PTR _deltaSig$3[ebp]
	subss	xmm0, DWORD PTR __real@40c90fd9
	movss	DWORD PTR _deltaSig$3[ebp], xmm0
$LN50@ApplyDamag:

; 192  : 
; 193  : 			af->sigma -= deltaSig*0.75F*sinAta* objMass/Mass();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR _deltaSig$3[ebp]
	mulss	xmm0, DWORD PTR __real@3f400000
	mulss	xmm0, DWORD PTR _sinAta$[ebp]
	mulss	xmm0, DWORD PTR _objMass$2[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+388]
	movss	DWORD PTR tv1529[ebp], xmm0
	call	edx
	fstp	DWORD PTR tv1210[ebp]
	movss	xmm0, DWORD PTR tv1529[ebp]
	divss	xmm0, DWORD PTR tv1210[ebp]
	movss	xmm1, DWORD PTR [esi+1176]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	DWORD PTR [ecx+1176], xmm1

; 194  : 
; 195  : 			if(object->IsAirplane())

	mov	edx, DWORD PTR _object$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax+192]
	call	edx
	test	eax, eax
	je	SHORT $LN49@ApplyDamag

; 196  : 				deltaGmma = ((AircraftClass*)object)->af->gmma - af->gmma;

	mov	eax, DWORD PTR _object$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR [ecx+1172]
	subss	xmm0, DWORD PTR [eax+1172]
	movss	DWORD PTR _deltaGmma$4[ebp], xmm0

; 197  : 			else

	jmp	SHORT $LN48@ApplyDamag
$LN49@ApplyDamag:

; 198  : 				deltaGmma = object->Pitch() - af->gmma;

	mov	ecx, DWORD PTR _object$[ebp]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	fstp	DWORD PTR tv1222[ebp]
	movss	xmm0, DWORD PTR tv1222[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	subss	xmm0, DWORD PTR [edx+1172]
	movss	DWORD PTR _deltaGmma$4[ebp], xmm0
$LN48@ApplyDamag:

; 199  : 
; 200  : 			if(deltaGmma*RTD < -90.0F)

	movss	xmm0, DWORD PTR _deltaGmma$4[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	xmm1, DWORD PTR __real@c2b40000
	comiss	xmm1, xmm0
	jbe	SHORT $LN47@ApplyDamag

; 201  : 				deltaGmma += 180.0F*DTR;

	movss	xmm0, DWORD PTR _deltaGmma$4[ebp]
	addss	xmm0, DWORD PTR __real@40490fd9
	movss	DWORD PTR _deltaGmma$4[ebp], xmm0
	jmp	SHORT $LN45@ApplyDamag
$LN47@ApplyDamag:

; 202  : 			else if(deltaGmma*RTD > 90.0F)

	movss	xmm0, DWORD PTR _deltaGmma$4[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	comiss	xmm0, DWORD PTR __real@42b40000
	jbe	SHORT $LN45@ApplyDamag

; 203  : 				deltaGmma -= 180.0F*DTR;

	movss	xmm0, DWORD PTR _deltaGmma$4[ebp]
	subss	xmm0, DWORD PTR __real@40490fd9
	movss	DWORD PTR _deltaGmma$4[ebp], xmm0
$LN45@ApplyDamag:

; 204  : 
; 205  : 			af->gmma -= deltaGmma*0.75F*sinAta* objMass/Mass();

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR _deltaGmma$4[ebp]
	mulss	xmm0, DWORD PTR __real@3f400000
	mulss	xmm0, DWORD PTR _sinAta$[ebp]
	mulss	xmm0, DWORD PTR _objMass$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+388]
	movss	DWORD PTR tv1531[ebp], xmm0
	call	eax
	fstp	DWORD PTR tv1236[ebp]
	movss	xmm0, DWORD PTR tv1531[ebp]
	divss	xmm0, DWORD PTR tv1236[ebp]
	movss	xmm1, DWORD PTR [esi+1172]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	DWORD PTR [edx+1172], xmm1

; 206  : 
; 207  : 			af->ResetOrientation();			

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?ResetOrientation@AirframeClass@@QAEXXZ	; AirframeClass::ResetOrientation

; 208  : 		}
; 209  : 		else

	jmp	SHORT $LN44@ApplyDamag
$LN55@ApplyDamag:

; 210  : 		{
; 211  : 			Objvec.x = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _Objvec$6[ebp], xmm0

; 212  : 			Objvec.y = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _Objvec$6[ebp+4], xmm0

; 213  : 			Objvec.z = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _Objvec$6[ebp+8], xmm0

; 214  : 			objMass = 2500.0F;

	movss	xmm0, DWORD PTR __real@451c4000
	movss	DWORD PTR _objMass$2[ebp], xmm0

; 215  : 			cosAta = 1.0F;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _cosAta$[ebp], xmm0
$LN44@ApplyDamag:

; 216  : 		}
; 217  : 
; 218  : 		relVec.x = Myvec.x - Objvec.x;

	movss	xmm0, DWORD PTR _Myvec$5[ebp]
	subss	xmm0, DWORD PTR _Objvec$6[ebp]
	movss	DWORD PTR _relVec$7[ebp], xmm0

; 219  : 		relVec.y = Myvec.y - Objvec.y;

	movss	xmm0, DWORD PTR _Myvec$5[ebp+4]
	subss	xmm0, DWORD PTR _Objvec$6[ebp+4]
	movss	DWORD PTR _relVec$7[ebp+4], xmm0

; 220  : 		relVec.z = Myvec.z - Objvec.z;

	movss	xmm0, DWORD PTR _Myvec$5[ebp+8]
	subss	xmm0, DWORD PTR _Objvec$6[ebp+8]
	movss	DWORD PTR _relVec$7[ebp+8], xmm0

; 221  : 
; 222  : 		relVel = (float)sqrt(relVec.x*relVec.x + relVec.y*relVec.y + relVec.z*relVec.z);

	movss	xmm0, DWORD PTR _relVec$7[ebp]
	mulss	xmm0, DWORD PTR _relVec$7[ebp]
	movss	xmm1, DWORD PTR _relVec$7[ebp+4]
	mulss	xmm1, DWORD PTR _relVec$7[ebp+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _relVec$7[ebp+8]
	mulss	xmm1, DWORD PTR _relVec$7[ebp+8]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _relVel$1[ebp]

; 223  : 
; 224  : 		// poke airframe data to simulate collisions
; 225  : 		af->x -= relVec.x * objMass/Mass()*cosAta;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR _relVec$7[ebp]
	mulss	xmm0, DWORD PTR _objMass$2[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+388]
	movss	DWORD PTR tv1533[ebp], xmm0
	call	edx
	fstp	DWORD PTR tv1261[ebp]
	movss	xmm0, DWORD PTR tv1533[ebp]
	divss	xmm0, DWORD PTR tv1261[ebp]
	mulss	xmm0, DWORD PTR _cosAta$[ebp]
	movss	xmm1, DWORD PTR [esi+1108]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	DWORD PTR [ecx+1108], xmm1

; 226  : 		af->y -= relVec.y * objMass/Mass()*cosAta;

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR _relVec$7[ebp+4]
	mulss	xmm0, DWORD PTR _objMass$2[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+388]
	movss	DWORD PTR tv1535[ebp], xmm0
	call	eax
	fstp	DWORD PTR tv1271[ebp]
	movss	xmm0, DWORD PTR tv1535[ebp]
	divss	xmm0, DWORD PTR tv1271[ebp]
	mulss	xmm0, DWORD PTR _cosAta$[ebp]
	movss	xmm1, DWORD PTR [esi+1112]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	DWORD PTR [edx+1112], xmm1

; 227  : 		af->z -= relVec.z * objMass/Mass()*cosAta;

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR _relVec$7[ebp+8]
	mulss	xmm0, DWORD PTR _objMass$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+388]
	movss	DWORD PTR tv1569[ebp], xmm0
	call	eax
	fstp	DWORD PTR tv1281[ebp]
	movss	xmm0, DWORD PTR tv1569[ebp]
	divss	xmm0, DWORD PTR tv1281[ebp]
	mulss	xmm0, DWORD PTR _cosAta$[ebp]
	movss	xmm1, DWORD PTR [esi+1116]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	DWORD PTR [edx+1116], xmm1

; 228  : 
; 229  : 		if(IsSetFalcFlag(FEC_INVULNERABLE))

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetFalcFlag@FalconEntity@@QAEHH@Z	; FalconEntity::IsSetFalcFlag
	test	eax, eax
	je	SHORT $LN43@ApplyDamag

; 230  : 		{
; 231  : 			af->vt *= 0.9F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR [ecx+1120]
	mulss	xmm0, DWORD PTR __real@3f666666
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	DWORD PTR [eax+1120], xmm0

; 232  : 		}
; 233  : 		else

	jmp	$LN42@ApplyDamag
$LN43@ApplyDamag:

; 234  : 		{
; 235  : 			af->vt -= relVel * objMass/Mass()*cosAta;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR _relVel$1[ebp]
	mulss	xmm0, DWORD PTR _objMass$2[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+388]
	movss	DWORD PTR tv1571[ebp], xmm0
	call	edx
	fstp	DWORD PTR tv1295[ebp]
	movss	xmm0, DWORD PTR tv1571[ebp]
	divss	xmm0, DWORD PTR tv1295[ebp]
	mulss	xmm0, DWORD PTR _cosAta$[ebp]
	movss	xmm1, DWORD PTR [esi+1120]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	DWORD PTR [ecx+1120], xmm1

; 236  : 			af->vt = max(0.0F, af->vt);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+1120]
	jbe	SHORT $LN66@ApplyDamag
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv561[ebp], xmm0
	jmp	SHORT $LN67@ApplyDamag
$LN66@ApplyDamag:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR [edx+1120]
	movss	DWORD PTR tv561[ebp], xmm0
$LN67@ApplyDamag:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR tv561[ebp]
	movss	DWORD PTR [ecx+1120], xmm0
$LN42@ApplyDamag:

; 237  : 		}

	jmp	$LN35@ApplyDamag
$LN56@ApplyDamag:

; 238  :    }
; 239  :    else if(damageMessage->dataBlock.damageType == FalconDamageType::FeatureCollisionDamage)

	mov	edx, DWORD PTR _damageMessage$[ebp]
	cmp	DWORD PTR [edx+48], 7
	jne	$LN40@ApplyDamag

; 240  :    {
; 241  : 	   af->x -= af->xdot*cosAta;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR [eax+1196]
	mulss	xmm0, DWORD PTR _cosAta$[ebp]
	movss	xmm1, DWORD PTR [ecx+1108]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	DWORD PTR [edx+1108], xmm1

; 242  : 	   af->y -= af->ydot*cosAta;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR [eax+1200]
	mulss	xmm0, DWORD PTR _cosAta$[ebp]
	movss	xmm1, DWORD PTR [ecx+1112]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	DWORD PTR [edx+1112], xmm1

; 243  : 	   af->z -= af->zdot*cosAta;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR [eax+1204]
	mulss	xmm0, DWORD PTR _cosAta$[ebp]
	movss	xmm1, DWORD PTR [ecx+1116]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	DWORD PTR [edx+1116], xmm1

; 244  : 
; 245  : 	   if(IsSetFalcFlag(FEC_INVULNERABLE))

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetFalcFlag@FalconEntity@@QAEHH@Z	; FalconEntity::IsSetFalcFlag
	test	eax, eax
	je	SHORT $LN39@ApplyDamag

; 246  : 	   {
; 247  : 		   af->vt *= 0.9F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR [ecx+1120]
	mulss	xmm0, DWORD PTR __real@3f666666
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	DWORD PTR [eax+1120], xmm0

; 248  : 	   }
; 249  : 	   else

	jmp	SHORT $LN38@ApplyDamag
$LN39@ApplyDamag:

; 250  : 	   {
; 251  : 		   af->vt = -0.01F;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR __real@bc23d70a
	movss	DWORD PTR [edx+1120], xmm0
$LN38@ApplyDamag:

; 252  : 	   }	   

	jmp	SHORT $LN35@ApplyDamag
$LN40@ApplyDamag:

; 253  :    }
; 254  :    else if(damageMessage->dataBlock.damageType == FalconDamageType::MissileDamage)

	mov	eax, DWORD PTR _damageMessage$[ebp]
	cmp	DWORD PTR [eax+48], 1
	jne	SHORT $LN35@ApplyDamag

; 255  :    {
; 256  :       if (this == SimDriver.GetPlayerEntity())

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	cmp	DWORD PTR _this$[ebp], eax
	jne	SHORT $LN35@ApplyDamag

; 257  :       {
; 258  :          JoystickPlayEffect (JoyHitEffect, FloatToInt32((float)atan2(ry, rx) * RTD));

	cvtss2sd xmm0, DWORD PTR _rx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv1333[ebp]
	movsd	xmm0, QWORD PTR tv1333[ebp]
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@42652ee1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	push	1
	call	?JoystickPlayEffect@@YAHHH@Z		; JoystickPlayEffect
	add	esp, 8
$LN35@ApplyDamag:

; 259  :       }
; 260  :    }
; 261  : 
; 262  :    startStrength = FloatToInt32(strength);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+240]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _startStrength$[ebp], eax

; 263  :    // call generic vehicle damage stuff
; 264  :    SimVehicleClass::ApplyDamage (damageMessage);

	mov	edx, DWORD PTR _damageMessage$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyDamage@SimVehicleClass@@UAEXPAVFalconDamageMessage@@@Z ; SimVehicleClass::ApplyDamage

; 265  :    damageDone = startStrength - FloatToInt32(strength);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+240]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _startStrength$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _damageDone$[ebp], ecx

; 266  :    if (this == FalconLocalSession->GetPlayerEntity()) {

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ; FalconSessionEntity::GetPlayerEntity
	cmp	DWORD PTR _this$[ebp], eax
	jne	SHORT $LN34@ApplyDamag

; 267  :        g_intellivibeData.lastdamage = octant + 1;

	mov	edx, DWORD PTR _octant$[ebp]
	add	edx, 1
	mov	DWORD PTR ?g_intellivibeData@@3VIntellivibeData@@A+40, edx

; 268  :        g_intellivibeData.damageforce = (float)damageDone;

	cvtsi2ss xmm0, DWORD PTR _damageDone$[ebp]
	movss	DWORD PTR ?g_intellivibeData@@3VIntellivibeData@@A+44, xmm0

; 269  :        g_intellivibeData.whendamage = SimLibElapsedTime;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR ?g_intellivibeData@@3VIntellivibeData@@A+48, eax

; 270  : 			 memcpy (gSharedIntellivibe, &g_intellivibeData, sizeof(g_intellivibeData));

	push	52					; 00000034H
	push	OFFSET ?g_intellivibeData@@3VIntellivibeData@@A ; g_intellivibeData
	mov	ecx, DWORD PTR ?gSharedIntellivibe@@3PAXA ; gSharedIntellivibe
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN34@ApplyDamag:

; 271  :    }
; 272  : 
; 273  :    // do any type specific stuff here:
; 274  : //   if (IsLocal() && !(this == (SimBaseClass*)SimDriver.GetPlayerEntity() && PlayerOptions.InvulnerableOn()))
; 275  :   if (IsLocal() && !IsSetFalcFlag(FEC_INVULNERABLE))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	edx, al
	test	edx, edx
	je	$LN33@ApplyDamag
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetFalcFlag@FalconEntity@@QAEHH@Z	; FalconEntity::IsSetFalcFlag
	test	eax, eax
	jne	$LN33@ApplyDamag

; 276  :    {
; 277  :       // Randomly break something based on the damage inflicted
; 278  :       // Find out who did it
; 279  : 
; 280  :       /* Fault types
; 281  :          acmi - Air Combat maneuvering Instrumentation Pod, use when tape full?
; 282  :          amux - Avionics Data Bus. If failed, fail all avionics (very rare) 
; 283  : 	      blkr - Interference Blanker. If failed, radio drives radar crazy
; 284  :          cadc - Central Air Data Computer. If failed no baro altitude
; 285  : 	      dmux - Weapon Data Bus. If failed, no weapons fire from given station
; 286  :          dlnk - Improved Data Modem. If failed no data transfer in
; 287  : 	      eng  - Engine. If failed usually means fire, but could mean hydraulics
; 288  : 	      fcc  - Fire Control Computer. If failed, no weapons solutions
; 289  : 	      fcr  - Fire Control Radar. If failed, no radar
; 290  :          flcs - Digital Flight Control System. If failed one or more control surfaces stuck
; 291  : 	      fms  - Fuel Measurement System. If failed, fuel gauge stuck
; 292  :          gear - Landing Gear. If failed one or more wheels stuck
; 293  : 	      hud  - Heads Up Display. If failed, no HUD
; 294  :          iff  - Identification, Friend or Foe. If failed, no IFF
; 295  : 	      ins  - Inertial Navigation System. If failed, no change in waypoint data
; 296  :          mfds - Multi Function Display Set. If an MFD fails, it shows noise
; 297  : 	      ralt - Radar Altimeter. If failed, no ALOW warning
; 298  :          rwr  - Radar Warning Reciever. If failed, no rwr
; 299  : 	      sms  - Stores Management System. If failed, no weapon or inventory display, and no launch
; 300  :          tcn  - TACAN. If failed no TACAN data
; 301  : 	      msl  - Missile Slave Loop. If failed, missile will not slave to radar
; 302  :          ufc  - Up Front Controller. If failed, UFC/DED inoperative
; 303  :       */
; 304  :       switch (octant)

	mov	eax, DWORD PTR _octant$[ebp]
	mov	DWORD PTR tv680[ebp], eax
	cmp	DWORD PTR tv680[ebp], 6
	ja	$LN6@ApplyDamag
	mov	ecx, DWORD PTR tv680[ebp]
	jmp	DWORD PTR $LN108@ApplyDamag[ecx*4]
$LN30@ApplyDamag:

; 305  :       {
; 306  :          case 0: // Back, Left, Upper
; 307  :             failuresPossible =
; 308  :                (1 << FaultClass::eng_fault) +
; 309  : 			   (1 << FaultClass::eng2_fault) +
; 310  :                (1 << FaultClass::hud_fault) +
; 311  :                (1 << FaultClass::fcc_fault) +
; 312  :                (1 << FaultClass::flcs_fault) +
; 313  :                (1 << FaultClass::mfds_fault) +
; 314  :                (1 << FaultClass::rwr_fault);

	mov	DWORD PTR _failuresPossible$[ebp], 38021888 ; 02442b00H

; 315  : 
; 316  : 				failures = 7;

	mov	DWORD PTR _failures$[ebp], 7

; 317  : //            MonoPrint ("Upper Left Back Damage\n");
; 318  :          break;

	jmp	$LN31@ApplyDamag
$LN29@ApplyDamag:

; 319  : 
; 320  :          case 1: // Front, Left, Upper
; 321  :             failuresPossible = 2 ^ FaultClass::NumFaultListSubSystems - 1 -
; 322  :                (1 << FaultClass::dmux_fault) -
; 323  :                (1 << FaultClass::eng_fault) -
; 324  : 			   (1 << FaultClass::eng2_fault) -
; 325  :                (1 << FaultClass::gear_fault) -
; 326  :                (1 << FaultClass::ralt_fault) -
; 327  :                (1 << FaultClass::msl_fault);

	mov	DWORD PTR _failuresPossible$[ebp], -25199394 ; fe7f7cdeH

; 328  : 				failures = 7;

	mov	DWORD PTR _failures$[ebp], 7

; 329  : //            MonoPrint ("Upper Left Front Damage\n");
; 330  : 				//MI add LEF damage
; 331  : 				if(g_bRealisticAvionics && g_bNewDamageEffects)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	$LN23@ApplyDamag
	movzx	eax, BYTE PTR ?g_bNewDamageEffects@@3_NA ; g_bNewDamageEffects
	test	eax, eax
	je	$LN23@ApplyDamag

; 332  : 				{
; 333  : 					//random canopy damage
; 334  : 					if(rand()%100 < 10)	//low chance

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	cmp	edx, 10					; 0000000aH
	jge	SHORT $LN27@ApplyDamag

; 335  : 						CanopyDamaged = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+852], 1
$LN27@ApplyDamag:

; 336  : 					if(rand()%100 < 25 && !LEFState(LT_LEF_OUT))	//25% we're taking damage

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	cmp	edx, 25					; 00000019H
	jge	$LN23@ApplyDamag
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFState@AircraftClass@@QAEHW4LEFStateFlags@1@@Z ; AircraftClass::LEFState
	test	eax, eax
	jne	$LN23@ApplyDamag

; 337  : 					{
; 338  : 						if(LEFState(LT_LEF_DAMAGED))

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFState@AircraftClass@@QAEHW4LEFStateFlags@1@@Z ; AircraftClass::LEFState
	test	eax, eax
	je	$LN25@ApplyDamag

; 339  : 						{
; 340  : 							LEFOn(LT_LEF_OUT);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFOn@AircraftClass@@QAEXW4LEFStateFlags@1@@Z ; AircraftClass::LEFOn

; 341  : 							LTLEFAOA = max(min(af->alpha,25.0f)* DTR, 0.0f);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR __real@41c80000
	comiss	xmm0, DWORD PTR [eax+1152]
	jbe	SHORT $LN68@ApplyDamag
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR [edx+1152]
	movss	DWORD PTR tv710[ebp], xmm0
	jmp	SHORT $LN69@ApplyDamag
$LN68@ApplyDamag:
	movss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR tv710[ebp], xmm0
$LN69@ApplyDamag:
	movss	xmm0, DWORD PTR tv710[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN72@ApplyDamag
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR __real@41c80000
	comiss	xmm0, DWORD PTR [ecx+1152]
	jbe	SHORT $LN70@ApplyDamag
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR [eax+1152]
	movss	DWORD PTR tv721[ebp], xmm0
	jmp	SHORT $LN71@ApplyDamag
$LN70@ApplyDamag:
	movss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR tv721[ebp], xmm0
$LN71@ApplyDamag:
	movss	xmm0, DWORD PTR tv721[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR tv724[ebp], xmm0
	jmp	SHORT $LN73@ApplyDamag
$LN72@ApplyDamag:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv724[ebp], xmm0
$LN73@ApplyDamag:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv724[ebp]
	movss	DWORD PTR [ecx+856], xmm0

; 342  : 						}
; 343  : 						else

	jmp	$LN23@ApplyDamag
$LN25@ApplyDamag:

; 344  : 						{
; 345  : 							LEFOn(LT_LEF_DAMAGED);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFOn@AircraftClass@@QAEXW4LEFStateFlags@1@@Z ; AircraftClass::LEFOn

; 346  : 							LTLEFAOA = max(min(af->alpha,25.0f)* DTR, 0.0f);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR __real@41c80000
	comiss	xmm0, DWORD PTR [eax+1152]
	jbe	SHORT $LN74@ApplyDamag
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR [edx+1152]
	movss	DWORD PTR tv735[ebp], xmm0
	jmp	SHORT $LN75@ApplyDamag
$LN74@ApplyDamag:
	movss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR tv735[ebp], xmm0
$LN75@ApplyDamag:
	movss	xmm0, DWORD PTR tv735[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN78@ApplyDamag
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR __real@41c80000
	comiss	xmm0, DWORD PTR [ecx+1152]
	jbe	SHORT $LN76@ApplyDamag
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR [eax+1152]
	movss	DWORD PTR tv746[ebp], xmm0
	jmp	SHORT $LN77@ApplyDamag
$LN76@ApplyDamag:
	movss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR tv746[ebp], xmm0
$LN77@ApplyDamag:
	movss	xmm0, DWORD PTR tv746[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR tv749[ebp], xmm0
	jmp	SHORT $LN79@ApplyDamag
$LN78@ApplyDamag:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv749[ebp], xmm0
$LN79@ApplyDamag:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv749[ebp]
	movss	DWORD PTR [ecx+856], xmm0

; 347  : 							if(rand()%100 > 20)

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	cmp	edx, 20					; 00000014H
	jle	SHORT $LN23@ApplyDamag

; 348  : 								LEFOn(LT_LEF_OUT);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFOn@AircraftClass@@QAEXW4LEFStateFlags@1@@Z ; AircraftClass::LEFOn
$LN23@ApplyDamag:

; 349  : 						}
; 350  : 					}
; 351  : 				}
; 352  :          break;

	jmp	$LN31@ApplyDamag
$LN22@ApplyDamag:

; 353  : 
; 354  :          case 2:  // Back Right, Upper
; 355  :             failuresPossible =
; 356  :                (1 << FaultClass::eng_fault) +
; 357  : 			   (1 << FaultClass::eng2_fault) +
; 358  :                (1 << FaultClass::hud_fault) +
; 359  :                (1 << FaultClass::fcc_fault) +
; 360  :                (1 << FaultClass::flcs_fault) +
; 361  :                (1 << FaultClass::mfds_fault) +
; 362  :                (1 << FaultClass::rwr_fault);

	mov	DWORD PTR _failuresPossible$[ebp], 38021888 ; 02442b00H

; 363  : 				failures = 7;

	mov	DWORD PTR _failures$[ebp], 7

; 364  : //            MonoPrint ("Upper Right Back Damage\n");
; 365  :          break;

	jmp	$LN31@ApplyDamag
$LN21@ApplyDamag:

; 366  : 
; 367  :          case 3:  // Front Right, Upper
; 368  :             failuresPossible = 2 ^ FaultClass::NumFaultListSubSystems - 1 -
; 369  :                (1 << FaultClass::dmux_fault) -
; 370  :                (1 << FaultClass::eng_fault) -
; 371  : 			   (1 << FaultClass::eng2_fault) -
; 372  :                (1 << FaultClass::gear_fault) -
; 373  :                (1 << FaultClass::ralt_fault) -
; 374  :                (1 << FaultClass::msl_fault);

	mov	DWORD PTR _failuresPossible$[ebp], -25199394 ; fe7f7cdeH

; 375  : 				failures = 7;

	mov	DWORD PTR _failures$[ebp], 7

; 376  : //            MonoPrint ("Upper Right Front Damage\n");
; 377  : 				//MI add LEF damage
; 378  : 				if(g_bRealisticAvionics && g_bNewDamageEffects)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	$LN15@ApplyDamag
	movzx	eax, BYTE PTR ?g_bNewDamageEffects@@3_NA ; g_bNewDamageEffects
	test	eax, eax
	je	$LN15@ApplyDamag

; 379  : 				{
; 380  : 					if(rand()%100 < 10)	//low chance

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	cmp	edx, 10					; 0000000aH
	jge	SHORT $LN19@ApplyDamag

; 381  : 						CanopyDamaged = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+852], 1
$LN19@ApplyDamag:

; 382  : 					if(rand()%100 < 25 && !LEFState(RT_LEF_OUT))	//25% we're taking damage

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	cmp	edx, 25					; 00000019H
	jge	$LN15@ApplyDamag
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFState@AircraftClass@@QAEHW4LEFStateFlags@1@@Z ; AircraftClass::LEFState
	test	eax, eax
	jne	$LN15@ApplyDamag

; 383  : 					{
; 384  : 						if(LEFState(RT_LEF_DAMAGED))

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFState@AircraftClass@@QAEHW4LEFStateFlags@1@@Z ; AircraftClass::LEFState
	test	eax, eax
	je	$LN17@ApplyDamag

; 385  : 						{
; 386  : 							LEFOn(RT_LEF_OUT);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFOn@AircraftClass@@QAEXW4LEFStateFlags@1@@Z ; AircraftClass::LEFOn

; 387  : 							RTLEFAOA = max(min(af->alpha,25.0f)* DTR, 0.0f);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR __real@41c80000
	comiss	xmm0, DWORD PTR [eax+1152]
	jbe	SHORT $LN80@ApplyDamag
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR [edx+1152]
	movss	DWORD PTR tv784[ebp], xmm0
	jmp	SHORT $LN81@ApplyDamag
$LN80@ApplyDamag:
	movss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR tv784[ebp], xmm0
$LN81@ApplyDamag:
	movss	xmm0, DWORD PTR tv784[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN84@ApplyDamag
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR __real@41c80000
	comiss	xmm0, DWORD PTR [ecx+1152]
	jbe	SHORT $LN82@ApplyDamag
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR [eax+1152]
	movss	DWORD PTR tv795[ebp], xmm0
	jmp	SHORT $LN83@ApplyDamag
$LN82@ApplyDamag:
	movss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR tv795[ebp], xmm0
$LN83@ApplyDamag:
	movss	xmm0, DWORD PTR tv795[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR tv798[ebp], xmm0
	jmp	SHORT $LN85@ApplyDamag
$LN84@ApplyDamag:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv798[ebp], xmm0
$LN85@ApplyDamag:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv798[ebp]
	movss	DWORD PTR [ecx+860], xmm0

; 388  : 						}
; 389  : 						else

	jmp	$LN15@ApplyDamag
$LN17@ApplyDamag:

; 390  : 						{
; 391  : 							LEFOn(RT_LEF_DAMAGED);

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFOn@AircraftClass@@QAEXW4LEFStateFlags@1@@Z ; AircraftClass::LEFOn

; 392  : 							RTLEFAOA = max(min(af->alpha,25.0f)* DTR, 0.0f);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR __real@41c80000
	comiss	xmm0, DWORD PTR [eax+1152]
	jbe	SHORT $LN86@ApplyDamag
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR [edx+1152]
	movss	DWORD PTR tv809[ebp], xmm0
	jmp	SHORT $LN87@ApplyDamag
$LN86@ApplyDamag:
	movss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR tv809[ebp], xmm0
$LN87@ApplyDamag:
	movss	xmm0, DWORD PTR tv809[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN90@ApplyDamag
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR __real@41c80000
	comiss	xmm0, DWORD PTR [ecx+1152]
	jbe	SHORT $LN88@ApplyDamag
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR [eax+1152]
	movss	DWORD PTR tv820[ebp], xmm0
	jmp	SHORT $LN89@ApplyDamag
$LN88@ApplyDamag:
	movss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR tv820[ebp], xmm0
$LN89@ApplyDamag:
	movss	xmm0, DWORD PTR tv820[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR tv823[ebp], xmm0
	jmp	SHORT $LN91@ApplyDamag
$LN90@ApplyDamag:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv823[ebp], xmm0
$LN91@ApplyDamag:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv823[ebp]
	movss	DWORD PTR [ecx+860], xmm0

; 393  : 							if(rand()%100 > 20)

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	cmp	edx, 20					; 00000014H
	jle	SHORT $LN15@ApplyDamag

; 394  : 								LEFOn(RT_LEF_OUT);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFOn@AircraftClass@@QAEXW4LEFStateFlags@1@@Z ; AircraftClass::LEFOn
$LN15@ApplyDamag:

; 395  : 						}
; 396  : 					}
; 397  : 				}
; 398  :          break;

	jmp	$LN31@ApplyDamag
$LN14@ApplyDamag:

; 399  : 
; 400  :          case 4: // Back, Left, Upper
; 401  :             failuresPossible = 2 ^ FaultClass::NumFaultListSubSystems - 1 -
; 402  :                (1 << FaultClass::hud_fault) -
; 403  :                (1 << FaultClass::mfds_fault) -
; 404  :                (1 << FaultClass::ufc_fault);

	mov	DWORD PTR _failuresPossible$[ebp], -272891874 ; efbc001eH

; 405  : 				failures = 4;

	mov	DWORD PTR _failures$[ebp], 4

; 406  : //            MonoPrint ("Lower Left Back Damage\n");
; 407  :          break;

	jmp	$LN31@ApplyDamag
$LN13@ApplyDamag:

; 408  : 
; 409  :          case 5: // Front, Left, Lower
; 410  :             failuresPossible = 2 ^ FaultClass::NumFaultListSubSystems - 1 -
; 411  :                (1 << FaultClass::eng_fault) -
; 412  : 			   (1 << FaultClass::eng2_fault) -
; 413  :                (1 << FaultClass::hud_fault) -
; 414  :                (1 << FaultClass::mfds_fault) -
; 415  :                (1 << FaultClass::ufc_fault);

	mov	DWORD PTR _failuresPossible$[ebp], -272892642 ; efbbfd1eH

; 416  : 				failures = 6;

	mov	DWORD PTR _failures$[ebp], 6

; 417  : //            MonoPrint ("Lower Left Front Damage\n");
; 418  : 				//MI add LEF damage
; 419  : 				if(g_bRealisticAvionics && g_bNewDamageEffects)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	$LN8@ApplyDamag
	movzx	eax, BYTE PTR ?g_bNewDamageEffects@@3_NA ; g_bNewDamageEffects
	test	eax, eax
	je	$LN8@ApplyDamag

; 420  : 				{
; 421  : 					if(rand()%100 < 25 && !LEFState(LT_LEF_OUT))	//25% we're taking damage

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	cmp	edx, 25					; 00000019H
	jge	$LN8@ApplyDamag
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFState@AircraftClass@@QAEHW4LEFStateFlags@1@@Z ; AircraftClass::LEFState
	test	eax, eax
	jne	$LN8@ApplyDamag

; 422  : 					{
; 423  : 						if(LEFState(LT_LEF_DAMAGED))

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFState@AircraftClass@@QAEHW4LEFStateFlags@1@@Z ; AircraftClass::LEFState
	test	eax, eax
	je	$LN10@ApplyDamag

; 424  : 						{
; 425  : 							LEFOn(LT_LEF_OUT);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFOn@AircraftClass@@QAEXW4LEFStateFlags@1@@Z ; AircraftClass::LEFOn

; 426  : 							LTLEFAOA = max(min(af->alpha,25.0f)* DTR, 0.0f);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR __real@41c80000
	comiss	xmm0, DWORD PTR [eax+1152]
	jbe	SHORT $LN92@ApplyDamag
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR [edx+1152]
	movss	DWORD PTR tv854[ebp], xmm0
	jmp	SHORT $LN93@ApplyDamag
$LN92@ApplyDamag:
	movss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR tv854[ebp], xmm0
$LN93@ApplyDamag:
	movss	xmm0, DWORD PTR tv854[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN96@ApplyDamag
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR __real@41c80000
	comiss	xmm0, DWORD PTR [ecx+1152]
	jbe	SHORT $LN94@ApplyDamag
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR [eax+1152]
	movss	DWORD PTR tv865[ebp], xmm0
	jmp	SHORT $LN95@ApplyDamag
$LN94@ApplyDamag:
	movss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR tv865[ebp], xmm0
$LN95@ApplyDamag:
	movss	xmm0, DWORD PTR tv865[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR tv868[ebp], xmm0
	jmp	SHORT $LN97@ApplyDamag
$LN96@ApplyDamag:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv868[ebp], xmm0
$LN97@ApplyDamag:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv868[ebp]
	movss	DWORD PTR [ecx+856], xmm0

; 427  : 						}
; 428  : 						else

	jmp	$LN8@ApplyDamag
$LN10@ApplyDamag:

; 429  : 						{
; 430  : 							LEFOn(LT_LEF_DAMAGED);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFOn@AircraftClass@@QAEXW4LEFStateFlags@1@@Z ; AircraftClass::LEFOn

; 431  : 							LTLEFAOA = max(min(af->alpha,25.0f)* DTR, 0.0f);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR __real@41c80000
	comiss	xmm0, DWORD PTR [eax+1152]
	jbe	SHORT $LN98@ApplyDamag
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR [edx+1152]
	movss	DWORD PTR tv879[ebp], xmm0
	jmp	SHORT $LN99@ApplyDamag
$LN98@ApplyDamag:
	movss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR tv879[ebp], xmm0
$LN99@ApplyDamag:
	movss	xmm0, DWORD PTR tv879[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN102@ApplyDamag
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR __real@41c80000
	comiss	xmm0, DWORD PTR [ecx+1152]
	jbe	SHORT $LN100@ApplyDamag
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR [eax+1152]
	movss	DWORD PTR tv890[ebp], xmm0
	jmp	SHORT $LN101@ApplyDamag
$LN100@ApplyDamag:
	movss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR tv890[ebp], xmm0
$LN101@ApplyDamag:
	movss	xmm0, DWORD PTR tv890[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR tv893[ebp], xmm0
	jmp	SHORT $LN103@ApplyDamag
$LN102@ApplyDamag:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv893[ebp], xmm0
$LN103@ApplyDamag:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv893[ebp]
	movss	DWORD PTR [ecx+856], xmm0

; 432  : 							if(rand()%100 > 20)

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	cmp	edx, 20					; 00000014H
	jle	SHORT $LN8@ApplyDamag

; 433  : 								LEFOn(LT_LEF_OUT);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFOn@AircraftClass@@QAEXW4LEFStateFlags@1@@Z ; AircraftClass::LEFOn
$LN8@ApplyDamag:

; 434  : 						}
; 435  : 					}
; 436  : 				}
; 437  :          break;

	jmp	$LN31@ApplyDamag
$LN7@ApplyDamag:

; 438  : 
; 439  :          case 6:  // Back Right, Lower
; 440  :             failuresPossible = 2 ^ FaultClass::NumFaultListSubSystems - 1 -
; 441  :                (1 << FaultClass::hud_fault) -
; 442  :                (1 << FaultClass::mfds_fault) -
; 443  :                (1 << FaultClass::ufc_fault);

	mov	DWORD PTR _failuresPossible$[ebp], -272891874 ; efbc001eH

; 444  : 				failures = 4;

	mov	DWORD PTR _failures$[ebp], 4

; 445  : //            MonoPrint ("Lower Right Back Damage\n");
; 446  :          break;

	jmp	$LN31@ApplyDamag
$LN6@ApplyDamag:

; 447  : 
; 448  :          case 7:  // Front Right, Lower
; 449  : 			default:
; 450  :             failuresPossible = 2 ^ FaultClass::NumFaultListSubSystems - 1 -
; 451  :                (1 << FaultClass::eng_fault) -
; 452  : 			   (1 << FaultClass::eng2_fault) -
; 453  :                (1 << FaultClass::hud_fault) -
; 454  :                (1 << FaultClass::mfds_fault) -
; 455  :                (1 << FaultClass::ufc_fault);

	mov	DWORD PTR _failuresPossible$[ebp], -272892642 ; efbbfd1eH

; 456  : 				failures = 6;

	mov	DWORD PTR _failures$[ebp], 6

; 457  : //            MonoPrint ("Lower Right Front Damage\n");
; 458  : 				//MI add LEF damage
; 459  : 				if(g_bRealisticAvionics && g_bNewDamageEffects)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	$LN1@ApplyDamag
	movzx	eax, BYTE PTR ?g_bNewDamageEffects@@3_NA ; g_bNewDamageEffects
	test	eax, eax
	je	$LN1@ApplyDamag

; 460  : 				{
; 461  : 					if(rand()%100 < 25 && !LEFState(RT_LEF_OUT))	//25% we're taking damage

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	cmp	edx, 25					; 00000019H
	jge	$LN1@ApplyDamag
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFState@AircraftClass@@QAEHW4LEFStateFlags@1@@Z ; AircraftClass::LEFState
	test	eax, eax
	jne	$LN1@ApplyDamag

; 462  : 					{
; 463  : 						if(LEFState(RT_LEF_DAMAGED))

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFState@AircraftClass@@QAEHW4LEFStateFlags@1@@Z ; AircraftClass::LEFState
	test	eax, eax
	je	SHORT $LN3@ApplyDamag

; 464  : 						{
; 465  : 							LEFOn(RT_LEF_OUT);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFOn@AircraftClass@@QAEXW4LEFStateFlags@1@@Z ; AircraftClass::LEFOn

; 466  : 							RTLEFAOA = GetDOFValue(IsComplex() ? COMP_LT_LEF : SIMP_LT_LEF);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsComplex@AircraftClass@@QAEHXZ	; AircraftClass::IsComplex
	test	eax, eax
	je	SHORT $LN104@ApplyDamag
	mov	DWORD PTR tv926[ebp], 9
	jmp	SHORT $LN105@ApplyDamag
$LN104@ApplyDamag:
	mov	DWORD PTR tv926[ebp], 22		; 00000016H
$LN105@ApplyDamag:
	mov	edx, DWORD PTR tv926[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDOFValue@SimMoverClass@@QAEMH@Z	; SimMoverClass::GetDOFValue
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+860]

; 467  : 						}
; 468  : 						else

	jmp	SHORT $LN1@ApplyDamag
$LN3@ApplyDamag:

; 469  : 						{
; 470  : 							LEFOn(RT_LEF_DAMAGED);

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFOn@AircraftClass@@QAEXW4LEFStateFlags@1@@Z ; AircraftClass::LEFOn

; 471  : 							RTLEFAOA = GetDOFValue(IsComplex() ? COMP_RT_LEF : SIMP_RT_LEF);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsComplex@AircraftClass@@QAEHXZ	; AircraftClass::IsComplex
	test	eax, eax
	je	SHORT $LN106@ApplyDamag
	mov	DWORD PTR tv940[ebp], 10		; 0000000aH
	jmp	SHORT $LN107@ApplyDamag
$LN106@ApplyDamag:
	mov	DWORD PTR tv940[ebp], 21		; 00000015H
$LN107@ApplyDamag:
	mov	ecx, DWORD PTR tv940[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDOFValue@SimMoverClass@@QAEMH@Z	; SimMoverClass::GetDOFValue
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+860]

; 472  : 							if(rand()%100 > 20)

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	cmp	edx, 20					; 00000014H
	jle	SHORT $LN1@ApplyDamag

; 473  : 								LEFOn(RT_LEF_OUT);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFOn@AircraftClass@@QAEXW4LEFStateFlags@1@@Z ; AircraftClass::LEFOn
$LN1@ApplyDamag:
$LN31@ApplyDamag:

; 474  : 						}
; 475  : 					}
; 476  : 				}
; 477  :          break;
; 478  :       }
; 479  : 
; 480  :       AddFault (failures, failuresPossible, damageDone/5, octant);

	mov	edx, DWORD PTR _octant$[ebp]
	push	edx
	mov	eax, DWORD PTR _damageDone$[ebp]
	cdq
	mov	ecx, 5
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _failuresPossible$[ebp]
	push	edx
	mov	eax, DWORD PTR _failures$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddFault@AircraftClass@@QAEXHIHH@Z	; AircraftClass::AddFault
$LN33@ApplyDamag:
$LN64@ApplyDamag:

; 481  :    }
; 482  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN108@ApplyDamag:
	DD	$LN30@ApplyDamag
	DD	$LN29@ApplyDamag
	DD	$LN22@ApplyDamag
	DD	$LN21@ApplyDamag
	DD	$LN14@ApplyDamag
	DD	$LN13@ApplyDamag
	DD	$LN7@ApplyDamag
?ApplyDamage@AircraftClass@@UAEXPAVFalconDamageMessage@@@Z ENDP ; AircraftClass::ApplyDamage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?IsComplex@AircraftClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsComplex@AircraftClass@@QAEHXZ PROC			; AircraftClass::IsComplex, COMDAT
; _this$ = ecx

; 336  : 	int            IsComplex (void) {return ((acFlags & isComplex) ? TRUE : FALSE);}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+964]
	and	ecx, 4
	je	SHORT $LN3@IsComplex
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsComplex
$LN3@IsComplex:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsComplex:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsComplex@AircraftClass@@QAEHXZ ENDP			; AircraftClass::IsComplex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?IsF16@AircraftClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsF16@AircraftClass@@QAEHXZ PROC			; AircraftClass::IsF16, COMDAT
; _this$ = ecx

; 335  : 	int            IsF16 (void) {return (acFlags & isF16 ? TRUE : FALSE);}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+964]
	and	ecx, 1
	je	SHORT $LN3@IsF16
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsF16
$LN3@IsF16:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsF16:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsF16@AircraftClass@@QAEHXZ ENDP			; AircraftClass::IsF16
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?LEFState@AircraftClass@@QAEHW4LEFStateFlags@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_fl$ = 8						; size = 4
?LEFState@AircraftClass@@QAEHW4LEFStateFlags@1@@Z PROC	; AircraftClass::LEFState, COMDAT
; _this$ = ecx

; 275  : 	int LEFState(LEFStateFlags fl) { return (LEFFlags & fl) == (unsigned int)fl ? 1 : 0; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+864]
	and	ecx, DWORD PTR _fl$[ebp]
	cmp	ecx, DWORD PTR _fl$[ebp]
	jne	SHORT $LN3@LEFState
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@LEFState
$LN3@LEFState:
	mov	DWORD PTR tv67[ebp], 0
$LN4@LEFState:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?LEFState@AircraftClass@@QAEHW4LEFStateFlags@1@@Z ENDP	; AircraftClass::LEFState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?LEFOn@AircraftClass@@QAEXW4LEFStateFlags@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fl$ = 8						; size = 4
?LEFOn@AircraftClass@@QAEXW4LEFStateFlags@1@@Z PROC	; AircraftClass::LEFOn, COMDAT
; _this$ = ecx

; 273  : 	void LEFOn(LEFStateFlags fl) { LEFFlags |= fl; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+864]
	or	ecx, DWORD PTR _fl$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+864], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?LEFOn@AircraftClass@@QAEXW4LEFStateFlags@1@@Z ENDP	; AircraftClass::LEFOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simmover.h
;	COMDAT ?GetDOFValue@SimMoverClass@@QAEMH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_dof$ = 8						; size = 4
?GetDOFValue@SimMoverClass@@QAEMH@Z PROC		; SimMoverClass::GetDOFValue, COMDAT
; _this$ = ecx

; 132  : 	float GetDOFValue (int dof) { ShiAssert(dof < numDofs); return dof < numDofs ? DOFData[dof] : 0;}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dof$[ebp]
	cmp	ecx, DWORD PTR [eax+600]
	jge	SHORT $LN3@GetDOFValu
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+612]
	mov	ecx, DWORD PTR _dof$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4]
	movss	DWORD PTR tv69[ebp], xmm0
	jmp	SHORT $LN4@GetDOFValu
$LN3@GetDOFValu:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv69[ebp], xmm0
$LN4@GetDOFValu:
	fld	DWORD PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetDOFValue@SimMoverClass@@QAEMH@Z ENDP		; SimMoverClass::GetDOFValue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?PowerOutput@SimBaseClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?PowerOutput@SimBaseClass@@QAEMXZ PROC			; SimBaseClass::PowerOutput, COMDAT
; _this$ = ecx

; 215  : 	float PowerOutput (void) {return specialData.powerOutput;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+188]
	mov	esp, ebp
	pop	ebp
	ret	0
?PowerOutput@SimBaseClass@@QAEMXZ ENDP			; SimBaseClass::PowerOutput
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsSetFlag@SimBaseClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFlag@SimBaseClass@@QBEHH@Z PROC			; SimBaseClass::IsSetFlag, COMDAT
; _this$ = ecx

; 178  : 	int  IsSetFlag(int flag) const { return ((specialData.flags & flag) ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsSetFlag
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSetFlag
$LN3@IsSetFlag:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSetFlag:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFlag@SimBaseClass@@QBEHH@Z ENDP			; SimBaseClass::IsSetFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetSPType@SimBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSPType@SimBaseClass@@QBEEXZ PROC			; SimBaseClass::GetSPType, COMDAT
; _this$ = ecx

; 163  : 	uchar GetSPType() const					{	return (EntityType())->classInfo_[VU_SPTYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	shl	ecx, 2
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSPType@SimBaseClass@@QBEEXZ ENDP			; SimBaseClass::GetSPType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetSType@SimBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSType@SimBaseClass@@QBEEXZ PROC			; SimBaseClass::GetSType, COMDAT
; _this$ = ecx

; 162  : 	uchar GetSType() const					{	return (EntityType())->classInfo_[VU_STYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSType@SimBaseClass@@QBEEXZ ENDP			; SimBaseClass::GetSType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetType@SimBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetType@SimBaseClass@@QBEEXZ PROC			; SimBaseClass::GetType, COMDAT
; _this$ = ecx

; 161  : 	uchar GetType() const					{	return (EntityType())->classInfo_[VU_TYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	shl	ecx, 1
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetType@SimBaseClass@@QBEEXZ ENDP			; SimBaseClass::GetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetClass@SimBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetClass@SimBaseClass@@QBEEXZ PROC			; SimBaseClass::GetClass, COMDAT
; _this$ = ecx

; 160  : 	uchar GetClass() const					{	return (EntityType())->classInfo_[VU_CLASS]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	shl	ecx, 0
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetClass@SimBaseClass@@QBEEXZ ENDP			; SimBaseClass::GetClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetDomain@SimBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDomain@SimBaseClass@@QBEEXZ PROC			; SimBaseClass::GetDomain, COMDAT
; _this$ = ecx

; 159  : 	uchar GetDomain() const					{	return (EntityType())->classInfo_[VU_DOMAIN]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 0
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDomain@SimBaseClass@@QBEEXZ ENDP			; SimBaseClass::GetDomain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?PRANDFloatPos@@YAMXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_x$ = -4						; size = 4
?PRANDFloatPos@@YAMXZ PROC				; PRANDFloatPos, COMDAT

; 150  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 151  : //	return NRANDPOS;
; 152  : 	float	x=	(float)(GenerateFastRandom()&0xffff);

	call	?GenerateFastRandom@@YAJXZ		; GenerateFastRandom
	and	eax, 65535				; 0000ffffH
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _x$[ebp], xmm0

; 153  : 	return( x / 65535.0f);

	movss	xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv72[ebp], xmm0
	fld	DWORD PTR tv72[ebp]

; 154  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PRANDFloatPos@@YAMXZ ENDP				; PRANDFloatPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?PRANDFloat@@YAMXZ
_TEXT	SEGMENT
tv75 = -8						; size = 4
_x$ = -4						; size = 4
?PRANDFloat@@YAMXZ PROC					; PRANDFloat, COMDAT

; 143  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 144  : //	return NRAND;
; 145  : 	float	x=	(float)(GenerateFastRandom()&0xffff);

	call	?GenerateFastRandom@@YAJXZ		; GenerateFastRandom
	and	eax, 65535				; 0000ffffH
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _x$[ebp], xmm0

; 146  : 	return( 1 - 2 * x / 65535.0f);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR __real@477fff00
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR tv75[ebp], xmm1
	fld	DWORD PTR tv75[ebp]

; 147  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PRANDFloat@@YAMXZ ENDP					; PRANDFloat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?PRANDInt3@@YAHXZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_x$ = -4						; size = 4
?PRANDInt3@@YAHXZ PROC					; PRANDInt3, COMDAT

; 135  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 136  : //	return	FloatToInt32(NRANDPOS * 2.9999f);
; 137  : 	int	x= (int)GenerateFastRandom()&0x03;

	call	?GenerateFastRandom@@YAJXZ		; GenerateFastRandom
	and	eax, 3
	mov	DWORD PTR _x$[ebp], eax

; 138  : 	return((x<3)?x:x-3);

	cmp	DWORD PTR _x$[ebp], 3
	jge	SHORT $LN3@PRANDInt3
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@PRANDInt3
$LN3@PRANDInt3:
	mov	ecx, DWORD PTR _x$[ebp]
	sub	ecx, 3
	mov	DWORD PTR tv68[ebp], ecx
$LN4@PRANDInt3:
	mov	eax, DWORD PTR tv68[ebp]

; 139  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PRANDInt3@@YAHXZ ENDP					; PRANDInt3
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?PRANDInt5@@YAHXZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_x$ = -4						; size = 4
?PRANDInt5@@YAHXZ PROC					; PRANDInt5, COMDAT

; 128  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 129  : //	return	FloatToInt32(NRANDPOS * 4.9999f);
; 130  : 	int	x= (int)GenerateFastRandom()&0x07;

	call	?GenerateFastRandom@@YAJXZ		; GenerateFastRandom
	and	eax, 7
	mov	DWORD PTR _x$[ebp], eax

; 131  : 	return((x<5)?x:x-5);

	cmp	DWORD PTR _x$[ebp], 5
	jge	SHORT $LN3@PRANDInt5
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@PRANDInt5
$LN3@PRANDInt5:
	mov	ecx, DWORD PTR _x$[ebp]
	sub	ecx, 5
	mov	DWORD PTR tv68[ebp], ecx
$LN4@PRANDInt5:
	mov	eax, DWORD PTR tv68[ebp]

; 132  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PRANDInt5@@YAHXZ ENDP					; PRANDInt5
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?GenerateFastRandom@@YAJXZ
_TEXT	SEGMENT
_FastRandom$ = -4					; size = 4
?GenerateFastRandom@@YAJXZ PROC				; GenerateFastRandom, COMDAT

; 108  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 109  : 	static long LastRandom;
; 110  : 	long	FastRandom;														// The Random Variable
; 111  : 	_asm {	
; 112  : 			push	edx

	push	edx

; 113  : 			push	eax

	push	eax

; 114  : 			RDTSC

	rdtsc

; 115  : 			add	DWORD PTR FastRandom,edx

	add	DWORD PTR _FastRandom$[ebp], edx

; 116  : 			xor	DWORD PTR FastRandom,eax

	xor	DWORD PTR _FastRandom$[ebp], eax

; 117  : 			mov	eax, DWORD PTR LastRandom

	mov	eax, DWORD PTR ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA ; `GenerateFastRandom'::`2'::LastRandom

; 118  : 			add	DWORD PTR FastRandom,eax

	add	DWORD PTR _FastRandom$[ebp], eax

; 119  : 			add	DWORD PTR LastRandom,edx

	add	DWORD PTR ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA, edx ; `GenerateFastRandom'::`2'::LastRandom

; 120  : 			pop	eax

	pop	eax

; 121  : 			pop	edx

	pop	edx

; 122  : 	}
; 123  : 	return(FastRandom);

	mov	eax, DWORD PTR _FastRandom$[ebp]

; 124  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GenerateFastRandom@@YAJXZ ENDP				; GenerateFastRandom
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawbsp.h
;	COMDAT ?GetNumDynamicVertices@DrawableBSP@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumDynamicVertices@DrawableBSP@@QAEHXZ PROC		; DrawableBSP::GetNumDynamicVertices, COMDAT
; _this$ = ecx

; 38   : 	int	GetNumDynamicVertices( void )	{ return instance.ParentObject->nDynamicCoords; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	movsx	eax, WORD PTR [ecx+46]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumDynamicVertices@DrawableBSP@@QAEHXZ ENDP		; DrawableBSP::GetNumDynamicVertices
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawbsp.h
;	COMDAT ?GetNumSlots@DrawableBSP@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumSlots@DrawableBSP@@QAEHXZ PROC			; DrawableBSP::GetNumSlots, COMDAT
; _this$ = ecx

; 35   : 	int	GetNumSlots( void )				{ return instance.ParentObject->nSlots; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	movzx	eax, BYTE PTR [ecx+51]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumSlots@DrawableBSP@@QAEHXZ ENDP			; DrawableBSP::GetNumSlots
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?Radius@DrawableObject@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Radius@DrawableObject@@QBEMXZ PROC			; DrawableObject::Radius, COMDAT
; _this$ = ecx

; 27   : 	float Radius() const { return radius; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]
	mov	esp, ebp
	pop	ebp
	ret	0
?Radius@DrawableObject@@QBEMXZ ENDP			; DrawableObject::Radius
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?checked_atan2@@YANNN@Z
_TEXT	SEGMENT
_z$ = -8						; size = 8
_y$ = 8							; size = 8
_x$ = 16						; size = 8
?checked_atan2@@YANNN@Z PROC				; checked_atan2, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 47   : 	double z;
; 48   : 	
; 49   : 	if (x == -0.0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@8000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@checked_at

; 50   : 		x = 0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _x$[ebp], xmm0
$LN8@checked_at:

; 51   : 	
; 52   : 	if (x != 0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@checked_at

; 53   : 		z = atan(y / x);

	movsd	xmm0, QWORD PTR _y$[ebp]
	divsd	xmm0, QWORD PTR _x$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR _z$[ebp]
	jmp	SHORT $LN4@checked_at
$LN7@checked_at:

; 54   : 	else if (y > 0)

	movsd	xmm0, QWORD PTR _y$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@checked_at

; 55   : 		z = HALF_DPI;

	movsd	xmm0, QWORD PTR __real@3ff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 56   : 	else

	jmp	SHORT $LN4@checked_at
$LN5@checked_at:

; 57   : 		z = -HALF_DPI;

	movsd	xmm0, QWORD PTR __real@bff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN4@checked_at:

; 58   : 
; 59   : 	if (x < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _x$[ebp]
	jbe	SHORT $LN1@checked_at

; 60   : 	{
; 61   : 		if (y < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _y$[ebp]
	jbe	SHORT $LN2@checked_at

; 62   : 			z -= DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	subsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 63   : 		else

	jmp	SHORT $LN1@checked_at
$LN2@checked_at:

; 64   : 			z += DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	addsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN1@checked_at:

; 65   : 	}
; 66   : 
; 67   : 	return z;

	fld	QWORD PTR _z$[ebp]

; 68   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?checked_atan2@@YANNN@Z ENDP				; checked_atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?mlSinCos@@YAXPAUmlTrig@@M@Z
_TEXT	SEGMENT
_trig$ = 8						; size = 4
_angle$ = 12						; size = 4
?mlSinCos@@YAXPAUmlTrig@@M@Z PROC			; mlSinCos, COMDAT

; 12   : {

	push	ebp
	mov	ebp, esp

; 13   : #if defined(_MSC_VER)
; 14   : 	__asm 
; 15   : 	{
; 16   : 		__asm	mov     ecx, trig;

	mov	ecx, DWORD PTR _trig$[ebp]

; 17   : 		__asm	fld     dword ptr [angle];

	fld	DWORD PTR _angle$[ebp]

; 18   : 		__asm	fsincos;

	fsincos

; 19   : 		__asm	fstp    dword ptr [ecx]trig.cos;

	fstp	DWORD PTR [ecx+4]

; 20   : 		__asm	fstp    dword ptr [ecx]trig.sin;

	fstp	DWORD PTR [ecx]

; 21   : 	}
; 22   : #else
; 23   : 	trig->sin = (Float32)sin(angle);
; 24   : 	trig->cos = (Float32)cos(angle);
; 25   : #endif
; 26   : }

	pop	ebp
	ret	0
?mlSinCos@@YAXPAUmlTrig@@M@Z ENDP			; mlSinCos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSetFalcFlag@FalconEntity@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z PROC		; FalconEntity::IsSetFalcFlag, COMDAT
; _this$ = ecx

; 112  : 	int IsSetFalcFlag (int flag)				{ return falconFlags & flag; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+136]
	and	eax, DWORD PTR _flag$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z ENDP		; FalconEntity::IsSetFalcFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSim@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsSim@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsSim, COMDAT
; _this$ = ecx

; 103  : 		{return (falconType & FalconSimEntity) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	and	ecx, 2
	je	SHORT $LN3@IsSim
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSim
$LN3@IsSim:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSim:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSim@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuevent.h
;	COMDAT ?RequestOutOfBandTransmit@VuMessage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RequestOutOfBandTransmit@VuMessage@@QAEXXZ PROC	; VuMessage::RequestOutOfBandTransmit, COMDAT
; _this$ = ecx

; 181  : 	void RequestOutOfBandTransmit() { flags_ |= VU_OUT_OF_BAND_MSG_FLAG; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	or	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+6], cl
	mov	esp, ebp
	pop	ebp
	ret	0
?RequestOutOfBandTransmit@VuMessage@@QAEXXZ ENDP	; VuMessage::RequestOutOfBandTransmit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YawDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YawDelta@VuEntity@@QBEMXZ PROC				; VuEntity::YawDelta, COMDAT
; _this$ = ecx

; 167  : 	SM_SCALAR YawDelta() const { return orient_.dyaw_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+72]
	mov	esp, ebp
	pop	ebp
	ret	0
?YawDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::YawDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Roll@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Roll@VuEntity@@QBEMXZ PROC				; VuEntity::Roll, COMDAT
; _this$ = ecx

; 166  : 	SM_SCALAR Roll() const { return orient_.roll_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+68]
	mov	esp, ebp
	pop	ebp
	ret	0
?Roll@VuEntity@@QBEMXZ ENDP				; VuEntity::Roll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Pitch@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Pitch@VuEntity@@QBEMXZ PROC				; VuEntity::Pitch, COMDAT
; _this$ = ecx

; 165  : 	SM_SCALAR Pitch() const { return orient_.pitch_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+64]
	mov	esp, ebp
	pop	ebp
	ret	0
?Pitch@VuEntity@@QBEMXZ ENDP				; VuEntity::Pitch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Yaw@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Yaw@VuEntity@@QBEMXZ PROC				; VuEntity::Yaw, COMDAT
; _this$ = ecx

; 164  : 	SM_SCALAR Yaw() const { return orient_.yaw_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?Yaw@VuEntity@@QBEMXZ ENDP				; VuEntity::Yaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZDelta@VuEntity@@QBEMXZ PROC				; VuEntity::ZDelta, COMDAT
; _this$ = ecx

; 163  : 	SM_SCALAR ZDelta() const { return pos_.dz_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::ZDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YDelta@VuEntity@@QBEMXZ PROC				; VuEntity::YDelta, COMDAT
; _this$ = ecx

; 162  : 	SM_SCALAR YDelta() const { return pos_.dy_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?YDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::YDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XDelta@VuEntity@@QBEMXZ PROC				; VuEntity::XDelta, COMDAT
; _this$ = ecx

; 161  : 	SM_SCALAR XDelta() const { return pos_.dx_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?XDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::XDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Type@VuEntity@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@VuEntity@@QBEGXZ PROC				; VuEntity::Type, COMDAT
; _this$ = ecx

; 154  : 	ushort Type() const       { return share_.entityType_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@VuEntity@@QBEGXZ ENDP				; VuEntity::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?SetYPRDelta@VuEntity@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dyaw$ = 8						; size = 4
_dpitch$ = 12						; size = 4
_droll$ = 16						; size = 4
?SetYPRDelta@VuEntity@@QAEXMMM@Z PROC			; VuEntity::SetYPRDelta, COMDAT
; _this$ = ecx

; 116  : 	void SetYPRDelta(SM_SCALAR dyaw, SM_SCALAR dpitch,SM_SCALAR droll){ 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 117  : 		orient_.dyaw_ = dyaw; orient_.dpitch_ = dpitch; orient_.droll_=droll; 

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _dyaw$[ebp]
	movss	DWORD PTR [eax+72], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _dpitch$[ebp]
	movss	DWORD PTR [ecx+76], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _droll$[ebp]
	movss	DWORD PTR [edx+80], xmm0

; 118  : 	}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetYPRDelta@VuEntity@@QAEXMMM@Z ENDP			; VuEntity::SetYPRDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?SetYPR@VuEntity@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_yaw$ = 8						; size = 4
_pitch$ = 12						; size = 4
_roll$ = 16						; size = 4
?SetYPR@VuEntity@@QAEXMMM@Z PROC			; VuEntity::SetYPR, COMDAT
; _this$ = ecx

; 113  : 	void SetYPR(SM_SCALAR yaw, SM_SCALAR pitch, SM_SCALAR roll){ 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 		orient_.yaw_ = yaw; orient_.pitch_ = pitch; orient_.roll_ = roll; 

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _yaw$[ebp]
	movss	DWORD PTR [eax+60], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _pitch$[ebp]
	movss	DWORD PTR [ecx+64], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _roll$[ebp]
	movss	DWORD PTR [edx+68], xmm0

; 115  : 	}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetYPR@VuEntity@@QAEXMMM@Z ENDP			; VuEntity::SetYPR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?asin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?asin@@YAMM@Z PROC					; asin, COMDAT

; 503  :         {return (asinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_asinf
	add	esp, 4
	pop	ebp
	ret	0
?asin@@YAMM@Z ENDP					; asin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?abs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?abs@@YAMM@Z PROC					; abs, COMDAT

; 499  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?abs@@YAMM@Z ENDP					; abs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _asinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_asinf	PROC						; COMDAT

; 402  :         {return ((float)asin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_asin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_asinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
