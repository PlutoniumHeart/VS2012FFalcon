; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\Aircraft\Cautions.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?Warned@@3_NA					; Warned
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
_BSS	SEGMENT
?Warned@@3_NA DB 01H DUP (?)				; Warned
_BSS	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
_DATA	SEGMENT
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	ORG $+4
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_DATA	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?ZDelta@VuEntity@@QBEMXZ			; VuEntity::ZDelta
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?IsSetFalcFlag@FalconEntity@@QAEHH@Z		; FalconEntity::IsSetFalcFlag
PUBLIC	?IsPlayer@FalconEntity@@QAEHXZ			; FalconEntity::IsPlayer
PUBLIC	?IsSetFlag@SimBaseClass@@QBEHH@Z		; SimBaseClass::IsSetFlag
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	?GetDOFValue@SimMoverClass@@QAEMH@Z		; SimMoverClass::GetDOFValue
PUBLIC	?CheckForOverG@AircraftClass@@QAEXXZ		; AircraftClass::CheckForOverG
PUBLIC	?CheckForOverSpeed@AircraftClass@@QAEXXZ	; AircraftClass::CheckForOverSpeed
PUBLIC	?DoOverGSpeedDamage@AircraftClass@@QAEXH@Z	; AircraftClass::DoOverGSpeedDamage
PUBLIC	?StoreToDamage@AircraftClass@@QAEXW4WeaponClass@@@Z ; AircraftClass::StoreToDamage
PUBLIC	?StationFailed@AircraftClass@@QAEXW4StationFlags@1@@Z ; AircraftClass::StationFailed
PUBLIC	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
PUBLIC	?LEFOn@AircraftClass@@QAEXW4LEFStateFlags@1@@Z	; AircraftClass::LEFOn
PUBLIC	?LEFState@AircraftClass@@QAEHW4LEFStateFlags@1@@Z ; AircraftClass::LEFState
PUBLIC	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
PUBLIC	?DamageSounds@AircraftClass@@QAEXXZ		; AircraftClass::DamageSounds
PUBLIC	?WrongCAT@AircraftClass@@QAEXXZ			; AircraftClass::WrongCAT
PUBLIC	?CorrectCAT@AircraftClass@@QAEXXZ		; AircraftClass::CorrectCAT
PUBLIC	?IsOn@AircraftClass@@QAEHW4APFlags@1@@Z		; AircraftClass::IsOn
PUBLIC	?MainPower@AircraftClass@@QAE?AW4MainPowerType@1@XZ ; AircraftClass::MainPower
PUBLIC	?ElecIsSet@AircraftClass@@QAE_NW4ElectricLights@1@@Z ; AircraftClass::ElecIsSet
PUBLIC	?SetExternalData@AircraftClass@@QAEXXZ		; AircraftClass::SetExternalData
PUBLIC	?GSounds@AircraftClass@@QAEXXZ			; AircraftClass::GSounds
PUBLIC	?SSounds@AircraftClass@@QAEXXZ			; AircraftClass::SSounds
PUBLIC	?AdjustTankSpeed@AircraftClass@@QAEXH@Z		; AircraftClass::AdjustTankSpeed
PUBLIC	?AdjustBombSpeed@AircraftClass@@QAEXH@Z		; AircraftClass::AdjustBombSpeed
PUBLIC	?AdjustTankG@AircraftClass@@QAEXH@Z		; AircraftClass::AdjustTankG
PUBLIC	?AdjustBombG@AircraftClass@@QAEXH@Z		; AircraftClass::AdjustBombG
PUBLIC	?CautionCheck@AircraftClass@@QAEXXZ		; AircraftClass::CautionCheck
PUBLIC	?MasterCaution@FackClass@@QAEHXZ		; FackClass::MasterCaution
PUBLIC	?ClearMasterCaution@FackClass@@QAEXXZ		; FackClass::ClearMasterCaution
PUBLIC	?SetMasterCaution@FackClass@@QAEXXZ		; FackClass::SetMasterCaution
PUBLIC	?WarnReset@FackClass@@QAEHXZ			; FackClass::WarnReset
PUBLIC	?DidManWarn@FackClass@@QAEHXZ			; FackClass::DidManWarn
PUBLIC	?ClearManWarnReset@FackClass@@QAEXXZ		; FackClass::ClearManWarnReset
PUBLIC	?ClearWarnReset@FackClass@@QAEXXZ		; FackClass::ClearWarnReset
PUBLIC	?EpuIsAir@AirframeClass@@QAEHXZ			; AirframeClass::EpuIsAir
PUBLIC	?EpuIsHydrazine@AirframeClass@@QAEHXZ		; AirframeClass::EpuIsHydrazine
PUBLIC	?HydraulicOK@AirframeClass@@QAEHXZ		; AirframeClass::HydraulicOK
PUBLIC	?IsEngineFlag@AirframeClass@@QAEHW4EngineFlags@1@@Z ; AirframeClass::IsEngineFlag
PUBLIC	?GetAirSource@AirframeClass@@QAE?AW4AirSource@1@XZ ; AirframeClass::GetAirSource
PUBLIC	?GeneratorRunning@AirframeClass@@QAEHW4Generator@1@@Z ; AirframeClass::GeneratorRunning
PUBLIC	?Fuel@AirframeClass@@QAEMXZ			; AirframeClass::Fuel
PUBLIC	?ExternalFuel@AirframeClass@@QAEMXZ		; AirframeClass::ExternalFuel
PUBLIC	?VehicleIndex@AirframeClass@@QAEHXZ		; AirframeClass::VehicleIndex
PUBLIC	?GetAeroData@AirframeClass@@QBEMH@Z		; AirframeClass::GetAeroData
PUBLIC	?IsSet@AirframeClass@@QBEHH@Z			; AirframeClass::IsSet
PUBLIC	?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ; FalconSessionEntity::GetPlayerEntity
PUBLIC	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
PUBLIC	?SetLightBit@FlightData@@QAEXH@Z		; FlightData::SetLightBit
PUBLIC	?ClearLightBit@FlightData@@QAEXH@Z		; FlightData::ClearLightBit
PUBLIC	?IsSet@FlightData@@QAEHH@Z			; FlightData::IsSet
PUBLIC	?SetLightBit2@FlightData@@QAEXH@Z		; FlightData::SetLightBit2
PUBLIC	?ClearLightBit2@FlightData@@QAEXH@Z		; FlightData::ClearLightBit2
PUBLIC	?SetLightBit3@FlightData@@QAEXH@Z		; FlightData::SetLightBit3
PUBLIC	?ClearLightBit3@FlightData@@QAEXH@Z		; FlightData::ClearLightBit3
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?NumHardpoints@SMSBaseClass@@QAEHXZ		; SMSBaseClass::NumHardpoints
PUBLIC	?LowAltPriority@VehRwrClass@@QAEHXZ		; VehRwrClass::LowAltPriority
PUBLIC	?HasActivity@PlayerRwrClass@@QAEHXZ		; PlayerRwrClass::HasActivity
PUBLIC	?LaunchIndication@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::LaunchIndication
PUBLIC	?IsPriority@PlayerRwrClass@@QAEHXZ		; PlayerRwrClass::IsPriority
PUBLIC	?TargetSep@PlayerRwrClass@@QAEHXZ		; PlayerRwrClass::TargetSep
PUBLIC	?ShowNaval@PlayerRwrClass@@QAEHXZ		; PlayerRwrClass::ShowNaval
PUBLIC	?GetTFRMode@LantirnClass@@QAE?AW4TfrMode@1@XZ	; LantirnClass::GetTFRMode
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3c8efa34
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e800000
PUBLIC	__real@3f19999a
PUBLIC	__real@3f800000
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@3fa999999999999a
PUBLIC	__real@3fe8000000000000
PUBLIC	__real@3fe851eb851eb852
PUBLIC	__real@40000000
PUBLIC	__real@40033333
PUBLIC	__real@4016000000000000
PUBLIC	__real@401a000000000000
PUBLIC	__real@401c000000000000
PUBLIC	__real@40d00000
PUBLIC	__real@41200000
PUBLIC	__real@41380000
PUBLIC	__real@41600000
PUBLIC	__real@41700000
PUBLIC	__real@42140000
PUBLIC	__real@42480000
PUBLIC	__real@42700000
PUBLIC	__real@42c80000
PUBLIC	__real@433e0000
PUBLIC	__real@437a0000
PUBLIC	__real@44898000
PUBLIC	__real@46d2f000
PUBLIC	__real@c1200000
PUBLIC	__real@c1a00000
PUBLIC	__real@c47a0000
PUBLIC	__real@c4fa0000
PUBLIC	__real@c59c4000
PUBLIC	__real@c6d2f000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_rand:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Sfx@F4SoundPos@@QAEXHHMM@Z:PROC		; F4SoundPos::Sfx
EXTRN	?IsPlaying@F4SoundPos@@QAE_NHH@Z:PROC		; F4SoundPos::IsPlaying
EXTRN	?UnSetFlag@SimBaseClass@@QAEXH@Z:PROC		; SimBaseClass::UnSetFlag
EXTRN	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z:PROC ; FackClass::SetFault
EXTRN	?SetFault@FackClass@@QAEXW4type_CSubSystem@@@Z:PROC ; FackClass::SetFault
EXTRN	?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z:PROC ; FackClass::ClearFault
EXTRN	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z:PROC ; FackClass::GetFault
EXTRN	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z:PROC ; FackClass::GetFault
EXTRN	?SetWarning@FackClass@@QAEXW4type_CSubSystem@@@Z:PROC ; FackClass::SetWarning
EXTRN	?SetCaution@FackClass@@QAEXW4type_CSubSystem@@@Z:PROC ; FackClass::SetCaution
EXTRN	?CheckTrapped@AirframeClass@@QAEHXZ:PROC	; AirframeClass::CheckTrapped
EXTRN	?CheckHome@AirframeClass@@QAEHXZ:PROC		; AirframeClass::CheckHome
EXTRN	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z:PROC ; FindSensor
EXTRN	?SetMasterMode@FireControlComputer@@QAEXW4FCCMasterMode@1@@Z:PROC ; FireControlComputer::SetMasterMode
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?SetRefuelState@CPMisc@@QAEXH@Z:PROC		; CPMisc::SetRefuelState
EXTRN	?GetLimiter@LimiterMgrClass@@QAEPAVLimiter@@HH@Z:PROC ; LimiterMgrClass::GetLimiter
EXTRN	?ManualSelect@PlayerRwrClass@@QAEHXZ:PROC	; PlayerRwrClass::ManualSelect
EXTRN	?LightSearch@PlayerRwrClass@@QAEHXZ:PROC	; PlayerRwrClass::LightSearch
EXTRN	?LightUnknowns@PlayerRwrClass@@QAEHXZ:PROC	; PlayerRwrClass::LightUnknowns
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?vuxGameTime@@3KA:DWORD				; vuxGameTime
EXTRN	?ComplexGearDOF@@3PAHA:BYTE			; ComplexGearDOF
EXTRN	?aeroDataset@@3PAVAeroDataSet@@A:DWORD		; aeroDataset
EXTRN	?g_bRealisticAvionics@@3_NA:BYTE		; g_bRealisticAvionics
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?cockpitFlightData@@3VFlightData@@A:BYTE	; cockpitFlightData
EXTRN	?PlayerOptions@@3VPlayerOptionsClass@@A:BYTE	; PlayerOptions
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?gLimiterMgr@@3PAVLimiterMgrClass@@A:DWORD	; gLimiterMgr
EXTRN	?g_intellivibeData@@3VIntellivibeData@@A:BYTE	; g_intellivibeData
EXTRN	?theLantirn@@3PAVLantirnClass@@A:DWORD		; theLantirn
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@c6d2f000
CONST	SEGMENT
__real@c6d2f000 DD 0c6d2f000r			; -27000
CONST	ENDS
;	COMDAT __real@c59c4000
CONST	SEGMENT
__real@c59c4000 DD 0c59c4000r			; -5000
CONST	ENDS
;	COMDAT __real@c4fa0000
CONST	SEGMENT
__real@c4fa0000 DD 0c4fa0000r			; -2000
CONST	ENDS
;	COMDAT __real@c47a0000
CONST	SEGMENT
__real@c47a0000 DD 0c47a0000r			; -1000
CONST	ENDS
;	COMDAT __real@c1a00000
CONST	SEGMENT
__real@c1a00000 DD 0c1a00000r			; -20
CONST	ENDS
;	COMDAT __real@c1200000
CONST	SEGMENT
__real@c1200000 DD 0c1200000r			; -10
CONST	ENDS
;	COMDAT __real@46d2f000
CONST	SEGMENT
__real@46d2f000 DD 046d2f000r			; 27000
CONST	ENDS
;	COMDAT __real@44898000
CONST	SEGMENT
__real@44898000 DD 044898000r			; 1100
CONST	ENDS
;	COMDAT __real@437a0000
CONST	SEGMENT
__real@437a0000 DD 0437a0000r			; 250
CONST	ENDS
;	COMDAT __real@433e0000
CONST	SEGMENT
__real@433e0000 DD 0433e0000r			; 190
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@42140000
CONST	SEGMENT
__real@42140000 DD 042140000r			; 37
CONST	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@41600000
CONST	SEGMENT
__real@41600000 DD 041600000r			; 14
CONST	ENDS
;	COMDAT __real@41380000
CONST	SEGMENT
__real@41380000 DD 041380000r			; 11.5
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40d00000
CONST	SEGMENT
__real@40d00000 DD 040d00000r			; 6.5
CONST	ENDS
;	COMDAT __real@401c000000000000
CONST	SEGMENT
__real@401c000000000000 DQ 0401c000000000000r	; 7
CONST	ENDS
;	COMDAT __real@401a000000000000
CONST	SEGMENT
__real@401a000000000000 DQ 0401a000000000000r	; 6.5
CONST	ENDS
;	COMDAT __real@4016000000000000
CONST	SEGMENT
__real@4016000000000000 DQ 04016000000000000r	; 5.5
CONST	ENDS
;	COMDAT __real@40033333
CONST	SEGMENT
__real@40033333 DD 040033333r			; 2.05
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fe851eb851eb852
CONST	SEGMENT
__real@3fe851eb851eb852 DQ 03fe851eb851eb852r	; 0.76
CONST	ENDS
;	COMDAT __real@3fe8000000000000
CONST	SEGMENT
__real@3fe8000000000000 DQ 03fe8000000000000r	; 0.75
CONST	ENDS
;	COMDAT __real@3fa999999999999a
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\lantirn.h
;	COMDAT ?GetTFRMode@LantirnClass@@QAE?AW4TfrMode@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTFRMode@LantirnClass@@QAE?AW4TfrMode@1@XZ PROC	; LantirnClass::GetTFRMode, COMDAT
; _this$ = ecx

; 42   :     TfrMode GetTFRMode(void) { return m_tfrmode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+168]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTFRMode@LantirnClass@@QAE?AW4TfrMode@1@XZ ENDP	; LantirnClass::GetTFRMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\playerrwr.h
;	COMDAT ?ShowNaval@PlayerRwrClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ShowNaval@PlayerRwrClass@@QAEHXZ PROC			; PlayerRwrClass::ShowNaval, COMDAT
; _this$ = ecx

; 42   : 	int ShowNaval (void)		{return showNaval;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+632]
	mov	esp, ebp
	pop	ebp
	ret	0
?ShowNaval@PlayerRwrClass@@QAEHXZ ENDP			; PlayerRwrClass::ShowNaval
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\playerrwr.h
;	COMDAT ?TargetSep@PlayerRwrClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TargetSep@PlayerRwrClass@@QAEHXZ PROC			; PlayerRwrClass::TargetSep, COMDAT
; _this$ = ecx

; 40   : 	int TargetSep (void)		{return targetSep;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+624]
	mov	esp, ebp
	pop	ebp
	ret	0
?TargetSep@PlayerRwrClass@@QAEHXZ ENDP			; PlayerRwrClass::TargetSep
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\playerrwr.h
;	COMDAT ?IsPriority@PlayerRwrClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPriority@PlayerRwrClass@@QAEHXZ PROC			; PlayerRwrClass::IsPriority, COMDAT
; _this$ = ecx

; 39   : 	int IsPriority (void)		{return priorityMode;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+620]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPriority@PlayerRwrClass@@QAEHXZ ENDP			; PlayerRwrClass::IsPriority
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\playerrwr.h
;	COMDAT ?LaunchIndication@PlayerRwrClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LaunchIndication@PlayerRwrClass@@QAEHXZ PROC		; PlayerRwrClass::LaunchIndication, COMDAT
; _this$ = ecx

; 28   : 	int LaunchIndication (void) {return missileActivity;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+640]
	mov	esp, ebp
	pop	ebp
	ret	0
?LaunchIndication@PlayerRwrClass@@QAEHXZ ENDP		; PlayerRwrClass::LaunchIndication
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\playerrwr.h
;	COMDAT ?HasActivity@PlayerRwrClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv73 = -4						; size = 4
?HasActivity@PlayerRwrClass@@QAEHXZ PROC		; PlayerRwrClass::HasActivity, COMDAT
; _this$ = ecx

; 27   : 	int HasActivity (void)		{return detectionList[0].entity != NULL;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 32					; 00000020H
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+76], 0
	je	SHORT $LN3@HasActivit
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN4@HasActivit
$LN3@HasActivit:
	mov	DWORD PTR tv73[ebp], 0
$LN4@HasActivit:
	mov	eax, DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?HasActivity@PlayerRwrClass@@QAEHXZ ENDP		; PlayerRwrClass::HasActivity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\vehrwr.h
;	COMDAT ?LowAltPriority@VehRwrClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LowAltPriority@VehRwrClass@@QAEHXZ PROC		; VehRwrClass::LowAltPriority, COMDAT
; _this$ = ecx

; 26   : 	int  LowAltPriority (void)	{return lowAltPriority;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+592]
	mov	esp, ebp
	pop	ebp
	ret	0
?LowAltPriority@VehRwrClass@@QAEHXZ ENDP		; VehRwrClass::LowAltPriority
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?NumHardpoints@SMSBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NumHardpoints@SMSBaseClass@@QAEHXZ PROC		; SMSBaseClass::NumHardpoints, COMDAT
; _this$ = ecx

; 87   : 	int NumHardpoints (void) {return numHardpoints;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?NumHardpoints@SMSBaseClass@@QAEHXZ ENDP		; SMSBaseClass::NumHardpoints
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\flightdata.h
;	COMDAT ?ClearLightBit3@FlightData@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newBit$ = 8						; size = 4
?ClearLightBit3@FlightData@@QAEXH@Z PROC		; FlightData::ClearLightBit3, COMDAT
; _this$ = ecx

; 283  :     void ClearLightBit3 (int newBit) {lightBits3 &= ~newBit;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _newBit$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+144]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+144], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearLightBit3@FlightData@@QAEXH@Z ENDP		; FlightData::ClearLightBit3
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\flightdata.h
;	COMDAT ?SetLightBit3@FlightData@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newBit$ = 8						; size = 4
?SetLightBit3@FlightData@@QAEXH@Z PROC			; FlightData::SetLightBit3, COMDAT
; _this$ = ecx

; 282  :     void SetLightBit3 (int newBit) {lightBits3 |= newBit;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	or	ecx, DWORD PTR _newBit$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+144], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLightBit3@FlightData@@QAEXH@Z ENDP			; FlightData::SetLightBit3
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\flightdata.h
;	COMDAT ?ClearLightBit2@FlightData@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newBit$ = 8						; size = 4
?ClearLightBit2@FlightData@@QAEXH@Z PROC		; FlightData::ClearLightBit2, COMDAT
; _this$ = ecx

; 279  :     void ClearLightBit2 (int newBit) {lightBits2 &= ~newBit;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _newBit$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+140]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+140], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearLightBit2@FlightData@@QAEXH@Z ENDP		; FlightData::ClearLightBit2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\flightdata.h
;	COMDAT ?SetLightBit2@FlightData@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newBit$ = 8						; size = 4
?SetLightBit2@FlightData@@QAEXH@Z PROC			; FlightData::SetLightBit2, COMDAT
; _this$ = ecx

; 278  :     void SetLightBit2 (int newBit) {lightBits2 |= newBit;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	or	ecx, DWORD PTR _newBit$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+140], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLightBit2@FlightData@@QAEXH@Z ENDP			; FlightData::SetLightBit2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\flightdata.h
;	COMDAT ?IsSet@FlightData@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_newBit$ = 8						; size = 4
?IsSet@FlightData@@QAEHH@Z PROC				; FlightData::IsSet, COMDAT
; _this$ = ecx

; 276  :     int  IsSet (int newBit) {return ((lightBits & newBit) ? TRUE : FALSE);};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	and	ecx, DWORD PTR _newBit$[ebp]
	je	SHORT $LN3@IsSet
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSet
$LN3@IsSet:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSet:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSet@FlightData@@QAEHH@Z ENDP				; FlightData::IsSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\flightdata.h
;	COMDAT ?ClearLightBit@FlightData@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newBit$ = 8						; size = 4
?ClearLightBit@FlightData@@QAEXH@Z PROC			; FlightData::ClearLightBit, COMDAT
; _this$ = ecx

; 275  :     void ClearLightBit (int newBit) {lightBits &= ~newBit;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _newBit$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+124]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+124], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearLightBit@FlightData@@QAEXH@Z ENDP			; FlightData::ClearLightBit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\flightdata.h
;	COMDAT ?SetLightBit@FlightData@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newBit$ = 8						; size = 4
?SetLightBit@FlightData@@QAEXH@Z PROC			; FlightData::SetLightBit, COMDAT
; _this$ = ecx

; 274  :     void SetLightBit (int newBit) {lightBits |= newBit;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	or	ecx, DWORD PTR _newBit$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+124], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLightBit@FlightData@@QAEXH@Z ENDP			; FlightData::SetLightBit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ PROC ; SimulationDriver::GetPlayerEntity, COMDAT
; _this$ = ecx

; 76   : 	SimMoverClass *GetPlayerEntity() const { return const_cast<SimMoverClass*>(playerEntity); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ENDP ; SimulationDriver::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ PROC ; FalconSessionEntity::GetPlayerEntity, COMDAT
; _this$ = ecx

; 138  : 	FalconEntity* GetPlayerEntity(void) const     { return playerEntityPtr.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ENDP ; FalconSessionEntity::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?IsSet@AirframeClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_testFlag$ = 8						; size = 4
?IsSet@AirframeClass@@QBEHH@Z PROC			; AirframeClass::IsSet, COMDAT
; _this$ = ecx

; 1216 : 	int IsSet (int testFlag) const {return flags & testFlag ? 1 : 0;}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	and	ecx, DWORD PTR _testFlag$[ebp]
	je	SHORT $LN3@IsSet
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSet
$LN3@IsSet:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSet:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSet@AirframeClass@@QBEHH@Z ENDP			; AirframeClass::IsSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetAeroData@AirframeClass@@QBEMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_which$ = 8						; size = 4
?GetAeroData@AirframeClass@@QBEMH@Z PROC		; AirframeClass::GetAeroData, COMDAT
; _this$ = ecx

; 1207 : 	float GetAeroData(int which) const { return aeroDataset[vehicleIndex].inputData[which]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+92]
	imul	ecx, 220				; 000000dcH
	add	ecx, DWORD PTR ?aeroDataset@@3PAVAeroDataSet@@A ; aeroDataset
	mov	edx, DWORD PTR _which$[ebp]
	fld	DWORD PTR [ecx+edx*4+16]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAeroData@AirframeClass@@QBEMH@Z ENDP		; AirframeClass::GetAeroData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?VehicleIndex@AirframeClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?VehicleIndex@AirframeClass@@QAEHXZ PROC		; AirframeClass::VehicleIndex, COMDAT
; _this$ = ecx

; 1200 : 	int	VehicleIndex(void) {return vehicleIndex;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+92]
	mov	esp, ebp
	pop	ebp
	ret	0
?VehicleIndex@AirframeClass@@QAEHXZ ENDP		; AirframeClass::VehicleIndex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?ExternalFuel@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ExternalFuel@AirframeClass@@QAEMXZ PROC		; AirframeClass::ExternalFuel, COMDAT
; _this$ = ecx

; 1184 : 	float ExternalFuel (void) {return externalFuel;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+32]
	mov	esp, ebp
	pop	ebp
	ret	0
?ExternalFuel@AirframeClass@@QAEMXZ ENDP		; AirframeClass::ExternalFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?Fuel@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Fuel@AirframeClass@@QAEMXZ PROC			; AirframeClass::Fuel, COMDAT
; _this$ = ecx

; 1183 : 	float Fuel (void) {return fuel;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?Fuel@AirframeClass@@QAEMXZ ENDP			; AirframeClass::Fuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GeneratorRunning@AirframeClass@@QAEHW4Generator@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_gen$ = 8						; size = 4
?GeneratorRunning@AirframeClass@@QAEHW4Generator@1@@Z PROC ; AirframeClass::GeneratorRunning, COMDAT
; _this$ = ecx

; 1130 : 	BOOL GeneratorRunning(Generator gen) { return (generators & gen) ? TRUE : FALSE; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1804]
	and	ecx, DWORD PTR _gen$[ebp]
	je	SHORT $LN3@GeneratorR
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@GeneratorR
$LN3@GeneratorR:
	mov	DWORD PTR tv67[ebp], 0
$LN4@GeneratorR:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GeneratorRunning@AirframeClass@@QAEHW4Generator@1@@Z ENDP ; AirframeClass::GeneratorRunning
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetAirSource@AirframeClass@@QAE?AW4AirSource@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAirSource@AirframeClass@@QAE?AW4AirSource@1@XZ PROC	; AirframeClass::GetAirSource, COMDAT
; _this$ = ecx

; 1112 : 	AirSource GetAirSource() { return airSource; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1800]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAirSource@AirframeClass@@QAE?AW4AirSource@1@XZ ENDP	; AirframeClass::GetAirSource
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?IsEngineFlag@AirframeClass@@QAEHW4EngineFlags@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_ef$ = 8						; size = 4
?IsEngineFlag@AirframeClass@@QAEHW4EngineFlags@1@@Z PROC ; AirframeClass::IsEngineFlag, COMDAT
; _this$ = ecx

; 1070 : 	int IsEngineFlag(EngineFlags ef) { return (engineFlags & ef) ? 1 : 0; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1676]
	and	ecx, DWORD PTR _ef$[ebp]
	je	SHORT $LN3@IsEngineFl
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsEngineFl
$LN3@IsEngineFl:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsEngineFl:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsEngineFlag@AirframeClass@@QAEHW4EngineFlags@1@@Z ENDP ; AirframeClass::IsEngineFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?HydraulicOK@AirframeClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?HydraulicOK@AirframeClass@@QAEHXZ PROC			; AirframeClass::HydraulicOK, COMDAT
; _this$ = ecx

; 1041 : 	int HydraulicOK() { return hydrAB == HYDR_ALL ? 1 : 0; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1601]
	cmp	ecx, 3
	jne	SHORT $LN3@HydraulicO
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@HydraulicO
$LN3@HydraulicO:
	mov	DWORD PTR tv67[ebp], 0
$LN4@HydraulicO:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?HydraulicOK@AirframeClass@@QAEHXZ ENDP			; AirframeClass::HydraulicOK
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?EpuIsHydrazine@AirframeClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?EpuIsHydrazine@AirframeClass@@QAEHXZ PROC		; AirframeClass::EpuIsHydrazine, COMDAT
; _this$ = ecx

; 1031 : 	BOOL EpuIsHydrazine() { return (epuBurnState & EpuHydrazine) ? TRUE : FALSE; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1600]
	and	ecx, 1
	je	SHORT $LN3@EpuIsHydra
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@EpuIsHydra
$LN3@EpuIsHydra:
	mov	DWORD PTR tv68[ebp], 0
$LN4@EpuIsHydra:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?EpuIsHydrazine@AirframeClass@@QAEHXZ ENDP		; AirframeClass::EpuIsHydrazine
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?EpuIsAir@AirframeClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?EpuIsAir@AirframeClass@@QAEHXZ PROC			; AirframeClass::EpuIsAir, COMDAT
; _this$ = ecx

; 1030 : 	BOOL EpuIsAir() { return (epuBurnState & EpuAir) ? TRUE : FALSE; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1600]
	and	ecx, 2
	je	SHORT $LN3@EpuIsAir
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@EpuIsAir
$LN3@EpuIsAir:
	mov	DWORD PTR tv68[ebp], 0
$LN4@EpuIsAir:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?EpuIsAir@AirframeClass@@QAEHXZ ENDP			; AirframeClass::EpuIsAir
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fack.h
;	COMDAT ?ClearWarnReset@FackClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearWarnReset@FackClass@@QAEXXZ PROC			; FackClass::ClearWarnReset, COMDAT
; _this$ = ecx

; 45   :     void	ClearWarnReset(void) {NeedsWarnReset = FALSE;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearWarnReset@FackClass@@QAEXXZ ENDP			; FackClass::ClearWarnReset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fack.h
;	COMDAT ?ClearManWarnReset@FackClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearManWarnReset@FackClass@@QAEXXZ PROC		; FackClass::ClearManWarnReset, COMDAT
; _this$ = ecx

; 44   : 	void	ClearManWarnReset(void)	{DidManWarnReset = FALSE;};	//MI

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearManWarnReset@FackClass@@QAEXXZ ENDP		; FackClass::ClearManWarnReset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fack.h
;	COMDAT ?DidManWarn@FackClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DidManWarn@FackClass@@QAEHXZ PROC			; FackClass::DidManWarn, COMDAT
; _this$ = ecx

; 42   : 	int		DidManWarn(void)	{return DidManWarnReset;};	//MI

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?DidManWarn@FackClass@@QAEHXZ ENDP			; FackClass::DidManWarn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fack.h
;	COMDAT ?WarnReset@FackClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?WarnReset@FackClass@@QAEHXZ PROC			; FackClass::WarnReset, COMDAT
; _this$ = ecx

; 41   :     int		WarnReset(void)	{return NeedsWarnReset;};	//MI

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?WarnReset@FackClass@@QAEHXZ ENDP			; FackClass::WarnReset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fack.h
;	COMDAT ?SetMasterCaution@FackClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetMasterCaution@FackClass@@QAEXXZ PROC		; FackClass::SetMasterCaution, COMDAT
; _this$ = ecx

; 38   :     void        SetMasterCaution (void) {mMasterCaution = TRUE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 1
	mov	esp, ebp
	pop	ebp
	ret	0
?SetMasterCaution@FackClass@@QAEXXZ ENDP		; FackClass::SetMasterCaution
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fack.h
;	COMDAT ?ClearMasterCaution@FackClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearMasterCaution@FackClass@@QAEXXZ PROC		; FackClass::ClearMasterCaution, COMDAT
; _this$ = ecx

; 37   :     void        ClearMasterCaution(void) {mMasterCaution = FALSE;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearMasterCaution@FackClass@@QAEXXZ ENDP		; FackClass::ClearMasterCaution
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fack.h
;	COMDAT ?MasterCaution@FackClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MasterCaution@FackClass@@QAEHXZ PROC			; FackClass::MasterCaution, COMDAT
; _this$ = ecx

; 35   :     int		MasterCaution(void) {return mMasterCaution;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?MasterCaution@FackClass@@QAEHXZ ENDP			; FackClass::MasterCaution
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\cautions.cpp
_TEXT	SEGMENT
_MaxG$1 = -88						; size = 4
tv1162 = -84						; size = 4
_savemc$2 = -80						; size = 4
_savewarn$3 = -76					; size = 4
tv1085 = -72						; size = 4
tv1080 = -68						; size = 4
tv1074 = -64						; size = 4
tv1067 = -60						; size = 4
tv1356 = -56						; size = 4
tv1062 = -52						; size = 4
tv1039 = -48						; size = 4
tv1014 = -44						; size = 4
tv1354 = -40						; size = 4
tv1009 = -36						; size = 4
_limitGs$4 = -32					; size = 4
_theHTS$5 = -28						; size = 4
_theRwr$6 = -24						; size = 4
_theRadar$7 = -20					; size = 4
_theRadar$8 = -16					; size = 4
_theRwr$9 = -12						; size = 4
_limiter$10 = -8					; size = 4
_this$ = -4						; size = 4
?CautionCheck@AircraftClass@@QAEXXZ PROC		; AircraftClass::CautionCheck
; _this$ = ecx

; 35   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 	if(!isDigital)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+948], 0
	jne	$LN31@CautionChe

; 37   :    {
; 38   :       // Check fuel
; 39   :       if (af->Fuel() + af->ExternalFuel() < bingoFuel && !mFaults->GetFault(FaultClass::fms_fault))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	call	?Fuel@AirframeClass@@QAEMXZ		; AirframeClass::Fuel
	fstp	DWORD PTR tv1009[ebp]
	movss	xmm0, DWORD PTR tv1009[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+932]
	movss	DWORD PTR tv1354[ebp], xmm0
	call	?ExternalFuel@AirframeClass@@QAEMXZ	; AirframeClass::ExternalFuel
	fstp	DWORD PTR tv1014[ebp]
	movss	xmm0, DWORD PTR tv1354[ebp]
	addss	xmm0, DWORD PTR tv1014[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+984]
	comiss	xmm1, xmm0
	jbe	$LN138@CautionChe
	push	14					; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN138@CautionChe

; 40   :       {
; 41   : 		  if(g_bRealisticAvionics)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	$LN137@CautionChe

; 42   : 		  {
; 43   : 			  //MI added for ICP stuff.
; 44   : 			  //rewritten 04/21/01
; 45   : #if 0
; 46   : 			  bingoFuel = bingoFuel * 0.5F;
; 47   : 			  //Update our ICP readout
; 48   : 			  if(OTWDriver.pCockpitManager->mpIcp->IsICPSet(ICPClass::BINGO_MODE))
; 49   : 				  OTWDriver.pCockpitManager->mpIcp->ExecBingo();
; 50   : 			  if (bingoFuel < 100.0F)
; 51   : 				  bingoFuel = -1.0F;
; 52   : 			  cockpitFlightData.SetLightBit(FlightData::FuelLow);
; 53   : 			  mFaults->SetFault(fuel_low_fault); 
; 54   : 			  mFaults->SetMasterCaution();
; 55   : 			  F4SoundFXSetDist( af->auxaeroData->sndBBBingo, TRUE, 0.0f, 1.0f );
; 56   : #else
; 57   : 			  //Only warn us if we've not already been warned.
; 58   : 			  if(!mFaults->GetFault(fuel_low_fault))

	push	13					; 0000000dH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN135@CautionChe

; 59   : 			  {
; 60   : 				  cockpitFlightData.SetLightBit(FlightData::FuelLow);

	push	4194304					; 00400000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 61   : 				  //mFaults->SetFault(fuel_low_fault);
; 62   : 				  mFaults->SetWarning(fuel_low_fault);

	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?SetWarning@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetWarning

; 63   : 
; 64   : 				  //Smeg 27-Oct-2003 - added ! to play Bingo when not alrady being played. Probably a typo.
; 65   : 				  //if(!F4SoundFXPlaying( af->auxaeroData->sndBBBingo)) // MLR 5/16/2004 - 
; 66   : 				  //	  F4SoundFXSetDist( af->auxaeroData->sndBBBingo, TRUE, 0.0f, 1.0f );
; 67   : 				  if(!SoundPos.IsPlaying(af->auxaeroData->sndBBBingo)) // MLR 5/16/2004 - 

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+2388]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?IsPlaying@F4SoundPos@@QAE_NHH@Z	; F4SoundPos::IsPlaying
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN135@CautionChe

; 68   : 					  SoundPos.Sfx(af->auxaeroData->sndBBBingo);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+2388]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMM@Z		; F4SoundPos::Sfx
$LN135@CautionChe:

; 69   : 			  }
; 70   : #endif
; 71   : 		  }
; 72   : 		  else

	jmp	$LN132@CautionChe
$LN137@CautionChe:

; 73   : 		  {
; 74   : 			  //me123 let's set a bingo manualy
; 75   : 			  bingoFuel =   100.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [edx+984], xmm0

; 76   : 			  if (af->Fuel() <=  100.0F)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?Fuel@AirframeClass@@QAEMXZ		; AirframeClass::Fuel
	fstp	DWORD PTR tv1039[ebp]
	movss	xmm0, DWORD PTR __real@42c80000
	comiss	xmm0, DWORD PTR tv1039[ebp]
	jb	SHORT $LN133@CautionChe

; 77   : 				  bingoFuel = -10.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c1200000
	movss	DWORD PTR [ecx+984], xmm0
$LN133@CautionChe:

; 78   : 			  cockpitFlightData.SetLightBit(FlightData::FuelLow);

	push	4194304					; 00400000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 79   : 			  mFaults->SetFault(fuel_low_fault); 

	push	13					; 0000000dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetFault

; 80   : 			  mFaults->SetMasterCaution();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?SetMasterCaution@FackClass@@QAEXXZ	; FackClass::SetMasterCaution

; 81   : 			  //if(!F4SoundFXPlaying(af->auxaeroData->sndBBBingo)) // MLR 5/16/2004 - 
; 82   : 			  //	  F4SoundFXSetDist( af->auxaeroData->sndBBBingo, TRUE, 0.0f, 1.0f );
; 83   : 			  if(!SoundPos.IsPlaying(af->auxaeroData->sndBBBingo)) // MLR 5/16/2004 - 

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+2388]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?IsPlaying@F4SoundPos@@QAE_NHH@Z	; F4SoundPos::IsPlaying
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN132@CautionChe

; 84   : 				  SoundPos.Sfx(af->auxaeroData->sndBBBingo);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+2388]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMM@Z		; F4SoundPos::Sfx
$LN132@CautionChe:

; 85   : 
; 86   : 		  }

	jmp	$LN129@CautionChe
$LN138@CautionChe:

; 87   : 
; 88   :       }
; 89   : 	  //MI reset our fuel low fault if we set a bingo value below our current level
; 90   : 	  else if(g_bRealisticAvionics && mFaults->GetFault(fuel_low_fault))

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	SHORT $LN129@CautionChe
	push	13					; 0000000dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN129@CautionChe

; 91   : 	  {
; 92   : 		  if(bingoFuel < af->Fuel() + af->ExternalFuel())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?Fuel@AirframeClass@@QAEMXZ		; AirframeClass::Fuel
	fstp	DWORD PTR tv1062[ebp]
	movss	xmm0, DWORD PTR tv1062[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	movss	DWORD PTR tv1356[ebp], xmm0
	call	?ExternalFuel@AirframeClass@@QAEMXZ	; AirframeClass::ExternalFuel
	fstp	DWORD PTR tv1067[ebp]
	movss	xmm0, DWORD PTR tv1356[ebp]
	addss	xmm0, DWORD PTR tv1067[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [edx+984]
	jbe	SHORT $LN129@CautionChe

; 93   : 		  {
; 94   : 			  cockpitFlightData.ClearLightBit(FlightData::FuelLow);

	push	4194304					; 00400000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit

; 95   : 			  mFaults->ClearFault(fuel_low_fault);

	push	13					; 0000000dH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::ClearFault
$LN129@CautionChe:

; 96   : 		  }
; 97   : 	  }
; 98   : 
; 99   : 	  // Caution TO/LDG Config
; 100  : 	  //MI
; 101  : 	  //if(IsF16())
; 102  : 	  //TJL 10/20/03 Allowing TO/LDG Config warning on all aircraft
; 103  : 	  if(!isDigital)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+948], 0
	jne	$LN112@CautionChe

; 104  : 	  {
; 105  : 		  //RV - I-Hawk - changed altitude value from 10000 to 5000 according to Dannycoh
; 106  : 		  if(ZPos() > -5000.0F && GetKias() < 190.0F && ZDelta() * 60.0F >= 250.0F && af->gearPos != 1.0F)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1074[ebp]
	movss	xmm0, DWORD PTR tv1074[ebp]
	comiss	xmm0, DWORD PTR __real@c59c4000
	jbe	$LN127@CautionChe
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+224]
	call	edx
	fstp	DWORD PTR tv1080[ebp]
	movss	xmm0, DWORD PTR __real@433e0000
	comiss	xmm0, DWORD PTR tv1080[ebp]
	jbe	$LN127@CautionChe
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv1085[ebp]
	movss	xmm0, DWORD PTR tv1085[ebp]
	mulss	xmm0, DWORD PTR __real@42700000
	comiss	xmm0, DWORD PTR __real@437a0000
	jb	SHORT $LN127@CautionChe
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR [ecx+1552]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN127@CautionChe

; 107  : 		  {
; 108  : 			  if(!mFaults->GetFault(to_ldg_config))

	push	9
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN124@CautionChe

; 109  : 			  {
; 110  : 				  if(!g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	jne	SHORT $LN125@CautionChe

; 111  : 					  mFaults->SetFault(to_ldg_config);

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?SetFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetFault

; 112  : 				  else

	jmp	SHORT $LN124@CautionChe
$LN125@CautionChe:

; 113  : 					  mFaults->SetWarning(to_ldg_config);

	push	9
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetWarning@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetWarning
$LN124@CautionChe:

; 114  : 			  }
; 115  : 		  }
; 116  : 		  else

	jmp	SHORT $LN123@CautionChe
$LN127@CautionChe:

; 117  : 			  mFaults->ClearFault(to_ldg_config);

	push	9
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::ClearFault
$LN123@CautionChe:

; 118  : 		  
; 119  : 		  // JPO check for trapped fuel
; 120  : 		  if (!mFaults->GetFault(FaultClass::fms_fault) && af->CheckTrapped())

	push	14					; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN122@CautionChe
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+932]
	call	?CheckTrapped@AirframeClass@@QAEHXZ	; AirframeClass::CheckTrapped
	test	eax, eax
	je	SHORT $LN122@CautionChe

; 121  : 		  {
; 122  : 			  if(!mFaults->GetFault(fuel_trapped))

	push	24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN119@CautionChe

; 123  : 			  {
; 124  : 				  if(!g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	jne	SHORT $LN120@CautionChe

; 125  : 					  mFaults->SetFault(fuel_trapped);				  

	push	24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetFault

; 126  : 				  else

	jmp	SHORT $LN119@CautionChe
$LN120@CautionChe:

; 127  : 					  mFaults->SetWarning(fuel_trapped);

	push	24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?SetWarning@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetWarning
$LN119@CautionChe:

; 128  : 			  }
; 129  : 		  }
; 130  : 		  else 

	jmp	SHORT $LN118@CautionChe
$LN122@CautionChe:

; 131  : 			  mFaults->ClearFault(fuel_trapped);

	push	24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::ClearFault
$LN118@CautionChe:

; 132  : 
; 133  : 		  //MI Fuel HOME warning		  
; 134  : 		  if(!mFaults->GetFault(FaultClass::fms_fault) && af->CheckHome())

	push	14					; 0000000eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN117@CautionChe
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?CheckHome@AirframeClass@@QAEHXZ	; AirframeClass::CheckHome
	test	eax, eax
	je	$LN117@CautionChe

; 135  : 		  {
; 136  : 			  if(!mFaults->GetFault(fuel_home))

	push	25					; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN113@CautionChe

; 137  : 			  {
; 138  : 				  if(!g_bRealisticAvionics)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	jne	SHORT $LN115@CautionChe

; 139  : 					  mFaults->SetFault(fuel_home);

	push	25					; 00000019H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?SetFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetFault

; 140  : 				  else

	jmp	SHORT $LN114@CautionChe
$LN115@CautionChe:

; 141  : 					  mFaults->SetWarning(fuel_home);

	push	25					; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?SetWarning@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetWarning
$LN114@CautionChe:

; 142  : 				  //Make noise
; 143  : //				  if(!F4SoundFXPlaying(af->auxaeroData->sndBBBingo))
; 144  : //					  F4SoundFXSetDist( af->auxaeroData->sndBBBingo, TRUE, 0.0f, 1.0f );
; 145  : 	  			  if(!SoundPos.IsPlaying(af->auxaeroData->sndBBBingo)) // MLR 5/16/2004 - 

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+2388]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?IsPlaying@F4SoundPos@@QAE_NHH@Z	; F4SoundPos::IsPlaying
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN113@CautionChe

; 146  : 	  				  SoundPos.Sfx(af->auxaeroData->sndBBBingo);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+2388]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMM@Z		; F4SoundPos::Sfx
$LN113@CautionChe:

; 147  : 
; 148  : 			  }
; 149  : 		  }
; 150  : 		  else 

	jmp	SHORT $LN112@CautionChe
$LN117@CautionChe:

; 151  : 			  mFaults->ClearFault(fuel_home);

	push	25					; 00000019H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::ClearFault
$LN112@CautionChe:

; 152  : 	  }
; 153  : 
; 154  : /////////////me123 let's brake something if we fly too fast
; 155  : 	  //me123 OWLOOK switch here to enable aircraft limits (overg and max speed)
; 156  : 	  //if (g_bEnableAircraftLimits) {	MI
; 157  : 	  if(g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN111@CautionChe

; 158  : 	  {
; 159  : 		  // Marco Edit - OverG DOES NOT affect		!!!
; 160  : 		  // (at least not before the aircraft falls apart)
; 161  : 		  //MI put back in after discussing with Marco
; 162  : 		  CheckForOverG();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckForOverG@AircraftClass@@QAEXXZ	; AircraftClass::CheckForOverG

; 163  : 		  CheckForOverSpeed();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckForOverSpeed@AircraftClass@@QAEXXZ ; AircraftClass::CheckForOverSpeed
$LN111@CautionChe:

; 164  : 	  }
; 165  : 	  // save for later.
; 166  : 		int savewarn = mFaults->WarnReset();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?WarnReset@FackClass@@QAEHXZ		; FackClass::WarnReset
	mov	DWORD PTR _savewarn$3[ebp], eax

; 167  : 		int savemc = mFaults->MasterCaution();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?MasterCaution@FackClass@@QAEHXZ	; FackClass::MasterCaution
	mov	DWORD PTR _savemc$2[ebp], eax

; 168  : 	  //// JPO - check hydraulics too.
; 169  : ///////////
; 170  : 		if((af->rpm * 37.0F) < 15.0F || mFaults->GetFault(FaultClass::eng_fault))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR [ecx+1212]
	mulss	xmm0, DWORD PTR __real@42140000
	movss	xmm1, DWORD PTR __real@41700000
	comiss	xmm1, xmm0
	ja	SHORT $LN109@CautionChe
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN110@CautionChe
$LN109@CautionChe:

; 171  : 		{
; 172  : 			if(!mFaults->GetFault(oil_press))

	push	6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN106@CautionChe

; 173  : 			{
; 174  : 				if(!g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	jne	SHORT $LN107@CautionChe

; 175  : 					// less than 15 psi
; 176  : 					mFaults->SetFault(oil_press);

	push	6
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetFault

; 177  : 				else

	jmp	SHORT $LN106@CautionChe
$LN107@CautionChe:

; 178  : 					mFaults->SetWarning(oil_press);

	push	6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?SetWarning@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetWarning
$LN106@CautionChe:

; 179  : 			}
; 180  : 		}
; 181  : 		else 

	jmp	SHORT $LN105@CautionChe
$LN110@CautionChe:

; 182  : 			mFaults->ClearFault(oil_press);

	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::ClearFault
$LN105@CautionChe:

; 183  : 
; 184  : 		if(!af->HydraulicOK())

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+932]
	call	?HydraulicOK@AirframeClass@@QAEHXZ	; AirframeClass::HydraulicOK
	test	eax, eax
	jne	SHORT $LN104@CautionChe

; 185  : 		{
; 186  : 			if(!mFaults->GetFault(hyd))

	push	5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN101@CautionChe

; 187  : 			{
; 188  : 				if(!g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	jne	SHORT $LN102@CautionChe

; 189  : 					mFaults->SetFault(hyd);

	push	5
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetFault

; 190  : 				else

	jmp	SHORT $LN101@CautionChe
$LN102@CautionChe:

; 191  : 					mFaults->SetWarning(hyd);

	push	5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?SetWarning@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetWarning
$LN101@CautionChe:

; 192  : 			}
; 193  : 		}
; 194  : 		else

	jmp	SHORT $LN100@CautionChe
$LN104@CautionChe:

; 195  : 			mFaults->ClearFault(hyd);

	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::ClearFault
$LN100@CautionChe:

; 196  : 
; 197  : 		// JPO Sec is active below 20% rpm
; 198  : 		if(af->rpm < 0.20F) 

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR __real@3e4ccccd
	comiss	xmm0, DWORD PTR [eax+1212]
	jbe	SHORT $LN99@CautionChe

; 199  : 		{
; 200  : 			if(!mFaults->GetFault(sec_fault))

	push	26					; 0000001aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN96@CautionChe

; 201  : 			{
; 202  : 				if(!g_bRealisticAvionics)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	jne	SHORT $LN97@CautionChe

; 203  : 					mFaults->SetFault(sec_fault);

	push	26					; 0000001aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?SetFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetFault

; 204  : 				else

	jmp	SHORT $LN96@CautionChe
$LN97@CautionChe:

; 205  : 					mFaults->SetCaution(sec_fault);

	push	26					; 0000001aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?SetCaution@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetCaution
$LN96@CautionChe:

; 206  : 			}
; 207  : 		}
; 208  : 		else 

	jmp	SHORT $LN95@CautionChe
$LN99@CautionChe:

; 209  : 		    mFaults->ClearFault(sec_fault);

	push	26					; 0000001aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::ClearFault
$LN95@CautionChe:

; 210  : 
; 211  : 		// this is a hack JPO
; 212  : 		// when starting up we don't want to set the warn/caution lights,
; 213  : 		// but we do want the indicator lights.
; 214  : 		// so we clear the cautions if nothing else had them set.
; 215  : 		if (af->rpm < 1e-2 && OnGround()) { 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	cvtss2sd xmm0, DWORD PTR [ecx+1212]
	movsd	xmm1, QWORD PTR __real@3f847ae147ae147b
	comisd	xmm1, xmm0
	jbe	SHORT $LN92@CautionChe
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+148]
	call	edx
	test	eax, eax
	je	SHORT $LN92@CautionChe

; 216  : 		    if (savewarn == 0) mFaults->ClearWarnReset();

	cmp	DWORD PTR _savewarn$3[ebp], 0
	jne	SHORT $LN93@CautionChe
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?ClearWarnReset@FackClass@@QAEXXZ	; FackClass::ClearWarnReset
$LN93@CautionChe:

; 217  : 		    if (savemc == 0) mFaults->ClearMasterCaution();

	cmp	DWORD PTR _savemc$2[ebp], 0
	jne	SHORT $LN92@CautionChe
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?ClearMasterCaution@FackClass@@QAEXXZ	; FackClass::ClearMasterCaution
$LN92@CautionChe:

; 218  : 		}
; 219  : 
; 220  : #if 0 // JPO: I don't think this makes any sense to me... me123????
; 221  : ///////////me123 changed 27000 to -27000
; 222  : 		if(ZPos() < -27000.0F && mFaults->GetFault(FaultClass::eng_fault)) 
; 223  : 		{
; 224  : 			if(!mFaults->GetFault(to_ldg_config))
; 225  : 				mFaults->SetFault(cabin_press_fault);
; 226  : 		}
; 227  : 		else
; 228  : 			mFaults->ClearFault(cabin_press_fault);
; 229  : #endif
; 230  : 		// JPO - dump dumps cabin pressure, off means its not there anyway.
; 231  : 		// 10000 is a guess - thats where you requirte oxygen
; 232  : 		// MD -- 20031105: the dash one says this caution kicks in at 27k MSL
; 233  : 		if (ZPos() < -27000 && (af->GetAirSource() == AirframeClass::AS_DUMP || 
; 234  : 		    af->GetAirSource() == AirframeClass::AS_OFF))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1162[ebp]
	movss	xmm0, DWORD PTR __real@c6d2f000
	comiss	xmm0, DWORD PTR tv1162[ebp]
	jbe	SHORT $LN91@CautionChe
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+932]
	call	?GetAirSource@AirframeClass@@QAE?AW4AirSource@1@XZ ; AirframeClass::GetAirSource
	cmp	eax, 2
	je	SHORT $LN90@CautionChe
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?GetAirSource@AirframeClass@@QAE?AW4AirSource@1@XZ ; AirframeClass::GetAirSource
	test	eax, eax
	jne	SHORT $LN91@CautionChe
$LN90@CautionChe:

; 235  : 		{
; 236  : 			if(!mFaults->GetFault(cabin_press_fault))

	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN87@CautionChe

; 237  : 			{
; 238  : 				if(!g_bRealisticAvionics)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	jne	SHORT $LN88@CautionChe

; 239  : 					mFaults->SetFault(cabin_press_fault);

	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?SetFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetFault

; 240  : 				else

	jmp	SHORT $LN87@CautionChe
$LN88@CautionChe:

; 241  : 					mFaults->SetCaution(cabin_press_fault);

	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?SetCaution@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetCaution
$LN87@CautionChe:

; 242  : 			}
; 243  : 		}
; 244  : 		else

	jmp	SHORT $LN86@CautionChe
$LN91@CautionChe:

; 245  : 		    mFaults->ClearFault(cabin_press_fault);

	push	20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::ClearFault
$LN86@CautionChe:

; 246  : 
; 247  : 		if(mFaults->GetFault(FaultClass::hud_fault) && mFaults->GetFault(FaultClass::fcc_fault))

	push	18					; 00000012H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN85@CautionChe
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN85@CautionChe

; 248  : 		{
; 249  : 			if(!mFaults->GetFault(canopy))

	push	8
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN82@CautionChe

; 250  : 			{
; 251  : 				if(!g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	jne	SHORT $LN83@CautionChe

; 252  : 					mFaults->SetFault(canopy);

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?SetFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetFault

; 253  : 				else

	jmp	SHORT $LN82@CautionChe
$LN83@CautionChe:

; 254  : 					mFaults->SetWarning(canopy);

	push	8
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetWarning@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetWarning
$LN82@CautionChe:

; 255  : 			}
; 256  : 		}
; 257  : 		else

	jmp	SHORT $LN81@CautionChe
$LN85@CautionChe:

; 258  : 			mFaults->ClearFault(canopy);

	push	8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::ClearFault
$LN81@CautionChe:

; 259  : ///////////
; 260  : 		if(mFaults->GetFault(FaultClass::fcc_fault))

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN80@CautionChe

; 261  : 		{
; 262  : 			if(!mFaults->GetFault(dual_fc))

	push	7
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN77@CautionChe

; 263  : 			{
; 264  : 				if(!g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	jne	SHORT $LN78@CautionChe

; 265  : 					mFaults->SetFault(dual_fc);

	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?SetFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetFault

; 266  : 				else

	jmp	SHORT $LN77@CautionChe
$LN78@CautionChe:

; 267  : 					mFaults->SetWarning(dual_fc);

	push	7
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetWarning@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetWarning
$LN77@CautionChe:

; 268  : 			}
; 269  : 		}
; 270  : 		else

	jmp	SHORT $LN76@CautionChe
$LN80@CautionChe:

; 271  : 			mFaults->ClearFault(dual_fc);

	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::ClearFault
$LN76@CautionChe:

; 272  : ///////////
; 273  : 		if(mFaults->GetFault( FaultClass::amux_fault) || mFaults->GetFault(FaultClass::bmux_fault))

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN74@CautionChe
	push	2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN75@CautionChe
$LN74@CautionChe:

; 274  : 		{
; 275  : 			if(!g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	jne	SHORT $LN73@CautionChe

; 276  : 				mFaults->SetFault(avionics_fault);

	push	14					; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?SetFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetFault

; 277  : 			else

	jmp	SHORT $LN72@CautionChe
$LN73@CautionChe:

; 278  : 				mFaults->SetCaution(avionics_fault);

	push	14					; 0000000eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetCaution@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetCaution
$LN72@CautionChe:

; 279  : 		}
; 280  : 		else 

	jmp	SHORT $LN71@CautionChe
$LN75@CautionChe:

; 281  : 		{
; 282  : 			mFaults->ClearFault(avionics_fault);

	push	14					; 0000000eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::ClearFault
$LN71@CautionChe:

; 283  : 		}
; 284  : ////////////
; 285  : 		if(mFaults->GetFault(FaultClass::ralt_fault))

	push	24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN70@CautionChe

; 286  : 		{
; 287  : 			if(!mFaults->GetFault(radar_alt_fault))

	push	15					; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN67@CautionChe

; 288  : 			{
; 289  : 				if(!g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	jne	SHORT $LN68@CautionChe

; 290  : 					mFaults->SetFault(radar_alt_fault);

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?SetFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetFault

; 291  : 				else

	jmp	SHORT $LN67@CautionChe
$LN68@CautionChe:

; 292  : 					mFaults->SetCaution(radar_alt_fault);

	push	15					; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetCaution@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetCaution
$LN67@CautionChe:

; 293  : 			}
; 294  : 		}
; 295  : 		else

	jmp	SHORT $LN66@CautionChe
$LN70@CautionChe:

; 296  : 			mFaults->ClearFault(radar_alt_fault);

	push	15					; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::ClearFault
$LN66@CautionChe:

; 297  : ///////////////
; 298  : 		if(mFaults->GetFault(FaultClass::iff_fault))

	push	19					; 00000013H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN65@CautionChe

; 299  : 		{
; 300  : 			if(!mFaults->GetFault(iff_fault))

	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN62@CautionChe

; 301  : 			{
; 302  : 				if(!g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	jne	SHORT $LN63@CautionChe

; 303  : 					mFaults->SetFault(iff_fault);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?SetFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetFault

; 304  : 				else

	jmp	SHORT $LN62@CautionChe
$LN63@CautionChe:

; 305  : 					mFaults->SetCaution(iff_fault);

	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetCaution@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetCaution
$LN62@CautionChe:

; 306  : 			}
; 307  : 		}
; 308  : 		else

	jmp	SHORT $LN61@CautionChe
$LN65@CautionChe:

; 309  : 			mFaults->ClearFault(iff_fault);

	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::ClearFault
$LN61@CautionChe:

; 310  : ///////////////
; 311  : 		if(mFaults->GetFault(FaultClass::rwr_fault))

	push	25					; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN60@CautionChe

; 312  : 		{
; 313  : 			if(!mFaults->GetFault(ecm_fault))

	push	17					; 00000011H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN57@CautionChe

; 314  : 			{
; 315  : 				if(!g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	jne	SHORT $LN58@CautionChe

; 316  : 					mFaults->SetFault(ecm_fault);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?SetFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetFault

; 317  : 				else

	jmp	SHORT $LN57@CautionChe
$LN58@CautionChe:

; 318  : 					mFaults->SetCaution(ecm_fault);

	push	17					; 00000011H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetCaution@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetCaution
$LN57@CautionChe:

; 319  : 			}
; 320  : 		}
; 321  : 		else

	jmp	SHORT $LN56@CautionChe
$LN60@CautionChe:

; 322  : 			mFaults->ClearFault(ecm_fault);

	push	17					; 00000011H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::ClearFault
$LN56@CautionChe:

; 323  : ///////////////
; 324  : 		if(mFaults->GetFault(FaultClass::rwr_fault))

	push	25					; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN55@CautionChe

; 325  : 		{
; 326  : 			if(!mFaults->GetFault(nws_fault))

	push	19					; 00000013H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN52@CautionChe

; 327  : 			{
; 328  : 				if(!g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	jne	SHORT $LN53@CautionChe

; 329  : 					mFaults->SetFault(nws_fault);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?SetFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetFault

; 330  : 				else

	jmp	SHORT $LN52@CautionChe
$LN53@CautionChe:

; 331  : 					mFaults->SetCaution(nws_fault);

	push	19					; 00000013H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetCaution@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetCaution
$LN52@CautionChe:

; 332  : 			}
; 333  : 		}
; 334  : 		else

	jmp	SHORT $LN51@CautionChe
$LN55@CautionChe:

; 335  : 			mFaults->ClearFault(nws_fault);

	push	19					; 00000013H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::ClearFault
$LN51@CautionChe:

; 336  : /////////////
; 337  : 		//MI
; 338  : 		// Overheat Fault
; 339  : 		if (mFaults->GetFault(FaultClass::eng_fault) && af->rpm <= 0.75)

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN50@CautionChe
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	cvtss2sd xmm0, DWORD PTR [eax+1212]
	movsd	xmm1, QWORD PTR __real@3fe8000000000000
	comisd	xmm1, xmm0
	jb	SHORT $LN50@CautionChe

; 340  : 		{
; 341  : 			if(!mFaults->GetFault(overheat_fault))

	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN47@CautionChe

; 342  : 			{
; 343  : 				if(!g_bRealisticAvionics)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	jne	SHORT $LN48@CautionChe

; 344  : 					mFaults->SetFault(overheat_fault);

	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?SetFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetFault

; 345  : 				else

	jmp	SHORT $LN47@CautionChe
$LN48@CautionChe:

; 346  : 					mFaults->SetCaution(overheat_fault);

	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?SetCaution@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetCaution
$LN47@CautionChe:

; 347  : 			}
; 348  : 		}
; 349  : 		else

	jmp	SHORT $LN46@CautionChe
$LN50@CautionChe:

; 350  : 			mFaults->ClearFault(overheat_fault);

	push	12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::ClearFault
$LN46@CautionChe:

; 351  : 
; 352  : 
; 353  : // if lg up and aoa and speed
; 354  : // if airbrakes on
; 355  : 		//MI what kind of bullshit is this anyway?????
; 356  : 		if(!g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	jne	SHORT $LN43@CautionChe

; 357  : 		{
; 358  : 			if(mFaults->GetFault(FaultClass::rwr_fault))

	push	25					; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN44@CautionChe

; 359  : 			{
; 360  : 				mFaults->SetFault(to_ldg_config);

	push	9
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetFault

; 361  : 			}
; 362  : 			else {

	jmp	SHORT $LN43@CautionChe
$LN44@CautionChe:

; 363  : 				mFaults->ClearFault(to_ldg_config);

	push	9
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::ClearFault
$LN43@CautionChe:

; 364  : 			}
; 365  : 		}
; 366  : //////////////
; 367  : 		// Set external data if this is Ownship and player
; 368  : 		if (this == SimDriver.GetPlayerEntity())

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	cmp	DWORD PTR _this$[ebp], eax
	jne	SHORT $LN42@CautionChe

; 369  : 		  SetExternalData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetExternalData@AircraftClass@@QAEXXZ	; AircraftClass::SetExternalData
$LN42@CautionChe:

; 370  : 
; 371  :       // AMUX and BMUX combined failure forces FCC into NAV
; 372  : 		if(mFaults->GetFault(FaultClass::amux_fault) && mFaults->GetFault(FaultClass::bmux_fault))

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN41@CautionChe
	push	2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN41@CautionChe

; 373  : 		{
; 374  :          FCC->SetMasterMode (FireControlComputer::Nav);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+936]
	call	?SetMasterMode@FireControlComputer@@QAEXW4FCCMasterMode@1@@Z ; FireControlComputer::SetMasterMode
$LN41@CautionChe:

; 375  : 		} 
; 376  : 
; 377  :       // If blanker broken, no ECM
; 378  :       if (mFaults->GetFault(FaultClass::blkr_fault))

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN40@CautionChe

; 379  :       {
; 380  :          SensorClass* theRwr = FindSensor(this, SensorClass::RWR);

	push	2
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRwr$9[ebp], eax

; 381  : 
; 382  :          if (theRwr)

	cmp	DWORD PTR _theRwr$9[ebp], 0
	je	SHORT $LN39@CautionChe

; 383  :             theRwr->SetPower (FALSE);

	push	0
	mov	eax, DWORD PTR _theRwr$9[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _theRwr$9[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
$LN39@CautionChe:

; 384  :          UnSetFlag(ECM_ON);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UnSetFlag@SimBaseClass@@QAEXH@Z	; SimBaseClass::UnSetFlag
$LN40@CautionChe:

; 385  :       }
; 386  : 
; 387  :       // Shut down radar when broken
; 388  :       if (mFaults->GetFault(FaultClass::fcc_fault) == FaultClass::xmtr)

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	cmp	eax, 1024				; 00000400H
	jne	SHORT $LN37@CautionChe

; 389  :       {
; 390  :          RadarClass* theRadar = (RadarClass*)FindSensor(this, SensorClass::Radar);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRadar$8[ebp], eax

; 391  : 
; 392  :          if (theRadar)

	cmp	DWORD PTR _theRadar$8[ebp], 0
	je	SHORT $LN37@CautionChe

; 393  :             theRadar->SetEmitting (FALSE);

	push	0
	mov	eax, DWORD PTR _theRadar$8[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _theRadar$8[ebp]
	mov	eax, DWORD PTR [edx+84]
	call	eax
$LN37@CautionChe:

; 394  :       }
; 395  : 
; 396  :       if (mFaults->GetFault(FaultClass::fcc_fault) == FaultClass::bus)

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	cmp	eax, 1
	jne	SHORT $LN35@CautionChe

; 397  :       {
; 398  :          RadarClass* theRadar = (RadarClass*)FindSensor(this, SensorClass::Radar);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRadar$7[ebp], eax

; 399  : 
; 400  :          if (theRadar)

	cmp	DWORD PTR _theRadar$7[ebp], 0
	je	SHORT $LN35@CautionChe

; 401  :             theRadar->SetPower (FALSE);

	push	0
	mov	eax, DWORD PTR _theRadar$7[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _theRadar$7[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
$LN35@CautionChe:

; 402  :       }
; 403  : 
; 404  :       // Shut down rwr when broken
; 405  :       if (mFaults->GetFault(FaultClass::rwr_fault))

	push	25					; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN33@CautionChe

; 406  :       {
; 407  :          SensorClass* theRwr = FindSensor(this, SensorClass::RWR);

	push	2
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRwr$6[ebp], eax

; 408  : 
; 409  :          if (theRwr)

	cmp	DWORD PTR _theRwr$6[ebp], 0
	je	SHORT $LN33@CautionChe

; 410  :             theRwr->SetPower (FALSE);

	push	0
	mov	eax, DWORD PTR _theRwr$6[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _theRwr$6[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
$LN33@CautionChe:

; 411  :       }
; 412  : 
; 413  :       // Shut down HTS when broken
; 414  :       if (mFaults->GetFault(FaultClass::harm_fault))

	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN31@CautionChe

; 415  :       {
; 416  :          SensorClass* theHTS = FindSensor(this, SensorClass::HTS);

	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theHTS$5[ebp], eax

; 417  : 
; 418  :          if (theHTS)

	cmp	DWORD PTR _theHTS$5[ebp], 0
	je	SHORT $LN31@CautionChe

; 419  :             theHTS->SetPower (FALSE);

	push	0
	mov	eax, DWORD PTR _theHTS$5[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _theHTS$5[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
$LN31@CautionChe:

; 420  :       }
; 421  : 	}
; 422  :    //MI new home of the wrong/correct CAT stuff
; 423  :    //if(af->platform->IsPlayer() && g_bEnableCATIIIExtension)	MI
; 424  :    if(IsPlayer() && g_bRealisticAvionics)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	$LN23@CautionChe
	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	$LN23@CautionChe

; 425  :    {
; 426  : 		float MaxG = af->curMaxGs;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR [eax+1244]
	movss	DWORD PTR _MaxG$1[ebp], xmm0

; 427  : 		float limitGs= 6.5f;

	movss	xmm0, DWORD PTR __real@40d00000
	movss	DWORD PTR _limitGs$4[ebp], xmm0

; 428  : 		Limiter *limiter = NULL; // JPO - use dynamic figure , not 6.5

	mov	DWORD PTR _limiter$10[ebp], 0

; 429  : 		
; 430  : 		
; 431  : 		if( limiter = gLimiterMgr->GetLimiter(CatIIIMaxGs, af->VehicleIndex()) )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	call	?VehicleIndex@AirframeClass@@QAEHXZ	; AirframeClass::VehicleIndex
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR ?gLimiterMgr@@3PAVLimiterMgrClass@@A ; gLimiterMgr
	call	?GetLimiter@LimiterMgrClass@@QAEPAVLimiter@@HH@Z ; LimiterMgrClass::GetLimiter
	mov	DWORD PTR _limiter$10[ebp], eax
	cmp	DWORD PTR _limiter$10[ebp], 0
	je	SHORT $LN29@CautionChe

; 432  : 		    limitGs = limiter->Limit(0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _limiter$10[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _limiter$10[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	fstp	DWORD PTR _limitGs$4[ebp]
$LN29@CautionChe:

; 433  : 
; 434  : 		if(MaxG <= limitGs)

	movss	xmm0, DWORD PTR _limitGs$4[ebp]
	comiss	xmm0, DWORD PTR _MaxG$1[ebp]
	jb	SHORT $LN28@CautionChe

; 435  : 		{
; 436  : 			//we need CATIII
; 437  : 			if(!af->IsSet(AirframeClass::CATLimiterIII))

	push	2097152					; 00200000H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN27@CautionChe

; 438  : 				WrongCAT();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?WrongCAT@AircraftClass@@QAEXXZ		; AircraftClass::WrongCAT

; 439  : 			else 

	jmp	SHORT $LN26@CautionChe
$LN27@CautionChe:

; 440  : 				CorrectCAT();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CorrectCAT@AircraftClass@@QAEXXZ	; AircraftClass::CorrectCAT
$LN26@CautionChe:

; 441  : 		}
; 442  : 		else

	jmp	SHORT $LN23@CautionChe
$LN28@CautionChe:

; 443  : 		{
; 444  : 			//we don't need CATIII
; 445  : 			if(af->IsSet(AirframeClass::CATLimiterIII))

	push	2097152					; 00200000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN24@CautionChe

; 446  : 				WrongCAT();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?WrongCAT@AircraftClass@@QAEXXZ		; AircraftClass::WrongCAT

; 447  : 			else 

	jmp	SHORT $LN23@CautionChe
$LN24@CautionChe:

; 448  : 				CorrectCAT();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CorrectCAT@AircraftClass@@QAEXXZ	; AircraftClass::CorrectCAT
$LN23@CautionChe:

; 449  : 		}
; 450  :    }
; 451  : 
; 452  : 
; 453  : 
; 454  : 
; 455  :    //MI Seat Arm switch
; 456  :    if(IsPlayer() && g_bRealisticAvionics)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN19@CautionChe
	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	SHORT $LN19@CautionChe

; 457  :    {
; 458  : 	   if(!SeatArmed)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1052]
	test	ecx, ecx
	jne	SHORT $LN21@CautionChe

; 459  : 	   {
; 460  : 		   if(!mFaults->GetFault(seat_notarmed_fault))

	push	32					; 00000020H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN20@CautionChe

; 461  : 			   mFaults->SetCaution(seat_notarmed_fault);

	push	32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?SetCaution@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetCaution
$LN20@CautionChe:

; 462  : 	   }
; 463  : 	   else

	jmp	SHORT $LN19@CautionChe
$LN21@CautionChe:

; 464  : 		   mFaults->ClearFault(seat_notarmed_fault);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::ClearFault
$LN19@CautionChe:

; 465  :    }
; 466  :    if(g_bRealisticAvionics)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	$LN1@CautionChe

; 467  :    {
; 468  : 	   //MI WARN Reset stuff
; 469  : 		 //me123 loopign warnign sound is just T_LCFG i think
; 470  : 	   if(cockpitFlightData.IsSet(FlightData::T_L_CFG))	//this one gives continous warning

	push	2048					; 00000800H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?IsSet@FlightData@@QAEHH@Z		; FlightData::IsSet
	test	eax, eax
	je	SHORT $LN17@CautionChe

; 471  : 	   {
; 472  : 		   //sound
; 473  : 		   if(mFaults->WarnReset())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?WarnReset@FackClass@@QAEHXZ		; FackClass::WarnReset
	test	eax, eax
	je	SHORT $LN14@CautionChe

; 474  : 		   {
; 475  : 			   if(vuxGameTime >= WhenToPlayWarning)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	cmp	edx, DWORD PTR [ecx+1512]
	jb	SHORT $LN14@CautionChe

; 476  : 			   {
; 477  : 	   			  if(!SoundPos.IsPlaying(SFX_BB_WARNING)) // MLR 5/16/2004 - 

	push	0
	push	63					; 0000003fH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?IsPlaying@F4SoundPos@@QAE_NHH@Z	; F4SoundPos::IsPlaying
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN14@CautionChe

; 478  : 	 				  SoundPos.Sfx(SFX_BB_WARNING);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	63					; 0000003fH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMM@Z		; F4SoundPos::Sfx
$LN14@CautionChe:

; 479  : 
; 480  : //			   F4SoundFXSetDist(SFX_BB_WARNING, FALSE, 0.0f, 1.0f );
; 481  : 			   }
; 482  : 		   }
; 483  : 	   }
; 484  : 	   else

	jmp	SHORT $LN12@CautionChe
$LN17@CautionChe:

; 485  : 	   {
; 486  : 		   if(mFaults->DidManWarn())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?DidManWarn@FackClass@@QAEHXZ		; FackClass::DidManWarn
	test	eax, eax
	je	SHORT $LN12@CautionChe

; 487  : 		   {
; 488  : 			   mFaults->ClearManWarnReset();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?ClearManWarnReset@FackClass@@QAEXXZ	; FackClass::ClearManWarnReset

; 489  : 			   mFaults->ClearWarnReset();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?ClearWarnReset@FackClass@@QAEXXZ	; FackClass::ClearWarnReset
$LN12@CautionChe:

; 490  : 		   }
; 491  : 	   }
; 492  : 	   //MI Caution sound
; 493  : 	   if(NeedsToPlayCaution)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+1504]
	test	edx, edx
	je	$LN10@CautionChe

; 494  : 	   {
; 495  : 		   if(vuxGameTime >= WhenToPlayCaution)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	cmp	ecx, DWORD PTR [eax+1508]
	jb	$LN10@CautionChe

; 496  : 		   {
; 497  : 		       if(mFaults->MasterCaution())

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?MasterCaution@FackClass@@QAEHXZ	; FackClass::MasterCaution
	test	eax, eax
	je	SHORT $LN8@CautionChe

; 498  : 		       {
; 499  : //			   if(!F4SoundFXPlaying( af->auxaeroData->sndBBCaution))
; 500  : //			       F4SoundFXSetDist( af->auxaeroData->sndBBCaution, TRUE, 0.0f, 1.0f );
; 501  :   	   			  if(!SoundPos.IsPlaying(af->auxaeroData->sndBBCaution)) // MLR 5/16/2004 - 

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+2396]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?IsPlaying@F4SoundPos@@QAE_NHH@Z	; F4SoundPos::IsPlaying
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN8@CautionChe

; 502  : 	 				  SoundPos.Sfx(af->auxaeroData->sndBBCaution);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+2396]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMM@Z		; F4SoundPos::Sfx
$LN8@CautionChe:

; 503  : 
; 504  : 
; 505  : 		       }
; 506  : 			   NeedsToPlayCaution = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1504], 0
$LN10@CautionChe:

; 507  : 		   }
; 508  : 	   }
; 509  : 	   if(NeedsToPlayWarning)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+1505]
	test	edx, edx
	je	$LN6@CautionChe

; 510  : 	   {
; 511  : 		   if(vuxGameTime >= WhenToPlayWarning)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	cmp	ecx, DWORD PTR [eax+1512]
	jb	$LN6@CautionChe

; 512  : 		   {
; 513  : 			   if(mFaults->WarnReset())

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?WarnReset@FackClass@@QAEHXZ		; FackClass::WarnReset
	test	eax, eax
	je	SHORT $LN4@CautionChe

; 514  : 			   {
; 515  : //				   if(!F4SoundFXPlaying(af->auxaeroData->sndBBWarning))
; 516  : //					   F4SoundFXSetDist(af->auxaeroData->sndBBWarning, TRUE, 0.0f, 1.0f );
; 517  :    	   			  if(!SoundPos.IsPlaying(af->auxaeroData->sndBBWarning)) // MLR 5/16/2004 - 

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+2392]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?IsPlaying@F4SoundPos@@QAE_NHH@Z	; F4SoundPos::IsPlaying
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@CautionChe

; 518  : 	 				  SoundPos.Sfx(af->auxaeroData->sndBBWarning);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+2392]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMM@Z		; F4SoundPos::Sfx
$LN4@CautionChe:

; 519  : 
; 520  : 			   }
; 521  : 			   NeedsToPlayWarning = FALSE;					

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1505], 0
$LN6@CautionChe:

; 522  : 		   }
; 523  : 	   }
; 524  : 	   //MI RF In SILENT gives TF FAIL
; 525  : 	   if(RFState == 2)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1520], 2
	jne	SHORT $LN3@CautionChe

; 526  : 	   {
; 527  : 		   if(!mFaults->GetFault(tf_fail))

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN2@CautionChe

; 528  : 			   mFaults->SetWarning(tf_fail);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?SetWarning@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetWarning
$LN2@CautionChe:

; 529  : 	   }
; 530  : 	   else

	jmp	SHORT $LN1@CautionChe
$LN3@CautionChe:

; 531  : 		   mFaults->ClearFault(tf_fail);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::ClearFault
$LN1@CautionChe:

; 532  :    }
; 533  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CautionCheck@AircraftClass@@QAEXXZ ENDP		; AircraftClass::CautionCheck
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\cautions.cpp
_TEXT	SEGMENT
tv64 = -8						; size = 4
_this$ = -4						; size = 4
_level$ = 8						; size = 4
?AdjustBombG@AircraftClass@@QAEXH@Z PROC		; AircraftClass::AdjustBombG
; _this$ = ecx

; 1619 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1620 : 	//adjust for OverG/Speed
; 1621 : 	switch(level)

	mov	eax, DWORD PTR _level$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN4@AdjustBomb
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN3@AdjustBomb
	cmp	DWORD PTR tv64[ebp], 3
	je	SHORT $LN2@AdjustBomb
	jmp	SHORT $LN1@AdjustBomb
$LN4@AdjustBomb:

; 1622 : 	{
; 1623 : 	case 1:
; 1624 : 		GToleranceBombs = float(OverGToleranceBombs[1]) / 10.0f;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+ecx+1576]
	divss	xmm0, DWORD PTR __real@41200000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1536], xmm0

; 1625 : 		break;

	jmp	SHORT $LN5@AdjustBomb
$LN3@AdjustBomb:

; 1626 : 	case 2:
; 1627 : 		GToleranceBombs = float(OverGToleranceBombs[2]) / 10.0f;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+ecx+1576]
	divss	xmm0, DWORD PTR __real@41200000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1536], xmm0

; 1628 : 		break;

	jmp	SHORT $LN5@AdjustBomb
$LN2@AdjustBomb:

; 1629 : 	case 3:
; 1630 : 		GToleranceBombs = 100;	//No more damage

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [ecx+1536], xmm0
$LN1@AdjustBomb:
$LN5@AdjustBomb:

; 1631 : 		break;
; 1632 : 	default:
; 1633 : 		break;
; 1634 : 	}
; 1635 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?AdjustBombG@AircraftClass@@QAEXH@Z ENDP		; AircraftClass::AdjustBombG
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\cautions.cpp
_TEXT	SEGMENT
tv64 = -8						; size = 4
_this$ = -4						; size = 4
_level$ = 8						; size = 4
?AdjustTankG@AircraftClass@@QAEXH@Z PROC		; AircraftClass::AdjustTankG
; _this$ = ecx

; 1600 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1601 : 	//adjust for OverG/Speed
; 1602 : 	switch(level)

	mov	eax, DWORD PTR _level$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN4@AdjustTank
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN3@AdjustTank
	cmp	DWORD PTR tv64[ebp], 3
	je	SHORT $LN2@AdjustTank
	jmp	SHORT $LN1@AdjustTank
$LN4@AdjustTank:

; 1603 : 	{
; 1604 : 	case 1:
; 1605 : 		GToleranceTanks = float(OverGToleranceTanks[1]) / 10.0f;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+ecx+1564]
	divss	xmm0, DWORD PTR __real@41200000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1532], xmm0

; 1606 : 		break;

	jmp	SHORT $LN5@AdjustTank
$LN3@AdjustTank:

; 1607 : 	case 2:
; 1608 : 		GToleranceTanks = float(OverGToleranceTanks[2]) / 10.0f;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+ecx+1564]
	divss	xmm0, DWORD PTR __real@41200000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1532], xmm0

; 1609 : 		break;

	jmp	SHORT $LN5@AdjustTank
$LN2@AdjustTank:

; 1610 : 	case 3:
; 1611 : 		GToleranceTanks = 100;	//No more damage

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [ecx+1532], xmm0
$LN1@AdjustTank:
$LN5@AdjustTank:

; 1612 : 		break;
; 1613 : 	default:
; 1614 : 		break;
; 1615 : 	}
; 1616 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?AdjustTankG@AircraftClass@@QAEXH@Z ENDP		; AircraftClass::AdjustTankG
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\cautions.cpp
_TEXT	SEGMENT
tv64 = -8						; size = 4
_this$ = -4						; size = 4
_level$ = 8						; size = 4
?AdjustBombSpeed@AircraftClass@@QAEXH@Z PROC		; AircraftClass::AdjustBombSpeed
; _this$ = ecx

; 1581 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1582 : 	//adjust for OverG/Speed
; 1583 : 	switch(level)

	mov	eax, DWORD PTR _level$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN4@AdjustBomb
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN3@AdjustBomb
	cmp	DWORD PTR tv64[ebp], 3
	je	SHORT $LN2@AdjustBomb
	jmp	SHORT $LN7@AdjustBomb
$LN4@AdjustBomb:

; 1584 : 	{
; 1585 : 	case 1:
; 1586 : 		SpeedToleranceBombs = OverSpeedToleranceBombs[1];

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+1552]
	mov	DWORD PTR [edx+1528], ecx

; 1587 : 		break;

	jmp	SHORT $LN7@AdjustBomb
$LN3@AdjustBomb:

; 1588 : 	case 2:
; 1589 : 		SpeedToleranceBombs = OverSpeedToleranceBombs[2];

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+edx+1552]
	mov	DWORD PTR [eax+1528], edx

; 1590 : 		break;

	jmp	SHORT $LN7@AdjustBomb
$LN2@AdjustBomb:

; 1591 : 	case 3:
; 1592 : 		SpeedToleranceBombs = 100;	//No more damage

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1528], 100		; 00000064H
$LN7@AdjustBomb:

; 1593 : 		break;
; 1594 : 	default:
; 1595 : 		break;
; 1596 : 	}
; 1597 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?AdjustBombSpeed@AircraftClass@@QAEXH@Z ENDP		; AircraftClass::AdjustBombSpeed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\cautions.cpp
_TEXT	SEGMENT
tv64 = -8						; size = 4
_this$ = -4						; size = 4
_level$ = 8						; size = 4
?AdjustTankSpeed@AircraftClass@@QAEXH@Z PROC		; AircraftClass::AdjustTankSpeed
; _this$ = ecx

; 1562 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1563 : 	//adjust for OverG/Speed
; 1564 : 	switch(level)

	mov	eax, DWORD PTR _level$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN4@AdjustTank
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN3@AdjustTank
	cmp	DWORD PTR tv64[ebp], 3
	je	SHORT $LN2@AdjustTank
	jmp	SHORT $LN7@AdjustTank
$LN4@AdjustTank:

; 1565 : 	{
; 1566 : 	case 1:
; 1567 : 		SpeedToleranceTanks = OverSpeedToleranceTanks[1];

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+1540]
	mov	DWORD PTR [edx+1524], ecx

; 1568 : 		break;

	jmp	SHORT $LN7@AdjustTank
$LN3@AdjustTank:

; 1569 : 	case 2:
; 1570 : 		SpeedToleranceTanks = OverSpeedToleranceTanks[2];

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+edx+1540]
	mov	DWORD PTR [eax+1524], edx

; 1571 : 		break;

	jmp	SHORT $LN7@AdjustTank
$LN2@AdjustTank:

; 1572 : 	case 3:
; 1573 : 		SpeedToleranceTanks = 100;	//No more damage

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1524], 100		; 00000064H
$LN7@AdjustTank:

; 1574 : 		break;
; 1575 : 	default:
; 1576 : 		break;
; 1577 : 	}
; 1578 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?AdjustTankSpeed@AircraftClass@@QAEXH@Z ENDP		; AircraftClass::AdjustTankSpeed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\cautions.cpp
_TEXT	SEGMENT
tv169 = -12						; size = 4
_v$1 = -8						; size = 4
_this$ = -4						; size = 4
?SSounds@AircraftClass@@QAEXXZ PROC			; AircraftClass::SSounds
; _this$ = ecx

; 1532 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1533 : 	if(!IsExploding() && !IsDead())

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+208]
	call	eax
	test	eax, eax
	jne	$LN1@SSounds
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+340]
	call	eax
	test	eax, eax
	jne	$LN1@SSounds

; 1534 : 	{
; 1535 : 		//F4SoundFXSetDist(af->auxaeroData->sndOverSpeed2, TRUE, 0.0f, (GetKias() - af->curMaxStoreSpeed) / 25);
; 1536 : 		if(af->curMaxStoreSpeed)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR [edx+1612]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN1@SSounds

; 1537 : 		{
; 1538 : 			float v;
; 1539 : 			
; 1540 : 			//v = k - l / (h-l)
; 1541 : 			/*
; 1542 : 			v = (GetKias() - af->curMaxStoreSpeed) / 50 ;
; 1543 : 			if(v<0) 
; 1544 : 				v=0;
; 1545 : 			else
; 1546 : 				if(v>1) 
; 1547 : 					v=1;
; 1548 : 
; 1549 : 			v=(1-v) * -2000;
; 1550 : 			*/
; 1551 : 
; 1552 : 			v = -2000;

	movss	xmm0, DWORD PTR __real@c4fa0000
	movss	DWORD PTR _v$1[ebp], xmm0

; 1553 : 			v += ( ( GetKias() - af->curMaxStoreSpeed ) / 50 ) *250 ; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+224]
	call	eax
	fstp	DWORD PTR tv169[ebp]
	movss	xmm0, DWORD PTR tv169[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	subss	xmm0, DWORD PTR [edx+1612]
	divss	xmm0, DWORD PTR __real@42480000
	mulss	xmm0, DWORD PTR __real@437a0000
	addss	xmm0, DWORD PTR _v$1[ebp]
	movss	DWORD PTR _v$1[ebp], xmm0

; 1554 : 			
; 1555 : 			//F4SoundFXSetDist(af->auxaeroData->sndOverSpeed2, TRUE, v, ( (GetKias() - af->curMaxStoreSpeed)) / 25);
; 1556 : 			SoundPos.Sfx(af->auxaeroData->sndOverSpeed2, 0, 2 , v); // MLR 5/16/2004 - 

	push	ecx
	movss	xmm0, DWORD PTR _v$1[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+2368]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMM@Z		; F4SoundPos::Sfx
$LN1@SSounds:

; 1557 : 		}
; 1558 : 	}
; 1559 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SSounds@AircraftClass@@QAEXXZ ENDP			; AircraftClass::SSounds
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\cautions.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GSounds@AircraftClass@@QAEXXZ PROC			; AircraftClass::GSounds
; _this$ = ecx

; 1521 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1522 : 	//not if we're going down
; 1523 : 	if(!IsExploding() && !IsDead())

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+208]
	call	eax
	test	eax, eax
	jne	SHORT $LN1@GSounds
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+340]
	call	eax
	test	eax, eax
	jne	SHORT $LN1@GSounds

; 1524 : 	{
; 1525 : 		//F4SoundFXSetDist(af->auxaeroData->sndOverSpeed1, TRUE, 0.0f, 1.0f);
; 1526 :        //RV - I-Hawk - Added 0, 2, -1000 parameters to lower volume for such overG sound
; 1527 : 		SoundPos.Sfx(af->auxaeroData->sndOverSpeed1, 0, 2, -1000); // MLR 5/16/2004 - 

	push	ecx
	movss	xmm0, DWORD PTR __real@c47a0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+2364]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMM@Z		; F4SoundPos::Sfx
$LN1@GSounds:

; 1528 : 	}
; 1529 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GSounds@AircraftClass@@QAEXXZ ENDP			; AircraftClass::GSounds
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\cautions.cpp
_TEXT	SEGMENT
tv1144 = -52						; size = 4
tv1135 = -48						; size = 4
tv1130 = -44						; size = 4
tv1142 = -40						; size = 4
tv1122 = -36						; size = 4
tv1117 = -32						; size = 4
tv1140 = -28						; size = 4
tv1109 = -24						; size = 4
tv1104 = -20						; size = 4
tv940 = -16						; size = 4
_theRwr$ = -12						; size = 4
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
?SetExternalData@AircraftClass@@QAEXXZ PROC		; AircraftClass::SetExternalData
; _this$ = ecx

; 1005 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 1006 : 
; 1007 : 	// MD -- 20031113: Adding support for the MAL IND button the test panel to update the
; 1008 : 	// shared memory bit preperly.  Also play the VMS in accordance with the dash one; technically
; 1009 : 	// this should mean saying each of the words once each while the button is held in the test
; 1010 : 	// position but this doesn't seem to be possible without new sounds for this purpose.
; 1011 : 	// MD -- 20031216: oops! forgot the AVTR lamp in HsiBits
; 1012 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 1013 : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN165@SetExterna

; 1014 : 		// sfr: NULL check
; 1015 : 		return;

	jmp	$LN166@SetExterna
$LN165@SetExterna:

; 1016 : 	}
; 1017 : 	if (playerAC->TestLights != NULL){

	mov	eax, DWORD PTR _playerAC$[ebp]
	movzx	ecx, BYTE PTR [eax+849]
	test	ecx, ecx
	je	SHORT $LN164@SetExterna

; 1018 : 		cockpitFlightData.lightBits  = FlightData::AllLampBitsOn;   // All current lamp related lightBits  to ON

	mov	DWORD PTR ?cockpitFlightData@@3VFlightData@@A+124, -1073741841 ; bfffffefH

; 1019 : 		cockpitFlightData.lightBits2 = FlightData::AllLampBits2On;  // All current lamp related lightBits2 to ON

	mov	DWORD PTR ?cockpitFlightData@@3VFlightData@@A+140, -4033 ; fffff03fH

; 1020 : 		cockpitFlightData.lightBits3 = FlightData::AllLampBits3On;  // All current lamp related lightBits3 to ON

	mov	DWORD PTR ?cockpitFlightData@@3VFlightData@@A+144, 520191 ; 0007efffH

; 1021 : 		cockpitFlightData.hsiBits = FlightData::AllLampHsiBitsOn;   // All current lamp related HsiBits to ON

	mov	DWORD PTR ?cockpitFlightData@@3VFlightData@@A+248, 8192 ; 00002000H

; 1022 : 		//if(!F4SoundFXPlaying(SFX_BB_ALLWORDS))
; 1023 : 		//	F4SoundFXSetDist(SFX_BB_ALLWORDS, TRUE, 0.0f, 1.0f );
; 1024 : 		SoundPos.Sfx(SFX_BB_ALLWORDS); // MLR 5/16/2004 - 

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	270					; 0000010eH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMM@Z		; F4SoundPos::Sfx

; 1025 : 		return;

	jmp	$LN166@SetExterna
$LN164@SetExterna:

; 1026 : 	}
; 1027 : 	/* // MLR 5/16/2004 - 
; 1028 : 	else {
; 1029 : 		if (F4SoundFXPlaying(SFX_BB_ALLWORDS))  // stop the littany if player lets up on the MAL/IND switch
; 1030 : 			F4StopSound(SFX_DEF[SFX_BB_ALLWORDS].handle);
; 1031 : 	}
; 1032 : 	*/
; 1033 : 
; 1034 : 	// Master Caution
; 1035 : 	//if (OTWDriver.pCockpitManager->mMiscStates.GetMasterCautionLight())
; 1036 : 	// MD -- 20031007: don't look at the cockpit art light, look at the fault state to
; 1037 : 	// determine whether to set the sh.mem value.  This makes sure that it goes on and
; 1038 : 	// off even if the lamp is not in the current field of view.
; 1039 : 	if (playerAC->mFaults->MasterCaution()){

	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?MasterCaution@FackClass@@QAEHXZ	; FackClass::MasterCaution
	test	eax, eax
	je	SHORT $LN163@SetExterna

; 1040 : 		cockpitFlightData.SetLightBit(FlightData::MasterCaution);

	push	1
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1041 : 	}
; 1042 : 	else{

	jmp	SHORT $LN162@SetExterna
$LN163@SetExterna:

; 1043 : 		cockpitFlightData.ClearLightBit(FlightData::MasterCaution);

	push	1
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN162@SetExterna:

; 1044 : 	}
; 1045 : 
; 1046 : 	// Oil Pressure
; 1047 : 	if((af->rpm * 37.0F) < 15.0F || mFaults->GetFault(FaultClass::eng_fault))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR [ecx+1212]
	mulss	xmm0, DWORD PTR __real@42140000
	movss	xmm1, DWORD PTR __real@41700000
	comiss	xmm1, xmm0
	ja	SHORT $LN160@SetExterna
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN161@SetExterna
$LN160@SetExterna:

; 1048 : 		cockpitFlightData.SetLightBit(FlightData::OIL);

	push	256					; 00000100H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1049 : 	else

	jmp	SHORT $LN159@SetExterna
$LN161@SetExterna:

; 1050 : 		cockpitFlightData.ClearLightBit(FlightData::OIL);

	push	256					; 00000100H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN159@SetExterna:

; 1051 : 
; 1052 : 	if(!af->HydraulicOK() && (!(((AircraftClass*)(playerAC))->MainPower() == AircraftClass::MainPowerOff)))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?HydraulicOK@AirframeClass@@QAEHXZ	; AirframeClass::HydraulicOK
	test	eax, eax
	jne	SHORT $LN158@SetExterna
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?MainPower@AircraftClass@@QAE?AW4MainPowerType@1@XZ ; AircraftClass::MainPower
	test	eax, eax
	je	SHORT $LN158@SetExterna

; 1053 : 		cockpitFlightData.SetLightBit(FlightData::HYD);

	push	128					; 00000080H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1054 : 	else

	jmp	SHORT $LN157@SetExterna
$LN158@SetExterna:

; 1055 : 		cockpitFlightData.ClearLightBit(FlightData::HYD);

	push	128					; 00000080H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN157@SetExterna:

; 1056 : 
; 1057 : 	// Cabin Pressure
; 1058 : 	if(ZPos() < 27000.0F && mFaults->GetFault(FaultClass::eng_fault))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv940[ebp]
	movss	xmm0, DWORD PTR __real@46d2f000
	comiss	xmm0, DWORD PTR tv940[ebp]
	jbe	SHORT $LN156@SetExterna
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN156@SetExterna

; 1059 : 		cockpitFlightData.SetLightBit(FlightData::CabinPress);

	push	536870912				; 20000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1060 : 	else

	jmp	SHORT $LN155@SetExterna
$LN156@SetExterna:

; 1061 : 		cockpitFlightData.ClearLightBit(FlightData::CabinPress);

	push	536870912				; 20000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN155@SetExterna:

; 1062 : 
; 1063 : 	// Canopy Light
; 1064 : 	if(mFaults->GetFault(FaultClass::hud_fault) && mFaults->GetFault(FaultClass::fcc_fault))

	push	18					; 00000012H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN154@SetExterna
	push	11					; 0000000bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN154@SetExterna

; 1065 : 		cockpitFlightData.SetLightBit(FlightData::CAN);

	push	1024					; 00000400H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1066 : 	else

	jmp	SHORT $LN153@SetExterna
$LN154@SetExterna:

; 1067 : 		cockpitFlightData.ClearLightBit(FlightData::CAN);

	push	1024					; 00000400H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN153@SetExterna:

; 1068 : 
; 1069 : 	// FLCS
; 1070 : 	if(mFaults->GetFault(FaultClass::fcc_fault))

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN152@SetExterna

; 1071 : 		cockpitFlightData.SetLightBit(FlightData::DUAL);

	push	512					; 00000200H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1072 : 	else

	jmp	SHORT $LN151@SetExterna
$LN152@SetExterna:

; 1073 : 		cockpitFlightData.ClearLightBit(FlightData::DUAL);

	push	512					; 00000200H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN151@SetExterna:

; 1074 : 
; 1075 : 	// Avioncs Caution
; 1076 : 	if(!g_bRealisticAvionics)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	jne	SHORT $LN150@SetExterna

; 1077 : 	{
; 1078 : 		if(mFaults->GetFault(FaultClass::amux_fault) || mFaults->GetFault(FaultClass::bmux_fault))

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN148@SetExterna
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN149@SetExterna
$LN148@SetExterna:

; 1079 : 			cockpitFlightData.SetLightBit(FlightData::Avionics);

	push	8388608					; 00800000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1080 : 		else

	jmp	SHORT $LN147@SetExterna
$LN149@SetExterna:

; 1081 : 			cockpitFlightData.ClearLightBit(FlightData::Avionics);

	push	8388608					; 00800000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN147@SetExterna:

; 1082 : 	}
; 1083 : 	else

	jmp	SHORT $LN144@SetExterna
$LN150@SetExterna:

; 1084 : 	{
; 1085 : 		if(mFaults->NeedAckAvioncFault)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+928]
	cmp	DWORD PTR [eax+560], 0
	je	SHORT $LN145@SetExterna

; 1086 : 			cockpitFlightData.SetLightBit(FlightData::Avionics);

	push	8388608					; 00800000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1087 : 		else

	jmp	SHORT $LN144@SetExterna
$LN145@SetExterna:

; 1088 : 			cockpitFlightData.ClearLightBit(FlightData::Avionics);

	push	8388608					; 00800000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN144@SetExterna:

; 1089 : 	}
; 1090 : 
; 1091 : 	// Radar altimeter
; 1092 : 	if(mFaults->GetFault(radar_alt_fault))

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN143@SetExterna

; 1093 : 		cockpitFlightData.SetLightBit(FlightData::RadarAlt);

	push	16777216				; 01000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1094 : 	else

	jmp	SHORT $LN142@SetExterna
$LN143@SetExterna:

; 1095 : 		cockpitFlightData.ClearLightBit(FlightData::RadarAlt);

	push	16777216				; 01000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN142@SetExterna:

; 1096 : 
; 1097 : 	// IFF Fault
; 1098 : 	if(mFaults->GetFault(FaultClass::iff_fault))

	push	19					; 00000013H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN141@SetExterna

; 1099 : 		cockpitFlightData.SetLightBit(FlightData::IFF);

	push	33554432				; 02000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1100 : 	else

	jmp	SHORT $LN140@SetExterna
$LN141@SetExterna:

; 1101 : 		cockpitFlightData.ClearLightBit(FlightData::IFF);

	push	33554432				; 02000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN140@SetExterna:

; 1102 : 	
; 1103 : 	// AOA Indicator lights
; 1104 : 	if(cockpitFlightData.alpha >= 14.0F)	   

	movss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+24
	comiss	xmm0, DWORD PTR __real@41600000
	jb	SHORT $LN139@SetExterna

; 1105 : 	{
; 1106 : 		cockpitFlightData.SetLightBit(FlightData::AOAAbove);

	push	4096					; 00001000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1107 : 		cockpitFlightData.ClearLightBit(FlightData::AOAOn);

	push	8192					; 00002000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit

; 1108 : 		cockpitFlightData.ClearLightBit(FlightData::AOABelow);

	push	16384					; 00004000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
	jmp	SHORT $LN136@SetExterna
$LN139@SetExterna:

; 1109 : 	}
; 1110 : 	else if((cockpitFlightData.alpha < 14.0F) && (cockpitFlightData.alpha >= 11.5F))

	movss	xmm0, DWORD PTR __real@41600000
	comiss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+24
	jbe	SHORT $LN137@SetExterna
	movss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+24
	comiss	xmm0, DWORD PTR __real@41380000
	jb	SHORT $LN137@SetExterna

; 1111 : 	{
; 1112 : 		cockpitFlightData.ClearLightBit(FlightData::AOAAbove);

	push	4096					; 00001000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit

; 1113 : 		cockpitFlightData.SetLightBit(FlightData::AOAOn);

	push	8192					; 00002000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1114 : 		cockpitFlightData.ClearLightBit(FlightData::AOABelow);

	push	16384					; 00004000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit

; 1115 : 	}
; 1116 : 	else

	jmp	SHORT $LN136@SetExterna
$LN137@SetExterna:

; 1117 : 	{
; 1118 : 		cockpitFlightData.ClearLightBit(FlightData::AOAAbove);

	push	4096					; 00001000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit

; 1119 : 		cockpitFlightData.ClearLightBit(FlightData::AOAOn);

	push	8192					; 00002000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit

; 1120 : 		cockpitFlightData.SetLightBit(FlightData::AOABelow);

	push	16384					; 00004000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit
$LN136@SetExterna:

; 1121 : 	}
; 1122 : 	//Commented out by JPG - 1/1/04 - The AoA indexer is operational regardless of the gear being up
; 1123 : 	// or down - per the -1
; 1124 : 	//MI only operational with gear down
; 1125 : 	/*if(g_bRealisticAvionics && af && af->gearPos < 0.8F)
; 1126 : 	{
; 1127 : 		cockpitFlightData.ClearLightBit(FlightData::AOAOn);
; 1128 : 		cockpitFlightData.ClearLightBit(FlightData::AOABelow);
; 1129 : 		cockpitFlightData.ClearLightBit(FlightData::AOAAbove);
; 1130 : 	}*/
; 1131 : 	
; 1132 : 	// Nose Wheel Steering
; 1133 : 	// MD -- 20031215: this was pretty broken in that it only recorded what happens to
; 1134 : 	// the NWS function.  Adding refueling status indications now.
; 1135 : 
; 1136 : 	// For 3 seconds after disconnect the DISC light comes on
; 1137 : 	// cross reference to cblights.cpp where this check used to be
; 1138 : 	// This is probably not a great place for this but it should at
; 1139 : 	// least work properly.  Leaving this over in cblights would mean that
; 1140 : 	// the timecheck would only be preformed if the lamp is on the screen.
; 1141 : 
; 1142 : 	if(OTWDriver.pCockpitManager->mMiscStates.mRefuelState == 3 && (vuxGameTime > (OTWDriver.pCockpitManager->mMiscStates.mRefuelTimer + 3000))) {

	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	cmp	DWORD PTR [eax+308], 3
	jne	SHORT $LN135@SetExterna
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	edx, DWORD PTR [ecx+312]
	add	edx, 3000				; 00000bb8H
	cmp	DWORD PTR ?vuxGameTime@@3KA, edx	; vuxGameTime
	jbe	SHORT $LN135@SetExterna

; 1143 : 		OTWDriver.pCockpitManager->mMiscStates.SetRefuelState(0);

	push	0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	add	ecx, 284				; 0000011cH
	call	?SetRefuelState@CPMisc@@QAEXH@Z		; CPMisc::SetRefuelState
$LN135@SetExterna:

; 1144 : 	}
; 1145 : 
; 1146 : 	if(playerAC->af->IsSet(AirframeClass::NoseSteerOn) ||
; 1147 : 		(OTWDriver.pCockpitManager->mMiscStates.mRefuelState == 2))  // contact

	push	4194304					; 00400000H
	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	SHORT $LN133@SetExterna
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	cmp	DWORD PTR [ecx+308], 2
	jne	SHORT $LN134@SetExterna
$LN133@SetExterna:

; 1148 : 		cockpitFlightData.SetLightBit(FlightData::RefuelAR);

	push	65536					; 00010000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1149 : 	else

	jmp	SHORT $LN132@SetExterna
$LN134@SetExterna:

; 1150 : 		cockpitFlightData.ClearLightBit(FlightData::RefuelAR);

	push	65536					; 00010000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN132@SetExterna:

; 1151 : 
; 1152 : 	if (playerAC->af->IsEngineFlag(AirframeClass::FuelDoorOpen) &&
; 1153 : 		(OTWDriver.pCockpitManager->mMiscStates.mRefuelState <= 1))  // ready to refuel

	push	4
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+932]
	call	?IsEngineFlag@AirframeClass@@QAEHW4EngineFlags@1@@Z ; AirframeClass::IsEngineFlag
	test	eax, eax
	je	SHORT $LN131@SetExterna
	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	cmp	DWORD PTR [eax+308], 1
	jg	SHORT $LN131@SetExterna

; 1154 : 		cockpitFlightData.SetLightBit(FlightData::RefuelRDY);

	push	32768					; 00008000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1155 : 	else

	jmp	SHORT $LN130@SetExterna
$LN131@SetExterna:

; 1156 : 		cockpitFlightData.ClearLightBit(FlightData::RefuelRDY);

	push	32768					; 00008000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN130@SetExterna:

; 1157 : 
; 1158 : 	if (OTWDriver.pCockpitManager->mMiscStates.mRefuelState == 3)

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	cmp	DWORD PTR [ecx+308], 3
	jne	SHORT $LN129@SetExterna

; 1159 : 		cockpitFlightData.SetLightBit(FlightData::RefuelDSC);

	push	131072					; 00020000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1160 : 	else

	jmp	SHORT $LN128@SetExterna
$LN129@SetExterna:

; 1161 : 		cockpitFlightData.ClearLightBit(FlightData::RefuelDSC);

	push	131072					; 00020000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN128@SetExterna:

; 1162 : 
; 1163 : 
; 1164 : 	// FLCS
; 1165 : 	if(mFaults->GetFault(FaultClass::flcs_fault))

	push	13					; 0000000dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN127@SetExterna

; 1166 : 		cockpitFlightData.SetLightBit(FlightData::FltControlSys);

	push	262144					; 00040000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1167 : 	else

	jmp	SHORT $LN126@SetExterna
$LN127@SetExterna:

; 1168 : 		cockpitFlightData.ClearLightBit(FlightData::FltControlSys);

	push	262144					; 00040000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN126@SetExterna:

; 1169 : 
; 1170 : 	// Engine Fault
; 1171 : 	if (mFaults->GetFault(FaultClass::eng_fault))

	push	8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN125@SetExterna

; 1172 : 		cockpitFlightData.SetLightBit(FlightData::EngineFault);

	push	1048576					; 00100000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1173 : 	else

	jmp	SHORT $LN124@SetExterna
$LN125@SetExterna:

; 1174 : 		cockpitFlightData.ClearLightBit(FlightData::EngineFault);

	push	1048576					; 00100000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN124@SetExterna:

; 1175 : 
; 1176 : 	// Overheat Fault
; 1177 : 	if (mFaults->GetFault(FaultClass::eng_fault) && af->rpm <= 0.75)

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN123@SetExterna
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	cvtss2sd xmm0, DWORD PTR [eax+1212]
	movsd	xmm1, QWORD PTR __real@3fe8000000000000
	comisd	xmm1, xmm0
	jb	SHORT $LN123@SetExterna

; 1178 : 		cockpitFlightData.SetLightBit(FlightData::Overheat);

	push	2097152					; 00200000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1179 : 	else

	jmp	SHORT $LN122@SetExterna
$LN123@SetExterna:

; 1180 : 		cockpitFlightData.ClearLightBit(FlightData::Overheat);

	push	2097152					; 00200000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN122@SetExterna:

; 1181 : 	
; 1182 : 	// These are not faults, they are cautions
; 1183 : 	if (mFaults->GetFault(FaultClass::eng_fault) & FaultClass::efire)

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	and	eax, 16384				; 00004000H
	je	SHORT $LN121@SetExterna

; 1184 : 		cockpitFlightData.SetLightBit(FlightData::ENG_FIRE);

	push	32					; 00000020H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1185 : 	else

	jmp	SHORT $LN120@SetExterna
$LN121@SetExterna:

; 1186 : 		cockpitFlightData.ClearLightBit(FlightData::ENG_FIRE);

	push	32					; 00000020H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN120@SetExterna:

; 1187 : 
; 1188 : 	// TJL 01/24/04 multi-engine
; 1189 : 		// These are not faults, they are cautions
; 1190 : 	if (mFaults->GetFault(FaultClass::eng2_fault) & FaultClass::efire)

	push	9
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	and	eax, 16384				; 00004000H
	je	SHORT $LN119@SetExterna

; 1191 : 		cockpitFlightData.SetLightBit3(FlightData::Eng2_Fire);

	push	8192					; 00002000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit3@FlightData@@QAEXH@Z	; FlightData::SetLightBit3

; 1192 : 	else

	jmp	SHORT $LN118@SetExterna
$LN119@SetExterna:

; 1193 : 		cockpitFlightData.ClearLightBit3(FlightData::Eng2_Fire);

	push	8192					; 00002000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit3@FlightData@@QAEXH@Z	; FlightData::ClearLightBit3
$LN118@SetExterna:

; 1194 : 
; 1195 : 	//MI
; 1196 : 	if(mFaults->GetFault(stores_config_fault))

	push	28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN117@SetExterna

; 1197 : 		cockpitFlightData.SetLightBit(FlightData::CONFIG);

	push	64					; 00000040H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1198 : 	else

	jmp	SHORT $LN116@SetExterna
$LN117@SetExterna:

; 1199 : 		cockpitFlightData.ClearLightBit(FlightData::CONFIG);

	push	64					; 00000040H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN116@SetExterna:

; 1200 : 
; 1201 : 	// Caution TO/LDG Config		
; 1202 : 	// MD -- 20031120: replace test with fault check
; 1203 : 	if (mFaults->GetFault(to_ldg_config))

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN115@SetExterna

; 1204 : 		cockpitFlightData.SetLightBit(FlightData::T_L_CFG);

	push	2048					; 00000800H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1205 : 	else

	jmp	SHORT $LN114@SetExterna
$LN115@SetExterna:

; 1206 : 		cockpitFlightData.ClearLightBit(FlightData::T_L_CFG);

	push	2048					; 00000800H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN114@SetExterna:

; 1207 : 
; 1208 : 	if(mFaults->GetFault(nws_fault))

	push	19					; 00000013H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN113@SetExterna

; 1209 : 		cockpitFlightData.SetLightBit(FlightData::NWSFail);

	push	268435456				; 10000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1210 : 	else

	jmp	SHORT $LN112@SetExterna
$LN113@SetExterna:

; 1211 : 		cockpitFlightData.ClearLightBit(FlightData::NWSFail);

	push	268435456				; 10000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN112@SetExterna:

; 1212 : 
; 1213 : 	if(mFaults->GetFault(cabin_press_fault))

	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN111@SetExterna

; 1214 : 		cockpitFlightData.SetLightBit(FlightData::CabinPress);

	push	536870912				; 20000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1215 : 	else

	jmp	SHORT $LN110@SetExterna
$LN111@SetExterna:

; 1216 : 		cockpitFlightData.ClearLightBit(FlightData::CabinPress);

	push	536870912				; 20000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN110@SetExterna:

; 1217 : 
; 1218 : 	// MD -- 20031101: Adding a check for Weight on Wheels.  If the a/c is on the ground
; 1219 : 	// and the gear is down and there are no gear faults WoW switch is "on"
; 1220 : 	// this is not used elsewhere in the game but several places do use the OnGround() routine
; 1221 : 	// to implement correct WoW behavior.
; 1222 : 	if(playerAC->OnGround() && (af->gearPos == 1.0F) &&
; 1223 : 		(!playerAC->mFaults->GetFault(FaultClass::gear_fault)))

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	je	SHORT $LN109@SetExterna
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR [edx+1552]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN109@SetExterna
	push	15					; 0000000fH
	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN109@SetExterna

; 1224 : 		cockpitFlightData.SetLightBit(FlightData::WOW);

	push	16					; 00000010H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1225 : 	else

	jmp	SHORT $LN108@SetExterna
$LN109@SetExterna:

; 1226 : 		cockpitFlightData.ClearLightBit(FlightData::WOW);

	push	16					; 00000010H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN108@SetExterna:

; 1227 : 
; 1228 : 	// MD -- 20031125: adding a bit to show if the autopilot is engaged or not.  This will be
; 1229 : 	// useful for cockpit builders that implement the rightmost AP switch with the same kind of
; 1230 : 	// switch that is used in the F-16: a three place momentary that has the off-center positions
; 1231 : 	// magnetically captured to hold the swithc out of the off position while the AP is functioning
; 1232 : 	// within its operating limits.  Use this bit to turn on the solenoid if your switch has one!
; 1233 : 
; 1234 : 	if((playerAC->IsOn(AircraftClass::AttHold)) || (playerAC->IsOn(AircraftClass::AltHold)))

	push	2
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?IsOn@AircraftClass@@QAEHW4APFlags@1@@Z	; AircraftClass::IsOn
	test	eax, eax
	jne	SHORT $LN106@SetExterna
	push	1
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?IsOn@AircraftClass@@QAEHW4APFlags@1@@Z	; AircraftClass::IsOn
	test	eax, eax
	je	SHORT $LN107@SetExterna
$LN106@SetExterna:

; 1235 : 		cockpitFlightData.SetLightBit(FlightData::AutoPilotOn);

	push	1073741824				; 40000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1236 : 	else

	jmp	SHORT $LN105@SetExterna
$LN107@SetExterna:

; 1237 : 		cockpitFlightData.ClearLightBit(FlightData::AutoPilotOn);

	push	1073741824				; 40000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN105@SetExterna:

; 1238 : 
; 1239 : 	if(mFaults->GetFault(oxy_low_fault))

	push	21					; 00000015H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN104@SetExterna

; 1240 : 		cockpitFlightData.SetLightBit2(FlightData::OXY_LOW);

	push	8388608					; 00800000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1241 : 	else

	jmp	SHORT $LN103@SetExterna
$LN104@SetExterna:

; 1242 : 		cockpitFlightData.ClearLightBit2(FlightData::OXY_LOW);

	push	8388608					; 00800000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN103@SetExterna:

; 1243 : 
; 1244 : 	if(mFaults->GetFault(fwd_fuel_low_fault))

	push	22					; 00000016H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN102@SetExterna

; 1245 : 		cockpitFlightData.SetLightBit2(FlightData::FwdFuelLow);

	push	262144					; 00040000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1246 : 	else

	jmp	SHORT $LN101@SetExterna
$LN102@SetExterna:

; 1247 : 		cockpitFlightData.ClearLightBit2(FlightData::FwdFuelLow);

	push	262144					; 00040000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN101@SetExterna:

; 1248 : 	
; 1249 : 	if(mFaults->GetFault(aft_fuel_low_fault))

	push	23					; 00000017H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN100@SetExterna

; 1250 : 		cockpitFlightData.SetLightBit2(FlightData::AftFuelLow);

	push	524288					; 00080000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1251 : 	else

	jmp	SHORT $LN99@SetExterna
$LN100@SetExterna:

; 1252 : 		cockpitFlightData.ClearLightBit2(FlightData::AftFuelLow);

	push	524288					; 00080000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN99@SetExterna:

; 1253 : 
; 1254 : 	if(mFaults->GetFault(sec_fault))

	push	26					; 0000001aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN98@SetExterna

; 1255 : 		cockpitFlightData.SetLightBit2(FlightData::SEC);

	push	4194304					; 00400000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1256 : 	else

	jmp	SHORT $LN97@SetExterna
$LN98@SetExterna:

; 1257 : 		cockpitFlightData.ClearLightBit2(FlightData::SEC);

	push	4194304					; 00400000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN97@SetExterna:

; 1258 : 
; 1259 : 	if(mFaults->GetFault(probeheat_fault))

	push	27					; 0000001bH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN96@SetExterna

; 1260 : 		cockpitFlightData.SetLightBit2(FlightData::PROBEHEAT);

	push	16777216				; 01000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1261 : 	else

	jmp	SHORT $LN95@SetExterna
$LN96@SetExterna:

; 1262 : 		cockpitFlightData.ClearLightBit2(FlightData::PROBEHEAT);

	push	16777216				; 01000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN95@SetExterna:

; 1263 : 	
; 1264 : 	if(mFaults->GetFault(buc_fault))

	push	29					; 0000001dH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN94@SetExterna

; 1265 : 		cockpitFlightData.SetLightBit2(FlightData::BUC);

	push	67108864				; 04000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1266 : 	else

	jmp	SHORT $LN93@SetExterna
$LN94@SetExterna:

; 1267 : 		cockpitFlightData.ClearLightBit2(FlightData::BUC);

	push	67108864				; 04000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN93@SetExterna:

; 1268 : 	
; 1269 : 	if(mFaults->GetFault(fueloil_hot_fault))

	push	30					; 0000001eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN92@SetExterna

; 1270 : 		cockpitFlightData.SetLightBit2(FlightData::FUEL_OIL_HOT);

	push	134217728				; 08000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1271 : 	else

	jmp	SHORT $LN91@SetExterna
$LN92@SetExterna:

; 1272 : 		cockpitFlightData.ClearLightBit2(FlightData::FUEL_OIL_HOT);

	push	134217728				; 08000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN91@SetExterna:

; 1273 : 			
; 1274 : 	if(mFaults->GetFault(anti_skid_fault))

	push	31					; 0000001fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN90@SetExterna

; 1275 : 		cockpitFlightData.SetLightBit2(FlightData::ANTI_SKID);

	push	268435456				; 10000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1276 : 	else

	jmp	SHORT $LN89@SetExterna
$LN90@SetExterna:

; 1277 : 		cockpitFlightData.ClearLightBit2(FlightData::ANTI_SKID);

	push	268435456				; 10000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN89@SetExterna:

; 1278 : 
; 1279 : 	if(mFaults->GetFault(seat_notarmed_fault))

	push	32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN88@SetExterna

; 1280 : 		cockpitFlightData.SetLightBit2(FlightData::SEAT_ARM);

	push	33554432				; 02000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1281 : 	else

	jmp	SHORT $LN87@SetExterna
$LN88@SetExterna:

; 1282 : 		cockpitFlightData.ClearLightBit2(FlightData::SEAT_ARM);

	push	33554432				; 02000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN87@SetExterna:

; 1283 : 
; 1284 : 	// MD -- 20031011: Moved all the SetLightBit2() calls from cblights.cpp to here
; 1285 : 	// which will ensure the bits in the flightData structure are consistent with the
; 1286 : 	// state of the jet regardless of the OTW view state.
; 1287 : 
; 1288 : 	if (playerAC->IsSetFlag(ECM_ON))

	push	2
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN86@SetExterna

; 1289 : 		cockpitFlightData.SetLightBit2(FlightData::EcmPwr);

	push	65536					; 00010000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1290 : 	else 

	jmp	SHORT $LN85@SetExterna
$LN86@SetExterna:

; 1291 : 		cockpitFlightData.ClearLightBit2(FlightData::EcmPwr);

	push	65536					; 00010000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN85@SetExterna:

; 1292 : 
; 1293 : 	if (playerAC->mFaults->GetFault(FaultClass::epod_fault) ||
; 1294 : 			playerAC->mFaults->GetFault(FaultClass::blkr_fault))

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN83@SetExterna
	push	1
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN84@SetExterna
$LN83@SetExterna:

; 1295 : 		cockpitFlightData.SetLightBit2(FlightData::EcmFail);

	push	131072					; 00020000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1296 : 	else 

	jmp	SHORT $LN82@SetExterna
$LN84@SetExterna:

; 1297 : 		cockpitFlightData.ClearLightBit2(FlightData::EcmFail);

	push	131072					; 00020000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN82@SetExterna:

; 1298 : 
; 1299 : 	PlayerRwrClass* theRwr = (PlayerRwrClass*)FindSensor(playerAC, SensorClass::RWR);

	push	2
	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRwr$[ebp], eax

; 1300 : 
; 1301 : 	if(theRwr) // MLR Somewhere inside here crashed.

	cmp	DWORD PTR _theRwr$[ebp], 0
	je	$LN61@SetExterna

; 1302 : 	{
; 1303 : 		if (theRwr->HasActivity())

	mov	ecx, DWORD PTR _theRwr$[ebp]
	call	?HasActivity@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::HasActivity
	test	eax, eax
	je	SHORT $LN80@SetExterna

; 1304 : 			cockpitFlightData.SetLightBit2(FlightData::AuxAct);

	push	8192					; 00002000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1305 : 		else 

	jmp	SHORT $LN79@SetExterna
$LN80@SetExterna:

; 1306 : 			cockpitFlightData.ClearLightBit2(FlightData::AuxAct);

	push	8192					; 00002000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN79@SetExterna:

; 1307 : 
; 1308 : 		if (theRwr->LaunchIndication())

	mov	ecx, DWORD PTR _theRwr$[ebp]
	call	?LaunchIndication@PlayerRwrClass@@QAEHXZ ; PlayerRwrClass::LaunchIndication
	test	eax, eax
	je	SHORT $LN78@SetExterna

; 1309 : 			cockpitFlightData.SetLightBit2(FlightData::Launch);

	push	2
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1310 : 		else 

	jmp	SHORT $LN77@SetExterna
$LN78@SetExterna:

; 1311 : 			cockpitFlightData.ClearLightBit2(FlightData::Launch);

	push	2
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN77@SetExterna:

; 1312 : 
; 1313 : 		if (theRwr->ManualSelect())

	mov	ecx, DWORD PTR _theRwr$[ebp]
	call	?ManualSelect@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::ManualSelect
	test	eax, eax
	je	SHORT $LN76@SetExterna

; 1314 : 			cockpitFlightData.SetLightBit2(FlightData::HandOff);

	push	1
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1315 : 		else 

	jmp	SHORT $LN75@SetExterna
$LN76@SetExterna:

; 1316 : 			cockpitFlightData.ClearLightBit2(FlightData::HandOff);

	push	1
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN75@SetExterna:

; 1317 : 
; 1318 : 		if (theRwr->IsPriority())

	mov	ecx, DWORD PTR _theRwr$[ebp]
	call	?IsPriority@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::IsPriority
	test	eax, eax
	je	SHORT $LN74@SetExterna

; 1319 : 			cockpitFlightData.SetLightBit2(FlightData::PriMode);

	push	4
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1320 : 		else 

	jmp	SHORT $LN73@SetExterna
$LN74@SetExterna:

; 1321 : 			cockpitFlightData.ClearLightBit2(FlightData::PriMode);

	push	4
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN73@SetExterna:

; 1322 : 
; 1323 : 		if (theRwr->LightUnknowns())

	mov	ecx, DWORD PTR _theRwr$[ebp]
	call	?LightUnknowns@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::LightUnknowns
	test	eax, eax
	je	SHORT $LN72@SetExterna

; 1324 : 			cockpitFlightData.SetLightBit2(FlightData::Unk);

	push	16					; 00000010H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1325 : 		else 

	jmp	SHORT $LN71@SetExterna
$LN72@SetExterna:

; 1326 : 			cockpitFlightData.ClearLightBit2(FlightData::Unk);

	push	16					; 00000010H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN71@SetExterna:

; 1327 : 
; 1328 : 		if (theRwr->ShowNaval())

	mov	ecx, DWORD PTR _theRwr$[ebp]
	call	?ShowNaval@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::ShowNaval
	test	eax, eax
	je	SHORT $LN70@SetExterna

; 1329 : 			cockpitFlightData.SetLightBit2(FlightData::Naval);

	push	8
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1330 : 		else 

	jmp	SHORT $LN69@SetExterna
$LN70@SetExterna:

; 1331 : 			cockpitFlightData.ClearLightBit2(FlightData::Naval);

	push	8
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN69@SetExterna:

; 1332 : 
; 1333 : 		if (theRwr->TargetSep())

	mov	ecx, DWORD PTR _theRwr$[ebp]
	call	?TargetSep@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::TargetSep
	test	eax, eax
	je	SHORT $LN68@SetExterna

; 1334 : 			cockpitFlightData.SetLightBit2(FlightData::TgtSep);

	push	32					; 00000020H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1335 : 		else 

	jmp	SHORT $LN67@SetExterna
$LN68@SetExterna:

; 1336 : 			cockpitFlightData.ClearLightBit2(FlightData::TgtSep);

	push	32					; 00000020H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN67@SetExterna:

; 1337 : 
; 1338 : 		if (theRwr->LightSearch())

	mov	ecx, DWORD PTR _theRwr$[ebp]
	call	?LightSearch@PlayerRwrClass@@QAEHXZ	; PlayerRwrClass::LightSearch
	test	eax, eax
	je	SHORT $LN66@SetExterna

; 1339 : 			cockpitFlightData.SetLightBit2(FlightData::AuxSrch);

	push	4096					; 00001000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1340 : 		else 

	jmp	SHORT $LN65@SetExterna
$LN66@SetExterna:

; 1341 : 			cockpitFlightData.ClearLightBit2(FlightData::AuxSrch);

	push	4096					; 00001000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN65@SetExterna:

; 1342 : 
; 1343 : 		if (theRwr->LowAltPriority())

	mov	ecx, DWORD PTR _theRwr$[ebp]
	call	?LowAltPriority@VehRwrClass@@QAEHXZ	; VehRwrClass::LowAltPriority
	test	eax, eax
	je	SHORT $LN64@SetExterna

; 1344 : 			cockpitFlightData.SetLightBit2(FlightData::AuxLow);

	push	16384					; 00004000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1345 : 		else 

	jmp	SHORT $LN63@SetExterna
$LN64@SetExterna:

; 1346 : 			cockpitFlightData.ClearLightBit2(FlightData::AuxLow);

	push	16384					; 00004000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN63@SetExterna:

; 1347 : 
; 1348 : 		if (theRwr->IsOn())

	mov	ecx, DWORD PTR _theRwr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theRwr$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	test	eax, eax
	je	SHORT $LN62@SetExterna

; 1349 : 			cockpitFlightData.SetLightBit2(FlightData::AuxPwr);

	push	32768					; 00008000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1350 : 		else 

	jmp	SHORT $LN61@SetExterna
$LN62@SetExterna:

; 1351 : 			cockpitFlightData.ClearLightBit2(FlightData::AuxPwr);

	push	32768					; 00008000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN61@SetExterna:

; 1352 : 	}
; 1353 : 
; 1354 : 	if(((AircraftClass*)(playerAC))->AutopilotType() == AircraftClass::LantirnAP)

	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
	cmp	eax, 3
	jne	SHORT $LN60@SetExterna

; 1355 : 		cockpitFlightData.SetLightBit2(FlightData::TFR_ENGAGED);

	push	536870912				; 20000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1356 : 	else

	jmp	SHORT $LN59@SetExterna
$LN60@SetExterna:

; 1357 : 		cockpitFlightData.ClearLightBit2(FlightData::TFR_ENGAGED);

	push	536870912				; 20000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN59@SetExterna:

; 1358 : 
; 1359 : 	// MD -- 20031207: This isn't exactly how the STBY light works in the real thing but given that the
; 1360 : 	// LANTIRN implementation isn't complete and blended TF/AP pitch mode isn't implemented, this will
; 1361 : 	// have to do for now.
; 1362 : 	// Lamp should be on if the TFR mode is standby or if the AP Override is being held during TFR operation.
; 1363 : 
; 1364 : 	if ((theLantirn && (theLantirn->GetTFRMode() == LantirnClass::TFR_STBY)) ||
; 1365 : 		((playerAC->lastapType == AircraftClass::LantirnAP) && playerAC->IsOn(AircraftClass::Override)))

	cmp	DWORD PTR ?theLantirn@@3PAVLantirnClass@@A, 0 ; theLantirn
	je	SHORT $LN56@SetExterna
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetTFRMode@LantirnClass@@QAE?AW4TfrMode@1@XZ ; LantirnClass::GetTFRMode
	cmp	eax, 3
	je	SHORT $LN57@SetExterna
$LN56@SetExterna:
	mov	ecx, DWORD PTR _playerAC$[ebp]
	cmp	DWORD PTR [ecx+972], 3
	jne	SHORT $LN58@SetExterna
	push	32					; 00000020H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?IsOn@AircraftClass@@QAEHW4APFlags@1@@Z	; AircraftClass::IsOn
	test	eax, eax
	je	SHORT $LN58@SetExterna
$LN57@SetExterna:

; 1366 : 		cockpitFlightData.SetLightBit(FlightData::TFR_STBY);

	push	-2147483648				; 80000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1367 : 	else 

	jmp	SHORT $LN55@SetExterna
$LN58@SetExterna:

; 1368 : 		cockpitFlightData.ClearLightBit(FlightData::TFR_STBY);

	push	-2147483648				; 80000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN55@SetExterna:

; 1369 : 	
; 1370 : 	// MD -- 20031011: this is a different logic flow that is used when looking at the cockpit
; 1371 : 	// because here we only care about the lamp state not where the handle is (up/down)
; 1372 : 	if (playerAC->mFaults->GetFault(FaultClass::gear_fault) ||
; 1373 : 			(playerAC->mFaults->GetFault(to_ldg_config) && playerAC->af->gearPos == 0.0F) ||
; 1374 : 			((playerAC->af->gearPos != 0.0F) && (playerAC->af->gearPos != 1.0F)))

	push	15					; 0000000fH
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN53@SetExterna
	push	9
	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN52@SetExterna
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR [edx+1552]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN53@SetExterna
$LN52@SetExterna:
	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR [ecx+1552]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN54@SetExterna
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR [eax+1552]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN54@SetExterna
$LN53@SetExterna:

; 1375 : 		cockpitFlightData.SetLightBit2(FlightData::GEARHANDLE);

	push	1073741824				; 40000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1376 : 	else 

	jmp	SHORT $LN51@SetExterna
$LN54@SetExterna:

; 1377 : 		cockpitFlightData.ClearLightBit2(FlightData::GEARHANDLE);

	push	1073741824				; 40000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN51@SetExterna:

; 1378 : 	// MD -- 20021011: end of lightBits2 fixes
; 1379 : 
; 1380 : 	if(af->EpuIsAir())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	call	?EpuIsAir@AirframeClass@@QAEHXZ		; AirframeClass::EpuIsAir
	test	eax, eax
	je	SHORT $LN50@SetExterna

; 1381 : 		cockpitFlightData.SetLightBit3(FlightData::Air);

	push	512					; 00000200H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit3@FlightData@@QAEXH@Z	; FlightData::SetLightBit3

; 1382 : 	else

	jmp	SHORT $LN49@SetExterna
$LN50@SetExterna:

; 1383 : 		cockpitFlightData.ClearLightBit3(FlightData::Air);

	push	512					; 00000200H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit3@FlightData@@QAEXH@Z	; FlightData::ClearLightBit3
$LN49@SetExterna:

; 1384 : 
; 1385 : 	if(af->EpuIsHydrazine())

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+932]
	call	?EpuIsHydrazine@AirframeClass@@QAEHXZ	; AirframeClass::EpuIsHydrazine
	test	eax, eax
	je	SHORT $LN48@SetExterna

; 1386 : 		cockpitFlightData.SetLightBit3(FlightData::Hydrazine);

	push	256					; 00000100H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit3@FlightData@@QAEXH@Z	; FlightData::SetLightBit3

; 1387 : 	else

	jmp	SHORT $LN47@SetExterna
$LN48@SetExterna:

; 1388 : 		cockpitFlightData.ClearLightBit3(FlightData::Hydrazine);

	push	256					; 00000100H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit3@FlightData@@QAEXH@Z	; FlightData::ClearLightBit3
$LN47@SetExterna:

; 1389 : 
; 1390 : 	if(ElecIsSet(AircraftClass::ElecFlcsPmg))

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ElecIsSet@AircraftClass@@QAE_NW4ElectricLights@1@@Z ; AircraftClass::ElecIsSet
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN46@SetExterna

; 1391 : 		cockpitFlightData.SetLightBit3(FlightData::FlcsPmg);

	push	1
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit3@FlightData@@QAEXH@Z	; FlightData::SetLightBit3

; 1392 : 	else

	jmp	SHORT $LN45@SetExterna
$LN46@SetExterna:

; 1393 : 		cockpitFlightData.ClearLightBit3(FlightData::FlcsPmg);

	push	1
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit3@FlightData@@QAEXH@Z	; FlightData::ClearLightBit3
$LN45@SetExterna:

; 1394 : 
; 1395 : 	if(ElecIsSet(AircraftClass::ElecEpuGen))

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ElecIsSet@AircraftClass@@QAE_NW4ElectricLights@1@@Z ; AircraftClass::ElecIsSet
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN44@SetExterna

; 1396 : 		cockpitFlightData.SetLightBit3(FlightData::EpuGen);

	push	8
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit3@FlightData@@QAEXH@Z	; FlightData::SetLightBit3

; 1397 : 	else

	jmp	SHORT $LN43@SetExterna
$LN44@SetExterna:

; 1398 : 		cockpitFlightData.ClearLightBit3(FlightData::EpuGen);

	push	8
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit3@FlightData@@QAEXH@Z	; FlightData::ClearLightBit3
$LN43@SetExterna:

; 1399 : 
; 1400 : 	if(ElecIsSet(AircraftClass::ElecEpuPmg))

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ElecIsSet@AircraftClass@@QAE_NW4ElectricLights@1@@Z ; AircraftClass::ElecIsSet
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN42@SetExterna

; 1401 : 		cockpitFlightData.SetLightBit3(FlightData::EpuPmg);

	push	16					; 00000010H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit3@FlightData@@QAEXH@Z	; FlightData::SetLightBit3

; 1402 : 	else

	jmp	SHORT $LN41@SetExterna
$LN42@SetExterna:

; 1403 : 		cockpitFlightData.ClearLightBit3(FlightData::EpuPmg);

	push	16					; 00000010H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit3@FlightData@@QAEXH@Z	; FlightData::ClearLightBit3
$LN41@SetExterna:

; 1404 : 
; 1405 : 	if(ElecIsSet(AircraftClass::ElecToFlcs))

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ElecIsSet@AircraftClass@@QAE_NW4ElectricLights@1@@Z ; AircraftClass::ElecIsSet
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN40@SetExterna

; 1406 : 		cockpitFlightData.SetLightBit3(FlightData::ToFlcs);

	push	32					; 00000020H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit3@FlightData@@QAEXH@Z	; FlightData::SetLightBit3

; 1407 : 	else

	jmp	SHORT $LN39@SetExterna
$LN40@SetExterna:

; 1408 : 		cockpitFlightData.ClearLightBit3(FlightData::ToFlcs);

	push	32					; 00000020H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit3@FlightData@@QAEXH@Z	; FlightData::ClearLightBit3
$LN39@SetExterna:

; 1409 : 
; 1410 : 	if(ElecIsSet(AircraftClass::ElecFlcsRly))

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ElecIsSet@AircraftClass@@QAE_NW4ElectricLights@1@@Z ; AircraftClass::ElecIsSet
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN38@SetExterna

; 1411 : 		cockpitFlightData.SetLightBit3(FlightData::FlcsRly);

	push	64					; 00000040H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit3@FlightData@@QAEXH@Z	; FlightData::SetLightBit3

; 1412 : 	else

	jmp	SHORT $LN37@SetExterna
$LN38@SetExterna:

; 1413 : 		cockpitFlightData.ClearLightBit3(FlightData::FlcsRly);

	push	64					; 00000040H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit3@FlightData@@QAEXH@Z	; FlightData::ClearLightBit3
$LN37@SetExterna:

; 1414 : 
; 1415 : 	if(ElecIsSet(AircraftClass::ElecBatteryFail))

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ElecIsSet@AircraftClass@@QAE_NW4ElectricLights@1@@Z ; AircraftClass::ElecIsSet
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN36@SetExterna

; 1416 : 		cockpitFlightData.SetLightBit3(FlightData::BatFail);

	push	128					; 00000080H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit3@FlightData@@QAEXH@Z	; FlightData::SetLightBit3

; 1417 : 	else

	jmp	SHORT $LN35@SetExterna
$LN36@SetExterna:

; 1418 : 		cockpitFlightData.ClearLightBit3(FlightData::BatFail);

	push	128					; 00000080H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit3@FlightData@@QAEXH@Z	; FlightData::ClearLightBit3
$LN35@SetExterna:

; 1419 : 
; 1420 : 	if(af->IsSet(AirframeClass::JfsStart)) 

	push	268435456				; 10000000H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN34@SetExterna

; 1421 : 		cockpitFlightData.SetLightBit2(FlightData::JFSOn);

	push	2097152					; 00200000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1422 : 	else

	jmp	SHORT $LN33@SetExterna
$LN34@SetExterna:

; 1423 : 		cockpitFlightData.ClearLightBit2(FlightData::JFSOn);

	push	2097152					; 00200000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN33@SetExterna:

; 1424 : 
; 1425 : 	// JPO Is EPU running.
; 1426 : 	if(af->GeneratorRunning(AirframeClass::GenEpu))

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	call	?GeneratorRunning@AirframeClass@@QAEHW4Generator@1@@Z ; AirframeClass::GeneratorRunning
	test	eax, eax
	je	SHORT $LN32@SetExterna

; 1427 : 		cockpitFlightData.SetLightBit2(FlightData::EPUOn);

	push	1048576					; 00100000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1428 : 	else

	jmp	SHORT $LN31@SetExterna
$LN32@SetExterna:

; 1429 : 		cockpitFlightData.ClearLightBit2(FlightData::EPUOn);

	push	1048576					; 00100000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN31@SetExterna:

; 1430 : 
; 1431 : 	// MD -- 20031221: This one is for Mirv -- separate light for the lower half of the ENG FIRE/ENGINE split face
; 1432 : 	// lamp on the right side of the glareshield.
; 1433 : 	if (( (af->rpm <= 0.6F) && (((AircraftClass*)(playerAC))->MainPower() == AircraftClass::MainPowerMain) ) ||
; 1434 : 		(cockpitFlightData.ftit > 1100.0F))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR __real@3f19999a
	comiss	xmm0, DWORD PTR [eax+1212]
	jb	SHORT $LN28@SetExterna
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?MainPower@AircraftClass@@QAE?AW4MainPowerType@1@XZ ; AircraftClass::MainPower
	cmp	eax, 2
	je	SHORT $LN29@SetExterna
$LN28@SetExterna:
	movss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+96
	comiss	xmm0, DWORD PTR __real@44898000
	jbe	SHORT $LN30@SetExterna
$LN29@SetExterna:

; 1435 : 		cockpitFlightData.SetLightBit2(FlightData::ENGINE);

	push	-2147483648				; 80000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit2@FlightData@@QAEXH@Z	; FlightData::SetLightBit2

; 1436 : 	else

	jmp	SHORT $LN27@SetExterna
$LN30@SetExterna:

; 1437 : 		cockpitFlightData.ClearLightBit2(FlightData::ENGINE);

	push	-2147483648				; 80000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit2@FlightData@@QAEXH@Z	; FlightData::ClearLightBit2
$LN27@SetExterna:

; 1438 : 
; 1439 : 	// MD -- 20031011: this lights come on if the generator is *not* running
; 1440 : 	// but only set this to on if the main power switch is not in the off position
; 1441 : 	if (!af->GeneratorRunning(AirframeClass::GenMain) &&
; 1442 : 		(!(((AircraftClass*)(playerAC))->MainPower() == AircraftClass::MainPowerOff)))

	push	1024					; 00000400H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	call	?GeneratorRunning@AirframeClass@@QAEHW4Generator@1@@Z ; AirframeClass::GeneratorRunning
	test	eax, eax
	jne	SHORT $LN26@SetExterna
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?MainPower@AircraftClass@@QAE?AW4MainPowerType@1@XZ ; AircraftClass::MainPower
	test	eax, eax
	je	SHORT $LN26@SetExterna

; 1443 : 			cockpitFlightData.SetLightBit3(FlightData::MainGen);

	push	2
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit3@FlightData@@QAEXH@Z	; FlightData::SetLightBit3

; 1444 : 	else

	jmp	SHORT $LN25@SetExterna
$LN26@SetExterna:

; 1445 : 		cockpitFlightData.ClearLightBit3(FlightData::MainGen);

	push	2
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit3@FlightData@@QAEXH@Z	; FlightData::ClearLightBit3
$LN25@SetExterna:

; 1446 : 	
; 1447 : 	// MD -- 20031011: this lights come on if the generator is *not* running
; 1448 : 	// but only set this to on if the main power switch is not in the off position
; 1449 : 	if (!af->GeneratorRunning(AirframeClass::GenStdby) &&
; 1450 : 		(!(((AircraftClass*)(playerAC))->MainPower() == AircraftClass::MainPowerOff)))

	push	64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+932]
	call	?GeneratorRunning@AirframeClass@@QAEHW4Generator@1@@Z ; AirframeClass::GeneratorRunning
	test	eax, eax
	jne	SHORT $LN24@SetExterna
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?MainPower@AircraftClass@@QAE?AW4MainPowerType@1@XZ ; AircraftClass::MainPower
	test	eax, eax
	je	SHORT $LN24@SetExterna

; 1451 : 			cockpitFlightData.SetLightBit3(FlightData::StbyGen);

	push	4
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit3@FlightData@@QAEXH@Z	; FlightData::SetLightBit3

; 1452 : 	else

	jmp	SHORT $LN23@SetExterna
$LN24@SetExterna:

; 1453 : 		cockpitFlightData.ClearLightBit3(FlightData::StbyGen);

	push	4
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit3@FlightData@@QAEXH@Z	; FlightData::ClearLightBit3
$LN23@SetExterna:

; 1454 : 
; 1455 : 	//MI RF In SILENT gives TF FAIL
; 1456 : 	// MD -- 20031011: make the pattern consistent and ensure that if tf_fail is ever set anywhere else
; 1457 : 	// in future, the caution light will get lit properly.
; 1458 : 	//if(RFState == 2)
; 1459 : 	if (mFaults->GetFault(tf_fail))

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN22@SetExterna

; 1460 : 		cockpitFlightData.SetLightBit(FlightData::TF);

	push	2
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1461 : 	else

	jmp	SHORT $LN21@SetExterna
$LN22@SetExterna:

; 1462 : 		cockpitFlightData.ClearLightBit(FlightData::TF);

	push	2
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN21@SetExterna:

; 1463 : 
; 1464 : 	if(mFaults->GetFault(elec_fault))

	push	34					; 00000022H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN20@SetExterna

; 1465 : 		cockpitFlightData.SetLightBit3(FlightData::Elec_Fault);

	push	1024					; 00000400H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit3@FlightData@@QAEXH@Z	; FlightData::SetLightBit3

; 1466 : 	else

	jmp	SHORT $LN19@SetExterna
$LN20@SetExterna:

; 1467 : 		cockpitFlightData.ClearLightBit3(FlightData::Elec_Fault);

	push	1024					; 00000400H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit3@FlightData@@QAEXH@Z	; FlightData::ClearLightBit3
$LN19@SetExterna:

; 1468 : 
; 1469 : 	if(mFaults->GetFault(alt_low))

	push	2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN18@SetExterna

; 1470 : 		cockpitFlightData.SetLightBit(FlightData::ALT);

	push	8
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1471 : 	else

	jmp	SHORT $LN17@SetExterna
$LN18@SetExterna:

; 1472 : 		cockpitFlightData.ClearLightBit(FlightData::ALT);

	push	8
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN17@SetExterna:

; 1473 : 
; 1474 : 	if(mFaults->GetFault(le_flaps_fault))

	push	11					; 0000000bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN16@SetExterna

; 1475 : 		cockpitFlightData.SetLightBit(FlightData::LEFlaps);

	push	524288					; 00080000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1476 : 	else

	jmp	SHORT $LN15@SetExterna
$LN16@SetExterna:

; 1477 : 		cockpitFlightData.ClearLightBit(FlightData::LEFlaps);

	push	524288					; 00080000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN15@SetExterna:

; 1478 : 
; 1479 : 	if(mFaults->GetFault(ecm_fault))

	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN14@SetExterna

; 1480 : 		cockpitFlightData.SetLightBit(FlightData::ECM);

	push	67108864				; 04000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1481 : 	else

	jmp	SHORT $LN13@SetExterna
$LN14@SetExterna:

; 1482 : 		cockpitFlightData.ClearLightBit(FlightData::ECM);

	push	67108864				; 04000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN13@SetExterna:

; 1483 : 
; 1484 : 	if(mFaults->GetFault(hook_fault))

	push	18					; 00000012H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN12@SetExterna

; 1485 : 		cockpitFlightData.SetLightBit(FlightData::Hook);

	push	134217728				; 08000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit@FlightData@@QAEXH@Z	; FlightData::SetLightBit

; 1486 : 	else

	jmp	SHORT $LN11@SetExterna
$LN12@SetExterna:

; 1487 : 		cockpitFlightData.ClearLightBit(FlightData::Hook);

	push	134217728				; 08000000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit@FlightData@@QAEXH@Z	; FlightData::ClearLightBit
$LN11@SetExterna:

; 1488 : 
; 1489 : 	if(mFaults->GetFault(lef_fault))

	push	35					; 00000023H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN10@SetExterna

; 1490 : 		cockpitFlightData.SetLightBit3(FlightData::Lef_Fault);

	push	2048					; 00000800H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit3@FlightData@@QAEXH@Z	; FlightData::SetLightBit3

; 1491 : 	else

	jmp	SHORT $LN9@SetExterna
$LN10@SetExterna:

; 1492 : 		cockpitFlightData.ClearLightBit3(FlightData::Lef_Fault);

	push	2048					; 00000800H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit3@FlightData@@QAEXH@Z	; FlightData::ClearLightBit3
$LN9@SetExterna:

; 1493 : 
; 1494 : 	// MD -- 20031208: adding a bit for power off -- set if there is no electrical power
; 1495 : 
; 1496 : 	if (((AircraftClass*)(playerAC))->MainPower() == AircraftClass::MainPowerOff)

	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?MainPower@AircraftClass@@QAE?AW4MainPowerType@1@XZ ; AircraftClass::MainPower
	test	eax, eax
	jne	SHORT $LN8@SetExterna

; 1497 : 		cockpitFlightData.SetLightBit3(FlightData::Power_Off);

	push	4096					; 00001000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit3@FlightData@@QAEXH@Z	; FlightData::SetLightBit3

; 1498 : 	else

	jmp	SHORT $LN7@SetExterna
$LN8@SetExterna:

; 1499 : 		cockpitFlightData.ClearLightBit3(FlightData::Power_Off);

	push	4096					; 00001000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit3@FlightData@@QAEXH@Z	; FlightData::ClearLightBit3
$LN7@SetExterna:

; 1500 : 
; 1501 : 	// MD -- 20040301: adding bits for the gear down and locked so you can see for sure
; 1502 : 	// what the individual strut state looks like.
; 1503 : 	if(GetDOFValue(ComplexGearDOF[0]) == (af->GetAeroData(AeroDataSet::NosGearRng) * DTR))

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?ComplexGearDOF@@3PAHA[ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDOFValue@SimMoverClass@@QAEMH@Z	; SimMoverClass::GetDOFValue
	fstp	DWORD PTR tv1104[ebp]
	movss	xmm0, DWORD PTR tv1104[ebp]
	push	17					; 00000011H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	DWORD PTR tv1140[ebp], xmm0
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR tv1109[ebp]
	movss	xmm0, DWORD PTR tv1109[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	xmm1, DWORD PTR tv1140[ebp]
	ucomiss	xmm1, xmm0
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN6@SetExterna

; 1504 : 		cockpitFlightData.SetLightBit3(FlightData::NoseGearDown);

	push	65536					; 00010000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit3@FlightData@@QAEXH@Z	; FlightData::SetLightBit3

; 1505 : 	else

	jmp	SHORT $LN5@SetExterna
$LN6@SetExterna:

; 1506 : 		cockpitFlightData.ClearLightBit3(FlightData::NoseGearDown);

	push	65536					; 00010000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit3@FlightData@@QAEXH@Z	; FlightData::ClearLightBit3
$LN5@SetExterna:

; 1507 : 
; 1508 : 	if(GetDOFValue(ComplexGearDOF[1]) == (af->GetAeroData(AeroDataSet::NosGearRng + 4) * DTR))

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR ?ComplexGearDOF@@3PAHA[ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDOFValue@SimMoverClass@@QAEMH@Z	; SimMoverClass::GetDOFValue
	fstp	DWORD PTR tv1117[ebp]
	movss	xmm0, DWORD PTR tv1117[ebp]
	push	21					; 00000015H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	DWORD PTR tv1142[ebp], xmm0
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR tv1122[ebp]
	movss	xmm0, DWORD PTR tv1122[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	xmm1, DWORD PTR tv1142[ebp]
	ucomiss	xmm1, xmm0
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN4@SetExterna

; 1509 : 		cockpitFlightData.SetLightBit3(FlightData::LeftGearDown);

	push	131072					; 00020000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit3@FlightData@@QAEXH@Z	; FlightData::SetLightBit3

; 1510 : 	else

	jmp	SHORT $LN3@SetExterna
$LN4@SetExterna:

; 1511 : 		cockpitFlightData.ClearLightBit3(FlightData::LeftGearDown);

	push	131072					; 00020000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit3@FlightData@@QAEXH@Z	; FlightData::ClearLightBit3
$LN3@SetExterna:

; 1512 : 
; 1513 : 	if(GetDOFValue(ComplexGearDOF[2]) == (af->GetAeroData(AeroDataSet::NosGearRng + 8) * DTR))

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR ?ComplexGearDOF@@3PAHA[ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDOFValue@SimMoverClass@@QAEMH@Z	; SimMoverClass::GetDOFValue
	fstp	DWORD PTR tv1130[ebp]
	movss	xmm0, DWORD PTR tv1130[ebp]
	push	25					; 00000019H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	DWORD PTR tv1144[ebp], xmm0
	call	?GetAeroData@AirframeClass@@QBEMH@Z	; AirframeClass::GetAeroData
	fstp	DWORD PTR tv1135[ebp]
	movss	xmm0, DWORD PTR tv1135[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	xmm1, DWORD PTR tv1144[ebp]
	ucomiss	xmm1, xmm0
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@SetExterna

; 1514 : 		cockpitFlightData.SetLightBit3(FlightData::RightGearDown);

	push	262144					; 00040000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?SetLightBit3@FlightData@@QAEXH@Z	; FlightData::SetLightBit3

; 1515 : 	else

	jmp	SHORT $LN1@SetExterna
$LN2@SetExterna:

; 1516 : 		cockpitFlightData.ClearLightBit3(FlightData::RightGearDown);

	push	262144					; 00040000H
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?ClearLightBit3@FlightData@@QAEXH@Z	; FlightData::ClearLightBit3
$LN1@SetExterna:
$LN166@SetExterna:

; 1517 : 
; 1518 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetExternalData@AircraftClass@@QAEXXZ ENDP		; AircraftClass::SetExternalData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?ElecIsSet@AircraftClass@@QAE_NW4ElectricLights@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -1						; size = 1
_lt$ = 8						; size = 4
?ElecIsSet@AircraftClass@@QAE_NW4ElectricLights@1@@Z PROC ; AircraftClass::ElecIsSet, COMDAT
; _this$ = ecx

; 535  : 	bool ElecIsSet(ElectricLights lt) { return (elecLights & lt) ? true : false; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1492]
	and	ecx, DWORD PTR _lt$[ebp]
	je	SHORT $LN3@ElecIsSet
	mov	BYTE PTR tv67[ebp], 1
	jmp	SHORT $LN4@ElecIsSet
$LN3@ElecIsSet:
	mov	BYTE PTR tv67[ebp], 0
$LN4@ElecIsSet:
	mov	al, BYTE PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?ElecIsSet@AircraftClass@@QAE_NW4ElectricLights@1@@Z ENDP ; AircraftClass::ElecIsSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?MainPower@AircraftClass@@QAE?AW4MainPowerType@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MainPower@AircraftClass@@QAE?AW4MainPowerType@1@XZ PROC ; AircraftClass::MainPower, COMDAT
; _this$ = ecx

; 519  : 	MainPowerType MainPower() { return mainPower; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1484]
	mov	esp, ebp
	pop	ebp
	ret	0
?MainPower@AircraftClass@@QAE?AW4MainPowerType@1@XZ ENDP ; AircraftClass::MainPower
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?IsOn@AircraftClass@@QAEHW4APFlags@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_flag$ = 8						; size = 4
?IsOn@AircraftClass@@QAEHW4APFlags@1@@Z PROC		; AircraftClass::IsOn, COMDAT
; _this$ = ecx

; 438  : 	int IsOn (APFlags flag) {return APFlag & flag ? 1 : 0;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsOn
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsOn
$LN3@IsOn:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsOn:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsOn@AircraftClass@@QAEHW4APFlags@1@@Z ENDP		; AircraftClass::IsOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\cautions.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CorrectCAT@AircraftClass@@QAEXXZ PROC			; AircraftClass::CorrectCAT
; _this$ = ecx

; 575  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 576  : 	if(!Warned)

	movzx	eax, BYTE PTR ?Warned@@3_NA		; Warned
	test	eax, eax
	jne	SHORT $LN1@CorrectCAT

; 577  : 		return;

	jmp	SHORT $LN2@CorrectCAT
$LN1@CorrectCAT:

; 578  : 	//clear our fault
; 579  : 	mFaults->ClearFault(stores_config_fault);

	push	28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::ClearFault

; 580  : 	//mark that we've been here
; 581  : 	Warned = FALSE;

	mov	BYTE PTR ?Warned@@3_NA, 0		; Warned
$LN2@CorrectCAT:

; 582  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CorrectCAT@AircraftClass@@QAEXXZ ENDP			; AircraftClass::CorrectCAT
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\cautions.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?WrongCAT@AircraftClass@@QAEXXZ PROC			; AircraftClass::WrongCAT
; _this$ = ecx

; 564  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 565  : 	if(Warned)

	movzx	eax, BYTE PTR ?Warned@@3_NA		; Warned
	test	eax, eax
	je	SHORT $LN1@WrongCAT

; 566  : 		return;

	jmp	SHORT $LN2@WrongCAT
$LN1@WrongCAT:

; 567  : 	//set our fault
; 568  : 	mFaults->SetCaution(stores_config_fault);

	push	28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?SetCaution@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetCaution

; 569  : 	//mark that we've been here
; 570  : 	Warned = TRUE;

	mov	BYTE PTR ?Warned@@3_NA, 1		; Warned
$LN2@WrongCAT:

; 571  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?WrongCAT@AircraftClass@@QAEXXZ ENDP			; AircraftClass::WrongCAT
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\cautions.cpp
_TEXT	SEGMENT
_sound$ = -12						; size = 4
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?DamageSounds@AircraftClass@@QAEXXZ PROC		; AircraftClass::DamageSounds
; _this$ = ecx

; 537  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 538  : 	int sound = rand()%5;

	call	_rand
	cdq
	mov	ecx, 5
	idiv	ecx
	mov	DWORD PTR _sound$[ebp], edx

; 539  : 	sound++;

	mov	edx, DWORD PTR _sound$[ebp]
	add	edx, 1
	mov	DWORD PTR _sound$[ebp], edx

; 540  : 	switch (sound)

	mov	eax, DWORD PTR _sound$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR tv67[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv67[ebp], ecx
	cmp	DWORD PTR tv67[ebp], 4
	ja	$LN1@DamageSoun
	mov	edx, DWORD PTR tv67[ebp]
	jmp	DWORD PTR $LN11@DamageSoun[edx*4]
$LN6@DamageSoun:

; 541  : 	{
; 542  : 	case 1:
; 543  : 		SoundPos.Sfx(SFX_HIT_5);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	177					; 000000b1H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMM@Z		; F4SoundPos::Sfx

; 544  : 		break;

	jmp	$LN7@DamageSoun
$LN5@DamageSoun:

; 545  : 	case 2:
; 546  : 		SoundPos.Sfx(SFX_HIT_4);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	176					; 000000b0H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMM@Z		; F4SoundPos::Sfx

; 547  : 		break;

	jmp	$LN7@DamageSoun
$LN4@DamageSoun:

; 548  : 	case 3:
; 549  : 		SoundPos.Sfx(SFX_HIT_3);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	175					; 000000afH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMM@Z		; F4SoundPos::Sfx

; 550  : 		break;

	jmp	SHORT $LN7@DamageSoun
$LN3@DamageSoun:

; 551  : 	case 4:
; 552  : 		SoundPos.Sfx(SFX_HIT_2);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	174					; 000000aeH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMM@Z		; F4SoundPos::Sfx

; 553  : 		break;

	jmp	SHORT $LN7@DamageSoun
$LN2@DamageSoun:

; 554  : 	case 5:
; 555  : 		SoundPos.Sfx(SFX_HIT_1);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	173					; 000000adH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMM@Z		; F4SoundPos::Sfx
$LN1@DamageSoun:
$LN7@DamageSoun:

; 556  : 		break;
; 557  : 	default:
; 558  : 		break;
; 559  : 	}
; 560  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@DamageSoun:
	DD	$LN6@DamageSoun
	DD	$LN5@DamageSoun
	DD	$LN4@DamageSoun
	DD	$LN3@DamageSoun
	DD	$LN2@DamageSoun
?DamageSounds@AircraftClass@@QAEXXZ ENDP		; AircraftClass::DamageSounds
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ PROC ; AircraftClass::AutopilotType, COMDAT
; _this$ = ecx

; 329  : 	AutoPilotType	AutopilotType (void) {return autopilotType;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+968]
	mov	esp, ebp
	pop	ebp
	ret	0
?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ENDP ; AircraftClass::AutopilotType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?LEFState@AircraftClass@@QAEHW4LEFStateFlags@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_fl$ = 8						; size = 4
?LEFState@AircraftClass@@QAEHW4LEFStateFlags@1@@Z PROC	; AircraftClass::LEFState, COMDAT
; _this$ = ecx

; 275  : 	int LEFState(LEFStateFlags fl) { return (LEFFlags & fl) == (unsigned int)fl ? 1 : 0; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+864]
	and	ecx, DWORD PTR _fl$[ebp]
	cmp	ecx, DWORD PTR _fl$[ebp]
	jne	SHORT $LN3@LEFState
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@LEFState
$LN3@LEFState:
	mov	DWORD PTR tv67[ebp], 0
$LN4@LEFState:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?LEFState@AircraftClass@@QAEHW4LEFStateFlags@1@@Z ENDP	; AircraftClass::LEFState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?LEFOn@AircraftClass@@QAEXW4LEFStateFlags@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fl$ = 8						; size = 4
?LEFOn@AircraftClass@@QAEXW4LEFStateFlags@1@@Z PROC	; AircraftClass::LEFOn, COMDAT
; _this$ = ecx

; 273  : 	void LEFOn(LEFStateFlags fl) { LEFFlags |= fl; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+864]
	or	ecx, DWORD PTR _fl$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+864], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?LEFOn@AircraftClass@@QAEXW4LEFStateFlags@1@@Z ENDP	; AircraftClass::LEFOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_fl$ = 8						; size = 4
?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z PROC ; AircraftClass::GetStationFailed, COMDAT
; _this$ = ecx

; 144  : 	int GetStationFailed(StationFlags fl) { return (StationsFailed & fl) == (unsigned int)fl ? 1 : 0; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+756]
	and	ecx, DWORD PTR _fl$[ebp]
	cmp	ecx, DWORD PTR _fl$[ebp]
	jne	SHORT $LN3@GetStation
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@GetStation
$LN3@GetStation:
	mov	DWORD PTR tv67[ebp], 0
$LN4@GetStation:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ENDP ; AircraftClass::GetStationFailed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?StationFailed@AircraftClass@@QAEXW4StationFlags@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fl$ = 8						; size = 4
?StationFailed@AircraftClass@@QAEXW4StationFlags@1@@Z PROC ; AircraftClass::StationFailed, COMDAT
; _this$ = ecx

; 143  : 	void StationFailed(StationFlags fl) { StationsFailed |= fl; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+756]
	or	ecx, DWORD PTR _fl$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+756], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?StationFailed@AircraftClass@@QAEXW4StationFlags@1@@Z ENDP ; AircraftClass::StationFailed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\cautions.cpp
_TEXT	SEGMENT
_center$ = -64						; size = 4
tv914 = -60						; size = 4
tv893 = -56						; size = 4
tv880 = -52						; size = 4
tv860 = -48						; size = 4
tv844 = -44						; size = 4
tv829 = -40						; size = 4
tv810 = -36						; size = 4
tv792 = -32						; size = 4
tv776 = -28						; size = 4
tv760 = -24						; size = 4
tv744 = -20						; size = 4
tv729 = -16						; size = 4
tv486 = -12						; size = 4
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_thing$ = 8						; size = 4
?StoreToDamage@AircraftClass@@QAEXW4WeaponClass@@@Z PROC ; AircraftClass::StoreToDamage
; _this$ = ecx

; 824  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 825  : 	if (!g_bRealisticAvionics || (PlayerOptions.Realism < 0.76 && !isDigital))

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN53@StoreToDam
	cvtss2sd xmm0, DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+160
	movsd	xmm1, QWORD PTR __real@3fe851eb851eb852
	comisd	xmm1, xmm0
	jbe	SHORT $LN54@StoreToDam
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+948], 0
	jne	SHORT $LN54@StoreToDam
$LN53@StoreToDam:

; 826  : 		return;

	jmp	$LN55@StoreToDam
$LN54@StoreToDam:

; 827  : 
; 828  : 	if(!Sms || !mFaults || !af)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+940], 0
	je	SHORT $LN51@StoreToDam
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+928], 0
	je	SHORT $LN51@StoreToDam
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+932], 0
	jne	SHORT $LN52@StoreToDam
$LN51@StoreToDam:

; 829  : 		return;

	jmp	$LN55@StoreToDam
$LN52@StoreToDam:

; 830  : 	//Check which station to fail
; 831  : 	int center = (Sms->NumHardpoints() - 1) / 2 + 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+940]
	call	?NumHardpoints@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumHardpoints
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, 1
	mov	DWORD PTR _center$[ebp], eax

; 832  : 	for(int i = 0; i < Sms->NumHardpoints(); i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN50@StoreToDam
$LN49@StoreToDam:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN50@StoreToDam:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+940]
	call	?NumHardpoints@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumHardpoints
	cmp	DWORD PTR _i$1[ebp], eax
	jge	$LN48@StoreToDam

; 833  : 	{
; 834  : 		// if its a tank - try and guess which one.
; 835  : 		if (Sms->hardPoint[i] && 
; 836  : 			Sms->hardPoint[i]->GetWeaponClass() == thing)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+940]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$1[ebp]
	cmp	DWORD PTR [ecx+edx*4], 0
	je	$LN1@StoreToDam
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+940]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _i$1[ebp]
	mov	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [esi+164]
	call	edx
	cmp	eax, DWORD PTR _thing$[ebp]
	jne	$LN1@StoreToDam

; 837  : 		{
; 838  : 			//tanks cause our Fuel Management System to fail.
; 839  : 			if(thing == wcTank)

	cmp	DWORD PTR _thing$[ebp], 5
	jne	$LN26@StoreToDam

; 840  : 			{
; 841  : 				if(GetNz() > af->curMaxGs + GToleranceTanks)

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+424]
	call	eax
	fstp	DWORD PTR tv729[ebp]
	movss	xmm0, DWORD PTR tv729[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1244]
	addss	xmm1, DWORD PTR [eax+1532]
	comiss	xmm0, xmm1
	jbe	SHORT $LN43@StoreToDam

; 842  : 				{
; 843  : 					AdjustTankG(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AdjustTankG@AircraftClass@@QAEXH@Z	; AircraftClass::AdjustTankG

; 844  : 					DoOverGSpeedDamage(i);

	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoOverGSpeedDamage@AircraftClass@@QAEXH@Z ; AircraftClass::DoOverGSpeedDamage

; 845  : 					if(!mFaults->GetFault(FaultClass::fms_fault))

	push	14					; 0000000eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN44@StoreToDam

; 846  : 						mFaults->SetFault(FaultClass::fms_fault,FaultClass::bus, FaultClass::degr, FALSE);

	push	0
	push	1
	push	1
	push	14					; 0000000eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN44@StoreToDam:

; 847  : 					if(GSoundsWFuel == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+996], 0
	jne	SHORT $LN43@StoreToDam

; 848  : 					{
; 849  : 						DamageSounds();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DamageSounds@AircraftClass@@QAEXXZ	; AircraftClass::DamageSounds

; 850  : 						GSoundsWFuel = 2;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+996], 2
$LN43@StoreToDam:

; 851  : 					}
; 852  : 				}
; 853  : 				if(GetNz() > af->curMaxGs + GToleranceTanks)

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+424]
	call	eax
	fstp	DWORD PTR tv744[ebp]
	movss	xmm0, DWORD PTR tv744[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1244]
	addss	xmm1, DWORD PTR [eax+1532]
	comiss	xmm0, xmm1
	jbe	SHORT $LN40@StoreToDam

; 854  : 				{
; 855  : 					AdjustTankG(2);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AdjustTankG@AircraftClass@@QAEXH@Z	; AircraftClass::AdjustTankG

; 856  : 					DoOverGSpeedDamage(i);

	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoOverGSpeedDamage@AircraftClass@@QAEXH@Z ; AircraftClass::DoOverGSpeedDamage

; 857  : 					if(!mFaults->GetFault(FaultClass::fms_fault))

	push	14					; 0000000eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN41@StoreToDam

; 858  : 						mFaults->SetFault(FaultClass::fms_fault,FaultClass::bus, FaultClass::fail, FALSE);

	push	0
	push	2
	push	1
	push	14					; 0000000eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN41@StoreToDam:

; 859  : 					if(GSoundsWFuel == 2)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+996], 2
	jne	SHORT $LN40@StoreToDam

; 860  : 					{
; 861  : 						DamageSounds();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DamageSounds@AircraftClass@@QAEXXZ	; AircraftClass::DamageSounds

; 862  : 						GSoundsWFuel++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+996]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+996], eax
$LN40@StoreToDam:

; 863  : 					}
; 864  : 				}
; 865  : 				if(GetNz() >= af->curMaxGs + GToleranceTanks)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+424]
	call	edx
	fstp	DWORD PTR tv760[ebp]
	movss	xmm0, DWORD PTR tv760[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1244]
	addss	xmm1, DWORD PTR [edx+1532]
	comiss	xmm0, xmm1
	jb	SHORT $LN37@StoreToDam

; 866  : 				{
; 867  : 					AdjustTankG(3);

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AdjustTankG@AircraftClass@@QAEXH@Z	; AircraftClass::AdjustTankG

; 868  : 					DoOverGSpeedDamage(i);

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoOverGSpeedDamage@AircraftClass@@QAEXH@Z ; AircraftClass::DoOverGSpeedDamage

; 869  : 					if(!mFaults->GetFault(FaultClass::flcs_fault))

	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN38@StoreToDam

; 870  : 						mFaults->SetFault(FaultClass::flcs_fault,FaultClass::sngl, FaultClass::fail, FALSE);

	push	0
	push	2
	push	64					; 00000040H
	push	13					; 0000000dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN38@StoreToDam:

; 871  : 					if(GSoundsWFuel == 3)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+996], 3
	jne	SHORT $LN37@StoreToDam

; 872  : 					{
; 873  : 						DamageSounds();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DamageSounds@AircraftClass@@QAEXXZ	; AircraftClass::DamageSounds

; 874  : 						GSoundsWFuel++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+996]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+996], edx
$LN37@StoreToDam:

; 875  : 					}
; 876  : 				}
; 877  : 				if(GetKias() > af->curMaxStoreSpeed + SpeedToleranceTanks)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+224]
	call	eax
	fstp	DWORD PTR tv776[ebp]
	movss	xmm0, DWORD PTR tv776[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [eax+1524]
	addss	xmm1, DWORD PTR [edx+1612]
	comiss	xmm0, xmm1
	jbe	SHORT $LN34@StoreToDam

; 878  : 				{
; 879  : 					AdjustTankSpeed(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AdjustTankSpeed@AircraftClass@@QAEXH@Z	; AircraftClass::AdjustTankSpeed

; 880  : 					DoOverGSpeedDamage(i);

	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoOverGSpeedDamage@AircraftClass@@QAEXH@Z ; AircraftClass::DoOverGSpeedDamage

; 881  : 					if(!mFaults->GetFault(FaultClass::fms_fault))

	push	14					; 0000000eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN35@StoreToDam

; 882  : 						mFaults->SetFault(FaultClass::fms_fault,FaultClass::bus, FaultClass::fail, FALSE);

	push	0
	push	2
	push	1
	push	14					; 0000000eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN35@StoreToDam:

; 883  : 					if(SpeedSoundsWFuel == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+988], 0
	jne	SHORT $LN34@StoreToDam

; 884  : 					{
; 885  : 						  DamageSounds();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DamageSounds@AircraftClass@@QAEXXZ	; AircraftClass::DamageSounds

; 886  : 						  SpeedSoundsWFuel++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+988]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+988], eax
$LN34@StoreToDam:

; 887  : 					}
; 888  : 				}
; 889  : 				if(GetKias() > af->curMaxStoreSpeed + SpeedToleranceTanks)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+224]
	call	edx
	fstp	DWORD PTR tv792[ebp]
	movss	xmm0, DWORD PTR tv792[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [edx+1524]
	addss	xmm1, DWORD PTR [ecx+1612]
	comiss	xmm0, xmm1
	jbe	SHORT $LN31@StoreToDam

; 890  : 				{
; 891  : 					AdjustTankSpeed(2);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AdjustTankSpeed@AircraftClass@@QAEXH@Z	; AircraftClass::AdjustTankSpeed

; 892  : 					DoOverGSpeedDamage(i);

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoOverGSpeedDamage@AircraftClass@@QAEXH@Z ; AircraftClass::DoOverGSpeedDamage

; 893  : 					if(!mFaults->GetFault(FaultClass::fms_fault))

	push	14					; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN32@StoreToDam

; 894  : 						mFaults->SetFault(FaultClass::fms_fault,FaultClass::bus, FaultClass::fail, FALSE);

	push	0
	push	2
	push	1
	push	14					; 0000000eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN32@StoreToDam:

; 895  : 					if(SpeedSoundsWFuel == 1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+988], 1
	jne	SHORT $LN31@StoreToDam

; 896  : 					{
; 897  : 						  DamageSounds();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DamageSounds@AircraftClass@@QAEXXZ	; AircraftClass::DamageSounds

; 898  : 						  SpeedSoundsWFuel++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+988]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+988], edx
$LN31@StoreToDam:

; 899  : 					}
; 900  : 				}
; 901  : 				if(af->mach >= 2.05f || GetKias() > af->curMaxStoreSpeed + SpeedToleranceTanks)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR [edx+1144]
	comiss	xmm0, DWORD PTR __real@40033333
	jae	SHORT $LN29@StoreToDam
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+224]
	call	eax
	fstp	DWORD PTR tv810[ebp]
	movss	xmm0, DWORD PTR tv810[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [eax+1524]
	addss	xmm1, DWORD PTR [edx+1612]
	comiss	xmm0, xmm1
	jbe	$LN26@StoreToDam
$LN29@StoreToDam:

; 902  : 				{
; 903  : 					AdjustTankSpeed(3);

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AdjustTankSpeed@AircraftClass@@QAEXH@Z	; AircraftClass::AdjustTankSpeed

; 904  : 					DoOverGSpeedDamage(i);

	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoOverGSpeedDamage@AircraftClass@@QAEXH@Z ; AircraftClass::DoOverGSpeedDamage

; 905  : 					if(!mFaults->GetFault(FaultClass::flcs_fault))

	push	13					; 0000000dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN28@StoreToDam

; 906  : 						mFaults->SetFault(FaultClass::flcs_fault,FaultClass::sngl, FaultClass::fail, FALSE);

	push	0
	push	2
	push	64					; 00000040H
	push	13					; 0000000dH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN28@StoreToDam:

; 907  : 					if(!mFaults->GetFault(FaultClass::cadc_fault))

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN27@StoreToDam

; 908  : 						mFaults->SetFault(FaultClass::cadc_fault,FaultClass::bus, FaultClass::degr, FALSE);

	push	0
	push	1
	push	1
	push	3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN27@StoreToDam:

; 909  : 					if(SpeedSoundsWFuel == 2)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+988], 2
	jne	SHORT $LN26@StoreToDam

; 910  : 					{
; 911  : 						DamageSounds();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DamageSounds@AircraftClass@@QAEXXZ	; AircraftClass::DamageSounds

; 912  : 						SpeedSoundsWFuel++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+988]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+988], edx
$LN26@StoreToDam:

; 913  : 					}
; 914  : 				}
; 915  : 			}
; 916  : 			if(thing == wcBombWpn || thing == wcRocketWpn || thing == wcAgmWpn ||
; 917  : 				thing == wcHARMWpn || thing == wcSamWpn || thing ==wcGbuWpn)

	cmp	DWORD PTR _thing$[ebp], 2
	je	SHORT $LN24@StoreToDam
	cmp	DWORD PTR _thing$[ebp], 1
	je	SHORT $LN24@StoreToDam
	cmp	DWORD PTR _thing$[ebp], 6
	je	SHORT $LN24@StoreToDam
	cmp	DWORD PTR _thing$[ebp], 7
	je	SHORT $LN24@StoreToDam
	cmp	DWORD PTR _thing$[ebp], 8
	je	SHORT $LN24@StoreToDam
	cmp	DWORD PTR _thing$[ebp], 9
	jne	$LN1@StoreToDam
$LN24@StoreToDam:

; 918  : 			{
; 919  : 				if(GetNz() > af->curMaxGs + GToleranceBombs)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+424]
	call	eax
	fstp	DWORD PTR tv829[ebp]
	movss	xmm0, DWORD PTR tv829[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1244]
	addss	xmm1, DWORD PTR [eax+1536]
	comiss	xmm0, xmm1
	jbe	SHORT $LN21@StoreToDam

; 920  : 				{
; 921  : 					AdjustBombG(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AdjustBombG@AircraftClass@@QAEXH@Z	; AircraftClass::AdjustBombG

; 922  : 					DoOverGSpeedDamage(i);

	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoOverGSpeedDamage@AircraftClass@@QAEXH@Z ; AircraftClass::DoOverGSpeedDamage

; 923  : 					if(!mFaults->GetFault(FaultClass::isa_fault))

	push	21					; 00000015H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN22@StoreToDam

; 924  : 						mFaults->SetFault(FaultClass::isa_fault,FaultClass::sngl, FaultClass::fail, FALSE);

	push	0
	push	2
	push	64					; 00000040H
	push	21					; 00000015H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN22@StoreToDam:

; 925  : 					if(GSoundsNFuel == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1000], 0
	jne	SHORT $LN21@StoreToDam

; 926  : 					{
; 927  : 						DamageSounds();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DamageSounds@AircraftClass@@QAEXXZ	; AircraftClass::DamageSounds

; 928  : 						GSoundsNFuel = 2;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1000], 2
$LN21@StoreToDam:

; 929  : 					}
; 930  : 				}
; 931  : 				if(GetNz() >= af->curMaxGs + GToleranceBombs)

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+424]
	call	eax
	fstp	DWORD PTR tv844[ebp]
	movss	xmm0, DWORD PTR tv844[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1244]
	addss	xmm1, DWORD PTR [eax+1536]
	comiss	xmm0, xmm1
	jb	SHORT $LN18@StoreToDam

; 932  : 				{
; 933  : 					AdjustBombG(2);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AdjustBombG@AircraftClass@@QAEXH@Z	; AircraftClass::AdjustBombG

; 934  : 					DoOverGSpeedDamage(i);

	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoOverGSpeedDamage@AircraftClass@@QAEXH@Z ; AircraftClass::DoOverGSpeedDamage

; 935  : 					if(!mFaults->GetFault(FaultClass::sms_fault))

	push	26					; 0000001aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN19@StoreToDam

; 936  : 						mFaults->SetFault(FaultClass::sms_fault,FaultClass::bus, FaultClass::degr, FALSE);

	push	0
	push	1
	push	1
	push	26					; 0000001aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN19@StoreToDam:

; 937  : 					if(GSoundsNFuel == 2)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1000], 2
	jne	SHORT $LN18@StoreToDam

; 938  : 					{
; 939  : 						DamageSounds();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DamageSounds@AircraftClass@@QAEXXZ	; AircraftClass::DamageSounds

; 940  : 						GSoundsNFuel++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1000]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1000], eax
$LN18@StoreToDam:

; 941  : 					}
; 942  : 				}
; 943  : 				if(GetNz() >= af->curMaxGs + GToleranceBombs)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+424]
	call	edx
	fstp	DWORD PTR tv860[ebp]
	movss	xmm0, DWORD PTR tv860[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1244]
	addss	xmm1, DWORD PTR [edx+1536]
	comiss	xmm0, xmm1
	jb	$LN14@StoreToDam

; 944  : 				{
; 945  : 					AdjustBombG(3);

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AdjustBombG@AircraftClass@@QAEXH@Z	; AircraftClass::AdjustBombG

; 946  : 					DoOverGSpeedDamage(i);

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoOverGSpeedDamage@AircraftClass@@QAEXH@Z ; AircraftClass::DoOverGSpeedDamage

; 947  : 					if(!mFaults->GetFault(FaultClass::flcs_fault))

	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN16@StoreToDam

; 948  : 						mFaults->SetFault(FaultClass::flcs_fault,FaultClass::dual, FaultClass::fail, FALSE);

	push	0
	push	2
	push	32					; 00000020H
	push	13					; 0000000dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN16@StoreToDam:

; 949  : 					if(!mFaults->GetFault(FaultClass::sms_fault) & FaultClass::bus & FaultClass::fail)

	push	26					; 0000001aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN57@StoreToDam
	mov	DWORD PTR tv486[ebp], 1
	jmp	SHORT $LN58@StoreToDam
$LN57@StoreToDam:
	mov	DWORD PTR tv486[ebp], 0
$LN58@StoreToDam:
	mov	ecx, DWORD PTR tv486[ebp]
	and	ecx, 1
	and	ecx, 2
	je	SHORT $LN15@StoreToDam

; 950  : 						mFaults->SetFault(FaultClass::sms_fault,FaultClass::bus, FaultClass::fail, FALSE);

	push	0
	push	2
	push	1
	push	26					; 0000001aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN15@StoreToDam:

; 951  : 					if(GSoundsNFuel == 3)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1000], 3
	jne	SHORT $LN14@StoreToDam

; 952  : 					{
; 953  : 						DamageSounds();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DamageSounds@AircraftClass@@QAEXXZ	; AircraftClass::DamageSounds

; 954  : 						GSoundsNFuel++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1000]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1000], edx
$LN14@StoreToDam:

; 955  : 					}
; 956  : 				}
; 957  : 				if(GetKias() > af->curMaxStoreSpeed + SpeedToleranceBombs)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+224]
	call	eax
	fstp	DWORD PTR tv880[ebp]
	movss	xmm0, DWORD PTR tv880[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [eax+1528]
	addss	xmm1, DWORD PTR [edx+1612]
	comiss	xmm0, xmm1
	jbe	SHORT $LN12@StoreToDam

; 958  : 				{
; 959  : 					AdjustBombSpeed(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AdjustBombSpeed@AircraftClass@@QAEXH@Z	; AircraftClass::AdjustBombSpeed

; 960  : 					DoOverGSpeedDamage(i);

	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoOverGSpeedDamage@AircraftClass@@QAEXH@Z ; AircraftClass::DoOverGSpeedDamage

; 961  : 					if(SpeedSoundsNFuel == 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+992], 0
	jne	SHORT $LN12@StoreToDam

; 962  : 					{
; 963  : 						  DamageSounds();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DamageSounds@AircraftClass@@QAEXXZ	; AircraftClass::DamageSounds

; 964  : 						  SpeedSoundsNFuel++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+992]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+992], ecx
$LN12@StoreToDam:

; 965  : 					}
; 966  : 				}
; 967  : 				if(GetKias() > af->curMaxStoreSpeed + SpeedToleranceBombs)

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+224]
	call	eax
	fstp	DWORD PTR tv893[ebp]
	movss	xmm0, DWORD PTR tv893[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [eax+1528]
	addss	xmm1, DWORD PTR [edx+1612]
	comiss	xmm0, xmm1
	jbe	$LN8@StoreToDam

; 968  : 				{
; 969  : 					AdjustBombSpeed(2);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AdjustBombSpeed@AircraftClass@@QAEXH@Z	; AircraftClass::AdjustBombSpeed

; 970  : 					DoOverGSpeedDamage(i);

	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoOverGSpeedDamage@AircraftClass@@QAEXH@Z ; AircraftClass::DoOverGSpeedDamage

; 971  : 					if(!mFaults->GetFault(FaultClass::fms_fault))

	push	14					; 0000000eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN10@StoreToDam

; 972  : 						mFaults->SetFault(FaultClass::fms_fault,FaultClass::bus, FaultClass::fail, FALSE);

	push	0
	push	2
	push	1
	push	14					; 0000000eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN10@StoreToDam:

; 973  : 					if(!mFaults->GetFault(FaultClass::isa_fault))

	push	21					; 00000015H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN9@StoreToDam

; 974  : 						mFaults->SetFault(FaultClass::isa_fault,FaultClass::sngl, FaultClass::fail, FALSE);

	push	0
	push	2
	push	64					; 00000040H
	push	21					; 00000015H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN9@StoreToDam:

; 975  : 					if(SpeedSoundsNFuel == 1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+992], 1
	jne	SHORT $LN8@StoreToDam

; 976  : 					{
; 977  : 						  DamageSounds();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DamageSounds@AircraftClass@@QAEXXZ	; AircraftClass::DamageSounds

; 978  : 						  SpeedSoundsNFuel++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+992]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+992], edx
$LN8@StoreToDam:

; 979  : 					}
; 980  : 				}
; 981  : 				if(af->mach >= 2.05f || GetKias() > af->curMaxStoreSpeed + SpeedToleranceBombs)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR [edx+1144]
	comiss	xmm0, DWORD PTR __real@40033333
	jae	SHORT $LN6@StoreToDam
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+224]
	call	eax
	fstp	DWORD PTR tv914[ebp]
	movss	xmm0, DWORD PTR tv914[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [eax+1528]
	addss	xmm1, DWORD PTR [edx+1612]
	comiss	xmm0, xmm1
	jbe	$LN1@StoreToDam
$LN6@StoreToDam:

; 982  : 				{
; 983  : 					AdjustBombSpeed(3);

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AdjustBombSpeed@AircraftClass@@QAEXH@Z	; AircraftClass::AdjustBombSpeed

; 984  : 					DoOverGSpeedDamage(i);

	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoOverGSpeedDamage@AircraftClass@@QAEXH@Z ; AircraftClass::DoOverGSpeedDamage

; 985  : 					if(!mFaults->GetFault(FaultClass::flcs_fault))

	push	13					; 0000000dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN5@StoreToDam

; 986  : 						mFaults->SetFault(FaultClass::flcs_fault,FaultClass::sngl, FaultClass::fail, FALSE);

	push	0
	push	2
	push	64					; 00000040H
	push	13					; 0000000dH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN5@StoreToDam:

; 987  : 					if(!mFaults->GetFault(FaultClass::cadc_fault))

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN4@StoreToDam

; 988  : 						mFaults->SetFault(FaultClass::cadc_fault,FaultClass::bus, FaultClass::degr, FALSE);

	push	0
	push	1
	push	1
	push	3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN4@StoreToDam:

; 989  : 					if(!mFaults->GetFault(FaultClass::amux_fault))

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN3@StoreToDam

; 990  : 						mFaults->SetFault(FaultClass::amux_fault,FaultClass::bus, FaultClass::degr, FALSE);

	push	0
	push	1
	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN3@StoreToDam:

; 991  : 					if(!mFaults->GetFault(FaultClass::fcc_fault))

	push	11					; 0000000bH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN2@StoreToDam

; 992  : 						mFaults->SetFault(FaultClass::fcc_fault,FaultClass::bus, FaultClass::degr, FALSE);

	push	0
	push	1
	push	1
	push	11					; 0000000bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN2@StoreToDam:

; 993  : 					if(SpeedSoundsNFuel == 2)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+992], 2
	jne	SHORT $LN1@StoreToDam

; 994  : 					{
; 995  : 						DamageSounds();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DamageSounds@AircraftClass@@QAEXXZ	; AircraftClass::DamageSounds

; 996  : 						SpeedSoundsNFuel++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+992]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+992], eax
$LN1@StoreToDam:

; 997  : 					}
; 998  : 				}
; 999  : 			}
; 1000 : 		}
; 1001 : 	}

	jmp	$LN49@StoreToDam
$LN48@StoreToDam:
$LN55@StoreToDam:

; 1002 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?StoreToDamage@AircraftClass@@QAEXW4WeaponClass@@@Z ENDP ; AircraftClass::StoreToDamage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\cautions.cpp
_TEXT	SEGMENT
tv69 = -12						; size = 4
_damage$ = -8						; size = 4
_this$ = -4						; size = 4
_station$ = 8						; size = 4
?DoOverGSpeedDamage@AircraftClass@@QAEXH@Z PROC		; AircraftClass::DoOverGSpeedDamage
; _this$ = ecx

; 686  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 687  : 	if(!mFaults)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+928], 0
	jne	SHORT $LN49@DoOverGSpe

; 688  : 		return;

	jmp	$LN50@DoOverGSpe
$LN49@DoOverGSpe:

; 689  : 	int damage = rand()%100;

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _damage$[ebp], edx

; 690  : 	damage++;

	mov	edx, DWORD PTR _damage$[ebp]
	add	edx, 1
	mov	DWORD PTR _damage$[ebp], edx

; 691  : 	switch(station)

	mov	eax, DWORD PTR _station$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	mov	ecx, DWORD PTR tv69[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv69[ebp], ecx
	cmp	DWORD PTR tv69[ebp], 8
	ja	$LN50@DoOverGSpe
	mov	edx, DWORD PTR tv69[ebp]
	jmp	DWORD PTR $LN52@DoOverGSpe[edx*4]
$LN46@DoOverGSpe:

; 692  : 	{
; 693  : 	case 1:
; 694  : 		if(damage < 95 && !GetStationFailed(Station1_Degr) && !GetStationFailed(Station1_Fail))

	cmp	DWORD PTR _damage$[ebp], 95		; 0000005fH
	jge	SHORT $LN45@DoOverGSpe
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN45@DoOverGSpe
	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN45@DoOverGSpe

; 695  : 		{
; 696  : 			mFaults->SetFault(FaultClass::sms_fault,FaultClass::sta1, FaultClass::degr, FALSE);

	push	0
	push	1
	push	2097152					; 00200000H
	push	26					; 0000001aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault

; 697  : 			StationFailed(Station1_Degr);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StationFailed@AircraftClass@@QAEXW4StationFlags@1@@Z ; AircraftClass::StationFailed

; 698  : 		}
; 699  : 		else

	jmp	SHORT $LN44@DoOverGSpe
$LN45@DoOverGSpe:

; 700  : 		{
; 701  : 			if(!GetStationFailed(Station1_Fail) && (GSoundsNFuel == 2 || GSoundsWFuel == 3))

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN43@DoOverGSpe
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1000], 2
	je	SHORT $LN42@DoOverGSpe
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+996], 3
	jne	SHORT $LN43@DoOverGSpe
$LN42@DoOverGSpe:

; 702  : 				mFaults->SetFault(FaultClass::sms_fault,FaultClass::sta1, FaultClass::fail, FALSE);

	push	0
	push	2
	push	2097152					; 00200000H
	push	26					; 0000001aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN43@DoOverGSpe:

; 703  : 			StationFailed(Station1_Fail);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StationFailed@AircraftClass@@QAEXW4StationFlags@1@@Z ; AircraftClass::StationFailed
$LN44@DoOverGSpe:

; 704  : 		}
; 705  : 		break;

	jmp	$LN50@DoOverGSpe
$LN41@DoOverGSpe:

; 706  : 	case 2:
; 707  : 		damage = rand()%100;

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _damage$[ebp], edx

; 708  : 		if(damage < 95 && !GetStationFailed(Station2_Degr) && !GetStationFailed(Station2_Fail))

	cmp	DWORD PTR _damage$[ebp], 95		; 0000005fH
	jge	SHORT $LN40@DoOverGSpe
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN40@DoOverGSpe
	push	1024					; 00000400H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN40@DoOverGSpe

; 709  : 		{
; 710  : 			mFaults->SetFault(FaultClass::sms_fault,FaultClass::sta2, FaultClass::degr, FALSE);

	push	0
	push	1
	push	4194304					; 00400000H
	push	26					; 0000001aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault

; 711  : 			StationFailed(Station2_Degr);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StationFailed@AircraftClass@@QAEXW4StationFlags@1@@Z ; AircraftClass::StationFailed

; 712  : 		}
; 713  : 		else

	jmp	SHORT $LN39@DoOverGSpe
$LN40@DoOverGSpe:

; 714  : 		{
; 715  : 			if(!GetStationFailed(Station2_Fail) && (GSoundsNFuel == 2 || GSoundsWFuel == 3))

	push	1024					; 00000400H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN38@DoOverGSpe
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1000], 2
	je	SHORT $LN37@DoOverGSpe
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+996], 3
	jne	SHORT $LN38@DoOverGSpe
$LN37@DoOverGSpe:

; 716  : 				mFaults->SetFault(FaultClass::sms_fault,FaultClass::sta2, FaultClass::fail, FALSE);

	push	0
	push	2
	push	4194304					; 00400000H
	push	26					; 0000001aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN38@DoOverGSpe:

; 717  : 			StationFailed(Station2_Fail);

	push	1024					; 00000400H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StationFailed@AircraftClass@@QAEXW4StationFlags@1@@Z ; AircraftClass::StationFailed
$LN39@DoOverGSpe:

; 718  : 		}
; 719  : 		break;

	jmp	$LN50@DoOverGSpe
$LN36@DoOverGSpe:

; 720  : 	case 3:
; 721  : 		damage = rand()%100;

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _damage$[ebp], edx

; 722  : 		if(damage < 95 && !GetStationFailed(Station3_Degr) && !GetStationFailed(Station3_Fail))

	cmp	DWORD PTR _damage$[ebp], 95		; 0000005fH
	jge	SHORT $LN35@DoOverGSpe
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN35@DoOverGSpe
	push	2048					; 00000800H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN35@DoOverGSpe

; 723  : 		{
; 724  : 			mFaults->SetFault(FaultClass::sms_fault,FaultClass::sta3, FaultClass::degr, FALSE);

	push	0
	push	1
	push	8388608					; 00800000H
	push	26					; 0000001aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault

; 725  : 			StationFailed(Station3_Degr);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StationFailed@AircraftClass@@QAEXW4StationFlags@1@@Z ; AircraftClass::StationFailed

; 726  : 		}
; 727  : 		else

	jmp	SHORT $LN34@DoOverGSpe
$LN35@DoOverGSpe:

; 728  : 		{
; 729  : 			if(!GetStationFailed(Station3_Fail) && (GSoundsNFuel == 2 || GSoundsWFuel == 3))

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN33@DoOverGSpe
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1000], 2
	je	SHORT $LN32@DoOverGSpe
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+996], 3
	jne	SHORT $LN33@DoOverGSpe
$LN32@DoOverGSpe:

; 730  : 				mFaults->SetFault(FaultClass::sms_fault,FaultClass::sta3, FaultClass::fail, FALSE);

	push	0
	push	2
	push	8388608					; 00800000H
	push	26					; 0000001aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN33@DoOverGSpe:

; 731  : 			StationFailed(Station3_Fail);

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StationFailed@AircraftClass@@QAEXW4StationFlags@1@@Z ; AircraftClass::StationFailed
$LN34@DoOverGSpe:

; 732  : 		}
; 733  : 		break;

	jmp	$LN50@DoOverGSpe
$LN31@DoOverGSpe:

; 734  : 	case 4:
; 735  : 		damage = rand()%100;

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _damage$[ebp], edx

; 736  : 		if(damage < 95 && !GetStationFailed(Station4_Degr) && !GetStationFailed(Station4_Fail))

	cmp	DWORD PTR _damage$[ebp], 95		; 0000005fH
	jge	SHORT $LN30@DoOverGSpe
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN30@DoOverGSpe
	push	4096					; 00001000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN30@DoOverGSpe

; 737  : 		{
; 738  : 			mFaults->SetFault(FaultClass::sms_fault,FaultClass::sta4, FaultClass::degr, FALSE);

	push	0
	push	1
	push	16777216				; 01000000H
	push	26					; 0000001aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault

; 739  : 			StationFailed(Station4_Degr);

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StationFailed@AircraftClass@@QAEXW4StationFlags@1@@Z ; AircraftClass::StationFailed

; 740  : 		}
; 741  : 		else

	jmp	SHORT $LN29@DoOverGSpe
$LN30@DoOverGSpe:

; 742  : 		{
; 743  : 			if(!GetStationFailed(Station4_Fail) && (GSoundsNFuel == 2 || GSoundsWFuel == 3))

	push	4096					; 00001000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN28@DoOverGSpe
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1000], 2
	je	SHORT $LN27@DoOverGSpe
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+996], 3
	jne	SHORT $LN28@DoOverGSpe
$LN27@DoOverGSpe:

; 744  : 				mFaults->SetFault(FaultClass::sms_fault,FaultClass::sta4, FaultClass::fail, FALSE);

	push	0
	push	2
	push	16777216				; 01000000H
	push	26					; 0000001aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN28@DoOverGSpe:

; 745  : 			StationFailed(Station4_Fail);

	push	4096					; 00001000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StationFailed@AircraftClass@@QAEXW4StationFlags@1@@Z ; AircraftClass::StationFailed
$LN29@DoOverGSpe:

; 746  : 		}
; 747  : 		break;

	jmp	$LN50@DoOverGSpe
$LN26@DoOverGSpe:

; 748  : 	case 5:
; 749  : 		damage = rand()%100;

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _damage$[ebp], edx

; 750  : 		if(damage < 95 && !GetStationFailed(Station5_Degr) && !GetStationFailed(Station5_Fail))

	cmp	DWORD PTR _damage$[ebp], 95		; 0000005fH
	jge	SHORT $LN25@DoOverGSpe
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN25@DoOverGSpe
	push	8192					; 00002000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN25@DoOverGSpe

; 751  : 		{
; 752  : 			mFaults->SetFault(FaultClass::sms_fault,FaultClass::sta5, FaultClass::degr, FALSE);

	push	0
	push	1
	push	33554432				; 02000000H
	push	26					; 0000001aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault

; 753  : 			StationFailed(Station5_Degr);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StationFailed@AircraftClass@@QAEXW4StationFlags@1@@Z ; AircraftClass::StationFailed

; 754  : 		}
; 755  : 		else

	jmp	SHORT $LN24@DoOverGSpe
$LN25@DoOverGSpe:

; 756  : 		{
; 757  : 			if(!GetStationFailed(Station5_Fail) && (GSoundsNFuel == 2 || GSoundsWFuel == 3))

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN23@DoOverGSpe
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1000], 2
	je	SHORT $LN22@DoOverGSpe
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+996], 3
	jne	SHORT $LN23@DoOverGSpe
$LN22@DoOverGSpe:

; 758  : 				mFaults->SetFault(FaultClass::sms_fault,FaultClass::sta5, FaultClass::fail, FALSE);

	push	0
	push	2
	push	33554432				; 02000000H
	push	26					; 0000001aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN23@DoOverGSpe:

; 759  : 			StationFailed(Station5_Fail);

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StationFailed@AircraftClass@@QAEXW4StationFlags@1@@Z ; AircraftClass::StationFailed
$LN24@DoOverGSpe:

; 760  : 		}
; 761  : 		break;

	jmp	$LN50@DoOverGSpe
$LN21@DoOverGSpe:

; 762  : 	case 6:
; 763  : 		damage = rand()%100;

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _damage$[ebp], edx

; 764  : 		if(damage < 95 && !GetStationFailed(Station6_Degr) && !GetStationFailed(Station6_Fail))

	cmp	DWORD PTR _damage$[ebp], 95		; 0000005fH
	jge	SHORT $LN20@DoOverGSpe
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN20@DoOverGSpe
	push	16384					; 00004000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN20@DoOverGSpe

; 765  : 		{
; 766  : 			mFaults->SetFault(FaultClass::sms_fault,FaultClass::sta6, FaultClass::degr, FALSE);

	push	0
	push	1
	push	67108864				; 04000000H
	push	26					; 0000001aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault

; 767  : 			StationFailed(Station6_Degr);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StationFailed@AircraftClass@@QAEXW4StationFlags@1@@Z ; AircraftClass::StationFailed

; 768  : 		}
; 769  : 		else

	jmp	SHORT $LN19@DoOverGSpe
$LN20@DoOverGSpe:

; 770  : 		{
; 771  : 			if(!GetStationFailed(Station6_Fail) && (GSoundsNFuel == 2 || GSoundsWFuel == 3)) 

	push	16384					; 00004000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN18@DoOverGSpe
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1000], 2
	je	SHORT $LN17@DoOverGSpe
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+996], 3
	jne	SHORT $LN18@DoOverGSpe
$LN17@DoOverGSpe:

; 772  : 				mFaults->SetFault(FaultClass::sms_fault,FaultClass::sta6, FaultClass::fail, FALSE);

	push	0
	push	2
	push	67108864				; 04000000H
	push	26					; 0000001aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN18@DoOverGSpe:

; 773  : 			StationFailed(Station6_Fail);

	push	16384					; 00004000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StationFailed@AircraftClass@@QAEXW4StationFlags@1@@Z ; AircraftClass::StationFailed
$LN19@DoOverGSpe:

; 774  : 		}
; 775  : 		break;

	jmp	$LN50@DoOverGSpe
$LN16@DoOverGSpe:

; 776  : 	case 7:
; 777  : 		damage = rand()%100;

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _damage$[ebp], edx

; 778  : 		if(damage < 95 && !GetStationFailed(Station7_Degr) && !GetStationFailed(Station7_Fail))

	cmp	DWORD PTR _damage$[ebp], 95		; 0000005fH
	jge	SHORT $LN15@DoOverGSpe
	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN15@DoOverGSpe
	push	32768					; 00008000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN15@DoOverGSpe

; 779  : 		{
; 780  : 			mFaults->SetFault(FaultClass::sms_fault,FaultClass::sta7, FaultClass::degr, FALSE);

	push	0
	push	1
	push	134217728				; 08000000H
	push	26					; 0000001aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault

; 781  : 			StationFailed(Station7_Degr);

	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StationFailed@AircraftClass@@QAEXW4StationFlags@1@@Z ; AircraftClass::StationFailed

; 782  : 		}
; 783  : 		else

	jmp	SHORT $LN14@DoOverGSpe
$LN15@DoOverGSpe:

; 784  : 		{
; 785  : 			if(!GetStationFailed(Station7_Fail) && (GSoundsNFuel == 2 || GSoundsWFuel == 3))

	push	32768					; 00008000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN13@DoOverGSpe
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1000], 2
	je	SHORT $LN12@DoOverGSpe
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+996], 3
	jne	SHORT $LN13@DoOverGSpe
$LN12@DoOverGSpe:

; 786  : 				mFaults->SetFault(FaultClass::sms_fault,FaultClass::sta7, FaultClass::fail, FALSE);

	push	0
	push	2
	push	134217728				; 08000000H
	push	26					; 0000001aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN13@DoOverGSpe:

; 787  : 			StationFailed(Station7_Fail);

	push	32768					; 00008000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StationFailed@AircraftClass@@QAEXW4StationFlags@1@@Z ; AircraftClass::StationFailed
$LN14@DoOverGSpe:

; 788  : 		}
; 789  : 		break;

	jmp	$LN50@DoOverGSpe
$LN11@DoOverGSpe:

; 790  : 	case 8:
; 791  : 		damage = rand()%100;

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _damage$[ebp], edx

; 792  : 		if(damage < 95  && !GetStationFailed(Station8_Degr) && !GetStationFailed(Station8_Fail))

	cmp	DWORD PTR _damage$[ebp], 95		; 0000005fH
	jge	SHORT $LN10@DoOverGSpe
	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN10@DoOverGSpe
	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN10@DoOverGSpe

; 793  : 		{
; 794  : 			mFaults->SetFault(FaultClass::sms_fault,FaultClass::sta8, FaultClass::degr, FALSE);

	push	0
	push	1
	push	268435456				; 10000000H
	push	26					; 0000001aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault

; 795  : 			StationFailed(Station8_Degr);

	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StationFailed@AircraftClass@@QAEXW4StationFlags@1@@Z ; AircraftClass::StationFailed

; 796  : 		}
; 797  : 		else

	jmp	SHORT $LN9@DoOverGSpe
$LN10@DoOverGSpe:

; 798  : 		{
; 799  : 			if(!GetStationFailed(Station8_Fail) && (GSoundsNFuel == 2 || GSoundsWFuel == 3))

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN8@DoOverGSpe
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1000], 2
	je	SHORT $LN7@DoOverGSpe
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+996], 3
	jne	SHORT $LN8@DoOverGSpe
$LN7@DoOverGSpe:

; 800  : 				mFaults->SetFault(FaultClass::sms_fault,FaultClass::sta8, FaultClass::fail, FALSE);

	push	0
	push	2
	push	268435456				; 10000000H
	push	26					; 0000001aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN8@DoOverGSpe:

; 801  : 			StationFailed(Station8_Fail);

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StationFailed@AircraftClass@@QAEXW4StationFlags@1@@Z ; AircraftClass::StationFailed
$LN9@DoOverGSpe:

; 802  : 		}
; 803  : 		break;

	jmp	$LN50@DoOverGSpe
$LN6@DoOverGSpe:

; 804  : 	case 9:
; 805  : 		damage = rand()%100;

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _damage$[ebp], edx

; 806  : 		if(damage < 95 && !GetStationFailed(Station9_Degr) && !GetStationFailed(Station9_Fail))

	cmp	DWORD PTR _damage$[ebp], 95		; 0000005fH
	jge	SHORT $LN5@DoOverGSpe
	push	256					; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN5@DoOverGSpe
	push	131072					; 00020000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN5@DoOverGSpe

; 807  : 		{
; 808  : 			mFaults->SetFault(FaultClass::sms_fault,FaultClass::sta9, FaultClass::degr, FALSE);

	push	0
	push	1
	push	536870912				; 20000000H
	push	26					; 0000001aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault

; 809  : 			StationFailed(Station9_Degr);

	push	256					; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StationFailed@AircraftClass@@QAEXW4StationFlags@1@@Z ; AircraftClass::StationFailed

; 810  : 		}
; 811  : 		else

	jmp	SHORT $LN50@DoOverGSpe
$LN5@DoOverGSpe:

; 812  : 		{
; 813  : 			if(!GetStationFailed(Station9_Fail) && (GSoundsNFuel == 2 || GSoundsWFuel == 3))

	push	131072					; 00020000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStationFailed@AircraftClass@@QAEHW4StationFlags@1@@Z ; AircraftClass::GetStationFailed
	test	eax, eax
	jne	SHORT $LN3@DoOverGSpe
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1000], 2
	je	SHORT $LN2@DoOverGSpe
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+996], 3
	jne	SHORT $LN3@DoOverGSpe
$LN2@DoOverGSpe:

; 814  : 				mFaults->SetFault(FaultClass::sms_fault,FaultClass::sta9, FaultClass::fail, FALSE);

	push	0
	push	2
	push	536870912				; 20000000H
	push	26					; 0000001aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN3@DoOverGSpe:

; 815  : 			StationFailed(Station9_Fail);

	push	131072					; 00020000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StationFailed@AircraftClass@@QAEXW4StationFlags@1@@Z ; AircraftClass::StationFailed
$LN50@DoOverGSpe:

; 816  : 		}
; 817  : 		break;
; 818  : 	default:
; 819  : 		break;
; 820  : 	}
; 821  : }

	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN52@DoOverGSpe:
	DD	$LN46@DoOverGSpe
	DD	$LN41@DoOverGSpe
	DD	$LN36@DoOverGSpe
	DD	$LN31@DoOverGSpe
	DD	$LN26@DoOverGSpe
	DD	$LN21@DoOverGSpe
	DD	$LN16@DoOverGSpe
	DD	$LN11@DoOverGSpe
	DD	$LN6@DoOverGSpe
?DoOverGSpeedDamage@AircraftClass@@QAEXH@Z ENDP		; AircraftClass::DoOverGSpeedDamage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\cautions.cpp
_TEXT	SEGMENT
tv299 = -20						; size = 4
tv292 = -16						; size = 4
tv277 = -12						; size = 4
tv270 = -8						; size = 4
_this$ = -4						; size = 4
?CheckForOverSpeed@AircraftClass@@QAEXXZ PROC		; AircraftClass::CheckForOverSpeed
; _this$ = ecx

; 617  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 618  : 	if(af->curMaxGs == 5.5 && GetKias() > af->curMaxStoreSpeed)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	cvtss2sd xmm0, DWORD PTR [ecx+1244]
	ucomisd	xmm0, QWORD PTR __real@4016000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	$LN12@CheckForOv
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+224]
	call	edx
	fstp	DWORD PTR tv270[ebp]
	movss	xmm0, DWORD PTR tv270[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	comiss	xmm0, DWORD PTR [ecx+1612]
	jbe	SHORT $LN12@CheckForOv

; 619  : 	{
; 620  : 		SSounds();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SSounds@AircraftClass@@QAEXXZ		; AircraftClass::SSounds

; 621  : 		
; 622  : 		if (GetKias() > af->curMaxStoreSpeed + SpeedToleranceBombs)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+224]
	call	edx
	fstp	DWORD PTR tv277[ebp]
	movss	xmm0, DWORD PTR tv277[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [edx+1528]
	addss	xmm1, DWORD PTR [ecx+1612]
	comiss	xmm0, xmm1
	jbe	SHORT $LN12@CheckForOv

; 623  : 		{
; 624  : 			StoreToDamage(wcRocketWpn);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StoreToDamage@AircraftClass@@QAEXW4WeaponClass@@@Z ; AircraftClass::StoreToDamage

; 625  : 			StoreToDamage(wcBombWpn);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StoreToDamage@AircraftClass@@QAEXW4WeaponClass@@@Z ; AircraftClass::StoreToDamage

; 626  : 			StoreToDamage(wcAgmWpn);

	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StoreToDamage@AircraftClass@@QAEXW4WeaponClass@@@Z ; AircraftClass::StoreToDamage

; 627  : 			StoreToDamage(wcHARMWpn);

	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StoreToDamage@AircraftClass@@QAEXW4WeaponClass@@@Z ; AircraftClass::StoreToDamage

; 628  : 			StoreToDamage(wcSamWpn);

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StoreToDamage@AircraftClass@@QAEXW4WeaponClass@@@Z ; AircraftClass::StoreToDamage

; 629  : 			StoreToDamage(wcGbuWpn);

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StoreToDamage@AircraftClass@@QAEXW4WeaponClass@@@Z ; AircraftClass::StoreToDamage
$LN12@CheckForOv:

; 630  : 		}
; 631  : 	}
; 632  : 
; 633  : 	if((af->curMaxGs == 7.0 || af->curMaxGs == 6.5) && GetKias() > af->curMaxStoreSpeed)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	cvtss2sd xmm0, DWORD PTR [ecx+1244]
	ucomisd	xmm0, QWORD PTR __real@401c000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN10@CheckForOv
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	cvtss2sd xmm0, DWORD PTR [eax+1244]
	ucomisd	xmm0, QWORD PTR __real@401a000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN9@CheckForOv
$LN10@CheckForOv:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+224]
	call	eax
	fstp	DWORD PTR tv292[ebp]
	movss	xmm0, DWORD PTR tv292[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	comiss	xmm0, DWORD PTR [edx+1612]
	jbe	SHORT $LN9@CheckForOv

; 634  : 	{
; 635  : 		GSounds();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GSounds@AircraftClass@@QAEXXZ		; AircraftClass::GSounds

; 636  : 
; 637  : 		if(GetKias() > af->curMaxStoreSpeed + SpeedToleranceTanks)

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+224]
	call	eax
	fstp	DWORD PTR tv299[ebp]
	movss	xmm0, DWORD PTR tv299[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [eax+1524]
	addss	xmm1, DWORD PTR [edx+1612]
	comiss	xmm0, xmm1
	jbe	SHORT $LN9@CheckForOv

; 638  : 			StoreToDamage(wcTank);

	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StoreToDamage@AircraftClass@@QAEXW4WeaponClass@@@Z ; AircraftClass::StoreToDamage
$LN9@CheckForOv:

; 639  : 	}
; 640  : 
; 641  : 	//TJL 11/03/03 Adding VNE violation
; 642  : 	if (af->vcas > af->maxVcas)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR [edx+1124]
	comiss	xmm0, DWORD PTR [ecx+80]
	jbe	$LN1@CheckForOv

; 643  : 	{
; 644  : 		//F4SoundFXSetDist(af->auxaeroData->sndOverSpeed2, TRUE, 0.0f, (GetKias() - af->maxVcas) / 10);
; 645  : 		//SoundPos.Sfx(af->auxaeroData->sndOverSpeed2, 0, (GetKias() - af->maxVcas) / 10, 0); // MLR 5/16/2004 - 
; 646  : 		if (af->vcas > (af->maxVcas + (af->maxVcas * 0.05)))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	cvtss2sd xmm0, DWORD PTR [eax+1124]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	cvtss2sd xmm1, DWORD PTR [edx+80]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	cvtss2sd xmm2, DWORD PTR [ecx+80]
	mulsd	xmm2, QWORD PTR __real@3fa999999999999a
	addsd	xmm1, xmm2
	comisd	xmm0, xmm1
	jbe	$LN1@CheckForOv

; 647  : 		{
; 648  : 			DamageSounds();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DamageSounds@AircraftClass@@QAEXXZ	; AircraftClass::DamageSounds

; 649  : 			//TJL 05/30/04 added more damage modeling
; 650  : 			if(!mFaults->GetFault(FaultClass::flcs_fault))

	push	13					; 0000000dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN6@CheckForOv

; 651  : 			{
; 652  : 				mFaults->SetFault(FaultClass::flcs_fault,FaultClass::dual, FaultClass::fail, FALSE);

	push	0
	push	2
	push	32					; 00000020H
	push	13					; 0000000dH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
$LN6@CheckForOv:

; 653  : 			}
; 654  : 			if (pctStrength > 0.0f)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+292]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN5@CheckForOv

; 655  : 			{
; 656  : 				pctStrength -= 0.25f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+292]
	subss	xmm0, DWORD PTR __real@3e800000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+292], xmm0
$LN5@CheckForOv:

; 657  : 			}
; 658  : 			if(rand()%100 < 20)

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	cmp	edx, 20					; 00000014H
	jge	SHORT $LN4@CheckForOv

; 659  : 			{
; 660  : 				CanopyDamaged = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+852], 1
$LN4@CheckForOv:

; 661  : 			}
; 662  : 			if(rand()%100 < 25 && !LEFState(RT_LEF_OUT))

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	cmp	edx, 25					; 00000019H
	jge	SHORT $LN1@CheckForOv
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFState@AircraftClass@@QAEHW4LEFStateFlags@1@@Z ; AircraftClass::LEFState
	test	eax, eax
	jne	SHORT $LN1@CheckForOv

; 663  : 			{
; 664  : 				if(LEFState(RT_LEF_DAMAGED))

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFState@AircraftClass@@QAEHW4LEFStateFlags@1@@Z ; AircraftClass::LEFState
	test	eax, eax
	je	SHORT $LN2@CheckForOv

; 665  : 				{
; 666  : 					LEFOn(RT_LEF_OUT);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFOn@AircraftClass@@QAEXW4LEFStateFlags@1@@Z ; AircraftClass::LEFOn

; 667  : 					RTLEFAOA = -20.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c1a00000
	movss	DWORD PTR [edx+860], xmm0

; 668  : 				}
; 669  : 				else

	jmp	SHORT $LN1@CheckForOv
$LN2@CheckForOv:

; 670  : 				{
; 671  : 					LEFOn(RT_LEF_DAMAGED);

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFOn@AircraftClass@@QAEXW4LEFStateFlags@1@@Z ; AircraftClass::LEFOn

; 672  : 					RTLEFAOA = -20.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c1a00000
	movss	DWORD PTR [eax+860], xmm0

; 673  : 					LEFOn(RT_LEF_OUT);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFOn@AircraftClass@@QAEXW4LEFStateFlags@1@@Z ; AircraftClass::LEFOn

; 674  : 					LEFOn(LEFSASYNCH);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LEFOn@AircraftClass@@QAEXW4LEFStateFlags@1@@Z ; AircraftClass::LEFOn
$LN1@CheckForOv:

; 675  : 				}
; 676  : 			}
; 677  : 			
; 678  : 		}
; 679  : 	}
; 680  : 	//end VNE violation
; 681  : 
; 682  : 
; 683  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CheckForOverSpeed@AircraftClass@@QAEXXZ ENDP		; AircraftClass::CheckForOverSpeed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\aircraft\cautions.cpp
_TEXT	SEGMENT
tv254 = -20						; size = 4
tv245 = -16						; size = 4
tv230 = -12						; size = 4
tv218 = -8						; size = 4
_this$ = -4						; size = 4
?CheckForOverG@AircraftClass@@QAEXXZ PROC		; AircraftClass::CheckForOverG
; _this$ = ecx

; 585  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 	//check for bombs etc
; 587  : 	if(GetNz() > af->curMaxGs)

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+424]
	call	eax
	fstp	DWORD PTR tv218[ebp]
	movss	xmm0, DWORD PTR tv218[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	comiss	xmm0, DWORD PTR [edx+1244]
	jbe	$LN8@CheckForOv

; 588  : 	{
; 589  : 		if (this == FalconLocalSession->GetPlayerEntity()){

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ; FalconSessionEntity::GetPlayerEntity
	cmp	DWORD PTR _this$[ebp], eax
	jne	SHORT $LN7@CheckForOv

; 590  : 		     g_intellivibeData.IsOverG = true;

	mov	BYTE PTR ?g_intellivibeData@@3VIntellivibeData@@A+18, 1
$LN7@CheckForOv:

; 591  : 		}
; 592  : 		//let us know we're approaching overG
; 593  : 		GSounds();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GSounds@AircraftClass@@QAEXXZ		; AircraftClass::GSounds

; 594  : 
; 595  : 		if (af->curMaxGs == 5.5 && GetNz() > af->curMaxGs + GToleranceBombs)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	cvtss2sd xmm0, DWORD PTR [ecx+1244]
	ucomisd	xmm0, QWORD PTR __real@4016000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN6@CheckForOv
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+424]
	call	edx
	fstp	DWORD PTR tv230[ebp]
	movss	xmm0, DWORD PTR tv230[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+1244]
	addss	xmm1, DWORD PTR [edx+1536]
	comiss	xmm0, xmm1
	jbe	SHORT $LN6@CheckForOv

; 596  : 		{
; 597  : 			StoreToDamage(wcRocketWpn);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StoreToDamage@AircraftClass@@QAEXW4WeaponClass@@@Z ; AircraftClass::StoreToDamage

; 598  : 			StoreToDamage(wcBombWpn);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StoreToDamage@AircraftClass@@QAEXW4WeaponClass@@@Z ; AircraftClass::StoreToDamage

; 599  : 			StoreToDamage(wcAgmWpn);

	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StoreToDamage@AircraftClass@@QAEXW4WeaponClass@@@Z ; AircraftClass::StoreToDamage

; 600  : 			StoreToDamage(wcHARMWpn);

	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StoreToDamage@AircraftClass@@QAEXW4WeaponClass@@@Z ; AircraftClass::StoreToDamage

; 601  : 			StoreToDamage(wcSamWpn);

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StoreToDamage@AircraftClass@@QAEXW4WeaponClass@@@Z ; AircraftClass::StoreToDamage

; 602  : 			StoreToDamage(wcGbuWpn);

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StoreToDamage@AircraftClass@@QAEXW4WeaponClass@@@Z ; AircraftClass::StoreToDamage
$LN6@CheckForOv:

; 603  : 		}
; 604  : 
; 605  : 		//Tanks have 7G
; 606  : 		if ((af->curMaxGs == 7.0 || af->curMaxGs == 6.5) && GetNz() > af->curMaxGs + GToleranceTanks)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	cvtss2sd xmm0, DWORD PTR [ecx+1244]
	ucomisd	xmm0, QWORD PTR __real@401c000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN4@CheckForOv
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	cvtss2sd xmm0, DWORD PTR [eax+1244]
	ucomisd	xmm0, QWORD PTR __real@401a000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@CheckForOv
$LN4@CheckForOv:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+424]
	call	eax
	fstp	DWORD PTR tv245[ebp]
	movss	xmm0, DWORD PTR tv245[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1244]
	addss	xmm1, DWORD PTR [eax+1532]
	comiss	xmm0, xmm1
	jbe	SHORT $LN3@CheckForOv

; 607  : 			if(GetNz() > af->curMaxGs + GToleranceTanks)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+424]
	call	eax
	fstp	DWORD PTR tv254[ebp]
	movss	xmm0, DWORD PTR tv254[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1244]
	addss	xmm1, DWORD PTR [eax+1532]
	comiss	xmm0, xmm1
	jbe	SHORT $LN3@CheckForOv

; 608  : 				StoreToDamage(wcTank);

	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StoreToDamage@AircraftClass@@QAEXW4WeaponClass@@@Z ; AircraftClass::StoreToDamage
$LN3@CheckForOv:

; 609  : 	}
; 610  : 	else {

	jmp	SHORT $LN1@CheckForOv
$LN8@CheckForOv:

; 611  : 	    if (this == FalconLocalSession->GetPlayerEntity())

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ; FalconSessionEntity::GetPlayerEntity
	cmp	DWORD PTR _this$[ebp], eax
	jne	SHORT $LN1@CheckForOv

; 612  : 		g_intellivibeData.IsOverG = false;

	mov	BYTE PTR ?g_intellivibeData@@3VIntellivibeData@@A+18, 0
$LN1@CheckForOv:

; 613  : 	}
; 614  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CheckForOverG@AircraftClass@@QAEXXZ ENDP		; AircraftClass::CheckForOverG
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simmover.h
;	COMDAT ?GetDOFValue@SimMoverClass@@QAEMH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_dof$ = 8						; size = 4
?GetDOFValue@SimMoverClass@@QAEMH@Z PROC		; SimMoverClass::GetDOFValue, COMDAT
; _this$ = ecx

; 132  : 	float GetDOFValue (int dof) { ShiAssert(dof < numDofs); return dof < numDofs ? DOFData[dof] : 0;}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dof$[ebp]
	cmp	ecx, DWORD PTR [eax+600]
	jge	SHORT $LN3@GetDOFValu
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+612]
	mov	ecx, DWORD PTR _dof$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4]
	movss	DWORD PTR tv69[ebp], xmm0
	jmp	SHORT $LN4@GetDOFValu
$LN3@GetDOFValu:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv69[ebp], xmm0
$LN4@GetDOFValu:
	fld	DWORD PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetDOFValue@SimMoverClass@@QAEMH@Z ENDP		; SimMoverClass::GetDOFValue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsSetFlag@SimBaseClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFlag@SimBaseClass@@QBEHH@Z PROC			; SimBaseClass::IsSetFlag, COMDAT
; _this$ = ecx

; 178  : 	int  IsSetFlag(int flag) const { return ((specialData.flags & flag) ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsSetFlag
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSetFlag
$LN3@IsSetFlag:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSetFlag:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFlag@SimBaseClass@@QBEHH@Z ENDP			; SimBaseClass::IsSetFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsPlayer@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPlayer@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsPlayer, COMDAT
; _this$ = ecx

; 113  : 	int IsPlayer (void)							{ return IsSetFalcFlag(FEC_HASPLAYERS); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetFalcFlag@FalconEntity@@QAEHH@Z	; FalconEntity::IsSetFalcFlag
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPlayer@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsPlayer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSetFalcFlag@FalconEntity@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z PROC		; FalconEntity::IsSetFalcFlag, COMDAT
; _this$ = ecx

; 112  : 	int IsSetFalcFlag (int flag)				{ return falconFlags & flag; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+136]
	and	eax, DWORD PTR _flag$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z ENDP		; FalconEntity::IsSetFalcFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZDelta@VuEntity@@QBEMXZ PROC				; VuEntity::ZDelta, COMDAT
; _this$ = ecx

; 163  : 	SM_SCALAR ZDelta() const { return pos_.dz_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::ZDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
END
