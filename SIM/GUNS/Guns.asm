; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\GUNS\Guns.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?acmiTracer@@3UACMITracerStartRecord@@A		; acmiTracer
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
_BSS	SEGMENT
?acmiTracer@@3UACMITracerStartRecord@@A DB 01dH DUP (?)	; acmiTracer
_BSS	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
CONST	SEGMENT
_NEAR_CLIP DD	03f800000r			; 1
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?Type@VuEntity@@QBEGXZ				; VuEntity::Type
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?XDelta@VuEntity@@QBEMXZ			; VuEntity::XDelta
PUBLIC	?YDelta@VuEntity@@QBEMXZ			; VuEntity::YDelta
PUBLIC	?ZDelta@VuEntity@@QBEMXZ			; VuEntity::ZDelta
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?RequestOutOfBandTransmit@VuMessage@@QAEXXZ	; VuMessage::RequestOutOfBandTransmit
PUBLIC	?IsCampBase@FalconEntity@@UAE_NXZ		; FalconEntity::IsCampBase
PUBLIC	?IsSim@FalconEntity@@QAEHXZ			; FalconEntity::IsSim
PUBLIC	?GetRadarMode@FalconEntity@@UAEHXZ		; FalconEntity::GetRadarMode
PUBLIC	?SetRadarMode@FalconEntity@@UAEXE@Z		; FalconEntity::SetRadarMode
PUBLIC	?ReturnToSearch@FalconEntity@@UAEXXZ		; FalconEntity::ReturnToSearch
PUBLIC	?SetSearchMode@FalconEntity@@UAEXE@Z		; FalconEntity::SetSearchMode
PUBLIC	?CombatClass@FalconEntity@@UAEHXZ		; FalconEntity::CombatClass
PUBLIC	?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z	; FalconEntity::HasEntity
PUBLIC	?IsMissile@FalconEntity@@UAEHXZ			; FalconEntity::IsMissile
PUBLIC	?IsLauncher@FalconEntity@@UAEHXZ		; FalconEntity::IsLauncher
PUBLIC	?IsBomb@FalconEntity@@UAEHXZ			; FalconEntity::IsBomb
PUBLIC	?IsVehicle@FalconEntity@@UAEHXZ			; FalconEntity::IsVehicle
PUBLIC	?IsStatic@FalconEntity@@UAEHXZ			; FalconEntity::IsStatic
PUBLIC	?IsHelicopter@FalconEntity@@UAEHXZ		; FalconEntity::IsHelicopter
PUBLIC	?IsEject@FalconEntity@@UAEHXZ			; FalconEntity::IsEject
PUBLIC	?IsAirplane@FalconEntity@@UAEHXZ		; FalconEntity::IsAirplane
PUBLIC	?IsGroundVehicle@FalconEntity@@UAEHXZ		; FalconEntity::IsGroundVehicle
PUBLIC	?IsShip@FalconEntity@@UAEHXZ			; FalconEntity::IsShip
PUBLIC	?IsDead@FalconEntity@@UAEHXZ			; FalconEntity::IsDead
PUBLIC	?IsEmitting@FalconEntity@@UAEHXZ		; FalconEntity::IsEmitting
PUBLIC	?IsUnit@FalconEntity@@UAEHXZ			; FalconEntity::IsUnit
PUBLIC	?IsObjective@FalconEntity@@UAEHXZ		; FalconEntity::IsObjective
PUBLIC	?IsBattalion@FalconEntity@@UAEHXZ		; FalconEntity::IsBattalion
PUBLIC	?IsBrigade@FalconEntity@@UAEHXZ			; FalconEntity::IsBrigade
PUBLIC	?IsFlight@FalconEntity@@UBEHXZ			; FalconEntity::IsFlight
PUBLIC	?IsSquadron@FalconEntity@@UAEHXZ		; FalconEntity::IsSquadron
PUBLIC	?IsPackage@FalconEntity@@UAEHXZ			; FalconEntity::IsPackage
PUBLIC	?IsTeam@FalconEntity@@UAEHXZ			; FalconEntity::IsTeam
PUBLIC	?IsTaskForce@FalconEntity@@UAEHXZ		; FalconEntity::IsTaskForce
PUBLIC	?GetRCSFactor@FalconEntity@@UAEMXZ		; FalconEntity::GetRCSFactor
PUBLIC	?GetIRFactor@FalconEntity@@UAEMXZ		; FalconEntity::GetIRFactor
PUBLIC	?SetAQUIREtimer@FalconEntity@@UAEXK@Z		; FalconEntity::SetAQUIREtimer
PUBLIC	?SetSEARCHtimer@FalconEntity@@UAEXK@Z		; FalconEntity::SetSEARCHtimer
PUBLIC	?SetStepSearchMode@FalconEntity@@UAEXE@Z	; FalconEntity::SetStepSearchMode
PUBLIC	?GetAQUIREtimer@FalconEntity@@UAEKXZ		; FalconEntity::GetAQUIREtimer
PUBLIC	?GetSEARCHtimer@FalconEntity@@UAEKXZ		; FalconEntity::GetSEARCHtimer
PUBLIC	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ	; SimObjectType::BaseData
PUBLIC	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	?JoinFlight@SimBaseClass@@UAEXXZ		; SimBaseClass::JoinFlight
PUBLIC	?IsSimBase@SimBaseClass@@UAE_NXZ		; SimBaseClass::IsSimBase
PUBLIC	?GetCountry@SimBaseClass@@UAEEXZ		; SimBaseClass::GetCountry
PUBLIC	?OnGround@SimBaseClass@@UAEHXZ			; SimBaseClass::OnGround
PUBLIC	?IsExploding@SimBaseClass@@UAEHXZ		; SimBaseClass::IsExploding
PUBLIC	?IsDead@SimBaseClass@@UBEHXZ			; SimBaseClass::IsDead
PUBLIC	?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetCampaignFlag
PUBLIC	?GetTransform@SimBaseClass@@UAEXQAY02M@Z	; SimBaseClass::GetTransform
PUBLIC	?MakePlayerVehicle@SimBaseClass@@UAEXXZ		; SimBaseClass::MakePlayerVehicle
PUBLIC	?MakeNonPlayerVehicle@SimBaseClass@@UAEXXZ	; SimBaseClass::MakeNonPlayerVehicle
PUBLIC	?ConfigurePlayerAvionics@SimBaseClass@@UAEXXZ	; SimBaseClass::ConfigurePlayerAvionics
PUBLIC	?SetVuPosition@SimBaseClass@@UAEXXZ		; SimBaseClass::SetVuPosition
PUBLIC	?Regenerate@SimBaseClass@@UAEXMMMM@Z		; SimBaseClass::Regenerate
PUBLIC	?Mass@SimBaseClass@@UAEMXZ			; SimBaseClass::Mass
PUBLIC	?SetLead@SimMoverClass@@UAEXH@Z			; SimMoverClass::SetLead
PUBLIC	?WeaponKeepAlive@SimMoverClass@@UAEXXZ		; SimMoverClass::WeaponKeepAlive
PUBLIC	?IsMover@SimMoverClass@@UAEHXZ			; SimMoverClass::IsMover
PUBLIC	?IsWeapon@SimWeaponClass@@UAEHXZ		; SimWeaponClass::IsWeapon
PUBLIC	?IsUseable@SimWeaponClass@@UAEHXZ		; SimWeaponClass::IsUseable
PUBLIC	?LaunchDelayTime@SimWeaponClass@@UAEHXZ		; SimWeaponClass::LaunchDelayTime
PUBLIC	??0GunClass@@QAE@H@Z				; GunClass::GunClass
PUBLIC	??1GunClass@@UAE@XZ				; GunClass::~GunClass
PUBLIC	?InitData@GunClass@@UAEXXZ			; GunClass::InitData
PUBLIC	?CleanupData@GunClass@@UAEXXZ			; GunClass::CleanupData
PUBLIC	?InitLocalData@GunClass@@AAEXH@Z		; GunClass::InitLocalData
PUBLIC	?CleanupLocalData@GunClass@@AAEXXZ		; GunClass::CleanupLocalData
PUBLIC	?Init@GunClass@@QAEXMH@Z			; GunClass::Init
PUBLIC	?SetPosition@GunClass@@QAEXMMMMM@Z		; GunClass::SetPosition
PUBLIC	?Exec@GunClass@@QAEHPAHQAY02MPAVObjectGeometry@@PAVSimObjectType@@H@Z ; GunClass::Exec
PUBLIC	?GetCurrentBurst@GunClass@@QAEHXZ		; GunClass::GetCurrentBurst
PUBLIC	?IsGun@GunClass@@UAEHXZ				; GunClass::IsGun
PUBLIC	??_GGunClass@@UAEPAXI@Z				; GunClass::`scalar deleting destructor'
PUBLIC	?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ; FalconSessionEntity::GetPlayerEntity
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?DisplayInCockpit@OTWDriverClass@@QAEHXZ	; OTWDriverClass::DisplayInCockpit
PUBLIC	?GenerateFastRandom@@YAJXZ			; GenerateFastRandom
PUBLIC	?PRANDFloat@@YAMXZ				; PRANDFloat
PUBLIC	?PRANDFloatPos@@YAMXZ				; PRANDFloatPos
PUBLIC	?Radius@DrawableObject@@QBEMXZ			; DrawableObject::Radius
PUBLIC	?GetPosition@DrawableObject@@QAEXPAUTpoint@@@Z	; DrawableObject::GetPosition
PUBLIC	?IsRecording@ACMIRecorder@@QAEHXZ		; ACMIRecorder::IsRecording
PUBLIC	?BulletSphereHit@@YAMPAUvector@@00M0@Z		; BulletSphereHit
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7GunClass@@6B@				; GunClass::`vftable'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA	; `GenerateFastRandom'::`2'::LastRandom
PUBLIC	??_C@_0M@KPOKADOG@30mm?5AAA?5HE?$AA@		; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4GunClass@@6B@				; GunClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVGunClass@@@8				; GunClass `RTTI Type Descriptor'
PUBLIC	??_R3GunClass@@8				; GunClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2GunClass@@8				; GunClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@GunClass@@8			; GunClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@SimWeaponClass@@8			; SimWeaponClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSimWeaponClass@@@8			; SimWeaponClass `RTTI Type Descriptor'
PUBLIC	??_R3SimWeaponClass@@8				; SimWeaponClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SimWeaponClass@@8				; SimWeaponClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SimMoverClass@@8			; SimMoverClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSimMoverClass@@@8			; SimMoverClass `RTTI Type Descriptor'
PUBLIC	??_R3SimMoverClass@@8				; SimMoverClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SimMoverClass@@8				; SimMoverClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SimBaseClass@@8			; SimBaseClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSimBaseClass@@@8			; SimBaseClass `RTTI Type Descriptor'
PUBLIC	??_R3SimBaseClass@@8				; SimBaseClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SimBaseClass@@8				; SimBaseClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FalconEntity@@8			; FalconEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVFalconEntity@@@8			; FalconEntity `RTTI Type Descriptor'
PUBLIC	??_R3FalconEntity@@8				; FalconEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FalconEntity@@8				; FalconEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VuEntity@@8			; VuEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVVuEntity@@@8				; VuEntity `RTTI Type Descriptor'
PUBLIC	??_R3VuEntity@@8				; VuEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VuEntity@@8				; VuEntity::`RTTI Base Class Array'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@38091470
PUBLIC	__real@3a83126f
PUBLIC	__real@3da3d70a
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e99999a
PUBLIC	__real@3ecccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@3fc00000
PUBLIC	__real@3fd9999a
PUBLIC	__real@40000000
PUBLIC	__real@40200000
PUBLIC	__real@40800000
PUBLIC	__real@40c66666
PUBLIC	__real@41000000
PUBLIC	__real@41400000
PUBLIC	__real@4171999a
PUBLIC	__real@41c80000
PUBLIC	__real@41f00000
PUBLIC	__real@4200b53f
PUBLIC	__real@42700000
PUBLIC	__real@42c80000
PUBLIC	__real@44bb8000
PUBLIC	__real@451c4000
PUBLIC	__real@45bb8000
PUBLIC	__real@466d5a1c
PUBLIC	__real@46fffe00
PUBLIC	__real@477fff00
PUBLIC	__real@be4ccccd
PUBLIC	__real@bf800000
PUBLIC	__real@c1700000
PUBLIC	__real@c1a00000
PUBLIC	__real@c2200000
PUBLIC	__real@c2480000
PUBLIC	__real@c47a0000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_fabs:PROC
EXTRN	_rand:PROC
EXTRN	_memcpy:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?CustomCollisionCheck@VuEntity@@UAEEPAV1@M@Z:PROC ; VuEntity::CustomCollisionCheck
EXTRN	?TerrainCollisionCheck@VuEntity@@UAEEXZ:PROC	; VuEntity::TerrainCollisionCheck
EXTRN	?IsTarget@VuEntity@@UAEEXZ:PROC			; VuEntity::IsTarget
EXTRN	?IsSession@VuEntity@@UAEEXZ:PROC		; VuEntity::IsSession
EXTRN	?IsGroup@VuEntity@@UAEEXZ:PROC			; VuEntity::IsGroup
EXTRN	?IsGame@VuEntity@@UAEEXZ:PROC			; VuEntity::IsGame
EXTRN	?IsCamera@VuEntity@@UBEEXZ:PROC			; VuEntity::IsCamera
EXTRN	?Handle@VuEntity@@UAEHPAVVuErrorMessage@@@Z:PROC ; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuPushRequest@@@Z:PROC	; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuPullRequest@@@Z:PROC	; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuEvent@@@Z:PROC	; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuEntityCollisionEvent@@@Z:PROC ; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuSessionEvent@@@Z:PROC ; VuEntity::Handle
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetFirst
EXTRN	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetNext
EXTRN	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z:PROC ; VuGridIterator::VuGridIterator
EXTRN	?GetFirst@VuGridIterator@@QAEPAVVuEntity@@XZ:PROC ; VuGridIterator::GetFirst
EXTRN	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ:PROC ; VuGridIterator::GetNext
EXTRN	?GetDomain@FalconEntity@@UAEEXZ:PROC		; FalconEntity::GetDomain
EXTRN	?GetDamageModifiers@FalconEntity@@UAEPAEXZ:PROC	; FalconEntity::GetDamageModifiers
EXTRN	?FalconSendMessage@@YAXPAVVuMessage@@H@Z:PROC	; FalconSendMessage
EXTRN	?GetTeam@SimBaseClass@@UAEEXZ:PROC		; SimBaseClass::GetTeam
EXTRN	?GetCampID@SimBaseClass@@UAEFXZ:PROC		; SimBaseClass::GetCampID
EXTRN	?GetMovementType@SimBaseClass@@UAE?AW4MoveType@@XZ:PROC ; SimBaseClass::GetMovementType
EXTRN	?IsSPJamming@SimBaseClass@@UAEHXZ:PROC		; SimBaseClass::IsSPJamming
EXTRN	?IsAreaJamming@SimBaseClass@@UAEHXZ:PROC	; SimBaseClass::IsAreaJamming
EXTRN	?HasSPJamming@SimBaseClass@@UAEHXZ:PROC		; SimBaseClass::HasSPJamming
EXTRN	?HasAreaJamming@SimBaseClass@@UAEHXZ:PROC	; SimBaseClass::HasAreaJamming
EXTRN	?ApplyDamage@SimBaseClass@@UAEXPAVFalconDamageMessage@@@Z:PROC ; SimBaseClass::ApplyDamage
EXTRN	?ApplyDeathMessage@SimBaseClass@@UAEXPAVFalconDeathMessage@@@Z:PROC ; SimBaseClass::ApplyDeathMessage
EXTRN	?GetFocusPoint@SimBaseClass@@UAEXAAM00@Z:PROC	; SimBaseClass::GetFocusPoint
EXTRN	?GetP@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetP
EXTRN	?GetQ@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetQ
EXTRN	?GetR@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetR
EXTRN	?GetAlpha@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetAlpha
EXTRN	?GetBeta@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetBeta
EXTRN	?GetNx@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetNx
EXTRN	?GetNy@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetNy
EXTRN	?GetNz@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetNz
EXTRN	?GetGamma@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetGamma
EXTRN	?GetSigma@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetSigma
EXTRN	?GetMu@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetMu
EXTRN	?GetVt@SimMoverClass@@UBEMXZ:PROC		; SimMoverClass::GetVt
EXTRN	?GetKias@SimMoverClass@@UBEMXZ:PROC		; SimMoverClass::GetKias
EXTRN	?InitData@SimMoverClass@@UAEXXZ:PROC		; SimMoverClass::InitData
EXTRN	?Init@SimMoverClass@@UAEXPAVSimInitDataClass@@@Z:PROC ; SimMoverClass::Init
EXTRN	?MakeLocal@SimMoverClass@@UAEXXZ:PROC		; SimMoverClass::MakeLocal
EXTRN	?MakeRemote@SimMoverClass@@UAEXXZ:PROC		; SimMoverClass::MakeRemote
EXTRN	?ChangeOwner@SimMoverClass@@UAEXVVU_ID@@@Z:PROC	; SimMoverClass::ChangeOwner
EXTRN	?FeatureCollision@SimMoverClass@@UAEPAVSimBaseClass@@M@Z:PROC ; SimMoverClass::FeatureCollision
EXTRN	?CheckLOS@SimMoverClass@@UAEHPAVSimObjectType@@@Z:PROC ; SimMoverClass::CheckLOS
EXTRN	?CheckCompositeLOS@SimMoverClass@@UAEHPAVSimObjectType@@@Z:PROC ; SimMoverClass::CheckCompositeLOS
EXTRN	?InsertionCallback@SimMoverClass@@UAEHXZ:PROC	; SimMoverClass::InsertionCallback
EXTRN	?RemovalCallback@SimMoverClass@@UAEHXZ:PROC	; SimMoverClass::RemovalCallback
EXTRN	??0SimWeaponClass@@QAE@H@Z:PROC			; SimWeaponClass::SimWeaponClass
EXTRN	??1SimWeaponClass@@UAE@XZ:PROC			; SimWeaponClass::~SimWeaponClass
EXTRN	?CleanupData@SimWeaponClass@@UAEXXZ:PROC	; SimWeaponClass::CleanupData
EXTRN	?Sleep@SimWeaponClass@@UAEHXZ:PROC		; SimWeaponClass::Sleep
EXTRN	?Wake@SimWeaponClass@@UAEHXZ:PROC		; SimWeaponClass::Wake
EXTRN	?Init@SimWeaponClass@@UAEXXZ:PROC		; SimWeaponClass::Init
EXTRN	?Exec@SimWeaponClass@@UAEHXZ:PROC		; SimWeaponClass::Exec
EXTRN	?SetDead@SimWeaponClass@@UAEXH@Z:PROC		; SimWeaponClass::SetDead
EXTRN	?SaveSize@SimWeaponClass@@UAEHXZ:PROC		; SimWeaponClass::SaveSize
EXTRN	?Save@SimWeaponClass@@UAEHPAPAE@Z:PROC		; SimWeaponClass::Save
EXTRN	?Save@SimWeaponClass@@UAEHPAU_iobuf@@@Z:PROC	; SimWeaponClass::Save
EXTRN	?Handle@SimWeaponClass@@UAEHPAVVuFullUpdateEvent@@@Z:PROC ; SimWeaponClass::Handle
EXTRN	?Handle@SimWeaponClass@@UAEHPAVVuPositionUpdateEvent@@@Z:PROC ; SimWeaponClass::Handle
EXTRN	?Handle@SimWeaponClass@@UAEHPAVVuTransferEvent@@@Z:PROC ; SimWeaponClass::Handle
EXTRN	?GetRadarType@SimWeaponClass@@UAEHXZ:PROC	; SimWeaponClass::GetRadarType
EXTRN	?UpdateTracers@GunClass@@AAEXH@Z:PROC		; GunClass::UpdateTracers
EXTRN	?FireShell@GunClass@@QAEXPAVSimObjectType@@@Z:PROC ; GunClass::FireShell
EXTRN	?UpdateShell@GunClass@@QAEXXZ:PROC		; GunClass::UpdateShell
EXTRN	??_EGunClass@@UAEPAXI@Z:PROC			; GunClass::`vector deleting destructor'
EXTRN	??0FalconDamageMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconDamageMessage::FalconDamageMessage
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z:PROC ; OTWDriverClass::GetGroundLevel
EXTRN	?GetApproxGroundLevel@OTWDriverClass@@QAEMMM@Z:PROC ; OTWDriverClass::GetApproxGroundLevel
EXTRN	?RemoveObject@OTWDriverClass@@QAEXPAVDrawableObject@@H@Z:PROC ; OTWDriverClass::RemoveObject
EXTRN	?GetGroundType@OTWDriverClass@@QAEHMM@Z:PROC	; OTWDriverClass::GetGroundType
EXTRN	?AddParticleEffect@@YAHHPAUTpoint@@0@Z:PROC	; AddParticleEffect
EXTRN	?TracerRecord@ACMIRecorder@@QAEXPAUACMITracerStartRecord@@@Z:PROC ; ACMIRecorder::TracerRecord
EXTRN	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z:PROC ; DrawableParticleSys::PS_AddParticleEx
EXTRN	?PS_KillTrail@DrawableParticleSys@@SAXK@Z:PROC	; DrawableParticleSys::PS_KillTrail
EXTRN	?PS_EmitTrail@DrawableParticleSys@@SAKKHMMMMM@Z:PROC ; DrawableParticleSys::PS_EmitTrail
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?SimLibMajorFrameTime@@3MA:DWORD		; SimLibMajorFrameTime
EXTRN	?SimLibElapsedTime@@3KA:DWORD			; SimLibElapsedTime
EXTRN	?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A:DWORD ; Falcon4ClassTable
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ObjProxList@@3PAVVuGridTree@@A:DWORD		; ObjProxList
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?gSfxLOD@@3MA:DWORD				; gSfxLOD
EXTRN	?gACMIRec@@3VACMIRecorder@@A:BYTE		; gACMIRec
EXTRN	?g_intellivibeData@@3VIntellivibeData@@A:BYTE	; g_intellivibeData
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA
_BSS	SEGMENT
?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA DD 01H DUP (?) ; `GenerateFastRandom'::`2'::LastRandom
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@c47a0000
CONST	SEGMENT
__real@c47a0000 DD 0c47a0000r			; -1000
CONST	ENDS
;	COMDAT __real@c2480000
CONST	SEGMENT
__real@c2480000 DD 0c2480000r			; -50
CONST	ENDS
;	COMDAT __real@c2200000
CONST	SEGMENT
__real@c2200000 DD 0c2200000r			; -40
CONST	ENDS
;	COMDAT __real@c1a00000
CONST	SEGMENT
__real@c1a00000 DD 0c1a00000r			; -20
CONST	ENDS
;	COMDAT __real@c1700000
CONST	SEGMENT
__real@c1700000 DD 0c1700000r			; -15
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@be4ccccd
CONST	SEGMENT
__real@be4ccccd DD 0be4ccccdr			; -0.2
CONST	ENDS
;	COMDAT __real@477fff00
CONST	SEGMENT
__real@477fff00 DD 0477fff00r			; 65535
CONST	ENDS
;	COMDAT __real@46fffe00
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
CONST	ENDS
;	COMDAT __real@466d5a1c
CONST	SEGMENT
__real@466d5a1c DD 0466d5a1cr			; 15190.5
CONST	ENDS
;	COMDAT __real@45bb8000
CONST	SEGMENT
__real@45bb8000 DD 045bb8000r			; 6000
CONST	ENDS
;	COMDAT __real@451c4000
CONST	SEGMENT
__real@451c4000 DD 0451c4000r			; 2500
CONST	ENDS
;	COMDAT __real@44bb8000
CONST	SEGMENT
__real@44bb8000 DD 044bb8000r			; 1500
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@4200b53f
CONST	SEGMENT
__real@4200b53f DD 04200b53fr			; 32.177
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@41c80000
CONST	SEGMENT
__real@41c80000 DD 041c80000r			; 25
CONST	ENDS
;	COMDAT __real@4171999a
CONST	SEGMENT
__real@4171999a DD 04171999ar			; 15.1
CONST	ENDS
;	COMDAT __real@41400000
CONST	SEGMENT
__real@41400000 DD 041400000r			; 12
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40c66666
CONST	SEGMENT
__real@40c66666 DD 040c66666r			; 6.2
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40200000
CONST	SEGMENT
__real@40200000 DD 040200000r			; 2.5
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fd9999a
CONST	SEGMENT
__real@3fd9999a DD 03fd9999ar			; 1.7
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3da3d70a
CONST	SEGMENT
__real@3da3d70a DD 03da3d70ar			; 0.08
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@38091470
CONST	SEGMENT
__real@38091470 DD 038091470r			; 3.26824e-005
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2VuEntity@@8
rdata$r	SEGMENT
??_R2VuEntity@@8 DD FLAT:??_R1A@?0A@EA@VuEntity@@8	; VuEntity::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3VuEntity@@8
rdata$r	SEGMENT
??_R3VuEntity@@8 DD 00H					; VuEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVuEntity@@@8
_DATA	SEGMENT
??_R0?AVVuEntity@@@8 DD FLAT:??_7type_info@@6B@		; VuEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVuEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@VuEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VuEntity@@8 DD FLAT:??_R0?AVVuEntity@@@8	; VuEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2FalconEntity@@8
rdata$r	SEGMENT
??_R2FalconEntity@@8 DD FLAT:??_R1A@?0A@EA@FalconEntity@@8 ; FalconEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3FalconEntity@@8
rdata$r	SEGMENT
??_R3FalconEntity@@8 DD 00H				; FalconEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FalconEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFalconEntity@@@8
_DATA	SEGMENT
??_R0?AVFalconEntity@@@8 DD FLAT:??_7type_info@@6B@	; FalconEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFalconEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@FalconEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FalconEntity@@8 DD FLAT:??_R0?AVFalconEntity@@@8 ; FalconEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FalconEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2SimBaseClass@@8
rdata$r	SEGMENT
??_R2SimBaseClass@@8 DD FLAT:??_R1A@?0A@EA@SimBaseClass@@8 ; SimBaseClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3SimBaseClass@@8
rdata$r	SEGMENT
??_R3SimBaseClass@@8 DD 00H				; SimBaseClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2SimBaseClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSimBaseClass@@@8
_DATA	SEGMENT
??_R0?AVSimBaseClass@@@8 DD FLAT:??_7type_info@@6B@	; SimBaseClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSimBaseClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@SimBaseClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SimBaseClass@@8 DD FLAT:??_R0?AVSimBaseClass@@@8 ; SimBaseClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SimBaseClass@@8
rdata$r	ENDS
;	COMDAT ??_R2SimMoverClass@@8
rdata$r	SEGMENT
??_R2SimMoverClass@@8 DD FLAT:??_R1A@?0A@EA@SimMoverClass@@8 ; SimMoverClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SimBaseClass@@8
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3SimMoverClass@@8
rdata$r	SEGMENT
??_R3SimMoverClass@@8 DD 00H				; SimMoverClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2SimMoverClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSimMoverClass@@@8
_DATA	SEGMENT
??_R0?AVSimMoverClass@@@8 DD FLAT:??_7type_info@@6B@	; SimMoverClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSimMoverClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@SimMoverClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SimMoverClass@@8 DD FLAT:??_R0?AVSimMoverClass@@@8 ; SimMoverClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SimMoverClass@@8
rdata$r	ENDS
;	COMDAT ??_R2SimWeaponClass@@8
rdata$r	SEGMENT
??_R2SimWeaponClass@@8 DD FLAT:??_R1A@?0A@EA@SimWeaponClass@@8 ; SimWeaponClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SimMoverClass@@8
	DD	FLAT:??_R1A@?0A@EA@SimBaseClass@@8
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3SimWeaponClass@@8
rdata$r	SEGMENT
??_R3SimWeaponClass@@8 DD 00H				; SimWeaponClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2SimWeaponClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSimWeaponClass@@@8
_DATA	SEGMENT
??_R0?AVSimWeaponClass@@@8 DD FLAT:??_7type_info@@6B@	; SimWeaponClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSimWeaponClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@SimWeaponClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SimWeaponClass@@8 DD FLAT:??_R0?AVSimWeaponClass@@@8 ; SimWeaponClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SimWeaponClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@GunClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@GunClass@@8 DD FLAT:??_R0?AVGunClass@@@8	; GunClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3GunClass@@8
rdata$r	ENDS
;	COMDAT ??_R2GunClass@@8
rdata$r	SEGMENT
??_R2GunClass@@8 DD FLAT:??_R1A@?0A@EA@GunClass@@8	; GunClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SimWeaponClass@@8
	DD	FLAT:??_R1A@?0A@EA@SimMoverClass@@8
	DD	FLAT:??_R1A@?0A@EA@SimBaseClass@@8
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3GunClass@@8
rdata$r	SEGMENT
??_R3GunClass@@8 DD 00H					; GunClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	06H
	DD	FLAT:??_R2GunClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVGunClass@@@8
_DATA	SEGMENT
??_R0?AVGunClass@@@8 DD FLAT:??_7type_info@@6B@		; GunClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVGunClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4GunClass@@6B@
rdata$r	SEGMENT
??_R4GunClass@@6B@ DD 00H				; GunClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVGunClass@@@8
	DD	FLAT:??_R3GunClass@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KPOKADOG@30mm?5AAA?5HE?$AA@
CONST	SEGMENT
??_C@_0M@KPOKADOG@30mm?5AAA?5HE?$AA@ DB '30mm AAA HE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7GunClass@@6B@
CONST	SEGMENT
??_7GunClass@@6B@ DD FLAT:??_R4GunClass@@6B@		; GunClass::`vftable'
	DD	FLAT:?CustomCollisionCheck@VuEntity@@UAEEPAV1@M@Z
	DD	FLAT:?TerrainCollisionCheck@VuEntity@@UAEEXZ
	DD	FLAT:?IsTarget@VuEntity@@UAEEXZ
	DD	FLAT:?IsSession@VuEntity@@UAEEXZ
	DD	FLAT:?IsGroup@VuEntity@@UAEEXZ
	DD	FLAT:?IsGame@VuEntity@@UAEEXZ
	DD	FLAT:?IsCamera@VuEntity@@UBEEXZ
	DD	FLAT:?SaveSize@SimWeaponClass@@UAEHXZ
	DD	FLAT:?Save@SimWeaponClass@@UAEHPAU_iobuf@@@Z
	DD	FLAT:?Save@SimWeaponClass@@UAEHPAPAE@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuSessionEvent@@@Z
	DD	FLAT:?Handle@SimWeaponClass@@UAEHPAVVuTransferEvent@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuEntityCollisionEvent@@@Z
	DD	FLAT:?Handle@SimWeaponClass@@UAEHPAVVuPositionUpdateEvent@@@Z
	DD	FLAT:?Handle@SimWeaponClass@@UAEHPAVVuFullUpdateEvent@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuEvent@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuPullRequest@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuPushRequest@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuErrorMessage@@@Z
	DD	FLAT:??_EGunClass@@UAEPAXI@Z
	DD	FLAT:?InsertionCallback@SimMoverClass@@UAEHXZ
	DD	FLAT:?RemovalCallback@SimMoverClass@@UAEHXZ
	DD	FLAT:?InitData@GunClass@@UAEXXZ
	DD	FLAT:?CleanupData@GunClass@@UAEXXZ
	DD	FLAT:?IsSimBase@SimBaseClass@@UAE_NXZ
	DD	FLAT:?IsCampBase@FalconEntity@@UAE_NXZ
	DD	FLAT:?Wake@SimWeaponClass@@UAEHXZ
	DD	FLAT:?Sleep@SimWeaponClass@@UAEHXZ
	DD	FLAT:?GetCampID@SimBaseClass@@UAEFXZ
	DD	FLAT:?GetTeam@SimBaseClass@@UAEEXZ
	DD	FLAT:?GetCountry@SimBaseClass@@UAEEXZ
	DD	FLAT:?GetDomain@FalconEntity@@UAEEXZ
	DD	FLAT:?GetRadarMode@FalconEntity@@UAEHXZ
	DD	FLAT:?SetRadarMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?ReturnToSearch@FalconEntity@@UAEXXZ
	DD	FLAT:?SetSearchMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?CombatClass@FalconEntity@@UAEHXZ
	DD	FLAT:?OnGround@SimBaseClass@@UAEHXZ
	DD	FLAT:?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z
	DD	FLAT:?IsMissile@FalconEntity@@UAEHXZ
	DD	FLAT:?IsLauncher@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBomb@FalconEntity@@UAEHXZ
	DD	FLAT:?IsGun@GunClass@@UAEHXZ
	DD	FLAT:?IsMover@SimMoverClass@@UAEHXZ
	DD	FLAT:?IsVehicle@FalconEntity@@UAEHXZ
	DD	FLAT:?IsStatic@FalconEntity@@UAEHXZ
	DD	FLAT:?IsHelicopter@FalconEntity@@UAEHXZ
	DD	FLAT:?IsEject@FalconEntity@@UAEHXZ
	DD	FLAT:?IsAirplane@FalconEntity@@UAEHXZ
	DD	FLAT:?IsGroundVehicle@FalconEntity@@UAEHXZ
	DD	FLAT:?IsShip@FalconEntity@@UAEHXZ
	DD	FLAT:?IsWeapon@SimWeaponClass@@UAEHXZ
	DD	FLAT:?IsExploding@SimBaseClass@@UAEHXZ
	DD	FLAT:?IsDead@FalconEntity@@UAEHXZ
	DD	FLAT:?IsEmitting@FalconEntity@@UAEHXZ
	DD	FLAT:?GetVt@SimMoverClass@@UBEMXZ
	DD	FLAT:?GetKias@SimMoverClass@@UBEMXZ
	DD	FLAT:?GetMovementType@SimBaseClass@@UAE?AW4MoveType@@XZ
	DD	FLAT:?IsUnit@FalconEntity@@UAEHXZ
	DD	FLAT:?IsObjective@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBattalion@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBrigade@FalconEntity@@UAEHXZ
	DD	FLAT:?IsFlight@FalconEntity@@UBEHXZ
	DD	FLAT:?IsSquadron@FalconEntity@@UAEHXZ
	DD	FLAT:?IsPackage@FalconEntity@@UAEHXZ
	DD	FLAT:?IsTeam@FalconEntity@@UAEHXZ
	DD	FLAT:?IsTaskForce@FalconEntity@@UAEHXZ
	DD	FLAT:?IsSPJamming@SimBaseClass@@UAEHXZ
	DD	FLAT:?IsAreaJamming@SimBaseClass@@UAEHXZ
	DD	FLAT:?HasSPJamming@SimBaseClass@@UAEHXZ
	DD	FLAT:?HasAreaJamming@SimBaseClass@@UAEHXZ
	DD	FLAT:?GetRCSFactor@FalconEntity@@UAEMXZ
	DD	FLAT:?GetIRFactor@FalconEntity@@UAEMXZ
	DD	FLAT:?GetRadarType@SimWeaponClass@@UAEHXZ
	DD	FLAT:?GetDamageModifiers@FalconEntity@@UAEPAEXZ
	DD	FLAT:?SetAQUIREtimer@FalconEntity@@UAEXK@Z
	DD	FLAT:?SetSEARCHtimer@FalconEntity@@UAEXK@Z
	DD	FLAT:?SetStepSearchMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?GetAQUIREtimer@FalconEntity@@UAEKXZ
	DD	FLAT:?GetSEARCHtimer@FalconEntity@@UAEKXZ
	DD	FLAT:?WeaponKeepAlive@SimMoverClass@@UAEXXZ
	DD	FLAT:?JoinFlight@SimBaseClass@@UAEXXZ
	DD	FLAT:?ChangeOwner@SimMoverClass@@UAEXVVU_ID@@@Z
	DD	FLAT:?MakeLocal@SimMoverClass@@UAEXXZ
	DD	FLAT:?MakeRemote@SimMoverClass@@UAEXXZ
	DD	FLAT:?IsDead@SimBaseClass@@UBEHXZ
	DD	FLAT:?Init@SimMoverClass@@UAEXPAVSimInitDataClass@@@Z
	DD	FLAT:?Exec@SimWeaponClass@@UAEHXZ
	DD	FLAT:?GetTransform@SimBaseClass@@UAEXQAY02M@Z
	DD	FLAT:?ApplyDamage@SimBaseClass@@UAEXPAVFalconDamageMessage@@@Z
	DD	FLAT:?ApplyDeathMessage@SimBaseClass@@UAEXPAVFalconDeathMessage@@@Z
	DD	FLAT:?SetDead@SimWeaponClass@@UAEXH@Z
	DD	FLAT:?MakePlayerVehicle@SimBaseClass@@UAEXXZ
	DD	FLAT:?MakeNonPlayerVehicle@SimBaseClass@@UAEXXZ
	DD	FLAT:?ConfigurePlayerAvionics@SimBaseClass@@UAEXXZ
	DD	FLAT:?SetVuPosition@SimBaseClass@@UAEXXZ
	DD	FLAT:?Regenerate@SimBaseClass@@UAEXMMMM@Z
	DD	FLAT:?Mass@SimBaseClass@@UAEMXZ
	DD	FLAT:?GetFocusPoint@SimBaseClass@@UAEXAAM00@Z
	DD	FLAT:?GetP@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetQ@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetR@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetAlpha@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetBeta@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetNx@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetNy@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetNz@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetGamma@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetSigma@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetMu@SimMoverClass@@UAEMXZ
	DD	FLAT:?SetLead@SimMoverClass@@UAEXH@Z
	DD	FLAT:?FeatureCollision@SimMoverClass@@UAEPAVSimBaseClass@@M@Z
	DD	FLAT:?CheckLOS@SimMoverClass@@UAEHPAVSimObjectType@@@Z
	DD	FLAT:?CheckCompositeLOS@SimMoverClass@@UAEHPAVSimObjectType@@@Z
	DD	FLAT:?Init@SimWeaponClass@@UAEXXZ
	DD	FLAT:?IsUseable@SimWeaponClass@@UAEHXZ
	DD	FLAT:?LaunchDelayTime@SimWeaponClass@@UAEHXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$??1GunClass@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1GunClass@@UAE@XZ$0
__unwindtable$??0GunClass@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0GunClass@@QAE@H@Z$0
__unwindtable$?Exec@GunClass@@QAEHPAHQAY02MPAVObjectGeometry@@PAVSimObjectType@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Exec@GunClass@@QAEHPAHQAY02MPAVObjectGeometry@@PAVSimObjectType@@H@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Exec@GunClass@@QAEHPAHQAY02MPAVObjectGeometry@@PAVSimObjectType@@H@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?Exec@GunClass@@QAEHPAHQAY02MPAVObjectGeometry@@PAVSimObjectType@@H@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Exec@GunClass@@QAEHPAHQAY02MPAVObjectGeometry@@PAVSimObjectType@@H@Z$4
__ehfuncinfo$?Exec@GunClass@@QAEHPAHQAY02MPAVObjectGeometry@@PAVSimObjectType@@H@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?Exec@GunClass@@QAEHPAHQAY02MPAVObjectGeometry@@PAVSimObjectType@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??1GunClass@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1GunClass@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0GunClass@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0GunClass@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\guns\guns.cpp
_TEXT	SEGMENT
_dotp2$ = -52						; size = 4
_d_squared$ = -48					; size = 4
_length$ = -44						; size = 4
_ratio$ = -40						; size = 4
_newdist$ = -36						; size = 4
_dotp1$ = -32						; size = 4
_s_to_t$ = -28						; size = 12
_ray$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_sp$ = 8						; size = 4
_ep$ = 12						; size = 4
_tc$ = 16						; size = 4
_r$ = 20						; size = 4
_impact$ = 24						; size = 4
?BulletSphereHit@@YAMPAUvector@@00M0@Z PROC		; BulletSphereHit

; 1193 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1194 :     float dotp1, dotp2, d_squared, newdist;
; 1195 :     vector s_to_t;
; 1196 : 	vector ray;
; 1197 : 	float length;
; 1198 : 	float ratio;
; 1199 : 
; 1200 : 
; 1201 :     /*
; 1202 :     ** Get vector from source to target
; 1203 :     */
; 1204 :     s_to_t.x = ( tc->x - sp->x );

	mov	eax, DWORD PTR _tc$[ebp]
	mov	ecx, DWORD PTR _sp$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR _s_to_t$[ebp], xmm0

; 1205 :     s_to_t.y = ( tc->y - sp->y );

	mov	edx, DWORD PTR _tc$[ebp]
	mov	eax, DWORD PTR _sp$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _s_to_t$[ebp+4], xmm0

; 1206 :     s_to_t.z = ( tc->z - sp->z );

	mov	ecx, DWORD PTR _tc$[ebp]
	mov	edx, DWORD PTR _sp$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR _s_to_t$[ebp+8], xmm0

; 1207 : 
; 1208 : 	// get vector of ray from source to end point
; 1209 :     ray.x = ( ep->x - sp->x );

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR _sp$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR _ray$[ebp], xmm0

; 1210 :     ray.y = ( ep->y - sp->y );

	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR _sp$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _ray$[ebp+4], xmm0

; 1211 :     ray.z = ( ep->z - sp->z );

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR _sp$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR _ray$[ebp+8], xmm0

; 1212 : 
; 1213 :     /*
; 1214 :     ** dot the 2 vectors
; 1215 :     */
; 1216 :     dotp1 = (ray.x * s_to_t.x) + (ray.y * s_to_t.y) +
; 1217 : 	    (ray.z * s_to_t.z);

	movss	xmm0, DWORD PTR _ray$[ebp]
	mulss	xmm0, DWORD PTR _s_to_t$[ebp]
	movss	xmm1, DWORD PTR _ray$[ebp+4]
	mulss	xmm1, DWORD PTR _s_to_t$[ebp+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _ray$[ebp+8]
	mulss	xmm1, DWORD PTR _s_to_t$[ebp+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _dotp1$[ebp], xmm0

; 1218 : 
; 1219 :     /*
; 1220 :     ** If the dot product of the source to target vector with the
; 1221 :     ** source dir unit vector is less than 0, then the vectors are pointing
; 1222 :     ** in opposite directions.  We can quit right here.  
; 1223 :     */
; 1224 :     if ( dotp1 < 0.0 )

	cvtss2sd xmm0, DWORD PTR _dotp1$[ebp]
	movsd	xmm1, QWORD PTR __real@0000000000000000
	comisd	xmm1, xmm0
	jbe	SHORT $LN4@BulletSphe

; 1225 : 		return( -1.0f );

	fld	DWORD PTR __real@bf800000
	jmp	$LN5@BulletSphe
$LN4@BulletSphe:

; 1226 : 
; 1227 : 	// normalize dotp1 with length of ray
; 1228 : 	length = (float)sqrt( ray.x * ray.x + ray.y * ray.y + ray.z * ray.z );

	movss	xmm0, DWORD PTR _ray$[ebp]
	mulss	xmm0, DWORD PTR _ray$[ebp]
	movss	xmm1, DWORD PTR _ray$[ebp+4]
	mulss	xmm1, DWORD PTR _ray$[ebp+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _ray$[ebp+8]
	mulss	xmm1, DWORD PTR _ray$[ebp+8]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _length$[ebp]

; 1229 : 	dotp1 /= length;

	movss	xmm0, DWORD PTR _dotp1$[ebp]
	divss	xmm0, DWORD PTR _length$[ebp]
	movss	DWORD PTR _dotp1$[ebp], xmm0

; 1230 : 
; 1231 :     dotp2 = (s_to_t.x * s_to_t.x) + (s_to_t.y * s_to_t.y) +
; 1232 : 	    (s_to_t.z * s_to_t.z);

	movss	xmm0, DWORD PTR _s_to_t$[ebp]
	mulss	xmm0, DWORD PTR _s_to_t$[ebp]
	movss	xmm1, DWORD PTR _s_to_t$[ebp+4]
	mulss	xmm1, DWORD PTR _s_to_t$[ebp+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _s_to_t$[ebp+8]
	mulss	xmm1, DWORD PTR _s_to_t$[ebp+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _dotp2$[ebp], xmm0

; 1233 : 
; 1234 :     d_squared = (r * r) - ( dotp2 - (dotp1 * dotp1) );

	movss	xmm0, DWORD PTR _r$[ebp]
	mulss	xmm0, DWORD PTR _r$[ebp]
	movss	xmm1, DWORD PTR _dotp1$[ebp]
	mulss	xmm1, DWORD PTR _dotp1$[ebp]
	movss	xmm2, DWORD PTR _dotp2$[ebp]
	subss	xmm2, xmm1
	subss	xmm0, xmm2
	movss	DWORD PTR _d_squared$[ebp], xmm0

; 1235 : 
; 1236 :     if ( d_squared < 0.0 )

	cvtss2sd xmm0, DWORD PTR _d_squared$[ebp]
	movsd	xmm1, QWORD PTR __real@0000000000000000
	comisd	xmm1, xmm0
	jbe	SHORT $LN3@BulletSphe

; 1237 :         return( -1.0f );

	fld	DWORD PTR __real@bf800000
	jmp	$LN5@BulletSphe
$LN3@BulletSphe:

; 1238 : 
; 1239 :     /*
; 1240 :     ** We should use the square root of d squared for the below calculation,
; 1241 :     ** but instead we'll just approximate with the radius.  The dotp1 minus
; 1242 :     ** radius should approximate the distance along the ray from the source
; 1243 :     ** point to the point of intersection.  If this value is > the dist
; 1244 :     ** traveled in the frame, the collision has fallen short
; 1245 :     */
; 1246 :     newdist = dotp1 - r;

	movss	xmm0, DWORD PTR _dotp1$[ebp]
	subss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR _newdist$[ebp], xmm0

; 1247 : 
; 1248 :     if (newdist < 0.0 )

	cvtss2sd xmm0, DWORD PTR _newdist$[ebp]
	movsd	xmm1, QWORD PTR __real@0000000000000000
	comisd	xmm1, xmm0
	jbe	SHORT $LN2@BulletSphe

; 1249 : 		newdist = 0.5;

	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _newdist$[ebp], xmm0
$LN2@BulletSphe:

; 1250 : 
; 1251 :     if ( length < newdist )

	movss	xmm0, DWORD PTR _newdist$[ebp]
	comiss	xmm0, DWORD PTR _length$[ebp]
	jbe	SHORT $LN1@BulletSphe

; 1252 :         return( -1.0f );

	fld	DWORD PTR __real@bf800000
	jmp	SHORT $LN5@BulletSphe
$LN1@BulletSphe:

; 1253 : 
; 1254 :     /*
; 1255 :     ** That's it, a hit!
; 1256 : 	** set impact point and return dist
; 1257 :     */
; 1258 : 	ratio = newdist/length;

	movss	xmm0, DWORD PTR _newdist$[ebp]
	divss	xmm0, DWORD PTR _length$[ebp]
	movss	DWORD PTR _ratio$[ebp], xmm0

; 1259 : 	impact->x = sp->x + ray.x * ratio;

	movss	xmm0, DWORD PTR _ray$[ebp]
	mulss	xmm0, DWORD PTR _ratio$[ebp]
	mov	eax, DWORD PTR _sp$[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _impact$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1260 : 	impact->y = sp->y + ray.y * ratio;

	movss	xmm0, DWORD PTR _ray$[ebp+4]
	mulss	xmm0, DWORD PTR _ratio$[ebp]
	mov	edx, DWORD PTR _sp$[ebp]
	addss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _impact$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 1261 : 	impact->z = sp->z + ray.z * ratio;

	movss	xmm0, DWORD PTR _ray$[ebp+8]
	mulss	xmm0, DWORD PTR _ratio$[ebp]
	mov	ecx, DWORD PTR _sp$[ebp]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _impact$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 1262 : 
; 1263 :     return newdist;

	fld	DWORD PTR _newdist$[ebp]
$LN5@BulletSphe:

; 1264 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?BulletSphereHit@@YAMPAUvector@@00M0@Z ENDP		; BulletSphereHit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmirec.h
;	COMDAT ?IsRecording@ACMIRecorder@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsRecording@ACMIRecorder@@QAEHXZ PROC			; ACMIRecorder::IsRecording, COMDAT
; _this$ = ecx

; 319  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 320  : 		return _recording;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 321  : 	};

	mov	esp, ebp
	pop	ebp
	ret	0
?IsRecording@ACMIRecorder@@QAEHXZ ENDP			; ACMIRecorder::IsRecording
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?GetPosition@DrawableObject@@QAEXPAUTpoint@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?GetPosition@DrawableObject@@QAEXPAUTpoint@@@Z PROC	; DrawableObject::GetPosition, COMDAT
; _this$ = ecx

; 28   : 	void GetPosition(Tpoint* pos){ *pos = position; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPosition@DrawableObject@@QAEXPAUTpoint@@@Z ENDP	; DrawableObject::GetPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?Radius@DrawableObject@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Radius@DrawableObject@@QBEMXZ PROC			; DrawableObject::Radius, COMDAT
; _this$ = ecx

; 27   : 	float Radius() const { return radius; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]
	mov	esp, ebp
	pop	ebp
	ret	0
?Radius@DrawableObject@@QBEMXZ ENDP			; DrawableObject::Radius
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?PRANDFloatPos@@YAMXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_x$ = -4						; size = 4
?PRANDFloatPos@@YAMXZ PROC				; PRANDFloatPos, COMDAT

; 150  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 151  : //	return NRANDPOS;
; 152  : 	float	x=	(float)(GenerateFastRandom()&0xffff);

	call	?GenerateFastRandom@@YAJXZ		; GenerateFastRandom
	and	eax, 65535				; 0000ffffH
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _x$[ebp], xmm0

; 153  : 	return( x / 65535.0f);

	movss	xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv72[ebp], xmm0
	fld	DWORD PTR tv72[ebp]

; 154  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PRANDFloatPos@@YAMXZ ENDP				; PRANDFloatPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?PRANDFloat@@YAMXZ
_TEXT	SEGMENT
tv75 = -8						; size = 4
_x$ = -4						; size = 4
?PRANDFloat@@YAMXZ PROC					; PRANDFloat, COMDAT

; 143  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 144  : //	return NRAND;
; 145  : 	float	x=	(float)(GenerateFastRandom()&0xffff);

	call	?GenerateFastRandom@@YAJXZ		; GenerateFastRandom
	and	eax, 65535				; 0000ffffH
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _x$[ebp], xmm0

; 146  : 	return( 1 - 2 * x / 65535.0f);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR __real@477fff00
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR tv75[ebp], xmm1
	fld	DWORD PTR tv75[ebp]

; 147  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PRANDFloat@@YAMXZ ENDP					; PRANDFloat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?GenerateFastRandom@@YAJXZ
_TEXT	SEGMENT
_FastRandom$ = -4					; size = 4
?GenerateFastRandom@@YAJXZ PROC				; GenerateFastRandom, COMDAT

; 108  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 109  : 	static long LastRandom;
; 110  : 	long	FastRandom;														// The Random Variable
; 111  : 	_asm {	
; 112  : 			push	edx

	push	edx

; 113  : 			push	eax

	push	eax

; 114  : 			RDTSC

	rdtsc

; 115  : 			add	DWORD PTR FastRandom,edx

	add	DWORD PTR _FastRandom$[ebp], edx

; 116  : 			xor	DWORD PTR FastRandom,eax

	xor	DWORD PTR _FastRandom$[ebp], eax

; 117  : 			mov	eax, DWORD PTR LastRandom

	mov	eax, DWORD PTR ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA ; `GenerateFastRandom'::`2'::LastRandom

; 118  : 			add	DWORD PTR FastRandom,eax

	add	DWORD PTR _FastRandom$[ebp], eax

; 119  : 			add	DWORD PTR LastRandom,edx

	add	DWORD PTR ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA, edx ; `GenerateFastRandom'::`2'::LastRandom

; 120  : 			pop	eax

	pop	eax

; 121  : 			pop	edx

	pop	edx

; 122  : 	}
; 123  : 	return(FastRandom);

	mov	eax, DWORD PTR _FastRandom$[ebp]

; 124  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GenerateFastRandom@@YAJXZ ENDP				; GenerateFastRandom
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\otwdrive.h
;	COMDAT ?DisplayInCockpit@OTWDriverClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DisplayInCockpit@OTWDriverClass@@QAEHXZ PROC		; OTWDriverClass::DisplayInCockpit, COMDAT
; _this$ = ecx

; 244  : 		inline BOOL DisplayInCockpit( void ){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 245  : 			if (mOTWDisplayMode >= ModeHud && mOTWDisplayMode <= ModePadlockEFOV )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32328], 1
	jl	SHORT $LN1@DisplayInC
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+32328], 5
	jg	SHORT $LN1@DisplayInC

; 246  : 		  		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN2@DisplayInC
$LN1@DisplayInC:

; 247  : 			return FALSE;

	xor	eax, eax
$LN2@DisplayInC:

; 248  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?DisplayInCockpit@OTWDriverClass@@QAEHXZ ENDP		; OTWDriverClass::DisplayInCockpit
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ PROC ; CampBaseClass::GetComponents, COMDAT
; _this$ = ecx

; 141  : 	TailInsertList *GetComponents() const		{	return components; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+160]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ENDP ; CampBaseClass::GetComponents
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ PROC ; FalconSessionEntity::GetPlayerEntity, COMDAT
; _this$ = ecx

; 138  : 	FalconEntity* GetPlayerEntity(void) const     { return playerEntityPtr.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ENDP ; FalconSessionEntity::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GGunClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GGunClass@@UAEPAXI@Z PROC				; GunClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GunClass@@UAE@XZ			; GunClass::~GunClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GGunClass@@UAEPAXI@Z ENDP				; GunClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\guns.h
;	COMDAT ?IsGun@GunClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGun@GunClass@@UAEHXZ PROC				; GunClass::IsGun, COMDAT
; _this$ = ecx

; 125  : 	virtual int IsGun (void) { return TRUE; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGun@GunClass@@UAEHXZ ENDP				; GunClass::IsGun
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\guns.h
;	COMDAT ?GetCurrentBurst@GunClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCurrentBurst@GunClass@@QAEHXZ PROC			; GunClass::GetCurrentBurst, COMDAT
; _this$ = ecx

; 112  : 	int GetCurrentBurst (void) { return bursts; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+720]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentBurst@GunClass@@QAEHXZ ENDP			; GunClass::GetCurrentBurst
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\guns\guns.cpp
_TEXT	SEGMENT
$T2 = -504						; size = 8
$T3 = -496						; size = 8
$T4 = -488						; size = 8
$T5 = -480						; size = 8
$T6 = -472						; size = 8
$T7 = -464						; size = 8
tv3520 = -456						; size = 8
tv2801 = -448						; size = 4
tv3028 = -444						; size = 4
$T8 = -440						; size = 4
tv3609 = -436						; size = 4
tv2692 = -432						; size = 4
$T9 = -428						; size = 4
tv2688 = -424						; size = 4
tv3135 = -420						; size = 4
tv2662 = -416						; size = 4
tv2810 = -412						; size = 4
tv2655 = -408						; size = 4
tv3626 = -404						; size = 4
tv2648 = -400						; size = 4
tv3592 = -396						; size = 4
tv2639 = -392						; size = 4
tv3120 = -388						; size = 4
tv2824 = -384						; size = 4
tv3018 = -380						; size = 4
tv3012 = -376						; size = 4
$T10 = -372						; size = 4
tv2817 = -368						; size = 4
tv2256 = -364						; size = 4
$T11 = -360						; size = 4
_featureWalker$12 = -356				; size = 12
tv771 = -344						; size = 4
tv635 = -340						; size = 4
tv965 = -336						; size = 4
tv621 = -332						; size = 4
tv1123 = -328						; size = 4
tv594 = -324						; size = 4
tv911 = -320						; size = 4
$T13 = -316						; size = 4
tv1178 = -312						; size = 4
tv583 = -308						; size = 4
tv1037 = -304						; size = 4
tv310 = -300						; size = 4
tv924 = -296						; size = 4
$T14 = -292						; size = 4
tv866 = -288						; size = 4
_gotGround$ = -284					; size = 4
_hitGround$ = -280					; size = 4
tv779 = -276						; size = 4
_timeToImpact$ = -272					; size = 4
tv2103 = -268						; size = 4
tv1099 = -264						; size = 4
tv2045 = -260						; size = 4
tv1028 = -256						; size = 4
tv3516 = -252						; size = 4
tv951 = -248						; size = 4
tv1937 = -244						; size = 4
$T15 = -240						; size = 4
tv1924 = -236						; size = 4
tv876 = -232						; size = 4
tv1911 = -228						; size = 4
tv795 = -224						; size = 4
tv1664 = -220						; size = 4
tv85 = -216						; size = 4
_groundType$16 = -212					; size = 4
_inc$17 = -208						; size = 4
_inc$18 = -204						; size = 4
$T19 = -200						; size = 4
_xsize$20 = -196					; size = 4
_advanceQueue$ = -192					; size = 4
_stagger$21 = -188					; size = 4
_objective$ = -184					; size = 4
_gridIt$ = -180						; size = 4
_groundZ$ = -176					; size = 4
_whatWasHit$ = -172					; size = 4
_yOffset$ = -168					; size = 4
_vt$ = -164						; size = 4
_ystagger$22 = -160					; size = 4
_testFeature$ = -156					; size = 4
_zstagger$23 = -152					; size = 4
_testObject$ = -148					; size = 4
_tmp$24 = -144						; size = 4
_message$ = -140					; size = 4
_i$ = -136						; size = 4
_bulptr$ = -132						; size = 4
_this$ = -128						; size = 4
_PSvec$ = -124						; size = 12
_gunPSvec$25 = -112					; size = 12
_org$ = -100						; size = 12
_p3$ = -88						; size = 12
_fpos$ = -76						; size = 12
_p1$ = -64						; size = 12
_p2$ = -52						; size = 12
_vec$ = -40						; size = 12
_pos$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_fire$ = 8						; size = 4
_dmx$ = 12						; size = 4
_geomData$ = 16						; size = 4
_targetList$ = 20					; size = 4
_isOwnship$ = 24					; size = 4
?Exec@GunClass@@QAEHPAHQAY02MPAVObjectGeometry@@PAVSimObjectType@@H@Z PROC ; GunClass::Exec
; _this$ = ecx

; 232  : ){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Exec@GunClass@@QAEHPAHQAY02MPAVObjectGeometry@@PAVSimObjectType@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 492				; 000001ecH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 233  : 
; 234  : 	int i;
; 235  : 	float timeToImpact, vt;
; 236  : 	vector p1, p2, p3; 
; 237  : 	FalconDamageMessage* message;
; 238  : 	SimBaseClass* testFeature;
; 239  : 	SimObjectType* testObject;
; 240  : 	Tpoint org, vec, pos,fpos;
; 241  : 	float groundZ = 0.0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _groundZ$[ebp], xmm0

; 242  : 	BOOL gotGround = FALSE;

	mov	DWORD PTR _gotGround$[ebp], 0

; 243  : 	BOOL hitGround = FALSE;

	mov	DWORD PTR _hitGround$[ebp], 0

; 244  : 	BOOL advanceQueue = FALSE;

	mov	DWORD PTR _advanceQueue$[ebp], 0

; 245  : 	GunTracerType *bulptr;
; 246  : 	CampBaseClass* objective;
; 247  : 	int whatWasHit = TRACER_HIT_NOTHING;

	mov	DWORD PTR _whatWasHit$[ebp], 0

; 248  : 	float yOffset;
; 249  : 	VuGridIterator* gridIt = NULL;

	mov	DWORD PTR _gridIt$[ebp], 0

; 250  : 
; 251  : 	//RV - I-Hawk - Added a 0 vector for RV new PS calls
; 252  : 	Tpoint PSvec;
; 253  : 	PSvec.x = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PSvec$[ebp], xmm0

; 254  : 	PSvec.y = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PSvec$[ebp+4], xmm0

; 255  : 	PSvec.z = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PSvec$[ebp+8], xmm0

; 256  : 
; 257  : #ifndef NODRAG
; 258  : float vt1, dragDelta, cosgam, singam, cosmu, sinmu, alpha;
; 259  : #endif
; 260  : 
; 261  : 	// Handle reloading if we have unlimited ammo
; 262  : 	if (unlimitedAmmo)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+820], 0
	je	$LN86@Exec

; 263  : 	{
; 264  : 		// Could make numRoundsRemaining a float, but this changed less code...
; 265  : 		fractionalRoundsRemaining += 0.1f * roundsPerSecond * SimLibMajorFrameTime;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3dcccccd
	mulss	xmm0, DWORD PTR [ecx+804]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+728]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+728], xmm0

; 266  : 		if (fractionalRoundsRemaining > 1.0f)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+728]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	$LN86@Exec

; 267  : 		{
; 268  : 			int inc = FloatToInt32(fractionalRoundsRemaining);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+728]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _inc$18[ebp], eax

; 269  : 			numRoundsRemaining = min(initialRounds, numRoundsRemaining + inc);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+808]
	add	ecx, DWORD PTR _inc$18[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+724], ecx
	jge	SHORT $LN91@Exec
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+724]
	mov	DWORD PTR tv85[ebp], ecx
	jmp	SHORT $LN92@Exec
$LN91@Exec:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+808]
	add	eax, DWORD PTR _inc$18[ebp]
	mov	DWORD PTR tv85[ebp], eax
$LN92@Exec:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv85[ebp]
	mov	DWORD PTR [ecx+808], edx

; 270  : 			fractionalRoundsRemaining -= (float)inc;

	cvtsi2ss xmm0, DWORD PTR _inc$18[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+728]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+728], xmm1

; 271  : 			if (*fire && this->parent.get() == FalconLocalSession->GetPlayerEntity()){

	mov	edx, DWORD PTR _fire$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN86@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esi, eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ; FalconSessionEntity::GetPlayerEntity
	cmp	esi, eax
	jne	SHORT $LN86@Exec

; 272  : 			    g_intellivibeData.BulletsFired++;

	mov	al, BYTE PTR ?g_intellivibeData@@3VIntellivibeData@@A+5
	add	al, 1
	mov	BYTE PTR ?g_intellivibeData@@3VIntellivibeData@@A+5, al
$LN86@Exec:

; 273  : 			}
; 274  : 		}
; 275  : 	}
; 276  : 
; 277  : 
; 278  : 	// if we're a shell type just update and return
; 279  : 	if ( typeOfGun == GUN_SHELL )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+852], 0
	jne	SHORT $LN85@Exec

; 280  : 	{
; 281  : 		if ( shellTargetPtr )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+848], 0
	je	SHORT $LN84@Exec

; 282  : 		{
; 283  : 			UpdateShell();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateShell@GunClass@@QAEXXZ		; GunClass::UpdateShell
$LN84@Exec:

; 284  : 		}
; 285  : 		return whatWasHit;

	mov	eax, DWORD PTR _whatWasHit$[ebp]
	jmp	$LN89@Exec
$LN85@Exec:

; 286  : 	}
; 287  : 
; 288  : // TOTAL HACK HERE!  We observe that sometimes bullet is NULL here (why?)
; 289  : // SCR 5-9-97
; 290  : 	if (!bullet)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+800], 0
	jne	SHORT $LN83@Exec

; 291  : 	{
; 292  : 		return whatWasHit;

	mov	eax, DWORD PTR _whatWasHit$[ebp]
	jmp	$LN89@Exec
$LN83@Exec:

; 293  : 	}
; 294  : // END OF HACK
; 295  : 
; 296  :    // edg: why go thru this exec stuff every time if there's no bullets
; 297  :    // flying or the fire button isn't pressed?   Added numFlying counter
; 298  :    // to determine bullets in air
; 299  :    if ( !(*fire) && !numFlying )

	mov	ecx, DWORD PTR _fire$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN82@Exec
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+824], 0
	jne	SHORT $LN82@Exec

; 300  :    		return whatWasHit;

	mov	eax, DWORD PTR _whatWasHit$[ebp]
	jmp	$LN89@Exec
$LN82@Exec:

; 301  : 
; 302  : 
; 303  : 	// scale the y start position if we're in the cockpit and ownship
; 304  : 	if ( isOwnship && OTWDriver.DisplayInCockpit() )

	cmp	DWORD PTR _isOwnship$[ebp], 0
	je	SHORT $LN81@Exec
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?DisplayInCockpit@OTWDriverClass@@QAEHXZ ; OTWDriverClass::DisplayInCockpit
	test	eax, eax
	je	SHORT $LN81@Exec

; 305  : 	{
; 306  : 		yOffset = yPos * 2.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+696]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _yOffset$[ebp], xmm0

; 307  : 	}
; 308  : 	else

	jmp	SHORT $LN80@Exec
$LN81@Exec:

; 309  : 	{
; 310  : 		yOffset = yPos;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+696]
	movss	DWORD PTR _yOffset$[ebp], xmm0
$LN80@Exec:

; 311  : 	}
; 312  : 
; 313  :    // see if we should advance the queue
; 314  :    // this is determined by the # of bullets we're tracking.
; 315  :    // we want to run them about 2 secs out from the muzzle.
; 316  :    // so, if we have # bullets = half the frame rate, we want
; 317  :    // to advance the q 4 * frame time to get about 2 secs
; 318  :    qTimer += SimLibMajorFrameTime;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+784]
	addss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+784], xmm0

; 319  : // 2000-10-17 MODIFIED BY S.G. SO BULLETS STAY IN THE AIR LONGER (WE'LL USE AN UNUSED FIELD IN THE WCD FILE)
; 320  : // This var will take the first 3 bits of that field and use it for 1 to 8 seconds.
; 321  : // if ( qTimer >= SimLibMajorFrameTime * 4.0f )
; 322  :    if ( qTimer >= SimLibMajorFrameTime * (float)(((((unsigned char *)wcPtr)[45] & 7) + 1) * 2))

	mov	ecx, 1
	imul	ecx, 45					; 0000002dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+868]
	movzx	ecx, BYTE PTR [eax+ecx]
	and	ecx, 7
	lea	edx, DWORD PTR [ecx+ecx+2]
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+784]
	comiss	xmm1, xmm0
	jb	SHORT $LN79@Exec

; 323  :    {
; 324  : 	   advanceQueue = TRUE;

	mov	DWORD PTR _advanceQueue$[ebp], 1

; 325  : 	   qTimer = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+784], xmm0
$LN79@Exec:

; 326  :    }
; 327  : 
; 328  : 	//START_PROFILE("GUNS EXEC");
; 329  : 
; 330  :    for (i=numTracers-1; i>=0; i--)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+812]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN78@Exec
$LN77@Exec:
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN78@Exec:
	cmp	DWORD PTR _i$[ebp], 0
	jl	$LN76@Exec

; 331  :    {
; 332  : 	  // see if we should move the bullets up towards end
; 333  : 	  if ( advanceQueue )

	cmp	DWORD PTR _advanceQueue$[ebp], 0
	je	$LN72@Exec

; 334  : 	  {
; 335  : 		  if ( i == numTracers-1 && bullet[i].flying )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+812]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jne	SHORT $LN74@Exec
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+800]
	cmp	DWORD PTR [eax+ecx+24], 0
	je	SHORT $LN74@Exec

; 336  : 		  	numFlying--;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+824]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+824], edx
$LN74@Exec:

; 337  : 
; 338  : 		  if ( i > 0 )

	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN73@Exec

; 339  : 		  	 bullet[i] = bullet[i-1];

	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+800]
	add	esi, ecx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR [ecx+800]
	add	edi, eax
	mov	ecx, 7
	rep movsd

; 340  : 		  else

	jmp	SHORT $LN72@Exec
$LN73@Exec:

; 341  : 		  	 break;

	jmp	$LN76@Exec
$LN72@Exec:

; 342  : 	  }
; 343  : 
; 344  : 	  // point to the bullet entry
; 345  : 	  bulptr = &bullet[i];

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+800]
	mov	DWORD PTR _bulptr$[ebp], edx

; 346  : 
; 347  :       /*---------------------------*/
; 348  :       /* Only check flying bullets */
; 349  :       /*---------------------------*/
; 350  :       if (bulptr->flying)

	mov	ecx, DWORD PTR _bulptr$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	$LN37@Exec

; 351  :       {
; 352  : 		 // 1st point is where bullet will end up
; 353  :          vec.x = bulptr->xdot * SimLibMajorFrameTime;

	mov	edx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [edx+12]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	movss	DWORD PTR _vec$[ebp], xmm0

; 354  :          vec.y = bulptr->ydot * SimLibMajorFrameTime;

	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	movss	DWORD PTR _vec$[ebp+4], xmm0

; 355  :          vec.z = bulptr->zdot * SimLibMajorFrameTime;

	mov	ecx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [ecx+20]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	movss	DWORD PTR _vec$[ebp+8], xmm0

; 356  : 
; 357  : 
; 358  :          p1.x = bulptr->x + vec.x;

	mov	edx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [edx]
	addss	xmm0, DWORD PTR _vec$[ebp]
	movss	DWORD PTR _p1$[ebp], xmm0

; 359  :          p1.y = bulptr->y + vec.y;

	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR _vec$[ebp+4]
	movss	DWORD PTR _p1$[ebp+4], xmm0

; 360  :          p1.z = bulptr->z + vec.z;

	mov	ecx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	addss	xmm0, DWORD PTR _vec$[ebp+8]
	movss	DWORD PTR _p1$[ebp+8], xmm0

; 361  : 
; 362  : 		 // edg: hunh?  I think I wrote this.  I musta been on LSD...  However,
; 363  : 		 // I think it's for collision detection purposes....
; 364  :          // Since we run a SimLibFrameTime sec frame and there should be roundPerSecond
; 365  :          // a bullet comes out very we need to extend the vector by roundsPerSecond*SimLibFrameTime
; 366  : // 2000-10-11 NOT TOUCHED BY S.G. BUT MAY BE HE WAS ON LSD, THIS MAKES NO SENSE!
; 367  :          vec.x *= roundsPerSecond*SimLibMajorFrameTime * 2.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+804]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _vec$[ebp]
	movss	DWORD PTR _vec$[ebp], xmm0

; 368  :          vec.y *= roundsPerSecond*SimLibMajorFrameTime * 2.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+804]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _vec$[ebp+4]
	movss	DWORD PTR _vec$[ebp+4], xmm0

; 369  :          vec.z *= roundsPerSecond*SimLibMajorFrameTime * 2.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+804]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _vec$[ebp+8]
	movss	DWORD PTR _vec$[ebp+8], xmm0

; 370  : 
; 371  : 		 // get ground level of furthest bullet
; 372  : 		 if ( gotGround == FALSE )

	cmp	DWORD PTR _gotGround$[ebp], 0
	jne	SHORT $LN68@Exec

; 373  : 		 {
; 374  : 			// if it's the player's plane that's firing, test ground
; 375  : 			// on every bullet by never setting gotGround to TRUE
; 376  : 			if ( !isOwnship )

	cmp	DWORD PTR _isOwnship$[ebp], 0
	jne	SHORT $LN69@Exec

; 377  : 				gotGround = TRUE;

	mov	DWORD PTR _gotGround$[ebp], 1
$LN69@Exec:

; 378  : 		 	groundZ = OTWDriver.GetApproxGroundLevel( p1.x, p1.y );

	push	ecx
	movss	xmm0, DWORD PTR _p1$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _p1$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetApproxGroundLevel@OTWDriverClass@@QAEMMM@Z ; OTWDriverClass::GetApproxGroundLevel
	fstp	DWORD PTR _groundZ$[ebp]

; 379  : 			if (  p1.z - groundZ  > -1000.0f )

	movss	xmm0, DWORD PTR _p1$[ebp+8]
	subss	xmm0, DWORD PTR _groundZ$[ebp]
	comiss	xmm0, DWORD PTR __real@c47a0000
	jbe	SHORT $LN68@Exec

; 380  : 		 		groundZ = OTWDriver.GetGroundLevel( p1.x, p1.y );

	push	0
	push	ecx
	movss	xmm0, DWORD PTR _p1$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _p1$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	fstp	DWORD PTR _groundZ$[ebp]
$LN68@Exec:

; 381  : 		 }
; 382  : 
; 383  : 		 // get objective
; 384  : 		 if ( gridIt == NULL )

	cmp	DWORD PTR _gridIt$[ebp], 0
	jne	$LN67@Exec

; 385  : 		 {
; 386  : #ifdef VU_GRID_TREE_Y_MAJOR
; 387  :           gridIt = new VuGridIterator(ObjProxList, parent->YPos(), parent->XPos(), 2.5F * NM_TO_FT );

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T14[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T14[ebp], 0
	je	SHORT $LN93@Exec
	push	ecx
	movss	xmm0, DWORD PTR __real@466d5a1c
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR ?ObjProxList@@3PAVVuGridTree@@A ; ObjProxList
	push	edx
	mov	ecx, DWORD PTR $T14[ebp]
	call	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z ; VuGridIterator::VuGridIterator
	mov	DWORD PTR tv310[ebp], eax
	jmp	SHORT $LN94@Exec
$LN93@Exec:
	mov	DWORD PTR tv310[ebp], 0
$LN94@Exec:
	mov	eax, DWORD PTR tv310[ebp]
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T8[ebp]
	mov	DWORD PTR _gridIt$[ebp], ecx
$LN67@Exec:

; 388  : #else
; 389  :           gridIt = new VuGridIterator(ObjProxList, parent->XPos(), parent->YPos(), 2.5F * NM_TO_FT );
; 390  : #endif
; 391  : 		 }
; 392  : 
; 393  : 		 // 2nd point is where bullet starts
; 394  : 		 if ( i == 0 )

	cmp	DWORD PTR _i$[ebp], 0
	jne	$LN66@Exec

; 395  : 		 {
; 396  : 		  	p2.x = parent->XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _p2$[ebp]

; 397  : 		  	p2.y = parent->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _p2$[ebp+4]

; 398  : 		  	p2.z = parent->ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _p2$[ebp+8]

; 399  : 
; 400  : 		  	p2.x += dmx[0][0]*xPos + dmx[1][0]*yPos + dmx[2][0]*zPos;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	add	edx, DWORD PTR _dmx$[ebp]
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [ecx+692]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	add	edx, DWORD PTR _dmx$[ebp]
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+696]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	add	edx, DWORD PTR _dmx$[ebp]
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+700]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _p2$[ebp]
	movss	DWORD PTR _p2$[ebp], xmm0

; 401  : 		  	p2.y += dmx[0][1]*xPos + dmx[1][1]*yPos + dmx[2][1]*zPos;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	add	edx, DWORD PTR _dmx$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [ecx+692]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	add	edx, DWORD PTR _dmx$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+696]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	add	edx, DWORD PTR _dmx$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+700]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _p2$[ebp+4]
	movss	DWORD PTR _p2$[ebp+4], xmm0

; 402  : 		  	p2.z += dmx[0][2]*xPos + dmx[1][2]*yPos + dmx[2][2]*zPos;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	add	edx, DWORD PTR _dmx$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [ecx+692]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	add	edx, DWORD PTR _dmx$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+696]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	add	edx, DWORD PTR _dmx$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+700]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _p2$[ebp+8]
	movss	DWORD PTR _p2$[ebp+8], xmm0

; 403  : 		 }
; 404  : 		 else

	jmp	SHORT $LN65@Exec
$LN66@Exec:

; 405  : 		 {
; 406  :          	p2.x = bulptr->x;

	mov	edx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR _p2$[ebp], xmm0

; 407  :          	p2.y = bulptr->y;

	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _p2$[ebp+4], xmm0

; 408  :          	p2.z = bulptr->z;

	mov	ecx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR _p2$[ebp+8], xmm0
$LN65@Exec:

; 409  : 		 }
; 410  : 
; 411  : 		 p3.x = (float)fabs( vec.x );

	push	ecx
	movss	xmm0, DWORD PTR _vec$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _p3$[ebp]

; 412  : 		 p3.y = (float)fabs( vec.y );

	push	ecx
	movss	xmm0, DWORD PTR _vec$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _p3$[ebp+4]

; 413  : 		 p3.z = (float)fabs( vec.z );

	push	ecx
	movss	xmm0, DWORD PTR _vec$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _p3$[ebp+8]

; 414  : 
; 415  : 
; 416  : 		// Check this tracer against all objectives
; 417  : 		objective = (CampBaseClass*)gridIt->GetFirst();

	mov	ecx, DWORD PTR _gridIt$[ebp]
	call	?GetFirst@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetFirst
	mov	DWORD PTR _objective$[ebp], eax
$LN115@Exec:

; 418  : 		while( objective ){

	cmp	DWORD PTR _objective$[ebp], 0
	je	$LN63@Exec

; 419  : 			if ( !objective->GetComponents() )

	mov	ecx, DWORD PTR _objective$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	test	eax, eax
	jne	SHORT $LN62@Exec

; 420  : 			{
; 421  :           			objective = (CampBaseClass*)gridIt->GetNext();

	mov	ecx, DWORD PTR _gridIt$[ebp]
	call	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetNext
	mov	DWORD PTR _objective$[ebp], eax

; 422  : 					continue;

	jmp	SHORT $LN115@Exec
$LN62@Exec:

; 423  : 			}
; 424  : 			// loop thru each element in the objective
; 425  : 			VuListIterator	featureWalker(objective->GetComponents());

	mov	ecx, DWORD PTR _objective$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	push	eax
	lea	ecx, DWORD PTR _featureWalker$12[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 426  : 			testFeature = (SimBaseClass*) featureWalker.GetFirst();

	lea	ecx, DWORD PTR _featureWalker$12[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _testFeature$[ebp], eax
$LN117@Exec:

; 427  : 			while (testFeature){

	cmp	DWORD PTR _testFeature$[ebp], 0
	je	$LN60@Exec

; 428  : 					if (!testFeature->drawPointer)

	mov	edx, DWORD PTR _testFeature$[ebp]
	cmp	DWORD PTR [edx+332], 0
	jne	SHORT $LN59@Exec

; 429  : 					{
; 430  :             			testFeature = (SimBaseClass*) featureWalker.GetNext();

	lea	ecx, DWORD PTR _featureWalker$12[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testFeature$[ebp], eax

; 431  : 						continue;

	jmp	SHORT $LN117@Exec
$LN59@Exec:

; 432  : 					}
; 433  : 
; 434  : 					if (testFeature->IsSetCampaignFlag (FEAT_FLAT_CONTAINER))

	push	256					; 00000100H
	mov	ecx, DWORD PTR _testFeature$[ebp]
	call	?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z ; SimBaseClass::IsSetCampaignFlag
	test	eax, eax
	je	SHORT $LN58@Exec

; 435  : 					{
; 436  :             			testFeature = (SimBaseClass*) featureWalker.GetNext();

	lea	ecx, DWORD PTR _featureWalker$12[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testFeature$[ebp], eax

; 437  : 						continue;

	jmp	SHORT $LN117@Exec
$LN58@Exec:

; 438  : 					}
; 439  : 
; 440  : 					// get feature's radius -- store in vt to save another stack var
; 441  : 					// 2000-11-17 MODIFIED BY S.G. NEED TO ADD THE SIZE OF THE 'blastRadius' TO THIS
; 442  : 					//vt = testFeature->drawPointer->Radius();
; 443  : 					vt = testFeature->drawPointer->Radius() + wcPtr->BlastRadius;

	mov	eax, DWORD PTR _testFeature$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	call	?Radius@DrawableObject@@QBEMXZ		; DrawableObject::Radius
	fstp	DWORD PTR tv2639[ebp]
	movss	xmm0, DWORD PTR tv2639[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+868]
	movzx	eax, WORD PTR [edx+52]
	cvtsi2ss xmm1, eax
	addss	xmm0, xmm1
	movss	DWORD PTR _vt$[ebp], xmm0

; 444  : 					// END OF MODIFIED SECTION
; 445  : 					testFeature->drawPointer->GetPosition( &fpos );

	lea	ecx, DWORD PTR _fpos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _testFeature$[ebp]
	mov	ecx, DWORD PTR [edx+332]
	call	?GetPosition@DrawableObject@@QAEXPAUTpoint@@@Z ; DrawableObject::GetPosition

; 446  : 					if (fabs (p1.x - fpos.x) < vt + p3.x &&
; 447  : 						fabs (p1.y - fpos.y) < vt + p3.y &&
; 448  : 						fabs (p1.z - fpos.z) < vt + p3.z )

	movss	xmm0, DWORD PTR _p1$[ebp]
	subss	xmm0, DWORD PTR _fpos$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2648[ebp]
	movss	xmm0, DWORD PTR _vt$[ebp]
	addss	xmm0, DWORD PTR _p3$[ebp]
	comiss	xmm0, DWORD PTR tv2648[ebp]
	jbe	$LN56@Exec
	movss	xmm0, DWORD PTR _p1$[ebp+4]
	subss	xmm0, DWORD PTR _fpos$[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2655[ebp]
	movss	xmm0, DWORD PTR _vt$[ebp]
	addss	xmm0, DWORD PTR _p3$[ebp+4]
	comiss	xmm0, DWORD PTR tv2655[ebp]
	jbe	$LN56@Exec
	movss	xmm0, DWORD PTR _p1$[ebp+8]
	subss	xmm0, DWORD PTR _fpos$[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2662[ebp]
	movss	xmm0, DWORD PTR _vt$[ebp]
	addss	xmm0, DWORD PTR _p3$[ebp+8]
	comiss	xmm0, DWORD PTR tv2662[ebp]
	jbe	$LN56@Exec

; 449  : 					{
; 450  : 					org.x = p2.x;

	movss	xmm0, DWORD PTR _p2$[ebp]
	movss	DWORD PTR _org$[ebp], xmm0

; 451  : 					org.y = p2.y;

	movss	xmm0, DWORD PTR _p2$[ebp+4]
	movss	DWORD PTR _org$[ebp+4], xmm0

; 452  : 					org.z = p2.z;

	movss	xmm0, DWORD PTR _p2$[ebp+8]
	movss	DWORD PTR _org$[ebp+8], xmm0

; 453  : 					if ( testFeature->drawPointer->GetRayHit( &org, &vec, &pos, 1.0f ) )

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	lea	edx, DWORD PTR _org$[ebp]
	push	edx
	mov	eax, DWORD PTR _testFeature$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	mov	edx, DWORD PTR _testFeature$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+332]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	test	eax, eax
	je	$LN56@Exec

; 454  : 					{
; 455  : 
; 456  : 							// "back up" the hit point on features.  We want to
; 457  : 							// be able to see them, otherwise they'll sort
; 458  : 							// badly in draw
; 459  : 							pos.x -= bulptr->xdot * 0.10f;

	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	xmm1, DWORD PTR _pos$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _pos$[ebp], xmm1

; 460  : 							pos.y -= bulptr->ydot * 0.10f;

	mov	ecx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [ecx+16]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	xmm1, DWORD PTR _pos$[ebp+4]
	subss	xmm1, xmm0
	movss	DWORD PTR _pos$[ebp+4], xmm1

; 461  : 							pos.z -= bulptr->zdot * 0.10f;

	mov	edx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [edx+20]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	xmm1, DWORD PTR _pos$[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _pos$[ebp+8], xmm1

; 462  : 
; 463  : 							vec.x = PRANDFloat() * 60.0f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv2688[ebp]
	movss	xmm0, DWORD PTR tv2688[ebp]
	mulss	xmm0, DWORD PTR __real@42700000
	movss	DWORD PTR _vec$[ebp], xmm0

; 464  : 							vec.y = PRANDFloat() * 60.0f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv2692[ebp]
	movss	xmm0, DWORD PTR tv2692[ebp]
	mulss	xmm0, DWORD PTR __real@42700000
	movss	DWORD PTR _vec$[ebp+4], xmm0

; 465  : 							vec.z = -40.0f;

	movss	xmm0, DWORD PTR __real@c2200000
	movss	DWORD PTR _vec$[ebp+8], xmm0

; 466  : 
; 467  : 							//RV - I-Hawk - PSFX_GUN_HIT_OBJECT is always defined, no need for this
; 468  : 							//old stuff anymore... only a PS call
; 469  : 
; 470  : 							AddParticleEffect(PSFX_GUN_HIT_OBJECT,&pos,&vec);

	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	push	121					; 00000079H
	call	?AddParticleEffect@@YAHHPAUTpoint@@0@Z	; AddParticleEffect
	add	esp, 12					; 0000000cH

; 471  : 
; 472  : 							//{
; 473  : 							//	// add bullet effect...
; 474  : 							//	switch( PRANDInt5() )
; 475  : 							//	{
; 476  : 							//		case 0:
; 477  : 							//			/*
; 478  : 							//			OTWDriver.AddSfxRequest(
; 479  : 							//				new SfxClass(SFX_SPARKS,				// type
; 480  : 							//				&pos,							// world pos
; 481  : 							//				0.75f,							// time to live
; 482  : 							//				21.0f));						// scale
; 483  : 							//				*/
; 484  : 							//			DrawableParticleSys::PS_AddParticleEx((SFX_SPARKS + 1),
; 485  : 							//					&pos,
; 486  : 							//					&PSvec);
; 487  : 							//			break;
; 488  : 							//		case 1:
; 489  : 							//			/*
; 490  : 							//			OTWDriver.AddSfxRequest(
; 491  : 							//				new SfxClass( SFX_FIRE4,		// type
; 492  : 							//				SFX_MOVES | SFX_USES_GRAVITY | SFX_NO_DOWN_VECTOR,
; 493  : 							//				&pos,					// world pos
; 494  : 							//				&vec,					// vel vector
; 495  : 							//				1.5,					// time to live
; 496  : 							//				15.0f ) );				// scale
; 497  : 							//				*/
; 498  : 							//			DrawableParticleSys::PS_AddParticleEx((SFX_FIRE4 + 1),
; 499  : 							//					&pos,
; 500  : 							//					&vec);
; 501  : 							//			break;
; 502  : 							//		case 2:
; 503  : 							//			/*
; 504  : 							//			OTWDriver.AddSfxRequest(
; 505  : 							//				new SfxClass( SFX_FIRE5,		// type
; 506  : 							//				SFX_MOVES | SFX_USES_GRAVITY | SFX_NO_DOWN_VECTOR,
; 507  : 							//				&pos,					// world pos
; 508  : 							//				&vec,					// vel vector
; 509  : 							//				1.5,					// time to live
; 510  : 							//				15.0f ) );				// scale
; 511  : 							//				*/
; 512  : 							//			DrawableParticleSys::PS_AddParticleEx((SFX_FIRE5 + 1),
; 513  : 							//					&pos,
; 514  : 							//					&vec);
; 515  : 							//			break;
; 516  : 							//		case 3:
; 517  : 							//			/*
; 518  : 							//			OTWDriver.AddSfxRequest(
; 519  : 							//				new SfxClass( SFX_DEBRISTRAIL,		// type
; 520  : 							//				SFX_MOVES | SFX_USES_GRAVITY | SFX_BOUNCES,
; 521  : 							//				&pos,					// world pos
; 522  : 							//				&vec,					// vel vector
; 523  : 							//				1.5,					// time to live
; 524  : 							//				15.0f ) );				// scale
; 525  : 							//				*/
; 526  : 							//			DrawableParticleSys::PS_AddParticleEx((SFX_DEBRISTRAIL + 1),
; 527  : 							//					&pos,
; 528  : 							//					&vec);
; 529  : 							//			break;
; 530  : 							//		case 4:
; 531  : 							//		default:
; 532  : 							//			pos.x += bulptr->xdot * 0.10f;
; 533  : 							//			pos.y += bulptr->ydot * 0.10f;
; 534  : 							//			pos.z += bulptr->zdot * 0.10f;
; 535  : 							//			/*
; 536  : 							//			OTWDriver.AddSfxRequest(
; 537  : 							//				new SfxClass( SFX_BILLOWING_SMOKE,		// type
; 538  : 							//				&pos,					// world pos
; 539  : 							//				10 + PRANDInt3() * 5,					// time to live
; 540  : 							//				0.3f ) );				// scale
; 541  : 							//				*/
; 542  : 							//			DrawableParticleSys::PS_AddParticleEx((SFX_BILLOWING_SMOKE + 1),
; 543  : 							//					&pos,
; 544  : 							//					&PSvec);
; 545  : 							//			break;
; 546  : 							//	}
; 547  : 
; 548  : 							//	F4SoundFXSetPos( (PRANDInt3() == 1 ) ? SFX_GRNDHIT2 : SFX_GRNDHIT1,
; 549  : 							//					TRUE,
; 550  : 							//					bulptr->x, bulptr->y, bulptr->z, 1.0f);
; 551  : 							//}
; 552  : 		
; 553  : 						// VuTargetEntity* target= (VuTargetEntity*) vuDatabase->Find(testFeature->OwnerId());
; 554  : 						message = new FalconDamageMessage (testFeature->Id(), FalconLocalGame );

	push	98					; 00000062H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T13[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T13[ebp], 0
	je	SHORT $LN97@Exec
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN95@Exec
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv583[ebp], eax
	jmp	SHORT $LN96@Exec
$LN95@Exec:
	mov	DWORD PTR tv583[ebp], 0
$LN96@Exec:
	push	1
	mov	eax, DWORD PTR tv583[ebp]
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _testFeature$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR $T13[ebp]
	call	??0FalconDamageMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconDamageMessage::FalconDamageMessage
	mov	DWORD PTR tv594[ebp], eax
	jmp	SHORT $LN98@Exec
$LN97@Exec:
	mov	DWORD PTR tv594[ebp], 0
$LN98@Exec:
	mov	ecx, DWORD PTR tv594[ebp]
	mov	DWORD PTR $T11[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR $T11[ebp]
	mov	DWORD PTR _message$[ebp], edx

; 555  : 						message->dataBlock.fEntityID  = parent->Id();

	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR [eax+74], ecx
	mov	DWORD PTR [eax+78], edx

; 556  : 						message->dataBlock.fCampID    = parent->GetCampID();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	DWORD PTR tv621[ebp], eax
	mov	ecx, DWORD PTR tv621[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv621[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	mov	ecx, DWORD PTR _message$[ebp]
	mov	WORD PTR [ecx+82], ax

; 557  : 						message->dataBlock.fSide      = parent->GetCountry();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	DWORD PTR tv635[ebp], eax
	mov	edx, DWORD PTR tv635[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv635[ebp]
	mov	edx, DWORD PTR [eax+120]
	call	edx
	mov	ecx, DWORD PTR _message$[ebp]
	mov	BYTE PTR [ecx+87], al

; 558  : 						message->dataBlock.fPilotID   = ((SimMoverClass*)parent.get())->pilotSlot;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	edx, DWORD PTR _message$[ebp]
	mov	al, BYTE PTR [eax+665]
	mov	BYTE PTR [edx+84], al

; 559  : 						message->dataBlock.fIndex     = parent->Type();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	ecx, DWORD PTR _message$[ebp]
	mov	WORD PTR [ecx+85], ax

; 560  : 						message->dataBlock.fWeaponID  = Type();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	edx, DWORD PTR _message$[ebp]
	mov	WORD PTR [edx+88], ax

; 561  : 						message->dataBlock.fWeaponUID.num_ = GetCurrentBurst();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentBurst@GunClass@@QAEHXZ	; GunClass::GetCurrentBurst
	mov	ecx, DWORD PTR _message$[ebp]
	mov	DWORD PTR [ecx+90], eax

; 562  : 		
; 563  : 						message->dataBlock.dEntityID  = testFeature->Id();

	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _testFeature$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR [eax+60], ecx
	mov	DWORD PTR [eax+64], edx

; 564  : 						message->dataBlock.dCampID    = testFeature->GetCampID();

	mov	ecx, DWORD PTR _testFeature$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _testFeature$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	mov	ecx, DWORD PTR _message$[ebp]
	mov	WORD PTR [ecx+68], ax

; 565  : 						message->dataBlock.dSide      = testFeature->GetCountry();

	mov	edx, DWORD PTR _testFeature$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _testFeature$[ebp]
	mov	edx, DWORD PTR [eax+120]
	call	edx
	mov	ecx, DWORD PTR _message$[ebp]
	mov	BYTE PTR [ecx+73], al

; 566  : 						message->dataBlock.dPilotID   = 255;

	mov	edx, DWORD PTR _message$[ebp]
	mov	BYTE PTR [edx+70], 255			; 000000ffH

; 567  : 						message->dataBlock.dIndex     = testFeature->Type();

	mov	ecx, DWORD PTR _testFeature$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	ecx, DWORD PTR _message$[ebp]
	mov	WORD PTR [ecx+71], ax

; 568  : 						message->dataBlock.damageType = FalconDamageType::BulletDamage;

	mov	edx, DWORD PTR _message$[ebp]
	mov	DWORD PTR [edx+48], 0

; 569  : 						message->dataBlock.damageStrength = 0;

	mov	eax, DWORD PTR _message$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+52], xmm0

; 570  : 						message->dataBlock.damageRandomFact = PRANDFloatPos();

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	mov	ecx, DWORD PTR _message$[ebp]
	fstp	DWORD PTR [ecx+56]

; 571  : 						message->RequestOutOfBandTransmit ();

	mov	ecx, DWORD PTR _message$[ebp]
	call	?RequestOutOfBandTransmit@VuMessage@@QAEXXZ ; VuMessage::RequestOutOfBandTransmit

; 572  : 						FalconSendMessage (message,TRUE);

	push	1
	mov	edx, DWORD PTR _message$[ebp]
	push	edx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 573  : 		
; 574  : 						bulptr->flying = FALSE;

	mov	eax, DWORD PTR _bulptr$[ebp]
	mov	DWORD PTR [eax+24], 0

; 583  : 
; 584  : 	 FinishedFeatureTest:

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _featureWalker$12[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 575  : 						// kinda yucky, but efficient
; 576  : 						goto FinishedFeatureTest;

	jmp	SHORT $FinishedFeatureTest$119
$LN56@Exec:

; 577  : 					}
; 578  : 					}
; 579  : 				testFeature = (SimBaseClass*) featureWalker.GetNext();

	lea	ecx, DWORD PTR _featureWalker$12[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testFeature$[ebp], eax

; 580  : 				}

	jmp	$LN117@Exec
$LN60@Exec:

; 581  : 			objective = (CampBaseClass*)gridIt->GetNext();

	mov	ecx, DWORD PTR _gridIt$[ebp]
	call	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetNext
	mov	DWORD PTR _objective$[ebp], eax

; 582  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _featureWalker$12[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	jmp	$LN115@Exec
$LN63@Exec:
$FinishedFeatureTest$119:

; 585  : 		 if ( !bulptr->flying )

	mov	ecx, DWORD PTR _bulptr$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jne	SHORT $LN54@Exec

; 586  : 		 {
; 587  : 			 whatWasHit |= TRACER_HIT_FEATURE;

	mov	edx, DWORD PTR _whatWasHit$[ebp]
	or	edx, 1
	mov	DWORD PTR _whatWasHit$[ebp], edx

; 588  : 			 numFlying--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+824]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+824], ecx

; 589  : 			 continue;

	jmp	$LN77@Exec
$LN54@Exec:

; 590  : 		 }
; 591  : 
; 592  :          // Objects
; 593  :          testObject = targetList;

	mov	eax, DWORD PTR _targetList$[ebp]
	mov	DWORD PTR _testObject$[ebp], eax
$LN53@Exec:

; 594  :          while (testObject)

	cmp	DWORD PTR _testObject$[ebp], 0
	je	$LN52@Exec

; 595  :          {
; 596  :             if 
; 597  : 				(
; 598  :                testObject->BaseData() && testObject->BaseData()->IsSim() &&
; 599  :                (!testObject->BaseData()->IsWeapon() || testObject->BaseData()->IsEject()) &&
; 600  : 					!((SimBaseClass*)testObject->BaseData())->IsExploding() &&
; 601  :                testObject->localData && testObject->localData->range < initBulletVelocity * (2.5F) &&
; 602  : 					((SimBaseClass*)testObject->BaseData())->drawPointer != NULL
; 603  : 				)

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	test	eax, eax
	je	$LN48@Exec
	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	$LN48@Exec
	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv771[ebp], eax
	mov	ecx, DWORD PTR tv771[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv771[ebp]
	mov	eax, DWORD PTR [edx+204]
	call	eax
	test	eax, eax
	je	SHORT $LN50@Exec
	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv779[ebp], eax
	mov	ecx, DWORD PTR tv779[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv779[ebp]
	mov	eax, DWORD PTR [edx+188]
	call	eax
	test	eax, eax
	je	$LN48@Exec
$LN50@Exec:
	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv795[ebp], eax
	mov	ecx, DWORD PTR tv795[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv795[ebp]
	mov	eax, DWORD PTR [edx+208]
	call	eax
	test	eax, eax
	jne	$LN48@Exec
	mov	ecx, DWORD PTR _testObject$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	$LN48@Exec
	mov	edx, DWORD PTR _testObject$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+792]
	mulss	xmm0, DWORD PTR __real@40200000
	comiss	xmm0, DWORD PTR [eax+44]
	jbe	$LN48@Exec
	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	DWORD PTR [eax+332], 0
	je	$LN48@Exec

; 604  :             {
; 605  : 			   // get feature's radius -- store in vt to save another stack var
; 606  : // 2000-11-17 MODIFIED BY S.G. NEED TO ADD THE SIZE OF THE 'blastRadius' TO THIS
; 607  : //			   vt = ((SimBaseClass*)testObject->BaseData())->drawPointer->Radius();
; 608  : 			   vt = ((SimBaseClass*)testObject->BaseData())->drawPointer->Radius() + wcPtr->BlastRadius;

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, DWORD PTR [eax+332]
	call	?Radius@DrawableObject@@QBEMXZ		; DrawableObject::Radius
	fstp	DWORD PTR tv2801[ebp]
	movss	xmm0, DWORD PTR tv2801[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+868]
	movzx	ecx, WORD PTR [eax+52]
	cvtsi2ss xmm1, ecx
	addss	xmm0, xmm1
	movss	DWORD PTR _vt$[ebp], xmm0

; 609  : // END OF MODIFIED SECTION
; 610  : 			   ((SimBaseClass*)testObject->BaseData())->drawPointer->GetPosition( &fpos );

	lea	edx, DWORD PTR _fpos$[ebp]
	push	edx
	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, DWORD PTR [eax+332]
	call	?GetPosition@DrawableObject@@QAEXPAUTpoint@@@Z ; DrawableObject::GetPosition

; 611  :                if (fabs (p1.x - fpos.x) < vt + p3.x && fabs (p1.y - fpos.y) < vt + p3.y && fabs (p1.z - fpos.z) < vt + p3.z)

	movss	xmm0, DWORD PTR _p1$[ebp]
	subss	xmm0, DWORD PTR _fpos$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2810[ebp]
	movss	xmm0, DWORD PTR _vt$[ebp]
	addss	xmm0, DWORD PTR _p3$[ebp]
	comiss	xmm0, DWORD PTR tv2810[ebp]
	jbe	$LN48@Exec
	movss	xmm0, DWORD PTR _p1$[ebp+4]
	subss	xmm0, DWORD PTR _fpos$[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2817[ebp]
	movss	xmm0, DWORD PTR _vt$[ebp]
	addss	xmm0, DWORD PTR _p3$[ebp+4]
	comiss	xmm0, DWORD PTR tv2817[ebp]
	jbe	$LN48@Exec
	movss	xmm0, DWORD PTR _p1$[ebp+8]
	subss	xmm0, DWORD PTR _fpos$[ebp+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv2824[ebp]
	movss	xmm0, DWORD PTR _vt$[ebp]
	addss	xmm0, DWORD PTR _p3$[ebp+8]
	comiss	xmm0, DWORD PTR tv2824[ebp]
	jbe	$LN48@Exec

; 612  :                {
; 613  :                // Back up 1/2 of the vector traveled.
; 614  : 			      org.x = p2.x - 0.5F * vec.x;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _vec$[ebp]
	movss	xmm1, DWORD PTR _p2$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _org$[ebp], xmm1

; 615  : 			      org.y = p2.y - 0.5F * vec.y;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _vec$[ebp+4]
	movss	xmm1, DWORD PTR _p2$[ebp+4]
	subss	xmm1, xmm0
	movss	DWORD PTR _org$[ebp+4], xmm1

; 616  : 			      org.z = p2.z - 0.5F * vec.z;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _vec$[ebp+8]
	movss	xmm1, DWORD PTR _p2$[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _org$[ebp+8], xmm1

; 617  : 
; 618  : 				  // init pos to something, not really necessary
; 619  : 				  pos = fpos;

	mov	eax, DWORD PTR _fpos$[ebp]
	mov	DWORD PTR _pos$[ebp], eax
	mov	ecx, DWORD PTR _fpos$[ebp+4]
	mov	DWORD PTR _pos$[ebp+4], ecx
	mov	edx, DWORD PTR _fpos$[ebp+8]
	mov	DWORD PTR _pos$[ebp+8], edx

; 620  : 
; 621  : 				  // scale the bounding box by how close the object is -- the
; 622  : 				  // closer the smaller the box
; 623  : 				  vt = testObject->localData->range/ (initBulletVelocity * 1.5f );

	mov	eax, DWORD PTR _testObject$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+792]
	mulss	xmm0, DWORD PTR __real@3fc00000
	movss	xmm1, DWORD PTR [ecx+44]
	divss	xmm1, xmm0
	movss	DWORD PTR _vt$[ebp], xmm1

; 624  : 				  vt = max( 1.0f, vt );

	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _vt$[ebp]
	jbe	SHORT $LN99@Exec
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv866[ebp], xmm0
	jmp	SHORT $LN100@Exec
$LN99@Exec:
	movss	xmm0, DWORD PTR _vt$[ebp]
	movss	DWORD PTR tv866[ebp], xmm0
$LN100@Exec:
	movss	xmm0, DWORD PTR tv866[ebp]
	movss	DWORD PTR _vt$[ebp], xmm0

; 625  : 
; 626  : 			      if (((SimBaseClass*)testObject->BaseData())->drawPointer->GetRayHit( &org, &vec, &pos, vt ))

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	eax, DWORD PTR [eax+332]
	mov	DWORD PTR tv876[ebp], eax
	push	ecx
	movss	xmm0, DWORD PTR _vt$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vec$[ebp]
	push	edx
	lea	eax, DWORD PTR _org$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv876[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv876[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	test	eax, eax
	je	$LN48@Exec

; 627  :                   {
; 628  : 					  // add bullet effect...
; 629  : 					  // pos.x = p4.x;
; 630  : 					  // pos.y = p4.y;
; 631  : 					  // pos.z = p4.z;
; 632  : 					  vec.x = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vec$[ebp], xmm0

; 633  : 					  vec.y = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vec$[ebp+4], xmm0

; 634  : 					  vec.z = -15.0f;

	movss	xmm0, DWORD PTR __real@c1700000
	movss	DWORD PTR _vec$[ebp+8], xmm0

; 635  : 
; 636  : 					  //RV - I-Hawk - PSFX_GUN_HIT_OBJECT is always defined, no need for this
; 637  : 							//old stuff anymore... only a PS call
; 638  : 
; 639  : 					  AddParticleEffect(PSFX_GUN_HIT_OBJECT,&pos,&vec);

	lea	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	push	121					; 00000079H
	call	?AddParticleEffect@@YAHHPAUTpoint@@0@Z	; AddParticleEffect
	add	esp, 12					; 0000000cH

; 640  : 					  
; 641  : 					  ///*
; 642  : 						 // OTWDriver.AddSfxRequest(
; 643  : 							//  new SfxClass(SFX_TRAILSMOKE,				// type
; 644  : 							//  SFX_MOVES,						// flags
; 645  : 							//  &pos,							// world pos
; 646  : 							//  &vec,							// vector
; 647  : 							//  1.5f,							// time to live
; 648  : 							//  1.0f));							// scale
; 649  : 							//  */
; 650  : 						 // DrawableParticleSys::PS_AddParticleEx((SFX_TRAILSMOKE + 1),
; 651  : 							//					&pos,
; 652  : 							//					&vec);
; 653  : 						 // 
; 654  : 						 // /*
; 655  : 						 // OTWDriver.AddSfxRequest(
; 656  : 							//  new SfxClass(SFX_SPARKS,				// type
; 657  : 							//  &pos,							// world pos
; 658  : 							//  0.75f,							// time to live
; 659  : 							//  11.0f));						// scale
; 660  : 							//  */
; 661  : 						 // DrawableParticleSys::PS_AddParticleEx((SFX_SPARKS + 1),
; 662  : 							//					&pos,
; 663  : 							//					&PSvec);
; 664  : 					  
; 665  : 
; 666  :                      // VuTargetEntity* target= (VuTargetEntity*) vuDatabase->Find(testObject->BaseData()->OwnerId());
; 667  : 					 message = new FalconDamageMessage (testObject->BaseData()->Id(), FalconLocalGame );

	push	98					; 00000062H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T15[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T15[ebp], 0
	je	SHORT $LN103@Exec
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN101@Exec
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv911[ebp], eax
	jmp	SHORT $LN102@Exec
$LN101@Exec:
	mov	DWORD PTR tv911[ebp], 0
$LN102@Exec:
	push	1
	mov	ecx, DWORD PTR tv911[ebp]
	push	ecx
	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T15[ebp]
	call	??0FalconDamageMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconDamageMessage::FalconDamageMessage
	mov	DWORD PTR tv924[ebp], eax
	jmp	SHORT $LN104@Exec
$LN103@Exec:
	mov	DWORD PTR tv924[ebp], 0
$LN104@Exec:
	mov	eax, DWORD PTR tv924[ebp]
	mov	DWORD PTR $T10[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T10[ebp]
	mov	DWORD PTR _message$[ebp], ecx

; 668  :                      message->dataBlock.fEntityID  = parent->Id();

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR [eax+74], ecx
	mov	DWORD PTR [eax+78], edx

; 669  :                      message->dataBlock.fCampID    = parent->GetCampID();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	DWORD PTR tv951[ebp], eax
	mov	ecx, DWORD PTR tv951[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv951[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	mov	ecx, DWORD PTR _message$[ebp]
	mov	WORD PTR [ecx+82], ax

; 670  :                      message->dataBlock.fSide      = parent->GetCountry();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	DWORD PTR tv965[ebp], eax
	mov	edx, DWORD PTR tv965[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv965[ebp]
	mov	edx, DWORD PTR [eax+120]
	call	edx
	mov	ecx, DWORD PTR _message$[ebp]
	mov	BYTE PTR [ecx+87], al

; 671  :                      message->dataBlock.fPilotID   = ((SimMoverClass*)parent.get())->pilotSlot;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	edx, DWORD PTR _message$[ebp]
	mov	al, BYTE PTR [eax+665]
	mov	BYTE PTR [edx+84], al

; 672  :                      message->dataBlock.fIndex     = parent->Type();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	ecx, DWORD PTR _message$[ebp]
	mov	WORD PTR [ecx+85], ax

; 673  :                      message->dataBlock.fWeaponID  = Type();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	edx, DWORD PTR _message$[ebp]
	mov	WORD PTR [edx+88], ax

; 674  :                      message->dataBlock.fWeaponUID.num_ = GetCurrentBurst();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentBurst@GunClass@@QAEHXZ	; GunClass::GetCurrentBurst
	mov	ecx, DWORD PTR _message$[ebp]
	mov	DWORD PTR [ecx+90], eax

; 675  :                      message->dataBlock.dEntityID  = testObject->BaseData()->Id();

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR [eax+60], ecx
	mov	DWORD PTR [eax+64], edx

; 676  :                      message->dataBlock.dCampID    = testObject->BaseData()->GetCampID();

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv1028[ebp], eax
	mov	ecx, DWORD PTR tv1028[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv1028[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	mov	ecx, DWORD PTR _message$[ebp]
	mov	WORD PTR [ecx+68], ax

; 677  :                      message->dataBlock.dSide      = testObject->BaseData()->GetCountry();

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv1037[ebp], eax
	mov	edx, DWORD PTR tv1037[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv1037[ebp]
	mov	edx, DWORD PTR [eax+120]
	call	edx
	mov	ecx, DWORD PTR _message$[ebp]
	mov	BYTE PTR [ecx+73], al

; 678  :                      message->dataBlock.dPilotID   = ((SimMoverClass*)testObject->BaseData())->pilotSlot;

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	edx, DWORD PTR _message$[ebp]
	mov	al, BYTE PTR [eax+665]
	mov	BYTE PTR [edx+70], al

; 679  :                      message->dataBlock.dIndex     = testObject->BaseData()->Type();

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	ecx, DWORD PTR _message$[ebp]
	mov	WORD PTR [ecx+71], ax

; 680  :                      message->dataBlock.damageType = FalconDamageType::BulletDamage;

	mov	edx, DWORD PTR _message$[ebp]
	mov	DWORD PTR [edx+48], 0

; 681  : 					 message->dataBlock.damageRandomFact = PRANDFloatPos();

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	mov	eax, DWORD PTR _message$[ebp]
	fstp	DWORD PTR [eax+56]

; 682  : 					 message->dataBlock.damageStrength = 0;

	mov	ecx, DWORD PTR _message$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+52], xmm0

; 683  : 					 message->RequestOutOfBandTransmit ();

	mov	ecx, DWORD PTR _message$[ebp]
	call	?RequestOutOfBandTransmit@VuMessage@@QAEXXZ ; VuMessage::RequestOutOfBandTransmit

; 684  :                      FalconSendMessage (message,TRUE);

	push	1
	mov	edx, DWORD PTR _message$[ebp]
	push	edx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 685  : 					 bulptr->flying = FALSE;

	mov	eax, DWORD PTR _bulptr$[ebp]
	mov	DWORD PTR [eax+24], 0
$LN48@Exec:

; 686  :                   }
; 687  :                }
; 688  :             }
; 689  :             testObject = testObject->next;

	mov	ecx, DWORD PTR _testObject$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _testObject$[ebp], edx

; 690  :          }

	jmp	$LN53@Exec
$LN52@Exec:

; 691  : 
; 692  : 		 if ( !bulptr->flying )

	mov	eax, DWORD PTR _bulptr$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN47@Exec

; 693  : 		 {
; 694  : 			 whatWasHit |= TRACER_HIT_UNIT;

	mov	ecx, DWORD PTR _whatWasHit$[ebp]
	or	ecx, 2
	mov	DWORD PTR _whatWasHit$[ebp], ecx

; 695  : 			 numFlying--;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+824]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+824], eax

; 696  : 			 continue;

	jmp	$LN77@Exec
$LN47@Exec:

; 697  : 		 }
; 698  : 
; 699  :          // Apply Drag;
; 700  : #ifndef NODRAG
; 701  :          vt     = (float)sqrt(bulptr->xdot*bulptr->xdot +
; 702  :             bulptr->ydot*bulptr->ydot +
; 703  :             bulptr->zdot * bulptr->zdot);
; 704  :          vt1    = (float)sqrt(bulptr->xdot*bulptr->xdot +
; 705  :             bulptr->ydot*bulptr->ydot);
; 706  :          singam = -bulptr->zdot / vt;
; 707  :          cosgam = vt1 / vt;
; 708  :          cosmu  = bulptr->xdot / vt1;
; 709  :          sinmu  = bulptr->ydot / vt1;
; 710  :          alpha  = dragFactor * vt * vt;
; 711  :          dragDelta = alpha * cosgam * SimLibMajorFrameTime;
; 712  : 
; 713  :          bulptr->xdot -= dragDelta * cosmu;
; 714  :          bulptr->ydot -= dragDelta * sinmu;
; 715  :          bulptr->zdot -= (alpha * singam)* SimLibMajorFrameTime;
; 716  : #endif
; 717  :          bulptr->zdot += GRAVITY * SimLibMajorFrameTime;

	movss	xmm0, DWORD PTR __real@4200b53f
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	edx, DWORD PTR _bulptr$[ebp]
	addss	xmm0, DWORD PTR [edx+20]
	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [eax+20], xmm0

; 718  : 
; 719  :          //------------------------------------------------------//
; 720  :          // see if bullet is within 1 time step of impacting the //
; 721  :          // ground and linearly extrapolate to get impact point. //
; 722  :          //------------------------------------------------------//
; 723  :          if ( parent->OnGround() && bulptr->z + bulptr->zdot * SimLibMajorFrameTime >= groundZ + 1500.0f)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	DWORD PTR tv1099[ebp], eax
	mov	ecx, DWORD PTR tv1099[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv1099[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	je	SHORT $LN46@Exec
	mov	ecx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [ecx+20]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	edx, DWORD PTR _bulptr$[ebp]
	addss	xmm0, DWORD PTR [edx+8]
	movss	xmm1, DWORD PTR _groundZ$[ebp]
	addss	xmm1, DWORD PTR __real@44bb8000
	comiss	xmm0, xmm1
	jb	SHORT $LN46@Exec

; 724  : 		 {
; 725  : 			// in this case the firing object is a ground vehicle.  We don't
; 726  : 			// really do any ground detect for them since they're too close
; 727  : 			// to the ground, just detect when the bullet has gone too far below
; 728  : 			// ground and stop it.
; 729  :            	bulptr->flying = FALSE;

	mov	eax, DWORD PTR _bulptr$[ebp]
	mov	DWORD PTR [eax+24], 0

; 730  : 			numFlying--;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+824]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+824], edx
	jmp	$LN37@Exec
$LN46@Exec:

; 731  : 		 }
; 732  :          else if ( !parent->OnGround() && bulptr->z + bulptr->zdot * SimLibMajorFrameTime >= groundZ )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	DWORD PTR tv1123[ebp], eax
	mov	ecx, DWORD PTR tv1123[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv1123[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	jne	$LN44@Exec
	mov	ecx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [ecx+20]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	edx, DWORD PTR _bulptr$[ebp]
	addss	xmm0, DWORD PTR [edx+8]
	comiss	xmm0, DWORD PTR _groundZ$[ebp]
	jb	$LN44@Exec

; 733  :          {
; 734  : 			// check to see if bullet already below ground
; 735  : 			if ( bulptr->z > groundZ )

	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	comiss	xmm0, DWORD PTR _groundZ$[ebp]
	jbe	SHORT $LN43@Exec

; 736  : 			{
; 737  : 				// back up the bullet 1/2 frame as a guess
; 738  : 				bulptr->x = bulptr->x - bulptr->xdot * SimLibMajorFrameTime * 0.5f;

	mov	ecx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [ecx+12]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _bulptr$[ebp]
	movss	xmm1, DWORD PTR [edx]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [eax], xmm1

; 739  : 				bulptr->y = bulptr->y - bulptr->ydot * SimLibMajorFrameTime * 0.5f;

	mov	ecx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [ecx+16]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _bulptr$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [eax+4], xmm1

; 740  : 			}
; 741  : 			else

	jmp	SHORT $LN42@Exec
$LN43@Exec:

; 742  : 			{
; 743  : 				timeToImpact = (bulptr->z-groundZ) / bulptr->zdot;

	mov	ecx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, DWORD PTR _groundZ$[ebp]
	mov	edx, DWORD PTR _bulptr$[ebp]
	divss	xmm0, DWORD PTR [edx+20]
	movss	DWORD PTR _timeToImpact$[ebp], xmm0

; 744  : 				bulptr->x = bulptr->x + bulptr->xdot * timeToImpact;

	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _timeToImpact$[ebp]
	mov	ecx, DWORD PTR _bulptr$[ebp]
	addss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [edx], xmm0

; 745  : 				bulptr->y = bulptr->y + bulptr->ydot * timeToImpact;

	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _timeToImpact$[ebp]
	mov	ecx, DWORD PTR _bulptr$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [edx+4], xmm0
$LN42@Exec:

; 746  : 			}
; 747  :             bulptr->z = groundZ;

	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR _groundZ$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 748  :            	bulptr->flying = FALSE;

	mov	ecx, DWORD PTR _bulptr$[ebp]
	mov	DWORD PTR [ecx+24], 0

; 749  : 			numFlying--;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+824]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+824], eax

; 750  : 			whatWasHit |= TRACER_HIT_GROUND;

	mov	edx, DWORD PTR _whatWasHit$[ebp]
	or	edx, 4
	mov	DWORD PTR _whatWasHit$[ebp], edx

; 751  : 
; 752  : 			// only do sound and smoke effect for lead bullet....
; 753  : 			// hack: seems like ground vehicles shoot into ground
; 754  : 			// for some reason -- don't place craters
; 755  : 			if ( hitGround == FALSE && !parent->OnGround() )

	cmp	DWORD PTR _hitGround$[ebp], 0
	jne	$LN38@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	DWORD PTR tv1178[ebp], eax
	mov	eax, DWORD PTR tv1178[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv1178[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	jne	$LN38@Exec

; 756  : 			{
; 757  : 				if ( !isOwnship )

	cmp	DWORD PTR _isOwnship$[ebp], 0
	jne	SHORT $LN40@Exec

; 758  : 					hitGround = TRUE;

	mov	DWORD PTR _hitGround$[ebp], 1
$LN40@Exec:

; 759  : 	
; 760  : 				pos.x = bulptr->x + PRANDFloat() * 8.0f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv3012[ebp]
	movss	xmm0, DWORD PTR tv3012[ebp]
	mulss	xmm0, DWORD PTR __real@41000000
	mov	ecx, DWORD PTR _bulptr$[ebp]
	addss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR _pos$[ebp], xmm0

; 761  : 				pos.y = bulptr->y + PRANDFloat() * 8.0f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv3018[ebp]
	movss	xmm0, DWORD PTR tv3018[ebp]
	mulss	xmm0, DWORD PTR __real@41000000
	mov	edx, DWORD PTR _bulptr$[ebp]
	addss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR _pos$[ebp+4], xmm0

; 762  : 		 		pos.z = OTWDriver.GetGroundLevel( pos.x, pos.y ) - 15.1f;

	push	0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	fstp	DWORD PTR tv3028[ebp]
	movss	xmm0, DWORD PTR tv3028[ebp]
	subss	xmm0, DWORD PTR __real@4171999a
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 763  : 	
; 764  : 				vec.x = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vec$[ebp], xmm0

; 765  : 				vec.y = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vec$[ebp+4], xmm0

; 766  : 				vec.z = -20.0f;

	movss	xmm0, DWORD PTR __real@c1a00000
	movss	DWORD PTR _vec$[ebp+8], xmm0

; 767  : 
; 768  : 				int groundType = OTWDriver.GetGroundType (pos.x, pos.y);

	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundType@OTWDriverClass@@QAEHMM@Z	; OTWDriverClass::GetGroundType
	mov	DWORD PTR _groundType$16[ebp], eax

; 769  : 
; 770  : 				if ( !(groundType == COVERAGE_WATER ||
; 771  : 				  	   groundType == COVERAGE_RIVER)  )

	cmp	DWORD PTR _groundType$16[ebp], 1
	je	SHORT $LN39@Exec
	cmp	DWORD PTR _groundType$16[ebp], 2
	je	SHORT $LN39@Exec

; 772  : 				{
; 773  : 					// MLR this effect creates the other effects by default
; 774  : 					// but allows easy replacement with a particle object
; 775  : 
; 776  : 					//RV - I-Hawk - PSFX_GUN_HIT_OBJECT is always defined, no need for this
; 777  : 					//old stuff anymore... only a PS cal
; 778  : 
; 779  : 					AddParticleEffect(PSFX_GUN_HIT_GROUND,&pos,&vec);

	lea	eax, DWORD PTR _vec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	push	120					; 00000078H
	call	?AddParticleEffect@@YAHHPAUTpoint@@0@Z	; AddParticleEffect
	add	esp, 12					; 0000000cH

; 780  : 
; 781  : 					//{
; 782  : 					//	F4SoundFXSetPos( (PRANDInt3() == 1 ) ? SFX_GRNDHIT2 : SFX_GRNDHIT1,
; 783  : 					//		TRUE,
; 784  : 					//		bulptr->x, bulptr->y, bulptr->z, 1.0f);
; 785  : 					//	
; 786  : 					//	if ( !PRANDInt3() )
; 787  : 					//	{
; 788  : 					//		/*
; 789  : 					//		OTWDriver.AddSfxRequest(
; 790  : 					//			new SfxClass (SFX_GROUND_DUSTCLOUD,			// type
; 791  : 					//			SFX_USES_GRAVITY | SFX_NO_DOWN_VECTOR | SFX_MOVES | SFX_NO_GROUND_CHECK,
; 792  : 					//			&pos,							// world pos
; 793  : 					//			&vec,
; 794  : 					//			1.0f,							// time to live
; 795  : 					//			8.5f ));		// scale
; 796  : 					//			*/
; 797  : 					//		DrawableParticleSys::PS_AddParticleEx((SFX_GROUND_DUSTCLOUD + 1),
; 798  : 					//							&pos,
; 799  : 					//							&vec);
; 800  : 					//		
; 801  : 					//	}
; 802  : 					//	else if ( !PRANDInt3() )
; 803  : 					//	{
; 804  : 					//		/*
; 805  : 					//		OTWDriver.AddSfxRequest(
; 806  : 					//			new SfxClass( SFX_FIRE4,		// type
; 807  : 					//			SFX_MOVES | SFX_USES_GRAVITY | SFX_NO_DOWN_VECTOR,
; 808  : 					//			&pos,					// world pos
; 809  : 					//			&vec,					// vel vector
; 810  : 					//			1.5,					// time to live
; 811  : 					//			15.0f ) );				// scale
; 812  : 					//			*/
; 813  : 					//		DrawableParticleSys::PS_AddParticleEx((SFX_FIRE4 + 1),
; 814  : 					//							&pos,
; 815  : 					//							&vec);
; 816  : 					//	}
; 817  : 					//	else 
; 818  : 					//	{
; 819  : 					//		/*
; 820  : 					//		OTWDriver.AddSfxRequest(
; 821  : 					//			new SfxClass(SFX_SPARKS,				// type
; 822  : 					//			&pos,							// world pos
; 823  : 					//			0.75f,							// time to live
; 824  : 					//			21.0f));						// scale
; 825  : 					//			*/
; 826  : 					//		DrawableParticleSys::PS_AddParticleEx((SFX_SPARKS + 1),
; 827  : 					//							&pos,
; 828  : 					//							&PSvec);
; 829  : 					//	}
; 830  : 					//}
; 831  : 
; 832  : 				}
; 833  : 				else // water

	jmp	SHORT $LN38@Exec
$LN39@Exec:

; 834  : 				{
; 835  : 					// MLR this effect creates the other effects by default
; 836  : 					// but allows easy replacement with a particle object
; 837  : 
; 838  : 					//RV - I-Hawk - PSFX_GUN_HIT_WATER is always defined, no need for this
; 839  : 					//old stuff anymore... only a PS call.
; 840  : 
; 841  : 					AddParticleEffect(PSFX_GUN_HIT_WATER,&pos,&vec); 

	lea	edx, DWORD PTR _vec$[ebp]
	push	edx
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	push	122					; 0000007aH
	call	?AddParticleEffect@@YAHHPAUTpoint@@0@Z	; AddParticleEffect
	add	esp, 12					; 0000000cH
$LN38@Exec:

; 842  : 
; 843  : 					//if(!AddParticleEffect(PSFX_GUN_HIT_WATER,&pos,&vec))
; 844  : 					//{
; 845  : 					//	F4SoundFXSetPos( SFX_SPLASH,
; 846  : 					//		TRUE,
; 847  : 					//		bulptr->x, bulptr->y, bulptr->z, 1.0f);
; 848  : 					//	
; 849  : 					//	/*
; 850  : 					//	OTWDriver.AddSfxRequest(
; 851  : 					//		new SfxClass(SFX_WATER_STRIKE,				// type
; 852  : 					//		&pos,							// world pos
; 853  : 					//		1.2f,			// time to live
; 854  : 					//		20.0f) );		// scale
; 855  : 					//		*/
; 856  : 					//	DrawableParticleSys::PS_AddParticleEx((SFX_WATER_STRIKE + 1),
; 857  : 					//							&pos,
; 858  : 					//							&PSvec);
; 859  : 					//}
; 860  : 				}
; 861  : 
; 862  : 			} // if hit ground
; 863  :          } // if ground hit test passed
; 864  : 		 else

	jmp	SHORT $LN37@Exec
$LN44@Exec:

; 865  : 		 {
; 866  : 			 // continue moving the bullet
; 867  : 			 bulptr->x += bulptr->xdot * SimLibMajorFrameTime;

	mov	ecx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [ecx+12]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	edx, DWORD PTR _bulptr$[ebp]
	addss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [eax], xmm0

; 868  : 			 bulptr->y += bulptr->ydot * SimLibMajorFrameTime;

	mov	ecx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [ecx+16]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	edx, DWORD PTR _bulptr$[ebp]
	addss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 869  : 			 bulptr->z += bulptr->zdot * SimLibMajorFrameTime;

	mov	ecx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [ecx+20]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	edx, DWORD PTR _bulptr$[ebp]
	addss	xmm0, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [eax+8], xmm0
$LN37@Exec:

; 870  : 	     }
; 871  :       } // if bullet flying
; 872  :    } // bullet loop

	jmp	$LN77@Exec
$LN76@Exec:

; 873  : 
; 874  :    if (numRoundsRemaining == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+808], 0
	jne	SHORT $LN36@Exec

; 875  :       *fire = FALSE;

	mov	edx, DWORD PTR _fire$[ebp]
	mov	DWORD PTR [edx], 0
$LN36@Exec:

; 876  : 
; 877  :    // set pointer to 1st bullet
; 878  :    bulptr = &bullet[0];

	mov	eax, 28					; 0000001cH
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+800]
	mov	DWORD PTR _bulptr$[ebp], eax

; 879  : 
; 880  :    // set position of muzzle tracers if we're firing -- only when alpha
; 881  :    // blending is on
; 882  :    if ( *fire )//&& PlayerOptions.AlphaOn() )

	mov	edx, DWORD PTR _fire$[ebp]
	cmp	DWORD PTR [edx], 0
	je	$LN32@Exec

; 883  :    {
; 884  : 	  float stagger;
; 885  : 	  float ystagger;
; 886  : 	  float zstagger;
; 887  : 	  float xsize;
; 888  : 	  float tmp;
; 889  : 
; 890  : 
; 891  : 	  for ( i = 0; i < numFirstTracers; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN34@Exec
$LN33@Exec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN34@Exec:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+816]
	jge	$LN32@Exec

; 892  : 	  {
; 893  : 
; 894  : 		  if ( i == 0 )

	cmp	DWORD PTR _i$[ebp], 0
	jne	$LN31@Exec

; 895  : 		  {
; 896  : 		  	  ystagger = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ystagger$22[ebp], xmm0

; 897  : 		  	  zstagger = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _zstagger$23[ebp], xmm0

; 898  : 			  muzzleAlpha[i] = 0.5f;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+768]
	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [ecx+edx*4], xmm0

; 899  : 			  muzzleStart++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+780]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+780], ecx

; 900  : 			  muzzleStart &= 0x03;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+780]
	and	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+780], ecx

; 901  : 			  xsize = 0.1f;

	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _xsize$20[ebp], xmm0

; 902  : 			  stagger = muzzleStart * 6.2f;

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+780]
	mulss	xmm0, DWORD PTR __real@40c66666
	movss	DWORD PTR _stagger$21[ebp], xmm0

; 903  : 		  }
; 904  : 		  else

	jmp	$LN22@Exec
$LN31@Exec:

; 905  : 		  {
; 906  : 		  	  stagger =  NRANDPOS * 25.0f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR _stagger$21[ebp], xmm0

; 907  : 		  	  xsize =  0.08f + NRANDPOS * 0.08f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@3da3d70a
	addss	xmm0, DWORD PTR __real@3da3d70a
	movss	DWORD PTR _xsize$20[ebp], xmm0

; 908  : 
; 909  : 		  	  ystagger = NRAND * 0.40f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@3ecccccd
	movss	DWORD PTR _ystagger$22[ebp], xmm1

; 910  : 			  if ( ystagger <= 0.0f && ystagger > -0.20f )

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _ystagger$22[ebp]
	jb	SHORT $LN29@Exec
	movss	xmm0, DWORD PTR _ystagger$22[ebp]
	comiss	xmm0, DWORD PTR __real@be4ccccd
	jbe	SHORT $LN29@Exec

; 911  : 			  	ystagger = -0.20f;

	movss	xmm0, DWORD PTR __real@be4ccccd
	movss	DWORD PTR _ystagger$22[ebp], xmm0
	jmp	SHORT $LN27@Exec
$LN29@Exec:

; 912  : 			  else if ( ystagger >= 0.0f && ystagger < 0.20f )

	movss	xmm0, DWORD PTR _ystagger$22[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN27@Exec
	movss	xmm0, DWORD PTR __real@3e4ccccd
	comiss	xmm0, DWORD PTR _ystagger$22[ebp]
	jbe	SHORT $LN27@Exec

; 913  : 			  	ystagger = 0.20f;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _ystagger$22[ebp], xmm0
$LN27@Exec:

; 914  : 		  	  zstagger = NRAND * 0.40f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@3ecccccd
	movss	DWORD PTR _zstagger$23[ebp], xmm1

; 915  : 			  if ( zstagger <= 0.0f && zstagger > -0.20f )

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _zstagger$23[ebp]
	jb	SHORT $LN26@Exec
	movss	xmm0, DWORD PTR _zstagger$23[ebp]
	comiss	xmm0, DWORD PTR __real@be4ccccd
	jbe	SHORT $LN26@Exec

; 916  : 			  	zstagger = -0.20f;

	movss	xmm0, DWORD PTR __real@be4ccccd
	movss	DWORD PTR _zstagger$23[ebp], xmm0
	jmp	SHORT $LN24@Exec
$LN26@Exec:

; 917  : 			  else if ( zstagger >= 0.0f && zstagger < 0.20f )

	movss	xmm0, DWORD PTR _zstagger$23[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN24@Exec
	movss	xmm0, DWORD PTR __real@3e4ccccd
	comiss	xmm0, DWORD PTR _zstagger$23[ebp]
	jbe	SHORT $LN24@Exec

; 918  : 			  	zstagger = 0.20f;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _zstagger$23[ebp], xmm0
$LN24@Exec:

; 919  : 			  // alpha falls off the further out the tracer gets
; 920  : 			  // and also the further off from center
; 921  : 			  muzzleAlpha[i] = 1.0f - stagger/25.0f;

	movss	xmm0, DWORD PTR _stagger$21[ebp]
	divss	xmm0, DWORD PTR __real@41c80000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+768]
	mov	eax, DWORD PTR _i$[ebp]
	movss	DWORD PTR [edx+eax*4], xmm1

; 922  : 			  muzzleAlpha[i] *= muzzleAlpha[i];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+768]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+768]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR [edx+eax*4]
	mulss	xmm0, DWORD PTR [ecx+esi*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+768]
	mov	eax, DWORD PTR _i$[ebp]
	movss	DWORD PTR [edx+eax*4], xmm0

; 923  : 			  muzzleAlpha[i] *= muzzleAlpha[i];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+768]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+768]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR [edx+eax*4]
	mulss	xmm0, DWORD PTR [ecx+esi*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+768]
	mov	eax, DWORD PTR _i$[ebp]
	movss	DWORD PTR [edx+eax*4], xmm0

; 924  : 			  tmp = 1.0f - (float)fabs(ystagger/0.40f);

	movss	xmm0, DWORD PTR _ystagger$22[ebp]
	divss	xmm0, DWORD PTR __real@3ecccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv3120[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR tv3120[ebp]
	movss	DWORD PTR _tmp$24[ebp], xmm0

; 925  : 			  tmp *= tmp;

	movss	xmm0, DWORD PTR _tmp$24[ebp]
	mulss	xmm0, DWORD PTR _tmp$24[ebp]
	movss	DWORD PTR _tmp$24[ebp], xmm0

; 926  : 			  tmp *= tmp;

	movss	xmm0, DWORD PTR _tmp$24[ebp]
	mulss	xmm0, DWORD PTR _tmp$24[ebp]
	movss	DWORD PTR _tmp$24[ebp], xmm0

; 927  : 			  if ( tmp < muzzleAlpha[i] )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+768]
	mov	eax, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR [edx+eax*4]
	comiss	xmm0, DWORD PTR _tmp$24[ebp]
	jbe	SHORT $LN23@Exec

; 928  : 				muzzleAlpha[i] = tmp;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+768]
	mov	eax, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _tmp$24[ebp]
	movss	DWORD PTR [edx+eax*4], xmm0
$LN23@Exec:

; 929  : 			  tmp = 1.0f - (float)fabs(zstagger/0.40f);

	movss	xmm0, DWORD PTR _zstagger$23[ebp]
	divss	xmm0, DWORD PTR __real@3ecccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv3135[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR tv3135[ebp]
	movss	DWORD PTR _tmp$24[ebp], xmm0

; 930  : 			  tmp *= tmp;

	movss	xmm0, DWORD PTR _tmp$24[ebp]
	mulss	xmm0, DWORD PTR _tmp$24[ebp]
	movss	DWORD PTR _tmp$24[ebp], xmm0

; 931  : 			  tmp *= tmp;

	movss	xmm0, DWORD PTR _tmp$24[ebp]
	mulss	xmm0, DWORD PTR _tmp$24[ebp]
	movss	DWORD PTR _tmp$24[ebp], xmm0

; 932  : 			  if ( tmp < muzzleAlpha[i] )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+768]
	mov	eax, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR [edx+eax*4]
	comiss	xmm0, DWORD PTR _tmp$24[ebp]
	jbe	SHORT $LN22@Exec

; 933  : 				muzzleAlpha[i] = tmp;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+768]
	mov	eax, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _tmp$24[ebp]
	movss	DWORD PTR [edx+eax*4], xmm0
$LN22@Exec:

; 934  : 		  }
; 935  : 
; 936  : 
; 937  : 		  // width falls off the closer to center
; 938  : 		  tmp = (float)fabs(ystagger/0.40f);

	movss	xmm0, DWORD PTR _ystagger$22[ebp]
	divss	xmm0, DWORD PTR __real@3ecccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _tmp$24[ebp]

; 939  : 		  tmp *= tmp;

	movss	xmm0, DWORD PTR _tmp$24[ebp]
	mulss	xmm0, DWORD PTR _tmp$24[ebp]
	movss	DWORD PTR _tmp$24[ebp], xmm0

; 940  : 		  tmp *= tmp;

	movss	xmm0, DWORD PTR _tmp$24[ebp]
	mulss	xmm0, DWORD PTR _tmp$24[ebp]
	movss	DWORD PTR _tmp$24[ebp], xmm0

; 941  : 		  muzzleWidth[i] = tmp;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+772]
	mov	eax, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _tmp$24[ebp]
	movss	DWORD PTR [edx+eax*4], xmm0

; 942  : 		  tmp =  (float)fabs(zstagger/0.40f);

	movss	xmm0, DWORD PTR _zstagger$23[ebp]
	divss	xmm0, DWORD PTR __real@3ecccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _tmp$24[ebp]

; 943  : 		  tmp *= tmp;

	movss	xmm0, DWORD PTR _tmp$24[ebp]
	mulss	xmm0, DWORD PTR _tmp$24[ebp]
	movss	DWORD PTR _tmp$24[ebp], xmm0

; 944  : 		  tmp *= tmp;

	movss	xmm0, DWORD PTR _tmp$24[ebp]
	mulss	xmm0, DWORD PTR _tmp$24[ebp]
	movss	DWORD PTR _tmp$24[ebp], xmm0

; 945  : 		  if ( tmp > muzzleWidth[i] )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+772]
	mov	eax, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _tmp$24[ebp]
	comiss	xmm0, DWORD PTR [edx+eax*4]
	jbe	SHORT $LN21@Exec

; 946  : 		  	muzzleWidth[i] = tmp;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+772]
	mov	eax, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _tmp$24[ebp]
	movss	DWORD PTR [edx+eax*4], xmm0
$LN21@Exec:

; 947  : 
; 948  : 		  ystagger += yOffset;

	movss	xmm0, DWORD PTR _ystagger$22[ebp]
	addss	xmm0, DWORD PTR _yOffset$[ebp]
	movss	DWORD PTR _ystagger$22[ebp], xmm0

; 949  : 		  zstagger += zPos;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _zstagger$23[ebp]
	addss	xmm0, DWORD PTR [ecx+700]
	movss	DWORD PTR _zstagger$23[ebp], xmm0

; 950  : 	
; 951  : 		  muzzleLoc[i].x = parent->XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+760]
	fstp	DWORD PTR [ecx+edx]

; 952  : 		  muzzleLoc[i].y = parent->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+760]
	fstp	DWORD PTR [ecx+edx+4]

; 953  : 		  muzzleLoc[i].z = parent->ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+760]
	fstp	DWORD PTR [ecx+edx+8]

; 954  : 
; 955  : 		  muzzleLoc[i].x += dmx[0][0]*xPos*stagger + dmx[1][0]*ystagger + dmx[2][0]*zstagger;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+760]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _dmx$[ebp]
	mov	esi, 4
	imul	esi, 0
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+esi]
	mulss	xmm0, DWORD PTR [edi+692]
	mulss	xmm0, DWORD PTR _stagger$21[ebp]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _dmx$[ebp]
	mov	esi, 4
	imul	esi, 0
	movss	xmm1, DWORD PTR [eax+esi]
	mulss	xmm1, DWORD PTR _ystagger$22[ebp]
	addss	xmm0, xmm1
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _dmx$[ebp]
	mov	esi, 4
	imul	esi, 0
	movss	xmm1, DWORD PTR [eax+esi]
	mulss	xmm1, DWORD PTR _zstagger$23[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR [ecx+edx]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+760]
	movss	DWORD PTR [eax+ecx], xmm0

; 956  : 		  muzzleLoc[i].y += dmx[0][1]*xPos*stagger + dmx[1][1]*ystagger + dmx[2][1]*zstagger;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+760]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	add	edx, DWORD PTR _dmx$[ebp]
	mov	esi, 4
	shl	esi, 0
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+esi]
	mulss	xmm0, DWORD PTR [edi+692]
	mulss	xmm0, DWORD PTR _stagger$21[ebp]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	add	edx, DWORD PTR _dmx$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [edx+esi]
	mulss	xmm1, DWORD PTR _ystagger$22[ebp]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	add	edx, DWORD PTR _dmx$[ebp]
	mov	esi, 4
	shl	esi, 0
	movss	xmm1, DWORD PTR [edx+esi]
	mulss	xmm1, DWORD PTR _zstagger$23[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR [eax+ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+760]
	movss	DWORD PTR [edx+eax+4], xmm0

; 957  : 		  muzzleLoc[i].z += dmx[0][2]*xPos*stagger + dmx[1][2]*ystagger + dmx[2][2]*zstagger;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+760]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _dmx$[ebp]
	mov	esi, 4
	shl	esi, 1
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+esi]
	mulss	xmm0, DWORD PTR [edi+692]
	mulss	xmm0, DWORD PTR _stagger$21[ebp]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _dmx$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [ecx+esi]
	mulss	xmm1, DWORD PTR _ystagger$22[ebp]
	addss	xmm0, xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _dmx$[ebp]
	mov	esi, 4
	shl	esi, 1
	movss	xmm1, DWORD PTR [ecx+esi]
	mulss	xmm1, DWORD PTR _zstagger$23[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR [edx+eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+760]
	movss	DWORD PTR [ecx+edx+8], xmm0

; 958  : 
; 959  : 		  muzzleEnd[i].x = dmx[0][0]*initBulletVelocity + dmx[1][0]*ystagger + dmx[2][0]*zstagger;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	add	edx, DWORD PTR _dmx$[ebp]
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [ecx+792]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	add	edx, DWORD PTR _dmx$[ebp]
	mov	eax, 4
	imul	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _ystagger$22[ebp]
	addss	xmm0, xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _dmx$[ebp]
	mov	edx, 4
	imul	edx, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _zstagger$23[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+764]
	movss	DWORD PTR [edx+eax], xmm0

; 960  : 		  muzzleEnd[i].y = dmx[0][1]*initBulletVelocity + dmx[1][1]*ystagger + dmx[2][1]*zstagger;

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _dmx$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR [edx+792]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _dmx$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _ystagger$22[ebp]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	add	edx, DWORD PTR _dmx$[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _zstagger$23[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+764]
	movss	DWORD PTR [eax+ecx+4], xmm0

; 961  : 		  muzzleEnd[i].z = dmx[0][2]*initBulletVelocity + dmx[1][2]*ystagger + dmx[2][2]*zstagger;

	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _dmx$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR [eax+792]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _dmx$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _ystagger$22[ebp]
	addss	xmm0, xmm1
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _dmx$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _zstagger$23[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+764]
	movss	DWORD PTR [ecx+edx+8], xmm0

; 962  : 
; 963  : 		  muzzleEnd[i].x = muzzleLoc[i].x + muzzleEnd[i].x * SimLibMajorFrameTime * xsize;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+760]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	esi, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [esi+764]
	movss	xmm0, DWORD PTR [esi+eax]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR _xsize$20[ebp]
	addss	xmm0, DWORD PTR [ecx+edx]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+764]
	movss	DWORD PTR [eax+ecx], xmm0

; 964  : 		  muzzleEnd[i].y = muzzleLoc[i].y + muzzleEnd[i].y * SimLibMajorFrameTime * xsize;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+760]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	esi, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [esi+764]
	movss	xmm0, DWORD PTR [esi+edx+4]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR _xsize$20[ebp]
	addss	xmm0, DWORD PTR [eax+ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+764]
	movss	DWORD PTR [edx+eax+4], xmm0

; 965  : 		  muzzleEnd[i].z = muzzleLoc[i].z + muzzleEnd[i].z * SimLibMajorFrameTime * xsize;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+760]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	esi, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [esi+764]
	movss	xmm0, DWORD PTR [esi+ecx+8]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR _xsize$20[ebp]
	addss	xmm0, DWORD PTR [edx+eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+764]
	movss	DWORD PTR [ecx+edx+8], xmm0

; 966  : 	  }

	jmp	$LN33@Exec
$LN32@Exec:

; 967  :    }
; 968  : 
; 969  :    // if firing, insert an new round into the queue at 1st position
; 970  :    if (*fire && (!bulptr->flying || advanceQueue ) )

	mov	edx, DWORD PTR _fire$[ebp]
	cmp	DWORD PTR [edx], 0
	je	$LN20@Exec
	mov	eax, DWORD PTR _bulptr$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN19@Exec
	cmp	DWORD PTR _advanceQueue$[ebp], 0
	je	$LN20@Exec
$LN19@Exec:

; 971  :    {
; 972  :       bulptr->x = parent->XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	ecx, DWORD PTR _bulptr$[ebp]
	fstp	DWORD PTR [ecx]

; 973  :       bulptr->y = parent->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	edx, DWORD PTR _bulptr$[ebp]
	fstp	DWORD PTR [edx+4]

; 974  :       bulptr->z = parent->ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	mov	eax, DWORD PTR _bulptr$[ebp]
	fstp	DWORD PTR [eax+8]

; 975  : 
; 976  : 
; 977  : 	  // add gunsmoke effect
; 978  : 	  pos.x = bulptr->x;

	mov	ecx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR _pos$[ebp], xmm0

; 979  : 	  pos.y = bulptr->y;

	mov	edx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR _pos$[ebp+4], xmm0

; 980  : 	  pos.z = bulptr->z;

	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 981  : 	  vec.x = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vec$[ebp], xmm0

; 982  : 	  vec.y = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vec$[ebp+4], xmm0

; 983  : 	  vec.z = -50.0f;

	movss	xmm0, DWORD PTR __real@c2480000
	movss	DWORD PTR _vec$[ebp+8], xmm0

; 984  : 
; 985  : 	  if ( parent->IsAirplane() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	DWORD PTR tv1664[ebp], eax
	mov	ecx, DWORD PTR tv1664[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv1664[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	je	$LN18@Exec

; 986  : 	  {
; 987  : 		  //RV - I-Hawk - RV new trails call changes
; 988  : 		  //if ( !smokeTrail )
; 989  : 		  if ( !TrailIdNew )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+744], 0
	jne	SHORT $LN17@Exec

; 990  : 		  {
; 991  : 			  //smokeTrail = new DrawableTrail(trailID);
; 992  : 			  TrailIdNew = trailID;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+788]
	mov	DWORD PTR [edx+744], ecx
$LN17@Exec:

; 993  : 			  //OTWDriver.InsertObject( smokeTrail );
; 994  : 		  }
; 995  : 		  pos.x += dmx[0][0]*xPos + dmx[1][0]*yOffset + dmx[2][0]*zPos;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	add	edx, DWORD PTR _dmx$[ebp]
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [ecx+692]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	add	edx, DWORD PTR _dmx$[ebp]
	mov	eax, 4
	imul	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _yOffset$[ebp]
	addss	xmm0, xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _dmx$[ebp]
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [eax+700]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _pos$[ebp]
	movss	DWORD PTR _pos$[ebp], xmm0

; 996  : 		  pos.y += dmx[0][1]*xPos + dmx[1][1]*yOffset + dmx[2][1]*zPos;

	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _dmx$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR [eax+692]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _dmx$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _yOffset$[ebp]
	addss	xmm0, xmm1
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _dmx$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR [edx+700]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _pos$[ebp+4]
	movss	DWORD PTR _pos$[ebp+4], xmm0

; 997  : 		  pos.z += dmx[0][2]*xPos + dmx[1][2]*yOffset + dmx[2][2]*zPos;

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _dmx$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR [edx+692]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _dmx$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _yOffset$[ebp]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	add	edx, DWORD PTR _dmx$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+700]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _pos$[ebp+8]
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 998  : 		  //OTWDriver.AddTrailHead( smokeTrail, pos.x, pos.y, pos.z );
; 999  : 		  Trail = DrawableParticleSys::PS_EmitTrail(Trail, TrailIdNew, pos.x, pos.y, pos.z);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+744]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+740]
	push	edx
	call	?PS_EmitTrail@DrawableParticleSys@@SAKKHMMMMM@Z ; DrawableParticleSys::PS_EmitTrail
	add	esp, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+740], eax

; 1000 : 
; 1001 : 		  //RV - I-Hawk - Add a gunfire PS at the gun location
; 1002 : 		  Tpoint gunPSvec;
; 1003 : 
; 1004 : 		  gunPSvec.x = parent->XDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR _gunPSvec$25[ebp]

; 1005 : 		  gunPSvec.y = parent->YDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR _gunPSvec$25[ebp+4]

; 1006 : 		  gunPSvec.z = parent->ZDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR _gunPSvec$25[ebp+8]

; 1007 : 
; 1008 : 		  DrawableParticleSys::PS_AddParticleEx((SFX_GUNFIRE + 1),
; 1009 : 												&pos,
; 1010 : 												&gunPSvec);

	lea	edx, DWORD PTR _gunPSvec$25[ebp]
	push	edx
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	push	18					; 00000012H
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
$LN18@Exec:

; 1011 : 
; 1012 : 
; 1013 : 	  }
; 1014 : 
; 1015 :       if (!bullet[1].flying)

	mov	ecx, 28					; 0000001cH
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+800]
	cmp	DWORD PTR [eax+ecx+24], 0
	jne	SHORT $LN16@Exec

; 1016 : 	  {
; 1017 :          fireCount ++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+716]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+716], edx

; 1018 : 		 muzzleStart = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+780], 0
$LN16@Exec:

; 1019 : 	  }
; 1020 :       bulptr->flying = fireCount;

	mov	edx, DWORD PTR _bulptr$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+716]
	mov	DWORD PTR [edx+24], ecx

; 1021 : 	  numFlying++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+824]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+824], eax

; 1022 : 
; 1023 : 
; 1024 :       bulptr->x += dmx[0][0]*xPos*30.0f + dmx[1][0]*yOffset + dmx[2][0]*zPos;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	add	edx, DWORD PTR _dmx$[ebp]
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [ecx+692]
	mulss	xmm0, DWORD PTR __real@41f00000
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	add	edx, DWORD PTR _dmx$[ebp]
	mov	eax, 4
	imul	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _yOffset$[ebp]
	addss	xmm0, xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _dmx$[ebp]
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [eax+700]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _bulptr$[ebp]
	addss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [edx], xmm0

; 1025 :       bulptr->y += dmx[0][1]*xPos*30.0f + dmx[1][1]*yOffset + dmx[2][1]*zPos;

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _dmx$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR [edx+692]
	mulss	xmm0, DWORD PTR __real@41f00000
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _dmx$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _yOffset$[ebp]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	add	edx, DWORD PTR _dmx$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+700]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _bulptr$[ebp]
	addss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 1026 :       bulptr->z += dmx[0][2]*xPos*30.0f + dmx[1][2]*yOffset + dmx[2][2]*zPos;

	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _dmx$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR [eax+692]
	mulss	xmm0, DWORD PTR __real@41f00000
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _dmx$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _yOffset$[ebp]
	addss	xmm0, xmm1
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _dmx$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR [edx+700]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _bulptr$[ebp]
	addss	xmm0, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 1027 : 
; 1028 : 	  // muzzleLoc.x = bulptr->x;
; 1029 : 	  // muzzleLoc.y = bulptr->y;
; 1030 : 	  // muzzleLoc.z = bulptr->z;
; 1031 : 
; 1032 :       /*--------------------------------------*/
; 1033 :       /* Dot terms are a combination of where */
; 1034 :       /* I'm going and where I'm pointing     */
; 1035 :       /*--------------------------------------*/
; 1036 : 
; 1037 :       // edg: it is observed that geomData for ground vehicles is (sometimes?)
; 1038 :       // invalid.  Since they don't move all that fast anyway, just use
; 1039 :       // bullet velocity for dot vals
; 1040 :       if ( !parent->OnGround() && parent->IsAirplane() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	DWORD PTR tv1911[ebp], eax
	mov	edx, DWORD PTR tv1911[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv1911[ebp]
	mov	edx, DWORD PTR [eax+148]
	call	edx
	test	eax, eax
	jne	$LN15@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	DWORD PTR tv1924[ebp], eax
	mov	eax, DWORD PTR tv1924[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv1924[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	je	$LN15@Exec

; 1041 :       {
; 1042 :          vt = parent->GetVt();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	DWORD PTR tv1937[ebp], eax
	mov	ecx, DWORD PTR tv1937[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv1937[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR _vt$[ebp]

; 1043 :       	bulptr->xdot= vt*geomData->cosgam*geomData->cossig + initBulletVelocity*dmx[0][0];

	mov	ecx, DWORD PTR _geomData$[ebp]
	movss	xmm0, DWORD PTR _vt$[ebp]
	mulss	xmm0, DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _geomData$[ebp]
	mulss	xmm0, DWORD PTR [edx+36]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _dmx$[ebp]
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+792]
	mulss	xmm1, DWORD PTR [eax+ecx]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 1044 :       	bulptr->ydot= vt*geomData->cosgam*geomData->sinsig + initBulletVelocity*dmx[0][1];

	mov	ecx, DWORD PTR _geomData$[ebp]
	movss	xmm0, DWORD PTR _vt$[ebp]
	mulss	xmm0, DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _geomData$[ebp]
	mulss	xmm0, DWORD PTR [edx+32]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _dmx$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+792]
	mulss	xmm1, DWORD PTR [eax+ecx]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 1045 :       	bulptr->zdot= -vt*geomData->singam + initBulletVelocity*dmx[0][2];

	movss	xmm0, DWORD PTR _vt$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _geomData$[ebp]
	mulss	xmm0, DWORD PTR [ecx+24]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	add	edx, DWORD PTR _dmx$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+792]
	mulss	xmm1, DWORD PTR [edx+eax]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [edx+20], xmm0

; 1046 :       }
; 1047 :       else

	jmp	$LN14@Exec
$LN15@Exec:

; 1048 :       {
; 1049 :       	bulptr->xdot= initBulletVelocity*dmx[0][0];

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _dmx$[ebp]
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+792]
	mulss	xmm0, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 1050 :       	bulptr->ydot= initBulletVelocity*dmx[0][1];

	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _dmx$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+792]
	mulss	xmm0, DWORD PTR [ecx+edx]
	mov	ecx, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 1051 :       	bulptr->zdot= initBulletVelocity*dmx[0][2];

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	add	edx, DWORD PTR _dmx$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+792]
	mulss	xmm0, DWORD PTR [edx+eax]
	mov	edx, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [edx+20], xmm0
$LN14@Exec:

; 1052 :       }
; 1053 : 
; 1054 :       bulptr->x += bulptr->xdot * SimLibMajorFrameTime * 0.5f;

	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _bulptr$[ebp]
	addss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [edx], xmm0

; 1055 :       bulptr->y += bulptr->ydot * SimLibMajorFrameTime * 0.5f;

	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _bulptr$[ebp]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 1056 :       bulptr->z += bulptr->zdot * SimLibMajorFrameTime * 0.5f;

	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _bulptr$[ebp]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 1057 : 
; 1058 :       if ( gACMIRec.IsRecording() )

	mov	ecx, OFFSET ?gACMIRec@@3VACMIRecorder@@A ; gACMIRec
	call	?IsRecording@ACMIRecorder@@QAEHXZ	; ACMIRecorder::IsRecording
	test	eax, eax
	je	$LN13@Exec

; 1059 :       {
; 1060 : 			acmiTracer.hdr.time = SimLibElapsedTime * MSEC_TO_SEC + OTWDriver.todOffset;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR tv3516[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv3516[ebp]
	mov	ecx, DWORD PTR tv3516[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv3520[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv3520[ebp]
	mulss	xmm0, DWORD PTR __real@3a83126f
	addss	xmm0, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+32052
	movss	DWORD PTR ?acmiTracer@@3UACMITracerStartRecord@@A+1, xmm0

; 1061 : 			acmiTracer.data.x = bulptr->x;

	mov	edx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR ?acmiTracer@@3UACMITracerStartRecord@@A+5, xmm0

; 1062 : 			acmiTracer.data.y = bulptr->y;

	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR ?acmiTracer@@3UACMITracerStartRecord@@A+9, xmm0

; 1063 : 			acmiTracer.data.z = bulptr->z;

	mov	ecx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR ?acmiTracer@@3UACMITracerStartRecord@@A+13, xmm0

; 1064 : 			acmiTracer.data.dx = bulptr->xdot;

	mov	edx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR ?acmiTracer@@3UACMITracerStartRecord@@A+17, xmm0

; 1065 : 			acmiTracer.data.dy = bulptr->ydot;

	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR ?acmiTracer@@3UACMITracerStartRecord@@A+21, xmm0

; 1066 : 			acmiTracer.data.dz = bulptr->zdot;

	mov	ecx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [ecx+20]
	movss	DWORD PTR ?acmiTracer@@3UACMITracerStartRecord@@A+25, xmm0

; 1067 :          gACMIRec.TracerRecord( &acmiTracer );

	push	OFFSET ?acmiTracer@@3UACMITracerStartRecord@@A ; acmiTracer
	mov	ecx, OFFSET ?gACMIRec@@3VACMIRecorder@@A ; gACMIRec
	call	?TracerRecord@ACMIRecorder@@QAEXPAUACMITracerStartRecord@@@Z ; ACMIRecorder::TracerRecord
$LN13@Exec:

; 1068 : 
; 1069 :       }
; 1070 : 
; 1071 : 	   // just testing
; 1072 : 	   /*
; 1073 : 	   pos.x = parent->XPos();
; 1074 : 	   pos.y = parent->YPos();
; 1075 : 	   pos.z = parent->ZPos();
; 1076 : 	   vec.x = parent->XDelta();
; 1077 : 	   vec.y = parent->YDelta();
; 1078 : 	   vec.z = parent->ZDelta();
; 1079 : 
; 1080 : 	   // for the moment (at least), bullets only go in direction
; 1081 : 	   // object is pointing
; 1082 : 	   vec.x += dmx[0][0]*3000.0f;
; 1083 : 	   vec.y += dmx[0][1]*3000.0f;
; 1084 : 	   vec.z += dmx[0][2]*3000.0f;
; 1085 : 	   pos.x += vec.x*SimLibMajorFrameTime;
; 1086 : 	   pos.y += vec.y*SimLibMajorFrameTime;
; 1087 : 	   pos.z += vec.z*SimLibMajorFrameTime;
; 1088 : 	
; 1089 : 	   OTWDriver.AddSfxRequest(
; 1090 : 			new SfxClass(SFX_GUN_TRACER,				// type
; 1091 : 				SFX_MOVES | SFX_USES_GRAVITY,						// flags
; 1092 : 				&pos,							// world pos
; 1093 : 				&vec,							// vector
; 1094 : 				3.0f,							// time to live
; 1095 : 				1.0f));							// scale
; 1096 : 	  */
; 1097 : 
; 1098 :       // Could make numRoundsRemaining a float, but this changed less code...
; 1099 : 	  fractionalRoundsRemaining -= roundsPerSecond * SimLibMajorFrameTime;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+804]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+728]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+728], xmm1

; 1100 : 	  if (fractionalRoundsRemaining < 1.0f)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR [edx+728]
	jbe	$LN11@Exec

; 1101 : 	  {
; 1102 : 		  int inc = FloatToInt32(fractionalRoundsRemaining);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+728]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _inc$17[ebp], eax

; 1103 : 		  numRoundsRemaining = max(0, numRoundsRemaining + inc);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+808]
	add	edx, DWORD PTR _inc$17[ebp]
	jns	SHORT $LN105@Exec
	mov	DWORD PTR tv2045[ebp], 0
	jmp	SHORT $LN106@Exec
$LN105@Exec:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+808]
	add	ecx, DWORD PTR _inc$17[ebp]
	mov	DWORD PTR tv2045[ebp], ecx
$LN106@Exec:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv2045[ebp]
	mov	DWORD PTR [edx+808], eax

; 1104 : 		  fractionalRoundsRemaining -= (float)inc;

	cvtsi2ss xmm0, DWORD PTR _inc$17[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+728]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+728], xmm1

; 1105 : 		  if (*fire && this->parent.get() == FalconLocalSession->GetPlayerEntity()){

	mov	eax, DWORD PTR _fire$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN11@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esi, eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ; FalconSessionEntity::GetPlayerEntity
	cmp	esi, eax
	jne	SHORT $LN11@Exec

; 1106 : 		      g_intellivibeData.BulletsFired++;

	mov	cl, BYTE PTR ?g_intellivibeData@@3VIntellivibeData@@A+5
	add	cl, 1
	mov	BYTE PTR ?g_intellivibeData@@3VIntellivibeData@@A+5, cl
$LN11@Exec:

; 1107 : 		  }
; 1108 : 	  }
; 1109 :    }

	jmp	$LN2@Exec
$LN20@Exec:

; 1110 :    else if (*fire && !advanceQueue && bulptr->flying )

	mov	edx, DWORD PTR _fire$[ebp]
	cmp	DWORD PTR [edx], 0
	je	$LN9@Exec
	cmp	DWORD PTR _advanceQueue$[ebp], 0
	jne	$LN9@Exec
	mov	eax, DWORD PTR _bulptr$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	$LN9@Exec

; 1111 :    {
; 1112 :        	bulptr->x += bulptr->xdot * SimLibMajorFrameTime;

	mov	ecx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [ecx+12]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	edx, DWORD PTR _bulptr$[ebp]
	addss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [eax], xmm0

; 1113 :        	bulptr->y += bulptr->ydot * SimLibMajorFrameTime;

	mov	ecx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [ecx+16]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	edx, DWORD PTR _bulptr$[ebp]
	addss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 1114 :        	bulptr->z += bulptr->zdot * SimLibMajorFrameTime;

	mov	ecx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [ecx+20]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	edx, DWORD PTR _bulptr$[ebp]
	addss	xmm0, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 1115 : 
; 1116 : 		// float rtmp = SimLibMajorFrameTime * 0.5f;
; 1117 : 		// muzzleLoc.x = bulptr->x - bulptr->xdot * rtmp;
; 1118 : 		// muzzleLoc.y = bulptr->y - bulptr->ydot * rtmp;
; 1119 : 		// muzzleLoc.z = bulptr->z - bulptr->zdot * rtmp;
; 1120 : 
; 1121 :       	if (!unlimitedAmmo)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+820], 0
	jne	SHORT $LN8@Exec

; 1122 :       	{
; 1123 :          	numRoundsRemaining =
; 1124 :             	(int)(max (numRoundsRemaining - roundsPerSecond * SimLibMajorFrameTime, 0.0F));

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+808]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+804]
	mulss	xmm1, DWORD PTR ?SimLibMajorFrameTime@@3MA
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN107@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+808]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+804]
	mulss	xmm1, DWORD PTR ?SimLibMajorFrameTime@@3MA
	subss	xmm0, xmm1
	movss	DWORD PTR tv2103[ebp], xmm0
	jmp	SHORT $LN108@Exec
$LN107@Exec:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv2103[ebp], xmm0
$LN108@Exec:
	cvttss2si eax, DWORD PTR tv2103[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+808], eax
$LN8@Exec:

; 1125 :       	}
; 1126 : 		//RV - I-Hawk - RV new trails call changes
; 1127 : 		//if (smokeTrail)
; 1128 : 	  	if ( TrailIdNew )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+744], 0
	je	$LN7@Exec

; 1129 : 	  	{
; 1130 : 		    pos.x = parent->XPos() + dmx[0][0]*xPos + dmx[1][0]*yOffset + dmx[2][0]*zPos;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv3592[ebp]
	movss	xmm0, DWORD PTR tv3592[ebp]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _dmx$[ebp]
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR [edx+692]
	addss	xmm0, xmm1
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _dmx$[ebp]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _yOffset$[ebp]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	add	edx, DWORD PTR _dmx$[ebp]
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+700]
	addss	xmm0, xmm1
	movss	DWORD PTR _pos$[ebp], xmm0

; 1131 : 		    pos.y = parent->YPos() + dmx[0][1]*xPos + dmx[1][1]*yOffset + dmx[2][1]*zPos;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv3609[ebp]
	movss	xmm0, DWORD PTR tv3609[ebp]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	add	edx, DWORD PTR _dmx$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [ecx+692]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	add	edx, DWORD PTR _dmx$[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _yOffset$[ebp]
	addss	xmm0, xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _dmx$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [eax+700]
	addss	xmm0, xmm1
	movss	DWORD PTR _pos$[ebp+4], xmm0

; 1132 : 		    pos.z = parent->ZPos() + dmx[0][2]*xPos + dmx[1][2]*yOffset + dmx[2][2]*zPos;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv3626[ebp]
	movss	xmm0, DWORD PTR tv3626[ebp]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _dmx$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR [eax+692]
	addss	xmm0, xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _dmx$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _yOffset$[ebp]
	addss	xmm0, xmm1
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _dmx$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR [edx+700]
	addss	xmm0, xmm1
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 1133 : 	  		/*OTWDriver.AddTrailHead( smokeTrail,
; 1134 : 									  pos.x,
; 1135 : 									  pos.y,
; 1136 : 									  pos.z );*/
; 1137 : 			Trail = DrawableParticleSys::PS_EmitTrail(Trail, TrailIdNew, pos.x, pos.y, pos.z);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+744]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+740]
	push	eax
	call	?PS_EmitTrail@DrawableParticleSys@@SAKKHMMMMM@Z ; DrawableParticleSys::PS_EmitTrail
	add	esp, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+740], eax
$LN7@Exec:

; 1138 : 	  	}
; 1139 :    }

	jmp	$LN2@Exec
$LN9@Exec:

; 1140 :    else if ( !(*fire) )

	mov	edx, DWORD PTR _fire$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	$LN2@Exec

; 1141 :    {
; 1142 : 	  if ( advanceQueue )

	cmp	DWORD PTR _advanceQueue$[ebp], 0
	je	SHORT $LN4@Exec

; 1143 : 	  		bulptr->flying = FALSE;

	mov	eax, DWORD PTR _bulptr$[ebp]
	mov	DWORD PTR [eax+24], 0
$LN4@Exec:

; 1144 : 
; 1145 : 	  if ( bulptr->flying )

	mov	ecx, DWORD PTR _bulptr$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN3@Exec

; 1146 : 	  {
; 1147 :        		bulptr->x += bulptr->xdot * SimLibMajorFrameTime;

	mov	edx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [edx+12]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	eax, DWORD PTR _bulptr$[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1148 :        		bulptr->y += bulptr->ydot * SimLibMajorFrameTime;

	mov	edx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [edx+16]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	eax, DWORD PTR _bulptr$[ebp]
	addss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 1149 :        		bulptr->z += bulptr->zdot * SimLibMajorFrameTime;

	mov	edx, DWORD PTR _bulptr$[ebp]
	movss	xmm0, DWORD PTR [edx+20]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	eax, DWORD PTR _bulptr$[ebp]
	addss	xmm0, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _bulptr$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
$LN3@Exec:

; 1150 : 
; 1151 : 			// float rtmp = SimLibMajorFrameTime * 0.5f;
; 1152 : 			// muzzleLoc.x = bulptr->x - bulptr->xdot * rtmp;
; 1153 : 			// muzzleLoc.y = bulptr->y - bulptr->ydot * rtmp;
; 1154 : 			// muzzleLoc.z = bulptr->z - bulptr->zdot * rtmp;
; 1155 : 	  }
; 1156 : 
; 1157 : 	  //if (smokeTrail)
; 1158 : 	  //RV - I-Hawk - RV new trails call changes
; 1159 : 	  if (TrailIdNew)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+744], 0
	je	SHORT $LN2@Exec

; 1160 : 	  {
; 1161 : 	  	  /*OTWDriver.AddSfxRequest(
; 1162 : 			new SfxClass ( 2.0f,		// time to live
; 1163 : 			smokeTrail ) );*/
; 1164 : 		  DrawableParticleSys::PS_KillTrail(Trail);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+740]
	push	ecx
	call	?PS_KillTrail@DrawableParticleSys@@SAXK@Z ; DrawableParticleSys::PS_KillTrail
	add	esp, 4

; 1165 : 		  //smokeTrail = NULL
; 1166 : 		  TrailIdNew = Trail = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+740], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+744], 0
$LN2@Exec:

; 1167 : 	  }
; 1168 :    }
; 1169 : 
; 1170 :    UpdateTracers( *fire );

	mov	ecx, DWORD PTR _fire$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateTracers@GunClass@@AAEXH@Z	; GunClass::UpdateTracers

; 1171 : 
; 1172 :    // Clean up the iterator if used
; 1173 :    if (gridIt)

	cmp	DWORD PTR _gridIt$[ebp], 0
	je	SHORT $LN110@Exec

; 1174 :       delete gridIt;

	mov	eax, DWORD PTR _gridIt$[ebp]
	mov	DWORD PTR $T9[ebp], eax
	mov	ecx, DWORD PTR $T9[ebp]
	mov	DWORD PTR $T19[ebp], ecx
	cmp	DWORD PTR $T19[ebp], 0
	je	SHORT $LN109@Exec
	push	1
	mov	edx, DWORD PTR $T19[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T19[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	mov	DWORD PTR tv2256[ebp], eax
	jmp	SHORT $LN110@Exec
$LN109@Exec:
	mov	DWORD PTR tv2256[ebp], 0
$LN110@Exec:

; 1175 : 
; 1176 :    //STOP_PROFILE("GUNS EXEC");
; 1177 : 
; 1178 : 
; 1179 :    return whatWasHit;

	mov	eax, DWORD PTR _whatWasHit$[ebp]
$LN89@Exec:

; 1180 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Exec@GunClass@@QAEHPAHQAY02MPAVObjectGeometry@@PAVSimObjectType@@H@Z$1:
	mov	eax, DWORD PTR $T14[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Exec@GunClass@@QAEHPAHQAY02MPAVObjectGeometry@@PAVSimObjectType@@H@Z$2:
	lea	ecx, DWORD PTR _featureWalker$12[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?Exec@GunClass@@QAEHPAHQAY02MPAVObjectGeometry@@PAVSimObjectType@@H@Z$3:
	mov	eax, DWORD PTR $T13[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Exec@GunClass@@QAEHPAHQAY02MPAVObjectGeometry@@PAVSimObjectType@@H@Z$4:
	mov	eax, DWORD PTR $T15[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Exec@GunClass@@QAEHPAHQAY02MPAVObjectGeometry@@PAVSimObjectType@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-504]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Exec@GunClass@@QAEHPAHQAY02MPAVObjectGeometry@@PAVSimObjectType@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Exec@GunClass@@QAEHPAHQAY02MPAVObjectGeometry@@PAVSimObjectType@@H@Z ENDP ; GunClass::Exec
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\guns\guns.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_xOffset$ = 8						; size = 4
_yOffset$ = 12						; size = 4
_zOffset$ = 16						; size = 4
_p$ = 20						; size = 4
_y$ = 24						; size = 4
?SetPosition@GunClass@@QAEXMMMMM@Z PROC			; GunClass::SetPosition
; _this$ = ecx

; 216  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 217  :    xPos = xOffset;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _xOffset$[ebp]
	movss	DWORD PTR [eax+692], xmm0

; 218  :    // edg NOTE: the cockpit (virtual anyways) is 2x scale.  In order that
; 219  :    // it looks like the bullets are flying out of the correct position,
; 220  :    // scale the yoffset further out (to the left).  This won't look
; 221  :    // quite right from external views.  What we should do is check in the
; 222  :    // exec loop to see of we're: 1) ownship, and 2) in internal/external
; 223  :    // view and scale dynamically
; 224  :    yPos = yOffset;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _yOffset$[ebp]
	movss	DWORD PTR [ecx+696], xmm0

; 225  :    zPos = zOffset;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _zOffset$[ebp]
	movss	DWORD PTR [edx+700], xmm0

; 226  :    pitch = p;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _p$[ebp]
	movss	DWORD PTR [eax+704], xmm0

; 227  :    yaw   = y;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [ecx+708], xmm0

; 228  : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?SetPosition@GunClass@@QAEXMMMMM@Z ENDP			; GunClass::SetPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\guns\guns.cpp
_TEXT	SEGMENT
$T1 = -24						; size = 4
tv146 = -20						; size = 4
tv135 = -16						; size = 4
tv85 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_muzzleVel$ = 8						; size = 4
_numRounds$ = 12					; size = 4
?Init@GunClass@@QAEXMH@Z PROC				; GunClass::Init
; _this$ = ecx

; 52   : void GunClass::Init(float muzzleVel, int numRounds){

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 53   : 	int i;
; 54   : 	// 2000-10-18 ADDED BY S.G. SO BULLETS HAVE THEIR OWN VELOCITY
; 55   : 	// ANY REFERENCE TO initBulletVelocity IN THIS FUNCTION HAS BEEN COMMENTED OUT AS WELL
; 56   : 	// We'll use an unused field in the WCD file. 
; 57   : 	//The LAST 5 bits will be used and the value will range from 256 to 8192 ft/sec.
; 58   : 	initBulletVelocity = (float)(((((unsigned char *)wcPtr)[45] >> 3) + 1) * 256);

	mov	eax, 1
	imul	eax, 45					; 0000002dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+868]
	movzx	eax, BYTE PTR [edx+eax]
	sar	eax, 3
	add	eax, 1
	shl	eax, 8
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+792], xmm0

; 59   : 
; 60   : 	if ( typeOfGun == GUN_TRACER || typeOfGun == GUN_TRACER_BALL )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+852], 1
	je	SHORT $LN9@Init
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+852], 2
	jne	$LN10@Init
$LN9@Init:

; 61   : 	{
; 62   : 		if (parent->IsGroundVehicle())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	DWORD PTR tv85[ebp], eax
	mov	ecx, DWORD PTR tv85[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv85[ebp]
	mov	eax, DWORD PTR [edx+196]
	call	eax
	test	eax, eax
	je	SHORT $LN8@Init

; 63   : 		{
; 64   : 			unlimitedAmmo = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+820], 1
$LN8@Init:

; 65   : 		}
; 66   : 
; 67   : 		bullet = new GunTracerType[NUM_BULLETS];

	push	308					; 00000134H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+800], eax

; 68   : 		numTracers = (int)(NUM_BULLETS);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+812], 11			; 0000000bH

; 69   : 	   
; 70   : 	   // This really should be player only, but not sure how to decide if this will be a player AC
; 71   : 	   if ( parent->IsAirplane() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	DWORD PTR tv135[ebp], eax
	mov	edx, DWORD PTR tv135[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv135[ebp]
	mov	edx, DWORD PTR [eax+192]
	call	edx
	test	eax, eax
	je	SHORT $LN7@Init

; 72   : 	   		numFirstTracers = (int)(max( 4.0f, gSfxLOD * 12.0f ));

	movss	xmm0, DWORD PTR ?gSfxLOD@@3MA
	mulss	xmm0, DWORD PTR __real@41400000
	movss	xmm1, DWORD PTR __real@40800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN13@Init
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR tv146[ebp], xmm0
	jmp	SHORT $LN14@Init
$LN13@Init:
	movss	xmm0, DWORD PTR ?gSfxLOD@@3MA
	mulss	xmm0, DWORD PTR __real@41400000
	movss	DWORD PTR tv146[ebp], xmm0
$LN14@Init:
	cvttss2si eax, DWORD PTR tv146[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+816], eax

; 73   : 	   else

	jmp	SHORT $LN6@Init
$LN7@Init:

; 74   : 	   		numFirstTracers = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+816], 1
$LN6@Init:

; 75   : 
; 76   : 	   ShiAssert( bullet );
; 77   : 		// Marco Edit
; 78   : 		// Externalized Gun Fire rate - last byte of MaxAlt
; 79   : 	   // Original setting - remmed out
; 80   : 		// roundsPerSecond = 100.0F;
; 81   : 	   //roundsPerSecond = (float) (wcPtr->MaxAlt)[2] ;
; 82   : 	   roundsPerSecond = (float)((((unsigned char *)wcPtr)[59]));

	mov	eax, 1
	imul	eax, 59					; 0000003bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+868]
	movzx	eax, BYTE PTR [edx+eax]
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+804], xmm0

; 83   : 	   if (roundsPerSecond == 0.0)

	mov	edx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+804]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN5@Init

; 84   : 		   roundsPerSecond = 100.0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [eax+804], xmm0
$LN5@Init:

; 85   : 
; 86   : 
; 87   : 		// End Marco Edit
; 88   : 	   numRoundsRemaining = numRounds * 10;

	mov	ecx, DWORD PTR _numRounds$[ebp]
	imul	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+808], ecx

; 89   :       initialRounds = numRoundsRemaining;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+808]
	mov	DWORD PTR [eax+724], edx

; 90   : 	   for (i=0; i<numTracers; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Init
$LN3@Init:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Init:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+812]
	jge	SHORT $LN2@Init

; 91   : 	   {
; 92   : 		  bullet[i].flying = FALSE;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+800]
	mov	DWORD PTR [edx+eax+24], 0

; 93   : 	   }

	jmp	SHORT $LN3@Init
$LN2@Init:

; 94   : 
; 95   : 	   tracerMode = COLLIDE_CHECK_ALL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+752], 0

; 96   :    }
; 97   :    else // SHELLS

	jmp	SHORT $LN1@Init
$LN10@Init:

; 98   :    {
; 99   : 	   numRoundsRemaining = numRounds;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _numRounds$[ebp]
	mov	DWORD PTR [ecx+808], edx

; 100  : 	   roundsPerSecond = 1.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+804], xmm0

; 101  : //	   initBulletVelocity = muzzleVel * 0.75F;
; 102  : 	   numFirstTracers = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+816], 0

; 103  : 	   numTracers = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+812], 0
$LN1@Init:

; 104  :    }
; 105  : 
; 106  :    dragFactor  = 0.5F * RHOASL * 0.0055F * 0.15F / 0.03F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@38091470
	movss	DWORD PTR [eax+712], xmm0

; 107  :    status = Ready;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+796], 0

; 108  :    //RV - I-Hawk - RV new trails call changes
; 109  :    //smokeTrail = NULL;
; 110  :    TrailIdNew = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+744], 0

; 111  :    trailID = TRAIL_GUN;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+788], 11			; 0000000bH

; 112  :    
; 113  :    //MI to add a timer to AAA
; 114  :    CheckAltitude = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+832], 1

; 115  :    AdjustForAlt = SimLibElapsedTime;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [edx+836], eax

; 116  :    TargetAlt = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+840], xmm0

; 117  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Init@GunClass@@QAEXMH@Z ENDP				; GunClass::Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\guns\guns.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?CleanupLocalData@GunClass@@AAEXXZ PROC			; GunClass::CleanupLocalData
; _this$ = ecx

; 198  : void GunClass::CleanupLocalData(){

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 199  :    if ( typeOfGun == GUN_TRACER || typeOfGun == GUN_TRACER_BALL ){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+852], 1
	je	SHORT $LN3@CleanupLoc
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+852], 2
	jne	SHORT $LN4@CleanupLoc
$LN3@CleanupLoc:

; 200  :    		delete [] bullet;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+800]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 201  :    		bullet = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+800], 0

; 202  : 		if (smokeTrail){ OTWDriver.RemoveObject( smokeTrail, TRUE ); }

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+748], 0
	je	SHORT $LN2@CleanupLoc
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+748]
	push	edx
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?RemoveObject@OTWDriverClass@@QAEXPAVDrawableObject@@H@Z ; OTWDriverClass::RemoveObject
$LN2@CleanupLoc:

; 203  :    }
; 204  :    else {

	jmp	SHORT $LN5@CleanupLoc
$LN4@CleanupLoc:

; 205  : 		FireShell( NULL );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FireShell@GunClass@@QAEXPAVSimObjectType@@@Z ; GunClass::FireShell
$LN5@CleanupLoc:

; 206  :    }
; 207  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CleanupLocalData@GunClass@@AAEXXZ ENDP			; GunClass::CleanupLocalData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\guns\guns.cpp
_TEXT	SEGMENT
_classPtr$1 = -16					; size = 4
_baseRange$ = -12					; size = 4
_domain$ = -8						; size = 4
_this$ = -4						; size = 4
_type$ = 8						; size = 4
?InitLocalData@GunClass@@AAEXH@Z PROC			; GunClass::InitLocalData
; _this$ = ecx

; 124  : void GunClass::InitLocalData(int type){

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 125  : 	float baseRange;
; 126  : 	int domain = 0;

	mov	DWORD PTR _domain$[ebp], 0

; 127  : 
; 128  : 	// type is the description index into the class table
; 129  : 	// get the weapon class data
; 130  : 	type -= VU_LAST_ENTITY_TYPE;

	mov	eax, DWORD PTR _type$[ebp]
	sub	eax, 100				; 00000064H
	mov	DWORD PTR _type$[ebp], eax

; 131  : 
; 132  : 	wcPtr = (WeaponClassDataType *)Falcon4ClassTable[type].dataPtr;

	mov	ecx, DWORD PTR _type$[ebp]
	imul	ecx, 81					; 00000051H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	ecx, DWORD PTR [eax+ecx+77]
	mov	DWORD PTR [edx+868], ecx

; 133  : 
; 134  : 	// hack at the moment for class tbl problem with flak
; 135  : 	if ( strcmp( "30mm AAA HE", wcPtr->Name ) == 0 ){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+868]
	add	eax, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_0M@KPOKADOG@30mm?5AAA?5HE?$AA@
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN12@InitLocalD

; 136  : 		typeOfGun = GUN_SHELL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+852], 0
	jmp	SHORT $LN7@InitLocalD
$LN12@InitLocalD:

; 137  : 	}
; 138  : 	else if ( wcPtr->Flags & WEAP_TRACER ){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+868]
	movzx	ecx, WORD PTR [eax+10]
	and	ecx, 32					; 00000020H
	je	SHORT $LN10@InitLocalD

; 139  : 		Falcon4EntityClassType* classPtr = (Falcon4EntityClassType*)EntityType();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	DWORD PTR _classPtr$1[ebp], eax

; 140  : 		if (classPtr->vuClassData.classInfo_[VU_STYPE] == STYPE_AAA_GUN ){

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _classPtr$1[ebp]
	movzx	ecx, BYTE PTR [eax+edx+8]
	cmp	ecx, 1
	jne	SHORT $LN9@InitLocalD

; 141  : 			typeOfGun = GUN_TRACER_BALL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+852], 2

; 142  : 		}
; 143  : 		else {

	jmp	SHORT $LN8@InitLocalD
$LN9@InitLocalD:

; 144  : 			typeOfGun = GUN_TRACER;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+852], 1
$LN8@InitLocalD:

; 145  : 		}
; 146  : 	}
; 147  : 	else {

	jmp	SHORT $LN7@InitLocalD
$LN10@InitLocalD:

; 148  : 		typeOfGun = GUN_SHELL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+852], 0
$LN7@InitLocalD:

; 149  : 	}
; 150  : 
; 151  : 	unlimitedAmmo = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+820], 0

; 152  : 	bullet = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+800], 0

; 153  : 	numRoundsRemaining = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+808], 0

; 154  : 	fractionalRoundsRemaining = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+728], xmm0

; 155  : 	fireCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+716], 0

; 156  : 	tracers = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+732], 0

; 157  : 	trailState = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+776], 0

; 158  : 	smokeTrail = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+748], 0

; 159  : 	muzzleStart = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+780], 0

; 160  : 	qTimer = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+784], xmm0

; 161  : 	numFlying = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+824], 0

; 162  : 	FiremsgsendTime = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+828], 0

; 163  : 	bursts = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+720], 0

; 164  : 	shellTargetPtr = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+848], 0

; 165  : 	shellDetonateTime = 0;		

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+856], 0

; 166  : 	gunDomain = wdNoDomain;				// air, land, both

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+844], 0

; 167  : 
; 168  : 	// ok, try and figure out what the domain is from the
; 169  : 	// weapon hit chance table
; 170  : 	if ( 
; 171  : 		wcPtr->HitChance[ NoMove ] > 0 || wcPtr->HitChance[ Foot ] > 0 || wcPtr->HitChance[ Wheeled ] > 0 ||
; 172  : 		wcPtr->HitChance[ Tracked ] > 0 || wcPtr->HitChance[ Naval ] > 0 || wcPtr->HitChance[ Rail ] > 0 
; 173  : 	){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+868]
	mov	edx, 1
	imul	edx, 0
	movzx	eax, BYTE PTR [ecx+edx+32]
	test	eax, eax
	jg	$LN5@InitLocalD
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+868]
	mov	eax, 1
	shl	eax, 0
	movzx	ecx, BYTE PTR [edx+eax+32]
	test	ecx, ecx
	jg	SHORT $LN5@InitLocalD
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+868]
	mov	ecx, 1
	shl	ecx, 1
	movzx	edx, BYTE PTR [eax+ecx+32]
	test	edx, edx
	jg	SHORT $LN5@InitLocalD
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+868]
	mov	edx, 1
	imul	edx, 3
	movzx	eax, BYTE PTR [ecx+edx+32]
	test	eax, eax
	jg	SHORT $LN5@InitLocalD
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+868]
	mov	eax, 1
	imul	eax, 6
	movzx	ecx, BYTE PTR [edx+eax+32]
	test	ecx, ecx
	jg	SHORT $LN5@InitLocalD
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+868]
	mov	ecx, 1
	imul	ecx, 7
	movzx	edx, BYTE PTR [eax+ecx+32]
	test	edx, edx
	jle	SHORT $LN6@InitLocalD
$LN5@InitLocalD:

; 174  : 		domain = (int)wdGround;

	mov	DWORD PTR _domain$[ebp], 2
$LN6@InitLocalD:

; 175  : 	}
; 176  : 
; 177  : 	if (wcPtr->HitChance[ Air ] > 0 || wcPtr->HitChance[ LowAir ] > 0 ){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+868]
	mov	edx, 1
	imul	edx, 5
	movzx	eax, BYTE PTR [ecx+edx+32]
	test	eax, eax
	jg	SHORT $LN3@InitLocalD
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+868]
	mov	eax, 1
	shl	eax, 2
	movzx	ecx, BYTE PTR [edx+eax+32]
	test	ecx, ecx
	jle	SHORT $LN4@InitLocalD
$LN3@InitLocalD:

; 178  : 		domain |= (int)wdAir;

	mov	edx, DWORD PTR _domain$[ebp]
	or	edx, 1
	mov	DWORD PTR _domain$[ebp], edx
$LN4@InitLocalD:

; 179  : 	}
; 180  : 
; 181  : 	gunDomain = (WeaponDomain)domain;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _domain$[ebp]
	mov	DWORD PTR [eax+844], ecx

; 182  : 
; 183  : 	// get a base range for the weapon
; 184  : 	baseRange = wcPtr->Range * 6000.0f;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+868]
	movsx	ecx, WORD PTR [eax+8]
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR __real@45bb8000
	movss	DWORD PTR _baseRange$[ebp], xmm0

; 185  : 
; 186  : 	if ( wcPtr->Range == 1 ) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+868]
	movsx	ecx, WORD PTR [eax+8]
	cmp	ecx, 1
	jne	SHORT $LN2@InitLocalD

; 187  : 		minShellRange = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+860], xmm0

; 188  : 	}
; 189  : 	else {

	jmp	SHORT $LN1@InitLocalD
$LN2@InitLocalD:

; 190  : 		minShellRange = baseRange * 0.3f;

	movss	xmm0, DWORD PTR _baseRange$[ebp]
	mulss	xmm0, DWORD PTR __real@3e99999a
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+860], xmm0
$LN1@InitLocalD:

; 191  : 	}
; 192  : 
; 193  : 	maxShellRange = baseRange * 1.7f;

	movss	xmm0, DWORD PTR _baseRange$[ebp]
	mulss	xmm0, DWORD PTR __real@3fd9999a
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+864], xmm0

; 194  : 	xPos = yPos = zPos = 0;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+700], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+696], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+692], xmm0

; 195  : 	pitch = yaw = 0;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+708], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+704], xmm0

; 196  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?InitLocalData@GunClass@@AAEXH@Z ENDP			; GunClass::InitLocalData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\guns\guns.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CleanupData@GunClass@@UAEXXZ PROC			; GunClass::CleanupData
; _this$ = ecx

; 209  : void GunClass::CleanupData(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 210  : 	CleanupLocalData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanupLocalData@GunClass@@AAEXXZ	; GunClass::CleanupLocalData

; 211  : 	SimWeaponClass::CleanupData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanupData@SimWeaponClass@@UAEXXZ	; SimWeaponClass::CleanupData

; 212  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CleanupData@GunClass@@UAEXXZ ENDP			; GunClass::CleanupData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\guns\guns.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InitData@GunClass@@UAEXXZ PROC				; GunClass::InitData
; _this$ = ecx

; 119  : void GunClass::InitData(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 	SimMoverClass::InitData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitData@SimMoverClass@@UAEXXZ		; SimMoverClass::InitData

; 121  : 	InitLocalData(Type());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	eax, ax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitLocalData@GunClass@@AAEXH@Z	; GunClass::InitLocalData

; 122  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InitData@GunClass@@UAEXXZ ENDP				; GunClass::InitData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\guns\guns.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1GunClass@@UAE@XZ PROC				; GunClass::~GunClass
; _this$ = ecx

; 48   : GunClass::~GunClass(){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1GunClass@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7GunClass@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 49   : 	CleanupLocalData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanupLocalData@GunClass@@AAEXXZ	; GunClass::CleanupLocalData

; 50   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SimWeaponClass@@UAE@XZ		; SimWeaponClass::~SimWeaponClass
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1GunClass@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1SimWeaponClass@@UAE@XZ		; SimWeaponClass::~SimWeaponClass
__ehhandler$??1GunClass@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1GunClass@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1GunClass@@UAE@XZ ENDP				; GunClass::~GunClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\guns\guns.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 4
??0GunClass@@QAE@H@Z PROC				; GunClass::GunClass
; _this$ = ecx

; 44   : GunClass::GunClass(int type) : SimWeaponClass(type){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0GunClass@@QAE@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0SimWeaponClass@@QAE@H@Z		; SimWeaponClass::SimWeaponClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7GunClass@@6B@

; 45   : 	InitLocalData(type);

	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitLocalData@GunClass@@AAEXH@Z	; GunClass::InitLocalData

; 46   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0GunClass@@QAE@H@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1SimWeaponClass@@UAE@XZ		; SimWeaponClass::~SimWeaponClass
__ehhandler$??0GunClass@@QAE@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0GunClass@@QAE@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0GunClass@@QAE@H@Z ENDP				; GunClass::GunClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simweapn.h
;	COMDAT ?LaunchDelayTime@SimWeaponClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LaunchDelayTime@SimWeaponClass@@UAEHXZ PROC		; SimWeaponClass::LaunchDelayTime, COMDAT
; _this$ = ecx

; 75   : 	virtual int LaunchDelayTime(void) { return 0; }  

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?LaunchDelayTime@SimWeaponClass@@UAEHXZ ENDP		; SimWeaponClass::LaunchDelayTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simweapn.h
;	COMDAT ?IsUseable@SimWeaponClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsUseable@SimWeaponClass@@UAEHXZ PROC			; SimWeaponClass::IsUseable, COMDAT
; _this$ = ecx

; 70   : 	virtual int IsUseable (void) {return TRUE;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsUseable@SimWeaponClass@@UAEHXZ ENDP			; SimWeaponClass::IsUseable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simweapn.h
;	COMDAT ?IsWeapon@SimWeaponClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsWeapon@SimWeaponClass@@UAEHXZ PROC			; SimWeaponClass::IsWeapon, COMDAT
; _this$ = ecx

; 61   : 	virtual int IsWeapon (void) {return TRUE;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsWeapon@SimWeaponClass@@UAEHXZ ENDP			; SimWeaponClass::IsWeapon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simmover.h
;	COMDAT ?IsMover@SimMoverClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMover@SimMoverClass@@UAEHXZ PROC			; SimMoverClass::IsMover, COMDAT
; _this$ = ecx

; 145  : 	virtual int IsMover (void) {return TRUE;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMover@SimMoverClass@@UAEHXZ ENDP			; SimMoverClass::IsMover
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simmover.h
;	COMDAT ?WeaponKeepAlive@SimMoverClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?WeaponKeepAlive@SimMoverClass@@UAEXXZ PROC		; SimMoverClass::WeaponKeepAlive, COMDAT
; _this$ = ecx

; 109  : 	virtual void WeaponKeepAlive() { return; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?WeaponKeepAlive@SimMoverClass@@UAEXXZ ENDP		; SimMoverClass::WeaponKeepAlive
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simmover.h
;	COMDAT ?SetLead@SimMoverClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetLead@SimMoverClass@@UAEXH@Z PROC			; SimMoverClass::SetLead, COMDAT
; _this$ = ecx

; 87   : 	virtual void SetLead (int) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLead@SimMoverClass@@UAEXH@Z ENDP			; SimMoverClass::SetLead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?Mass@SimBaseClass@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Mass@SimBaseClass@@UAEMXZ PROC				; SimBaseClass::Mass, COMDAT
; _this$ = ecx

; 267  : 	virtual float Mass(void)		{return 2500.0F;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fld	DWORD PTR __real@451c4000
	mov	esp, ebp
	pop	ebp
	ret	0
?Mass@SimBaseClass@@UAEMXZ ENDP				; SimBaseClass::Mass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?Regenerate@SimBaseClass@@UAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?Regenerate@SimBaseClass@@UAEXMMMM@Z PROC		; SimBaseClass::Regenerate, COMDAT
; _this$ = ecx

; 261  : 	virtual void Regenerate(float, float, float, float) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Regenerate@SimBaseClass@@UAEXMMMM@Z ENDP		; SimBaseClass::Regenerate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?SetVuPosition@SimBaseClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetVuPosition@SimBaseClass@@UAEXXZ PROC		; SimBaseClass::SetVuPosition, COMDAT
; _this$ = ecx

; 260  : 	virtual void SetVuPosition() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetVuPosition@SimBaseClass@@UAEXXZ ENDP		; SimBaseClass::SetVuPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?ConfigurePlayerAvionics@SimBaseClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ConfigurePlayerAvionics@SimBaseClass@@UAEXXZ PROC	; SimBaseClass::ConfigurePlayerAvionics, COMDAT
; _this$ = ecx

; 259  : 	virtual void ConfigurePlayerAvionics() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ConfigurePlayerAvionics@SimBaseClass@@UAEXXZ ENDP	; SimBaseClass::ConfigurePlayerAvionics
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?MakeNonPlayerVehicle@SimBaseClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MakeNonPlayerVehicle@SimBaseClass@@UAEXXZ PROC		; SimBaseClass::MakeNonPlayerVehicle, COMDAT
; _this$ = ecx

; 258  : 	virtual void MakeNonPlayerVehicle() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?MakeNonPlayerVehicle@SimBaseClass@@UAEXXZ ENDP		; SimBaseClass::MakeNonPlayerVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?MakePlayerVehicle@SimBaseClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MakePlayerVehicle@SimBaseClass@@UAEXXZ PROC		; SimBaseClass::MakePlayerVehicle, COMDAT
; _this$ = ecx

; 257  : 	virtual void MakePlayerVehicle() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?MakePlayerVehicle@SimBaseClass@@UAEXXZ ENDP		; SimBaseClass::MakePlayerVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetTransform@SimBaseClass@@UAEXQAY02M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?GetTransform@SimBaseClass@@UAEXQAY02M@Z PROC		; SimBaseClass::GetTransform, COMDAT
; _this$ = ecx

; 253  : 	virtual void GetTransform(TransformMatrix) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetTransform@SimBaseClass@@UAEXQAY02M@Z ENDP		; SimBaseClass::GetTransform
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z PROC		; SimBaseClass::IsSetCampaignFlag, COMDAT
; _this$ = ecx

; 182  : 	int  IsSetCampaignFlag(int flag) const { return ((campaignFlags & flag) ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsSetCampa
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSetCampa
$LN3@IsSetCampa:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSetCampa:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z ENDP		; SimBaseClass::IsSetCampaignFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsDead@SimBaseClass@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -1						; size = 1
?IsDead@SimBaseClass@@UBEHXZ PROC			; SimBaseClass::IsDead, COMDAT
; _this$ = ecx

; 174  : 	virtual int IsDead() const { return (specialData.flags & OBJ_DEAD ? true : false); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, 32					; 00000020H
	je	SHORT $LN3@IsDead
	mov	BYTE PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsDead
$LN3@IsDead:
	mov	BYTE PTR tv68[ebp], 0
$LN4@IsDead:
	movzx	eax, BYTE PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDead@SimBaseClass@@UBEHXZ ENDP			; SimBaseClass::IsDead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsExploding@SimBaseClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsExploding@SimBaseClass@@UAEHXZ PROC			; SimBaseClass::IsExploding, COMDAT
; _this$ = ecx

; 173  : 	virtual int IsExploding () { return (specialData.flags & OBJ_EXPLODING ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, 16					; 00000010H
	je	SHORT $LN3@IsExplodin
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsExplodin
$LN3@IsExplodin:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsExplodin:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsExploding@SimBaseClass@@UAEHXZ ENDP			; SimBaseClass::IsExploding
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?OnGround@SimBaseClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?OnGround@SimBaseClass@@UAEHXZ PROC			; SimBaseClass::OnGround, COMDAT
; _this$ = ecx

; 172  : 	virtual int OnGround () { return (specialData.flags & ON_GROUND ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, 128				; 00000080H
	je	SHORT $LN3@OnGround
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@OnGround
$LN3@OnGround:
	mov	DWORD PTR tv68[ebp], 0
$LN4@OnGround:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?OnGround@SimBaseClass@@UAEHXZ ENDP			; SimBaseClass::OnGround
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCountry@SimBaseClass@@UAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCountry@SimBaseClass@@UAEEXZ PROC			; SimBaseClass::GetCountry, COMDAT
; _this$ = ecx

; 157  : 	virtual uchar GetCountry() { return (uchar)specialData.country; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+180]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCountry@SimBaseClass@@UAEEXZ ENDP			; SimBaseClass::GetCountry
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsSimBase@SimBaseClass@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSimBase@SimBaseClass@@UAE_NXZ PROC			; SimBaseClass::IsSimBase, COMDAT
; _this$ = ecx

; 152  : 	virtual bool IsSimBase() { return true; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSimBase@SimBaseClass@@UAE_NXZ ENDP			; SimBaseClass::IsSimBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?JoinFlight@SimBaseClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?JoinFlight@SimBaseClass@@UAEXXZ PROC			; SimBaseClass::JoinFlight, COMDAT
; _this$ = ecx

; 139  : 	virtual void JoinFlight (void) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?JoinFlight@SimBaseClass@@UAEXXZ ENDP			; SimBaseClass::JoinFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC	; VuBin<FalconEntity>::operator->, COMDAT
; _this$ = ecx

; 50   : 	E *operator->() const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 52   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP	; VuBin<FalconEntity>::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\object.h
;	COMDAT ?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ PROC	; SimObjectType::BaseData, COMDAT
; _this$ = ecx

; 92   : 	FalconEntity* BaseData(void) { return baseData.get(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ENDP	; SimObjectType::BaseData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetSEARCHtimer@FalconEntity@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSEARCHtimer@FalconEntity@@UAEKXZ PROC		; FalconEntity::GetSEARCHtimer, COMDAT
; _this$ = ecx

; 198  : 	virtual VU_TIME GetSEARCHtimer(void)				{ return 0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSEARCHtimer@FalconEntity@@UAEKXZ ENDP		; FalconEntity::GetSEARCHtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetAQUIREtimer@FalconEntity@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAQUIREtimer@FalconEntity@@UAEKXZ PROC		; FalconEntity::GetAQUIREtimer, COMDAT
; _this$ = ecx

; 197  : 	virtual VU_TIME GetAQUIREtimer(void)				{ return 0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAQUIREtimer@FalconEntity@@UAEKXZ ENDP		; FalconEntity::GetAQUIREtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetStepSearchMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetStepSearchMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetStepSearchMode, COMDAT
; _this$ = ecx

; 196  : 	virtual void SetStepSearchMode(uchar)					{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStepSearchMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetStepSearchMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetSEARCHtimer@FalconEntity@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newTime$ = 8						; size = 4
?SetSEARCHtimer@FalconEntity@@UAEXK@Z PROC		; FalconEntity::SetSEARCHtimer, COMDAT
; _this$ = ecx

; 194  : 	virtual void SetSEARCHtimer(VU_TIME newTime)		{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSEARCHtimer@FalconEntity@@UAEXK@Z ENDP		; FalconEntity::SetSEARCHtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetAQUIREtimer@FalconEntity@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newTime$ = 8						; size = 4
?SetAQUIREtimer@FalconEntity@@UAEXK@Z PROC		; FalconEntity::SetAQUIREtimer, COMDAT
; _this$ = ecx

; 193  : 	virtual void SetAQUIREtimer(VU_TIME newTime)		{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAQUIREtimer@FalconEntity@@UAEXK@Z ENDP		; FalconEntity::SetAQUIREtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetIRFactor@FalconEntity@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetIRFactor@FalconEntity@@UAEMXZ PROC			; FalconEntity::GetIRFactor, COMDAT
; _this$ = ecx

; 164  : 	virtual float GetIRFactor (void)			{ return 0.0f; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?GetIRFactor@FalconEntity@@UAEMXZ ENDP			; FalconEntity::GetIRFactor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetRCSFactor@FalconEntity@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRCSFactor@FalconEntity@@UAEMXZ PROC			; FalconEntity::GetRCSFactor, COMDAT
; _this$ = ecx

; 163  : 	virtual float GetRCSFactor (void)			{ return 0.0f; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRCSFactor@FalconEntity@@UAEMXZ ENDP			; FalconEntity::GetRCSFactor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsTaskForce@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTaskForce@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsTaskForce, COMDAT
; _this$ = ecx

; 158  : 	virtual int IsTaskForce (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTaskForce@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsTaskForce
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsTeam@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTeam@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsTeam, COMDAT
; _this$ = ecx

; 157  : 	virtual int IsTeam (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTeam@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsTeam
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsPackage@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPackage@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsPackage, COMDAT
; _this$ = ecx

; 156  : 	virtual int IsPackage (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPackage@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsPackage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSquadron@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSquadron@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsSquadron, COMDAT
; _this$ = ecx

; 155  : 	virtual int IsSquadron (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSquadron@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsSquadron
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsFlight@FalconEntity@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsFlight@FalconEntity@@UBEHXZ PROC			; FalconEntity::IsFlight, COMDAT
; _this$ = ecx

; 154  : 	virtual int IsFlight() const				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsFlight@FalconEntity@@UBEHXZ ENDP			; FalconEntity::IsFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBrigade@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBrigade@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBrigade, COMDAT
; _this$ = ecx

; 153  : 	virtual int IsBrigade (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBrigade@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBrigade
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBattalion@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBattalion@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBattalion, COMDAT
; _this$ = ecx

; 152  : 	virtual int IsBattalion (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBattalion@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBattalion
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsObjective@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsObjective@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsObjective, COMDAT
; _this$ = ecx

; 151  : 	virtual int IsObjective (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsObjective@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsUnit@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsUnit@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsUnit, COMDAT
; _this$ = ecx

; 150  : 	virtual int IsUnit (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsUnit@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsEmitting@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmitting@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsEmitting, COMDAT
; _this$ = ecx

; 145  : 	virtual int IsEmitting (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmitting@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsEmitting
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsDead@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDead@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsDead, COMDAT
; _this$ = ecx

; 144  : 	virtual int IsDead (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDead@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsDead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsShip@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsShip@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsShip, COMDAT
; _this$ = ecx

; 141  : 	virtual int IsShip (void) 			        { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsShip@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsShip
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsGroundVehicle@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGroundVehicle@FalconEntity@@UAEHXZ PROC		; FalconEntity::IsGroundVehicle, COMDAT
; _this$ = ecx

; 140  : 	virtual int IsGroundVehicle (void) 			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGroundVehicle@FalconEntity@@UAEHXZ ENDP		; FalconEntity::IsGroundVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsAirplane@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAirplane@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsAirplane, COMDAT
; _this$ = ecx

; 139  : 	virtual int IsAirplane (void)	   			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAirplane@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsAirplane
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsEject@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEject@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsEject, COMDAT
; _this$ = ecx

; 138  : 	virtual int IsEject (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEject@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsEject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsHelicopter@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsHelicopter@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsHelicopter, COMDAT
; _this$ = ecx

; 137  : 	virtual int IsHelicopter (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsHelicopter@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsHelicopter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsStatic@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsStatic@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsStatic, COMDAT
; _this$ = ecx

; 136  : 	virtual int IsStatic (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsStatic@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsStatic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsVehicle@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsVehicle@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsVehicle, COMDAT
; _this$ = ecx

; 135  : 	virtual int IsVehicle (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsVehicle@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBomb@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBomb@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBomb, COMDAT
; _this$ = ecx

; 132  : 	virtual int IsBomb (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBomb@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBomb
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsLauncher@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsLauncher@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsLauncher, COMDAT
; _this$ = ecx

; 131  : 	virtual int IsLauncher (void)               { return FALSE; } // MLR 3/4/2004 - rocket pods

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsLauncher@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsLauncher
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsMissile@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMissile@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsMissile, COMDAT
; _this$ = ecx

; 130  : 	virtual int IsMissile (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMissile@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsMissile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv69 = -4						; size = 4
_e$ = 8							; size = 4
?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z PROC	; FalconEntity::HasEntity, COMDAT
; _this$ = ecx

; 129  : 	virtual int HasEntity(VuEntity *e) const    { return this == e; } // sfr: added for new driver

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _e$[ebp]
	jne	SHORT $LN3@HasEntity
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@HasEntity
$LN3@HasEntity:
	mov	DWORD PTR tv69[ebp], 0
$LN4@HasEntity:
	mov	eax, DWORD PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z ENDP	; FalconEntity::HasEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?CombatClass@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CombatClass@FalconEntity@@UAEHXZ PROC			; FalconEntity::CombatClass, COMDAT
; _this$ = ecx

; 127  : 	virtual int CombatClass (void)				{ return 999; } // 2002-02-25 ADDED BY S.G. No combat class for non flight or non aircraft class

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 999				; 000003e7H
	mov	esp, ebp
	pop	ebp
	ret	0
?CombatClass@FalconEntity@@UAEHXZ ENDP			; FalconEntity::CombatClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetSearchMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetSearchMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetSearchMode, COMDAT
; _this$ = ecx

; 126  : 	virtual void SetSearchMode (uchar)		{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSearchMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetSearchMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?ReturnToSearch@FalconEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReturnToSearch@FalconEntity@@UAEXXZ PROC		; FalconEntity::ReturnToSearch, COMDAT
; _this$ = ecx

; 124  : 	virtual void ReturnToSearch (void)			{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ReturnToSearch@FalconEntity@@UAEXXZ ENDP		; FalconEntity::ReturnToSearch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetRadarMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetRadarMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetRadarMode, COMDAT
; _this$ = ecx

; 123  : 	virtual void SetRadarMode (uchar)		{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRadarMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetRadarMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetRadarMode@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRadarMode@FalconEntity@@UAEHXZ PROC			; FalconEntity::GetRadarMode, COMDAT
; _this$ = ecx

; 121  : 	virtual int GetRadarMode (void)				{ return FEC_RADAR_OFF; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRadarMode@FalconEntity@@UAEHXZ ENDP			; FalconEntity::GetRadarMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSim@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsSim@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsSim, COMDAT
; _this$ = ecx

; 103  : 		{return (falconType & FalconSimEntity) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	and	ecx, 2
	je	SHORT $LN3@IsSim
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSim
$LN3@IsSim:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSim:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSim@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsCampBase@FalconEntity@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsCampBase@FalconEntity@@UAE_NXZ PROC			; FalconEntity::IsCampBase, COMDAT
; _this$ = ecx

; 99   : 	virtual bool IsCampBase() { return false; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	al, al
	mov	esp, ebp
	pop	ebp
	ret	0
?IsCampBase@FalconEntity@@UAE_NXZ ENDP			; FalconEntity::IsCampBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuevent.h
;	COMDAT ?RequestOutOfBandTransmit@VuMessage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RequestOutOfBandTransmit@VuMessage@@QAEXXZ PROC	; VuMessage::RequestOutOfBandTransmit, COMDAT
; _this$ = ecx

; 181  : 	void RequestOutOfBandTransmit() { flags_ |= VU_OUT_OF_BAND_MSG_FLAG; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	or	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+6], cl
	mov	esp, ebp
	pop	ebp
	ret	0
?RequestOutOfBandTransmit@VuMessage@@QAEXXZ ENDP	; VuMessage::RequestOutOfBandTransmit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZDelta@VuEntity@@QBEMXZ PROC				; VuEntity::ZDelta, COMDAT
; _this$ = ecx

; 163  : 	SM_SCALAR ZDelta() const { return pos_.dz_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::ZDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YDelta@VuEntity@@QBEMXZ PROC				; VuEntity::YDelta, COMDAT
; _this$ = ecx

; 162  : 	SM_SCALAR YDelta() const { return pos_.dy_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?YDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::YDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XDelta@VuEntity@@QBEMXZ PROC				; VuEntity::XDelta, COMDAT
; _this$ = ecx

; 161  : 	SM_SCALAR XDelta() const { return pos_.dx_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?XDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::XDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Type@VuEntity@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@VuEntity@@QBEGXZ PROC				; VuEntity::Type, COMDAT
; _this$ = ecx

; 154  : 	ushort Type() const       { return share_.entityType_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@VuEntity@@QBEGXZ ENDP				; VuEntity::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
