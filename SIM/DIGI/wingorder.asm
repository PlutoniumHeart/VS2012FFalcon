; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\DIGI\wingorder.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?gpAiExtentStr@@3PAPADA				; gpAiExtentStr
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	??_C@_09LOMLDCJG@AiWingman?$AA@			; `string'
PUBLIC	??_C@_09IMNPFGAM@AiElement?$AA@			; `string'
PUBLIC	??_C@_08HIBCDEAL@AiFlight?$AA@			; `string'
PUBLIC	??_C@_09FDCAJBPG@AiPackage?$AA@			; `string'
PUBLIC	??_C@_08IHCKOKHH@AiLeader?$AA@			; `string'
PUBLIC	??_C@_0P@ONBMFJNF@AiAllButSender?$AA@		; `string'
PUBLIC	??_C@_0L@EJCFADJA@AiNoExtent?$AA@		; `string'
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ??_C@_0L@EJCFADJA@AiNoExtent?$AA@
CONST	SEGMENT
??_C@_0L@EJCFADJA@AiNoExtent?$AA@ DB 'AiNoExtent', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ONBMFJNF@AiAllButSender?$AA@
CONST	SEGMENT
??_C@_0P@ONBMFJNF@AiAllButSender?$AA@ DB 'AiAllButSender', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08IHCKOKHH@AiLeader?$AA@
CONST	SEGMENT
??_C@_08IHCKOKHH@AiLeader?$AA@ DB 'AiLeader', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FDCAJBPG@AiPackage?$AA@
CONST	SEGMENT
??_C@_09FDCAJBPG@AiPackage?$AA@ DB 'AiPackage', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HIBCDEAL@AiFlight?$AA@
CONST	SEGMENT
??_C@_08HIBCDEAL@AiFlight?$AA@ DB 'AiFlight', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IMNPFGAM@AiElement?$AA@
CONST	SEGMENT
??_C@_09IMNPFGAM@AiElement?$AA@ DB 'AiElement', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LOMLDCJG@AiWingman?$AA@
CONST	SEGMENT
??_C@_09LOMLDCJG@AiWingman?$AA@ DB 'AiWingman', 00H	; `string'
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
_DATA	SEGMENT
?gpAiExtentStr@@3PAPADA DD FLAT:??_C@_09LOMLDCJG@AiWingman?$AA@ ; gpAiExtentStr
	DD	FLAT:??_C@_09IMNPFGAM@AiElement?$AA@
	DD	FLAT:??_C@_08HIBCDEAL@AiFlight?$AA@
	DD	FLAT:??_C@_09FDCAJBPG@AiPackage?$AA@
	DD	FLAT:??_C@_08IHCKOKHH@AiLeader?$AA@
	DD	FLAT:??_C@_0P@ONBMFJNF@AiAllButSender?$AA@
	DD	FLAT:??_C@_0L@EJCFADJA@AiNoExtent?$AA@
_DATA	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??8VU_ID@@QBE_NABV0@@Z				; VU_ID::operator==
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::OwnerId
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::operator->
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?CameraCount@VuSessionEntity@@QBEHXZ		; VuSessionEntity::CameraCount
PUBLIC	?size@?$vector@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBEIXZ ; std::vector<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::size
PUBLIC	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
PUBLIC	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ	; SimVehicleClass::Brain
PUBLIC	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ	; AircraftClass::DBrain
PUBLIC	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
PUBLIC	?AiMakeCommandMsg@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z ; AiMakeCommandMsg
PUBLIC	?AiSendCommand@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z ; AiSendCommand
PUBLIC	?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z		; AiSendPlayerCommand
PUBLIC	?AiCheckForThreat@@YA?AVVU_ID@@PAVAircraftClass@@DHPAM@Z ; AiCheckForThreat
PUBLIC	?AiDesignateTarget@@YA?AVVU_ID@@PAVAircraftClass@@@Z ; AiDesignateTarget
PUBLIC	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ	; SimObjectType::BaseData
PUBLIC	?GetGroundTarget@DigitalBrain@@QAEPAVSimObjectType@@XZ ; DigitalBrain::GetGroundTarget
PUBLIC	__real@00000000
PUBLIC	__real@3fc90fd9
PUBLIC	__real@42700000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?VuReferenceEntity@@YAHPAVVuEntity@@@Z:PROC	; VuReferenceEntity
EXTRN	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z:PROC	; VuDeReferenceEntity
EXTRN	?SetDriver@VuEntity@@QAEPAVVuDriver@@PAV2@@Z:PROC ; VuEntity::SetDriver
EXTRN	?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z:PROC	; VuDatabase::Insert
EXTRN	?Remove@VuDatabase@@QAEHPAVVuEntity@@@Z:PROC	; VuDatabase::Remove
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	?GetCameraEntity@VuSessionEntity@@QBEPAVVuEntity@@E@Z:PROC ; VuSessionEntity::GetCameraEntity
EXTRN	?AttachCamera@VuSessionEntity@@QAEHPAVVuEntity@@_N@Z:PROC ; VuSessionEntity::AttachCamera
EXTRN	?RemoveCamera@VuSessionEntity@@QAEHPAVVuEntity@@_N@Z:PROC ; VuSessionEntity::RemoveCamera
EXTRN	??0SpotEntity@@QAE@G@Z:PROC			; SpotEntity::SpotEntity
EXTRN	?FalconSendMessage@@YAXPAVVuMessage@@H@Z:PROC	; FalconSendMessage
EXTRN	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z:PROC ; CampBaseClass::GetComponentNumber
EXTRN	?NumberOfComponents@CampBaseClass@@QAEHXZ:PROC	; CampBaseClass::NumberOfComponents
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	??0FalconWingmanMsg@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconWingmanMsg::FalconWingmanMsg
EXTRN	?AiMakeRadioCall@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z:PROC ; AiMakeRadioCall
EXTRN	?GetTTRelations@@YAHEE@Z:PROC			; GetTTRelations
EXTRN	??0SpotDriver@@QAE@PAVVuEntity@@@Z:PROC		; SpotDriver::SpotDriver
EXTRN	?FindAircraftTarget@@YA?AVVU_ID@@PAVAircraftClass@@@Z:PROC ; FindAircraftTarget
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?vuNullId@@3VVU_ID@@A:QWORD			; vuNullId
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	?SimLibElapsedTime@@3KA:DWORD			; SimLibElapsedTime
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?F4FlyingEyeType@@3HA:DWORD			; F4FlyingEyeType
EXTRN	?g_nTargetSpotTimeout@@3HA:DWORD		; g_nTargetSpotTimeout
EXTRN	?g_bMPFix2@@3_NA:BYTE				; g_bMPFix2
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@3fc90fd9
CONST	SEGMENT
__real@3fc90fd9 DD 03fc90fd9r			; 1.5708
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?AiMakeCommandMsg@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AiMakeCommandMsg@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AiMakeCommandMsg@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z$1
__ehfuncinfo$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z DD 019930522H
	DD	0cH
	DD	FLAT:__unwindtable$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?AiMakeCommandMsg@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?AiMakeCommandMsg@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z$9
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z$10
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z$11
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?GetGroundTarget@DigitalBrain@@QAEPAVSimObjectType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGroundTarget@DigitalBrain@@QAEPAVSimObjectType@@XZ PROC ; DigitalBrain::GetGroundTarget, COMDAT
; _this$ = ecx

; 676  : 	SimObjectType* GetGroundTarget( void )				{return groundTargetPtr;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+224]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGroundTarget@DigitalBrain@@QAEPAVSimObjectType@@XZ ENDP ; DigitalBrain::GetGroundTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\object.h
;	COMDAT ?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ PROC	; SimObjectType::BaseData, COMDAT
; _this$ = ecx

; 92   : 	FalconEntity* BaseData(void) { return baseData.get(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ENDP	; SimObjectType::BaseData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\wingorder.cpp
_TEXT	SEGMENT
$T1 = -24						; size = 8
$T2 = -16						; size = 8
$T3 = -8						; size = 4
tv68 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_aircraft$ = 12						; size = 4
?AiDesignateTarget@@YA?AVVU_ID@@PAVAircraftClass@@@Z PROC ; AiDesignateTarget

; 580  : VU_ID AiDesignateTarget(AircraftClass* aircraft) {	

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 581  : 	return (aircraft != NULL) ?  FindAircraftTarget (aircraft) : vuNullId;

	cmp	DWORD PTR _aircraft$[ebp], 0
	je	SHORT $LN3@AiDesignat
	mov	eax, DWORD PTR _aircraft$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	?FindAircraftTarget@@YA?AVVU_ID@@PAVAircraftClass@@@Z ; FindAircraftTarget
	add	esp, 8
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@AiDesignat
$LN3@AiDesignat:
	mov	edx, DWORD PTR ?vuNullId@@3VVU_ID@@A
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR ?vuNullId@@3VVU_ID@@A+4
	mov	DWORD PTR $T2[ebp+4], eax
	lea	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv68[ebp], ecx
$LN4@AiDesignat:
	mov	edx, DWORD PTR tv68[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 582  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AiDesignateTarget@@YA?AVVU_ID@@PAVAircraftClass@@@Z ENDP ; AiDesignateTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\wingorder.cpp
_TEXT	SEGMENT
tv163 = -24						; size = 4
_inSideATA$ = -20					; size = 4
_pclassPtr$ = -16					; size = 4
_pthreatPtr$ = -12					; size = 4
_pobjectPtr$ = -8					; size = 4
_vuType$ = -4						; size = 1
_vuClass$ = -3						; size = 1
_vuDomain$ = -2						; size = 1
_vuSType$ = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
_paircraft$ = 12					; size = 4
_domain$ = 16						; size = 1
_position$ = 20						; size = 4
_az$ = 24						; size = 4
?AiCheckForThreat@@YA?AVVU_ID@@PAVAircraftClass@@DHPAM@Z PROC ; AiCheckForThreat

; 593  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 594  : 	
; 595  : 	SimObjectType		*pobjectPtr;
; 596  : 	SimObjectType		*pthreatPtr = NULL;

	mov	DWORD PTR _pthreatPtr$[ebp], 0

; 597  : 	VuEntityType		*pclassPtr;
; 598  : 	char					vuDomain;
; 599  : 	char					vuClass;
; 600  : 	char					vuType;
; 601  : 	char					vuSType; //JB 010527 (from MN) ///////// New Variable for subtype
; 602  : 	BOOL					inSideATA = FALSE;

	mov	DWORD PTR _inSideATA$[ebp], 0

; 603  : 
; 604  :    pobjectPtr = paircraft->targetList;

	mov	eax, DWORD PTR _paircraft$[ebp]
	mov	ecx, DWORD PTR [eax+660]
	mov	DWORD PTR _pobjectPtr$[ebp], ecx
$LN14@AiCheckFor:

; 605  :    while (pobjectPtr)

	cmp	DWORD PTR _pobjectPtr$[ebp], 0
	je	$LN13@AiCheckFor

; 606  : 	{
; 607  : 		pclassPtr	= pobjectPtr->BaseData()->EntityType();

	mov	ecx, DWORD PTR _pobjectPtr$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	DWORD PTR _pclassPtr$[ebp], eax

; 608  : 		vuDomain		= pclassPtr->classInfo_[VU_DOMAIN];

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _pclassPtr$[ebp]
	mov	cl, BYTE PTR [eax+edx+8]
	mov	BYTE PTR _vuDomain$[ebp], cl

; 609  : 		vuClass		= pclassPtr->classInfo_[VU_CLASS];

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _pclassPtr$[ebp]
	mov	cl, BYTE PTR [eax+edx+8]
	mov	BYTE PTR _vuClass$[ebp], cl

; 610  : 		vuType		= pclassPtr->classInfo_[VU_TYPE];

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _pclassPtr$[ebp]
	mov	cl, BYTE PTR [eax+edx+8]
	mov	BYTE PTR _vuType$[ebp], cl

; 611  : 		vuSType		= pclassPtr->classInfo_[VU_STYPE]; //JB 052701 (from MN)

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _pclassPtr$[ebp]
	mov	cl, BYTE PTR [eax+edx+8]
	mov	BYTE PTR _vuSType$[ebp], cl

; 612  : 
; 613  : 		if(position == 1 && pobjectPtr->localData->ata >= 90.0F * DTR) {

	cmp	DWORD PTR _position$[ebp], 1
	jne	SHORT $LN12@AiCheckFor
	mov	edx, DWORD PTR _pobjectPtr$[ebp]
	mov	eax, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR __real@3fc90fd9
	jb	SHORT $LN12@AiCheckFor

; 614  : 			inSideATA = TRUE; // if something is behind us and we are looking there

	mov	DWORD PTR _inSideATA$[ebp], 1
	jmp	SHORT $LN10@AiCheckFor
$LN12@AiCheckFor:

; 615  : 		}
; 616  : 		else if(position == 0 && pobjectPtr->localData->ata <= 90.0F * DTR) {

	cmp	DWORD PTR _position$[ebp], 0
	jne	SHORT $LN10@AiCheckFor
	mov	ecx, DWORD PTR _pobjectPtr$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR __real@3fc90fd9
	comiss	xmm0, DWORD PTR [edx]
	jb	SHORT $LN10@AiCheckFor

; 617  : 			inSideATA = TRUE;// if something is ahead of us and we are looking ther

	mov	DWORD PTR _inSideATA$[ebp], 1
$LN10@AiCheckFor:

; 618  : 		}
; 619  : 
; 620  : 		//////// Only change needed here for subtype check => AiCheckForThreat is called from both "Check" and "Clear my 6" !! //JB 052701 (from MN)
; 621  : 		//if((vuDomain == DOMAIN_AIR && vuClass == CLASS_VEHICLE && (vuType == TYPE_AIRPLANE || vuType == TYPE_HELICOPTER))  //JB 052701 (from MN)
; 622  : 		if((vuDomain == DOMAIN_AIR && vuClass == CLASS_VEHICLE && (vuType == TYPE_AIRPLANE) && (vuSType == STYPE_AIR_FIGHTER_BOMBER || vuSType == STYPE_AIR_FIGHTER)) // Removed Helicopters as threat (|| vuType == TYPE_HELICOPTER), added subtype check //JB 052701 (from MN)
; 623  : 			&& inSideATA && pobjectPtr->localData->threatTime <= 60.0F) {

	movsx	eax, BYTE PTR _vuDomain$[ebp]
	cmp	eax, 2
	jne	$LN5@AiCheckFor
	movsx	ecx, BYTE PTR _vuClass$[ebp]
	cmp	ecx, 7
	jne	$LN5@AiCheckFor
	movsx	edx, BYTE PTR _vuType$[ebp]
	cmp	edx, 1
	jne	$LN5@AiCheckFor
	movsx	eax, BYTE PTR _vuSType$[ebp]
	cmp	eax, 7
	je	SHORT $LN8@AiCheckFor
	movsx	ecx, BYTE PTR _vuSType$[ebp]
	cmp	ecx, 6
	jne	$LN5@AiCheckFor
$LN8@AiCheckFor:
	cmp	DWORD PTR _inSideATA$[ebp], 0
	je	SHORT $LN5@AiCheckFor
	mov	edx, DWORD PTR _pobjectPtr$[ebp]
	mov	eax, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR __real@42700000
	comiss	xmm0, DWORD PTR [eax+148]
	jb	SHORT $LN5@AiCheckFor

; 624  : 			if(pthreatPtr == NULL || pobjectPtr->localData->threatTime < pthreatPtr->localData->threatTime) {

	cmp	DWORD PTR _pthreatPtr$[ebp], 0
	je	SHORT $LN6@AiCheckFor
	mov	ecx, DWORD PTR _pobjectPtr$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _pthreatPtr$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	movss	xmm0, DWORD PTR [ecx+148]
	comiss	xmm0, DWORD PTR [edx+148]
	jbe	SHORT $LN5@AiCheckFor
$LN6@AiCheckFor:

; 625  : 				if(GetTTRelations(pobjectPtr->BaseData()->GetTeam(), paircraft->GetTeam()) >= Hostile) {

	mov	ecx, DWORD PTR _pobjectPtr$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv163[ebp], eax
	mov	edx, DWORD PTR _paircraft$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _paircraft$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR tv163[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv163[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	call	?GetTTRelations@@YAHEE@Z		; GetTTRelations
	add	esp, 8
	cmp	eax, 4
	jl	SHORT $LN5@AiCheckFor

; 626  : 					pthreatPtr = pobjectPtr;

	mov	edx, DWORD PTR _pobjectPtr$[ebp]
	mov	DWORD PTR _pthreatPtr$[ebp], edx
$LN5@AiCheckFor:

; 627  : 				}
; 628  : 			}
; 629  : 		}
; 630  : 
; 631  :       pobjectPtr = pobjectPtr->next;

	mov	eax, DWORD PTR _pobjectPtr$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _pobjectPtr$[ebp], ecx

; 632  : 	}

	jmp	$LN14@AiCheckFor
$LN13@AiCheckFor:

; 633  : 
; 634  : 	if(pthreatPtr) {

	cmp	DWORD PTR _pthreatPtr$[ebp], 0
	je	SHORT $LN4@AiCheckFor

; 635  : 		if(az) {

	cmp	DWORD PTR _az$[ebp], 0
	je	SHORT $LN3@AiCheckFor

; 636  : 			*az = pthreatPtr->localData->az;

	mov	edx, DWORD PTR _pthreatPtr$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _az$[ebp]
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx], edx
$LN3@AiCheckFor:

; 637  : 		}
; 638  : 		return pthreatPtr->BaseData()->Id();

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pthreatPtr$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN2@AiCheckFor

; 639  : 	}
; 640  : 	else {

	jmp	SHORT $LN2@AiCheckFor
$LN4@AiCheckFor:

; 641  : 		if(az) {

	cmp	DWORD PTR _az$[ebp], 0
	je	SHORT $LN1@AiCheckFor

; 642  : 			*az = 0.0F;

	mov	ecx, DWORD PTR _az$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx], xmm0
$LN1@AiCheckFor:

; 643  : 		}
; 644  : 		return FalconNullId;

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN2@AiCheckFor:

; 645  : 	}
; 646  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AiCheckForThreat@@YA?AVVU_ID@@PAVAircraftClass@@DHPAM@Z ENDP ; AiCheckForThreat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\wingorder.cpp
_TEXT	SEGMENT
$T2 = -212						; size = 8
$T3 = -204						; size = 8
$T4 = -196						; size = 4
$T5 = -192						; size = 4
$T6 = -188						; size = 4
$T7 = -184						; size = 4
$T8 = -180						; size = 4
$T9 = -176						; size = 4
$T10 = -172						; size = 4
$T11 = -168						; size = 4
$T12 = -164						; size = 4
$T13 = -160						; size = 4
$T14 = -156						; size = 4
$T15 = -152						; size = 4
$T16 = -148						; size = 4
$T17 = -144						; size = 4
$T18 = -140						; size = 4
$T19 = -136						; size = 4
$T20 = -132						; size = 4
$T21 = -128						; size = 4
$T22 = -124						; size = 4
tv677 = -120						; size = 4
$T23 = -116						; size = 4
_playerAC$ = -112					; size = 4
$T24 = -108						; size = 4
tv408 = -104						; size = 4
tv875 = -100						; size = 4
tv389 = -96						; size = 4
tv1106 = -92						; size = 4
tv286 = -88						; size = 4
$T25 = -84						; size = 4
tv267 = -80						; size = 4
tv1087 = -76						; size = 4
tv164 = -72						; size = 4
$T26 = -68						; size = 4
tv145 = -64						; size = 4
tv894 = -60						; size = 4
$T27 = -56						; size = 4
tv658 = -52						; size = 4
tv1189 = -48						; size = 4
tv568 = -44						; size = 4
tv128 = -40						; size = 4
tv78 = -36						; size = 4
_wingTgt$ = -32						; size = 4
_wingPlane$ = -28					; size = 4
_wingBrain$ = -24					; size = 4
_i$ = -20						; size = 4
_myBrain$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_command$ = 8						; size = 4
_extent$ = 12						; size = 4
_targetId$ = 16						; size = 8
?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z PROC		; AiSendPlayerCommand

; 47   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 200				; 000000c8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 48   : 	// 2002-01-29 ADDED BY S.G. Need them later on
; 49   : 	DigitalBrain *myBrain;
; 50   : 	DigitalBrain *wingBrain = NULL;

	mov	DWORD PTR _wingBrain$[ebp], 0

; 51   : 	FalconEntity *wingTgt = NULL;

	mov	DWORD PTR _wingTgt$[ebp], 0

; 52   : 	AircraftClass *wingPlane, *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 53   : 	int i;
; 54   : 
; 55   : 	// COBRA - RED - CTD if player is over...
; 56   : 	if (playerAC == NULL){

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN110@AiSendPlay

; 57   : 		return;

	jmp	$LN111@AiSendPlay
$LN110@AiSendPlay:

; 58   : 	}
; 59   : 	// sfr: we had a crash here
; 60   : 	if ((myBrain = static_cast<DigitalBrain*>(playerAC->Brain())) == NULL){

	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ ; SimVehicleClass::Brain
	mov	DWORD PTR _myBrain$[ebp], eax
	cmp	DWORD PTR _myBrain$[ebp], 0
	jne	SHORT $LN109@AiSendPlay

; 61   : 		return;

	jmp	$LN111@AiSendPlay
$LN109@AiSendPlay:

; 62   : 	}
; 63   : 
; 64   : 	switch (command){

	mov	eax, DWORD PTR _command$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	mov	ecx, DWORD PTR tv78[ebp]
	sub	ecx, 9
	mov	DWORD PTR tv78[ebp], ecx
	cmp	DWORD PTR tv78[ebp], 35			; 00000023H
	ja	$LN107@AiSendPlay
	mov	edx, DWORD PTR tv78[ebp]
	movzx	eax, BYTE PTR $LN149@AiSendPlay[edx]
	jmp	DWORD PTR $LN151@AiSendPlay[eax*4]

; 65   : 		case FalconWingmanMsg::WMSpread:
; 66   : 		case FalconWingmanMsg::WMWedge:
; 67   : 		case FalconWingmanMsg::WMTrail:
; 68   : 		case FalconWingmanMsg::WMLadder:
; 69   : 		case FalconWingmanMsg::WMStack:
; 70   : 		case FalconWingmanMsg::WMResCell:
; 71   : 		case FalconWingmanMsg::WMBox:
; 72   : 		case FalconWingmanMsg::WMArrowHead:
; 73   : 		case FalconWingmanMsg::WMFluidFour:
; 74   : 		case FalconWingmanMsg::WMVic:
; 75   : 		case FalconWingmanMsg::WMFinger4:
; 76   : 		case FalconWingmanMsg::WMEchelon:
; 77   : 		case FalconWingmanMsg::WMForm1:
; 78   : 		case FalconWingmanMsg::WMForm2:
; 79   : 		case FalconWingmanMsg::WMForm3:
; 80   : 		case FalconWingmanMsg::WMForm4:
; 81   : 		break;

	jmp	$LN107@AiSendPlay
$LN105@AiSendPlay:

; 82   : 
; 83   : 		case FalconWingmanMsg::WMPince:
; 84   : 		case FalconWingmanMsg::WMSSOffset:
; 85   : 		case FalconWingmanMsg::WMPosthole:
; 86   : 		case FalconWingmanMsg::WMChainsaw:
; 87   : 		case FalconWingmanMsg::WMAssignTarget:
; 88   : 		case FalconWingmanMsg::WMAssignGroup:
; 89   : 			if(targetId == FalconNullId) {

	push	OFFSET ?FalconNullId@@3VVU_ID@@A	; FalconNullId
	lea	ecx, DWORD PTR _targetId$[ebp]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN104@AiSendPlay

; 90   : 				targetId = AiDesignateTarget(SimDriver.GetPlayerAircraft());

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	call	?AiDesignateTarget@@YA?AVVU_ID@@PAVAircraftClass@@@Z ; AiDesignateTarget
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _targetId$[ebp], ecx
	mov	DWORD PTR _targetId$[ebp+4], edx
$LN104@AiSendPlay:

; 91   : 			}
; 92   : 			if(targetId == FalconNullId) {

	push	OFFSET ?FalconNullId@@3VVU_ID@@A	; FalconNullId
	lea	ecx, DWORD PTR _targetId$[ebp]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN103@AiSendPlay

; 93   : 				return;

	jmp	$LN111@AiSendPlay
$LN103@AiSendPlay:

; 94   : 			}
; 95   : 			// 2002-01-29 ADDED BY S.G. Now that we have a target, lets attach a camera to it so it stays deaggregated for a while...
; 96   : 			// We keep three targetSpot, one per command since we can direct our wing on something then or element on something else
; 97   : 			// AircraftClass::Exec do the actual update of the targetSpots
; 98   : 
; 99   : 			// If we have no timer count, act as if the player wants nothing to do with our little bubbles	
; 100  : 			if (!g_nTargetSpotTimeout){

	cmp	DWORD PTR ?g_nTargetSpotTimeout@@3HA, 0	; g_nTargetSpotTimeout
	jne	SHORT $LN102@AiSendPlay

; 101  : 				break;

	jmp	$LN107@AiSendPlay
$LN102@AiSendPlay:

; 102  : 			}
; 103  : 
; 104  : 			// RED - PASSED UP
; 105  : 			// For short hand, get a pointer to my brain 
; 106  : 			//myBrain = (DigitalBrain *)(SimDriver.GetPlayerEntity()->Brain());
; 107  : 			switch (extent) {

	mov	ecx, DWORD PTR _extent$[ebp]
	mov	DWORD PTR tv128[ebp], ecx
	cmp	DWORD PTR tv128[ebp], 0
	je	SHORT $LN99@AiSendPlay
	cmp	DWORD PTR tv128[ebp], 1
	je	$LN91@AiSendPlay
	cmp	DWORD PTR tv128[ebp], 2
	je	$LN83@AiSendPlay
	jmp	$LN100@AiSendPlay
$LN99@AiSendPlay:

; 108  : 				case AiWingman:
; 109  : 					// First lets create one if not done already
; 110  : 					if (!myBrain->targetSpotWing) {

	mov	edx, DWORD PTR _myBrain$[ebp]
	cmp	DWORD PTR [edx+916], 0
	jne	$LN98@AiSendPlay

; 111  : 						myBrain->targetSpotWing = new SpotEntity(F4FlyingEyeType+VU_LAST_ENTITY_TYPE);

	push	144					; 00000090H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T24[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T24[ebp], 0
	je	SHORT $LN113@AiSendPlay
	mov	eax, DWORD PTR ?F4FlyingEyeType@@3HA	; F4FlyingEyeType
	add	eax, 100				; 00000064H
	push	eax
	mov	ecx, DWORD PTR $T24[ebp]
	call	??0SpotEntity@@QAE@G@Z			; SpotEntity::SpotEntity
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN114@AiSendPlay
$LN113@AiSendPlay:
	mov	DWORD PTR tv145[ebp], 0
$LN114@AiSendPlay:
	mov	ecx, DWORD PTR tv145[ebp]
	mov	DWORD PTR $T15[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _myBrain$[ebp]
	mov	eax, DWORD PTR $T15[ebp]
	mov	DWORD PTR [edx+916], eax

; 112  : 						vuDatabase->/*Quick*/Insert(myBrain->targetSpotWing);

	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	edx, DWORD PTR [ecx+916]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z	; VuDatabase::Insert

; 113  : 						myBrain->targetSpotWing->SetDriver(new SpotDriver(myBrain->targetSpotWing));

	push	116					; 00000074H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T23[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T23[ebp], 0
	je	SHORT $LN115@AiSendPlay
	mov	eax, DWORD PTR _myBrain$[ebp]
	mov	ecx, DWORD PTR [eax+916]
	push	ecx
	mov	ecx, DWORD PTR $T23[ebp]
	call	??0SpotDriver@@QAE@PAVVuEntity@@@Z	; SpotDriver::SpotDriver
	mov	DWORD PTR tv164[ebp], eax
	jmp	SHORT $LN116@AiSendPlay
$LN115@AiSendPlay:
	mov	DWORD PTR tv164[ebp], 0
$LN116@AiSendPlay:
	mov	edx, DWORD PTR tv164[ebp]
	mov	DWORD PTR $T13[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T13[ebp]
	push	eax
	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	ecx, DWORD PTR [ecx+916]
	call	?SetDriver@VuEntity@@QAEPAVVuDriver@@PAV2@@Z ; VuEntity::SetDriver

; 114  : 					}
; 115  : 					else {

	jmp	SHORT $LN97@AiSendPlay
$LN98@AiSendPlay:

; 116  : 						// Kill the current camera
; 117  : 						// sfr: cleanup camera mess
; 118  : 						FalconLocalSession->RemoveCamera(myBrain->targetSpotWing);

	push	0
	mov	edx, DWORD PTR _myBrain$[ebp]
	mov	eax, DWORD PTR [edx+916]
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?RemoveCamera@VuSessionEntity@@QAEHPAVVuEntity@@_N@Z ; VuSessionEntity::RemoveCamera
$LN97@AiSendPlay:

; 119  : 						//for (i = 0; i < FalconLocalSession->CameraCount(); i++) {
; 120  : 						//	if (FalconLocalSession->GetCameraEntity(i) == myBrain->targetSpotWing) {
; 121  : 						//		FalconLocalSession->RemoveCamera(myBrain->targetSpotWing);
; 122  : 						//		break;
; 123  : 						//	}
; 124  : 						//}
; 125  : 					}
; 126  : 
; 127  : 					// Now init for our new target
; 128  : 					myBrain->targetSpotWingTarget = (FalconEntity*) vuDatabase->Find(targetId);

	mov	ecx, DWORD PTR _targetId$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _targetId$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	DWORD PTR [ecx+928], eax

; 129  : 					myBrain->targetSpotWingTimer = SimLibElapsedTime + g_nTargetSpotTimeout;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, DWORD PTR ?g_nTargetSpotTimeout@@3HA ; g_nTargetSpotTimeout
	mov	eax, DWORD PTR _myBrain$[ebp]
	mov	DWORD PTR [eax+940], edx

; 130  : 					VuReferenceEntity(myBrain->targetSpotWingTarget);

	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	edx, DWORD PTR [ecx+928]
	push	edx
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4

; 131  : 
; 132  : 					// Attach a camera to our target spot
; 133  : 					for (i = 0; i < FalconLocalSession->CameraCount(); i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN96@AiSendPlay
$LN95@AiSendPlay:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN96@AiSendPlay:
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?CameraCount@VuSessionEntity@@QBEHXZ	; VuSessionEntity::CameraCount
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN94@AiSendPlay

; 134  : 						if (FalconLocalSession->GetCameraEntity(i) == myBrain->targetSpotWing){

	movzx	ecx, BYTE PTR _i$[ebp]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetCameraEntity@VuSessionEntity@@QBEPAVVuEntity@@E@Z ; VuSessionEntity::GetCameraEntity
	mov	edx, DWORD PTR _myBrain$[ebp]
	cmp	eax, DWORD PTR [edx+916]
	jne	SHORT $LN93@AiSendPlay

; 135  : 							break;

	jmp	SHORT $LN94@AiSendPlay
$LN93@AiSendPlay:

; 136  : 						}
; 137  : 					}

	jmp	SHORT $LN95@AiSendPlay
$LN94@AiSendPlay:

; 138  : 					if (i == FalconLocalSession->CameraCount()){

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?CameraCount@VuSessionEntity@@QBEHXZ	; VuSessionEntity::CameraCount
	cmp	DWORD PTR _i$[ebp], eax
	jne	SHORT $LN92@AiSendPlay

; 139  : 						FalconLocalSession->AttachCamera(myBrain->targetSpotWing);

	push	0
	mov	eax, DWORD PTR _myBrain$[ebp]
	mov	ecx, DWORD PTR [eax+916]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?AttachCamera@VuSessionEntity@@QAEHPAVVuEntity@@_N@Z ; VuSessionEntity::AttachCamera
$LN92@AiSendPlay:

; 140  : 					}
; 141  : 				break;

	jmp	$LN100@AiSendPlay
$LN91@AiSendPlay:

; 142  : 				case AiElement:
; 143  : 					// First lets create one if not done already
; 144  : 					if (!myBrain->targetSpotElement) {

	mov	edx, DWORD PTR _myBrain$[ebp]
	cmp	DWORD PTR [edx+920], 0
	jne	$LN90@AiSendPlay

; 145  : 						myBrain->targetSpotElement = new SpotEntity (F4FlyingEyeType+VU_LAST_ENTITY_TYPE);

	push	144					; 00000090H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T22[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T22[ebp], 0
	je	SHORT $LN117@AiSendPlay
	mov	eax, DWORD PTR ?F4FlyingEyeType@@3HA	; F4FlyingEyeType
	add	eax, 100				; 00000064H
	push	eax
	mov	ecx, DWORD PTR $T22[ebp]
	call	??0SpotEntity@@QAE@G@Z			; SpotEntity::SpotEntity
	mov	DWORD PTR tv267[ebp], eax
	jmp	SHORT $LN118@AiSendPlay
$LN117@AiSendPlay:
	mov	DWORD PTR tv267[ebp], 0
$LN118@AiSendPlay:
	mov	ecx, DWORD PTR tv267[ebp]
	mov	DWORD PTR $T7[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _myBrain$[ebp]
	mov	eax, DWORD PTR $T7[ebp]
	mov	DWORD PTR [edx+920], eax

; 146  : 						vuDatabase->/*Quick*/Insert(myBrain->targetSpotElement);

	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	edx, DWORD PTR [ecx+920]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z	; VuDatabase::Insert

; 147  : 						myBrain->targetSpotElement->SetDriver (new SpotDriver (myBrain->targetSpotElement));

	push	116					; 00000074H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T20[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T20[ebp], 0
	je	SHORT $LN119@AiSendPlay
	mov	eax, DWORD PTR _myBrain$[ebp]
	mov	ecx, DWORD PTR [eax+920]
	push	ecx
	mov	ecx, DWORD PTR $T20[ebp]
	call	??0SpotDriver@@QAE@PAVVuEntity@@@Z	; SpotDriver::SpotDriver
	mov	DWORD PTR tv286[ebp], eax
	jmp	SHORT $LN120@AiSendPlay
$LN119@AiSendPlay:
	mov	DWORD PTR tv286[ebp], 0
$LN120@AiSendPlay:
	mov	edx, DWORD PTR tv286[ebp]
	mov	DWORD PTR $T11[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T11[ebp]
	push	eax
	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	ecx, DWORD PTR [ecx+920]
	call	?SetDriver@VuEntity@@QAEPAVVuDriver@@PAV2@@Z ; VuEntity::SetDriver

; 148  : 					}
; 149  : 					else {

	jmp	SHORT $LN89@AiSendPlay
$LN90@AiSendPlay:

; 150  : 						// Kill the current camera
; 151  : 						// sfr: cleanup camera mess
; 152  : 						FalconLocalSession->RemoveCamera(myBrain->targetSpotElement);

	push	0
	mov	edx, DWORD PTR _myBrain$[ebp]
	mov	eax, DWORD PTR [edx+920]
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?RemoveCamera@VuSessionEntity@@QAEHPAVVuEntity@@_N@Z ; VuSessionEntity::RemoveCamera
$LN89@AiSendPlay:

; 153  : 						//for (i = 0; i < FalconLocalSession->CameraCount(); i++) {
; 154  : 						//	if (FalconLocalSession->GetCameraEntity(i) == myBrain->targetSpotElement) {
; 155  : 						//		FalconLocalSession->RemoveCamera(myBrain->targetSpotElement);
; 156  : 						//		break;
; 157  : 						//	}
; 158  : 						//}
; 159  : 					}
; 160  : 
; 161  : 					// Now init for our new target
; 162  : 					myBrain->targetSpotElementTarget = (FalconEntity*) vuDatabase->Find(targetId);

	mov	ecx, DWORD PTR _targetId$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _targetId$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	DWORD PTR [ecx+932], eax

; 163  : 					myBrain->targetSpotElementTimer = SimLibElapsedTime + g_nTargetSpotTimeout;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, DWORD PTR ?g_nTargetSpotTimeout@@3HA ; g_nTargetSpotTimeout
	mov	eax, DWORD PTR _myBrain$[ebp]
	mov	DWORD PTR [eax+944], edx

; 164  : 					VuReferenceEntity(myBrain->targetSpotElementTarget);

	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	push	edx
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4

; 165  : 
; 166  : 					// Attach a camera to our target spot
; 167  : 					for (i = 0; i < FalconLocalSession->CameraCount(); i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN88@AiSendPlay
$LN87@AiSendPlay:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN88@AiSendPlay:
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?CameraCount@VuSessionEntity@@QBEHXZ	; VuSessionEntity::CameraCount
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN86@AiSendPlay

; 168  : 						if (FalconLocalSession->GetCameraEntity(i) == myBrain->targetSpotElement){

	movzx	ecx, BYTE PTR _i$[ebp]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetCameraEntity@VuSessionEntity@@QBEPAVVuEntity@@E@Z ; VuSessionEntity::GetCameraEntity
	mov	edx, DWORD PTR _myBrain$[ebp]
	cmp	eax, DWORD PTR [edx+920]
	jne	SHORT $LN85@AiSendPlay

; 169  : 							break;

	jmp	SHORT $LN86@AiSendPlay
$LN85@AiSendPlay:

; 170  : 						}
; 171  : 					}

	jmp	SHORT $LN87@AiSendPlay
$LN86@AiSendPlay:

; 172  : 					if (i == FalconLocalSession->CameraCount()){

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?CameraCount@VuSessionEntity@@QBEHXZ	; VuSessionEntity::CameraCount
	cmp	DWORD PTR _i$[ebp], eax
	jne	SHORT $LN84@AiSendPlay

; 173  : 						FalconLocalSession->AttachCamera(myBrain->targetSpotElement);

	push	0
	mov	eax, DWORD PTR _myBrain$[ebp]
	mov	ecx, DWORD PTR [eax+920]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?AttachCamera@VuSessionEntity@@QAEHPAVVuEntity@@_N@Z ; VuSessionEntity::AttachCamera
$LN84@AiSendPlay:

; 174  : 					}
; 175  : 				break;

	jmp	$LN100@AiSendPlay
$LN83@AiSendPlay:

; 176  : 				case AiFlight:
; 177  : 					// First lets create one if not done already
; 178  : 					if (!myBrain->targetSpotFlight) {

	mov	edx, DWORD PTR _myBrain$[ebp]
	cmp	DWORD PTR [edx+924], 0
	jne	$LN82@AiSendPlay

; 179  : 						myBrain->targetSpotFlight = new SpotEntity (F4FlyingEyeType+VU_LAST_ENTITY_TYPE);

	push	144					; 00000090H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T18[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T18[ebp], 0
	je	SHORT $LN121@AiSendPlay
	mov	eax, DWORD PTR ?F4FlyingEyeType@@3HA	; F4FlyingEyeType
	add	eax, 100				; 00000064H
	push	eax
	mov	ecx, DWORD PTR $T18[ebp]
	call	??0SpotEntity@@QAE@G@Z			; SpotEntity::SpotEntity
	mov	DWORD PTR tv389[ebp], eax
	jmp	SHORT $LN122@AiSendPlay
$LN121@AiSendPlay:
	mov	DWORD PTR tv389[ebp], 0
$LN122@AiSendPlay:
	mov	ecx, DWORD PTR tv389[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _myBrain$[ebp]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx+924], eax

; 180  : 						vuDatabase->/*Quick*/Insert(myBrain->targetSpotFlight);

	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	edx, DWORD PTR [ecx+924]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z	; VuDatabase::Insert

; 181  : 						myBrain->targetSpotFlight->SetDriver (new SpotDriver (myBrain->targetSpotFlight));

	push	116					; 00000074H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T16[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T16[ebp], 0
	je	SHORT $LN123@AiSendPlay
	mov	eax, DWORD PTR _myBrain$[ebp]
	mov	ecx, DWORD PTR [eax+924]
	push	ecx
	mov	ecx, DWORD PTR $T16[ebp]
	call	??0SpotDriver@@QAE@PAVVuEntity@@@Z	; SpotDriver::SpotDriver
	mov	DWORD PTR tv408[ebp], eax
	jmp	SHORT $LN124@AiSendPlay
$LN123@AiSendPlay:
	mov	DWORD PTR tv408[ebp], 0
$LN124@AiSendPlay:
	mov	edx, DWORD PTR tv408[ebp]
	mov	DWORD PTR $T9[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	ecx, DWORD PTR [ecx+924]
	call	?SetDriver@VuEntity@@QAEPAVVuDriver@@PAV2@@Z ; VuEntity::SetDriver

; 182  : 					}
; 183  : 					else {

	jmp	SHORT $LN81@AiSendPlay
$LN82@AiSendPlay:

; 184  : 						// Kill the current camera
; 185  : 						// sfr: cleanup camera mess
; 186  : 						FalconLocalSession->RemoveCamera(myBrain->targetSpotFlight);

	push	0
	mov	edx, DWORD PTR _myBrain$[ebp]
	mov	eax, DWORD PTR [edx+924]
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?RemoveCamera@VuSessionEntity@@QAEHPAVVuEntity@@_N@Z ; VuSessionEntity::RemoveCamera
$LN81@AiSendPlay:

; 187  : 						//for (i = 0; i < FalconLocalSession->CameraCount(); i++) {
; 188  : 						//	if (FalconLocalSession->GetCameraEntity(i) == myBrain->targetSpotFlight) {
; 189  : 						//		FalconLocalSession->RemoveCamera(myBrain->targetSpotFlight);
; 190  : 						//		break;
; 191  : 						//	}
; 192  : 						//}
; 193  : 					}
; 194  : 
; 195  : 					// Now init for our new target
; 196  : 					myBrain->targetSpotFlightTarget = (FalconEntity*) vuDatabase->Find(targetId);

	mov	ecx, DWORD PTR _targetId$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _targetId$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	DWORD PTR [ecx+936], eax

; 197  : 					myBrain->targetSpotFlightTimer = SimLibElapsedTime + g_nTargetSpotTimeout;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, DWORD PTR ?g_nTargetSpotTimeout@@3HA ; g_nTargetSpotTimeout
	mov	eax, DWORD PTR _myBrain$[ebp]
	mov	DWORD PTR [eax+948], edx

; 198  : 					VuReferenceEntity(myBrain->targetSpotFlightTarget);

	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	edx, DWORD PTR [ecx+936]
	push	edx
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4

; 199  : 
; 200  : 					// Attach a camera to our target spot
; 201  : 					for (i = 0; i < FalconLocalSession->CameraCount(); i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN80@AiSendPlay
$LN79@AiSendPlay:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN80@AiSendPlay:
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?CameraCount@VuSessionEntity@@QBEHXZ	; VuSessionEntity::CameraCount
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN78@AiSendPlay

; 202  : 						if (FalconLocalSession->GetCameraEntity(i) == myBrain->targetSpotFlight){

	movzx	ecx, BYTE PTR _i$[ebp]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetCameraEntity@VuSessionEntity@@QBEPAVVuEntity@@E@Z ; VuSessionEntity::GetCameraEntity
	mov	edx, DWORD PTR _myBrain$[ebp]
	cmp	eax, DWORD PTR [edx+924]
	jne	SHORT $LN77@AiSendPlay

; 203  : 							break;

	jmp	SHORT $LN78@AiSendPlay
$LN77@AiSendPlay:

; 204  : 						}
; 205  : 					}

	jmp	SHORT $LN79@AiSendPlay
$LN78@AiSendPlay:

; 206  : 					if (i == FalconLocalSession->CameraCount()){

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?CameraCount@VuSessionEntity@@QBEHXZ	; VuSessionEntity::CameraCount
	cmp	DWORD PTR _i$[ebp], eax
	jne	SHORT $LN76@AiSendPlay

; 207  : 						FalconLocalSession->AttachCamera(myBrain->targetSpotFlight);

	push	0
	mov	eax, DWORD PTR _myBrain$[ebp]
	mov	ecx, DWORD PTR [eax+924]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?AttachCamera@VuSessionEntity@@QAEHPAVVuEntity@@_N@Z ; VuSessionEntity::AttachCamera
$LN76@AiSendPlay:

; 208  : 					}
; 209  : 
; 210  : 					// A flight command overides other so kill their myBrain->targetSpots and associated
; 211  : 					if (myBrain->targetSpotElement) {

	mov	edx, DWORD PTR _myBrain$[ebp]
	cmp	DWORD PTR [edx+920], 0
	je	SHORT $LN75@AiSendPlay

; 212  : 						// Kill the camera and clear out everything associated with this myBrain->targetSpot
; 213  : 						// sfr: cleanup camera mess
; 214  : 						FalconLocalSession->RemoveCamera(myBrain->targetSpotElement);

	push	0
	mov	eax, DWORD PTR _myBrain$[ebp]
	mov	ecx, DWORD PTR [eax+920]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?RemoveCamera@VuSessionEntity@@QAEHPAVVuEntity@@_N@Z ; VuSessionEntity::RemoveCamera

; 215  : 						//for (i = 0; i < FalconLocalSession->CameraCount(); i++) {
; 216  : 						//	if (FalconLocalSession->GetCameraEntity(i) == myBrain->targetSpotElement) {
; 217  : 						//		FalconLocalSession->RemoveCamera(myBrain->targetSpotElement);
; 218  : 						//		break;
; 219  : 						//	}
; 220  : 						//}
; 221  : 						vuDatabase->Remove (myBrain->targetSpotElement); // Takes care of deleting the allocated memory and the driver allocation as well.

	mov	edx, DWORD PTR _myBrain$[ebp]
	mov	eax, DWORD PTR [edx+920]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Remove@VuDatabase@@QAEHPAVVuEntity@@@Z	; VuDatabase::Remove

; 222  : 						if (myBrain->targetSpotElementTarget){

	mov	ecx, DWORD PTR _myBrain$[ebp]
	cmp	DWORD PTR [ecx+932], 0
	je	SHORT $LN74@AiSendPlay

; 223  : 							// 2002-03-07 ADDED BY S.G. In case it's NULL. Shouldn't happen but happened
; 224  : 							VuDeReferenceEntity(myBrain->targetSpotElementTarget);

	mov	edx, DWORD PTR _myBrain$[ebp]
	mov	eax, DWORD PTR [edx+932]
	push	eax
	call	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z ; VuDeReferenceEntity
	add	esp, 4
$LN74@AiSendPlay:

; 225  : 						}
; 226  : 						myBrain->targetSpotElement = NULL;

	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	DWORD PTR [ecx+920], 0

; 227  : 						myBrain->targetSpotElementTarget = NULL;

	mov	edx, DWORD PTR _myBrain$[ebp]
	mov	DWORD PTR [edx+932], 0

; 228  : 						myBrain->targetSpotElementTimer = 0;

	mov	eax, DWORD PTR _myBrain$[ebp]
	mov	DWORD PTR [eax+944], 0
$LN75@AiSendPlay:

; 229  : 					}
; 230  : 					if (myBrain->targetSpotWing) {

	mov	ecx, DWORD PTR _myBrain$[ebp]
	cmp	DWORD PTR [ecx+916], 0
	je	SHORT $LN100@AiSendPlay

; 231  : 						// sfr: cleanup camera mess
; 232  : 						FalconLocalSession->RemoveCamera(myBrain->targetSpotWing);

	push	0
	mov	edx, DWORD PTR _myBrain$[ebp]
	mov	eax, DWORD PTR [edx+916]
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?RemoveCamera@VuSessionEntity@@QAEHPAVVuEntity@@_N@Z ; VuSessionEntity::RemoveCamera

; 233  : 						// Kill the camera and clear out everything associated with this myBrain->targetSpot
; 234  : 						//for (i = 0; i < FalconLocalSession->CameraCount(); i++) {
; 235  : 						//	if (FalconLocalSession->GetCameraEntity(i) == myBrain->targetSpotWing) {
; 236  : 						//		FalconLocalSession->RemoveCamera(myBrain->targetSpotWing);
; 237  : 						//		break;
; 238  : 						//	}
; 239  : 						//}
; 240  : 						vuDatabase->Remove (myBrain->targetSpotWing); // Takes care of deleting the allocated memory and the driver allocation as well.

	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	edx, DWORD PTR [ecx+916]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Remove@VuDatabase@@QAEHPAVVuEntity@@@Z	; VuDatabase::Remove

; 241  : 						if (myBrain->targetSpotWingTarget) // 2002-03-07 ADDED BY S.G. In case it's NULL. Shouldn't happen but happened

	mov	eax, DWORD PTR _myBrain$[ebp]
	cmp	DWORD PTR [eax+928], 0
	je	SHORT $LN72@AiSendPlay

; 242  : 							VuDeReferenceEntity(myBrain->targetSpotWingTarget);

	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	edx, DWORD PTR [ecx+928]
	push	edx
	call	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z ; VuDeReferenceEntity
	add	esp, 4
$LN72@AiSendPlay:

; 243  : 						myBrain->targetSpotWing = NULL;

	mov	eax, DWORD PTR _myBrain$[ebp]
	mov	DWORD PTR [eax+916], 0

; 244  : 						myBrain->targetSpotWingTarget = NULL;

	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	DWORD PTR [ecx+928], 0

; 245  : 						myBrain->targetSpotWingTimer = 0;

	mov	edx, DWORD PTR _myBrain$[ebp]
	mov	DWORD PTR [edx+940], 0
$LN100@AiSendPlay:

; 246  : 					}
; 247  : 			}
; 248  : 		break;

	jmp	$LN107@AiSendPlay
$LN71@AiSendPlay:

; 249  : 		case FalconWingmanMsg::WMClearSix:
; 250  : 			targetId	= AiCheckForThreat(SimDriver.GetPlayerAircraft(), DOMAIN_AIR, 1);

	push	0
	push	1
	push	2
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	?AiCheckForThreat@@YA?AVVU_ID@@PAVAircraftClass@@DHPAM@Z ; AiCheckForThreat
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _targetId$[ebp], ecx
	mov	DWORD PTR _targetId$[ebp+4], edx

; 251  : 		break;

	jmp	$LN107@AiSendPlay

; 252  : 	
; 253  : 		case FalconWingmanMsg::WMCheckSix:
; 254  : 		case FalconWingmanMsg::WMShooterMode:
; 255  : 		case FalconWingmanMsg::WMCoverMode:
; 256  : 		case FalconWingmanMsg::WMWeaponsHold:
; 257  : 		break;

	jmp	$LN107@AiSendPlay
$LN69@AiSendPlay:

; 258  : 		
; 259  : 		// 2002-02-08 ADDED BY S.G. "Weapon Free" creates target bubble as well
; 260  : 	case FalconWingmanMsg::WMWeaponsFree:
; 261  : 		  // If we have no timer count, act as if the player wants nothing to do with our little bubbles	
; 262  : 		  if (!g_nTargetSpotTimeout){

	cmp	DWORD PTR ?g_nTargetSpotTimeout@@3HA, 0	; g_nTargetSpotTimeout
	jne	SHORT $LN68@AiSendPlay

; 263  : 			  break;

	jmp	$LN107@AiSendPlay
$LN68@AiSendPlay:

; 264  : 			}
; 265  : 
; 266  : 		  // RED - PASSED UP
; 267  : 		  // For short hand, get a pointer to my brain
; 268  : 		  //myBrain = (DigitalBrain *)(SimDriver.GetPlayerEntity()->Brain());
; 269  : 
; 270  : 		  // First we will attach a bubble on the target of who we are controlling
; 271  : 		  switch (extent) {

	mov	eax, DWORD PTR _extent$[ebp]
	mov	DWORD PTR tv568[ebp], eax
	cmp	DWORD PTR tv568[ebp], 0
	je	SHORT $LN65@AiSendPlay
	cmp	DWORD PTR tv568[ebp], 1
	je	$LN49@AiSendPlay
	cmp	DWORD PTR tv568[ebp], 2
	je	$LN30@AiSendPlay
	jmp	$LN66@AiSendPlay
$LN65@AiSendPlay:

; 272  : 			  case AiWingman:
; 273  : 				  // If we already have a camera, don't break it by a weapon free command
; 274  : 				  if (myBrain->targetSpotWing)

	mov	ecx, DWORD PTR _myBrain$[ebp]
	cmp	DWORD PTR [ecx+916], 0
	je	SHORT $LN64@AiSendPlay

; 275  : 					  break;

	jmp	$LN66@AiSendPlay
$LN64@AiSendPlay:

; 276  : 
; 277  : 				  // Get the brain of the corresponding wing AI, depending if we're the flight lead or element lead
; 278  : 				  if (myBrain->isWing == AiFlightLead)

	mov	edx, DWORD PTR _myBrain$[ebp]
	cmp	DWORD PTR [edx+24], 0
	jne	SHORT $LN63@AiSendPlay

; 279  : 					  wingPlane = ((AircraftClass *)SimDriver.GetPlayerEntity()->GetCampaignObject()->GetComponentNumber(1));

	push	1
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _wingPlane$[ebp], eax

; 280  : 				  else

	jmp	SHORT $LN62@AiSendPlay
$LN63@AiSendPlay:

; 281  : 					  wingPlane = ((AircraftClass *)SimDriver.GetPlayerEntity()->GetCampaignObject()->GetComponentNumber(3));

	push	3
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _wingPlane$[ebp], eax
$LN62@AiSendPlay:

; 282  : 
; 283  : 				  // Our wing is not brain dead ;-)
; 284  : 				  if (wingPlane && !wingPlane->IsDead())

	cmp	DWORD PTR _wingPlane$[ebp], 0
	je	SHORT $LN61@AiSendPlay
	mov	eax, DWORD PTR _wingPlane$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _wingPlane$[ebp]
	mov	eax, DWORD PTR [edx+340]
	call	eax
	test	eax, eax
	jne	SHORT $LN61@AiSendPlay

; 285  : 					  wingBrain = wingPlane->DBrain();

	mov	ecx, DWORD PTR _wingPlane$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	DWORD PTR _wingBrain$[ebp], eax
$LN61@AiSendPlay:

; 286  : 
; 287  : 				  // If our wing has a brain and a that brain has a target (priority to ground target)
; 288  : 				  if (wingBrain && wingBrain->GetGroundTarget())

	cmp	DWORD PTR _wingBrain$[ebp], 0
	je	SHORT $LN60@AiSendPlay
	mov	ecx, DWORD PTR _wingBrain$[ebp]
	call	?GetGroundTarget@DigitalBrain@@QAEPAVSimObjectType@@XZ ; DigitalBrain::GetGroundTarget
	test	eax, eax
	je	SHORT $LN60@AiSendPlay

; 289  : 					  wingTgt = wingBrain->GetGroundTarget()->BaseData();

	mov	ecx, DWORD PTR _wingBrain$[ebp]
	call	?GetGroundTarget@DigitalBrain@@QAEPAVSimObjectType@@XZ ; DigitalBrain::GetGroundTarget
	mov	ecx, eax
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR _wingTgt$[ebp], eax
	jmp	SHORT $LN59@AiSendPlay
$LN60@AiSendPlay:

; 290  : 				  else if (wingBrain && wingBrain->targetPtr)

	cmp	DWORD PTR _wingBrain$[ebp], 0
	je	SHORT $LN59@AiSendPlay
	mov	ecx, DWORD PTR _wingBrain$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN59@AiSendPlay

; 291  : 					  wingTgt = wingBrain->targetPtr->BaseData();

	mov	edx, DWORD PTR _wingBrain$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR _wingTgt$[ebp], eax
$LN59@AiSendPlay:

; 292  : 
; 293  : 				  // After all this, if we have a target, assign a 'bubble' around it
; 294  : 				  if (wingTgt) {

	cmp	DWORD PTR _wingTgt$[ebp], 0
	je	$LN57@AiSendPlay

; 295  : 					// First lets create one if not done already
; 296  : 					if (!myBrain->targetSpotWing) {

	mov	eax, DWORD PTR _myBrain$[ebp]
	cmp	DWORD PTR [eax+916], 0
	jne	$LN56@AiSendPlay

; 297  : 						myBrain->targetSpotWing = new SpotEntity (F4FlyingEyeType+VU_LAST_ENTITY_TYPE);

	push	144					; 00000090H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T21[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 6
	cmp	DWORD PTR $T21[ebp], 0
	je	SHORT $LN125@AiSendPlay
	mov	ecx, DWORD PTR ?F4FlyingEyeType@@3HA	; F4FlyingEyeType
	add	ecx, 100				; 00000064H
	push	ecx
	mov	ecx, DWORD PTR $T21[ebp]
	call	??0SpotEntity@@QAE@G@Z			; SpotEntity::SpotEntity
	mov	DWORD PTR tv658[ebp], eax
	jmp	SHORT $LN126@AiSendPlay
$LN125@AiSendPlay:
	mov	DWORD PTR tv658[ebp], 0
$LN126@AiSendPlay:
	mov	edx, DWORD PTR tv658[ebp]
	mov	DWORD PTR $T5[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _myBrain$[ebp]
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR [eax+916], ecx

; 298  : 						vuDatabase->/*Quick*/Insert(myBrain->targetSpotWing);

	mov	edx, DWORD PTR _myBrain$[ebp]
	mov	eax, DWORD PTR [edx+916]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z	; VuDatabase::Insert

; 299  : 						myBrain->targetSpotWing->SetDriver (new SpotDriver (myBrain->targetSpotWing));

	push	116					; 00000074H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	cmp	DWORD PTR $T17[ebp], 0
	je	SHORT $LN127@AiSendPlay
	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	edx, DWORD PTR [ecx+916]
	push	edx
	mov	ecx, DWORD PTR $T17[ebp]
	call	??0SpotDriver@@QAE@PAVVuEntity@@@Z	; SpotDriver::SpotDriver
	mov	DWORD PTR tv677[ebp], eax
	jmp	SHORT $LN128@AiSendPlay
$LN127@AiSendPlay:
	mov	DWORD PTR tv677[ebp], 0
$LN128@AiSendPlay:
	mov	eax, DWORD PTR tv677[ebp]
	mov	DWORD PTR $T14[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T14[ebp]
	push	ecx
	mov	edx, DWORD PTR _myBrain$[ebp]
	mov	ecx, DWORD PTR [edx+916]
	call	?SetDriver@VuEntity@@QAEPAVVuDriver@@PAV2@@Z ; VuEntity::SetDriver

; 300  : 					}
; 301  : 					else {

	jmp	SHORT $LN55@AiSendPlay
$LN56@AiSendPlay:

; 302  : 						// Kill the current camera
; 303  : 						// sfr: cleanup camera mess
; 304  : 						FalconLocalSession->RemoveCamera(myBrain->targetSpotWing);

	push	0
	mov	eax, DWORD PTR _myBrain$[ebp]
	mov	ecx, DWORD PTR [eax+916]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?RemoveCamera@VuSessionEntity@@QAEHPAVVuEntity@@_N@Z ; VuSessionEntity::RemoveCamera
$LN55@AiSendPlay:

; 305  : 						//for (i = 1; i < FalconLocalSession->CameraCount(); i++) {
; 306  : 						//	if (FalconLocalSession->GetCameraEntity(i) == myBrain->targetSpotWing) {
; 307  : 						//		FalconLocalSession->RemoveCamera(myBrain->targetSpotWing);
; 308  : 						//		break;
; 309  : 						//	}
; 310  : 						//}
; 311  : 					}
; 312  : 
; 313  : 					// Now init for our new target
; 314  : 					myBrain->targetSpotWingTarget = (FalconEntity*) wingTgt;

	mov	edx, DWORD PTR _myBrain$[ebp]
	mov	eax, DWORD PTR _wingTgt$[ebp]
	mov	DWORD PTR [edx+928], eax

; 315  : 					myBrain->targetSpotWingTimer = SimLibElapsedTime + g_nTargetSpotTimeout;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, DWORD PTR ?g_nTargetSpotTimeout@@3HA ; g_nTargetSpotTimeout
	mov	edx, DWORD PTR _myBrain$[ebp]
	mov	DWORD PTR [edx+940], ecx

; 316  : 					VuReferenceEntity(myBrain->targetSpotWingTarget);

	mov	eax, DWORD PTR _myBrain$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	push	ecx
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4

; 317  : 
; 318  : 					// Attach a camera to our target spot
; 319  : 					for (i = 0; i < FalconLocalSession->CameraCount(); i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN54@AiSendPlay
$LN53@AiSendPlay:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN54@AiSendPlay:
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?CameraCount@VuSessionEntity@@QBEHXZ	; VuSessionEntity::CameraCount
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN52@AiSendPlay

; 320  : 						if (FalconLocalSession->GetCameraEntity(i) == myBrain->targetSpotWing){

	movzx	eax, BYTE PTR _i$[ebp]
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetCameraEntity@VuSessionEntity@@QBEPAVVuEntity@@E@Z ; VuSessionEntity::GetCameraEntity
	mov	ecx, DWORD PTR _myBrain$[ebp]
	cmp	eax, DWORD PTR [ecx+916]
	jne	SHORT $LN51@AiSendPlay

; 321  : 							break;

	jmp	SHORT $LN52@AiSendPlay
$LN51@AiSendPlay:

; 322  : 						}
; 323  : 					}

	jmp	SHORT $LN53@AiSendPlay
$LN52@AiSendPlay:

; 324  : 					if (i == FalconLocalSession->CameraCount()){

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?CameraCount@VuSessionEntity@@QBEHXZ	; VuSessionEntity::CameraCount
	cmp	DWORD PTR _i$[ebp], eax
	jne	SHORT $LN57@AiSendPlay

; 325  : 						FalconLocalSession->AttachCamera(myBrain->targetSpotWing);

	push	0
	mov	edx, DWORD PTR _myBrain$[ebp]
	mov	eax, DWORD PTR [edx+916]
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?AttachCamera@VuSessionEntity@@QAEHPAVVuEntity@@_N@Z ; VuSessionEntity::AttachCamera
$LN57@AiSendPlay:

; 326  : 					}
; 327  : 				  }
; 328  : 
; 329  : 				  break;

	jmp	$LN66@AiSendPlay
$LN49@AiSendPlay:

; 330  : 			  case AiElement:
; 331  : 				  // If we already have a camera, don't break it by a weapon free command
; 332  : 				  if (myBrain->targetSpotElement)

	mov	ecx, DWORD PTR _myBrain$[ebp]
	cmp	DWORD PTR [ecx+920], 0
	je	SHORT $LN48@AiSendPlay

; 333  : 					  break;

	jmp	$LN66@AiSendPlay
$LN48@AiSendPlay:

; 334  : 
; 335  : 				  // I'm giving a weapon free to my element. Since I have only one bubble for the element,
; 336  : 				  // choose the element lead target if avail otherwise choose his wing's target
; 337  : 				  wingPlane = ((AircraftClass *)SimDriver.GetPlayerEntity()->GetCampaignObject()->GetComponentNumber(2));

	push	2
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _wingPlane$[ebp], eax

; 338  : 				  if (wingPlane && !wingPlane->IsDead())

	cmp	DWORD PTR _wingPlane$[ebp], 0
	je	SHORT $LN47@AiSendPlay
	mov	edx, DWORD PTR _wingPlane$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _wingPlane$[ebp]
	mov	edx, DWORD PTR [eax+340]
	call	edx
	test	eax, eax
	jne	SHORT $LN47@AiSendPlay

; 339  : 					  wingBrain = wingPlane->DBrain();

	mov	ecx, DWORD PTR _wingPlane$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	DWORD PTR _wingBrain$[ebp], eax
$LN47@AiSendPlay:

; 340  : 
; 341  : 				  // If our wing has a brain and a that brain has a target (priority to ground target)
; 342  : 				  if (wingBrain && wingBrain->GetGroundTarget())

	cmp	DWORD PTR _wingBrain$[ebp], 0
	je	SHORT $LN46@AiSendPlay
	mov	ecx, DWORD PTR _wingBrain$[ebp]
	call	?GetGroundTarget@DigitalBrain@@QAEPAVSimObjectType@@XZ ; DigitalBrain::GetGroundTarget
	test	eax, eax
	je	SHORT $LN46@AiSendPlay

; 343  : 					  wingTgt = wingBrain->GetGroundTarget()->BaseData();

	mov	ecx, DWORD PTR _wingBrain$[ebp]
	call	?GetGroundTarget@DigitalBrain@@QAEPAVSimObjectType@@XZ ; DigitalBrain::GetGroundTarget
	mov	ecx, eax
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR _wingTgt$[ebp], eax
	jmp	SHORT $LN45@AiSendPlay
$LN46@AiSendPlay:

; 344  : 				  else if (wingBrain && wingBrain->targetPtr)

	cmp	DWORD PTR _wingBrain$[ebp], 0
	je	SHORT $LN45@AiSendPlay
	mov	eax, DWORD PTR _wingBrain$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN45@AiSendPlay

; 345  : 					  wingTgt = wingBrain->targetPtr->BaseData();

	mov	ecx, DWORD PTR _wingBrain$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR _wingTgt$[ebp], eax
$LN45@AiSendPlay:

; 346  : 
; 347  : 				  // If the element lead has none, check his wing
; 348  : 				  if (!wingTgt) {

	cmp	DWORD PTR _wingTgt$[ebp], 0
	jne	$LN43@AiSendPlay

; 349  : 					  wingPlane = ((AircraftClass *)SimDriver.GetPlayerEntity()->GetCampaignObject()->GetComponentNumber(3));

	push	3
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _wingPlane$[ebp], eax

; 350  : 					  if (wingPlane && !wingPlane->IsDead())

	cmp	DWORD PTR _wingPlane$[ebp], 0
	je	SHORT $LN42@AiSendPlay
	mov	edx, DWORD PTR _wingPlane$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _wingPlane$[ebp]
	mov	edx, DWORD PTR [eax+340]
	call	edx
	test	eax, eax
	jne	SHORT $LN42@AiSendPlay

; 351  : 						  wingBrain = wingPlane->DBrain();

	mov	ecx, DWORD PTR _wingPlane$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	DWORD PTR _wingBrain$[ebp], eax
$LN42@AiSendPlay:

; 352  : 
; 353  : 					  // If our wing has a brain and a that brain has a target (priority to ground target)
; 354  : 					  if (wingBrain && wingBrain->GetGroundTarget())

	cmp	DWORD PTR _wingBrain$[ebp], 0
	je	SHORT $LN41@AiSendPlay
	mov	ecx, DWORD PTR _wingBrain$[ebp]
	call	?GetGroundTarget@DigitalBrain@@QAEPAVSimObjectType@@XZ ; DigitalBrain::GetGroundTarget
	test	eax, eax
	je	SHORT $LN41@AiSendPlay

; 355  : 						  wingTgt = wingBrain->GetGroundTarget()->BaseData();

	mov	ecx, DWORD PTR _wingBrain$[ebp]
	call	?GetGroundTarget@DigitalBrain@@QAEPAVSimObjectType@@XZ ; DigitalBrain::GetGroundTarget
	mov	ecx, eax
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR _wingTgt$[ebp], eax
	jmp	SHORT $LN43@AiSendPlay
$LN41@AiSendPlay:

; 356  : 					  else if (wingBrain && wingBrain->targetPtr)

	cmp	DWORD PTR _wingBrain$[ebp], 0
	je	SHORT $LN43@AiSendPlay
	mov	eax, DWORD PTR _wingBrain$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN43@AiSendPlay

; 357  : 						  wingTgt = wingBrain->targetPtr->BaseData();

	mov	ecx, DWORD PTR _wingBrain$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR _wingTgt$[ebp], eax
$LN43@AiSendPlay:

; 358  : 				  }
; 359  : 
; 360  : 				  // After all this, if we have a target, assign a 'bubble' around it
; 361  : 				  if (wingTgt) {

	cmp	DWORD PTR _wingTgt$[ebp], 0
	je	$LN38@AiSendPlay

; 362  : 					// First lets create one if not done already
; 363  : 					if (!myBrain->targetSpotElement) {

	mov	edx, DWORD PTR _myBrain$[ebp]
	cmp	DWORD PTR [edx+920], 0
	jne	$LN37@AiSendPlay

; 364  : 						myBrain->targetSpotElement = new SpotEntity (F4FlyingEyeType+VU_LAST_ENTITY_TYPE);

	push	144					; 00000090H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T19[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 8
	cmp	DWORD PTR $T19[ebp], 0
	je	SHORT $LN129@AiSendPlay
	mov	eax, DWORD PTR ?F4FlyingEyeType@@3HA	; F4FlyingEyeType
	add	eax, 100				; 00000064H
	push	eax
	mov	ecx, DWORD PTR $T19[ebp]
	call	??0SpotEntity@@QAE@G@Z			; SpotEntity::SpotEntity
	mov	DWORD PTR tv875[ebp], eax
	jmp	SHORT $LN130@AiSendPlay
$LN129@AiSendPlay:
	mov	DWORD PTR tv875[ebp], 0
$LN130@AiSendPlay:
	mov	ecx, DWORD PTR tv875[ebp]
	mov	DWORD PTR $T12[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _myBrain$[ebp]
	mov	eax, DWORD PTR $T12[ebp]
	mov	DWORD PTR [edx+920], eax

; 365  : 						vuDatabase->/*Quick*/Insert(myBrain->targetSpotElement);

	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	edx, DWORD PTR [ecx+920]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z	; VuDatabase::Insert

; 366  : 						myBrain->targetSpotElement->SetDriver (new SpotDriver (myBrain->targetSpotElement));

	push	116					; 00000074H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T27[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 9
	cmp	DWORD PTR $T27[ebp], 0
	je	SHORT $LN131@AiSendPlay
	mov	eax, DWORD PTR _myBrain$[ebp]
	mov	ecx, DWORD PTR [eax+920]
	push	ecx
	mov	ecx, DWORD PTR $T27[ebp]
	call	??0SpotDriver@@QAE@PAVVuEntity@@@Z	; SpotDriver::SpotDriver
	mov	DWORD PTR tv894[ebp], eax
	jmp	SHORT $LN132@AiSendPlay
$LN131@AiSendPlay:
	mov	DWORD PTR tv894[ebp], 0
$LN132@AiSendPlay:
	mov	edx, DWORD PTR tv894[ebp]
	mov	DWORD PTR $T10[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T10[ebp]
	push	eax
	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	ecx, DWORD PTR [ecx+920]
	call	?SetDriver@VuEntity@@QAEPAVVuDriver@@PAV2@@Z ; VuEntity::SetDriver

; 367  : 					}
; 368  : 					else {

	jmp	SHORT $LN36@AiSendPlay
$LN37@AiSendPlay:

; 369  : 						// Kill the current camera
; 370  : 						// sfr: cleanup camera mess
; 371  : 						FalconLocalSession->RemoveCamera(myBrain->targetSpotElement);

	push	0
	mov	edx, DWORD PTR _myBrain$[ebp]
	mov	eax, DWORD PTR [edx+920]
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?RemoveCamera@VuSessionEntity@@QAEHPAVVuEntity@@_N@Z ; VuSessionEntity::RemoveCamera
$LN36@AiSendPlay:

; 372  : 						//for (i = 0; i < FalconLocalSession->CameraCount(); i++) {
; 373  : 						//	if (FalconLocalSession->GetCameraEntity(i) == myBrain->targetSpotElement) {
; 374  : 						//		FalconLocalSession->RemoveCamera(myBrain->targetSpotElement);
; 375  : 						//		break;
; 376  : 						//	}
; 377  : 						//}
; 378  : 					}
; 379  : 
; 380  : 					// Now init for our new target
; 381  : 					myBrain->targetSpotElementTarget = (FalconEntity*) wingTgt;;

	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	edx, DWORD PTR _wingTgt$[ebp]
	mov	DWORD PTR [ecx+932], edx

; 382  : 					myBrain->targetSpotElementTimer = SimLibElapsedTime + g_nTargetSpotTimeout;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, DWORD PTR ?g_nTargetSpotTimeout@@3HA ; g_nTargetSpotTimeout
	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	DWORD PTR [ecx+944], eax

; 383  : 					VuReferenceEntity(myBrain->targetSpotElementTarget);

	mov	edx, DWORD PTR _myBrain$[ebp]
	mov	eax, DWORD PTR [edx+932]
	push	eax
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4

; 384  : 
; 385  : 					// Attach a camera to our target spot
; 386  : 					for (i = 0; i < FalconLocalSession->CameraCount(); i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN35@AiSendPlay
$LN34@AiSendPlay:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN35@AiSendPlay:
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?CameraCount@VuSessionEntity@@QBEHXZ	; VuSessionEntity::CameraCount
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN33@AiSendPlay

; 387  : 						if (FalconLocalSession->GetCameraEntity(i) == myBrain->targetSpotElement){

	movzx	edx, BYTE PTR _i$[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetCameraEntity@VuSessionEntity@@QBEPAVVuEntity@@E@Z ; VuSessionEntity::GetCameraEntity
	mov	ecx, DWORD PTR _myBrain$[ebp]
	cmp	eax, DWORD PTR [ecx+920]
	jne	SHORT $LN32@AiSendPlay

; 388  : 							break;

	jmp	SHORT $LN33@AiSendPlay
$LN32@AiSendPlay:

; 389  : 						}
; 390  : 					}

	jmp	SHORT $LN34@AiSendPlay
$LN33@AiSendPlay:

; 391  : 					if (i == FalconLocalSession->CameraCount()){

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?CameraCount@VuSessionEntity@@QBEHXZ	; VuSessionEntity::CameraCount
	cmp	DWORD PTR _i$[ebp], eax
	jne	SHORT $LN38@AiSendPlay

; 392  : 						FalconLocalSession->AttachCamera(myBrain->targetSpotElement);

	push	0
	mov	edx, DWORD PTR _myBrain$[ebp]
	mov	eax, DWORD PTR [edx+920]
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?AttachCamera@VuSessionEntity@@QAEHPAVVuEntity@@_N@Z ; VuSessionEntity::AttachCamera
$LN38@AiSendPlay:

; 393  : 					}
; 394  : 				  }
; 395  : 
; 396  : 				  break;

	jmp	$LN66@AiSendPlay
$LN30@AiSendPlay:

; 397  : 			  case AiFlight:
; 398  : 				  // If we already have a camera, don't break it by a weapon free command
; 399  : 				  if (myBrain->targetSpotFlight)

	mov	ecx, DWORD PTR _myBrain$[ebp]
	cmp	DWORD PTR [ecx+924], 0
	je	SHORT $LN29@AiSendPlay

; 400  : 					  break;

	jmp	$LN66@AiSendPlay
$LN29@AiSendPlay:

; 401  : 
; 402  : 				  // The whole flight, check all of the wing's target but only create one bubble, around the first target we find
; 403  : 				  for (i = 0; !wingTgt && i < SimDriver.GetPlayerEntity()->GetCampaignObject()->NumberOfComponents(); i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN28@AiSendPlay
$LN27@AiSendPlay:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN28@AiSendPlay:
	cmp	DWORD PTR _wingTgt$[ebp], 0
	jne	$LN26@AiSendPlay
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN26@AiSendPlay

; 404  : 					  wingPlane = ((AircraftClass *)SimDriver.GetPlayerEntity()->GetCampaignObject()->GetComponentNumber(i));

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _wingPlane$[ebp], eax

; 405  : 					  if (wingPlane && !wingPlane->IsDead())

	cmp	DWORD PTR _wingPlane$[ebp], 0
	je	SHORT $LN25@AiSendPlay
	mov	ecx, DWORD PTR _wingPlane$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _wingPlane$[ebp]
	mov	eax, DWORD PTR [edx+340]
	call	eax
	test	eax, eax
	jne	SHORT $LN25@AiSendPlay

; 406  : 						  wingBrain = wingPlane->DBrain();

	mov	ecx, DWORD PTR _wingPlane$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	DWORD PTR _wingBrain$[ebp], eax
$LN25@AiSendPlay:

; 407  : 
; 408  : 					  // If our wing has a brain and a that brain has a target (priority to ground target)
; 409  : 					  if (wingBrain && wingBrain->GetGroundTarget())

	cmp	DWORD PTR _wingBrain$[ebp], 0
	je	SHORT $LN24@AiSendPlay
	mov	ecx, DWORD PTR _wingBrain$[ebp]
	call	?GetGroundTarget@DigitalBrain@@QAEPAVSimObjectType@@XZ ; DigitalBrain::GetGroundTarget
	test	eax, eax
	je	SHORT $LN24@AiSendPlay

; 410  : 						  wingTgt = wingBrain->GetGroundTarget()->BaseData();

	mov	ecx, DWORD PTR _wingBrain$[ebp]
	call	?GetGroundTarget@DigitalBrain@@QAEPAVSimObjectType@@XZ ; DigitalBrain::GetGroundTarget
	mov	ecx, eax
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR _wingTgt$[ebp], eax
	jmp	SHORT $LN23@AiSendPlay
$LN24@AiSendPlay:

; 411  : 					  else if (wingBrain && wingBrain->targetPtr)

	cmp	DWORD PTR _wingBrain$[ebp], 0
	je	SHORT $LN23@AiSendPlay
	mov	ecx, DWORD PTR _wingBrain$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN23@AiSendPlay

; 412  : 						  wingTgt = wingBrain->targetPtr->BaseData();

	mov	edx, DWORD PTR _wingBrain$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR _wingTgt$[ebp], eax
$LN23@AiSendPlay:

; 413  : 				  }

	jmp	$LN27@AiSendPlay
$LN26@AiSendPlay:

; 414  : 
; 415  : 				  if (wingTgt) {

	cmp	DWORD PTR _wingTgt$[ebp], 0
	je	$LN66@AiSendPlay

; 416  : 					// First lets create one if not done already
; 417  : 					if (!myBrain->targetSpotFlight) {

	mov	eax, DWORD PTR _myBrain$[ebp]
	cmp	DWORD PTR [eax+924], 0
	jne	$LN20@AiSendPlay

; 418  : 						myBrain->targetSpotFlight = new SpotEntity (F4FlyingEyeType+VU_LAST_ENTITY_TYPE);

	push	144					; 00000090H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T26[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 10		; 0000000aH
	cmp	DWORD PTR $T26[ebp], 0
	je	SHORT $LN133@AiSendPlay
	mov	ecx, DWORD PTR ?F4FlyingEyeType@@3HA	; F4FlyingEyeType
	add	ecx, 100				; 00000064H
	push	ecx
	mov	ecx, DWORD PTR $T26[ebp]
	call	??0SpotEntity@@QAE@G@Z			; SpotEntity::SpotEntity
	mov	DWORD PTR tv1087[ebp], eax
	jmp	SHORT $LN134@AiSendPlay
$LN133@AiSendPlay:
	mov	DWORD PTR tv1087[ebp], 0
$LN134@AiSendPlay:
	mov	edx, DWORD PTR tv1087[ebp]
	mov	DWORD PTR $T8[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _myBrain$[ebp]
	mov	ecx, DWORD PTR $T8[ebp]
	mov	DWORD PTR [eax+924], ecx

; 419  : 						vuDatabase->/*Quick*/Insert(myBrain->targetSpotFlight);

	mov	edx, DWORD PTR _myBrain$[ebp]
	mov	eax, DWORD PTR [edx+924]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Insert@VuDatabase@@QAEHPAVVuEntity@@@Z	; VuDatabase::Insert

; 420  : 						myBrain->targetSpotFlight->SetDriver (new SpotDriver (myBrain->targetSpotFlight));

	push	116					; 00000074H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T25[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 11		; 0000000bH
	cmp	DWORD PTR $T25[ebp], 0
	je	SHORT $LN135@AiSendPlay
	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	edx, DWORD PTR [ecx+924]
	push	edx
	mov	ecx, DWORD PTR $T25[ebp]
	call	??0SpotDriver@@QAE@PAVVuEntity@@@Z	; SpotDriver::SpotDriver
	mov	DWORD PTR tv1106[ebp], eax
	jmp	SHORT $LN136@AiSendPlay
$LN135@AiSendPlay:
	mov	DWORD PTR tv1106[ebp], 0
$LN136@AiSendPlay:
	mov	eax, DWORD PTR tv1106[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T6[ebp]
	push	ecx
	mov	edx, DWORD PTR _myBrain$[ebp]
	mov	ecx, DWORD PTR [edx+924]
	call	?SetDriver@VuEntity@@QAEPAVVuDriver@@PAV2@@Z ; VuEntity::SetDriver

; 421  : 					}
; 422  : 					else {

	jmp	SHORT $LN19@AiSendPlay
$LN20@AiSendPlay:

; 423  : 						// Kill the current camera
; 424  : 						// sfr: cleanup camera mess
; 425  : 						FalconLocalSession->RemoveCamera(myBrain->targetSpotFlight);

	push	0
	mov	eax, DWORD PTR _myBrain$[ebp]
	mov	ecx, DWORD PTR [eax+924]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?RemoveCamera@VuSessionEntity@@QAEHPAVVuEntity@@_N@Z ; VuSessionEntity::RemoveCamera
$LN19@AiSendPlay:

; 426  : 						//for (i = 0; i < FalconLocalSession->CameraCount(); i++) {
; 427  : 						//	if (FalconLocalSession->GetCameraEntity(i) == myBrain->targetSpotFlight) {
; 428  : 						//		FalconLocalSession->RemoveCamera(myBrain->targetSpotFlight);
; 429  : 						//		break;
; 430  : 						//	}
; 431  : 						//}
; 432  : 					}
; 433  : 
; 434  : 					// Now init for our new target
; 435  : 					myBrain->targetSpotFlightTarget = (FalconEntity*) wingTgt;

	mov	edx, DWORD PTR _myBrain$[ebp]
	mov	eax, DWORD PTR _wingTgt$[ebp]
	mov	DWORD PTR [edx+936], eax

; 436  : 					myBrain->targetSpotFlightTimer = SimLibElapsedTime + g_nTargetSpotTimeout;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, DWORD PTR ?g_nTargetSpotTimeout@@3HA ; g_nTargetSpotTimeout
	mov	edx, DWORD PTR _myBrain$[ebp]
	mov	DWORD PTR [edx+948], ecx

; 437  : 					VuReferenceEntity(myBrain->targetSpotFlightTarget);

	mov	eax, DWORD PTR _myBrain$[ebp]
	mov	ecx, DWORD PTR [eax+936]
	push	ecx
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4

; 438  : 
; 439  : 					// Attach a camera to our target spot
; 440  : 					for (i = 0; i < FalconLocalSession->CameraCount(); i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN18@AiSendPlay
$LN17@AiSendPlay:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN18@AiSendPlay:
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?CameraCount@VuSessionEntity@@QBEHXZ	; VuSessionEntity::CameraCount
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN16@AiSendPlay

; 441  : 						if (FalconLocalSession->GetCameraEntity(i) == myBrain->targetSpotFlight){

	movzx	eax, BYTE PTR _i$[ebp]
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetCameraEntity@VuSessionEntity@@QBEPAVVuEntity@@E@Z ; VuSessionEntity::GetCameraEntity
	mov	ecx, DWORD PTR _myBrain$[ebp]
	cmp	eax, DWORD PTR [ecx+924]
	jne	SHORT $LN15@AiSendPlay

; 442  : 							break;

	jmp	SHORT $LN16@AiSendPlay
$LN15@AiSendPlay:

; 443  : 						}
; 444  : 					}

	jmp	SHORT $LN17@AiSendPlay
$LN16@AiSendPlay:

; 445  : 					if (i == FalconLocalSession->CameraCount()){

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?CameraCount@VuSessionEntity@@QBEHXZ	; VuSessionEntity::CameraCount
	cmp	DWORD PTR _i$[ebp], eax
	jne	SHORT $LN66@AiSendPlay

; 446  : 						FalconLocalSession->AttachCamera(myBrain->targetSpotFlight);

	push	0
	mov	edx, DWORD PTR _myBrain$[ebp]
	mov	eax, DWORD PTR [edx+924]
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?AttachCamera@VuSessionEntity@@QAEHPAVVuEntity@@_N@Z ; VuSessionEntity::AttachCamera
$LN66@AiSendPlay:

; 447  : 					}
; 448  : 				  }
; 449  : 
; 450  : 				  break;
; 451  : 		  }
; 452  : 
; 453  : 		  break;

	jmp	$LN107@AiSendPlay

; 454  : 
; 455  : 	  // END OF ADDED SECTION 2002-02-08
; 456  :       case FalconWingmanMsg::WMBreakRight:
; 457  :       case FalconWingmanMsg::WMBreakLeft:
; 458  :       case FalconWingmanMsg::WMFlex:
; 459  : 	  // 2002-01-29 ADDED BY S.G. Timeout quickly on a rejoin command
; 460  : 		  break;

	jmp	$LN107@AiSendPlay
$LN12@AiSendPlay:

; 461  : 
; 462  :       case FalconWingmanMsg::WMRejoin:
; 463  : 		  switch (extent) {

	mov	ecx, DWORD PTR _extent$[ebp]
	mov	DWORD PTR tv1189[ebp], ecx
	cmp	DWORD PTR tv1189[ebp], 0
	je	SHORT $LN9@AiSendPlay
	cmp	DWORD PTR tv1189[ebp], 1
	je	SHORT $LN7@AiSendPlay
	cmp	DWORD PTR tv1189[ebp], 2
	je	SHORT $LN5@AiSendPlay
	jmp	$LN107@AiSendPlay
$LN9@AiSendPlay:

; 464  : 			  case AiWingman:
; 465  : 				  if (myBrain->targetSpotWing)

	mov	edx, DWORD PTR _myBrain$[ebp]
	cmp	DWORD PTR [edx+916], 0
	je	SHORT $LN8@AiSendPlay

; 466  : 					  myBrain->targetSpotWingTimer = SimLibElapsedTime + 15 * SEC_TO_MSEC;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 15000				; 00003a98H
	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	DWORD PTR [ecx+940], eax
$LN8@AiSendPlay:

; 467  : 				  break;

	jmp	SHORT $LN107@AiSendPlay
$LN7@AiSendPlay:

; 468  : 
; 469  : 			  case AiElement:
; 470  : 				  if (myBrain->targetSpotElement)

	mov	edx, DWORD PTR _myBrain$[ebp]
	cmp	DWORD PTR [edx+920], 0
	je	SHORT $LN6@AiSendPlay

; 471  : 					  myBrain->targetSpotElementTimer = SimLibElapsedTime + 15 * SEC_TO_MSEC;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 15000				; 00003a98H
	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	DWORD PTR [ecx+944], eax
$LN6@AiSendPlay:

; 472  : 				  break;

	jmp	SHORT $LN107@AiSendPlay
$LN5@AiSendPlay:

; 473  : 
; 474  : 			  case AiFlight:
; 475  : 				  if (myBrain->targetSpotFlight)

	mov	edx, DWORD PTR _myBrain$[ebp]
	cmp	DWORD PTR [edx+924], 0
	je	SHORT $LN4@AiSendPlay

; 476  : 					  myBrain->targetSpotFlightTimer = SimLibElapsedTime + 15 * SEC_TO_MSEC;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 15000				; 00003a98H
	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	DWORD PTR [ecx+948], eax
$LN4@AiSendPlay:

; 477  : 				  if (myBrain->targetSpotWing)

	mov	edx, DWORD PTR _myBrain$[ebp]
	cmp	DWORD PTR [edx+916], 0
	je	SHORT $LN3@AiSendPlay

; 478  : 					  myBrain->targetSpotWingTimer = SimLibElapsedTime + 15 * SEC_TO_MSEC;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 15000				; 00003a98H
	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	DWORD PTR [ecx+940], eax
$LN3@AiSendPlay:

; 479  : 				  if (myBrain->targetSpotElement)

	mov	edx, DWORD PTR _myBrain$[ebp]
	cmp	DWORD PTR [edx+920], 0
	je	SHORT $LN107@AiSendPlay

; 480  : 					  myBrain->targetSpotElementTimer = SimLibElapsedTime + 15 * SEC_TO_MSEC;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 15000				; 00003a98H
	mov	ecx, DWORD PTR _myBrain$[ebp]
	mov	DWORD PTR [ecx+944], eax
$LN107@AiSendPlay:

; 481  : 				  break;
; 482  : 		  }
; 483  : 		  break;
; 484  : 
; 485  : 	  // END OF ADDED SECTION 2002-01-29
; 486  : 			case FalconWingmanMsg::WMResumeNormal:
; 487  : 			case FalconWingmanMsg::WMSearchGround:
; 488  : 			case FalconWingmanMsg::WMSearchAir:
; 489  : 			case FalconWingmanMsg::WMKickout:
; 490  : 			case FalconWingmanMsg::WMCloseup:
; 491  : 			case FalconWingmanMsg::WMToggleSide:
; 492  : 			case FalconWingmanMsg::WMIncreaseRelAlt:
; 493  : 			case FalconWingmanMsg::WMDecreaseRelAlt:
; 494  : 			case FalconWingmanMsg::WMGiveBra:
; 495  : 			case FalconWingmanMsg::WMGiveStatus:
; 496  : 			case FalconWingmanMsg::WMGiveDamageReport:
; 497  : 			case FalconWingmanMsg::WMGiveFuelState:
; 498  : 			case FalconWingmanMsg::WMGiveWeaponsCheck:
; 499  : 			case FalconWingmanMsg::WMRTB:
; 500  : 			case FalconWingmanMsg::WMFree:
; 501  : 			case FalconWingmanMsg::WMPromote:
; 502  : 			case FalconWingmanMsg::WMRadarStby:
; 503  : 			case FalconWingmanMsg::WMRadarOn:
; 504  : 			case FalconWingmanMsg::WMDropStores:
; 505  : 			case FalconWingmanMsg::WMECMOn:
; 506  : 			case FalconWingmanMsg::WMECMOff:
; 507  : 			// 2002-03-15 ADDED BY S.G. BVR profiles that the player can send to his element
; 508  : 			case FalconWingmanMsg::WMPlevel1a:
; 509  : 			case FalconWingmanMsg::WMPlevel2a:
; 510  : 			case FalconWingmanMsg::WMPlevel3a:
; 511  : 			case FalconWingmanMsg::WMPlevel1b:
; 512  : 			case FalconWingmanMsg::WMPlevel2b:
; 513  : 			case FalconWingmanMsg::WMPlevel3b:
; 514  : 			case FalconWingmanMsg::WMPlevel1c:
; 515  : 			case FalconWingmanMsg::WMPlevel2c:
; 516  : 			case FalconWingmanMsg::WMPlevel3c:
; 517  : 			case FalconWingmanMsg::WMPbeamdeploy:
; 518  : 			case FalconWingmanMsg::WMPbeambeam:
; 519  : 			case FalconWingmanMsg::WMPwall:
; 520  : 			case FalconWingmanMsg::WMPgrinder:
; 521  : 			case FalconWingmanMsg::WMPwideazimuth:
; 522  : 			case FalconWingmanMsg::WMPshortazimuth:
; 523  : 			case FalconWingmanMsg::WMPwideLT:
; 524  : 			case FalconWingmanMsg::WMPShortLT:
; 525  : 			case FalconWingmanMsg::WMPDefensive:
; 526  : 			// END OF ADDED SECTION 2002-03-15
; 527  :       default:
; 528  :       break;
; 529  :    }
; 530  : 
; 531  : 	AiSendCommand ((SimBaseClass*) SimDriver.GetPlayerEntity(), command, extent, targetId);

	mov	edx, DWORD PTR _targetId$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _targetId$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _command$[ebp]
	push	edx
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	push	eax
	call	?AiSendCommand@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z ; AiSendCommand
	add	esp, 20					; 00000014H
$LN111@AiSendPlay:

; 532  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN151@AiSendPlay:
	DD	$LN105@AiSendPlay
	DD	$LN69@AiSendPlay
	DD	$LN71@AiSendPlay
	DD	$LN12@AiSendPlay
	DD	$LN107@AiSendPlay
$LN149@AiSendPlay:
	DB	0
	DB	0
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	2
	DB	4
	DB	0
	DB	0
	DB	0
	DB	4
	DB	3
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z$0:
	mov	eax, DWORD PTR $T24[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z$1:
	mov	eax, DWORD PTR $T23[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z$2:
	mov	eax, DWORD PTR $T22[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z$3:
	mov	eax, DWORD PTR $T20[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z$4:
	mov	eax, DWORD PTR $T18[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z$5:
	mov	eax, DWORD PTR $T16[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z$6:
	mov	eax, DWORD PTR $T21[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z$7:
	mov	eax, DWORD PTR $T17[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z$8:
	mov	eax, DWORD PTR $T19[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z$9:
	mov	eax, DWORD PTR $T27[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z$10:
	mov	eax, DWORD PTR $T26[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z$11:
	mov	eax, DWORD PTR $T25[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-204]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AiSendPlayerCommand@@YAXHHVVU_ID@@@Z ENDP		; AiSendPlayerCommand
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\wingorder.cpp
_TEXT	SEGMENT
_p_sender$ = 8						; size = 4
_command$ = 12						; size = 4
_extent$ = 16						; size = 4
_targetid$ = 20						; size = 8
?AiSendCommand@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z PROC	; AiSendCommand

; 541  : {

	push	ebp
	mov	ebp, esp

; 542  : 	// if (PlayerOptions.PlayerRadioVoice) // ASSOCIATOR 1/12/03: Removed PlayerRadioVoice check to fix Disable Player Voice Bug 
; 543  : 	AiMakeRadioCall( p_sender, command, extent, targetid );	

	mov	eax, DWORD PTR _targetid$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _targetid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extent$[ebp]
	push	edx
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	push	ecx
	call	?AiMakeRadioCall@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z ; AiMakeRadioCall
	add	esp, 20					; 00000014H

; 544  : 	AiMakeCommandMsg( p_sender, command, extent, targetid);

	mov	edx, DWORD PTR _targetid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _targetid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _command$[ebp]
	push	edx
	mov	eax, DWORD PTR _p_sender$[ebp]
	push	eax
	call	?AiMakeCommandMsg@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z ; AiMakeCommandMsg
	add	esp, 20					; 00000014H

; 545  : }

	pop	ebp
	ret	0
?AiSendCommand@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z ENDP	; AiSendCommand
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\wingorder.cpp
_TEXT	SEGMENT
$T2 = -76						; size = 8
$T3 = -68						; size = 8
$T4 = -60						; size = 8
$T5 = -52						; size = 8
$T6 = -44						; size = 4
$T7 = -40						; size = 4
tv171 = -36						; size = 4
$T8 = -32						; size = 4
tv158 = -28						; size = 4
tv135 = -24						; size = 4
$T9 = -20						; size = 4
_p_commandMsgs$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_p_sender$ = 8						; size = 4
_command$ = 12						; size = 4
_extent$ = 16						; size = 4
_targetid$ = 20						; size = 8
?AiMakeCommandMsg@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z PROC ; AiMakeCommandMsg

; 556  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AiMakeCommandMsg@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 557  : 	FalconWingmanMsg*							p_commandMsgs;
; 558  : 	if (g_bMPFix2)

	movzx	eax, BYTE PTR ?g_bMPFix2@@3_NA		; g_bMPFix2
	test	eax, eax
	je	$LN2@AiMakeComm

; 559  : 		p_commandMsgs	= 
; 560  : 			new FalconWingmanMsg (p_sender->GetCampaignObject()->Id(), (VuTargetEntity*) vuDatabase->Find(vuLocalSessionEntity->Game()->OwnerId()))
; 561  : 		;

	push	70					; 00000046H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN5@AiMakeComm
	push	1
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::operator->
	mov	ecx, eax
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	ecx, eax
	call	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ	; VuEntity::OwnerId
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR $T9[ebp]
	call	??0FalconWingmanMsg@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconWingmanMsg::FalconWingmanMsg
	mov	DWORD PTR tv135[ebp], eax
	jmp	SHORT $LN6@AiMakeComm
$LN5@AiMakeComm:
	mov	DWORD PTR tv135[ebp], 0
$LN6@AiMakeComm:
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR $T7[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T7[ebp]
	mov	DWORD PTR _p_commandMsgs$[ebp], edx

; 562  : 	else

	jmp	$LN1@AiMakeComm
$LN2@AiMakeComm:

; 563  : 		p_commandMsgs	= new FalconWingmanMsg (p_sender->GetCampaignObject()->Id(), FalconLocalGame);

	push	70					; 00000046H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN9@AiMakeComm
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@AiMakeComm
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv158[ebp], eax
	jmp	SHORT $LN8@AiMakeComm
$LN7@AiMakeComm:
	mov	DWORD PTR tv158[ebp], 0
$LN8@AiMakeComm:
	push	1
	mov	ecx, DWORD PTR tv158[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0FalconWingmanMsg@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconWingmanMsg::FalconWingmanMsg
	mov	DWORD PTR tv171[ebp], eax
	jmp	SHORT $LN10@AiMakeComm
$LN9@AiMakeComm:
	mov	DWORD PTR tv171[ebp], 0
$LN10@AiMakeComm:
	mov	eax, DWORD PTR tv171[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR _p_commandMsgs$[ebp], ecx
$LN1@AiMakeComm:

; 564  : 
; 565  : 	p_commandMsgs->dataBlock.from			= p_sender->Id();

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _p_commandMsgs$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 566  : 	p_commandMsgs->dataBlock.to			= extent;

	mov	ecx, DWORD PTR _p_commandMsgs$[ebp]
	mov	dx, WORD PTR _extent$[ebp]
	mov	WORD PTR [ecx+56], dx

; 567  : 	p_commandMsgs->dataBlock.command		= command;

	mov	eax, DWORD PTR _p_commandMsgs$[ebp]
	mov	ecx, DWORD PTR _command$[ebp]
	mov	DWORD PTR [eax+58], ecx

; 568  : 	p_commandMsgs->dataBlock.newTarget	= targetid;

	mov	edx, DWORD PTR _p_commandMsgs$[ebp]
	mov	eax, DWORD PTR _targetid$[ebp]
	mov	DWORD PTR [edx+62], eax
	mov	ecx, DWORD PTR _targetid$[ebp+4]
	mov	DWORD PTR [edx+66], ecx

; 569  : 
; 570  : 	FalconSendMessage (p_commandMsgs, TRUE);

	push	1
	mov	edx, DWORD PTR _p_commandMsgs$[ebp]
	push	edx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 571  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AiMakeCommandMsg@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z$0:
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?AiMakeCommandMsg@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z$1:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AiMakeCommandMsg@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AiMakeCommandMsg@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AiMakeCommandMsg@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z ENDP ; AiMakeCommandMsg
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ PROC ; SimulationDriver::GetPlayerEntity, COMDAT
; _this$ = ecx

; 76   : 	SimMoverClass *GetPlayerEntity() const { return const_cast<SimMoverClass*>(playerEntity); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ENDP ; SimulationDriver::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ PROC	; AircraftClass::DBrain, COMDAT
; _this$ = ecx

; 624  : 	DigitalBrain *DBrain(void)			{return (DigitalBrain *)theBrain;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+672]
	mov	esp, ebp
	pop	ebp
	ret	0
?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ENDP	; AircraftClass::DBrain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simveh.h
;	COMDAT ?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ PROC	; SimVehicleClass::Brain, COMDAT
; _this$ = ecx

; 67   : 	BaseBrain* Brain(void) {return theBrain;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+672]
	mov	esp, ebp
	pop	ebp
	ret	0
?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ ENDP	; SimVehicleClass::Brain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ PROC ; SimBaseClass::GetCampaignObject, COMDAT
; _this$ = ecx

; 212  : 	CampBaseClass *GetCampaignObject (void) { return campaignObject.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ENDP ; SimBaseClass::GetCampaignObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ PROC ; VuBin<CampBaseClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ENDP ; VuBin<CampBaseClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?size@?$vector@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBEIXZ PROC ; std::vector<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::size, COMDAT
; _this$ = ecx

; 1086 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1087 : 		return (this->_Mylast - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1088 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBEIXZ ENDP ; std::vector<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vusessn.h
;	COMDAT ?CameraCount@VuSessionEntity@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CameraCount@VuSessionEntity@@QBEHXZ PROC		; VuSessionEntity::CameraCount, COMDAT
; _this$ = ecx

; 228  : 	int CameraCount() const { return cameras_.size(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 380				; 0000017cH
	call	?size@?$vector@V?$VuBin@VVuEntity@@@@V?$allocator@V?$VuBin@VVuEntity@@@@@std@@@std@@QBEIXZ ; std::vector<VuBin<VuEntity>,std::allocator<VuBin<VuEntity> > >::size
	mov	esp, ebp
	pop	ebp
	ret	0
?CameraCount@VuSessionEntity@@QBEHXZ ENDP		; VuSessionEntity::CameraCount
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::operator->, COMDAT
; _this$ = ecx

; 50   : 	E *operator->() const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 52   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??C?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::OwnerId, COMDAT
; _this$ = ecx

; 152  : 	VU_ID OwnerId() const     { return share_.ownerId_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::OwnerId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??8VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator==, COMDAT
; _this$ = ecx

; 104  : 	bool operator == (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		return (
; 106  : 			num_ == rhs.num_ ? 
; 107  : 			(creator_ == rhs.creator_ ? true : false) : 
; 108  : 			false
; 109  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 0
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 110  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
END
