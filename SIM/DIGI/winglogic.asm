; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\DIGI\winglogic.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
_DATA	SEGMENT
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	ORG $+4
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_DATA	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
CONST	SEGMENT
_NonTargets DD	024H
	DD	031H
	DD	02fH
	DD	018H
	DD	00H
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??8VU_ID@@QBE_NABV0@@Z				; VU_ID::operator==
PUBLIC	??9VU_ID@@QBE_NABV0@@Z				; VU_ID::operator!=
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	?IsSim@FalconEntity@@QAEHXZ			; FalconEntity::IsSim
PUBLIC	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
PUBLIC	?GetType@SimBaseClass@@QBEEXZ			; SimBaseClass::GetType
PUBLIC	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ		; VuBin<SimWeaponClass>::operator bool
PUBLIC	?IsDigital@AircraftClass@@QAEHXZ		; AircraftClass::IsDigital
PUBLIC	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ	; AircraftClass::DBrain
PUBLIC	?SkillLevel@BaseBrain@@QAEHXZ			; BaseBrain::SkillLevel
PUBLIC	?GetWPAction@WayPointClass@@QAEHXZ		; WayPointClass::GetWPAction
PUBLIC	?EvaluateTarget@DigitalBrain@@IAE_NK@Z		; DigitalBrain::EvaluateTarget
PUBLIC	?IsSetATC@DigitalBrain@@QAEHH@Z			; DigitalBrain::IsSetATC
PUBLIC	?ATCStatus@DigitalBrain@@QAE?AW4AtcStatusEnum@@XZ ; DigitalBrain::ATCStatus
PUBLIC	?AiSplitFlight@DigitalBrain@@AAEXHVVU_ID@@H@Z	; DigitalBrain::AiSplitFlight
PUBLIC	?AiGlueFlight@DigitalBrain@@AAEXHVVU_ID@@H@Z	; DigitalBrain::AiGlueFlight
PUBLIC	?AiRunTargetSelection@DigitalBrain@@AAEXXZ	; DigitalBrain::AiRunTargetSelection
PUBLIC	?AiSearchTargetList@DigitalBrain@@AAEXPAVVuEntity@@@Z ; DigitalBrain::AiSearchTargetList
PUBLIC	?AiRunDecisionRoutines@DigitalBrain@@AAEXXZ	; DigitalBrain::AiRunDecisionRoutines
PUBLIC	?AiCheckManeuvers@DigitalBrain@@AAEXXZ		; DigitalBrain::AiCheckManeuvers
PUBLIC	?AiCheckFormation@DigitalBrain@@AAEXXZ		; DigitalBrain::AiCheckFormation
PUBLIC	?AiCheckEngage@DigitalBrain@@AAEXXZ		; DigitalBrain::AiCheckEngage
PUBLIC	?AiCheckRTB@DigitalBrain@@AAEXXZ		; DigitalBrain::AiCheckRTB
PUBLIC	?AiCheckLandTakeoff@DigitalBrain@@AAEXXZ	; DigitalBrain::AiCheckLandTakeoff
PUBLIC	?AiCheckForUnauthLand@DigitalBrain@@AAEXVVU_ID@@@Z ; DigitalBrain::AiCheckForUnauthLand
PUBLIC	?FindSimGroundTarget@DigitalBrain@@AAEPAVSimBaseClass@@PAVCampBaseClass@@HH@Z ; DigitalBrain::FindSimGroundTarget
PUBLIC	?FindSimAirTarget@DigitalBrain@@AAEPAVSimBaseClass@@PAVCampBaseClass@@HH@Z ; DigitalBrain::FindSimAirTarget
PUBLIC	?FindJDAMGroundTarget@DigitalBrain@@QAEHPAVCampBaseClass@@HH@Z ; DigitalBrain::FindJDAMGroundTarget
PUBLIC	?FindJSOWGroundTarget@DigitalBrain@@QAEPAVSimBaseClass@@PAVCampBaseClass@@HH@Z ; DigitalBrain::FindJSOWGroundTarget
PUBLIC	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ	; SimObjectType::BaseData
PUBLIC	?NumHardpoints@SMSBaseClass@@QAEHXZ		; SMSBaseClass::NumHardpoints
PUBLIC	__real@00000000
PUBLIC	__real@48320395
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_rand:PROC
EXTRN	?F4IsBadReadPtr@@YA_NPBXI@Z:PROC		; F4IsBadReadPtr
EXTRN	?IsLocal@VuEntity@@QBEEXZ:PROC			; VuEntity::IsLocal
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	?SetFlag@SimBaseClass@@QAEXH@Z:PROC		; SimBaseClass::SetFlag
EXTRN	?UnSetFlag@SimBaseClass@@QAEXH@Z:PROC		; SimBaseClass::UnSetFlag
EXTRN	?ClearTarget@BaseBrain@@QAEXXZ:PROC		; BaseBrain::ClearTarget
EXTRN	?AddMode@DigitalBrain@@IAEXW4DigiMode@1@@Z:PROC	; DigitalBrain::AddMode
EXTRN	?TargetSelection@DigitalBrain@@IAEXXZ:PROC	; DigitalBrain::TargetSelection
EXTRN	?GunsEngageCheck@DigitalBrain@@IAEXXZ:PROC	; DigitalBrain::GunsEngageCheck
EXTRN	?GunsJinkCheck@DigitalBrain@@IAEXXZ:PROC	; DigitalBrain::GunsJinkCheck
EXTRN	?MissileDefeatCheck@DigitalBrain@@IAEXXZ:PROC	; DigitalBrain::MissileDefeatCheck
EXTRN	?MissileEngageCheck@DigitalBrain@@IAEXXZ:PROC	; DigitalBrain::MissileEngageCheck
EXTRN	?MergeCheck@DigitalBrain@@IAEXXZ:PROC		; DigitalBrain::MergeCheck
EXTRN	?AccelCheck@DigitalBrain@@IAEXXZ:PROC		; DigitalBrain::AccelCheck
EXTRN	?WvrEngageCheck@DigitalBrain@@IAEXXZ:PROC	; DigitalBrain::WvrEngageCheck
EXTRN	?BvrEngageCheck@DigitalBrain@@IAEXXZ:PROC	; DigitalBrain::BvrEngageCheck
EXTRN	?SetThreat@DigitalBrain@@IAEXPAVFalconEntity@@@Z:PROC ; DigitalBrain::SetThreat
EXTRN	?SendATCMsg@DigitalBrain@@QAEXW4AtcStatusEnum@@@Z:PROC ; DigitalBrain::SendATCMsg
EXTRN	?AiRestoreWeaponState@DigitalBrain@@AAEXXZ:PROC	; DigitalBrain::AiRestoreWeaponState
EXTRN	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z:PROC ; CampBaseClass::GetComponentEntity
EXTRN	?GetComponentLead@CampBaseClass@@QAEPAVSimBaseClass@@XZ:PROC ; CampBaseClass::GetComponentLead
EXTRN	?NumberOfComponents@CampBaseClass@@QAEHXZ:PROC	; CampBaseClass::NumberOfComponents
EXTRN	??0SimObjectType@@QAE@PAVFalconEntity@@@Z:PROC	; SimObjectType::SimObjectType
EXTRN	?GetFeatureStatus@ObjectiveClass@@QAEHH@Z:PROC	; ObjectiveClass::GetFeatureStatus
EXTRN	?GetFeatureID@ObjectiveClass@@QAEHH@Z:PROC	; ObjectiveClass::GetFeatureID
EXTRN	?FindNearestFriendlyAirbase@@YAPAVObjectiveClass@@EFF@Z:PROC ; FindNearestFriendlyAirbase
EXTRN	?ConvertSimToGrid@@YAXPAUvector@@PAF1@Z:PROC	; ConvertSimToGrid
EXTRN	?GetFeatureClassData@@YAPAUFeatureClassDataType@@H@Z:PROC ; GetFeatureClassData
EXTRN	?SpikeCheck@@YAPAVFalconEntity@@PAVAircraftClass@@PAV1@PAH@Z:PROC ; SpikeCheck
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	?SimLibElapsedTime@@3KA:DWORD			; SimLibElapsedTime
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@48320395
CONST	SEGMENT
__real@48320395 DD 048320395r			; 182286
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?AiSearchTargetList@DigitalBrain@@AAEXPAVVuEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AiSearchTargetList@DigitalBrain@@AAEXPAVVuEntity@@@Z$0
__ehfuncinfo$?AiSearchTargetList@DigitalBrain@@AAEXPAVVuEntity@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AiSearchTargetList@DigitalBrain@@AAEXPAVVuEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?NumHardpoints@SMSBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NumHardpoints@SMSBaseClass@@QAEHXZ PROC		; SMSBaseClass::NumHardpoints, COMDAT
; _this$ = ecx

; 87   : 	int NumHardpoints (void) {return numHardpoints;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?NumHardpoints@SMSBaseClass@@QAEHXZ ENDP		; SMSBaseClass::NumHardpoints
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\object.h
;	COMDAT ?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ PROC	; SimObjectType::BaseData, COMDAT
; _this$ = ecx

; 92   : 	FalconEntity* BaseData(void) { return baseData.get(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ENDP	; SimObjectType::BaseData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\winglogic.cpp
_TEXT	SEGMENT
_flightMember$ = -48					; size = 16
_FeatureNumber$ = -32					; size = 4
_usComponents$ = -28					; size = 4
_fc$ = -24						; size = 4
_firstSimTarg$ = -20					; size = 4
_this$ = -16						; size = 4
_j$ = -12						; size = 4
_i$ = -8						; size = 4
_simTarg$ = -4						; size = 4
_targetGroup$ = 8					; size = 4
_targetNumComponents$ = 12				; size = 4
_feaNo$ = 16						; size = 4
?FindJSOWGroundTarget@DigitalBrain@@QAEPAVSimBaseClass@@PAVCampBaseClass@@HH@Z PROC ; DigitalBrain::FindJSOWGroundTarget
; _this$ = ecx

; 497  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 498  :     int i = 0, j = 0;

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _j$[ebp], 0

; 499  : 	int usComponents = self->GetCampaignObject()->NumberOfComponents();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	mov	DWORD PTR _usComponents$[ebp], eax

; 500  : 	int FeatureNumber = feaNo;

	mov	ecx, DWORD PTR _feaNo$[ebp]
	mov	DWORD PTR _FeatureNumber$[ebp], ecx

; 501  : 	FeatureClassDataType	*fc = NULL;

	mov	DWORD PTR _fc$[ebp], 0

; 502  : 	SimBaseClass *simTarg = NULL;

	mov	DWORD PTR _simTarg$[ebp], 0

; 503  : 	SimBaseClass *firstSimTarg = NULL;

	mov	DWORD PTR _firstSimTarg$[ebp], 0

; 504  : 	AircraftClass *flightMember[4] =  { 0 }; // Maximum of 4 planes per flight with no target as default

	mov	DWORD PTR _flightMember$[ebp], 0
	xor	edx, edx
	mov	DWORD PTR _flightMember$[ebp+4], edx
	mov	DWORD PTR _flightMember$[ebp+8], edx
	mov	DWORD PTR _flightMember$[ebp+12], edx

; 505  : 
; 506  : 	// Get the flight aircrafts (once per call instead of once per target querried)
; 507  : 	for (i = 0; i < usComponents; i++) 

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN30@FindJSOWGr
$LN29@FindJSOWGr:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN30@FindJSOWGr:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _usComponents$[ebp]
	jge	SHORT $LN28@FindJSOWGr

; 508  : 	{
; 509  : 		flightMember[i] = (AircraftClass *)self->GetCampaignObject()->GetComponentEntity(i);

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentEntity
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _flightMember$[ebp+ecx*4], eax

; 510  : 	}

	jmp	SHORT $LN29@FindJSOWGr
$LN28@FindJSOWGr:

; 511  : 
; 512  : 	// Check each sim entity in the campaign entity in succession, starting at startPos = 0.
; 513  : 	for (i = 0; i < targetNumComponents; i++ ) 

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN27@FindJSOWGr
$LN26@FindJSOWGr:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN27@FindJSOWGr:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _targetNumComponents$[ebp]
	jge	$LN25@FindJSOWGr

; 514  : 	{
; 515  : 		// Get the sim object associated to this entity number
; 516  : 		simTarg = targetGroup->GetComponentEntity(i);

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _targetGroup$[ebp]
	call	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentEntity
	mov	DWORD PTR _simTarg$[ebp], eax

; 517  : 
; 518  : 		if (!simTarg || F4IsBadReadPtr(simTarg, sizeof (simTarg))) //sanity check

	cmp	DWORD PTR _simTarg$[ebp], 0
	je	SHORT $LN23@FindJSOWGr
	push	4
	mov	edx, DWORD PTR _simTarg$[ebp]
	push	edx
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN24@FindJSOWGr
$LN23@FindJSOWGr:

; 519  : 			continue;

	jmp	SHORT $LN26@FindJSOWGr
$LN24@FindJSOWGr:

; 520  : 
; 521  : 		// Is it alive?
; 522  : 		if (simTarg->IsExploding() || simTarg->IsDead() || simTarg->pctStrength <= 0.0f ) // Cobra - add priority filter?

	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	eax, DWORD PTR [edx+208]
	call	eax
	test	eax, eax
	jne	SHORT $LN21@FindJSOWGr
	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	eax, DWORD PTR [edx+340]
	call	eax
	test	eax, eax
	jne	SHORT $LN21@FindJSOWGr
	mov	ecx, DWORD PTR _simTarg$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx+292]
	jb	SHORT $LN22@FindJSOWGr
$LN21@FindJSOWGr:

; 523  : 			continue; // Dead thing, ignore it.

	jmp	SHORT $LN26@FindJSOWGr
$LN22@FindJSOWGr:

; 524  : 
; 525  : 		// COBRA - RED - skip if a target of no-interest
; 526  : 		if(!EvaluateTarget(simTarg->GetType()))

	mov	ecx, DWORD PTR _simTarg$[ebp]
	call	?GetType@SimBaseClass@@QBEEXZ		; SimBaseClass::GetType
	movzx	edx, al
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EvaluateTarget@DigitalBrain@@IAE_NK@Z	; DigitalBrain::EvaluateTarget
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN20@FindJSOWGr

; 527  : 			continue;

	jmp	$LN26@FindJSOWGr
$LN20@FindJSOWGr:

; 528  : 		// RED - TODO -
; 529  : 		// FRB - Leave it!
; 530  : ///*		// FRB - Cobra - Don't target low priority features (trees, fences, sheds)
; 531  : 		if (simTarg->IsStatic()) // It's a feature

	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	eax, DWORD PTR [edx+180]
	call	eax
	test	eax, eax
	je	SHORT $LN17@FindJSOWGr

; 532  : 		{
; 533  : 			fc = GetFeatureClassData(((Objective)simTarg)->GetFeatureID(i));

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _simTarg$[ebp]
	call	?GetFeatureID@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetFeatureID
	push	eax
	call	?GetFeatureClassData@@YAPAUFeatureClassDataType@@H@Z ; GetFeatureClassData
	add	esp, 4
	mov	DWORD PTR _fc$[ebp], eax

; 534  : 			if (fc && !F4IsBadReadPtr(fc, sizeof (fc)) && fc->Priority > 2) // higher priority number = lower priority

	cmp	DWORD PTR _fc$[ebp], 0
	je	SHORT $LN18@FindJSOWGr
	push	4
	mov	edx, DWORD PTR _fc$[ebp]
	push	edx
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN18@FindJSOWGr
	mov	ecx, DWORD PTR _fc$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	cmp	edx, 2
	jle	SHORT $LN18@FindJSOWGr

; 535  : 				continue;

	jmp	$LN26@FindJSOWGr
$LN18@FindJSOWGr:

; 536  : 			if (((Objective)simTarg)->GetFeatureStatus(i) == VIS_DESTROYED)

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _simTarg$[ebp]
	call	?GetFeatureStatus@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureStatus
	cmp	eax, 3
	jne	SHORT $LN17@FindJSOWGr

; 537  : 				continue;

	jmp	$LN26@FindJSOWGr
$LN17@FindJSOWGr:

; 538  : 		}//*/
; 539  : 
; 540  : 
; 541  : 		// Are flight members already using it (was using it) as a target?
; 542  : 		for (j = 0; j < usComponents; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN16@FindJSOWGr
$LN15@FindJSOWGr:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN16@FindJSOWGr:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _usComponents$[ebp]
	jge	$LN14@FindJSOWGr

; 543  : 		{
; 544  : 			if (!flightMember[j])

	mov	eax, DWORD PTR _j$[ebp]
	cmp	DWORD PTR _flightMember$[ebp+eax*4], 0
	jne	SHORT $LN13@FindJSOWGr

; 545  : 				continue;

	jmp	SHORT $LN15@FindJSOWGr
$LN13@FindJSOWGr:

; 546  : 			// Cobra - You will always get a match with my last target...skip me
; 547  : 			if (flightMember[j]->vehicleInUnit == self->vehicleInUnit)

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _flightMember$[ebp+ecx*4]
	movzx	eax, BYTE PTR [edx+664]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	movzx	ecx, BYTE PTR [edx+664]
	cmp	eax, ecx
	jne	SHORT $LN12@FindJSOWGr

; 548  : 				continue;

	jmp	SHORT $LN15@FindJSOWGr
$LN12@FindJSOWGr:

; 549  : 			if (flightMember[j] && flightMember[j]->DBrain() && ((flightMember[j]->DBrain()->groundTargetPtr && 
; 550  : 				flightMember[j]->DBrain()->groundTargetPtr->BaseData() == simTarg) || 
; 551  : 				flightMember[j]->DBrain()->gndTargetHistory[0] == simTarg || 
; 552  : 				flightMember[j]->DBrain()->gndTargetHistory[1] == simTarg))

	mov	edx, DWORD PTR _j$[ebp]
	cmp	DWORD PTR _flightMember$[ebp+edx*4], 0
	je	$LN11@FindJSOWGr
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+eax*4]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	test	eax, eax
	je	SHORT $LN11@FindJSOWGr
	mov	ecx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+ecx*4]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+224], 0
	je	SHORT $LN9@FindJSOWGr
	mov	edx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+edx*4]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	eax, DWORD PTR _simTarg$[ebp]
	je	SHORT $LN10@FindJSOWGr
$LN9@FindJSOWGr:
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+eax*4]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR [eax+ecx+452]
	cmp	edx, DWORD PTR _simTarg$[ebp]
	je	SHORT $LN10@FindJSOWGr
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+eax*4]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [eax+ecx+452]
	cmp	edx, DWORD PTR _simTarg$[ebp]
	jne	SHORT $LN11@FindJSOWGr
$LN10@FindJSOWGr:

; 553  : 				break;  // Yes, ignore it.

	jmp	SHORT $LN14@FindJSOWGr
$LN11@FindJSOWGr:

; 554  : 		}

	jmp	$LN15@FindJSOWGr
$LN14@FindJSOWGr:

; 555  : 
; 556  : 		// If we didn't reach the end, someone else is using it so skip it.
; 557  : 		if (j != usComponents)

	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _usComponents$[ebp]
	je	SHORT $LN8@FindJSOWGr

; 558  : 			continue;

	jmp	$LN26@FindJSOWGr
$LN8@FindJSOWGr:

; 559  : 
; 560  : 		// Mark this sim entity as the first target with a match (in case no emitting targets are left standing, or it's a feature)
; 561  : 		if (!firstSimTarg)

	cmp	DWORD PTR _firstSimTarg$[ebp], 0
	jne	SHORT $LN7@FindJSOWGr

; 562  : 		{
; 563  : 			FeatureNumber = i;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _FeatureNumber$[ebp], ecx

; 564  : 			firstSimTarg = simTarg;

	mov	edx, DWORD PTR _simTarg$[ebp]
	mov	DWORD PTR _firstSimTarg$[ebp], edx
$LN7@FindJSOWGr:

; 565  : 		}
; 566  : 
; 567  : 		// Look for the next one...
; 568  : 	}

	jmp	$LN26@FindJSOWGr
$LN25@FindJSOWGr:

; 569  : 	if (i < targetNumComponents) 

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _targetNumComponents$[ebp]
	jge	$LN6@FindJSOWGr

; 570  : 	{
; 571  : 		// Now after all this, see if the AI is too dumb for selecting a valid target... 
; 572  : 		// If he is, select at random
; 573  : 		if ((unsigned)((unsigned)rand() % (unsigned)32) > (unsigned)((unsigned)SkillLevel() + (unsigned)28))

	call	_rand
	xor	edx, edx
	mov	ecx, 32					; 00000020H
	div	ecx
	mov	esi, edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SkillLevel@BaseBrain@@QAEHXZ		; BaseBrain::SkillLevel
	add	eax, 28					; 0000001cH
	cmp	esi, eax
	jbe	SHORT $LN5@FindJSOWGr

; 574  : 		{
; 575  : 			FeatureNumber = (rand() % targetNumComponents);

	call	_rand
	cdq
	idiv	DWORD PTR _targetNumComponents$[ebp]
	mov	DWORD PTR _FeatureNumber$[ebp], edx

; 576  : 			firstSimTarg = targetGroup->GetComponentEntity (rand() % targetNumComponents);

	call	_rand
	cdq
	idiv	DWORD PTR _targetNumComponents$[ebp]
	push	edx
	mov	ecx, DWORD PTR _targetGroup$[ebp]
	call	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentEntity
	mov	DWORD PTR _firstSimTarg$[ebp], eax
$LN5@FindJSOWGr:

; 577  : 		}
; 578  : 
; 579  : 		// Keep track of the last two targets but only if we have one, otherwise, leave our previous targets alone
; 580  : 		if (firstSimTarg) 

	cmp	DWORD PTR _firstSimTarg$[ebp], 0
	je	SHORT $LN4@FindJSOWGr

; 581  : 		{
; 582  : 			gndTargetHistory[1] = gndTargetHistory[0];

	mov	edx, 4
	imul	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [esi+edx+452]
	mov	DWORD PTR [ecx+eax+452], edx

; 583  : 			gndTargetHistory[0] = firstSimTarg;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _firstSimTarg$[ebp]
	mov	DWORD PTR [ecx+eax+452], edx
$LN4@FindJSOWGr:

; 584  : 		}
; 585  : 	}
; 586  : 	else

	jmp	SHORT $LN3@FindJSOWGr
$LN6@FindJSOWGr:

; 587  : 		firstSimTarg = 0;

	mov	DWORD PTR _firstSimTarg$[ebp], 0
$LN3@FindJSOWGr:

; 588  : 
; 589  : 	// 2001-07-29 S.G. If I was shooting at a (not necessarely THIS one) campaign object, say I'm not anymore since the object deaggregated.
; 590  : 	if (((FlightClass *)self->GetCampaignObject())->whoShot == self) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+448]
	cmp	edx, DWORD PTR [ecx+56]
	jne	SHORT $LN2@FindJSOWGr

; 591  : 		((FlightClass *)self->GetCampaignObject())->shotAt = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR [eax+444], 0

; 592  : 		((FlightClass *)self->GetCampaignObject())->whoShot = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR [eax+448], 0
$LN2@FindJSOWGr:

; 593  : 	}
; 594  : 
; 595  : 	// JB 011017 from Schumi if targetNumComponents is less than usComponents, then of course there is no target anymore for the wingmen to bomb, and firstSimTarg is NULL.
; 596  : 	if (firstSimTarg == NULL && targetNumComponents && targetNumComponents < usComponents)

	cmp	DWORD PTR _firstSimTarg$[ebp], 0
	jne	SHORT $LN1@FindJSOWGr
	cmp	DWORD PTR _targetNumComponents$[ebp], 0
	je	SHORT $LN1@FindJSOWGr
	mov	edx, DWORD PTR _targetNumComponents$[ebp]
	cmp	edx, DWORD PTR _usComponents$[ebp]
	jge	SHORT $LN1@FindJSOWGr

; 597  : 	{
; 598  : 		FeatureNumber = (rand() % targetNumComponents);

	call	_rand
	cdq
	idiv	DWORD PTR _targetNumComponents$[ebp]
	mov	DWORD PTR _FeatureNumber$[ebp], edx

; 599  : 		firstSimTarg = targetGroup->GetComponentEntity (rand() % targetNumComponents);

	call	_rand
	cdq
	idiv	DWORD PTR _targetNumComponents$[ebp]
	push	edx
	mov	ecx, DWORD PTR _targetGroup$[ebp]
	call	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentEntity
	mov	DWORD PTR _firstSimTarg$[ebp], eax
$LN1@FindJSOWGr:

; 600  : 	}
; 601  : 
; 602  : 	return firstSimTarg;

	mov	eax, DWORD PTR _firstSimTarg$[ebp]

; 603  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?FindJSOWGroundTarget@DigitalBrain@@QAEPAVSimBaseClass@@PAVCampBaseClass@@HH@Z ENDP ; DigitalBrain::FindJSOWGroundTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\winglogic.cpp
_TEXT	SEGMENT
_flightMember$ = -52					; size = 16
_fc$ = -36						; size = 4
_FeatureNumber$ = -32					; size = 4
_usComponents$ = -28					; size = 4
_i$1 = -24						; size = 4
_firstSimTarg$ = -20					; size = 4
_i$ = -16						; size = 4
_this$ = -12						; size = 4
_j$ = -8						; size = 4
_simTarg$ = -4						; size = 4
_targetGroup$ = 8					; size = 4
_targetNumComponents$ = 12				; size = 4
_feaNo$ = 16						; size = 4
?FindJDAMGroundTarget@DigitalBrain@@QAEHPAVCampBaseClass@@HH@Z PROC ; DigitalBrain::FindJDAMGroundTarget
; _this$ = ecx

; 608  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 609  :     int i = 0, j = 0;

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _j$[ebp], 0

; 610  : 	int usComponents = self->GetCampaignObject()->NumberOfComponents();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	mov	DWORD PTR _usComponents$[ebp], eax

; 611  : 	int FeatureNumber = feaNo;

	mov	ecx, DWORD PTR _feaNo$[ebp]
	mov	DWORD PTR _FeatureNumber$[ebp], ecx

; 612  : 	FeatureClassDataType	*fc = NULL;

	mov	DWORD PTR _fc$[ebp], 0

; 613  : 	SimBaseClass *simTarg = NULL;

	mov	DWORD PTR _simTarg$[ebp], 0

; 614  : 	SimBaseClass *firstSimTarg = NULL;

	mov	DWORD PTR _firstSimTarg$[ebp], 0

; 615  : 	AircraftClass *flightMember[4] =  { 0 }; // Maximum of 4 planes per flight with no target as default

	mov	DWORD PTR _flightMember$[ebp], 0
	xor	edx, edx
	mov	DWORD PTR _flightMember$[ebp+4], edx
	mov	DWORD PTR _flightMember$[ebp+8], edx
	mov	DWORD PTR _flightMember$[ebp+12], edx

; 616  : 
; 617  : 	if (usComponents <= 1)

	cmp	DWORD PTR _usComponents$[ebp], 1
	jg	SHORT $LN31@FindJDAMGr

; 618  : 		return FeatureNumber;

	mov	eax, DWORD PTR _FeatureNumber$[ebp]
	jmp	$LN32@FindJDAMGr
$LN31@FindJDAMGr:

; 619  : 
; 620  : 	// Get the flight aircrafts (once per call instead of once per target querried)
; 621  : 	for (int i = 0; i < usComponents; i++) 

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN30@FindJDAMGr
$LN29@FindJDAMGr:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN30@FindJDAMGr:
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR _usComponents$[ebp]
	jge	SHORT $LN28@FindJDAMGr

; 622  : 	{
; 623  : 		flightMember[i] = (AircraftClass *)self->GetCampaignObject()->GetComponentEntity(i);

	mov	edx, DWORD PTR _i$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentEntity
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _flightMember$[ebp+ecx*4], eax

; 624  : 	}

	jmp	SHORT $LN29@FindJDAMGr
$LN28@FindJDAMGr:

; 625  : 
; 626  : 	// Check each sim entity in the campaign entity in succession, starting at startPos = 0.
; 627  : 	for (i = 0; i < targetNumComponents; i++ ) 

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN27@FindJDAMGr
$LN26@FindJDAMGr:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN27@FindJDAMGr:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _targetNumComponents$[ebp]
	jge	$LN25@FindJDAMGr

; 628  : 	{
; 629  : 		// Get the sim object associated to this entity number
; 630  : 		simTarg = targetGroup->GetComponentEntity(i);

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _targetGroup$[ebp]
	call	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentEntity
	mov	DWORD PTR _simTarg$[ebp], eax

; 631  : 
; 632  : 		if (!simTarg || F4IsBadReadPtr(simTarg, sizeof (simTarg))) //sanity check

	cmp	DWORD PTR _simTarg$[ebp], 0
	je	SHORT $LN23@FindJDAMGr
	push	4
	mov	edx, DWORD PTR _simTarg$[ebp]
	push	edx
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN24@FindJDAMGr
$LN23@FindJDAMGr:

; 633  : 			continue;

	jmp	SHORT $LN26@FindJDAMGr
$LN24@FindJDAMGr:

; 634  : 
; 635  : 		// Is it alive?
; 636  : 		if (simTarg->IsExploding() || simTarg->IsDead() || simTarg->pctStrength <= 0.0f ) // Cobra - add priority filter?

	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	eax, DWORD PTR [edx+208]
	call	eax
	test	eax, eax
	jne	SHORT $LN21@FindJDAMGr
	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	eax, DWORD PTR [edx+340]
	call	eax
	test	eax, eax
	jne	SHORT $LN21@FindJDAMGr
	mov	ecx, DWORD PTR _simTarg$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx+292]
	jb	SHORT $LN22@FindJDAMGr
$LN21@FindJDAMGr:

; 637  : 			continue; // Dead thing, ignore it.

	jmp	SHORT $LN26@FindJDAMGr
$LN22@FindJDAMGr:

; 638  : 
; 639  : 		// COBRA - RED - skip if a target of no-interest
; 640  : 		//if(!EvaluateTarget(simTarg->GetType()))
; 641  : 		//	continue;
; 642  : 		// RED - TODO -
; 643  : 		// FRB - Cobra - Don't target low priority features (trees, fences, sheds)
; 644  : 		if (simTarg->IsStatic()) // It's a feature

	mov	edx, DWORD PTR _simTarg$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	edx, DWORD PTR [eax+180]
	call	edx
	test	eax, eax
	je	SHORT $LN17@FindJDAMGr

; 645  : 		{
; 646  : 			if ((Objective)simTarg)

	cmp	DWORD PTR _simTarg$[ebp], 0
	je	SHORT $LN19@FindJDAMGr

; 647  : 				fc = GetFeatureClassData(((Objective)simTarg)->GetFeatureID(i));

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _simTarg$[ebp]
	call	?GetFeatureID@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetFeatureID
	push	eax
	call	?GetFeatureClassData@@YAPAUFeatureClassDataType@@H@Z ; GetFeatureClassData
	add	esp, 4
	mov	DWORD PTR _fc$[ebp], eax
$LN19@FindJDAMGr:

; 648  : 			if (fc && !F4IsBadReadPtr(fc, sizeof (fc)) && fc->Priority > 2) // higher priority number = lower priority

	cmp	DWORD PTR _fc$[ebp], 0
	je	SHORT $LN18@FindJDAMGr
	push	4
	mov	ecx, DWORD PTR _fc$[ebp]
	push	ecx
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN18@FindJDAMGr
	mov	eax, DWORD PTR _fc$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	cmp	ecx, 2
	jle	SHORT $LN18@FindJDAMGr

; 649  : 				continue;

	jmp	$LN26@FindJDAMGr
$LN18@FindJDAMGr:

; 650  : 			if (((Objective)simTarg)->GetFeatureStatus(i) == VIS_DESTROYED)

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _simTarg$[ebp]
	call	?GetFeatureStatus@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureStatus
	cmp	eax, 3
	jne	SHORT $LN17@FindJDAMGr

; 651  : 				continue;

	jmp	$LN26@FindJDAMGr
$LN17@FindJDAMGr:

; 652  : 		}
; 653  : 
; 654  : 		// Are flight members already using it (was using it) as a target?
; 655  : 		for (j = 0; j < usComponents; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN16@FindJDAMGr
$LN15@FindJDAMGr:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN16@FindJDAMGr:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _usComponents$[ebp]
	jge	$LN14@FindJDAMGr

; 656  : 		{
; 657  : 			if (!flightMember[j])

	mov	edx, DWORD PTR _j$[ebp]
	cmp	DWORD PTR _flightMember$[ebp+edx*4], 0
	jne	SHORT $LN13@FindJDAMGr

; 658  : 				continue;

	jmp	SHORT $LN15@FindJDAMGr
$LN13@FindJDAMGr:

; 659  : 			// Cobra - You will always get a match with my last target...skip me
; 660  : 			if (flightMember[j]->vehicleInUnit == self->vehicleInUnit)

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+eax*4]
	movzx	edx, BYTE PTR [ecx+664]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movzx	eax, BYTE PTR [ecx+664]
	cmp	edx, eax
	jne	SHORT $LN12@FindJDAMGr

; 661  : 				continue;

	jmp	SHORT $LN15@FindJDAMGr
$LN12@FindJDAMGr:

; 662  : 			if (flightMember[j] && flightMember[j]->DBrain() && ((flightMember[j]->DBrain()->groundTargetPtr && 
; 663  : 				flightMember[j]->DBrain()->groundTargetPtr->BaseData() == simTarg) || 
; 664  : 				flightMember[j]->DBrain()->gndTargetHistory[0] == simTarg || 
; 665  : 				flightMember[j]->DBrain()->gndTargetHistory[1] == simTarg))

	mov	ecx, DWORD PTR _j$[ebp]
	cmp	DWORD PTR _flightMember$[ebp+ecx*4], 0
	je	$LN11@FindJDAMGr
	mov	edx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+edx*4]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	test	eax, eax
	je	SHORT $LN11@FindJDAMGr
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+eax*4]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+224], 0
	je	SHORT $LN9@FindJDAMGr
	mov	ecx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+ecx*4]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	eax, DWORD PTR _simTarg$[ebp]
	je	SHORT $LN10@FindJDAMGr
$LN9@FindJDAMGr:
	mov	edx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+edx*4]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR [eax+ecx+452]
	cmp	edx, DWORD PTR _simTarg$[ebp]
	je	SHORT $LN10@FindJDAMGr
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+eax*4]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [eax+ecx+452]
	cmp	edx, DWORD PTR _simTarg$[ebp]
	jne	SHORT $LN11@FindJDAMGr
$LN10@FindJDAMGr:

; 666  : 				break;  // Yes, ignore it.

	jmp	SHORT $LN14@FindJDAMGr
$LN11@FindJDAMGr:

; 667  : 		}

	jmp	$LN15@FindJDAMGr
$LN14@FindJDAMGr:

; 668  : 
; 669  : 		// If we didn't reach the end, someone else is using it so skip it.
; 670  : 		if (j != usComponents)

	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _usComponents$[ebp]
	je	SHORT $LN8@FindJDAMGr

; 671  : 			continue;

	jmp	$LN26@FindJDAMGr
$LN8@FindJDAMGr:

; 672  : 
; 673  : 		// Mark this sim entity as the first target with a match (in case no emitting targets are left standing, or it's a feature)
; 674  : 		if (!firstSimTarg)

	cmp	DWORD PTR _firstSimTarg$[ebp], 0
	jne	SHORT $LN7@FindJDAMGr

; 675  : 		{
; 676  : 			FeatureNumber = i;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _FeatureNumber$[ebp], ecx

; 677  : 			firstSimTarg = simTarg;

	mov	edx, DWORD PTR _simTarg$[ebp]
	mov	DWORD PTR _firstSimTarg$[ebp], edx
$LN7@FindJDAMGr:

; 678  : 		}
; 679  : 
; 680  : 		// Look for the next one...
; 681  : 	}

	jmp	$LN26@FindJDAMGr
$LN25@FindJDAMGr:

; 682  : 	if (i < targetNumComponents) 

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _targetNumComponents$[ebp]
	jge	$LN6@FindJDAMGr

; 683  : 	{
; 684  : 		// Now after all this, see if the AI is too dumb for selecting a valid target... 
; 685  : 		// If he is, select at random
; 686  : 		if ((unsigned)((unsigned)rand() % (unsigned)32) > (unsigned)((unsigned)SkillLevel() + (unsigned)28))

	call	_rand
	xor	edx, edx
	mov	ecx, 32					; 00000020H
	div	ecx
	mov	esi, edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SkillLevel@BaseBrain@@QAEHXZ		; BaseBrain::SkillLevel
	add	eax, 28					; 0000001cH
	cmp	esi, eax
	jbe	SHORT $LN5@FindJDAMGr

; 687  : 		{
; 688  : 			FeatureNumber = (rand() % targetNumComponents);

	call	_rand
	cdq
	idiv	DWORD PTR _targetNumComponents$[ebp]
	mov	DWORD PTR _FeatureNumber$[ebp], edx

; 689  : 			firstSimTarg = targetGroup->GetComponentEntity (rand() % targetNumComponents);

	call	_rand
	cdq
	idiv	DWORD PTR _targetNumComponents$[ebp]
	push	edx
	mov	ecx, DWORD PTR _targetGroup$[ebp]
	call	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentEntity
	mov	DWORD PTR _firstSimTarg$[ebp], eax
$LN5@FindJDAMGr:

; 690  : 		}
; 691  : 
; 692  : 		// Keep track of the last two targets but only if we have one, otherwise, leave our previous targets alone
; 693  : 		if (firstSimTarg) 

	cmp	DWORD PTR _firstSimTarg$[ebp], 0
	je	SHORT $LN4@FindJDAMGr

; 694  : 		{
; 695  : 			gndTargetHistory[1] = gndTargetHistory[0];

	mov	edx, 4
	imul	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [esi+edx+452]
	mov	DWORD PTR [ecx+eax+452], edx

; 696  : 			gndTargetHistory[0] = firstSimTarg;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _firstSimTarg$[ebp]
	mov	DWORD PTR [ecx+eax+452], edx
$LN4@FindJDAMGr:

; 697  : 		}
; 698  : 	}
; 699  : 	else

	jmp	SHORT $LN3@FindJDAMGr
$LN6@FindJDAMGr:

; 700  : 		firstSimTarg = 0;

	mov	DWORD PTR _firstSimTarg$[ebp], 0
$LN3@FindJDAMGr:

; 701  : 
; 702  : 	// 2001-07-29 S.G. If I was shooting at a (not necessarely THIS one) campaign object, say I'm not anymore since the object deaggregated.
; 703  : 	if (((FlightClass *)self->GetCampaignObject())->whoShot == self) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+448]
	cmp	edx, DWORD PTR [ecx+56]
	jne	SHORT $LN2@FindJDAMGr

; 704  : 		((FlightClass *)self->GetCampaignObject())->shotAt = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR [eax+444], 0

; 705  : 		((FlightClass *)self->GetCampaignObject())->whoShot = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR [eax+448], 0
$LN2@FindJDAMGr:

; 706  : 	}
; 707  : 
; 708  : 	// JB 011017 from Schumi if targetNumComponents is less than usComponents, then of course there is no target anymore for the wingmen to bomb, and firstSimTarg is NULL.
; 709  : 	if (firstSimTarg == NULL && targetNumComponents && targetNumComponents < usComponents)

	cmp	DWORD PTR _firstSimTarg$[ebp], 0
	jne	SHORT $LN1@FindJDAMGr
	cmp	DWORD PTR _targetNumComponents$[ebp], 0
	je	SHORT $LN1@FindJDAMGr
	mov	edx, DWORD PTR _targetNumComponents$[ebp]
	cmp	edx, DWORD PTR _usComponents$[ebp]
	jge	SHORT $LN1@FindJDAMGr

; 710  : 	{
; 711  : 		FeatureNumber = (rand() % targetNumComponents);

	call	_rand
	cdq
	idiv	DWORD PTR _targetNumComponents$[ebp]
	mov	DWORD PTR _FeatureNumber$[ebp], edx

; 712  : 		firstSimTarg = targetGroup->GetComponentEntity (rand() % targetNumComponents);

	call	_rand
	cdq
	idiv	DWORD PTR _targetNumComponents$[ebp]
	push	edx
	mov	ecx, DWORD PTR _targetGroup$[ebp]
	call	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentEntity
	mov	DWORD PTR _firstSimTarg$[ebp], eax
$LN1@FindJDAMGr:

; 713  : 	}
; 714  : 
; 715  : 	return FeatureNumber;

	mov	eax, DWORD PTR _FeatureNumber$[ebp]
$LN32@FindJDAMGr:

; 716  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?FindJDAMGroundTarget@DigitalBrain@@QAEHPAVCampBaseClass@@HH@Z ENDP ; DigitalBrain::FindJDAMGroundTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\winglogic.cpp
_TEXT	SEGMENT
_flightMember$ = -56					; size = 16
_otherHaveHARMS$ = -40					; size = 4
_haveHARMS$ = -36					; size = 4
_gotRadar$ = -32					; size = 4
tv148 = -28						; size = 4
_usComponents$ = -24					; size = 4
_this$ = -20						; size = 4
_firstSimTarg$ = -16					; size = 4
_simTarg$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_targetGroup$ = 8					; size = 4
_targetNumComponents$ = 12				; size = 4
_startPos$ = 16						; size = 4
?FindSimAirTarget@DigitalBrain@@AAEPAVSimBaseClass@@PAVCampBaseClass@@HH@Z PROC ; DigitalBrain::FindSimAirTarget
; _this$ = ecx

; 420  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 421  : 	int i = 0, j = 0, gotRadar = FALSE;

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _j$[ebp], 0
	mov	DWORD PTR _gotRadar$[ebp], 0

; 422  : 	int usComponents = self->GetCampaignObject()->NumberOfComponents();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	mov	DWORD PTR _usComponents$[ebp], eax

; 423  : 	int haveHARMS = FALSE;

	mov	DWORD PTR _haveHARMS$[ebp], 0

; 424  : 	int otherHaveHARMS = FALSE;

	mov	DWORD PTR _otherHaveHARMS$[ebp], 0

; 425  : 	SimBaseClass *simTarg = NULL;

	mov	DWORD PTR _simTarg$[ebp], 0

; 426  : 	SimBaseClass *firstSimTarg = NULL;

	mov	DWORD PTR _firstSimTarg$[ebp], 0

; 427  : 	AircraftClass *flightMember[4] =  { 0 }; // Maximum of 4 planes per flight with no target as default

	mov	DWORD PTR _flightMember$[ebp], 0
	xor	ecx, ecx
	mov	DWORD PTR _flightMember$[ebp+4], ecx
	mov	DWORD PTR _flightMember$[ebp+8], ecx
	mov	DWORD PTR _flightMember$[ebp+12], ecx

; 428  : 
; 429  : 	// Get the flight aircrafts (once per call instead of once per target querried)
; 430  : 	for (i = 0; i < usComponents; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN23@FindSimAir
$LN22@FindSimAir:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN23@FindSimAir:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _usComponents$[ebp]
	jge	SHORT $LN21@FindSimAir

; 431  : 		// I onced tried to get the player's current target so it could be skipped by the AI but
; 432  : 		// all the player's are not on the same PC as the AI so this is not valid.
; 433  : 		// Therefore, only get this from digital planes, or the player if he is local
; 434  : 		// 2002-03-08 MODIFIED BY S.G. Code change so I'm only calling GetComponentEntity once and checking if it returns non NULL
; 435  : 		flightMember[i] = (AircraftClass *)self->GetCampaignObject()->GetComponentEntity(i);

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentEntity
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _flightMember$[ebp+ecx*4], eax

; 436  : 		if (flightMember[i] && (!flightMember[i]->IsDigital() && !flightMember[i]->IsLocal()))

	mov	edx, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _flightMember$[ebp+edx*4], 0
	je	SHORT $LN20@FindSimAir
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+eax*4]
	call	?IsDigital@AircraftClass@@QAEHXZ	; AircraftClass::IsDigital
	test	eax, eax
	jne	SHORT $LN20@FindSimAir
	mov	ecx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+ecx*4]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN20@FindSimAir

; 437  : 		{
; 438  : 			flightMember[i] = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _flightMember$[ebp+eax*4], 0
$LN20@FindSimAir:

; 439  : 		}
; 440  : 	}

	jmp	SHORT $LN22@FindSimAir
$LN21@FindSimAir:

; 441  : 
; 442  : 	// Check each sim entity in the campaign entity in succession, starting at startPos.
; 443  : 	// When incrementing i, use 0 if we had a 'startPos' but it wasn't valid
; 444  : 
; 445  : 	for (i = startPos; i < targetNumComponents; i = startPos ? 0 : i + 1, startPos = 0 ) {

	mov	ecx, DWORD PTR _startPos$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN19@FindSimAir
$LN18@FindSimAir:
	cmp	DWORD PTR _startPos$[ebp], 0
	je	SHORT $LN26@FindSimAir
	mov	DWORD PTR tv148[ebp], 0
	jmp	SHORT $LN27@FindSimAir
$LN26@FindSimAir:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR tv148[ebp], edx
$LN27@FindSimAir:
	mov	eax, DWORD PTR tv148[ebp]
	mov	DWORD PTR _i$[ebp], eax
	mov	DWORD PTR _startPos$[ebp], 0
$LN19@FindSimAir:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _targetNumComponents$[ebp]
	jge	$LN17@FindSimAir

; 446  : 		// Get the sim object associated to this entity number
; 447  : 		simTarg = targetGroup->GetComponentEntity(i);

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _targetGroup$[ebp]
	call	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentEntity
	mov	DWORD PTR _simTarg$[ebp], eax

; 448  : 
; 449  : 		if (!simTarg) //sanity check

	cmp	DWORD PTR _simTarg$[ebp], 0
	jne	SHORT $LN16@FindSimAir

; 450  : 			continue;

	jmp	SHORT $LN18@FindSimAir
$LN16@FindSimAir:

; 451  : 
; 452  : 		// Is it alive?
; 453  : 		if (simTarg->IsExploding() || simTarg->IsDead() || simTarg->pctStrength <= 0.0f )

	mov	eax, DWORD PTR _simTarg$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	eax, DWORD PTR [edx+208]
	call	eax
	test	eax, eax
	jne	SHORT $LN14@FindSimAir
	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	eax, DWORD PTR [edx+340]
	call	eax
	test	eax, eax
	jne	SHORT $LN14@FindSimAir
	mov	ecx, DWORD PTR _simTarg$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx+292]
	jb	SHORT $LN15@FindSimAir
$LN14@FindSimAir:

; 454  : 			continue; // Dead thing, ignore it.

	jmp	$LN18@FindSimAir
$LN15@FindSimAir:

; 455  : 
; 456  : 		// Are flight members already using it (was using it) as a target?
; 457  : 		for (j = 0; j < usComponents; j++)		// MN - use the gndtargethistory for divert air targets, too.

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN13@FindSimAir
$LN12@FindSimAir:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN13@FindSimAir:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _usComponents$[ebp]
	jge	$LN11@FindSimAir

; 458  : 		{
; 459  : 			// Cobra - You will always get a match with my last target...skip me
; 460  : 			if (flightMember[j]->vehicleInUnit == self->vehicleInUnit)

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _flightMember$[ebp+ecx*4]
	movzx	eax, BYTE PTR [edx+664]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	movzx	ecx, BYTE PTR [edx+664]
	cmp	eax, ecx
	jne	SHORT $LN10@FindSimAir

; 461  : 				continue;

	jmp	SHORT $LN12@FindSimAir
$LN10@FindSimAir:

; 462  : 			if (flightMember[j] && flightMember[j]->DBrain() && ((flightMember[j]->DBrain()->airtargetPtr && flightMember[j]->DBrain()->airtargetPtr->BaseData() == simTarg) || flightMember[j]->DBrain()->gndTargetHistory[0] == simTarg || flightMember[j]->DBrain()->gndTargetHistory[1] == simTarg))

	mov	edx, DWORD PTR _j$[ebp]
	cmp	DWORD PTR _flightMember$[ebp+edx*4], 0
	je	$LN9@FindSimAir
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+eax*4]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	test	eax, eax
	je	SHORT $LN9@FindSimAir
	mov	ecx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+ecx*4]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+228], 0
	je	SHORT $LN7@FindSimAir
	mov	edx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+edx*4]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, DWORD PTR [eax+228]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	eax, DWORD PTR _simTarg$[ebp]
	je	SHORT $LN8@FindSimAir
$LN7@FindSimAir:
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+eax*4]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR [eax+ecx+452]
	cmp	edx, DWORD PTR _simTarg$[ebp]
	je	SHORT $LN8@FindSimAir
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+eax*4]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [eax+ecx+452]
	cmp	edx, DWORD PTR _simTarg$[ebp]
	jne	SHORT $LN9@FindSimAir
$LN8@FindSimAir:

; 463  : 				break;  // Yes, ignore it.

	jmp	SHORT $LN11@FindSimAir
$LN9@FindSimAir:

; 464  : 		}

	jmp	$LN12@FindSimAir
$LN11@FindSimAir:

; 465  : 
; 466  : 		// If we didn't reach the end, someone else is using it so skip it.
; 467  : 		if (j != usComponents)

	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _usComponents$[ebp]
	je	SHORT $LN6@FindSimAir

; 468  : 			continue;

	jmp	$LN18@FindSimAir
$LN6@FindSimAir:

; 469  : 
; 470  : 		// Mark this sim entity as the first target with a match (in case no emitting targets are left standing, or it's a feature)
; 471  : 		if (!firstSimTarg)

	cmp	DWORD PTR _firstSimTarg$[ebp], 0
	jne	SHORT $LN5@FindSimAir

; 472  : 			firstSimTarg = simTarg;

	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	DWORD PTR _firstSimTarg$[ebp], ecx
$LN5@FindSimAir:

; 473  : 
; 474  : 		// Look for the next one...
; 475  : 	}

	jmp	$LN18@FindSimAir
$LN17@FindSimAir:

; 476  : 	if (startPos < targetNumComponents) {

	mov	edx, DWORD PTR _startPos$[ebp]
	cmp	edx, DWORD PTR _targetNumComponents$[ebp]
	jge	SHORT $LN4@FindSimAir

; 477  : 		// Keep track of the last two targets but only if we have one, otherwise, leave our previous targets alone
; 478  : 		if (firstSimTarg) {

	cmp	DWORD PTR _firstSimTarg$[ebp], 0
	je	SHORT $LN3@FindSimAir

; 479  : 			gndTargetHistory[1] = gndTargetHistory[0];

	mov	eax, 4
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [esi+eax+452]
	mov	DWORD PTR [edx+ecx+452], eax

; 480  : 			gndTargetHistory[0] = firstSimTarg;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _firstSimTarg$[ebp]
	mov	DWORD PTR [edx+ecx+452], eax
$LN3@FindSimAir:

; 481  : 		}
; 482  : 	}
; 483  : 	else

	jmp	SHORT $LN2@FindSimAir
$LN4@FindSimAir:

; 484  : 		firstSimTarg = 0;

	mov	DWORD PTR _firstSimTarg$[ebp], 0
$LN2@FindSimAir:

; 485  : 
; 486  : 	// JB 011017 from Schumi if targetNumComponents is less than usComponents, then of course there is no target anymore for the wingmen to bomb, and firstSimTarg is NULL.
; 487  : 	if (firstSimTarg == NULL && targetNumComponents && targetNumComponents < usComponents)

	cmp	DWORD PTR _firstSimTarg$[ebp], 0
	jne	SHORT $LN1@FindSimAir
	cmp	DWORD PTR _targetNumComponents$[ebp], 0
	je	SHORT $LN1@FindSimAir
	mov	ecx, DWORD PTR _targetNumComponents$[ebp]
	cmp	ecx, DWORD PTR _usComponents$[ebp]
	jge	SHORT $LN1@FindSimAir

; 488  : 		firstSimTarg = targetGroup->GetComponentEntity (rand() % targetNumComponents);

	call	_rand
	cdq
	idiv	DWORD PTR _targetNumComponents$[ebp]
	push	edx
	mov	ecx, DWORD PTR _targetGroup$[ebp]
	call	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentEntity
	mov	DWORD PTR _firstSimTarg$[ebp], eax
$LN1@FindSimAir:

; 489  : 
; 490  : 	return firstSimTarg;

	mov	eax, DWORD PTR _firstSimTarg$[ebp]

; 491  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?FindSimAirTarget@DigitalBrain@@AAEPAVSimBaseClass@@PAVCampBaseClass@@HH@Z ENDP ; DigitalBrain::FindSimAirTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\winglogic.cpp
_TEXT	SEGMENT
_flightMember$ = -72					; size = 16
tv263 = -56						; size = 4
tv256 = -52						; size = 4
tv243 = -48						; size = 4
_gotRadar$ = -44					; size = 4
_usComponents$ = -40					; size = 4
_otherHaveHARMS$ = -36					; size = 4
_fc$ = -32						; size = 4
_haveHARMS$ = -28					; size = 4
_j$1 = -24						; size = 4
_firstSimTarg$ = -20					; size = 4
_j$ = -16						; size = 4
_this$ = -12						; size = 4
_simTarg$ = -8						; size = 4
_i$ = -4						; size = 4
_targetGroup$ = 8					; size = 4
_targetNumComponents$ = 12				; size = 4
_startPos$ = 16						; size = 4
?FindSimGroundTarget@DigitalBrain@@AAEPAVSimBaseClass@@PAVCampBaseClass@@HH@Z PROC ; DigitalBrain::FindSimGroundTarget
; _this$ = ecx

; 230  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 231  : 	int i = 0, j = 0, gotRadar = FALSE;

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _j$[ebp], 0
	mov	DWORD PTR _gotRadar$[ebp], 0

; 232  : 	int usComponents = self->GetCampaignObject()->NumberOfComponents();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	mov	DWORD PTR _usComponents$[ebp], eax

; 233  : 	int haveHARMS = FALSE;

	mov	DWORD PTR _haveHARMS$[ebp], 0

; 234  : 	int otherHaveHARMS = FALSE;

	mov	DWORD PTR _otherHaveHARMS$[ebp], 0

; 235  : 	FeatureClassDataType	*fc = NULL;

	mov	DWORD PTR _fc$[ebp], 0

; 236  : 	SimBaseClass *simTarg = NULL;

	mov	DWORD PTR _simTarg$[ebp], 0

; 237  : 	SimBaseClass *firstSimTarg = NULL;

	mov	DWORD PTR _firstSimTarg$[ebp], 0

; 238  : 	AircraftClass *flightMember[4] =  { 0 }; // Maximum of 4 planes per flight with no target as default

	mov	DWORD PTR _flightMember$[ebp], 0
	xor	ecx, ecx
	mov	DWORD PTR _flightMember$[ebp+4], ecx
	mov	DWORD PTR _flightMember$[ebp+8], ecx
	mov	DWORD PTR _flightMember$[ebp+12], ecx

; 239  : 
; 240  : 	// Get the flight aircrafts (once per call instead of once per target querried)
; 241  : 	for (i = 0; i < usComponents; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN62@FindSimGro
$LN61@FindSimGro:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN62@FindSimGro:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _usComponents$[ebp]
	jge	$LN60@FindSimGro

; 242  : 		// I onced tried to get the player's current target so it could be skipped by the AI but
; 243  : 		// all the player's are not on the same PC as the AI so this is not valid.
; 244  : 		// Therefore, only get this from digital planes, or the player if he is local
; 245  : 		// 2002-03-08 MODIFIED BY S.G. Code change so I'm only calling GetComponentEntity once and checking if it returns non NULL
; 246  : 		flightMember[i] = (AircraftClass *)self->GetCampaignObject()->GetComponentEntity(i);

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentEntity
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _flightMember$[ebp+ecx*4], eax

; 247  : 		if (flightMember[i] && (flightMember[i]->IsDigital() || flightMember[i]->IsLocal())) {

	mov	edx, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _flightMember$[ebp+edx*4], 0
	je	$LN59@FindSimGro
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+eax*4]
	call	?IsDigital@AircraftClass@@QAEHXZ	; AircraftClass::IsDigital
	test	eax, eax
	jne	SHORT $LN58@FindSimGro
	mov	ecx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+ecx*4]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	edx, al
	test	edx, edx
	je	$LN59@FindSimGro
$LN58@FindSimGro:

; 248  : 			// Now that we know it's local (hopefully, digitals are also local), see if they are carrying HARMS
; 249  : 			// By first looking at their 'hasHARM' status
; 250  : 			if (flightMember[i]->DBrain()->hasHARM) {

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+eax*4]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+188], 0
	je	SHORT $LN57@FindSimGro

; 251  : 				if (i == isWing)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+24]
	jne	SHORT $LN56@FindSimGro

; 252  : 					haveHARMS = TRUE;

	mov	DWORD PTR _haveHARMS$[ebp], 1

; 253  : 				else

	jmp	SHORT $LN55@FindSimGro
$LN56@FindSimGro:

; 254  : 					otherHaveHARMS = TRUE;

	mov	DWORD PTR _otherHaveHARMS$[ebp], 1
$LN55@FindSimGro:

; 255  : 			}
; 256  : 			// Can't rely on 'hasHARM' so check the loadout of each plane yourself...
; 257  : 			else {

	jmp	$LN51@FindSimGro
$LN57@FindSimGro:

; 258  : 				// Try the loadout as long I didn't find an HARM on mine or another plane higher than us has an HARM
; 259  : 				for (int j = 0; !haveHARMS && !(otherHaveHARMS && i > isWing) && flightMember[i]->Sms && j < flightMember[i]->Sms->NumHardpoints(); j++) {

	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN53@FindSimGro
$LN52@FindSimGro:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN53@FindSimGro:
	cmp	DWORD PTR _haveHARMS$[ebp], 0
	jne	$LN51@FindSimGro
	cmp	DWORD PTR _otherHaveHARMS$[ebp], 0
	je	SHORT $LN50@FindSimGro
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+24]
	jg	$LN51@FindSimGro
$LN50@FindSimGro:
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+eax*4]
	cmp	DWORD PTR [ecx+940], 0
	je	$LN51@FindSimGro
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _flightMember$[ebp+edx*4]
	mov	ecx, DWORD PTR [eax+940]
	call	?NumHardpoints@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumHardpoints
	cmp	DWORD PTR _j$1[ebp], eax
	jge	$LN51@FindSimGro

; 260  : 					if (flightMember[i]->Sms->hardPoint[j]->weaponPointer && flightMember[i]->Sms->hardPoint[j]->GetWeaponClass() == wcHARMWpn) {

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _flightMember$[ebp+ecx*4]
	mov	eax, DWORD PTR [edx+940]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _j$1[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	add	ecx, 12					; 0000000cH
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN47@FindSimGro
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _flightMember$[ebp+ecx*4]
	mov	eax, DWORD PTR [edx+940]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _j$1[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _flightMember$[ebp+ecx*4]
	mov	ecx, DWORD PTR [edx+940]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _j$1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [eax+164]
	call	edx
	cmp	eax, 7
	jne	SHORT $LN47@FindSimGro

; 261  : 						if (i == isWing)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jne	SHORT $LN48@FindSimGro

; 262  : 							haveHARMS = TRUE;

	mov	DWORD PTR _haveHARMS$[ebp], 1

; 263  : 						else

	jmp	SHORT $LN47@FindSimGro
$LN48@FindSimGro:

; 264  : 							otherHaveHARMS = TRUE;

	mov	DWORD PTR _otherHaveHARMS$[ebp], 1
$LN47@FindSimGro:

; 265  : 					}
; 266  : 				}

	jmp	$LN52@FindSimGro
$LN51@FindSimGro:

; 267  : 			}
; 268  : 		}
; 269  : 		else

	jmp	SHORT $LN46@FindSimGro
$LN59@FindSimGro:

; 270  : 			flightMember[i] = NULL;

	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _flightMember$[ebp+edx*4], 0
$LN46@FindSimGro:

; 271  : 	}

	jmp	$LN61@FindSimGro
$LN60@FindSimGro:

; 272  : 
; 273  : 	// Check each sim entity in the campaign entity in succession, starting at startPos.
; 274  : 	// When incrementing i, use 0 if we had a 'startPos' but it wasn't valid
; 275  : 
; 276  : //#define SG_TEST_NO_RANDOM_TARGET // Define this to make sure an AI always goes at the same target. Makes it easier to debug with constant behaviour
; 277  : #ifndef SG_TEST_NO_RANDOM_TARGET
; 278  : 	// 2001-10-19 ADDED BY S.G. IF WE ARE USING AN HARM OR A MAVERICK, DON'T RANDOMIZE
; 279  : 	if (!haveHARMS && !hasAGMissile && targetNumComponents) 

	cmp	DWORD PTR _haveHARMS$[ebp], 0
	jne	$LN45@FindSimGro
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+184], 0
	jne	$LN45@FindSimGro
	cmp	DWORD PTR _targetNumComponents$[ebp], 0
	je	$LN45@FindSimGro

; 280  : 	{
; 281  : 		// JB 011014 Target "randomly" if its just a long line of vehicles
; 282  : 		if (startPos == 0)

	cmp	DWORD PTR _startPos$[ebp], 0
	jne	SHORT $LN41@FindSimGro

; 283  : 		{
; 284  : 			startPos = rand() % targetNumComponents;

	call	_rand
	cdq
	idiv	DWORD PTR _targetNumComponents$[ebp]
	mov	DWORD PTR _startPos$[ebp], edx

; 285  : 			for (i = startPos; i < targetNumComponents && startPos > 0; i++)

	mov	ecx, DWORD PTR _startPos$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN43@FindSimGro
$LN42@FindSimGro:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN43@FindSimGro:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _targetNumComponents$[ebp]
	jge	SHORT $LN41@FindSimGro
	cmp	DWORD PTR _startPos$[ebp], 0
	jle	SHORT $LN41@FindSimGro

; 286  : 				if (!targetGroup->GetComponentEntity(i)->IsVehicle() || !targetGroup->GetComponentEntity(i)->OnGround())

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _targetGroup$[ebp]
	call	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentEntity
	mov	DWORD PTR tv243[ebp], eax
	mov	edx, DWORD PTR tv243[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv243[ebp]
	mov	edx, DWORD PTR [eax+176]
	call	edx
	test	eax, eax
	je	SHORT $LN39@FindSimGro
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _targetGroup$[ebp]
	call	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentEntity
	mov	DWORD PTR tv256[ebp], eax
	mov	ecx, DWORD PTR tv256[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv256[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	jne	SHORT $LN40@FindSimGro
$LN39@FindSimGro:

; 287  : 					startPos = 0;

	mov	DWORD PTR _startPos$[ebp], 0
$LN40@FindSimGro:

; 288  : 		}

	jmp	SHORT $LN42@FindSimGro
$LN41@FindSimGro:

; 289  : 		// JB 011014
; 290  : 	}
; 291  : 	else

	jmp	SHORT $LN38@FindSimGro
$LN45@FindSimGro:

; 292  : 		startPos = 0;

	mov	DWORD PTR _startPos$[ebp], 0
$LN38@FindSimGro:

; 293  : #endif
; 294  : 
; 295  : 	for (i = startPos; i < targetNumComponents; i = startPos ? 0 : i + 1, startPos = 0 ) 

	mov	ecx, DWORD PTR _startPos$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN37@FindSimGro
$LN36@FindSimGro:
	cmp	DWORD PTR _startPos$[ebp], 0
	je	SHORT $LN65@FindSimGro
	mov	DWORD PTR tv263[ebp], 0
	jmp	SHORT $LN66@FindSimGro
$LN65@FindSimGro:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR tv263[ebp], edx
$LN66@FindSimGro:
	mov	eax, DWORD PTR tv263[ebp]
	mov	DWORD PTR _i$[ebp], eax
	mov	DWORD PTR _startPos$[ebp], 0
$LN37@FindSimGro:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _targetNumComponents$[ebp]
	jge	$LN35@FindSimGro

; 296  : 	{
; 297  : 		// Get the sim object associated to this entity number
; 298  : 		simTarg = targetGroup->GetComponentEntity(i);

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _targetGroup$[ebp]
	call	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentEntity
	mov	DWORD PTR _simTarg$[ebp], eax

; 299  : 
; 300  : 		if (!simTarg || F4IsBadReadPtr(simTarg, sizeof (simTarg))) //sanity check

	cmp	DWORD PTR _simTarg$[ebp], 0
	je	SHORT $LN33@FindSimGro
	push	4
	mov	eax, DWORD PTR _simTarg$[ebp]
	push	eax
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN34@FindSimGro
$LN33@FindSimGro:

; 301  : 			continue;

	jmp	SHORT $LN36@FindSimGro
$LN34@FindSimGro:

; 302  : 
; 303  : 		// Is it alive?
; 304  : 		if (simTarg->IsExploding() || simTarg->IsDead() || simTarg->pctStrength <= 0.0f ) // Cobra - add priority filter?

	mov	edx, DWORD PTR _simTarg$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	edx, DWORD PTR [eax+208]
	call	edx
	test	eax, eax
	jne	SHORT $LN31@FindSimGro
	mov	eax, DWORD PTR _simTarg$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	eax, DWORD PTR [edx+340]
	call	eax
	test	eax, eax
	jne	SHORT $LN31@FindSimGro
	mov	ecx, DWORD PTR _simTarg$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx+292]
	jb	SHORT $LN32@FindSimGro
$LN31@FindSimGro:

; 305  : 			continue; // Dead thing, ignore it.

	jmp	$LN36@FindSimGro
$LN32@FindSimGro:

; 306  : 
; 307  : 
; 308  : 		// COBRA - RED - skip if a target of no-interest
; 309  : 		if(!EvaluateTarget(simTarg->GetType()))

	mov	ecx, DWORD PTR _simTarg$[ebp]
	call	?GetType@SimBaseClass@@QBEEXZ		; SimBaseClass::GetType
	movzx	edx, al
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EvaluateTarget@DigitalBrain@@IAE_NK@Z	; DigitalBrain::EvaluateTarget
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN30@FindSimGro

; 310  : 			continue;

	jmp	$LN36@FindSimGro
$LN30@FindSimGro:

; 311  : 		// FRB - Put it back in
; 312  : //*		// Cobra - Don't target low priority features (trees, fences, sheds)
; 313  : 		if (simTarg->IsStatic()) // It's a feature

	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	eax, DWORD PTR [edx+180]
	call	eax
	test	eax, eax
	je	SHORT $LN27@FindSimGro

; 314  : 		{
; 315  : 			fc = GetFeatureClassData(((Objective)simTarg)->GetFeatureID(i));

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _simTarg$[ebp]
	call	?GetFeatureID@ObjectiveClass@@QAEHH@Z	; ObjectiveClass::GetFeatureID
	push	eax
	call	?GetFeatureClassData@@YAPAUFeatureClassDataType@@H@Z ; GetFeatureClassData
	add	esp, 4
	mov	DWORD PTR _fc$[ebp], eax

; 316  : 			if (fc && !F4IsBadReadPtr(fc, sizeof (fc)) && fc->Priority > 2) // higher priority number = lower priority

	cmp	DWORD PTR _fc$[ebp], 0
	je	SHORT $LN28@FindSimGro
	push	4
	mov	edx, DWORD PTR _fc$[ebp]
	push	edx
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN28@FindSimGro
	mov	ecx, DWORD PTR _fc$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	cmp	edx, 2
	jle	SHORT $LN28@FindSimGro

; 317  : 				continue;

	jmp	$LN36@FindSimGro
$LN28@FindSimGro:

; 318  : 			if (((Objective)simTarg)->GetFeatureStatus(i) == VIS_DESTROYED)

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _simTarg$[ebp]
	call	?GetFeatureStatus@ObjectiveClass@@QAEHH@Z ; ObjectiveClass::GetFeatureStatus
	cmp	eax, 3
	jne	SHORT $LN27@FindSimGro

; 319  : 				continue;

	jmp	$LN36@FindSimGro
$LN27@FindSimGro:

; 320  : 		}
; 321  : //*/
; 322  : 		// Are flight members already using it (was using it) as a target?
; 323  : 		for (j = 0; j < usComponents; j++){

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN26@FindSimGro
$LN25@FindSimGro:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN26@FindSimGro:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _usComponents$[ebp]
	jge	$LN24@FindSimGro

; 324  : 			if (flightMember[j]) {

	mov	eax, DWORD PTR _j$[ebp]
	cmp	DWORD PTR _flightMember$[ebp+eax*4], 0
	je	$LN21@FindSimGro

; 325  : 				if (flightMember[j]->vehicleInUnit == self->vehicleInUnit){

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _flightMember$[ebp+ecx*4]
	movzx	eax, BYTE PTR [edx+664]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	movzx	ecx, BYTE PTR [edx+664]
	cmp	eax, ecx
	jne	SHORT $LN22@FindSimGro

; 326  : 					continue;

	jmp	SHORT $LN25@FindSimGro
$LN22@FindSimGro:

; 327  : 				}
; 328  : 
; 329  : 				if (
; 330  : 					flightMember[j]->DBrain() && 
; 331  : 					(
; 332  : 						(
; 333  : 							flightMember[j]->DBrain()->groundTargetPtr && 
; 334  : 							flightMember[j]->DBrain()->groundTargetPtr->BaseData() == simTarg
; 335  : 						) || 
; 336  : 						flightMember[j]->DBrain()->gndTargetHistory[0] == simTarg || 
; 337  : 						flightMember[j]->DBrain()->gndTargetHistory[1] == simTarg
; 338  : 					)
; 339  : 				){

	mov	edx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+edx*4]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	test	eax, eax
	je	SHORT $LN21@FindSimGro
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+eax*4]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+224], 0
	je	SHORT $LN19@FindSimGro
	mov	ecx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+ecx*4]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	eax, DWORD PTR _simTarg$[ebp]
	je	SHORT $LN20@FindSimGro
$LN19@FindSimGro:
	mov	edx, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+edx*4]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR [eax+ecx+452]
	cmp	edx, DWORD PTR _simTarg$[ebp]
	je	SHORT $LN20@FindSimGro
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _flightMember$[ebp+eax*4]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR [eax+ecx+452]
	cmp	edx, DWORD PTR _simTarg$[ebp]
	jne	SHORT $LN21@FindSimGro
$LN20@FindSimGro:

; 340  : 					break;  // Yes, ignore it.

	jmp	SHORT $LN24@FindSimGro
$LN21@FindSimGro:

; 341  : 				}
; 342  : 			}
; 343  : 		}

	jmp	$LN25@FindSimGro
$LN24@FindSimGro:

; 344  : 
; 345  : 		// If we didn't reach the end, someone else is using it so skip it.
; 346  : 		if (j != usComponents)

	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _usComponents$[ebp]
	je	SHORT $LN18@FindSimGro

; 347  : 			continue;

	jmp	$LN36@FindSimGro
$LN18@FindSimGro:

; 348  : 
; 349  : 		// Mark this sim entity as the first target with a match (in case no emitting targets are left standing, or it's a feature)
; 350  : 		if (!firstSimTarg)

	cmp	DWORD PTR _firstSimTarg$[ebp], 0
	jne	SHORT $LN17@FindSimGro

; 351  : 			firstSimTarg = simTarg;

	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	DWORD PTR _firstSimTarg$[ebp], ecx
$LN17@FindSimGro:

; 352  : 
; 353  : 		// Is it an objective and we are not carrying HARMS (HARMS will go for the radar feature)? If so, stop right now and use that feature
; 354  : 		// Cobra - take out radar with whatever AG weapon you have
; 355  : 		// RED -  Code Restored, was causing continuous hunting for radars with any weapon!!!!
; 356  : 
; 357  : 		// FRB - So?!!
; 358  : 		//if (targetGroup->IsObjective() && !hasHARM)	break;
; 359  : 
; 360  : 		// If I have HARMS or no one has any and the entity has a radar, choose it
; 361  : 		// 2001-07-12 S.G. Testing if radar first so it's not becoming an air defense if i have no harms
; 362  : 		if ( (simTarg->IsVehicle() && ((SimVehicleClass *)simTarg)->GetRadarType() != RDR_NO_RADAR) ||	// It's a vehicle and it has a radar
; 363  : 			 (simTarg->IsStatic() && ((SimStaticClass *)simTarg)->GetRadarType() != RDR_NO_RADAR)) 	// It's a feature and it has a radar

	mov	edx, DWORD PTR _simTarg$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	edx, DWORD PTR [eax+176]
	call	edx
	test	eax, eax
	je	SHORT $LN14@FindSimGro
	mov	eax, DWORD PTR _simTarg$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	eax, DWORD PTR [edx+292]
	call	eax
	test	eax, eax
	jne	SHORT $LN15@FindSimGro
$LN14@FindSimGro:
	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	eax, DWORD PTR [edx+180]
	call	eax
	test	eax, eax
	je	SHORT $LN16@FindSimGro
	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	eax, DWORD PTR [edx+292]
	call	eax
	test	eax, eax
	je	SHORT $LN16@FindSimGro
$LN15@FindSimGro:

; 364  : 		{	
; 365  : 			// 2001-07-29 S.G. If I was shooting at the campaign object, then I stick to it
; 366  : 			if ((((FlightClass *)self->GetCampaignObject())->shotAt == targetGroup && ((FlightClass *)self->GetCampaignObject())->whoShot == self) || ((((FlightClass *)self->GetCampaignObject())->whoShot == NULL) && (haveHARMS || !otherHaveHARMS))) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	edx, DWORD PTR [eax+444]
	cmp	edx, DWORD PTR _targetGroup$[ebp]
	jne	SHORT $LN11@FindSimGro
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+448]
	cmp	edx, DWORD PTR [ecx+56]
	je	SHORT $LN10@FindSimGro
$LN11@FindSimGro:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	cmp	DWORD PTR [eax+448], 0
	jne	SHORT $LN13@FindSimGro
	cmp	DWORD PTR _haveHARMS$[ebp], 0
	jne	SHORT $LN10@FindSimGro
	cmp	DWORD PTR _otherHaveHARMS$[ebp], 0
	jne	SHORT $LN13@FindSimGro
$LN10@FindSimGro:

; 367  : 				gotRadar = TRUE;

	mov	DWORD PTR _gotRadar$[ebp], 1

; 368  : 				firstSimTarg = simTarg; // Yes, use it for a target

	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	DWORD PTR _firstSimTarg$[ebp], ecx

; 369  : 				break; // and stop looking

	jmp	SHORT $LN35@FindSimGro
$LN13@FindSimGro:

; 370  : 			}
; 371  : 		}
; 372  : 		// 2001-07-12 S.G. DON'T CHECK IF AIR DEFENSE IF IT'S A RADAR
; 373  : 		else 

	jmp	SHORT $LN7@FindSimGro
$LN16@FindSimGro:

; 374  : 		{
; 375  : 			// Prioritize air defense thingies...
; 376  : 			if (simTarg->IsGroundVehicle() && ((GroundClass *)simTarg)->isAirDefense) 

	mov	edx, DWORD PTR _simTarg$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _simTarg$[ebp]
	mov	edx, DWORD PTR [eax+196]
	call	edx
	test	eax, eax
	je	SHORT $LN7@FindSimGro
	mov	eax, DWORD PTR _simTarg$[ebp]
	mov	ecx, DWORD PTR [eax+772]
	shr	ecx, 7
	and	ecx, 1
	je	SHORT $LN7@FindSimGro

; 377  : 			{
; 378  : 				gotRadar = TRUE;

	mov	DWORD PTR _gotRadar$[ebp], 1

; 379  : 				firstSimTarg = simTarg; // Yes, use it for a target

	mov	edx, DWORD PTR _simTarg$[ebp]
	mov	DWORD PTR _firstSimTarg$[ebp], edx

; 380  : 				// 2001-07-12 S.G. DON'T CONTINUE IF I HAVE NO HARMS
; 381  : 				if (!haveHARMS)

	cmp	DWORD PTR _haveHARMS$[ebp], 0
	jne	SHORT $LN7@FindSimGro

; 382  : 					break;

	jmp	SHORT $LN35@FindSimGro
$LN7@FindSimGro:

; 383  : 			}
; 384  : 		}
; 385  : 		// Look for the next one...
; 386  : 	}

	jmp	$LN36@FindSimGro
$LN35@FindSimGro:

; 387  : 	if (startPos < targetNumComponents) 

	mov	eax, DWORD PTR _startPos$[ebp]
	cmp	eax, DWORD PTR _targetNumComponents$[ebp]
	jge	SHORT $LN6@FindSimGro

; 388  : 	{
; 389  : 		// Now after all this, see if the AI is too dumb for selecting a valid target... 
; 390  : 		// If he is, select at random
; 391  : 		if (!gotRadar && (unsigned)((unsigned)rand() % (unsigned)32) > (unsigned)((unsigned)SkillLevel() + (unsigned)28))

	cmp	DWORD PTR _gotRadar$[ebp], 0
	jne	SHORT $LN5@FindSimGro
	call	_rand
	xor	edx, edx
	mov	ecx, 32					; 00000020H
	div	ecx
	mov	esi, edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SkillLevel@BaseBrain@@QAEHXZ		; BaseBrain::SkillLevel
	add	eax, 28					; 0000001cH
	cmp	esi, eax
	jbe	SHORT $LN5@FindSimGro

; 392  : 			firstSimTarg = targetGroup->GetComponentEntity (rand() % targetNumComponents);

	call	_rand
	cdq
	idiv	DWORD PTR _targetNumComponents$[ebp]
	push	edx
	mov	ecx, DWORD PTR _targetGroup$[ebp]
	call	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentEntity
	mov	DWORD PTR _firstSimTarg$[ebp], eax
$LN5@FindSimGro:

; 393  : 
; 394  : 		// Keep track of the last two targets but only if we have one, otherwise, leave our previous targets alone
; 395  : 		if (firstSimTarg) {

	cmp	DWORD PTR _firstSimTarg$[ebp], 0
	je	SHORT $LN4@FindSimGro

; 396  : 			gndTargetHistory[1] = gndTargetHistory[0];

	mov	edx, 4
	imul	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [esi+edx+452]
	mov	DWORD PTR [ecx+eax+452], edx

; 397  : 			gndTargetHistory[0] = firstSimTarg;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _firstSimTarg$[ebp]
	mov	DWORD PTR [ecx+eax+452], edx
$LN4@FindSimGro:

; 398  : 		}
; 399  : 	}
; 400  : 	else

	jmp	SHORT $LN3@FindSimGro
$LN6@FindSimGro:

; 401  : 		firstSimTarg = 0;

	mov	DWORD PTR _firstSimTarg$[ebp], 0
$LN3@FindSimGro:

; 402  : 
; 403  : 	// 2001-07-29 S.G. If I was shooting at a (not necessarely THIS one) campaign object, say I'm not anymore since the object deaggregated.
; 404  : 	if (((FlightClass *)self->GetCampaignObject())->whoShot == self) 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+448]
	cmp	edx, DWORD PTR [ecx+56]
	jne	SHORT $LN2@FindSimGro

; 405  : 	{
; 406  : 		((FlightClass *)self->GetCampaignObject())->shotAt = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR [eax+444], 0

; 407  : 		((FlightClass *)self->GetCampaignObject())->whoShot = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR [eax+448], 0
$LN2@FindSimGro:

; 408  : 	}
; 409  : 
; 410  : 	// JB 011017 from Schumi if targetNumComponents is less than usComponents, then of course there is no target anymore for the wingmen to bomb, and firstSimTarg is NULL.
; 411  : 	if (firstSimTarg == NULL && targetNumComponents && targetNumComponents < usComponents)

	cmp	DWORD PTR _firstSimTarg$[ebp], 0
	jne	SHORT $LN1@FindSimGro
	cmp	DWORD PTR _targetNumComponents$[ebp], 0
	je	SHORT $LN1@FindSimGro
	mov	edx, DWORD PTR _targetNumComponents$[ebp]
	cmp	edx, DWORD PTR _usComponents$[ebp]
	jge	SHORT $LN1@FindSimGro

; 412  : 		firstSimTarg = targetGroup->GetComponentEntity (rand() % targetNumComponents);

	call	_rand
	cdq
	idiv	DWORD PTR _targetNumComponents$[ebp]
	push	edx
	mov	ecx, DWORD PTR _targetGroup$[ebp]
	call	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentEntity
	mov	DWORD PTR _firstSimTarg$[ebp], eax
$LN1@FindSimGro:

; 413  : 
; 414  : 	return firstSimTarg;

	mov	eax, DWORD PTR _firstSimTarg$[ebp]

; 415  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?FindSimGroundTarget@DigitalBrain@@AAEPAVSimBaseClass@@PAVCampBaseClass@@HH@Z ENDP ; DigitalBrain::FindSimGroundTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\winglogic.cpp
_TEXT	SEGMENT
$T1 = -44						; size = 8
_obj$2 = -36						; size = 4
_y$ = -32						; size = 2
_x$ = -28						; size = 2
_leader$ = -24						; size = 4
_this$ = -20						; size = 4
_pos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_lead$ = 8						; size = 8
?AiCheckForUnauthLand@DigitalBrain@@AAEXVVU_ID@@@Z PROC	; DigitalBrain::AiCheckForUnauthLand
; _this$ = ecx

; 910  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 911  : 	GridIndex	x,y;
; 912  : 	vector		pos;
; 913  : 
; 914  : 	AircraftClass* leader = (AircraftClass*) vuDatabase->Find(lead);

	mov	eax, DWORD PTR _lead$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _lead$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _leader$[ebp], eax

; 915  : 
; 916  : 	if(!self->OnGround() && leader && mpActionFlags[AI_FOLLOW_FORMATION] == TRUE && leader->DBrain()->ATCStatus() < tReqTaxi && leader->OnGround() && atcstatus == noATC) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	jne	$LN1@AiCheckFor
	cmp	DWORD PTR _leader$[ebp], 0
	je	$LN1@AiCheckFor
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx+760], 1
	jne	$LN1@AiCheckFor
	mov	ecx, DWORD PTR _leader$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, eax
	call	?ATCStatus@DigitalBrain@@QAE?AW4AtcStatusEnum@@XZ ; DigitalBrain::ATCStatus
	cmp	eax, 19					; 00000013H
	jge	$LN1@AiCheckFor
	mov	eax, DWORD PTR _leader$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _leader$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	je	$LN1@AiCheckFor
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+328], 0
	jne	$LN1@AiCheckFor

; 917  : 		
; 918  : 		pos.x = leader->XPos();

	mov	ecx, DWORD PTR _leader$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _pos$[ebp]

; 919  : 		pos.y = leader->YPos();

	mov	ecx, DWORD PTR _leader$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _pos$[ebp+4]

; 920  : 		ConvertSimToGrid (&pos, &x, &y);

	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?ConvertSimToGrid@@YAXPAUvector@@PAF1@Z	; ConvertSimToGrid
	add	esp, 12					; 0000000cH

; 921  : 		
; 922  : 		Objective obj = FindNearestFriendlyAirbase (self->GetTeam(), x, y);

	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	call	?FindNearestFriendlyAirbase@@YAPAVObjectiveClass@@EFF@Z ; FindNearestFriendlyAirbase
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _obj$2[ebp], eax

; 923  : 		if(obj) {

	cmp	DWORD PTR _obj$2[ebp], 0
	je	SHORT $LN1@AiCheckFor

; 924  : 			airbase = obj->Id();

	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _obj$2[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+308], ecx
	mov	DWORD PTR [eax+312], edx

; 925  : 			atcstatus = lReqClearance;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+328], 1

; 926  : 			SendATCMsg(atcstatus);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+328]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendATCMsg@DigitalBrain@@QAEXW4AtcStatusEnum@@@Z ; DigitalBrain::SendATCMsg

; 927  : 			mpActionFlags[AI_FOLLOW_FORMATION] = FALSE;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+760], 0
$LN1@AiCheckFor:

; 928  : 		}
; 929  : 	}
; 930  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?AiCheckForUnauthLand@DigitalBrain@@AAEXVVU_ID@@@Z ENDP	; DigitalBrain::AiCheckForUnauthLand
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\winglogic.cpp
_TEXT	SEGMENT
tv301 = -40						; size = 4
tv356 = -36						; size = 4
tv297 = -32						; size = 4
tv292 = -28						; size = 4
tv354 = -24						; size = 4
tv288 = -20						; size = 4
_dy$1 = -16						; size = 4
_dx$2 = -12						; size = 4
_Airbase$3 = -8						; size = 4
_this$ = -4						; size = 4
?AiCheckLandTakeoff@DigitalBrain@@AAEXXZ PROC		; DigitalBrain::AiCheckLandTakeoff
; _this$ = ecx

; 773  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 774  : 	if(self->curWaypoint == NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	cmp	DWORD PTR [ecx+728], 0
	jne	SHORT $LN16@AiCheckLan

; 775  : 		return;

	jmp	$LN17@AiCheckLan
$LN16@AiCheckLan:

; 776  : 	}
; 777  : 
; 778  : 	if(SimLibElapsedTime > updateTime)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	eax, DWORD PTR [edx+320]
	jbe	$LN15@AiCheckLan

; 779  : 	{
; 780  : 		ObjectiveClass *Airbase = (ObjectiveClass *)vuDatabase->Find(airbase);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+312]
	push	edx
	mov	eax, DWORD PTR [ecx+308]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _Airbase$3[ebp], eax

; 781  : 		if(Airbase)

	cmp	DWORD PTR _Airbase$3[ebp], 0
	je	$LN14@AiCheckLan

; 782  : 		{
; 783  : 			float dx = self->XPos() - Airbase->XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv288[ebp]
	movss	xmm0, DWORD PTR tv288[ebp]
	mov	ecx, DWORD PTR _Airbase$3[ebp]
	movss	DWORD PTR tv354[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv292[ebp]
	movss	xmm0, DWORD PTR tv354[ebp]
	subss	xmm0, DWORD PTR tv292[ebp]
	movss	DWORD PTR _dx$2[ebp], xmm0

; 784  : 			float dy = self->YPos() - Airbase->YPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv297[ebp]
	movss	xmm0, DWORD PTR tv297[ebp]
	mov	ecx, DWORD PTR _Airbase$3[ebp]
	movss	DWORD PTR tv356[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv301[ebp]
	movss	xmm0, DWORD PTR tv356[ebp]
	subss	xmm0, DWORD PTR tv301[ebp]
	movss	DWORD PTR _dy$1[ebp], xmm0

; 785  : 			distAirbase = (float)sqrt(dx*dx+dy*dy);

	movss	xmm0, DWORD PTR _dx$2[ebp]
	mulss	xmm0, DWORD PTR _dx$2[ebp]
	movss	xmm1, DWORD PTR _dy$1[ebp]
	mulss	xmm1, DWORD PTR _dy$1[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+324]
$LN14@AiCheckLan:

; 786  : 		}
; 787  : 		updateTime = SimLibElapsedTime + 15*CampaignSeconds;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 15000				; 00003a98H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+320], ecx
$LN15@AiCheckLan:

; 788  : 	}
; 789  : 	
; 790  : 	if( atcstatus >= tReqTaxi && atcstatus <= tTaxiBack )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+328], 19			; 00000013H
	jl	SHORT $LN13@AiCheckLan
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+328], 29			; 0000001dH
	jg	SHORT $LN13@AiCheckLan

; 791  : 	{
; 792  : 		mpActionFlags[AI_FOLLOW_FORMATION] = FALSE;

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+760], 0

; 793  : 		AddMode(TakeoffMode);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddMode@DigitalBrain@@IAEXW4DigiMode@1@@Z ; DigitalBrain::AddMode

; 794  : 	}
; 795  : 	else if(	mpActionFlags[AI_LANDING] 

	jmp	$LN1@AiCheckLan
$LN13@AiCheckLan:

; 796  : 		|| (atcstatus >= lReqClearance && atcstatus <= lCrashed)) 

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx+760], 0
	jne	SHORT $LN10@AiCheckLan
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+328], 1
	jl	SHORT $LN11@AiCheckLan
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+328], 18			; 00000012H
	jg	SHORT $LN11@AiCheckLan
$LN10@AiCheckLan:

; 797  : 	{		
; 798  : 		if(atcstatus > lIngressing)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+328], 3
	jle	SHORT $LN9@AiCheckLan

; 799  : 			mpActionFlags[AI_FOLLOW_FORMATION] = FALSE;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+760], 0
$LN9@AiCheckLan:

; 800  : 		AddMode(LandingMode);					

	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddMode@DigitalBrain@@IAEXW4DigiMode@1@@Z ; DigitalBrain::AddMode

; 801  : 	}
; 802  : 	else if(self->curWaypoint->GetWPAction() == WP_LAND && !self->OnGround() && distAirbase < 30.0F*NM_TO_FT

	jmp	$LN1@AiCheckLan
$LN11@AiCheckLan:

; 803  : 		&& (missionComplete || IsSetATC(SaidRTB) || IsSetATC(SaidBingo) || mpActionFlags[AI_RTB])) // don't land if one of these conditions isn't met

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+728]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 7
	jne	$LN7@AiCheckLan
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	jne	$LN7@AiCheckLan
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@48320395
	comiss	xmm0, DWORD PTR [ecx+324]
	jbe	SHORT $LN7@AiCheckLan
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+292], 0
	jne	SHORT $LN6@AiCheckLan
	push	268435456				; 10000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetATC@DigitalBrain@@QAEHH@Z		; DigitalBrain::IsSetATC
	test	eax, eax
	jne	SHORT $LN6@AiCheckLan
	push	32768					; 00008000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetATC@DigitalBrain@@QAEHH@Z		; DigitalBrain::IsSetATC
	test	eax, eax
	jne	SHORT $LN6@AiCheckLan
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+760], 0
	je	SHORT $LN7@AiCheckLan
$LN6@AiCheckLan:

; 804  : 	{
; 805  : 		if(atcstatus > lIngressing)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+328], 3
	jle	SHORT $LN5@AiCheckLan

; 806  : 			mpActionFlags[AI_FOLLOW_FORMATION] = FALSE;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+760], 0
$LN5@AiCheckLan:

; 807  : 		AddMode(LandingMode);	

	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddMode@DigitalBrain@@IAEXW4DigiMode@1@@Z ; DigitalBrain::AddMode
	jmp	$LN1@AiCheckLan
$LN7@AiCheckLan:

; 808  : 	}
; 809  : 	else if(self->curWaypoint->GetWPAction() == WP_TAKEOFF && self->OnGround())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+728]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 1
	jne	SHORT $LN3@AiCheckLan
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	je	SHORT $LN3@AiCheckLan

; 810  : 	{
; 811  : 		mpActionFlags[AI_FOLLOW_FORMATION] = FALSE;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+760], 0

; 812  : 		AddMode(TakeoffMode);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddMode@DigitalBrain@@IAEXW4DigiMode@1@@Z ; DigitalBrain::AddMode
	jmp	SHORT $LN1@AiCheckLan
$LN3@AiCheckLan:

; 813  : 	}
; 814  : 	else if(self->OnGround())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+56]
	mov	edx, DWORD PTR [eax+148]
	call	edx
	test	eax, eax
	je	SHORT $LN1@AiCheckLan

; 815  : 	{
; 816  : 		atcstatus = lTaxiOff;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+328], 14			; 0000000eH

; 817  : 		mpActionFlags[AI_FOLLOW_FORMATION] = FALSE;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+760], 0

; 818  : 		AddMode(LandingMode);

	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddMode@DigitalBrain@@IAEXW4DigiMode@1@@Z ; DigitalBrain::AddMode
$LN1@AiCheckLan:
$LN17@AiCheckLan:

; 819  : 	}
; 820  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AiCheckLandTakeoff@DigitalBrain@@AAEXXZ ENDP		; DigitalBrain::AiCheckLandTakeoff
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\winglogic.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AiCheckRTB@DigitalBrain@@AAEXXZ PROC			; DigitalBrain::AiCheckRTB
; _this$ = ecx

; 751  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 752  : 	// set waypoint to home
; 753  : 	// check distance to home, contact tower it necessary
; 754  : 
; 755  : 	if(mpActionFlags[AI_RTB]) {									// If we are ordered to do a maneuver

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+760], 0
	je	SHORT $LN2@AiCheckRTB

; 756  : 		AddMode(RTBMode);								// Add maneuvers to stack

	push	19					; 00000013H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddMode@DigitalBrain@@IAEXW4DigiMode@1@@Z ; DigitalBrain::AddMode
$LN2@AiCheckRTB:

; 757  : 
; 758  : 		// if(mpActionFlags[AI_LANDING] == FALSE && distance to airbase < 15 nm, && no atc) {
; 759  : 			// contact atc
; 760  : 			//	mpActionFlags[AI_LANDING] = TRUE;
; 761  : 		//}
; 762  : 	}
; 763  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AiCheckRTB@DigitalBrain@@AAEXXZ ENDP			; DigitalBrain::AiCheckRTB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\winglogic.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AiCheckEngage@DigitalBrain@@AAEXXZ PROC		; DigitalBrain::AiCheckEngage
; _this$ = ecx

; 726  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 727  : // 2000-09-18 MODIFIED BY S.G. NEED THE WINGMEN TO DO ITS DUTY EVEN WHILE EXECUTING MANEUVERS...
; 728  : // 2000-09-25 MODIFIED BY S.G. NEED THE WINGMEN TO DO ITS STUFF WHEN HE HAS WEAPON FREE AS WELL
; 729  : // 2002-03-15 MODIFIED BY S.G. Perform this if mpActionFlags[AI_EXECUTE_MANEUVER] is NOT TRUE+1, since TRUE+1 mean we are doing a maneuver that's limiting the AI's ACTION to specific functions
; 730  : //	if(mpActionFlags[AI_ENGAGE_TARGET] /* REMOVED BY S.G. && !mpActionFlags[AI_EXECUTE_MANEUVER] */) {
; 731  : //	if(mpActionFlags[AI_ENGAGE_TARGET] || mWeaponsAction == AI_WEAPONS_FREE) {
; 732  : 	if((mpActionFlags[AI_ENGAGE_TARGET] || mWeaponsAction == AI_WEAPONS_FREE) && mpActionFlags[AI_EXECUTE_MANEUVER] != TRUE+1) {

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+760], 0
	jne	SHORT $LN1@AiCheckEng
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+828], 1
	jne	SHORT $LN3@AiCheckEng
$LN1@AiCheckEng:
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+760], 2
	je	SHORT $LN3@AiCheckEng

; 733  :       MergeCheck();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?MergeCheck@DigitalBrain@@IAEXXZ	; DigitalBrain::MergeCheck

; 734  : 	  BvrEngageCheck();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?BvrEngageCheck@DigitalBrain@@IAEXXZ	; DigitalBrain::BvrEngageCheck

; 735  :       GunsEngageCheck();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GunsEngageCheck@DigitalBrain@@IAEXXZ	; DigitalBrain::GunsEngageCheck

; 736  :       WvrEngageCheck();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?WvrEngageCheck@DigitalBrain@@IAEXXZ	; DigitalBrain::WvrEngageCheck

; 737  :       MissileEngageCheck();      

	mov	ecx, DWORD PTR _this$[ebp]
	call	?MissileEngageCheck@DigitalBrain@@IAEXXZ ; DigitalBrain::MissileEngageCheck

; 738  :       AccelCheck();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AccelCheck@DigitalBrain@@IAEXXZ	; DigitalBrain::AccelCheck
$LN3@AiCheckEng:

; 739  : 	}
; 740  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AiCheckEngage@DigitalBrain@@AAEXXZ ENDP		; DigitalBrain::AiCheckEngage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\winglogic.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AiCheckFormation@DigitalBrain@@AAEXXZ PROC		; DigitalBrain::AiCheckFormation
; _this$ = ecx

; 844  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 845  : //temp Hack until I can talk to Vince about a better way. DSP
; 846  : //	if(mpActionFlags[AI_FOLLOW_FORMATION] && self->curWaypoint->GetWPAction() != WP_LAND) {					// If we are ordered to fly in formation
; 847  : 
; 848  : 	// edg: if the wingy was told to engage a ground target, we must make sure that they
; 849  : 	// will continue on waypoint mode so that they can go thru the ground attack logic
; 850  : 	if(mpActionFlags[AI_ENGAGE_TARGET] && !mpActionFlags[AI_EXECUTE_MANEUVER] && (agDoctrine != AGD_NONE || groundTargetPtr) )

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+760], 0
	je	SHORT $LN4@AiCheckFor
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx+760], 0
	jne	SHORT $LN4@AiCheckFor
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+244], 0
	jne	SHORT $LN3@AiCheckFor
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+224], 0
	je	SHORT $LN4@AiCheckFor
$LN3@AiCheckFor:

; 851  : 	{
; 852  : 		AddMode( WaypointMode );

	push	22					; 00000016H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddMode@DigitalBrain@@IAEXW4DigiMode@1@@Z ; DigitalBrain::AddMode
	jmp	SHORT $LN5@AiCheckFor
$LN4@AiCheckFor:

; 853  : 	}
; 854  : 	else if(mpActionFlags[AI_FOLLOW_FORMATION])

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+760], 0
	je	SHORT $LN5@AiCheckFor

; 855  : 	{
; 856  : 		AddMode(WingyMode);										// Add formation mode to stack

	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddMode@DigitalBrain@@IAEXW4DigiMode@1@@Z ; DigitalBrain::AddMode
$LN5@AiCheckFor:

; 857  : 	}
; 858  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AiCheckFormation@DigitalBrain@@AAEXXZ ENDP		; DigitalBrain::AiCheckFormation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\winglogic.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AiCheckManeuvers@DigitalBrain@@AAEXXZ PROC		; DigitalBrain::AiCheckManeuvers
; _this$ = ecx

; 829  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 830  : 
; 831  : 	if(mpActionFlags[AI_EXECUTE_MANEUVER]) {					// If we are ordered to do a maneuver

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+760], 0
	je	SHORT $LN2@AiCheckMan

; 832  : 		AddMode(FollowOrdersMode);								// Add maneuvers to stack

	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddMode@DigitalBrain@@IAEXW4DigiMode@1@@Z ; DigitalBrain::AddMode
$LN2@AiCheckMan:

; 833  : 	}
; 834  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AiCheckManeuvers@DigitalBrain@@AAEXXZ ENDP		; DigitalBrain::AiCheckManeuvers
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\winglogic.cpp
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
?AiRunDecisionRoutines@DigitalBrain@@AAEXXZ PROC	; DigitalBrain::AiRunDecisionRoutines
; _this$ = ecx

; 45   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 46   :    //if (curMode == GunsJinkMode)
; 47   :    //{
; 48   :       GunsJinkCheck();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GunsJinkCheck@DigitalBrain@@IAEXXZ	; DigitalBrain::GunsJinkCheck

; 49   :    //}
; 50   : 
; 51   :    //if (curMode == MissileDefeatMode)
; 52   :    //{
; 53   :       MissileDefeatCheck();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?MissileDefeatCheck@DigitalBrain@@IAEXXZ ; DigitalBrain::MissileDefeatCheck

; 54   :    //}
; 55   : 
; 56   : 	// Check if I should be landing
; 57   : 	ShiAssert(flightLead)
; 58   : 	if (flightLead)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+708], 0
	je	SHORT $LN1@AiRunDecis

; 59   : 		AiCheckForUnauthLand(flightLead->Id());

	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+708]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiCheckForUnauthLand@DigitalBrain@@AAEXVVU_ID@@@Z ; DigitalBrain::AiCheckForUnauthLand
$LN1@AiRunDecis:

; 60   : 	//AiCheckLand();
; 61   : 
; 62   : 	// Check if I was ordered RTB
; 63   : 	AiCheckRTB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiCheckRTB@DigitalBrain@@AAEXXZ	; DigitalBrain::AiCheckRTB

; 64   : 
; 65   : 	// Check If I was ordered to kill somthing
; 66   : 	AiCheckEngage();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiCheckEngage@DigitalBrain@@AAEXXZ	; DigitalBrain::AiCheckEngage

; 67   : 
; 68   : 	// Check if we have been ordered to perform a fancy maneuver
; 69   : 	AiCheckManeuvers();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiCheckManeuvers@DigitalBrain@@AAEXXZ	; DigitalBrain::AiCheckManeuvers

; 70   : 
; 71   : 	// Check if we should be in formation
; 72   : 	AiCheckFormation();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiCheckFormation@DigitalBrain@@AAEXXZ	; DigitalBrain::AiCheckFormation

; 73   : 
; 74   : 
; 75   :    // Always follow waypoints
; 76   :    AddMode(WaypointMode);

	push	22					; 00000016H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddMode@DigitalBrain@@IAEXW4DigiMode@1@@Z ; DigitalBrain::AddMode

; 77   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AiRunDecisionRoutines@DigitalBrain@@AAEXXZ ENDP	; DigitalBrain::AiRunDecisionRoutines
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\winglogic.cpp
_TEXT	SEGMENT
$T2 = -48						; size = 4
_objectPtr$ = -44					; size = 4
tv254 = -40						; size = 4
$T3 = -36						; size = 4
tv170 = -32						; size = 4
tv161 = -28						; size = 4
_theTargetGroup$ = -24					; size = 4
_this$ = -20						; size = 4
_theTarget$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pentity$ = 8						; size = 4
?AiSearchTargetList@DigitalBrain@@AAEXPAVVuEntity@@@Z PROC ; DigitalBrain::AiSearchTargetList
; _this$ = ecx

; 157  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AiSearchTargetList@DigitalBrain@@AAEXPAVVuEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 158  : CampBaseClass* theTargetGroup = (CampBaseClass*)pentity;

	mov	eax, DWORD PTR _pentity$[ebp]
	mov	DWORD PTR _theTargetGroup$[ebp], eax

; 159  : FalconEntity* theTarget = NULL;

	mov	DWORD PTR _theTarget$[ebp], 0

; 160  : SimObjectType* objectPtr = NULL;

	mov	DWORD PTR _objectPtr$[ebp], 0

; 161  : 
; 162  : 	 if (!pentity)

	cmp	DWORD PTR _pentity$[ebp], 0
	jne	SHORT $LN17@AiSearchTa

; 163  : 	 	 return;

	jmp	$LN18@AiSearchTa
$LN17@AiSearchTa:

; 164  : 
; 165  :    if (((FalconEntity*)pentity)->IsSim())

	mov	ecx, DWORD PTR _pentity$[ebp]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN16@AiSearchTa

; 166  :    {
; 167  :       theTarget = (FalconEntity*)pentity;

	mov	ecx, DWORD PTR _pentity$[ebp]
	mov	DWORD PTR _theTarget$[ebp], ecx

; 168  : 	  // 2002-04-02 ADDED BY S.G. If it's dead or a chute, leave it alone...
; 169  : 	  if (!theTarget->OnGround() && (theTarget->IsDead() || theTarget->IsEject()))

	mov	edx, DWORD PTR _theTarget$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _theTarget$[ebp]
	mov	edx, DWORD PTR [eax+148]
	call	edx
	test	eax, eax
	jne	SHORT $LN15@AiSearchTa
	mov	eax, DWORD PTR _theTarget$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _theTarget$[ebp]
	mov	eax, DWORD PTR [edx+212]
	call	eax
	test	eax, eax
	jne	SHORT $LN14@AiSearchTa
	mov	ecx, DWORD PTR _theTarget$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theTarget$[ebp]
	mov	eax, DWORD PTR [edx+188]
	call	eax
	test	eax, eax
	je	SHORT $LN15@AiSearchTa
$LN14@AiSearchTa:

; 170  : 		  theTarget = NULL;

	mov	DWORD PTR _theTarget$[ebp], 0
$LN15@AiSearchTa:

; 171  : 	  // END OF ADDED SECTION 2002-04-02
; 172  :    }
; 173  :    else

	jmp	$LN6@AiSearchTa
$LN16@AiSearchTa:

; 174  :    {
; 175  : 	  if (theTargetGroup->NumberOfComponents())

	mov	ecx, DWORD PTR _theTargetGroup$[ebp]
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	test	eax, eax
	je	$LN12@AiSearchTa

; 176  : // 2001-06-04 MODIFIED BY S.G. NEED TO ACCOUNT FOR GROUND TARGETS DIFFERENTLY THAN AIR TARGETS
; 177  : //       theTarget = theTargetGroup->GetComponentEntity (isWing % theTargetGroup->NumberOfComponents());
; 178  : 	  {
; 179  : 		  if (theTargetGroup->OnGround()) {

	mov	ecx, DWORD PTR _theTargetGroup$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theTargetGroup$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	je	$LN11@AiSearchTa

; 180  : 			  // If we already have a ground target and it is part of the unit we are being asked to target and it's still alive, keep using it (ie, don't switch)
; 181  : 			  if (groundTargetPtr && groundTargetPtr->BaseData()->IsSim() && 
; 182  : 						((SimBaseClass *)groundTargetPtr->BaseData())->GetCampaignObject() == theTargetGroup && 
; 183  : 						!groundTargetPtr->BaseData()->IsExploding() && !groundTargetPtr->BaseData()->IsDead() && 
; 184  : 						((SimBaseClass *)groundTargetPtr->BaseData())->pctStrength > 0.0f)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+224], 0
	je	$LN10@AiSearchTa
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	$LN10@AiSearchTa
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	cmp	eax, DWORD PTR _theTargetGroup$[ebp]
	jne	SHORT $LN10@AiSearchTa
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv161[ebp], eax
	mov	edx, DWORD PTR tv161[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv161[ebp]
	mov	edx, DWORD PTR [eax+208]
	call	edx
	test	eax, eax
	jne	SHORT $LN10@AiSearchTa
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv170[ebp], eax
	mov	ecx, DWORD PTR tv170[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv170[ebp]
	mov	eax, DWORD PTR [edx+212]
	call	eax
	test	eax, eax
	jne	SHORT $LN10@AiSearchTa
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	movss	xmm0, DWORD PTR [eax+292]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN10@AiSearchTa

; 185  : 				  return;

	jmp	$LN18@AiSearchTa
$LN10@AiSearchTa:

; 186  : 
; 187  : 			  // Use our hep function
; 188  : 			  theTarget = FindSimGroundTarget(theTargetGroup, theTargetGroup->NumberOfComponents(), 0);

	push	0
	mov	ecx, DWORD PTR _theTargetGroup$[ebp]
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	push	eax
	mov	edx, DWORD PTR _theTargetGroup$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindSimGroundTarget@DigitalBrain@@AAEPAVSimBaseClass@@PAVCampBaseClass@@HH@Z ; DigitalBrain::FindSimGroundTarget
	mov	DWORD PTR _theTarget$[ebp], eax

; 189  : 		  }
; 190  : 		  // Target is not on the ground, select your opponent in the flight, wrapping if the opponent has less planes than us
; 191  : 		  else

	jmp	SHORT $LN9@AiSearchTa
$LN11@AiSearchTa:

; 192  : 			  theTarget = theTargetGroup->GetComponentEntity (isWing % theTargetGroup->NumberOfComponents());

	mov	ecx, DWORD PTR _theTargetGroup$[ebp]
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	mov	ecx, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	cdq
	idiv	ecx
	push	edx
	mov	ecx, DWORD PTR _theTargetGroup$[ebp]
	call	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentEntity
	mov	DWORD PTR _theTarget$[ebp], eax
$LN9@AiSearchTa:

; 193  : 			// 2002-04-02 ADDED BY S.G. If it's dead or a chute, leave it alone...
; 194  : 			if (theTarget && (theTarget->IsDead() || theTarget->IsEject()))

	cmp	DWORD PTR _theTarget$[ebp], 0
	je	SHORT $LN8@AiSearchTa
	mov	eax, DWORD PTR _theTarget$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _theTarget$[ebp]
	mov	eax, DWORD PTR [edx+212]
	call	eax
	test	eax, eax
	jne	SHORT $LN7@AiSearchTa
	mov	ecx, DWORD PTR _theTarget$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theTarget$[ebp]
	mov	eax, DWORD PTR [edx+188]
	call	eax
	test	eax, eax
	je	SHORT $LN8@AiSearchTa
$LN7@AiSearchTa:

; 195  : 				theTarget = NULL;

	mov	DWORD PTR _theTarget$[ebp], 0
$LN8@AiSearchTa:

; 196  : 			  // END OF ADDED SECTION 2002-04-02
; 197  : 	   }
; 198  :        else

	jmp	SHORT $LN6@AiSearchTa
$LN12@AiSearchTa:

; 199  : 		   theTarget = theTargetGroup;

	mov	ecx, DWORD PTR _theTargetGroup$[ebp]
	mov	DWORD PTR _theTarget$[ebp], ecx
$LN6@AiSearchTa:

; 200  :    }
; 201  : 
; 202  :    if (theTarget)

	cmp	DWORD PTR _theTarget$[ebp], 0
	je	$LN5@AiSearchTa

; 203  :    {
; 204  : // 2001-05-10 MODIFIED BY S.G. IF WE HAVE A GROUND TARGET AND IT'S OUR TARGET, AVOID DOING THIS AS WELL (WE'RE FINE)
; 205  : //    if (!targetPtr || targetPtr->BaseData() != theTarget)
; 206  :       if ((!targetPtr || targetPtr->BaseData() != theTarget) && (!groundTargetPtr || groundTargetPtr->BaseData() != theTarget))

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN3@AiSearchTa
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	eax, DWORD PTR _theTarget$[ebp]
	je	$LN4@AiSearchTa
$LN3@AiSearchTa:
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+224], 0
	je	SHORT $LN2@AiSearchTa
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	eax, DWORD PTR _theTarget$[ebp]
	je	SHORT $LN4@AiSearchTa
$LN2@AiSearchTa:

; 207  :       {
; 208  : #ifdef DEBUG
; 209  :     /*     objectPtr = new SimObjectType (OBJ_TAG, self, theTarget);*/
; 210  : #else
; 211  :          objectPtr = new SimObjectType (theTarget);

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN20@AiSearchTa
	mov	eax, DWORD PTR _theTarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0SimObjectType@@QAE@PAVFalconEntity@@@Z ; SimObjectType::SimObjectType
	mov	DWORD PTR tv254[ebp], eax
	jmp	SHORT $LN21@AiSearchTa
$LN20@AiSearchTa:
	mov	DWORD PTR tv254[ebp], 0
$LN21@AiSearchTa:
	mov	ecx, DWORD PTR tv254[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _objectPtr$[ebp], edx

; 212  : #endif
; 213  :          SetTarget (objectPtr);

	mov	eax, DWORD PTR _objectPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 214  : // 2000-09-18 ADDED BY S.G. SO AI STARTS SHOOTING RIGHT NOW AND STOP WAITING THAT STUPID 30 SECONDS!
; 215  : 		 missileShotTimer = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+472], 0
$LN4@AiSearchTa:

; 216  : // END OF ADDED SECTION
; 217  :       }
; 218  :    }
; 219  :    else

	jmp	SHORT $LN1@AiSearchTa
$LN5@AiSearchTa:

; 220  :    {
; 221  : 	   ShiAssert(curMode != GunsEngageMode);
; 222  : 	   ClearTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearTarget@BaseBrain@@QAEXXZ		; BaseBrain::ClearTarget

; 223  : 	   mDesignatedObject = FalconNullId; // 2002-04-04 ADDED BY S.G. If we are clearing the target, we might as well clear the designated target as well so we leave it alone...

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [edx+800], eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [edx+804], ecx

; 224  : 	   AddMode (WaypointMode);

	push	22					; 00000016H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddMode@DigitalBrain@@IAEXW4DigiMode@1@@Z ; DigitalBrain::AddMode
$LN1@AiSearchTa:
$LN18@AiSearchTa:

; 225  :    }
; 226  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AiSearchTargetList@DigitalBrain@@AAEXPAVVuEntity@@@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AiSearchTargetList@DigitalBrain@@AAEXPAVVuEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AiSearchTargetList@DigitalBrain@@AAEXPAVVuEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AiSearchTargetList@DigitalBrain@@AAEXPAVVuEntity@@@Z ENDP ; DigitalBrain::AiSearchTargetList
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\winglogic.cpp
_TEXT	SEGMENT
_pnewTarget$ = -12					; size = 4
_curSpike$ = -8						; size = 4
_this$ = -4						; size = 4
?AiRunTargetSelection@DigitalBrain@@AAEXXZ PROC		; DigitalBrain::AiRunTargetSelection
; _this$ = ecx

; 88   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 89   : VuEntity* pnewTarget;
; 90   : FalconEntity* curSpike = SpikeCheck (self);

	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	?SpikeCheck@@YAPAVFalconEntity@@PAVAircraftClass@@PAV1@PAH@Z ; SpikeCheck
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _curSpike$[ebp], eax

; 91   : 
; 92   : // 2001-06-27 ADDED BY S.G. SO WING WILL SET THEIR ECM AS WELL
; 93   :    if (curSpike || (flightLead && flightLead != self && flightLead->IsSPJamming()))

	cmp	DWORD PTR _curSpike$[ebp], 0
	jne	SHORT $LN12@AiRunTarge
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+708], 0
	je	SHORT $LN13@AiRunTarge
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+708]
	cmp	edx, DWORD PTR [ecx+56]
	je	SHORT $LN13@AiRunTarge
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+708]
	mov	edx, DWORD PTR [eax+268]
	call	edx
	test	eax, eax
	je	SHORT $LN13@AiRunTarge
$LN12@AiRunTarge:

; 94   :    {
; 95   :       if (self->HasSPJamming())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+56]
	mov	edx, DWORD PTR [eax+276]
	call	edx
	test	eax, eax
	je	SHORT $LN11@AiRunTarge

; 96   : 	  {
; 97   :          self->SetFlag(ECM_ON);

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?SetFlag@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetFlag
$LN11@AiRunTarge:

; 98   : 	  }
; 99   :    }
; 100  :    else

	jmp	SHORT $LN10@AiRunTarge
$LN13@AiRunTarge:

; 101  :    {
; 102  :       self->UnSetFlag(ECM_ON);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?UnSetFlag@SimBaseClass@@QAEXH@Z	; SimBaseClass::UnSetFlag
$LN10@AiRunTarge:

; 103  :    }
; 104  : // END OF ADDED SECTION
; 105  : 
; 106  :    if (curSpike)

	cmp	DWORD PTR _curSpike$[ebp], 0
	je	SHORT $LN9@AiRunTarge

; 107  :    {
; 108  :       SetThreat (curSpike);

	mov	edx, DWORD PTR _curSpike$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetThreat@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetThreat

; 109  :    }
; 110  :    else

	jmp	$LN14@AiRunTarge
$LN9@AiRunTarge:

; 111  :    {
; 112  : 	   if(mDesignatedObject != FalconNullId) 

	push	OFFSET ?FalconNullId@@3VVU_ID@@A	; FalconNullId
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 800				; 00000320H
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@AiRunTarge

; 113  : 		 {					// If target has been designated by the leader
; 114  : 
; 115  : 		   pnewTarget = vuDatabase->Find(mDesignatedObject);	// Lookup target in database

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+804]
	push	edx
	mov	eax, DWORD PTR [ecx+800]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _pnewTarget$[ebp], eax

; 116  : 		   if(pnewTarget) 

	cmp	DWORD PTR _pnewTarget$[ebp], 0
	je	SHORT $LN6@AiRunTarge

; 117  : 			 {
; 118  : #if 0		   // Not working yet, commented out in case it creates more problem than it solves...
; 119  : 			   // 2002-03-15 ADDED BY S.G. Special case when everyone in the unit is dead... Should help the AI not targeting chutes when that's all is left...
; 120  : 			   // If it's a NON aggregated UNIT CAMPAIGN object, it SHOULD have components... If it doesn't, clear it's designated target.
; 121  : 			   if (((FalconEntity *)pnewTarget)->IsCampaign() && ((CampBaseClass *)pnewTarget)->IsUnit() && !((CampBaseClass *)pnewTarget)->IsAggregate() && ((CampBaseClass *)pnewTarget)->NumberOfComponents() == 0) {
; 122  : 				   ShiAssert(!"Empty deaggregated object as a target?!?");
; 123  : 				   mDesignatedObject	= FalconNullId;
; 124  : 			   }
; 125  : 			   else
; 126  : 			   // END OF ADDED SECTION
; 127  : #endif
; 128  : 				   AiSearchTargetList(pnewTarget);							// Run targeting for wingman with designated target

	mov	ecx, DWORD PTR _pnewTarget$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiSearchTargetList@DigitalBrain@@AAEXPAVVuEntity@@@Z ; DigitalBrain::AiSearchTargetList

; 129  : 		   }
; 130  : 		   else 

	jmp	SHORT $LN5@AiRunTarge
$LN6@AiRunTarge:

; 131  : 			 {
; 132  : 			   mDesignatedObject	= FalconNullId;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [edx+800], eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [edx+804], ecx
$LN5@AiRunTarge:

; 133  : 		   }
; 134  : 	   }
; 135  : 	   else if(mpSearchFlags[AI_SEARCH_FOR_TARGET] || 

	jmp	SHORT $LN14@AiRunTarge
$LN7@AiRunTarge:

; 136  : 				   mDesignatedObject == FalconNullId) {			// If we are ordered to scan for targets

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx+784], 0
	jne	SHORT $LN2@AiRunTarge
	push	OFFSET ?FalconNullId@@3VVU_ID@@A	; FalconNullId
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 800				; 00000320H
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@AiRunTarge
$LN2@AiRunTarge:

; 137  : 		   TargetSelection();											// Run the full selection routine

	mov	ecx, DWORD PTR _this$[ebp]
	call	?TargetSelection@DigitalBrain@@IAEXXZ	; DigitalBrain::TargetSelection

; 138  : 	   }
; 139  : 	   else {

	jmp	SHORT $LN14@AiRunTarge
$LN3@AiRunTarge:

; 140  : 		   ShiAssert(curMode != GunsEngageMode);// Otherwise just chill out
; 141  : 		   ClearTarget();													// No targets of interest

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearTarget@BaseBrain@@QAEXXZ		; BaseBrain::ClearTarget

; 142  : 			AiRestoreWeaponState();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiRestoreWeaponState@DigitalBrain@@AAEXXZ ; DigitalBrain::AiRestoreWeaponState

; 143  : 	   	mpActionFlags[AI_ENGAGE_TARGET]	= AI_NONE; // 2002-03-04 MODIFIED BY S.G. Use new enum type

	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+760], 0
$LN14@AiRunTarge:

; 144  : 	   }
; 145  :    }
; 146  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AiRunTargetSelection@DigitalBrain@@AAEXXZ ENDP		; DigitalBrain::AiRunTargetSelection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\winglogic.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_extent$ = 8						; size = 4
_from$ = 12						; size = 8
_idx$ = 20						; size = 4
?AiGlueFlight@DigitalBrain@@AAEXHVVU_ID@@H@Z PROC	; DigitalBrain::AiGlueFlight
; _this$ = ecx

; 894  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 895  : 	if(vuDatabase->Find(from) == self->GetCampaignObject()->GetComponentLead()) {	// if from the flight lead

	mov	eax, DWORD PTR _from$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentLead@CampBaseClass@@QAEPAVSimBaseClass@@XZ ; CampBaseClass::GetComponentLead
	cmp	esi, eax
	jne	SHORT $LN7@AiGlueFlig

; 896  : 		if(extent == AiElement || extent == AiFlight) {

	cmp	DWORD PTR _extent$[ebp], 1
	je	SHORT $LN5@AiGlueFlig
	cmp	DWORD PTR _extent$[ebp], 2
	jne	SHORT $LN6@AiGlueFlig
$LN5@AiGlueFlig:

; 897  : 			if(idx == AiElementLead || idx == AiSecondWing) {

	cmp	DWORD PTR _idx$[ebp], 2
	je	SHORT $LN3@AiGlueFlig
	cmp	DWORD PTR _idx$[ebp], 3
	jne	SHORT $LN6@AiGlueFlig
$LN3@AiGlueFlig:

; 898  : 				mSplitFlight = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+892], 0
$LN6@AiGlueFlig:

; 899  : 			}
; 900  : 		}
; 901  : 	}
; 902  : 	else {	// Otherwise the order is coming from the element lead, we want to follow him

	jmp	SHORT $LN8@AiGlueFlig
$LN7@AiGlueFlig:

; 903  : 		if(extent == AiWingman && idx == AiSecondWing) {

	cmp	DWORD PTR _extent$[ebp], 0
	jne	SHORT $LN8@AiGlueFlig
	cmp	DWORD PTR _idx$[ebp], 3
	jne	SHORT $LN8@AiGlueFlig

; 904  : 			mSplitFlight = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+892], 1
$LN8@AiGlueFlig:

; 905  : 		}
; 906  : 	}
; 907  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?AiGlueFlight@DigitalBrain@@AAEXHVVU_ID@@H@Z ENDP	; DigitalBrain::AiGlueFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\winglogic.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_extent$ = 8						; size = 4
_from$ = 12						; size = 8
_idx$ = 20						; size = 4
?AiSplitFlight@DigitalBrain@@AAEXHVVU_ID@@H@Z PROC	; DigitalBrain::AiSplitFlight
; _this$ = ecx

; 869  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 870  : 	if(vuDatabase->Find(from) == self->GetCampaignObject()->GetComponentLead()) {	// if from the flight lead

	mov	eax, DWORD PTR _from$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentLead@CampBaseClass@@QAEPAVSimBaseClass@@XZ ; CampBaseClass::GetComponentLead
	cmp	esi, eax
	jne	SHORT $LN7@AiSplitFli

; 871  : 		if(extent == AiElement || extent == AiFlight) {

	cmp	DWORD PTR _extent$[ebp], 1
	je	SHORT $LN5@AiSplitFli
	cmp	DWORD PTR _extent$[ebp], 2
	jne	SHORT $LN6@AiSplitFli
$LN5@AiSplitFli:

; 872  : 			if(idx == AiElementLead || idx == AiSecondWing) {

	cmp	DWORD PTR _idx$[ebp], 2
	je	SHORT $LN3@AiSplitFli
	cmp	DWORD PTR _idx$[ebp], 3
	jne	SHORT $LN6@AiSplitFli
$LN3@AiSplitFli:

; 873  : 				mSplitFlight = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+892], 1
$LN6@AiSplitFli:

; 874  : 			}
; 875  : 		}
; 876  : 	}
; 877  : 	else {	// Otherwise the order is coming from the element lead, we want to follow him

	jmp	SHORT $LN8@AiSplitFli
$LN7@AiSplitFli:

; 878  : 		if(extent == AiWingman && idx == AiSecondWing) {

	cmp	DWORD PTR _extent$[ebp], 0
	jne	SHORT $LN8@AiSplitFli
	cmp	DWORD PTR _idx$[ebp], 3
	jne	SHORT $LN8@AiSplitFli

; 879  : 			mSplitFlight = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+892], 1
$LN8@AiSplitFli:

; 880  : 		}
; 881  : 	}
; 882  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?AiSplitFlight@DigitalBrain@@AAEXHVVU_ID@@H@Z ENDP	; DigitalBrain::AiSplitFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?ATCStatus@DigitalBrain@@QAE?AW4AtcStatusEnum@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ATCStatus@DigitalBrain@@QAE?AW4AtcStatusEnum@@XZ PROC	; DigitalBrain::ATCStatus, COMDAT
; _this$ = ecx

; 765  : 	AtcStatusEnum	ATCStatus(void)							{return atcstatus;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+328]
	mov	esp, ebp
	pop	ebp
	ret	0
?ATCStatus@DigitalBrain@@QAE?AW4AtcStatusEnum@@XZ ENDP	; DigitalBrain::ATCStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?IsSetATC@DigitalBrain@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetATC@DigitalBrain@@QAEHH@Z PROC			; DigitalBrain::IsSetATC, COMDAT
; _this$ = ecx

; 709  : 	int		IsSetATC(int flag)								{return (atcFlags & flag) && TRUE;}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+300]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsSetATC
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@IsSetATC
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSetATC
$LN3@IsSetATC:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSetATC:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetATC@DigitalBrain@@QAEHH@Z ENDP			; DigitalBrain::IsSetATC
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\winglogic.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_ptr$ = -8						; size = 4
tv68 = -1						; size = 1
_Type$ = 8						; size = 4
?EvaluateTarget@DigitalBrain@@IAE_NK@Z PROC		; DigitalBrain::EvaluateTarget
; _this$ = ecx

; 34   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 	const DWORD	*ptr=NonTargets;

	mov	DWORD PTR _ptr$[ebp], OFFSET _NonTargets
$LN2@EvaluateTa:

; 36   : 	// Look in the list
; 37   : 	while(*ptr && *ptr!=Type) ptr++;

	mov	eax, DWORD PTR _ptr$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@EvaluateTa
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _Type$[ebp]
	je	SHORT $LN1@EvaluateTa
	mov	eax, DWORD PTR _ptr$[ebp]
	add	eax, 4
	mov	DWORD PTR _ptr$[ebp], eax
	jmp	SHORT $LN2@EvaluateTa
$LN1@EvaluateTa:

; 38   : 	// Return the result
; 39   : 	return *ptr?false:true;

	mov	ecx, DWORD PTR _ptr$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN5@EvaluateTa
	mov	BYTE PTR tv68[ebp], 0
	jmp	SHORT $LN6@EvaluateTa
$LN5@EvaluateTa:
	mov	BYTE PTR tv68[ebp], 1
$LN6@EvaluateTa:
	mov	al, BYTE PTR tv68[ebp]

; 40   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?EvaluateTarget@DigitalBrain@@IAE_NK@Z ENDP		; DigitalBrain::EvaluateTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPAction@WayPointClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPAction@WayPointClass@@QAEHXZ PROC			; WayPointClass::GetWPAction, COMDAT
; _this$ = ecx

; 170  : 	int GetWPAction(void)							{ return (int)Action; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPAction@WayPointClass@@QAEHXZ ENDP			; WayPointClass::GetWPAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbrain.h
;	COMDAT ?SkillLevel@BaseBrain@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SkillLevel@BaseBrain@@QAEHXZ PROC			; BaseBrain::SkillLevel, COMDAT
; _this$ = ecx

; 40   :       int SkillLevel(void) {return skillLevel;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?SkillLevel@BaseBrain@@QAEHXZ ENDP			; BaseBrain::SkillLevel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ PROC	; AircraftClass::DBrain, COMDAT
; _this$ = ecx

; 624  : 	DigitalBrain *DBrain(void)			{return (DigitalBrain *)theBrain;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+672]
	mov	esp, ebp
	pop	ebp
	ret	0
?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ENDP	; AircraftClass::DBrain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?IsDigital@AircraftClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDigital@AircraftClass@@QAEHXZ PROC			; AircraftClass::IsDigital, COMDAT
; _this$ = ecx

; 385  : 	int IsDigital() { return isDigital; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+948]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDigital@AircraftClass@@QAEHXZ ENDP			; AircraftClass::IsDigital
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ PROC		; VuBin<SimWeaponClass>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ ENDP		; VuBin<SimWeaponClass>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ PROC ; SimBaseClass::GetCampaignObject, COMDAT
; _this$ = ecx

; 212  : 	CampBaseClass *GetCampaignObject (void) { return campaignObject.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ENDP ; SimBaseClass::GetCampaignObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetType@SimBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetType@SimBaseClass@@QBEEXZ PROC			; SimBaseClass::GetType, COMDAT
; _this$ = ecx

; 161  : 	uchar GetType() const					{	return (EntityType())->classInfo_[VU_TYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	shl	ecx, 1
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetType@SimBaseClass@@QBEEXZ ENDP			; SimBaseClass::GetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ PROC ; VuBin<CampBaseClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ENDP ; VuBin<CampBaseClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSim@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsSim@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsSim, COMDAT
; _this$ = ecx

; 103  : 		{return (falconType & FalconSimEntity) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	and	ecx, 2
	je	SHORT $LN3@IsSim
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSim
$LN3@IsSim:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSim:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSim@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??9VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??9VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator!=, COMDAT
; _this$ = ecx

; 111  : 	bool operator != (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 		return (
; 113  : 			num_ == rhs.num_ ? 
; 114  : 			(creator_ == rhs.creator_ ? false : true) : 
; 115  : 			true
; 116  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 1
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 1
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 117  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??9VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??8VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator==, COMDAT
; _this$ = ecx

; 104  : 	bool operator == (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		return (
; 106  : 			num_ == rhs.num_ ? 
; 107  : 			(creator_ == rhs.creator_ ? true : false) : 
; 108  : 			false
; 109  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 0
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 110  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
END
