; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\DIGI\Refuel.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
_DATA	SEGMENT
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	ORG $+4
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_DATA	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??9VU_ID@@QBE_NABV0@@Z				; VU_ID::operator!=
PUBLIC	?SetYPR@VuEntity@@QAEXMMM@Z			; VuEntity::SetYPR
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?Yaw@VuEntity@@QBEMXZ				; VuEntity::Yaw
PUBLIC	?Pitch@VuEntity@@QBEMXZ				; VuEntity::Pitch
PUBLIC	?Roll@VuEntity@@QBEMXZ				; VuEntity::Roll
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	?SetWPAction@WayPointClass@@QAEXH@Z		; WayPointClass::SetWPAction
PUBLIC	?GetWPAction@WayPointClass@@QAEHXZ		; WayPointClass::GetWPAction
PUBLIC	?GetWPFlags@WayPointClass@@QAEKXZ		; WayPointClass::GetWPFlags
PUBLIC	?GetNextWP@WayPointClass@@QAEPAV1@XZ		; WayPointClass::GetNextWP
PUBLIC	?SetWPDepartTime@WayPointClass@@QAEXK@Z		; WayPointClass::SetWPDepartTime
PUBLIC	?SetWPArrive@WayPointClass@@QAEXK@Z		; WayPointClass::SetWPArrive
PUBLIC	?SetTrackPoint@DigitalBrain@@QAEXMM@Z		; DigitalBrain::SetTrackPoint
PUBLIC	?SetTrackPoint@DigitalBrain@@QAEXMMM@Z		; DigitalBrain::SetTrackPoint
PUBLIC	?SetATCFlag@DigitalBrain@@QAEXH@Z		; DigitalBrain::SetATCFlag
PUBLIC	?ClearATCFlag@DigitalBrain@@QAEXH@Z		; DigitalBrain::ClearATCFlag
PUBLIC	?FlightMemberWantsFuel@DigitalBrain@@QAEXH@Z	; DigitalBrain::FlightMemberWantsFuel
PUBLIC	?StartRefueling@DigitalBrain@@QAEXXZ		; DigitalBrain::StartRefueling
PUBLIC	?DoneRefueling@DigitalBrain@@QAEXXZ		; DigitalBrain::DoneRefueling
PUBLIC	?HelpRefuel@DigitalBrain@@QAEXPAVAircraftClass@@@Z ; DigitalBrain::HelpRefuel
PUBLIC	?AiRefuel@DigitalBrain@@AAEXXZ			; DigitalBrain::AiRefuel
PUBLIC	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
PUBLIC	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
PUBLIC	?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ	; SimVehicleClass::Brain
PUBLIC	?GetTanker@PackageClass@@QAE?AVVU_ID@@XZ	; PackageClass::GetTanker
PUBLIC	?GetUnitPackage@FlightClass@@QAEPAVPackageClass@@XZ ; FlightClass::GetUnitPackage
PUBLIC	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
PUBLIC	?IsDigital@AircraftClass@@QAEHXZ		; AircraftClass::IsDigital
PUBLIC	?TBrain@AircraftClass@@QAEPAVTankerBrain@@XZ	; AircraftClass::TBrain
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?GetRefuelingMode@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::GetRefuelingMode
PUBLIC	?Radius@DrawableObject@@QBEMXZ			; DrawableObject::Radius
PUBLIC	?LabelColor@DrawableBSP@@QAEKXZ			; DrawableBSP::LabelColor
PUBLIC	?GetDesSpeed@TankerBrain@@QAEMXZ		; TankerBrain::GetDesSpeed
PUBLIC	?GetRefuelAngle@AirframeClass@@QAEMXZ		; AirframeClass::GetRefuelAngle
PUBLIC	?Fuel@AirframeClass@@QAEMXZ			; AirframeClass::Fuel
PUBLIC	?ExternalFuel@AirframeClass@@QAEMXZ		; AirframeClass::ExternalFuel
PUBLIC	?ClearFlag@AirframeClass@@QAEXH@Z		; AirframeClass::ClearFlag
PUBLIC	?IsSet@AirframeClass@@QBEHH@Z			; AirframeClass::IsSet
PUBLIC	?GetDecelerateDistance@AirframeClass@@QAEMXZ	; AirframeClass::GetDecelerateDistance
PUBLIC	?GetRefuelFollowRate@AirframeClass@@QAEMXZ	; AirframeClass::GetRefuelFollowRate
PUBLIC	?GetDesiredClosureFactor@AirframeClass@@QAEMXZ	; AirframeClass::GetDesiredClosureFactor
PUBLIC	?GetAIBoomDistance@AirframeClass@@QAEMXZ	; AirframeClass::GetAIBoomDistance
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_0BE@KNDJBMMN@D?5?$CF3?42f?5?$CF5?41f?5?$CF6?41f?$AA@ ; `string'
PUBLIC	??_C@_0BC@JIGGHFFG@?$CF3?42f?5?$CF5?41f?5?$CF6?41f?$AA@ ; `string'
PUBLIC	??_C@_05EJANFOIB@?5TRCT?$AA@			; `string'
PUBLIC	??_C@_0BL@IMECPFGP@dX?5?$CF3?44f?5dY?5?$CF3?44f?5dZ?5?$CF3?44f?$AA@ ; `string'
PUBLIC	??_C@_0BD@PKEFEPAH@D?5?$CF3?42f?5?$CF5?41f?5?$CF6?41?$AA@ ; `string'
PUBLIC	??_C@_0BB@BAIECOCP@?$CF3?42f?5?$CF5?41f?5?$CF6?41?$AA@ ; `string'
PUBLIC	??_C@_0BH@LJCLLEDM@Heading?5for?5alternate?6?$AA@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3a83126f
PUBLIC	__real@3c8efa34
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3d56774e
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e19999a
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e800000
PUBLIC	__real@3e99999a
PUBLIC	__real@3eb33333
PUBLIC	__real@3ee66666
PUBLIC	__real@3ef5c28f
PUBLIC	__real@3f000000
PUBLIC	__real@3f17ac60
PUBLIC	__real@3f19999a
PUBLIC	__real@3f333333
PUBLIC	__real@3f400000
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f800000
PUBLIC	__real@3fc00000
PUBLIC	__real@40200000
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@41000000
PUBLIC	__real@411688cd93040000
PUBLIC	__real@41200000
PUBLIC	__real@41a00000
PUBLIC	__real@42340000
PUBLIC	__real@42480000
PUBLIC	__real@42c80000
PUBLIC	__real@43480000
PUBLIC	__real@43960000
PUBLIC	__real@447a0000
PUBLIC	__real@453de1b0
PUBLIC	__real@459c4000
PUBLIC	__real@45bde1b0
PUBLIC	__real@463de1b0
PUBLIC	__real@48145852
PUBLIC	__real@48945852
PUBLIC	__real@48c0d937
PUBLIC	__real@49145852
PUBLIC	__real@bf800000
PUBLIC	__real@c1200000
PUBLIC	__real@c1a00000
PUBLIC	__real@c1f00000
PUBLIC	__real@c397e7c0
PUBLIC	__real@c4bde1b0
PUBLIC	__real@c69c4000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_sprintf:PROC
EXTRN	_fabs:PROC
EXTRN	_memcpy:PROC
EXTRN	_strcat:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_MonoPrint:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	??0WayPointClass@@QAE@XZ:PROC			; WayPointClass::WayPointClass
EXTRN	?SetNextWP@WayPointClass@@QAEXPAV1@@Z:PROC	; WayPointClass::SetNextWP
EXTRN	?SetLocation@WayPointClass@@QAEXMMM@Z:PROC	; WayPointClass::SetLocation
EXTRN	?GetLocation@WayPointClass@@QBEXPAM00@Z:PROC	; WayPointClass::GetLocation
EXTRN	?FollowWaypoints@DigitalBrain@@IAEXXZ:PROC	; DigitalBrain::FollowWaypoints
EXTRN	?SetWaypointSpecificStuff@DigitalBrain@@IAEXXZ:PROC ; DigitalBrain::SetWaypointSpecificStuff
EXTRN	?SimpleTrack@DigitalBrain@@IAEXW4SimpleTrackMode@1@M@Z:PROC ; DigitalBrain::SimpleTrack
EXTRN	?SimpleTrackAzimuth@DigitalBrain@@IAEMMMM@Z:PROC ; DigitalBrain::SimpleTrackAzimuth
EXTRN	?SimpleTrackElevation@DigitalBrain@@IAEMMM@Z:PROC ; DigitalBrain::SimpleTrackElevation
EXTRN	?CalculateRelativePos@DigitalBrain@@IAEXPAM00000@Z:PROC ; DigitalBrain::CalculateRelativePos
EXTRN	?Distance@@YAMMMMM@Z:PROC			; Distance
EXTRN	?FindNearestFriendlyRunway@@YAPAVObjectiveClass@@EFF@Z:PROC ; FindNearestFriendlyRunway
EXTRN	?SimToGrid@@YAFM@Z:PROC				; SimToGrid
EXTRN	?GetTankerFlight@FlightClass@@QAEPAV1@XZ:PROC	; FlightClass::GetTankerFlight
EXTRN	?MatrixMultTranspose@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z:PROC ; MatrixMultTranspose
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?SetDOFangle@DrawableBSP@@QAEXHM@Z:PROC		; DrawableBSP::SetDOFangle
EXTRN	?SetSwitchMask@DrawableBSP@@QAEXHK@Z:PROC	; DrawableBSP::SetSwitchMask
EXTRN	?GetDOFangle@DrawableBSP@@QAEMH@Z:PROC		; DrawableBSP::GetDOFangle
EXTRN	?AIReady@TankerBrain@@QAEXXZ:PROC		; TankerBrain::AIReady
EXTRN	?OptTankingPosition@TankerBrain@@QAEXPAUTpoint@@@Z:PROC ; TankerBrain::OptTankingPosition
EXTRN	?ResetFuel@AirframeClass@@QAEXXZ:PROC		; AirframeClass::ResetFuel
EXTRN	?SetSimpleMode@AirframeClass@@QAEXH@Z:PROC	; AirframeClass::SetSimpleMode
EXTRN	?get_air_speed@@YAMMH@Z:PROC			; get_air_speed
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	?SimLibElapsedTime@@3KA:DWORD			; SimLibElapsedTime
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?PlayerOptions@@3VPlayerOptionsClass@@A:BYTE	; PlayerOptions
EXTRN	?UserStickInputs@@3VPilotInputs@@A:BYTE		; UserStickInputs
EXTRN	?g_bNewRefuelHelp@@3_NA:BYTE			; g_bNewRefuelHelp
EXTRN	?g_nShowDebugLabels@@3HA:DWORD			; g_nShowDebugLabels
EXTRN	?g_bPutAIToBoom@@3_NA:BYTE			; g_bPutAIToBoom
EXTRN	?SimLibLastMajorFrameTime@@3MA:DWORD		; SimLibLastMajorFrameTime
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c69c4000
CONST	SEGMENT
__real@c69c4000 DD 0c69c4000r			; -20000
CONST	ENDS
;	COMDAT __real@c4bde1b0
CONST	SEGMENT
__real@c4bde1b0 DD 0c4bde1b0r			; -1519.05
CONST	ENDS
;	COMDAT __real@c397e7c0
CONST	SEGMENT
__real@c397e7c0 DD 0c397e7c0r			; -303.811
CONST	ENDS
;	COMDAT __real@c1f00000
CONST	SEGMENT
__real@c1f00000 DD 0c1f00000r			; -30
CONST	ENDS
;	COMDAT __real@c1a00000
CONST	SEGMENT
__real@c1a00000 DD 0c1a00000r			; -20
CONST	ENDS
;	COMDAT __real@c1200000
CONST	SEGMENT
__real@c1200000 DD 0c1200000r			; -10
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@49145852
CONST	SEGMENT
__real@49145852 DD 049145852r			; 607621
CONST	ENDS
;	COMDAT __real@48c0d937
CONST	SEGMENT
__real@48c0d937 DD 048c0d937r			; 394954
CONST	ENDS
;	COMDAT __real@48945852
CONST	SEGMENT
__real@48945852 DD 048945852r			; 303811
CONST	ENDS
;	COMDAT __real@48145852
CONST	SEGMENT
__real@48145852 DD 048145852r			; 151905
CONST	ENDS
;	COMDAT __real@463de1b0
CONST	SEGMENT
__real@463de1b0 DD 0463de1b0r			; 12152.4
CONST	ENDS
;	COMDAT __real@45bde1b0
CONST	SEGMENT
__real@45bde1b0 DD 045bde1b0r			; 6076.21
CONST	ENDS
;	COMDAT __real@459c4000
CONST	SEGMENT
__real@459c4000 DD 0459c4000r			; 5000
CONST	ENDS
;	COMDAT __real@453de1b0
CONST	SEGMENT
__real@453de1b0 DD 0453de1b0r			; 3038.11
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@43960000
CONST	SEGMENT
__real@43960000 DD 043960000r			; 300
CONST	ENDS
;	COMDAT __real@43480000
CONST	SEGMENT
__real@43480000 DD 043480000r			; 200
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@42340000
CONST	SEGMENT
__real@42340000 DD 042340000r			; 45
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@411688cd93040000
CONST	SEGMENT
__real@411688cd93040000 DQ 0411688cd93040000r	; 369203
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40200000
CONST	SEGMENT
__real@40200000 DD 040200000r			; 2.5
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f17ac60
CONST	SEGMENT
__real@3f17ac60 DD 03f17ac60r			; 0.592474
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ef5c28f
CONST	SEGMENT
__real@3ef5c28f DD 03ef5c28fr			; 0.48
CONST	ENDS
;	COMDAT __real@3ee66666
CONST	SEGMENT
__real@3ee66666 DD 03ee66666r			; 0.45
CONST	ENDS
;	COMDAT __real@3eb33333
CONST	SEGMENT
__real@3eb33333 DD 03eb33333r			; 0.35
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3d56774e
CONST	SEGMENT
__real@3d56774e DD 03d56774er			; 0.0523599
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LJCLLEDM@Heading?5for?5alternate?6?$AA@
CONST	SEGMENT
??_C@_0BH@LJCLLEDM@Heading?5for?5alternate?6?$AA@ DB 'Heading for alterna'
	DB	'te', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BAIECOCP@?$CF3?42f?5?$CF5?41f?5?$CF6?41?$AA@
CONST	SEGMENT
??_C@_0BB@BAIECOCP@?$CF3?42f?5?$CF5?41f?5?$CF6?41?$AA@ DB '%3.2f %5.1f %6'
	DB	'.1', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PKEFEPAH@D?5?$CF3?42f?5?$CF5?41f?5?$CF6?41?$AA@
CONST	SEGMENT
??_C@_0BD@PKEFEPAH@D?5?$CF3?42f?5?$CF5?41f?5?$CF6?41?$AA@ DB 'D %3.2f %5.'
	DB	'1f %6.1', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IMECPFGP@dX?5?$CF3?44f?5dY?5?$CF3?44f?5dZ?5?$CF3?44f?$AA@
CONST	SEGMENT
??_C@_0BL@IMECPFGP@dX?5?$CF3?44f?5dY?5?$CF3?44f?5dZ?5?$CF3?44f?$AA@ DB 'd'
	DB	'X %3.4f dY %3.4f dZ %3.4f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EJANFOIB@?5TRCT?$AA@
CONST	SEGMENT
??_C@_05EJANFOIB@?5TRCT?$AA@ DB ' TRCT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JIGGHFFG@?$CF3?42f?5?$CF5?41f?5?$CF6?41f?$AA@
CONST	SEGMENT
??_C@_0BC@JIGGHFFG@?$CF3?42f?5?$CF5?41f?5?$CF6?41f?$AA@ DB '%3.2f %5.1f %'
	DB	'6.1f', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KNDJBMMN@D?5?$CF3?42f?5?$CF5?41f?5?$CF6?41f?$AA@
CONST	SEGMENT
??_C@_0BE@KNDJBMMN@D?5?$CF3?42f?5?$CF5?41f?5?$CF6?41f?$AA@ DB 'D %3.2f %5'
	DB	'.1f %6.1f', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?FlightMemberWantsFuel@DigitalBrain@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FlightMemberWantsFuel@DigitalBrain@@QAEXH@Z$0
__ehfuncinfo$?FlightMemberWantsFuel@DigitalBrain@@QAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FlightMemberWantsFuel@DigitalBrain@@QAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetAIBoomDistance@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAIBoomDistance@AirframeClass@@QAEMXZ PROC		; AirframeClass::GetAIBoomDistance, COMDAT
; _this$ = ecx

; 1254 : 	float GetAIBoomDistance(void) {return auxaeroData->AIBoomDistance; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+2560]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAIBoomDistance@AirframeClass@@QAEMXZ ENDP		; AirframeClass::GetAIBoomDistance
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetDesiredClosureFactor@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDesiredClosureFactor@AirframeClass@@QAEMXZ PROC	; AirframeClass::GetDesiredClosureFactor, COMDAT
; _this$ = ecx

; 1248 : 	float GetDesiredClosureFactor(void) {return auxaeroData->desiredClosureFactor; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+2544]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDesiredClosureFactor@AirframeClass@@QAEMXZ ENDP	; AirframeClass::GetDesiredClosureFactor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetRefuelFollowRate@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRefuelFollowRate@AirframeClass@@QAEMXZ PROC		; AirframeClass::GetRefuelFollowRate, COMDAT
; _this$ = ecx

; 1247 : 	float GetRefuelFollowRate(void) {return auxaeroData->followRate; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+2540]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRefuelFollowRate@AirframeClass@@QAEMXZ ENDP		; AirframeClass::GetRefuelFollowRate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetDecelerateDistance@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDecelerateDistance@AirframeClass@@QAEMXZ PROC	; AirframeClass::GetDecelerateDistance, COMDAT
; _this$ = ecx

; 1246 : 	float GetDecelerateDistance(void) {return auxaeroData->decelDistance; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+2536]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDecelerateDistance@AirframeClass@@QAEMXZ ENDP	; AirframeClass::GetDecelerateDistance
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?IsSet@AirframeClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_testFlag$ = 8						; size = 4
?IsSet@AirframeClass@@QBEHH@Z PROC			; AirframeClass::IsSet, COMDAT
; _this$ = ecx

; 1216 : 	int IsSet (int testFlag) const {return flags & testFlag ? 1 : 0;}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	and	ecx, DWORD PTR _testFlag$[ebp]
	je	SHORT $LN3@IsSet
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSet
$LN3@IsSet:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSet:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSet@AirframeClass@@QBEHH@Z ENDP			; AirframeClass::IsSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?ClearFlag@AirframeClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newFlag$ = 8						; size = 4
?ClearFlag@AirframeClass@@QAEXH@Z PROC			; AirframeClass::ClearFlag, COMDAT
; _this$ = ecx

; 1215 : 	void ClearFlag (int newFlag) {flags &= ~newFlag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _newFlag$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+88]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+88], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearFlag@AirframeClass@@QAEXH@Z ENDP			; AirframeClass::ClearFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?ExternalFuel@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ExternalFuel@AirframeClass@@QAEMXZ PROC		; AirframeClass::ExternalFuel, COMDAT
; _this$ = ecx

; 1184 : 	float ExternalFuel (void) {return externalFuel;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+32]
	mov	esp, ebp
	pop	ebp
	ret	0
?ExternalFuel@AirframeClass@@QAEMXZ ENDP		; AirframeClass::ExternalFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?Fuel@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Fuel@AirframeClass@@QAEMXZ PROC			; AirframeClass::Fuel, COMDAT
; _this$ = ecx

; 1183 : 	float Fuel (void) {return fuel;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?Fuel@AirframeClass@@QAEMXZ ENDP			; AirframeClass::Fuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetRefuelAngle@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRefuelAngle@AirframeClass@@QAEMXZ PROC		; AirframeClass::GetRefuelAngle, COMDAT
; _this$ = ecx

; 731  : 	float GetRefuelAngle() { return auxaeroData->animRefuelAngle; }; // 01DEC03 - FRB

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+3204]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRefuelAngle@AirframeClass@@QAEMXZ ENDP		; AirframeClass::GetRefuelAngle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\tankbrn.h
;	COMDAT ?GetDesSpeed@TankerBrain@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDesSpeed@TankerBrain@@QAEMXZ PROC			; TankerBrain::GetDesSpeed, COMDAT
; _this$ = ecx

; 112  : 	  float GetDesSpeed(void) {return desSpeed; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+1232]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDesSpeed@TankerBrain@@QAEMXZ ENDP			; TankerBrain::GetDesSpeed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawbsp.h
;	COMDAT ?LabelColor@DrawableBSP@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LabelColor@DrawableBSP@@QAEKXZ PROC			; DrawableBSP::LabelColor, COMDAT
; _this$ = ecx

; 63   : 	DWORD LabelColor()										{ return labelColor; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+164]
	mov	esp, ebp
	pop	ebp
	ret	0
?LabelColor@DrawableBSP@@QAEKXZ ENDP			; DrawableBSP::LabelColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?Radius@DrawableObject@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Radius@DrawableObject@@QBEMXZ PROC			; DrawableObject::Radius, COMDAT
; _this$ = ecx

; 27   : 	float Radius() const { return radius; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]
	mov	esp, ebp
	pop	ebp
	ret	0
?Radius@DrawableObject@@QBEMXZ ENDP			; DrawableObject::Radius
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?GetRefuelingMode@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRefuelingMode@PlayerOptionsClass@@QAEHXZ PROC	; PlayerOptionsClass::GetRefuelingMode, COMDAT
; _this$ = ecx

; 144  : 	int GetRefuelingMode (void)								{ return SimAirRefuelingMode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+72]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRefuelingMode@PlayerOptionsClass@@QAEHXZ ENDP	; PlayerOptionsClass::GetRefuelingMode
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?TBrain@AircraftClass@@QAEPAVTankerBrain@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TBrain@AircraftClass@@QAEPAVTankerBrain@@XZ PROC	; AircraftClass::TBrain, COMDAT
; _this$ = ecx

; 625  : 	TankerBrain *TBrain(void)			{return (TankerBrain *)theBrain;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+672]
	mov	esp, ebp
	pop	ebp
	ret	0
?TBrain@AircraftClass@@QAEPAVTankerBrain@@XZ ENDP	; AircraftClass::TBrain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?IsDigital@AircraftClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDigital@AircraftClass@@QAEHXZ PROC			; AircraftClass::IsDigital, COMDAT
; _this$ = ecx

; 385  : 	int IsDigital() { return isDigital; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+948]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDigital@AircraftClass@@QAEHXZ ENDP			; AircraftClass::IsDigital
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ PROC ; AircraftClass::AutopilotType, COMDAT
; _this$ = ecx

; 329  : 	AutoPilotType	AutopilotType (void) {return autopilotType;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+968]
	mov	esp, ebp
	pop	ebp
	ret	0
?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ENDP ; AircraftClass::AutopilotType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\flight.h
;	COMDAT ?GetUnitPackage@FlightClass@@QAEPAVPackageClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitPackage@FlightClass@@QAEPAVPackageClass@@XZ PROC ; FlightClass::GetUnitPackage, COMDAT
; _this$ = ecx

; 216  : 		PackageClass* GetUnitPackage (void)	{ 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 217  : 			return (PackageClass*)vuDatabase->Find(package); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+388]
	push	ecx
	mov	edx, DWORD PTR [eax+384]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find

; 218  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitPackage@FlightClass@@QAEPAVPackageClass@@XZ ENDP ; FlightClass::GetUnitPackage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\package.h
;	COMDAT ?GetTanker@PackageClass@@QAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetTanker@PackageClass@@QAE?AVVU_ID@@XZ PROC		; PackageClass::GetTanker, COMDAT
; _this$ = ecx

; 87   : 		VU_ID GetTanker (void)							{ return tanker; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+336]
	mov	edx, DWORD PTR [eax+340]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetTanker@PackageClass@@QAE?AVVU_ID@@XZ ENDP		; PackageClass::GetTanker
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simveh.h
;	COMDAT ?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ PROC	; SimVehicleClass::Brain, COMDAT
; _this$ = ecx

; 67   : 	BaseBrain* Brain(void) {return theBrain;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+672]
	mov	esp, ebp
	pop	ebp
	ret	0
?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ ENDP	; SimVehicleClass::Brain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ PROC ; SimBaseClass::GetCampaignObject, COMDAT
; _this$ = ecx

; 212  : 	CampBaseClass *GetCampaignObject (void) { return campaignObject.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ENDP ; SimBaseClass::GetCampaignObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ PROC ; VuBin<CampBaseClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ENDP ; VuBin<CampBaseClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\refuel.cpp
_TEXT	SEGMENT
$T1 = -376						; size = 8
tv1954 = -368						; size = 4
tv1505 = -364						; size = 4
tv1499 = -360						; size = 4
tv1520 = -356						; size = 4
tv1484 = -352						; size = 4
tv1604 = -348						; size = 4
tv1952 = -344						; size = 4
tv1799 = -340						; size = 4
_actualClosure$2 = -336					; size = 4
tv1958 = -332						; size = 4
tv1642 = -328						; size = 4
tv1856 = -324						; size = 4
tv1526 = -320						; size = 4
_tZ$3 = -316						; size = 4
tv1960 = -312						; size = 4
tv1850 = -308						; size = 4
tv1745 = -304						; size = 4
_tY$4 = -300						; size = 4
_desiredClosure$5 = -296				; size = 4
tv1844 = -292						; size = 4
tv1478 = -288						; size = 4
_tX$6 = -284						; size = 4
tv1634 = -280						; size = 4
tv1819 = -276						; size = 4
tv1559 = -272						; size = 4
tv1962 = -268						; size = 4
tv1956 = -264						; size = 4
tv1814 = -260						; size = 4
tv1804 = -256						; size = 4
tv1709 = -252						; size = 4
tv562 = -248						; size = 4
tv778 = -244						; size = 4
tv478 = -240						; size = 4
tv1140 = -236						; size = 4
_package$7 = -232					; size = 4
tv774 = -228						; size = 4
_flight$8 = -224					; size = 4
_rz$9 = -220						; size = 4
_deceldistance$10 = -216				; size = 4
tv777 = -212						; size = 4
tv143 = -208						; size = 4
_ReadySet$11 = -204					; size = 4
tv1143 = -200						; size = 4
tv1144 = -196						; size = 4
_oldrx$12 = -192					; size = 4
_RFR$13 = -188						; size = 4
_zft$14 = -184						; size = 4
_xft$15 = -180						; size = 4
_ry$16 = -176						; size = 4
_yft$17 = -172						; size = 4
_fx$18 = -168						; size = 4
_fy$19 = -164						; size = 4
_fz$20 = -160						; size = 4
_a$21 = -156						; size = 4
_dz$22 = -152						; size = 4
_rad$23 = -148						; size = 4
_eProp$24 = -144					; size = 4
_dx$25 = -140						; size = 4
_dy$26 = -136						; size = 4
_decelerating$27 = -129					; size = 1
_rx$28 = -128						; size = 4
_dist$29 = -124						; size = 4
_tractor$30 = -117					; size = 1
_thr$31 = -116						; size = 4
_tanker$ = -112						; size = 4
_this$ = -108						; size = 4
_followVector$32 = -104					; size = 12
_followWVector$33 = -92					; size = 12
_targetPos$34 = -80					; size = 12
_tmpchr$35 = -68					; size = 32
_tmpchr$36 = -36					; size = 32
__$ArrayPad$ = -4					; size = 4
?AiRefuel@DigitalBrain@@AAEXXZ PROC			; DigitalBrain::AiRefuel
; _this$ = ecx

; 34   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 	AircraftClass *tanker = NULL;

	mov	DWORD PTR _tanker$[ebp], 0

; 36   : 	//for now
; 37   : 	if(tankerId != FalconNullId)

	push	OFFSET ?FalconNullId@@3VVU_ID@@A	; FalconNullId
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 352				; 00000160H
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	eax, al
	test	eax, eax
	je	$LN71@AiRefuel

; 38   : 	{
; 39   : 		tanker = (AircraftClass*)vuDatabase->Find(tankerId);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+356]
	push	edx
	mov	eax, DWORD PTR [ecx+352]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _tanker$[ebp], eax

; 40   : 		if(tanker)

	cmp	DWORD PTR _tanker$[ebp], 0
	je	$LN70@AiRefuel

; 41   : 		{
; 42   : 			float xft;
; 43   : 			float yft;
; 44   : 			float zft;
; 45   : 			float rx, fx;
; 46   : 			float ry, fy;
; 47   : 			float rz, fz;
; 48   : 			float dx, dy, dz, dist;
; 49   : 			Tpoint targetPos;
; 50   : 			float rad;
; 51   : 			int ReadySet = 0;

	mov	DWORD PTR _ReadySet$11[ebp], 0

; 52   : 
; 53   : 			if (self->drawPointer)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	cmp	DWORD PTR [edx+332], 0
	je	SHORT $LN69@AiRefuel

; 54   : 				rad = self->drawPointer->Radius();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [ecx+332]
	call	?Radius@DrawableObject@@QBEMXZ		; DrawableObject::Radius
	fstp	DWORD PTR _rad$23[ebp]
	jmp	SHORT $LN68@AiRefuel
$LN69@AiRefuel:

; 55   : 			else rad = 50;

	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR _rad$23[ebp], xmm0
$LN68@AiRefuel:

; 56   : 
; 57   : 			((TankerBrain*)tanker->Brain())->OptTankingPosition(&targetPos);

	lea	edx, DWORD PTR _targetPos$34[ebp]
	push	edx
	mov	ecx, DWORD PTR _tanker$[ebp]
	call	?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ ; SimVehicleClass::Brain
	mov	ecx, eax
	call	?OptTankingPosition@TankerBrain@@QAEXPAUTpoint@@@Z ; TankerBrain::OptTankingPosition

; 58   : 
; 59   : 			// JB 020311 Respond to "commands" from the tanker.
; 60   : 			SetTrackPoint(targetPos.x, targetPos.y, targetPos.z);

	push	ecx
	movss	xmm0, DWORD PTR _targetPos$34[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _targetPos$34[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _targetPos$34[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPoint@DigitalBrain@@QAEXMMM@Z	; DigitalBrain::SetTrackPoint

; 61   : 
; 62   : 			switch(refuelstatus)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+348]
	mov	DWORD PTR tv143[ebp], ecx
	cmp	DWORD PTR tv143[ebp], 3
	je	$LN62@AiRefuel
	cmp	DWORD PTR tv143[ebp], 4
	je	$LN61@AiRefuel

; 63   : 			{
; 64   : 			default:
; 65   : 			case refNoTanker:
; 66   : 			case refWaiting:
; 67   : 				trackZ += rad * tnkposition;

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+360]
	mulss	xmm0, DWORD PTR _rad$23[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+156]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+156], xmm0

; 68   : 				if(	tnkposition <= self->vehicleInUnit)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	movzx	ecx, BYTE PTR [eax+664]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+360], ecx
	jg	SHORT $LN64@AiRefuel

; 69   : 				{
; 70   : 					// Set track point 1.0NM ahead of desired location
; 71   : 					trackX	+= (-0.05F*NM_TO_FT + rad * tnkposition) * tanker->platformAngles.cossig;

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+360]
	mulss	xmm0, DWORD PTR _rad$23[ebp]
	addss	xmm0, DWORD PTR __real@c397e7c0
	mov	ecx, DWORD PTR _tanker$[ebp]
	mulss	xmm0, DWORD PTR [ecx+376]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+148]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+148], xmm0

; 72   : 					trackY	+= (-0.05F*NM_TO_FT + rad * tnkposition) * tanker->platformAngles.sinsig;

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+360]
	mulss	xmm0, DWORD PTR _rad$23[ebp]
	addss	xmm0, DWORD PTR __real@c397e7c0
	mov	edx, DWORD PTR _tanker$[ebp]
	mulss	xmm0, DWORD PTR [edx+372]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+152]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+152], xmm0

; 73   : 				}
; 74   : 				else

	jmp	SHORT $LN63@AiRefuel
$LN64@AiRefuel:

; 75   : 				{
; 76   : 					// Set track point 1.0NM ahead of desired location
; 77   : 					trackX	+= (-0.25F*NM_TO_FT + rad * tnkposition) * tanker->platformAngles.cossig;

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+360]
	mulss	xmm0, DWORD PTR _rad$23[ebp]
	addss	xmm0, DWORD PTR __real@c4bde1b0
	mov	eax, DWORD PTR _tanker$[ebp]
	mulss	xmm0, DWORD PTR [eax+376]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+148]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+148], xmm0

; 78   : 					trackY	+= (-0.25F*NM_TO_FT + rad * tnkposition) * tanker->platformAngles.sinsig;

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+360]
	mulss	xmm0, DWORD PTR _rad$23[ebp]
	addss	xmm0, DWORD PTR __real@c4bde1b0
	mov	ecx, DWORD PTR _tanker$[ebp]
	mulss	xmm0, DWORD PTR [ecx+372]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+152]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+152], xmm0
$LN63@AiRefuel:

; 79   : 				}
; 80   : 
; 81   : 				//offset trackpoint according to our position in line				
; 82   : 				trackX	+= 200.0F * -tanker->platformAngles.sinsig * tnkposition;

	mov	ecx, DWORD PTR _tanker$[ebp]
	movss	xmm0, DWORD PTR [ecx+372]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@43480000
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [edx+360]
	mulss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+148]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+148], xmm0

; 83   : 				trackY	+= 200.0F * tanker->platformAngles.cossig * tnkposition;

	mov	edx, DWORD PTR _tanker$[ebp]
	movss	xmm0, DWORD PTR __real@43480000
	mulss	xmm0, DWORD PTR [edx+376]
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [eax+360]
	mulss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+152]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+152], xmm0

; 84   : 				break;

	jmp	$LN66@AiRefuel
$LN62@AiRefuel:

; 85   : 
; 86   : 			case refRefueling:
; 87   : 				break;

	jmp	$LN66@AiRefuel
$LN61@AiRefuel:

; 88   : 
; 89   : 			case refDone:
; 90   : 				trackZ += rad * tnkposition;

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+360]
	mulss	xmm0, DWORD PTR _rad$23[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+156]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+156], xmm0

; 91   : 				
; 92   : 				if(tnkposition >= 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+360], 0
	jl	$LN60@AiRefuel

; 93   : 				{
; 94   : 					// Set track point 1.0NM ahead of desired location
; 95   : 					trackX	+= (-0.05F*NM_TO_FT + rad * tnkposition)* tanker->platformAngles.cossig;

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+360]
	mulss	xmm0, DWORD PTR _rad$23[ebp]
	addss	xmm0, DWORD PTR __real@c397e7c0
	mov	edx, DWORD PTR _tanker$[ebp]
	mulss	xmm0, DWORD PTR [edx+376]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+148]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+148], xmm0

; 96   : 					trackY	+= (-0.05F*NM_TO_FT + rad * tnkposition)* tanker->platformAngles.sinsig;

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+360]
	mulss	xmm0, DWORD PTR _rad$23[ebp]
	addss	xmm0, DWORD PTR __real@c397e7c0
	mov	eax, DWORD PTR _tanker$[ebp]
	mulss	xmm0, DWORD PTR [eax+372]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+152]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+152], xmm0

; 97   : 					
; 98   : 					//offset trackpoint according to our position in line				
; 99   : 					trackX	-= 200.0F * -tanker->platformAngles.sinsig * (4 - tnkposition);

	mov	eax, DWORD PTR _tanker$[ebp]
	movss	xmm0, DWORD PTR [eax+372]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@43480000
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, 4
	sub	edx, DWORD PTR [ecx+360]
	cvtsi2ss xmm1, edx
	mulss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+148]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+148], xmm1

; 100  : 					trackY	-= 200.0F * tanker->platformAngles.cossig * (4 - tnkposition);					

	mov	edx, DWORD PTR _tanker$[ebp]
	movss	xmm0, DWORD PTR __real@43480000
	mulss	xmm0, DWORD PTR [edx+376]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, 4
	sub	ecx, DWORD PTR [eax+360]
	cvtsi2ss xmm1, ecx
	mulss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+152]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+152], xmm1

; 101  : 				}
; 102  : 				else

	jmp	$LN53@AiRefuel
$LN60@AiRefuel:

; 103  : 				{
; 104  : 					dx = trackX - af->x;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+148]
	subss	xmm0, DWORD PTR [edx+1108]
	movss	DWORD PTR _dx$25[ebp], xmm0

; 105  : 					dy = trackY - af->y;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+152]
	subss	xmm0, DWORD PTR [edx+1112]
	movss	DWORD PTR _dy$26[ebp], xmm0

; 106  : 					dz = trackZ - af->z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+156]
	subss	xmm0, DWORD PTR [edx+1116]
	movss	DWORD PTR _dz$22[ebp], xmm0

; 107  : 
; 108  : 					if(dx*dx +dy*dy > 0.01 * NM_TO_FT *NM_TO_FT)

	movss	xmm0, DWORD PTR _dx$25[ebp]
	mulss	xmm0, DWORD PTR _dx$25[ebp]
	movss	xmm1, DWORD PTR _dy$26[ebp]
	mulss	xmm1, DWORD PTR _dy$26[ebp]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	comisd	xmm0, QWORD PTR __real@411688cd93040000
	jbe	$LN58@AiRefuel

; 109  : 					{
; 110  : 						ClearATCFlag(NeedToRefuel);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 111  : 						tankerId = FalconNullId;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [ecx+352], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [ecx+356], eax

; 112  : 						// 02DEC03 - FRB
; 113  : 						if(self->IsDigital())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?IsDigital@AircraftClass@@QAEHXZ	; AircraftClass::IsDigital
	test	eax, eax
	je	SHORT $LN56@AiRefuel

; 114  : 						{
; 115  : 							self->af->ResetFuel();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+932]
	call	?ResetFuel@AirframeClass@@QAEXXZ	; AirframeClass::ResetFuel

; 116  : 							if (self->drawPointer)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	cmp	DWORD PTR [edx+332], 0
	je	SHORT $LN56@AiRefuel

; 117  : 							{
; 118  : 								((DrawableBSP*)self->drawPointer)->SetSwitchMask(13, 0);  // 29NOV03 - FRB - Close refueling door/ Hide probe

	push	0
	push	13					; 0000000dH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [ecx+332]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask

; 119  : 								((DrawableBSP*)self->drawPointer)->SetDOFangle(41, 0);  // 29NOV03 - FRB - Close refueling door/ Retract probe

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	41					; 00000029H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+332]
	call	?SetDOFangle@DrawableBSP@@QAEXHM@Z	; DrawableBSP::SetDOFangle
$LN56@AiRefuel:

; 120  : 							}
; 121  : 						}
; 122  : 						// end FRB
; 123  : 						Package package;
; 124  : 						Flight flight;
; 125  : 
; 126  : 						flight = (Flight)self->GetCampaignObject();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _flight$8[ebp], eax

; 127  : 						if(flight)

	cmp	DWORD PTR _flight$8[ebp], 0
	je	SHORT $LN54@AiRefuel

; 128  : 						{
; 129  : 							package = flight->GetUnitPackage();

	mov	ecx, DWORD PTR _flight$8[ebp]
	call	?GetUnitPackage@FlightClass@@QAEPAVPackageClass@@XZ ; FlightClass::GetUnitPackage
	mov	DWORD PTR _package$7[ebp], eax

; 130  : 							if(package)

	cmp	DWORD PTR _package$7[ebp], 0
	je	SHORT $LN54@AiRefuel

; 131  : 							{
; 132  : 								tankerId = package->GetTanker();

	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _package$7[ebp]
	call	?GetTanker@PackageClass@@QAE?AVVU_ID@@XZ ; PackageClass::GetTanker
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+352], ecx
	mov	DWORD PTR [eax+356], edx
$LN54@AiRefuel:

; 133  : 							}
; 134  : 						}
; 135  : 					}
; 136  : 					else

	jmp	$LN53@AiRefuel
$LN58@AiRefuel:

; 137  : 					{
; 138  : 						trackX	-= 0.5F*NM_TO_FT * tanker->platformAngles.cossig;

	mov	ecx, DWORD PTR _tanker$[ebp]
	movss	xmm0, DWORD PTR __real@453de1b0
	mulss	xmm0, DWORD PTR [ecx+376]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+148]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+148], xmm1

; 139  : 						trackY	-= 0.5F*NM_TO_FT * tanker->platformAngles.sinsig;

	mov	ecx, DWORD PTR _tanker$[ebp]
	movss	xmm0, DWORD PTR __real@453de1b0
	mulss	xmm0, DWORD PTR [ecx+372]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+152]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+152], xmm1

; 140  : 
; 141  : 						//offset trackpoint according to our position in line				
; 142  : 						trackX	-= 200.0F * -tanker->platformAngles.sinsig * (4.0F - self->vehicleInUnit);

	mov	ecx, DWORD PTR _tanker$[ebp]
	movss	xmm0, DWORD PTR [ecx+372]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@43480000
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	movzx	ecx, BYTE PTR [eax+664]
	cvtsi2ss xmm1, ecx
	movss	xmm2, DWORD PTR __real@40800000
	subss	xmm2, xmm1
	mulss	xmm0, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+148]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+148], xmm1

; 143  : 						trackY	-= 200.0F * tanker->platformAngles.cossig * (4.0F - self->vehicleInUnit);

	mov	ecx, DWORD PTR _tanker$[ebp]
	movss	xmm0, DWORD PTR __real@43480000
	mulss	xmm0, DWORD PTR [ecx+376]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	movzx	ecx, BYTE PTR [eax+664]
	cvtsi2ss xmm1, ecx
	movss	xmm2, DWORD PTR __real@40800000
	subss	xmm2, xmm1
	mulss	xmm0, xmm2
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+152]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+152], xmm1
$LN53@AiRefuel:
$LN66@AiRefuel:

; 144  : 					}
; 145  : 				}
; 146  : 				break;
; 147  : 			}			
; 148  : 
; 149  : 			// Calculate relative positions
; 150  : 			dx = trackX - af->x;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+148]
	subss	xmm0, DWORD PTR [edx+1108]
	movss	DWORD PTR _dx$25[ebp], xmm0

; 151  : 			dy = trackY - af->y;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+152]
	subss	xmm0, DWORD PTR [edx+1112]
	movss	DWORD PTR _dy$26[ebp], xmm0

; 152  : 			dz = trackZ - af->z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+156]
	subss	xmm0, DWORD PTR [edx+1116]
	movss	DWORD PTR _dz$22[ebp], xmm0

; 153  : 			
; 154  : 			// Distance
; 155  : 			dist = (float)sqrt(dx*dx + dy*dy + dz*dz);

	movss	xmm0, DWORD PTR _dx$25[ebp]
	mulss	xmm0, DWORD PTR _dx$25[ebp]
	movss	xmm1, DWORD PTR _dy$26[ebp]
	mulss	xmm1, DWORD PTR _dy$26[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dz$22[ebp]
	mulss	xmm1, DWORD PTR _dz$22[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _dist$29[ebp]

; 156  : 
; 157  : 			dist = max(dist,0.001F);

	movss	xmm0, DWORD PTR _dist$29[ebp]
	comiss	xmm0, DWORD PTR __real@3a83126f
	jbe	SHORT $LN74@AiRefuel
	movss	xmm0, DWORD PTR _dist$29[ebp]
	movss	DWORD PTR tv478[ebp], xmm0
	jmp	SHORT $LN75@AiRefuel
$LN74@AiRefuel:
	movss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR tv478[ebp], xmm0
$LN75@AiRefuel:
	movss	xmm0, DWORD PTR tv478[ebp]
	movss	DWORD PTR _dist$29[ebp], xmm0

; 158  : 
; 159  : 			float RFR = af->GetRefuelFollowRate();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	call	?GetRefuelFollowRate@AirframeClass@@QAEMXZ ; AirframeClass::GetRefuelFollowRate
	fstp	DWORD PTR _RFR$13[ebp]

; 160  : 			
; 161  : 			fx = dx/dist*RFR*SimLibLastMajorFrameTime;

	movss	xmm0, DWORD PTR _dx$25[ebp]
	divss	xmm0, DWORD PTR _dist$29[ebp]
	mulss	xmm0, DWORD PTR _RFR$13[ebp]
	mulss	xmm0, DWORD PTR ?SimLibLastMajorFrameTime@@3MA
	movss	DWORD PTR _fx$18[ebp], xmm0

; 162  : 			fy = dy/dist*RFR*SimLibLastMajorFrameTime;

	movss	xmm0, DWORD PTR _dy$26[ebp]
	divss	xmm0, DWORD PTR _dist$29[ebp]
	mulss	xmm0, DWORD PTR _RFR$13[ebp]
	mulss	xmm0, DWORD PTR ?SimLibLastMajorFrameTime@@3MA
	movss	DWORD PTR _fy$19[ebp], xmm0

; 163  : 			fz = dz/dist*RFR*SimLibLastMajorFrameTime;

	movss	xmm0, DWORD PTR _dz$22[ebp]
	divss	xmm0, DWORD PTR _dist$29[ebp]
	mulss	xmm0, DWORD PTR _RFR$13[ebp]
	mulss	xmm0, DWORD PTR ?SimLibLastMajorFrameTime@@3MA
	movss	DWORD PTR _fz$20[ebp], xmm0

; 164  : 
; 165  : 			bool tractor = false;

	mov	BYTE PTR _tractor$30[ebp], 0

; 166  : 
; 167  : 			if(fabs(dx) > fabs(fx))

	push	ecx
	movss	xmm0, DWORD PTR _dx$25[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1478[ebp]
	movss	xmm0, DWORD PTR tv1478[ebp]
	push	ecx
	movss	xmm1, DWORD PTR _fx$18[ebp]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv1952[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1484[ebp]
	movss	xmm0, DWORD PTR tv1952[ebp]
	comiss	xmm0, DWORD PTR tv1484[ebp]
	jbe	SHORT $LN52@AiRefuel

; 168  : 				af->x = af->x + fx;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	xmm0, DWORD PTR [eax+1108]
	addss	xmm0, DWORD PTR _fx$18[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	DWORD PTR [edx+1108], xmm0

; 169  : 			else

	jmp	SHORT $LN51@AiRefuel
$LN52@AiRefuel:

; 170  : 			{
; 171  : 				tractor = true;

	mov	BYTE PTR _tractor$30[ebp], 1

; 172  : 				fx = af->x - trackX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1108]
	subss	xmm0, DWORD PTR [edx+148]
	movss	DWORD PTR _fx$18[ebp], xmm0

; 173  : 				af->x = trackX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	mov	DWORD PTR [ecx+1108], eax
$LN51@AiRefuel:

; 174  : 			}
; 175  : 
; 176  : 			if(fabs(dy) > fabs(fy))

	push	ecx
	movss	xmm0, DWORD PTR _dy$26[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1499[ebp]
	movss	xmm0, DWORD PTR tv1499[ebp]
	push	ecx
	movss	xmm1, DWORD PTR _fy$19[ebp]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv1954[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1505[ebp]
	movss	xmm0, DWORD PTR tv1954[ebp]
	comiss	xmm0, DWORD PTR tv1505[ebp]
	jbe	SHORT $LN50@AiRefuel

; 177  : 				af->y = af->y + fy;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR [edx+1112]
	addss	xmm0, DWORD PTR _fy$19[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	DWORD PTR [ecx+1112], xmm0

; 178  : 			else

	jmp	SHORT $LN49@AiRefuel
$LN50@AiRefuel:

; 179  : 			{
; 180  : 				tractor = true;

	mov	BYTE PTR _tractor$30[ebp], 1

; 181  : 				fy = af->y - trackY;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1112]
	subss	xmm0, DWORD PTR [ecx+152]
	movss	DWORD PTR _fy$19[ebp], xmm0

; 182  : 				af->y = trackY;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+152]
	mov	DWORD PTR [eax+1112], edx
$LN49@AiRefuel:

; 183  : 			}
; 184  : 
; 185  : 			if(fabs(dz) > fabs(fz))

	push	ecx
	movss	xmm0, DWORD PTR _dz$22[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1520[ebp]
	movss	xmm0, DWORD PTR tv1520[ebp]
	push	ecx
	movss	xmm1, DWORD PTR _fz$20[ebp]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv1956[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1526[ebp]
	movss	xmm0, DWORD PTR tv1956[ebp]
	comiss	xmm0, DWORD PTR tv1526[ebp]
	jbe	SHORT $LN48@AiRefuel

; 186  : 				af->z = af->z + fz;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	xmm0, DWORD PTR [ecx+1116]
	addss	xmm0, DWORD PTR _fz$20[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	DWORD PTR [eax+1116], xmm0

; 187  : 			else

	jmp	SHORT $LN47@AiRefuel
$LN48@AiRefuel:

; 188  : 			{
; 189  : 				tractor = true;

	mov	BYTE PTR _tractor$30[ebp], 1

; 190  : 				fz = af->z - trackZ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1116]
	subss	xmm0, DWORD PTR [eax+156]
	movss	DWORD PTR _fz$20[ebp], xmm0

; 191  : 				af->z = trackZ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	DWORD PTR [edx+1116], ecx
$LN47@AiRefuel:

; 192  : 			}
; 193  : 			
; 194  : 			ShiAssert(!_isnan(af->x));
; 195  : 			ShiAssert(!_isnan(af->y));
; 196  : 			ShiAssert(!_isnan(af->z));
; 197  : 
; 198  : 			// 12DEC03 - FRB - update distance to refueling position
; 199  : 			dx = trackX - af->x;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+148]
	subss	xmm0, DWORD PTR [eax+1108]
	movss	DWORD PTR _dx$25[ebp], xmm0

; 200  : 			dy = trackY - af->y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+152]
	subss	xmm0, DWORD PTR [eax+1112]
	movss	DWORD PTR _dy$26[ebp], xmm0

; 201  : 			dz = trackZ - af->z;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+156]
	subss	xmm0, DWORD PTR [eax+1116]
	movss	DWORD PTR _dz$22[ebp], xmm0

; 202  : 
; 203  : 			dist = (float)sqrt(dx*dx + dy*dy + dz*dz);

	movss	xmm0, DWORD PTR _dx$25[ebp]
	mulss	xmm0, DWORD PTR _dx$25[ebp]
	movss	xmm1, DWORD PTR _dy$26[ebp]
	mulss	xmm1, DWORD PTR _dy$26[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dz$22[ebp]
	mulss	xmm1, DWORD PTR _dz$22[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _dist$29[ebp]

; 204  : 
; 205  : 			dist = max(dist,0.001F);

	movss	xmm0, DWORD PTR _dist$29[ebp]
	comiss	xmm0, DWORD PTR __real@3a83126f
	jbe	SHORT $LN76@AiRefuel
	movss	xmm0, DWORD PTR _dist$29[ebp]
	movss	DWORD PTR tv562[ebp], xmm0
	jmp	SHORT $LN77@AiRefuel
$LN76@AiRefuel:
	movss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR tv562[ebp], xmm0
$LN77@AiRefuel:
	movss	xmm0, DWORD PTR tv562[ebp]
	movss	DWORD PTR _dist$29[ebp], xmm0

; 206  : 			// - FRB
; 207  : 
; 208  : // 2002-03-28 MN Hack to make AI refueling working in each and every situation: if they are really close, just put them on the boom. Period ;-)
; 209  : // this also helps them in a tanker turn, which really can only do a human ;-)
; 210  : 			if (dist < af->GetAIBoomDistance() && g_bPutAIToBoom && refuelstatus == refRefueling)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	call	?GetAIBoomDistance@AirframeClass@@QAEMXZ ; AirframeClass::GetAIBoomDistance
	fstp	DWORD PTR tv1559[ebp]
	movss	xmm0, DWORD PTR tv1559[ebp]
	comiss	xmm0, DWORD PTR _dist$29[ebp]
	jbe	$LN45@AiRefuel
	movzx	eax, BYTE PTR ?g_bPutAIToBoom@@3_NA	; g_bPutAIToBoom
	test	eax, eax
	je	$LN45@AiRefuel
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+348], 3
	jne	$LN45@AiRefuel

; 211  : 			{
; 212  : 				// 26NOV03 - FRB - Get a more recent position
; 213  : 				((TankerBrain*)tanker->Brain())->OptTankingPosition(&targetPos);

	lea	edx, DWORD PTR _targetPos$34[ebp]
	push	edx
	mov	ecx, DWORD PTR _tanker$[ebp]
	call	?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ ; SimVehicleClass::Brain
	mov	ecx, eax
	call	?OptTankingPosition@TankerBrain@@QAEXPAUTpoint@@@Z ; TankerBrain::OptTankingPosition

; 214  : 				af->x = targetPos.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	xmm0, DWORD PTR _targetPos$34[ebp]
	movss	DWORD PTR [ecx+1108], xmm0

; 215  : 				af->y = targetPos.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	xmm0, DWORD PTR _targetPos$34[ebp+4]
	movss	DWORD PTR [eax+1112], xmm0

; 216  : 				af->z = targetPos.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR _targetPos$34[ebp+8]
	movss	DWORD PTR [edx+1116], xmm0

; 217  : 				self->SetYPR(tanker->Yaw(),0.0F,0.0F); // change current heading to that of the tanker

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _tanker$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?SetYPR@VuEntity@@QAEXMMM@Z		; VuEntity::SetYPR

; 218  : 				if (!ReadySet)

	cmp	DWORD PTR _ReadySet$11[ebp], 0
	jne	SHORT $LN45@AiRefuel

; 219  : 				{
; 220  : 					((TankerBrain*)tanker->Brain())->AIReady(); // 28NOV03 - FRB - tell th tanker I'm in position

	mov	ecx, DWORD PTR _tanker$[ebp]
	call	?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ ; SimVehicleClass::Brain
	mov	ecx, eax
	call	?AIReady@TankerBrain@@QAEXXZ		; TankerBrain::AIReady

; 221  : 					ReadySet = 1;

	mov	DWORD PTR _ReadySet$11[ebp], 1
$LN45@AiRefuel:

; 222  : 				}
; 223  : 			}
; 224  : 
; 225  : 			float a,oldrx, deceldistance;
; 226  : 			bool decelerating = false;

	mov	BYTE PTR _decelerating$27[ebp], 0

; 227  : 
; 228  : 			deceldistance = af->GetDecelerateDistance();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	call	?GetDecelerateDistance@AirframeClass@@QAEMXZ ; AirframeClass::GetDecelerateDistance
	fstp	DWORD PTR _deceldistance$10[ebp]

; 229  : 
; 230  : 			CalculateRelativePos(&xft, &yft, &zft, &rx, &ry, &rz);

	lea	edx, DWORD PTR _rz$9[ebp]
	push	edx
	lea	eax, DWORD PTR _ry$16[ebp]
	push	eax
	lea	ecx, DWORD PTR _rx$28[ebp]
	push	ecx
	lea	edx, DWORD PTR _zft$14[ebp]
	push	edx
	lea	eax, DWORD PTR _yft$17[ebp]
	push	eax
	lea	ecx, DWORD PTR _xft$15[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateRelativePos@DigitalBrain@@IAEXPAM00000@Z ; DigitalBrain::CalculateRelativePos

; 231  : 			oldrx = rx;

	movss	xmm0, DWORD PTR _rx$28[ebp]
	movss	DWORD PTR _oldrx$12[ebp], xmm0

; 232  : 			if(rx > deceldistance)

	movss	xmm0, DWORD PTR _rx$28[ebp]
	comiss	xmm0, DWORD PTR _deceldistance$10[ebp]
	jbe	$LN44@AiRefuel

; 233  : 			{
; 234  : 				rStick = SimpleTrackAzimuth(rx*0.5F, ry, self->GetVt())*0.5F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _ry$16[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rx$28[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SimpleTrackAzimuth@DigitalBrain@@IAEMMMM@Z ; DigitalBrain::SimpleTrackAzimuth
	fstp	DWORD PTR tv1604[ebp]
	movss	xmm0, DWORD PTR tv1604[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+32], xmm0

; 235  : 				pStick = SimpleTrackElevation(zft, 5000.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@459c4000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _zft$14[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SimpleTrackElevation@DigitalBrain@@IAEMMM@Z ; DigitalBrain::SimpleTrackElevation
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+28]

; 236  : 				// Set track point 1.0NM ahead of desired location
; 237  : 				trackX	+= 1.0F*NM_TO_FT * tanker->platformAngles.cossig;

	mov	eax, DWORD PTR _tanker$[ebp]
	movss	xmm0, DWORD PTR __real@45bde1b0
	mulss	xmm0, DWORD PTR [eax+376]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+148]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+148], xmm0

; 238  : 				trackY	+= 1.0F*NM_TO_FT * tanker->platformAngles.sinsig;

	mov	eax, DWORD PTR _tanker$[ebp]
	movss	xmm0, DWORD PTR __real@45bde1b0
	mulss	xmm0, DWORD PTR [eax+372]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+152]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+152], xmm0

; 239  : 				CalculateRelativePos(&xft, &yft, &zft, &rx, &ry, &rz);  

	lea	eax, DWORD PTR _rz$9[ebp]
	push	eax
	lea	ecx, DWORD PTR _ry$16[ebp]
	push	ecx
	lea	edx, DWORD PTR _rx$28[ebp]
	push	edx
	lea	eax, DWORD PTR _zft$14[ebp]
	push	eax
	lea	ecx, DWORD PTR _yft$17[ebp]
	push	ecx
	lea	edx, DWORD PTR _xft$15[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateRelativePos@DigitalBrain@@IAEXPAM00000@Z ; DigitalBrain::CalculateRelativePos

; 240  : 			}
; 241  : 			else

	jmp	$LN43@AiRefuel
$LN44@AiRefuel:

; 242  : 			{
; 243  : 				decelerating = true;

	mov	BYTE PTR _decelerating$27[ebp], 1

; 244  : 			
; 245  : 				if ((self->drawPointer) && !((DrawableBSP*)self->drawPointer)->GetDOFangle(41))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	cmp	DWORD PTR [ecx+332], 0
	je	$LN42@AiRefuel
	push	41					; 00000029H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+332]
	call	?GetDOFangle@DrawableBSP@@QAEMH@Z	; DrawableBSP::GetDOFangle
	fstp	DWORD PTR tv1634[ebp]
	movss	xmm0, DWORD PTR tv1634[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN42@AiRefuel

; 246  : 				{
; 247  : 					((DrawableBSP*)self->drawPointer)->SetSwitchMask(13, 1);  // 29NOV03 - FRB - Open refueling door/ Display probe

	push	1
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+332]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask

; 248  : 					((DrawableBSP*)self->drawPointer)->SetDOFangle(41, self->af->GetRefuelAngle()*DTR);  // 29NOV03 - FRB - Open refueling door/ Extend probe

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [ecx+932]
	call	?GetRefuelAngle@AirframeClass@@QAEMXZ	; AirframeClass::GetRefuelAngle
	fstp	DWORD PTR tv1642[ebp]
	movss	xmm0, DWORD PTR tv1642[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	41					; 00000029H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+332]
	call	?SetDOFangle@DrawableBSP@@QAEXHM@Z	; DrawableBSP::SetDOFangle
$LN42@AiRefuel:

; 249  : 				}
; 250  : 
; 251  : 				// MN we want to close our trackpoint with the tankers location, so reduce trackpoint distance by distance to tanker
; 252  : 				a = rx/deceldistance + 0.25f;

	movss	xmm0, DWORD PTR _rx$28[ebp]
	divss	xmm0, DWORD PTR _deceldistance$10[ebp]
	addss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR _a$21[ebp], xmm0

; 253  : 				a = min(1.0f,max(0.45f,a)); // minimum distance of trackpoint = 0.45nm in front of the tanker

	movss	xmm0, DWORD PTR __real@3ee66666
	comiss	xmm0, DWORD PTR _a$21[ebp]
	jbe	SHORT $LN78@AiRefuel
	movss	xmm0, DWORD PTR __real@3ee66666
	movss	DWORD PTR tv774[ebp], xmm0
	jmp	SHORT $LN79@AiRefuel
$LN78@AiRefuel:
	movss	xmm0, DWORD PTR _a$21[ebp]
	movss	DWORD PTR tv774[ebp], xmm0
$LN79@AiRefuel:
	movss	xmm0, DWORD PTR tv774[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN82@AiRefuel
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv778[ebp], xmm0
	jmp	SHORT $LN83@AiRefuel
$LN82@AiRefuel:
	movss	xmm0, DWORD PTR __real@3ee66666
	comiss	xmm0, DWORD PTR _a$21[ebp]
	jbe	SHORT $LN80@AiRefuel
	movss	xmm0, DWORD PTR __real@3ee66666
	movss	DWORD PTR tv777[ebp], xmm0
	jmp	SHORT $LN81@AiRefuel
$LN80@AiRefuel:
	movss	xmm0, DWORD PTR _a$21[ebp]
	movss	DWORD PTR tv777[ebp], xmm0
$LN81@AiRefuel:
	movss	xmm0, DWORD PTR tv777[ebp]
	movss	DWORD PTR tv778[ebp], xmm0
$LN83@AiRefuel:
	movss	xmm0, DWORD PTR tv778[ebp]
	movss	DWORD PTR _a$21[ebp], xmm0

; 254  : 				trackX	+= a*NM_TO_FT * tanker->platformAngles.cossig;

	movss	xmm0, DWORD PTR _a$21[ebp]
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	ecx, DWORD PTR _tanker$[ebp]
	mulss	xmm0, DWORD PTR [ecx+376]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+148]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+148], xmm0

; 255  : 				trackY	+= a*NM_TO_FT * tanker->platformAngles.sinsig;

	movss	xmm0, DWORD PTR _a$21[ebp]
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	ecx, DWORD PTR _tanker$[ebp]
	mulss	xmm0, DWORD PTR [ecx+372]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+152]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+152], xmm0

; 256  : 				CalculateRelativePos(&xft, &yft, &zft, &rx, &ry, &rz);  

	lea	ecx, DWORD PTR _rz$9[ebp]
	push	ecx
	lea	edx, DWORD PTR _ry$16[ebp]
	push	edx
	lea	eax, DWORD PTR _rx$28[ebp]
	push	eax
	lea	ecx, DWORD PTR _zft$14[ebp]
	push	ecx
	lea	edx, DWORD PTR _yft$17[ebp]
	push	edx
	lea	eax, DWORD PTR _xft$15[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateRelativePos@DigitalBrain@@IAEXPAM00000@Z ; DigitalBrain::CalculateRelativePos

; 257  : 				rStick = SimpleTrackAzimuth(rx, ry, self->GetVt());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _ry$16[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rx$28[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SimpleTrackAzimuth@DigitalBrain@@IAEMMMM@Z ; DigitalBrain::SimpleTrackAzimuth
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+32]

; 258  : 				pStick = SimpleTrackElevation(zft, 5000.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@459c4000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _zft$14[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SimpleTrackElevation@DigitalBrain@@IAEMMM@Z ; DigitalBrain::SimpleTrackElevation
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+28]
$LN43@AiRefuel:

; 259  : 
; 260  : /*
; 261  : 				// JB 020311 Respond to "commands" from the tanker.
; 262  : 				if (!af->IsSet(AirframeClass::Refueling) && refuelstatus == refRefueling &&
; 263  : 					(SimLibElapsedTime - lastBoomCommand) > 10000)
; 264  : 				{
; 265  : 					lastBoomCommand = SimLibElapsedTime;
; 266  : 					Tpoint relPos;
; 267  : 					((TankerBrain*)tanker->DBrain())->ReceptorRelPosition(&relPos, (SimVehicleClass*) self);
; 268  : 
; 269  : 					Tpoint boompos;
; 270  : 					boompos.x = boompos.y = boompos.z = 0;
; 271  : 				
; 272  : 					af->GetRefuelPosition(&boompos);
; 273  : 					if (boompos.x == 0 && boompos.y ==0 && boompos.z == 0) 
; 274  : 						boompos.x = -39.63939795321F;
; 275  : 					
; 276  : 					relPos.x -= boompos.x;
; 277  : 
; 278  : 					if(relPos.x < 0.0f)
; 279  : 						tankerRelPositioning.x += 2.0f;
; 280  : 					else
; 281  : 						tankerRelPositioning.x -= 2.0f;
; 282  : 
; 283  : 					if(relPos.y < 0.0f)
; 284  : 						tankerRelPositioning.y += 2.0f;
; 285  : 					else
; 286  : 						tankerRelPositioning.y -= 2.0f;
; 287  : 
; 288  : 					if(relPos.z < 0.0f)
; 289  : 						tankerRelPositioning.z += 2.0f;
; 290  : 					else
; 291  : 						tankerRelPositioning.z -= 2.0f;
; 292  : 				}
; 293  : */
; 294  : 			}
; 295  : 							
; 296  : 			float desiredClosure, actualClosure;
; 297  : 			
; 298  : 			rx = (float)sqrt(xft*xft+yft*yft);

	movss	xmm0, DWORD PTR _xft$15[ebp]
	mulss	xmm0, DWORD PTR _xft$15[ebp]
	movss	xmm1, DWORD PTR _yft$17[ebp]
	mulss	xmm1, DWORD PTR _yft$17[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _rx$28[ebp]

; 299  : 
; 300  : 			Tpoint	followVector, followWVector;
; 301  : 			followWVector.x = fx;

	movss	xmm0, DWORD PTR _fx$18[ebp]
	movss	DWORD PTR _followWVector$33[ebp], xmm0

; 302  : 			followWVector.y = fy;

	movss	xmm0, DWORD PTR _fy$19[ebp]
	movss	DWORD PTR _followWVector$33[ebp+4], xmm0

; 303  : 			followWVector.z = fz;

	movss	xmm0, DWORD PTR _fz$20[ebp]
	movss	DWORD PTR _followWVector$33[ebp+8], xmm0

; 304  : 
; 305  : 			MatrixMultTranspose( &((DrawableBSP*)self->drawPointer)->orientation, &followWVector, &followVector );

	lea	eax, DWORD PTR _followVector$32[ebp]
	push	eax
	lea	ecx, DWORD PTR _followWVector$33[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+332]
	add	ecx, 48					; 00000030H
	push	ecx
	call	?MatrixMultTranspose@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMultTranspose
	add	esp, 12					; 0000000cH

; 306  : 
; 307  : 			desiredClosure = 200.0F *rx/( af->GetDesiredClosureFactor()*NM_TO_FT) - 200.0F;

	movss	xmm0, DWORD PTR __real@43480000
	mulss	xmm0, DWORD PTR _rx$28[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	movss	DWORD PTR tv1958[ebp], xmm0
	call	?GetDesiredClosureFactor@AirframeClass@@QAEMXZ ; AirframeClass::GetDesiredClosureFactor
	fstp	DWORD PTR tv1709[ebp]
	movss	xmm0, DWORD PTR tv1709[ebp]
	mulss	xmm0, DWORD PTR __real@45bde1b0
	movss	xmm1, DWORD PTR tv1958[ebp]
	divss	xmm1, xmm0
	subss	xmm1, DWORD PTR __real@43480000
	movss	DWORD PTR _desiredClosure$5[ebp], xmm1

; 308  : 		
; 309  : 			// get actual closure
; 310  : 			actualClosure = - (rx - velocitySlope + followVector.x) / SimLibLastMajorFrameTime;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _rx$28[ebp]
	subss	xmm0, DWORD PTR [eax+700]
	addss	xmm0, DWORD PTR _followVector$32[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR ?SimLibLastMajorFrameTime@@3MA
	movss	DWORD PTR _actualClosure$2[ebp], xmm0

; 311  : 			
; 312  : 			float eProp, thr;
; 313  : 			eProp = desiredClosure - actualClosure;

	movss	xmm0, DWORD PTR _desiredClosure$5[ebp]
	subss	xmm0, DWORD PTR _actualClosure$2[ebp]
	movss	DWORD PTR _eProp$24[ebp], xmm0

; 314  : 			// 27NOV03 - FRB - Slow down to get behind tanker
; 315  : 			if (oldrx < 0.0F)	// we're in front of the tanker...

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _oldrx$12[ebp]
	jbe	SHORT $LN41@AiRefuel

; 316  : 			{
; 317  : 				eProp -= 20.0F;			 

	movss	xmm0, DWORD PTR _eProp$24[ebp]
	subss	xmm0, DWORD PTR __real@41a00000
	movss	DWORD PTR _eProp$24[ebp], xmm0

; 318  : 				thr = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _thr$31[ebp], xmm0

; 319  : 				af->speedBrake = 1.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+1560], xmm0

; 320  : 			}
; 321  : 			else

	jmp	$LN28@AiRefuel
$LN41@AiRefuel:

; 322  : 			if(eProp < -30.0F)	// FRB - was -50

	movss	xmm0, DWORD PTR __real@c1f00000
	comiss	xmm0, DWORD PTR _eProp$24[ebp]
	jbe	SHORT $LN39@AiRefuel

; 323  : 			{
; 324  : 				throtl = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+40], xmm0

; 325  : 				af->speedBrake = 1.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+1560], xmm0
	jmp	$LN28@AiRefuel
$LN39@AiRefuel:

; 326  : 			}
; 327  : 			else if (eProp < -20.0F)	// FRB - was -40

	movss	xmm0, DWORD PTR __real@c1a00000
	comiss	xmm0, DWORD PTR _eProp$24[ebp]
	jbe	SHORT $LN37@AiRefuel

; 328  : 			{
; 329  : 				thr = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _thr$31[ebp], xmm0
	jmp	$LN28@AiRefuel
$LN37@AiRefuel:

; 330  : 			}
; 331  : 			else if(eProp < -10.0F)

	movss	xmm0, DWORD PTR __real@c1200000
	comiss	xmm0, DWORD PTR _eProp$24[ebp]
	jbe	SHORT $LN35@AiRefuel

; 332  : 			{
; 333  : 				thr = 0.2F;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _thr$31[ebp], xmm0
	jmp	$LN28@AiRefuel
$LN35@AiRefuel:

; 334  : 			}
; 335  : 			else if(eProp > 200.0F)

	movss	xmm0, DWORD PTR _eProp$24[ebp]
	comiss	xmm0, DWORD PTR __real@43480000
	jbe	SHORT $LN33@AiRefuel

; 336  : 			{
; 337  : 				thr = 1.0F;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _thr$31[ebp], xmm0

; 338  : 				af->speedBrake = -1.0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [ecx+1560], xmm0
	jmp	SHORT $LN28@AiRefuel
$LN33@AiRefuel:

; 339  : 			}
; 340  : 			else if(eProp > 100.0F)

	movss	xmm0, DWORD PTR _eProp$24[ebp]
	comiss	xmm0, DWORD PTR __real@42c80000
	jbe	SHORT $LN31@AiRefuel

; 341  : 			{
; 342  : 				thr = 0.8F;

	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR _thr$31[ebp], xmm0

; 343  : 				af->speedBrake = -1.0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax+1560], xmm0
	jmp	SHORT $LN28@AiRefuel
$LN31@AiRefuel:

; 344  : 			}
; 345  : 			else if(eProp > 10.0F)

	movss	xmm0, DWORD PTR _eProp$24[ebp]
	comiss	xmm0, DWORD PTR __real@41200000
	jbe	SHORT $LN29@AiRefuel

; 346  : 			{
; 347  : 				thr = 0.6F;

	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR _thr$31[ebp], xmm0

; 348  : 				af->speedBrake = -1.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [edx+1560], xmm0

; 349  : 			}
; 350  : 			else

	jmp	SHORT $LN28@AiRefuel
$LN29@AiRefuel:

; 351  : 			{	
; 352  : 				thr = 0.48F;

	movss	xmm0, DWORD PTR __real@3ef5c28f
	movss	DWORD PTR _thr$31[ebp], xmm0
$LN28@AiRefuel:

; 353  : 			}
; 354  : 
; 355  : 			if(fabs(eProp) < 200.0F)

	push	ecx
	movss	xmm0, DWORD PTR _eProp$24[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1745[ebp]
	movss	xmm0, DWORD PTR __real@43480000
	comiss	xmm0, DWORD PTR tv1745[ebp]
	jbe	$LN10@AiRefuel

; 356  : 			{		
; 357  : 				if (refuelstatus == refRefueling)//af->IsSet(AirframeClass::Refueling))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+348], 3
	jne	$LN26@AiRefuel

; 358  : 				{
; 359  : 					SimpleTrack(SimpleTrackSpd,tanker->TBrain()->GetDesSpeed()); // track the exact tanker speed

	mov	ecx, DWORD PTR _tanker$[ebp]
	call	?TBrain@AircraftClass@@QAEPAVTankerBrain@@XZ ; AircraftClass::TBrain
	mov	ecx, eax
	call	?GetDesSpeed@TankerBrain@@QAEMXZ	; TankerBrain::GetDesSpeed
	push	ecx
	fstp	DWORD PTR [esp]
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SimpleTrack@DigitalBrain@@IAEXW4SimpleTrackMode@1@M@Z ; DigitalBrain::SimpleTrack

; 360  : 					if (tanker->af->vcas > af->vcas + 10.0f)

	mov	ecx, DWORD PTR _tanker$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	xmm0, DWORD PTR [ecx+1124]
	addss	xmm0, DWORD PTR __real@41200000
	movss	xmm1, DWORD PTR [edx+1124]
	comiss	xmm1, xmm0
	jbe	SHORT $LN25@AiRefuel

; 361  : 						thr += 0.15f; // speed somewhat up, we're at least 10 knots behind tanker speed			

	movss	xmm0, DWORD PTR _thr$31[ebp]
	addss	xmm0, DWORD PTR __real@3e19999a
	movss	DWORD PTR _thr$31[ebp], xmm0
	jmp	$LN19@AiRefuel
$LN25@AiRefuel:

; 362  : 					else if (tanker->af->vcas > af->vcas + 5.0f)

	mov	edx, DWORD PTR _tanker$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR [edx+1124]
	addss	xmm0, DWORD PTR __real@40a00000
	movss	xmm1, DWORD PTR [eax+1124]
	comiss	xmm1, xmm0
	jbe	SHORT $LN23@AiRefuel

; 363  : 						thr += 0.1f; // speed a bit up, we're falling behind

	movss	xmm0, DWORD PTR _thr$31[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _thr$31[ebp], xmm0
	jmp	SHORT $LN19@AiRefuel
$LN23@AiRefuel:

; 364  : 					else if (af->vcas > tanker->af->vcas + 10.0f)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR _tanker$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR [eax+1124]
	addss	xmm0, DWORD PTR __real@41200000
	movss	xmm1, DWORD PTR [ecx+1124]
	comiss	xmm1, xmm0
	jbe	SHORT $LN21@AiRefuel

; 365  : 						thr -= 0.15f; // we're at least 10 knots too fast, go even slower

	movss	xmm0, DWORD PTR _thr$31[ebp]
	subss	xmm0, DWORD PTR __real@3e19999a
	movss	DWORD PTR _thr$31[ebp], xmm0
	jmp	SHORT $LN19@AiRefuel
$LN21@AiRefuel:

; 366  : 					else if (af->vcas > tanker->af->vcas + 5.0f)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR _tanker$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	movss	xmm0, DWORD PTR [ecx+1124]
	addss	xmm0, DWORD PTR __real@40a00000
	movss	xmm1, DWORD PTR [edx+1124]
	comiss	xmm1, xmm0
	jbe	SHORT $LN19@AiRefuel

; 367  : 						thr -= 0.1f; // we're a bit too fast, go slower

	movss	xmm0, DWORD PTR _thr$31[ebp]
	subss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _thr$31[ebp], xmm0
$LN19@AiRefuel:

; 368  : 				}
; 369  : 				else

	jmp	$LN10@AiRefuel
$LN26@AiRefuel:

; 370  : 				{
; 371  : 					if (tanker->af->vcas > af->vcas + 10.0f)

	mov	edx, DWORD PTR _tanker$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR [edx+1124]
	addss	xmm0, DWORD PTR __real@41200000
	movss	xmm1, DWORD PTR [eax+1124]
	comiss	xmm1, xmm0
	jbe	SHORT $LN17@AiRefuel

; 372  : 						thr += 0.2f;

	movss	xmm0, DWORD PTR _thr$31[ebp]
	addss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _thr$31[ebp], xmm0
	jmp	$LN10@AiRefuel
$LN17@AiRefuel:

; 373  : 					else if (tanker->af->vcas > af->vcas + 5.0f)

	mov	eax, DWORD PTR _tanker$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	xmm0, DWORD PTR [eax+1124]
	addss	xmm0, DWORD PTR __real@40a00000
	movss	xmm1, DWORD PTR [ecx+1124]
	comiss	xmm1, xmm0
	jbe	SHORT $LN15@AiRefuel

; 374  : 						thr += 0.15f;

	movss	xmm0, DWORD PTR _thr$31[ebp]
	addss	xmm0, DWORD PTR __real@3e19999a
	movss	DWORD PTR _thr$31[ebp], xmm0
	jmp	$LN10@AiRefuel
$LN15@AiRefuel:

; 375  : 					else if (tanker->af->vcas > af->vcas + 2.5f)

	mov	ecx, DWORD PTR _tanker$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	xmm0, DWORD PTR [ecx+1124]
	addss	xmm0, DWORD PTR __real@40200000
	movss	xmm1, DWORD PTR [edx+1124]
	comiss	xmm1, xmm0
	jbe	SHORT $LN13@AiRefuel

; 376  : 						thr += 0.05f;

	movss	xmm0, DWORD PTR _thr$31[ebp]
	addss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR _thr$31[ebp], xmm0
	jmp	SHORT $LN10@AiRefuel
$LN13@AiRefuel:

; 377  : 					else if (af->vcas > tanker->af->vcas - 10.0f)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	ecx, DWORD PTR _tanker$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR [edx+1124]
	subss	xmm0, DWORD PTR __real@41200000
	movss	xmm1, DWORD PTR [eax+1124]
	comiss	xmm1, xmm0
	jbe	SHORT $LN11@AiRefuel

; 378  : 						thr = thr - 0.05f;

	movss	xmm0, DWORD PTR _thr$31[ebp]
	subss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR _thr$31[ebp], xmm0

; 379  : 					else

	jmp	SHORT $LN10@AiRefuel
$LN11@AiRefuel:

; 380  : 						thr += 0.1f;

	movss	xmm0, DWORD PTR _thr$31[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _thr$31[ebp], xmm0
$LN10@AiRefuel:

; 381  : 				}
; 382  : 			}
; 383  : 
; 384  : 			if (g_nShowDebugLabels & 0x800)

	mov	eax, DWORD PTR ?g_nShowDebugLabels@@3HA	; g_nShowDebugLabels
	and	eax, 2048				; 00000800H
	je	$LN5@AiRefuel

; 385  : 			{
; 386  : 				char tmpchr[32];
; 387  : 				if (decelerating)

	movzx	ecx, BYTE PTR _decelerating$27[ebp]
	test	ecx, ecx
	je	$LN8@AiRefuel

; 388  : 					sprintf(tmpchr,"D %3.2f %5.1f %6.1f",af->vcas, oldrx, af->Fuel() + af->ExternalFuel());

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	call	?Fuel@AirframeClass@@QAEMXZ		; AirframeClass::Fuel
	fstp	DWORD PTR tv1799[ebp]
	movss	xmm0, DWORD PTR tv1799[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	DWORD PTR tv1960[ebp], xmm0
	call	?ExternalFuel@AirframeClass@@QAEMXZ	; AirframeClass::ExternalFuel
	fstp	DWORD PTR tv1804[ebp]
	movss	xmm0, DWORD PTR tv1960[ebp]
	addss	xmm0, DWORD PTR tv1804[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _oldrx$12[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	cvtss2sd xmm0, DWORD PTR [edx+1124]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BE@KNDJBMMN@D?5?$CF3?42f?5?$CF5?41f?5?$CF6?41f?$AA@
	lea	eax, DWORD PTR _tmpchr$36[ebp]
	push	eax
	call	_sprintf
	add	esp, 32					; 00000020H

; 389  : 				else

	jmp	$LN7@AiRefuel
$LN8@AiRefuel:

; 390  : 					sprintf(tmpchr,"%3.2f %5.1f %6.1f",af->vcas, oldrx, af->Fuel() + af->ExternalFuel());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	call	?Fuel@AirframeClass@@QAEMXZ		; AirframeClass::Fuel
	fstp	DWORD PTR tv1814[ebp]
	movss	xmm0, DWORD PTR tv1814[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	movss	DWORD PTR tv1962[ebp], xmm0
	call	?ExternalFuel@AirframeClass@@QAEMXZ	; AirframeClass::ExternalFuel
	fstp	DWORD PTR tv1819[ebp]
	movss	xmm0, DWORD PTR tv1962[ebp]
	addss	xmm0, DWORD PTR tv1819[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _oldrx$12[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	cvtss2sd xmm0, DWORD PTR [ecx+1124]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BC@JIGGHFFG@?$CF3?42f?5?$CF5?41f?5?$CF6?41f?$AA@
	lea	edx, DWORD PTR _tmpchr$36[ebp]
	push	edx
	call	_sprintf
	add	esp, 32					; 00000020H
$LN7@AiRefuel:

; 391  : 				if (tractor)

	movzx	eax, BYTE PTR _tractor$30[ebp]
	test	eax, eax
	je	SHORT $LN6@AiRefuel

; 392  : 					strcat(tmpchr," TRCT");

	push	OFFSET ??_C@_05EJANFOIB@?5TRCT?$AA@
	lea	ecx, DWORD PTR _tmpchr$36[ebp]
	push	ecx
	call	_strcat
	add	esp, 8
$LN6@AiRefuel:

; 393  : 				if (self->drawPointer)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	cmp	DWORD PTR [eax+332], 0
	je	SHORT $LN5@AiRefuel

; 394  : 					((DrawableBSP*)self->drawPointer)->SetLabel (tmpchr, ((DrawableBSP*)self->drawPointer)->LabelColor());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+332]
	call	?LabelColor@DrawableBSP@@QAEKXZ		; DrawableBSP::LabelColor
	push	eax
	lea	eax, DWORD PTR _tmpchr$36[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+332]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+332]
	mov	edx, DWORD PTR [eax+8]
	call	edx
$LN5@AiRefuel:

; 395  : 			}
; 396  : 
; 397  : 			if (g_nShowDebugLabels & 0x20000)

	mov	eax, DWORD PTR ?g_nShowDebugLabels@@3HA	; g_nShowDebugLabels
	and	eax, 131072				; 00020000H
	je	$LN3@AiRefuel

; 398  : 			{
; 399  : 				char tmpchr[32];
; 400  : 				float tX, tY, tZ;
; 401  : 
; 402  : 			// JB 020311 Respond to commands from the tanker.
; 403  : 				tX = targetPos.x - tankerRelPositioning.x;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _targetPos$34[ebp]
	subss	xmm0, DWORD PTR [ecx+684]
	movss	DWORD PTR _tX$6[ebp], xmm0

; 404  : 				tY = targetPos.y - tankerRelPositioning.y;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _targetPos$34[ebp+4]
	subss	xmm0, DWORD PTR [edx+688]
	movss	DWORD PTR _tY$4[ebp], xmm0

; 405  : 				tZ = targetPos.z - tankerRelPositioning.z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _targetPos$34[ebp+8]
	subss	xmm0, DWORD PTR [eax+692]
	movss	DWORD PTR _tZ$3[ebp], xmm0

; 406  : 
; 407  : 				fx = tX - self->XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1844[ebp]
	movss	xmm0, DWORD PTR _tX$6[ebp]
	subss	xmm0, DWORD PTR tv1844[ebp]
	movss	DWORD PTR _fx$18[ebp], xmm0

; 408  : 				fy = tY - self->YPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1850[ebp]
	movss	xmm0, DWORD PTR _tY$4[ebp]
	subss	xmm0, DWORD PTR tv1850[ebp]
	movss	DWORD PTR _fy$19[ebp], xmm0

; 409  : 				fz = tZ - self->ZPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1856[ebp]
	movss	xmm0, DWORD PTR _tZ$3[ebp]
	subss	xmm0, DWORD PTR tv1856[ebp]
	movss	DWORD PTR _fz$20[ebp], xmm0

; 410  : 				sprintf(tmpchr,"dX %3.4f dY %3.4f dZ %3.4f",fx,fy,fz);

	cvtss2sd xmm0, DWORD PTR _fz$20[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _fy$19[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _fx$18[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BL@IMECPFGP@dX?5?$CF3?44f?5dY?5?$CF3?44f?5dZ?5?$CF3?44f?$AA@
	lea	ecx, DWORD PTR _tmpchr$35[ebp]
	push	ecx
	call	_sprintf
	add	esp, 32					; 00000020H

; 411  : 				if (self->drawPointer)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	cmp	DWORD PTR [eax+332], 0
	je	SHORT $LN3@AiRefuel

; 412  : 					((DrawableBSP*)self->drawPointer)->SetLabel (tmpchr, ((DrawableBSP*)self->drawPointer)->LabelColor());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+332]
	call	?LabelColor@DrawableBSP@@QAEKXZ		; DrawableBSP::LabelColor
	push	eax
	lea	eax, DWORD PTR _tmpchr$35[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+332]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+332]
	mov	edx, DWORD PTR [eax+8]
	call	edx
$LN3@AiRefuel:

; 413  : 			}
; 414  : 
; 415  : 
; 416  : 			throtl = min ( max (thr, 0.0F), 1.5F);

	movss	xmm0, DWORD PTR _thr$31[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN84@AiRefuel
	movss	xmm0, DWORD PTR _thr$31[ebp]
	movss	DWORD PTR tv1140[ebp], xmm0
	jmp	SHORT $LN85@AiRefuel
$LN84@AiRefuel:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv1140[ebp], xmm0
$LN85@AiRefuel:
	movss	xmm0, DWORD PTR __real@3fc00000
	comiss	xmm0, DWORD PTR tv1140[ebp]
	jbe	SHORT $LN88@AiRefuel
	movss	xmm0, DWORD PTR _thr$31[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN86@AiRefuel
	movss	xmm0, DWORD PTR _thr$31[ebp]
	movss	DWORD PTR tv1143[ebp], xmm0
	jmp	SHORT $LN87@AiRefuel
$LN86@AiRefuel:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv1143[ebp], xmm0
$LN87@AiRefuel:
	movss	xmm0, DWORD PTR tv1143[ebp]
	movss	DWORD PTR tv1144[ebp], xmm0
	jmp	SHORT $LN89@AiRefuel
$LN88@AiRefuel:
	movss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR tv1144[ebp], xmm0
$LN89@AiRefuel:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv1144[ebp]
	movss	DWORD PTR [eax+40], xmm0

; 417  : 			
; 418  : 			velocitySlope = rx;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _rx$28[ebp]
	movss	DWORD PTR [ecx+700], xmm0

; 419  : 		}
; 420  : 		else

	jmp	SHORT $LN2@AiRefuel
$LN70@AiRefuel:

; 421  : 		{
; 422  : 			//tanker must have died
; 423  : 			tankerId = FalconNullId;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [edx+352], eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [edx+356], ecx

; 424  : 			ClearATCFlag(Refueling);

	push	256					; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag
$LN2@AiRefuel:

; 425  : 		}
; 426  : 	}
; 427  : 	else

	jmp	SHORT $LN1@AiRefuel
$LN71@AiRefuel:

; 428  : 	{
; 429  : 		FollowWaypoints();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FollowWaypoints@DigitalBrain@@IAEXXZ	; DigitalBrain::FollowWaypoints
$LN1@AiRefuel:

; 430  : 	}
; 431  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?AiRefuel@DigitalBrain@@AAEXXZ ENDP			; DigitalBrain::AiRefuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\refuel.cpp
_TEXT	SEGMENT
tv2042 = -420						; size = 4
tv1540 = -416						; size = 4
tv1419 = -412						; size = 4
tv1452 = -408						; size = 4
tv2040 = -404						; size = 4
tv1498 = -400						; size = 4
tv1413 = -396						; size = 4
tv2120 = -392						; size = 4
tv1933 = -388						; size = 4
tv1517 = -384						; size = 4
tv2134 = -380						; size = 4
tv2038 = -376						; size = 4
tv1928 = -372						; size = 4
tv1425 = -368						; size = 4
tv1918 = -364						; size = 4
tv2118 = -360						; size = 4
tv2132 = -356						; size = 4
tv1529 = -352						; size = 4
tv1913 = -348						; size = 4
tv1510 = -344						; size = 4
tv1841 = -340						; size = 4
tv1493 = -336						; size = 4
_actualClosure$ = -332					; size = 4
tv1458 = -328						; size = 4
_desiredClosure$ = -324					; size = 4
tv2044 = -320						; size = 4
tv2130 = -316						; size = 4
tv1579 = -312						; size = 4
tv1796 = -308						; size = 4
tv1572 = -304						; size = 4
tv1704 = -300						; size = 4
tv1545 = -296						; size = 4
tv1655 = -292						; size = 4
tv1534 = -288						; size = 4
tv1641 = -284						; size = 4
tv1522 = -280						; size = 4
tv2128 = -276						; size = 4
tv2116 = -272						; size = 4
tv1635 = -268						; size = 4
tv1503 = -264						; size = 4
tv1620 = -260						; size = 4
tv2114 = -256						; size = 4
tv2126 = -252						; size = 4
tv1479 = -248						; size = 4
tv1614 = -244						; size = 4
tv1473 = -240						; size = 4
tv1599 = -236						; size = 4
tv2046 = -232						; size = 4
tv2124 = -228						; size = 4
tv1437 = -224						; size = 4
tv1593 = -220						; size = 4
tv1431 = -216						; size = 4
tv1586 = -212						; size = 4
tv2122 = -208						; size = 4
tv2112 = -204						; size = 4
tv527 = -200						; size = 4
tv530 = -196						; size = 4
_deceldistance$1 = -192					; size = 4
tv132 = -188						; size = 4
_ReadySet$ = -184					; size = 4
tv1195 = -180						; size = 4
tv310 = -176						; size = 4
tv531 = -172						; size = 4
tv1205 = -168						; size = 4
tv1204 = -164						; size = 4
_rz$ = -160						; size = 4
_oldrx$2 = -156						; size = 4
_yft$ = -152						; size = 4
_xft$ = -148						; size = 4
_ry$ = -144						; size = 4
_zft$ = -140						; size = 4
_fxr$ = -136						; size = 4
_fzr$ = -132						; size = 4
_fyr$ = -128						; size = 4
_a$3 = -124						; size = 4
_fx$ = -120						; size = 4
_fz$ = -116						; size = 4
_refuelMode$ = -112					; size = 4
_fy$ = -108						; size = 4
_dx$ = -104						; size = 4
_dz$ = -100						; size = 4
_eProp$ = -96						; size = 4
_dy$ = -92						; size = 4
_decelerating$4 = -85					; size = 1
_rx$ = -84						; size = 4
_dist$ = -80						; size = 4
_this$ = -76						; size = 4
_followVector$5 = -72					; size = 12
_followWVector$6 = -60					; size = 12
_targetPos$ = -48					; size = 12
_tmpchr$7 = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_tanker$ = 8						; size = 4
?HelpRefuel@DigitalBrain@@QAEXPAVAircraftClass@@@Z PROC	; DigitalBrain::HelpRefuel
; _this$ = ecx

; 437  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 420				; 000001a4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 438  : 
; 439  : 	float desiredClosure, actualClosure;
; 440  : 	float eProp;
; 441  : 	float xft;
; 442  : 	float yft;
; 443  : 	float zft;
; 444  : 	float rx, fx, fxr;
; 445  : 	float ry, fy, fyr;
; 446  : 	float rz, fz, fzr;
; 447  : 	float dx, dy, dz, dist;
; 448  : 	Tpoint targetPos;
; 449  : 	int refuelMode;
; 450  : 	int ReadySet = 0;

	mov	DWORD PTR _ReadySet$[ebp], 0

; 451  : 
; 452  : 	fx = fy = fz = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _fz$[ebp], xmm0
	movss	xmm0, DWORD PTR _fz$[ebp]
	movss	DWORD PTR _fy$[ebp], xmm0
	movss	xmm0, DWORD PTR _fy$[ebp]
	movss	DWORD PTR _fx$[ebp], xmm0

; 453  : 	fxr = fyr = fzr = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _fzr$[ebp], xmm0
	movss	xmm0, DWORD PTR _fzr$[ebp]
	movss	DWORD PTR _fyr$[ebp], xmm0
	movss	xmm0, DWORD PTR _fyr$[ebp]
	movss	DWORD PTR _fxr$[ebp], xmm0

; 454  : 
; 455  : 	((TankerBrain*)tanker->Brain())->OptTankingPosition(&targetPos);

	lea	eax, DWORD PTR _targetPos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tanker$[ebp]
	call	?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ ; SimVehicleClass::Brain
	mov	ecx, eax
	call	?OptTankingPosition@TankerBrain@@QAEXPAUTpoint@@@Z ; TankerBrain::OptTankingPosition

; 456  : 
; 457  : 	SetTrackPoint(targetPos.x, targetPos.y, targetPos.z);

	push	ecx
	movss	xmm0, DWORD PTR _targetPos$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _targetPos$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _targetPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPoint@DigitalBrain@@QAEXMMM@Z	; DigitalBrain::SetTrackPoint

; 458  : 
; 459  : 	dx = trackX - af->x;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+148]
	subss	xmm0, DWORD PTR [edx+1108]
	movss	DWORD PTR _dx$[ebp], xmm0

; 460  : 	dy = trackY - af->y;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+152]
	subss	xmm0, DWORD PTR [edx+1112]
	movss	DWORD PTR _dy$[ebp], xmm0

; 461  : 	dz = trackZ - af->z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+156]
	subss	xmm0, DWORD PTR [edx+1116]
	movss	DWORD PTR _dz$[ebp], xmm0

; 462  : 
; 463  : 	dist = (float)sqrt(dx*dx + dy*dy + dz*dz);

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dz$[ebp]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _dist$[ebp]

; 464  : 
; 465  : 	dist = max(dist,0.001F);

	movss	xmm0, DWORD PTR _dist$[ebp]
	comiss	xmm0, DWORD PTR __real@3a83126f
	jbe	SHORT $LN68@HelpRefuel
	movss	xmm0, DWORD PTR _dist$[ebp]
	movss	DWORD PTR tv132[ebp], xmm0
	jmp	SHORT $LN69@HelpRefuel
$LN68@HelpRefuel:
	movss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR tv132[ebp], xmm0
$LN69@HelpRefuel:
	movss	xmm0, DWORD PTR tv132[ebp]
	movss	DWORD PTR _dist$[ebp], xmm0

; 466  : 	
; 467  : 	if(af->IsSet(AirframeClass::Refueling))

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN59@HelpRefuel

; 468  : 	{
; 469  : 		fxr = dx/dist*af->GetRefuelFollowRate()*SimLibLastMajorFrameTime;

	movss	xmm0, DWORD PTR _dx$[ebp]
	divss	xmm0, DWORD PTR _dist$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	movss	DWORD PTR tv2038[ebp], xmm0
	call	?GetRefuelFollowRate@AirframeClass@@QAEMXZ ; AirframeClass::GetRefuelFollowRate
	fstp	DWORD PTR tv1413[ebp]
	movss	xmm0, DWORD PTR tv2038[ebp]
	mulss	xmm0, DWORD PTR tv1413[ebp]
	mulss	xmm0, DWORD PTR ?SimLibLastMajorFrameTime@@3MA
	movss	DWORD PTR _fxr$[ebp], xmm0

; 470  : 		fyr = dy/dist*af->GetRefuelFollowRate()*SimLibLastMajorFrameTime;

	movss	xmm0, DWORD PTR _dy$[ebp]
	divss	xmm0, DWORD PTR _dist$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	DWORD PTR tv2040[ebp], xmm0
	call	?GetRefuelFollowRate@AirframeClass@@QAEMXZ ; AirframeClass::GetRefuelFollowRate
	fstp	DWORD PTR tv1419[ebp]
	movss	xmm0, DWORD PTR tv2040[ebp]
	mulss	xmm0, DWORD PTR tv1419[ebp]
	mulss	xmm0, DWORD PTR ?SimLibLastMajorFrameTime@@3MA
	movss	DWORD PTR _fyr$[ebp], xmm0

; 471  : 		fzr = dz/dist*af->GetRefuelFollowRate()*SimLibLastMajorFrameTime;

	movss	xmm0, DWORD PTR _dz$[ebp]
	divss	xmm0, DWORD PTR _dist$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	movss	DWORD PTR tv2042[ebp], xmm0
	call	?GetRefuelFollowRate@AirframeClass@@QAEMXZ ; AirframeClass::GetRefuelFollowRate
	fstp	DWORD PTR tv1425[ebp]
	movss	xmm0, DWORD PTR tv2042[ebp]
	mulss	xmm0, DWORD PTR tv1425[ebp]
	mulss	xmm0, DWORD PTR ?SimLibLastMajorFrameTime@@3MA
	movss	DWORD PTR _fzr$[ebp], xmm0

; 472  : 
; 473  : 		if(fabs(dx) > fabs(fxr))

	push	ecx
	movss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1431[ebp]
	movss	xmm0, DWORD PTR tv1431[ebp]
	push	ecx
	movss	xmm1, DWORD PTR _fxr$[ebp]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv2044[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1437[ebp]
	movss	xmm0, DWORD PTR tv2044[ebp]
	comiss	xmm0, DWORD PTR tv1437[ebp]
	jbe	SHORT $LN64@HelpRefuel

; 474  : 			af->x = af->x + fxr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	xmm0, DWORD PTR [eax+1108]
	addss	xmm0, DWORD PTR _fxr$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	DWORD PTR [edx+1108], xmm0

; 475  : 		else

	jmp	SHORT $LN63@HelpRefuel
$LN64@HelpRefuel:

; 476  : 		{
; 477  : 			fxr = trackX - af->x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+148]
	subss	xmm0, DWORD PTR [ecx+1108]
	movss	DWORD PTR _fxr$[ebp], xmm0

; 478  : 			af->x = trackX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	mov	DWORD PTR [ecx+1108], eax
$LN63@HelpRefuel:

; 479  : 		}
; 480  : 
; 481  : 		if(fabs(dy) > fabs(fyr))

	push	ecx
	movss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1452[ebp]
	movss	xmm0, DWORD PTR tv1452[ebp]
	push	ecx
	movss	xmm1, DWORD PTR _fyr$[ebp]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv2046[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1458[ebp]
	movss	xmm0, DWORD PTR tv2046[ebp]
	comiss	xmm0, DWORD PTR tv1458[ebp]
	jbe	SHORT $LN62@HelpRefuel

; 482  : 			af->y = af->y + fyr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR [edx+1112]
	addss	xmm0, DWORD PTR _fyr$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	DWORD PTR [ecx+1112], xmm0

; 483  : 		else

	jmp	SHORT $LN61@HelpRefuel
$LN62@HelpRefuel:

; 484  : 		{
; 485  : 			fyr = trackY - af->y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+152]
	subss	xmm0, DWORD PTR [eax+1112]
	movss	DWORD PTR _fyr$[ebp], xmm0

; 486  : 			af->y = trackY;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+152]
	mov	DWORD PTR [eax+1112], edx
$LN61@HelpRefuel:

; 487  : 		}
; 488  : 
; 489  : 		if(fabs(dz) > fabs(fzr))

	push	ecx
	movss	xmm0, DWORD PTR _dz$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1473[ebp]
	movss	xmm0, DWORD PTR tv1473[ebp]
	push	ecx
	movss	xmm1, DWORD PTR _fzr$[ebp]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv2112[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1479[ebp]
	movss	xmm0, DWORD PTR tv2112[ebp]
	comiss	xmm0, DWORD PTR tv1479[ebp]
	jbe	SHORT $LN60@HelpRefuel

; 490  : 			af->z = af->z + fzr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	xmm0, DWORD PTR [ecx+1116]
	addss	xmm0, DWORD PTR _fzr$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	DWORD PTR [eax+1116], xmm0

; 491  : 		else

	jmp	SHORT $LN59@HelpRefuel
$LN60@HelpRefuel:

; 492  : 		{
; 493  : 			fzr = trackZ - af->z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+156]
	subss	xmm0, DWORD PTR [edx+1116]
	movss	DWORD PTR _fzr$[ebp], xmm0

; 494  : 			af->z = trackZ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	DWORD PTR [edx+1116], ecx
$LN59@HelpRefuel:

; 495  : 		}
; 496  : 	}
; 497  : 
; 498  : 	ShiAssert(!_isnan(af->x));
; 499  : 	ShiAssert(!_isnan(af->y));
; 500  : 	ShiAssert(!_isnan(af->z));
; 501  : 
; 502  : 	refuelMode = PlayerOptions.GetRefuelingMode() - 1;

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetRefuelingMode@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::GetRefuelingMode
	sub	eax, 1
	mov	DWORD PTR _refuelMode$[ebp], eax

; 503  : 
; 504  : 	// OW: sylvains refuelling fix
; 505  : // 2002-02-28 MN refuel fixes, help the player somewhat more. Simplistic = full AI control 
; 506  : #ifndef DEBUG
; 507  : 	if( dist < refuelMode * 100.0F &&
; 508  : 		fabs(tanker->Yaw() - self->Yaw()) < 3.0F *DTR *refuelMode &&
; 509  : 		fabs(tanker->GetVt() - self->GetVt())*FTPSEC_TO_KNOTS < (5.0F + 45.0F *(refuelMode /* S.G. NO! refuelMode is ALREADY -1! - 1 */  )) &&
; 510  : 		fabs(self->Pitch()*DTR) < 8.0F * refuelMode &&
; 511  : 		fabs(self->Roll()*DTR) < 8.0F * refuelMode)

	cvtsi2ss xmm0, DWORD PTR _refuelMode$[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	comiss	xmm0, DWORD PTR _dist$[ebp]
	jbe	$LN58@HelpRefuel
	mov	ecx, DWORD PTR _tanker$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv1493[ebp]
	movss	xmm0, DWORD PTR tv1493[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	movss	DWORD PTR tv2114[ebp], xmm0
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv1498[ebp]
	movss	xmm0, DWORD PTR tv2114[ebp]
	subss	xmm0, DWORD PTR tv1498[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1503[ebp]
	cvtsi2ss xmm0, DWORD PTR _refuelMode$[ebp]
	mulss	xmm0, DWORD PTR __real@3d56774e
	comiss	xmm0, DWORD PTR tv1503[ebp]
	jbe	$LN58@HelpRefuel
	mov	eax, DWORD PTR _tanker$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _tanker$[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv1510[ebp]
	movss	xmm0, DWORD PTR tv1510[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR [edx+220]
	movss	DWORD PTR tv2116[ebp], xmm0
	call	eax
	fstp	DWORD PTR tv1517[ebp]
	movss	xmm0, DWORD PTR tv2116[ebp]
	subss	xmm0, DWORD PTR tv1517[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1522[ebp]
	movss	xmm0, DWORD PTR tv1522[ebp]
	mulss	xmm0, DWORD PTR __real@3f17ac60
	cvtsi2ss xmm1, DWORD PTR _refuelMode$[ebp]
	mulss	xmm1, DWORD PTR __real@42340000
	addss	xmm1, DWORD PTR __real@40a00000
	comiss	xmm1, xmm0
	jbe	$LN58@HelpRefuel
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	fstp	DWORD PTR tv1529[ebp]
	movss	xmm0, DWORD PTR tv1529[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1534[ebp]
	cvtsi2ss xmm0, DWORD PTR _refuelMode$[ebp]
	mulss	xmm0, DWORD PTR __real@41000000
	comiss	xmm0, DWORD PTR tv1534[ebp]
	jbe	$LN58@HelpRefuel
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv1540[ebp]
	movss	xmm0, DWORD PTR tv1540[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1545[ebp]
	cvtsi2ss xmm0, DWORD PTR _refuelMode$[ebp]
	mulss	xmm0, DWORD PTR __real@41000000
	comiss	xmm0, DWORD PTR tv1545[ebp]
	jbe	$LN58@HelpRefuel

; 512  : #endif
; 513  : 	{
; 514  : 		//when helping we'll use simple mode, as it is the only practical way to fly formation
; 515  : 		af->SetSimpleMode(SIMPLE_MODE_AF);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	call	?SetSimpleMode@AirframeClass@@QAEXH@Z	; AirframeClass::SetSimpleMode

; 516  : 		
; 517  : 		
; 518  : 		dx = trackX - af->x;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+148]
	subss	xmm0, DWORD PTR [edx+1108]
	movss	DWORD PTR _dx$[ebp], xmm0

; 519  : 		dy = trackY - af->y;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+152]
	subss	xmm0, DWORD PTR [edx+1112]
	movss	DWORD PTR _dy$[ebp], xmm0

; 520  : 		dz = trackZ - af->z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+156]
	subss	xmm0, DWORD PTR [edx+1116]
	movss	DWORD PTR _dz$[ebp], xmm0

; 521  : 
; 522  : 		dist = (float)sqrt(dx*dx + dy*dy + dz*dz);

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dz$[ebp]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _dist$[ebp]

; 523  : 
; 524  : 		dist = max(dist,0.001F);

	movss	xmm0, DWORD PTR _dist$[ebp]
	comiss	xmm0, DWORD PTR __real@3a83126f
	jbe	SHORT $LN70@HelpRefuel
	movss	xmm0, DWORD PTR _dist$[ebp]
	movss	DWORD PTR tv310[ebp], xmm0
	jmp	SHORT $LN71@HelpRefuel
$LN70@HelpRefuel:
	movss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR tv310[ebp], xmm0
$LN71@HelpRefuel:
	movss	xmm0, DWORD PTR tv310[ebp]
	movss	DWORD PTR _dist$[ebp], xmm0

; 525  : 
; 526  : 		fx = dx/dist*af->GetRefuelFollowRate()*SimLibLastMajorFrameTime*(refuelMode+1);

	movss	xmm0, DWORD PTR _dx$[ebp]
	divss	xmm0, DWORD PTR _dist$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	movss	DWORD PTR tv2118[ebp], xmm0
	call	?GetRefuelFollowRate@AirframeClass@@QAEMXZ ; AirframeClass::GetRefuelFollowRate
	fstp	DWORD PTR tv1572[ebp]
	movss	xmm0, DWORD PTR tv2118[ebp]
	mulss	xmm0, DWORD PTR tv1572[ebp]
	mulss	xmm0, DWORD PTR ?SimLibLastMajorFrameTime@@3MA
	mov	edx, DWORD PTR _refuelMode$[ebp]
	add	edx, 1
	cvtsi2ss xmm1, edx
	mulss	xmm0, xmm1
	movss	DWORD PTR _fx$[ebp], xmm0

; 527  : 		fy = dy/dist*af->GetRefuelFollowRate()*SimLibLastMajorFrameTime*(refuelMode+1);

	movss	xmm0, DWORD PTR _dy$[ebp]
	divss	xmm0, DWORD PTR _dist$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	DWORD PTR tv2120[ebp], xmm0
	call	?GetRefuelFollowRate@AirframeClass@@QAEMXZ ; AirframeClass::GetRefuelFollowRate
	fstp	DWORD PTR tv1579[ebp]
	movss	xmm0, DWORD PTR tv2120[ebp]
	mulss	xmm0, DWORD PTR tv1579[ebp]
	mulss	xmm0, DWORD PTR ?SimLibLastMajorFrameTime@@3MA
	mov	ecx, DWORD PTR _refuelMode$[ebp]
	add	ecx, 1
	cvtsi2ss xmm1, ecx
	mulss	xmm0, xmm1
	movss	DWORD PTR _fy$[ebp], xmm0

; 528  : 		fz = dz/dist*af->GetRefuelFollowRate()*SimLibLastMajorFrameTime*(refuelMode+1);

	movss	xmm0, DWORD PTR _dz$[ebp]
	divss	xmm0, DWORD PTR _dist$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	movss	DWORD PTR tv2122[ebp], xmm0
	call	?GetRefuelFollowRate@AirframeClass@@QAEMXZ ; AirframeClass::GetRefuelFollowRate
	fstp	DWORD PTR tv1586[ebp]
	movss	xmm0, DWORD PTR tv2122[ebp]
	mulss	xmm0, DWORD PTR tv1586[ebp]
	mulss	xmm0, DWORD PTR ?SimLibLastMajorFrameTime@@3MA
	mov	eax, DWORD PTR _refuelMode$[ebp]
	add	eax, 1
	cvtsi2ss xmm1, eax
	mulss	xmm0, xmm1
	movss	DWORD PTR _fz$[ebp], xmm0

; 529  : 
; 530  : 		if(fabs(dx) > fabs(fx))

	push	ecx
	movss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1593[ebp]
	movss	xmm0, DWORD PTR tv1593[ebp]
	push	ecx
	movss	xmm1, DWORD PTR _fx$[ebp]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv2124[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1599[ebp]
	movss	xmm0, DWORD PTR tv2124[ebp]
	comiss	xmm0, DWORD PTR tv1599[ebp]
	jbe	SHORT $LN57@HelpRefuel

; 531  : 			af->x = af->x + fx;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR [edx+1108]
	addss	xmm0, DWORD PTR _fx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	DWORD PTR [ecx+1108], xmm0

; 532  : 		else

	jmp	SHORT $LN56@HelpRefuel
$LN57@HelpRefuel:

; 533  : 		{
; 534  : 			fx = trackX - af->x;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+148]
	subss	xmm0, DWORD PTR [eax+1108]
	movss	DWORD PTR _fx$[ebp], xmm0

; 535  : 			af->x = trackX;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	DWORD PTR [eax+1108], edx
$LN56@HelpRefuel:

; 536  : 		}
; 537  : 
; 538  : 		if(fabs(dy) > fabs(fy))

	push	ecx
	movss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1614[ebp]
	movss	xmm0, DWORD PTR tv1614[ebp]
	push	ecx
	movss	xmm1, DWORD PTR _fy$[ebp]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv2126[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1620[ebp]
	movss	xmm0, DWORD PTR tv2126[ebp]
	comiss	xmm0, DWORD PTR tv1620[ebp]
	jbe	SHORT $LN55@HelpRefuel

; 539  : 			af->y = af->y + fy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	xmm0, DWORD PTR [ecx+1112]
	addss	xmm0, DWORD PTR _fy$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	DWORD PTR [eax+1112], xmm0

; 540  : 		else

	jmp	SHORT $LN54@HelpRefuel
$LN55@HelpRefuel:

; 541  : 		{
; 542  : 			fy = trackY - af->y;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+152]
	subss	xmm0, DWORD PTR [edx+1112]
	movss	DWORD PTR _fy$[ebp], xmm0

; 543  : 			af->y = trackY;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	mov	DWORD PTR [edx+1112], ecx
$LN54@HelpRefuel:

; 544  : 		}
; 545  : 
; 546  : 		if(fabs(dz) > fabs(fz))

	push	ecx
	movss	xmm0, DWORD PTR _dz$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1635[ebp]
	movss	xmm0, DWORD PTR tv1635[ebp]
	push	ecx
	movss	xmm1, DWORD PTR _fz$[ebp]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv2128[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1641[ebp]
	movss	xmm0, DWORD PTR tv2128[ebp]
	comiss	xmm0, DWORD PTR tv1641[ebp]
	jbe	SHORT $LN53@HelpRefuel

; 547  : 			af->z = af->z + fz;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	xmm0, DWORD PTR [eax+1116]
	addss	xmm0, DWORD PTR _fz$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	DWORD PTR [edx+1116], xmm0

; 548  : 		else

	jmp	SHORT $LN52@HelpRefuel
$LN53@HelpRefuel:

; 549  : 		{
; 550  : 			fz = trackZ - af->z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+156]
	subss	xmm0, DWORD PTR [ecx+1116]
	movss	DWORD PTR _fz$[ebp], xmm0

; 551  : 			af->z = trackZ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	DWORD PTR [ecx+1116], eax
$LN52@HelpRefuel:

; 552  : 		}
; 553  : 		
; 554  : 		float a,oldrx, deceldistance;
; 555  : 		bool decelerating = false;

	mov	BYTE PTR _decelerating$4[ebp], 0

; 556  : 
; 557  : 		ShiAssert(!_isnan(af->x));
; 558  : 		ShiAssert(!_isnan(af->y));
; 559  : 		ShiAssert(!_isnan(af->z));
; 560  : 
; 561  : // 2002-03-28 MN Hack to make full AI refueling control working in each and every situation: 
; 562  : // if we are really close, just put us on the boom. Period ;-)
; 563  : 		if (dist < af->GetAIBoomDistance() && g_bPutAIToBoom && refuelstatus == refRefueling &&
; 564  : 			(PlayerOptions.GetRefuelingMode() == ARSimplistic || PlayerOptions.GetRefuelingMode() == ARModerated && af->IsSet(AirframeClass::Refueling)))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	call	?GetAIBoomDistance@AirframeClass@@QAEMXZ ; AirframeClass::GetAIBoomDistance
	fstp	DWORD PTR tv1655[ebp]
	movss	xmm0, DWORD PTR tv1655[ebp]
	comiss	xmm0, DWORD PTR _dist$[ebp]
	jbe	$LN49@HelpRefuel
	movzx	edx, BYTE PTR ?g_bPutAIToBoom@@3_NA	; g_bPutAIToBoom
	test	edx, edx
	je	$LN49@HelpRefuel
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+348], 3
	jne	$LN49@HelpRefuel
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetRefuelingMode@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::GetRefuelingMode
	cmp	eax, 3
	je	SHORT $LN50@HelpRefuel
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetRefuelingMode@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::GetRefuelingMode
	cmp	eax, 2
	jne	$LN49@HelpRefuel
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	$LN49@HelpRefuel
$LN50@HelpRefuel:

; 565  : 		{
; 566  : 			// 26NOV03 - FRB - Get a more recent position
; 567  : 			((TankerBrain*)tanker->Brain())->OptTankingPosition(&targetPos);

	lea	edx, DWORD PTR _targetPos$[ebp]
	push	edx
	mov	ecx, DWORD PTR _tanker$[ebp]
	call	?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ ; SimVehicleClass::Brain
	mov	ecx, eax
	call	?OptTankingPosition@TankerBrain@@QAEXPAUTpoint@@@Z ; TankerBrain::OptTankingPosition

; 568  : 			af->x = targetPos.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	xmm0, DWORD PTR _targetPos$[ebp]
	movss	DWORD PTR [ecx+1108], xmm0

; 569  : 			af->y = targetPos.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	xmm0, DWORD PTR _targetPos$[ebp+4]
	movss	DWORD PTR [eax+1112], xmm0

; 570  : 			af->z = targetPos.z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR _targetPos$[ebp+8]
	movss	DWORD PTR [edx+1116], xmm0

; 571  : 			self->SetYPR(tanker->Yaw(),0.0F,0.0F); // change current heading to that of the tanker

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _tanker$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?SetYPR@VuEntity@@QAEXMMM@Z		; VuEntity::SetYPR

; 572  : 			if (!ReadySet)

	cmp	DWORD PTR _ReadySet$[ebp], 0
	jne	SHORT $LN49@HelpRefuel

; 573  : 			{
; 574  : 				((TankerBrain*)tanker->Brain())->AIReady(); // 28NOV03 - FRB - tell th tanker I'm in position

	mov	ecx, DWORD PTR _tanker$[ebp]
	call	?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ ; SimVehicleClass::Brain
	mov	ecx, eax
	call	?AIReady@TankerBrain@@QAEXXZ		; TankerBrain::AIReady

; 575  : 				ReadySet = 1;

	mov	DWORD PTR _ReadySet$[ebp], 1
$LN49@HelpRefuel:

; 576  : 			}
; 577  : 		}
; 578  : 
; 579  : 
; 580  : 		deceldistance = af->GetDecelerateDistance();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	call	?GetDecelerateDistance@AirframeClass@@QAEMXZ ; AirframeClass::GetDecelerateDistance
	fstp	DWORD PTR _deceldistance$1[ebp]

; 581  : 
; 582  : 		CalculateRelativePos(&xft, &yft, &zft, &rx, &ry, &rz);  

	lea	edx, DWORD PTR _rz$[ebp]
	push	edx
	lea	eax, DWORD PTR _ry$[ebp]
	push	eax
	lea	ecx, DWORD PTR _rx$[ebp]
	push	ecx
	lea	edx, DWORD PTR _zft$[ebp]
	push	edx
	lea	eax, DWORD PTR _yft$[ebp]
	push	eax
	lea	ecx, DWORD PTR _xft$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateRelativePos@DigitalBrain@@IAEXPAM00000@Z ; DigitalBrain::CalculateRelativePos

; 583  : 		oldrx = rx;

	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR _oldrx$2[ebp], xmm0

; 584  : 		if(rx > deceldistance)

	movss	xmm0, DWORD PTR _rx$[ebp]
	comiss	xmm0, DWORD PTR _deceldistance$1[ebp]
	jbe	$LN48@HelpRefuel

; 585  : 		{
; 586  : 			rStick = SimpleTrackAzimuth(rx*0.5F, ry, self->GetVt())*0.5F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _ry$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SimpleTrackAzimuth@DigitalBrain@@IAEMMMM@Z ; DigitalBrain::SimpleTrackAzimuth
	fstp	DWORD PTR tv1704[ebp]
	movss	xmm0, DWORD PTR tv1704[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+32], xmm0

; 587  : 			pStick = SimpleTrackElevation(zft, 5000.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@459c4000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _zft$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SimpleTrackElevation@DigitalBrain@@IAEMMM@Z ; DigitalBrain::SimpleTrackElevation
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+28]

; 588  : 			// Set track point 1.0NM ahead of desired location
; 589  : 			trackX	+= 1.0F*NM_TO_FT * tanker->platformAngles.cossig;

	mov	eax, DWORD PTR _tanker$[ebp]
	movss	xmm0, DWORD PTR __real@45bde1b0
	mulss	xmm0, DWORD PTR [eax+376]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+148]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+148], xmm0

; 590  : 			trackY	+= 1.0F*NM_TO_FT * tanker->platformAngles.sinsig;

	mov	eax, DWORD PTR _tanker$[ebp]
	movss	xmm0, DWORD PTR __real@45bde1b0
	mulss	xmm0, DWORD PTR [eax+372]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+152]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+152], xmm0

; 591  : 			CalculateRelativePos(&xft, &yft, &zft, &rx, &ry, &rz);  

	lea	eax, DWORD PTR _rz$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ry$[ebp]
	push	ecx
	lea	edx, DWORD PTR _rx$[ebp]
	push	edx
	lea	eax, DWORD PTR _zft$[ebp]
	push	eax
	lea	ecx, DWORD PTR _yft$[ebp]
	push	ecx
	lea	edx, DWORD PTR _xft$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateRelativePos@DigitalBrain@@IAEXPAM00000@Z ; DigitalBrain::CalculateRelativePos

; 592  : 		}
; 593  : 		else

	jmp	$LN47@HelpRefuel
$LN48@HelpRefuel:

; 594  : 		{
; 595  : 			decelerating = true;

	mov	BYTE PTR _decelerating$4[ebp], 1

; 596  : 			
; 597  : // MN we want to close our trackpoint with the tankers location, so reduce trackpoint distance by distance to tanker
; 598  : 			a = rx/deceldistance + 0.1f;

	movss	xmm0, DWORD PTR _rx$[ebp]
	divss	xmm0, DWORD PTR _deceldistance$1[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _a$3[ebp], xmm0

; 599  : 			a = min(1.0f,max(0.35f,a)); // minimum distance of trackpoint = 0.35nm in front of the tanker

	movss	xmm0, DWORD PTR __real@3eb33333
	comiss	xmm0, DWORD PTR _a$3[ebp]
	jbe	SHORT $LN72@HelpRefuel
	movss	xmm0, DWORD PTR __real@3eb33333
	movss	DWORD PTR tv527[ebp], xmm0
	jmp	SHORT $LN73@HelpRefuel
$LN72@HelpRefuel:
	movss	xmm0, DWORD PTR _a$3[ebp]
	movss	DWORD PTR tv527[ebp], xmm0
$LN73@HelpRefuel:
	movss	xmm0, DWORD PTR tv527[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN76@HelpRefuel
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv531[ebp], xmm0
	jmp	SHORT $LN77@HelpRefuel
$LN76@HelpRefuel:
	movss	xmm0, DWORD PTR __real@3eb33333
	comiss	xmm0, DWORD PTR _a$3[ebp]
	jbe	SHORT $LN74@HelpRefuel
	movss	xmm0, DWORD PTR __real@3eb33333
	movss	DWORD PTR tv530[ebp], xmm0
	jmp	SHORT $LN75@HelpRefuel
$LN74@HelpRefuel:
	movss	xmm0, DWORD PTR _a$3[ebp]
	movss	DWORD PTR tv530[ebp], xmm0
$LN75@HelpRefuel:
	movss	xmm0, DWORD PTR tv530[ebp]
	movss	DWORD PTR tv531[ebp], xmm0
$LN77@HelpRefuel:
	movss	xmm0, DWORD PTR tv531[ebp]
	movss	DWORD PTR _a$3[ebp], xmm0

; 600  : 			trackX	+= a*NM_TO_FT * tanker->platformAngles.cossig;

	movss	xmm0, DWORD PTR _a$3[ebp]
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	eax, DWORD PTR _tanker$[ebp]
	mulss	xmm0, DWORD PTR [eax+376]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+148]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+148], xmm0

; 601  : 			trackY	+= a*NM_TO_FT * tanker->platformAngles.sinsig;

	movss	xmm0, DWORD PTR _a$3[ebp]
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	eax, DWORD PTR _tanker$[ebp]
	mulss	xmm0, DWORD PTR [eax+372]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+152]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+152], xmm0

; 602  : 			CalculateRelativePos(&xft, &yft, &zft, &rx, &ry, &rz);  

	lea	eax, DWORD PTR _rz$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ry$[ebp]
	push	ecx
	lea	edx, DWORD PTR _rx$[ebp]
	push	edx
	lea	eax, DWORD PTR _zft$[ebp]
	push	eax
	lea	ecx, DWORD PTR _yft$[ebp]
	push	ecx
	lea	edx, DWORD PTR _xft$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateRelativePos@DigitalBrain@@IAEXPAM00000@Z ; DigitalBrain::CalculateRelativePos

; 603  : 			rStick = SimpleTrackAzimuth(rx, ry, self->GetVt());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+56]
	mov	edx, DWORD PTR [eax+220]
	call	edx
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _ry$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SimpleTrackAzimuth@DigitalBrain@@IAEMMMM@Z ; DigitalBrain::SimpleTrackAzimuth
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+32]

; 604  : 			pStick = SimpleTrackElevation(zft, 5000.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@459c4000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _zft$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SimpleTrackElevation@DigitalBrain@@IAEMMM@Z ; DigitalBrain::SimpleTrackElevation
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+28]
$LN47@HelpRefuel:

; 605  : 
; 606  : /*
; 607  : 			// JB 020311 Respond to "commands" from the tanker.
; 608  : 			if (!af->IsSet(AirframeClass::Refueling) && refuelstatus == refRefueling &&
; 609  : 				(SimLibElapsedTime - lastBoomCommand) > 10000)
; 610  : 			{
; 611  : 				lastBoomCommand = SimLibElapsedTime;
; 612  : 				Tpoint relPos;
; 613  : 				((TankerBrain*)tanker->DBrain())->ReceptorRelPosition(&relPos, (SimVehicleClass*) self);
; 614  : 
; 615  : 				Tpoint boompos;
; 616  : 				boompos.x = boompos.y = boompos.z = 0;
; 617  : 				af->GetRefuelPosition(&boompos);
; 618  : 				if (boompos.x == 0 && boompos.y ==0 && boompos.z == 0) 
; 619  : 					boompos.x = -39.63939795321F;
; 620  : 				
; 621  : 				relPos.x -= boompos.x;
; 622  : 
; 623  : 				if(relPos.x < 0.0f)
; 624  : 					tankerRelPositioning.x += 2.0f;
; 625  : 				else
; 626  : 					tankerRelPositioning.x -= 2.0f;
; 627  : 
; 628  : 				if(relPos.y < 0.0f)
; 629  : 					tankerRelPositioning.y += 2.0f;
; 630  : 				else
; 631  : 					tankerRelPositioning.y -= 2.0f;
; 632  : 
; 633  : 				if(relPos.z < 0.0f)
; 634  : 					tankerRelPositioning.z += 2.0f;
; 635  : 				else
; 636  : 					tankerRelPositioning.z -= 2.0f;
; 637  : 			}
; 638  : */
; 639  : 		}
; 640  : 		
; 641  : 		rx = (float)sqrt(xft*xft+yft*yft);

	movss	xmm0, DWORD PTR _xft$[ebp]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	movss	xmm1, DWORD PTR _yft$[ebp]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _rx$[ebp]

; 642  : 
; 643  : 		fx += fxr;

	movss	xmm0, DWORD PTR _fx$[ebp]
	addss	xmm0, DWORD PTR _fxr$[ebp]
	movss	DWORD PTR _fx$[ebp], xmm0

; 644  : 		fy += fyr;

	movss	xmm0, DWORD PTR _fy$[ebp]
	addss	xmm0, DWORD PTR _fyr$[ebp]
	movss	DWORD PTR _fy$[ebp], xmm0

; 645  : 		fz += fzr;

	movss	xmm0, DWORD PTR _fz$[ebp]
	addss	xmm0, DWORD PTR _fzr$[ebp]
	movss	DWORD PTR _fz$[ebp], xmm0

; 646  : 
; 647  : 		Tpoint	followVector, followWVector;
; 648  : 		followWVector.x = fx;

	movss	xmm0, DWORD PTR _fx$[ebp]
	movss	DWORD PTR _followWVector$6[ebp], xmm0

; 649  : 		followWVector.y = fy;

	movss	xmm0, DWORD PTR _fy$[ebp]
	movss	DWORD PTR _followWVector$6[ebp+4], xmm0

; 650  : 		followWVector.z = fz;

	movss	xmm0, DWORD PTR _fz$[ebp]
	movss	DWORD PTR _followWVector$6[ebp+8], xmm0

; 651  : 
; 652  : 		MatrixMultTranspose( &((DrawableBSP*)self->drawPointer)->orientation, &followWVector, &followVector );

	lea	edx, DWORD PTR _followVector$5[ebp]
	push	edx
	lea	eax, DWORD PTR _followWVector$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+332]
	add	eax, 48					; 00000030H
	push	eax
	call	?MatrixMultTranspose@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMultTranspose
	add	esp, 12					; 0000000cH

; 653  : 
; 654  : 		desiredClosure = 200.0F *rx/( af->GetDesiredClosureFactor()*NM_TO_FT) - 200.0F;

	movss	xmm0, DWORD PTR __real@43480000
	mulss	xmm0, DWORD PTR _rx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	movss	DWORD PTR tv2130[ebp], xmm0
	call	?GetDesiredClosureFactor@AirframeClass@@QAEMXZ ; AirframeClass::GetDesiredClosureFactor
	fstp	DWORD PTR tv1796[ebp]
	movss	xmm0, DWORD PTR tv1796[ebp]
	mulss	xmm0, DWORD PTR __real@45bde1b0
	movss	xmm1, DWORD PTR tv2130[ebp]
	divss	xmm1, xmm0
	subss	xmm1, DWORD PTR __real@43480000
	movss	DWORD PTR _desiredClosure$[ebp], xmm1

; 655  : 		
; 656  : 		// get actual closure
; 657  : 		actualClosure = - (rx - velocitySlope + followVector.x) / SimLibLastMajorFrameTime;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _rx$[ebp]
	subss	xmm0, DWORD PTR [edx+700]
	addss	xmm0, DWORD PTR _followVector$5[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR ?SimLibLastMajorFrameTime@@3MA
	movss	DWORD PTR _actualClosure$[ebp], xmm0

; 658  : 				
; 659  : 		eProp  = desiredClosure - actualClosure;

	movss	xmm0, DWORD PTR _desiredClosure$[ebp]
	subss	xmm0, DWORD PTR _actualClosure$[ebp]
	movss	DWORD PTR _eProp$[ebp], xmm0

; 660  : 		// 27NOV03 - FRB - Slow down to get behind tanker
; 661  : 		if (oldrx < 0.0F)	// we're in front of the tanker...

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _oldrx$2[ebp]
	jbe	SHORT $LN46@HelpRefuel

; 662  : 		{
; 663  : 			eProp -= 20.0F;			 

	movss	xmm0, DWORD PTR _eProp$[ebp]
	subss	xmm0, DWORD PTR __real@41a00000
	movss	DWORD PTR _eProp$[ebp], xmm0

; 664  : 			throtl = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+40], xmm0

; 665  : 			af->speedBrake = 1.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+1560], xmm0

; 666  : 		}
; 667  : 		else

	jmp	$LN33@HelpRefuel
$LN46@HelpRefuel:

; 668  : 		if(eProp < -30.0F)	// FRB - was -50

	movss	xmm0, DWORD PTR __real@c1f00000
	comiss	xmm0, DWORD PTR _eProp$[ebp]
	jbe	SHORT $LN44@HelpRefuel

; 669  : 		{
; 670  : 			throtl = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+40], xmm0

; 671  : 			af->speedBrake = 1.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+1560], xmm0
	jmp	$LN33@HelpRefuel
$LN44@HelpRefuel:

; 672  : 		}
; 673  : 		else if (eProp < -20.0F)	// FRB - was -40

	movss	xmm0, DWORD PTR __real@c1a00000
	comiss	xmm0, DWORD PTR _eProp$[ebp]
	jbe	SHORT $LN42@HelpRefuel

; 674  : 		{
; 675  : 			throtl = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+40], xmm0
	jmp	$LN33@HelpRefuel
$LN42@HelpRefuel:

; 676  : 		}
; 677  : 		else if(eProp < -10.0F)

	movss	xmm0, DWORD PTR __real@c1200000
	comiss	xmm0, DWORD PTR _eProp$[ebp]
	jbe	SHORT $LN40@HelpRefuel

; 678  : 		{
; 679  : 			throtl = 0.2F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [ecx+40], xmm0
	jmp	$LN33@HelpRefuel
$LN40@HelpRefuel:

; 680  : 		}
; 681  : 		else if(eProp > 200.0F)

	movss	xmm0, DWORD PTR _eProp$[ebp]
	comiss	xmm0, DWORD PTR __real@43480000
	jbe	SHORT $LN38@HelpRefuel

; 682  : 		{
; 683  : 			throtl = 1.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+40], xmm0

; 684  : 			af->speedBrake = -1.0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [ecx+1560], xmm0
	jmp	SHORT $LN33@HelpRefuel
$LN38@HelpRefuel:

; 685  : 		}
; 686  : 		else if(eProp > 100.0F)

	movss	xmm0, DWORD PTR _eProp$[ebp]
	comiss	xmm0, DWORD PTR __real@42c80000
	jbe	SHORT $LN36@HelpRefuel

; 687  : 		{
; 688  : 			throtl = 0.8F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR [edx+40], xmm0

; 689  : 			af->speedBrake = -1.0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [ecx+1560], xmm0
	jmp	SHORT $LN33@HelpRefuel
$LN36@HelpRefuel:

; 690  : 		}
; 691  : 		else if(eProp > 10.0F)

	movss	xmm0, DWORD PTR _eProp$[ebp]
	comiss	xmm0, DWORD PTR __real@41200000
	jbe	SHORT $LN34@HelpRefuel

; 692  : 		{
; 693  : 			throtl = 0.6F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR [edx+40], xmm0

; 694  : 			af->speedBrake = -1.0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [ecx+1560], xmm0

; 695  : 		}
; 696  : 		else

	jmp	SHORT $LN33@HelpRefuel
$LN34@HelpRefuel:

; 697  : 		{	
; 698  : 			throtl = 0.48F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3ef5c28f
	movss	DWORD PTR [edx+40], xmm0
$LN33@HelpRefuel:

; 699  : 		}
; 700  : 
; 701  : 		velocitySlope = rx;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [eax+700], xmm0

; 702  : 
; 703  : 		//allow the player to have some input
; 704  : 
; 705  : // MN when connected, just try to keep about the same speed than the tanker has - this should keep us
; 706  : // in position, if not, try to be faster 
; 707  : 		if(fabs(eProp) < 200.0F)

	push	ecx
	movss	xmm0, DWORD PTR _eProp$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1841[ebp]
	movss	xmm0, DWORD PTR __real@43480000
	comiss	xmm0, DWORD PTR tv1841[ebp]
	jbe	$LN15@HelpRefuel

; 708  : 		{		
; 709  : 			if (refuelstatus == refRefueling)//af->IsSet(AirframeClass::Refueling))

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+348], 3
	jne	$LN31@HelpRefuel

; 710  : 			{
; 711  : 				SimpleTrack(SimpleTrackSpd,tanker->TBrain()->GetDesSpeed()); // track the exact tanker speed

	mov	ecx, DWORD PTR _tanker$[ebp]
	call	?TBrain@AircraftClass@@QAEPAVTankerBrain@@XZ ; AircraftClass::TBrain
	mov	ecx, eax
	call	?GetDesSpeed@TankerBrain@@QAEMXZ	; TankerBrain::GetDesSpeed
	push	ecx
	fstp	DWORD PTR [esp]
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SimpleTrack@DigitalBrain@@IAEXW4SimpleTrackMode@1@M@Z ; DigitalBrain::SimpleTrack

; 712  : 				if (tanker->af->vcas > af->vcas + 10.0f)

	mov	edx, DWORD PTR _tanker$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR [edx+1124]
	addss	xmm0, DWORD PTR __real@41200000
	movss	xmm1, DWORD PTR [eax+1124]
	comiss	xmm1, xmm0
	jbe	SHORT $LN30@HelpRefuel

; 713  : 					throtl += 0.15f; // speed somewhat up, we're at least 10 knots behind tanker speed			

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+40]
	addss	xmm0, DWORD PTR __real@3e19999a
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+40], xmm0
	jmp	$LN24@HelpRefuel
$LN30@HelpRefuel:

; 714  : 				else if (tanker->af->vcas > af->vcas + 5.0f)

	mov	edx, DWORD PTR _tanker$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR [edx+1124]
	addss	xmm0, DWORD PTR __real@40a00000
	movss	xmm1, DWORD PTR [eax+1124]
	comiss	xmm1, xmm0
	jbe	SHORT $LN28@HelpRefuel

; 715  : 					throtl += 0.1f; // speed a bit up, we're falling behind

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+40]
	addss	xmm0, DWORD PTR __real@3dcccccd
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+40], xmm0
	jmp	$LN24@HelpRefuel
$LN28@HelpRefuel:

; 716  : 				else if (af->vcas > tanker->af->vcas + 10.0f)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	ecx, DWORD PTR _tanker$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR [edx+1124]
	addss	xmm0, DWORD PTR __real@41200000
	movss	xmm1, DWORD PTR [eax+1124]
	comiss	xmm1, xmm0
	jbe	SHORT $LN26@HelpRefuel

; 717  : 					throtl -= 0.15f; // we're at least 10 knots too fast, go even slower

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+40]
	subss	xmm0, DWORD PTR __real@3e19999a
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+40], xmm0
	jmp	SHORT $LN24@HelpRefuel
$LN26@HelpRefuel:

; 718  : 				else if (af->vcas > tanker->af->vcas + 5.0f)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	ecx, DWORD PTR _tanker$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR [edx+1124]
	addss	xmm0, DWORD PTR __real@40a00000
	movss	xmm1, DWORD PTR [eax+1124]
	comiss	xmm1, xmm0
	jbe	SHORT $LN24@HelpRefuel

; 719  : 					throtl -= 0.1f; // we're a bit too fast, go slower

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+40]
	subss	xmm0, DWORD PTR __real@3dcccccd
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+40], xmm0
$LN24@HelpRefuel:

; 720  : 			}
; 721  : 			else

	jmp	$LN15@HelpRefuel
$LN31@HelpRefuel:

; 722  : 			{
; 723  : 				if (tanker->af->vcas > af->vcas + 10.0f)

	mov	edx, DWORD PTR _tanker$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR [edx+1124]
	addss	xmm0, DWORD PTR __real@41200000
	movss	xmm1, DWORD PTR [eax+1124]
	comiss	xmm1, xmm0
	jbe	SHORT $LN22@HelpRefuel

; 724  : 					throtl += 0.2f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+40]
	addss	xmm0, DWORD PTR __real@3e4ccccd
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+40], xmm0
	jmp	$LN15@HelpRefuel
$LN22@HelpRefuel:

; 725  : 				else if (tanker->af->vcas > af->vcas + 5.0f)

	mov	edx, DWORD PTR _tanker$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR [edx+1124]
	addss	xmm0, DWORD PTR __real@40a00000
	movss	xmm1, DWORD PTR [eax+1124]
	comiss	xmm1, xmm0
	jbe	SHORT $LN20@HelpRefuel

; 726  : 					throtl += 0.15f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+40]
	addss	xmm0, DWORD PTR __real@3e19999a
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+40], xmm0
	jmp	$LN15@HelpRefuel
$LN20@HelpRefuel:

; 727  : 				else if (tanker->af->vcas > af->vcas + 2.5f)

	mov	edx, DWORD PTR _tanker$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR [edx+1124]
	addss	xmm0, DWORD PTR __real@40200000
	movss	xmm1, DWORD PTR [eax+1124]
	comiss	xmm1, xmm0
	jbe	SHORT $LN18@HelpRefuel

; 728  : 					throtl += 0.05f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+40]
	addss	xmm0, DWORD PTR __real@3d4ccccd
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+40], xmm0
	jmp	SHORT $LN15@HelpRefuel
$LN18@HelpRefuel:

; 729  : 				else if (af->vcas > tanker->af->vcas - 10.0f)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	ecx, DWORD PTR _tanker$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	movss	xmm0, DWORD PTR [edx+1124]
	subss	xmm0, DWORD PTR __real@41200000
	movss	xmm1, DWORD PTR [eax+1124]
	comiss	xmm1, xmm0
	jbe	SHORT $LN16@HelpRefuel

; 730  : 					throtl = throtl - 0.05f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+40]
	subss	xmm0, DWORD PTR __real@3d4ccccd
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+40], xmm0

; 731  : 				else

	jmp	SHORT $LN15@HelpRefuel
$LN16@HelpRefuel:

; 732  : 					throtl += 0.1f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+40]
	addss	xmm0, DWORD PTR __real@3dcccccd
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+40], xmm0
$LN15@HelpRefuel:

; 733  : 			}
; 734  : 		}
; 735  : 
; 736  : 		if (g_nShowDebugLabels & 0x800)

	mov	ecx, DWORD PTR ?g_nShowDebugLabels@@3HA	; g_nShowDebugLabels
	and	ecx, 2048				; 00000800H
	je	$LN11@HelpRefuel

; 737  : 		{
; 738  : 			char tmpchr[32];
; 739  : 			if (decelerating)

	movzx	edx, BYTE PTR _decelerating$4[ebp]
	test	edx, edx
	je	$LN13@HelpRefuel

; 740  : 				sprintf(tmpchr,"D %3.2f %5.1f %6.1",af->vcas, oldrx, af->Fuel() + af->ExternalFuel());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	call	?Fuel@AirframeClass@@QAEMXZ		; AirframeClass::Fuel
	fstp	DWORD PTR tv1913[ebp]
	movss	xmm0, DWORD PTR tv1913[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	movss	DWORD PTR tv2132[ebp], xmm0
	call	?ExternalFuel@AirframeClass@@QAEMXZ	; AirframeClass::ExternalFuel
	fstp	DWORD PTR tv1918[ebp]
	movss	xmm0, DWORD PTR tv2132[ebp]
	addss	xmm0, DWORD PTR tv1918[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _oldrx$2[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	cvtss2sd xmm0, DWORD PTR [eax+1124]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BD@PKEFEPAH@D?5?$CF3?42f?5?$CF5?41f?5?$CF6?41?$AA@
	lea	ecx, DWORD PTR _tmpchr$7[ebp]
	push	ecx
	call	_sprintf
	add	esp, 32					; 00000020H

; 741  : 			else

	jmp	$LN12@HelpRefuel
$LN13@HelpRefuel:

; 742  : 				sprintf(tmpchr,"%3.2f %5.1f %6.1",af->vcas, oldrx, af->Fuel() + af->ExternalFuel());

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	call	?Fuel@AirframeClass@@QAEMXZ		; AirframeClass::Fuel
	fstp	DWORD PTR tv1928[ebp]
	movss	xmm0, DWORD PTR tv1928[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	DWORD PTR tv2134[ebp], xmm0
	call	?ExternalFuel@AirframeClass@@QAEMXZ	; AirframeClass::ExternalFuel
	fstp	DWORD PTR tv1933[ebp]
	movss	xmm0, DWORD PTR tv2134[ebp]
	addss	xmm0, DWORD PTR tv1933[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _oldrx$2[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	cvtss2sd xmm0, DWORD PTR [edx+1124]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BB@BAIECOCP@?$CF3?42f?5?$CF5?41f?5?$CF6?41?$AA@
	lea	eax, DWORD PTR _tmpchr$7[ebp]
	push	eax
	call	_sprintf
	add	esp, 32					; 00000020H
$LN12@HelpRefuel:

; 743  : 			if (self->drawPointer)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	cmp	DWORD PTR [edx+332], 0
	je	SHORT $LN11@HelpRefuel

; 744  : 				((DrawableBSP*)self->drawPointer)->SetLabel (tmpchr, ((DrawableBSP*)self->drawPointer)->LabelColor());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [ecx+332]
	call	?LabelColor@DrawableBSP@@QAEKXZ		; DrawableBSP::LabelColor
	push	eax
	lea	edx, DWORD PTR _tmpchr$7[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+332]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+332]
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN11@HelpRefuel:

; 745  : 		}
; 746  : 		
; 747  : 
; 748  : 		if (g_bNewRefuelHelp)

	movzx	ecx, BYTE PTR ?g_bNewRefuelHelp@@3_NA	; g_bNewRefuelHelp
	test	ecx, ecx
	je	$LN10@HelpRefuel

; 749  : 		{
; 750  : // 2002-03-06 MN in moderated mode (Simplified), once we're stuck to the boom, no stick input needed anymore
; 751  : 			if(PlayerOptions.GetRefuelingMode() == ARModerated && !af->IsSet(AirframeClass::Refueling))

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetRefuelingMode@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::GetRefuelingMode
	cmp	eax, 2
	jne	$LN9@HelpRefuel
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	jne	$LN9@HelpRefuel

; 752  : 			{
; 753  : 				af->pstick =  (UserStickInputs.pstick - pStick) * 0.3F + pStick;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+60
	subss	xmm0, DWORD PTR [eax+28]
	mulss	xmm0, DWORD PTR __real@3e99999a
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	DWORD PTR [eax+1500], xmm0

; 754  : 				af->rstick =  (UserStickInputs.rstick - rStick) * 0.3F + rStick;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+64
	subss	xmm0, DWORD PTR [ecx+32]
	mulss	xmm0, DWORD PTR __real@3e99999a
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+32]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	DWORD PTR [ecx+1504], xmm0

; 755  : 				af->ypedal =  (UserStickInputs.rudder); // yPedal is not modified by this function

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+80
	movss	DWORD PTR [eax+1508], xmm0

; 756  : 				af->throtl =  (UserStickInputs.throttle - throtl) * 0.6F + throtl;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+68
	subss	xmm0, DWORD PTR [ecx+40]
	mulss	xmm0, DWORD PTR __real@3f19999a
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+40]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	DWORD PTR [ecx+1512], xmm0

; 757  : 			}
; 758  : // Easy means no player input needed at all, also in Simplified when connected to the boom
; 759  : 			else if(PlayerOptions.GetRefuelingMode() == ARSimplistic || 

	jmp	$LN5@HelpRefuel
$LN9@HelpRefuel:

; 760  : 				    PlayerOptions.GetRefuelingMode() == ARModerated && af->IsSet(AirframeClass::Refueling))

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetRefuelingMode@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::GetRefuelingMode
	cmp	eax, 3
	je	SHORT $LN6@HelpRefuel
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetRefuelingMode@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::GetRefuelingMode
	cmp	eax, 2
	jne	SHORT $LN7@HelpRefuel
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN7@HelpRefuel
$LN6@HelpRefuel:

; 761  : 			{
; 762  : 				af->pstick =  pStick;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+1500], eax

; 763  : 				af->rstick =  rStick;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx+1504], ecx

; 764  : 				af->ypedal =  (UserStickInputs.rudder); // yPedal is not modified by this function

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+80
	movss	DWORD PTR [eax+1508], xmm0

; 765  : 				af->throtl =  (UserStickInputs.throttle - throtl) * 0.7F + throtl;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+68
	subss	xmm0, DWORD PTR [ecx+40]
	mulss	xmm0, DWORD PTR __real@3f333333
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+40]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	DWORD PTR [ecx+1512], xmm0

; 766  : 			}
; 767  : 			else

	jmp	$LN5@HelpRefuel
$LN7@HelpRefuel:

; 768  : 		// let's give realistic refueling also some help (realistic is just too hard in F4 according to Keith Rosenkrantz)
; 769  : 			{
; 770  : 				af->pstick = (UserStickInputs.pstick - pStick) * 0.75F + pStick;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+60
	subss	xmm0, DWORD PTR [edx+28]
	mulss	xmm0, DWORD PTR __real@3f400000
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	DWORD PTR [edx+1500], xmm0

; 771  : 				af->rstick = (UserStickInputs.rstick - rStick) * 0.75F + rStick;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+64
	subss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR __real@3f400000
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	DWORD PTR [eax+1504], xmm0

; 772  : 				af->ypedal = (UserStickInputs.rudder);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+80
	movss	DWORD PTR [edx+1508], xmm0

; 773  : 				af->throtl = (UserStickInputs.throttle - throtl) * 0.7F + throtl;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+68
	subss	xmm0, DWORD PTR [eax+40]
	mulss	xmm0, DWORD PTR __real@3f333333
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+40]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	DWORD PTR [eax+1512], xmm0
$LN5@HelpRefuel:

; 774  : 			}
; 775  : 		}
; 776  : 		else

	jmp	$LN1@HelpRefuel
$LN10@HelpRefuel:

; 777  : 		{
; 778  : 			if(PlayerOptions.GetRefuelingMode() == ARModerated)

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetRefuelingMode@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::GetRefuelingMode
	cmp	eax, 2
	jne	$LN3@HelpRefuel

; 779  : 			{
; 780  : 				af->pstick =  (UserStickInputs.pstick - pStick) * 0.6F + pStick;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+60
	subss	xmm0, DWORD PTR [ecx+28]
	mulss	xmm0, DWORD PTR __real@3f19999a
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	DWORD PTR [ecx+1500], xmm0

; 781  : 				af->rstick =  (UserStickInputs.rstick - rStick) * 0.6F + rStick;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+64
	subss	xmm0, DWORD PTR [edx+32]
	mulss	xmm0, DWORD PTR __real@3f19999a
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	DWORD PTR [edx+1504], xmm0

; 782  : 				af->ypedal =  (UserStickInputs.rudder);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+80
	movss	DWORD PTR [ecx+1508], xmm0

; 783  : 				af->throtl =  (UserStickInputs.throttle - throtl) * 0.7F + throtl;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+68
	subss	xmm0, DWORD PTR [edx+40]
	mulss	xmm0, DWORD PTR __real@3f333333
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+40]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	DWORD PTR [edx+1512], xmm0
	jmp	$LN1@HelpRefuel
$LN3@HelpRefuel:

; 784  : 			}
; 785  : 			else if(PlayerOptions.GetRefuelingMode() == ARSimplistic)

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetRefuelingMode@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::GetRefuelingMode
	cmp	eax, 3
	jne	$LN1@HelpRefuel

; 786  : 			{
; 787  : 				af->pstick =  (UserStickInputs.pstick - pStick) * 0.3F + pStick;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+60
	subss	xmm0, DWORD PTR [eax+28]
	mulss	xmm0, DWORD PTR __real@3e99999a
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	DWORD PTR [eax+1500], xmm0

; 788  : 				af->rstick =  (UserStickInputs.rstick - rStick) * 0.3F + rStick;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+64
	subss	xmm0, DWORD PTR [ecx+32]
	mulss	xmm0, DWORD PTR __real@3e99999a
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+32]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	DWORD PTR [ecx+1504], xmm0

; 789  : 				af->ypedal =  (UserStickInputs.rudder);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+80
	movss	DWORD PTR [eax+1508], xmm0

; 790  : 				af->throtl =  (UserStickInputs.throttle - throtl) * 0.6F + throtl;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+68
	subss	xmm0, DWORD PTR [ecx+40]
	mulss	xmm0, DWORD PTR __real@3f19999a
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+40]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	DWORD PTR [ecx+1512], xmm0
$LN1@HelpRefuel:

; 791  : 			}
; 792  : 		}
; 793  : 
; 794  : 		af->throtl = max(0.0F, min(af->throtl, 1.5F));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	xmm0, DWORD PTR __real@3fc00000
	comiss	xmm0, DWORD PTR [eax+1512]
	jbe	SHORT $LN78@HelpRefuel
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR [edx+1512]
	movss	DWORD PTR tv1195[ebp], xmm0
	jmp	SHORT $LN79@HelpRefuel
$LN78@HelpRefuel:
	movss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR tv1195[ebp], xmm0
$LN79@HelpRefuel:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv1195[ebp]
	jbe	SHORT $LN82@HelpRefuel
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv1205[ebp], xmm0
	jmp	SHORT $LN83@HelpRefuel
$LN82@HelpRefuel:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	xmm0, DWORD PTR __real@3fc00000
	comiss	xmm0, DWORD PTR [ecx+1512]
	jbe	SHORT $LN80@HelpRefuel
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	xmm0, DWORD PTR [eax+1512]
	movss	DWORD PTR tv1204[ebp], xmm0
	jmp	SHORT $LN81@HelpRefuel
$LN80@HelpRefuel:
	movss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR tv1204[ebp], xmm0
$LN81@HelpRefuel:
	movss	xmm0, DWORD PTR tv1204[ebp]
	movss	DWORD PTR tv1205[ebp], xmm0
$LN83@HelpRefuel:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR tv1205[ebp]
	movss	DWORD PTR [edx+1512], xmm0
$LN58@HelpRefuel:

; 795  : 
; 796  : 	}
; 797  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?HelpRefuel@DigitalBrain@@QAEXPAVAircraftClass@@@Z ENDP	; DigitalBrain::HelpRefuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\refuel.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DoneRefueling@DigitalBrain@@QAEXXZ PROC		; DigitalBrain::DoneRefueling
; _this$ = ecx

; 819  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 820  : 	//this is so Russian planes will actually get gas when they try to refuel
; 821  : 
; 822  : 	// 02DEC03 - FRB
; 823  : 	if(self->IsDigital())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?IsDigital@AircraftClass@@QAEHXZ	; AircraftClass::IsDigital
	test	eax, eax
	je	SHORT $LN1@DoneRefuel

; 824  : 	{
; 825  : 		self->af->ResetFuel();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+932]
	call	?ResetFuel@AirframeClass@@QAEXXZ	; AirframeClass::ResetFuel

; 826  : 		if (self->drawPointer)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	cmp	DWORD PTR [ecx+332], 0
	je	SHORT $LN1@DoneRefuel

; 827  : 		{
; 828  : 			((DrawableBSP*)self->drawPointer)->SetSwitchMask(13, 0);  // 29NOV03 - FRB - Open refueling door/ Display probe

	push	0
	push	13					; 0000000dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+332]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask

; 829  : 			((DrawableBSP*)self->drawPointer)->SetDOFangle(41, 0);  // 29NOV03 - FRB - Close refueling door/ Retract probe

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	41					; 00000029H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+332]
	call	?SetDOFangle@DrawableBSP@@QAEXHM@Z	; DrawableBSP::SetDOFangle
$LN1@DoneRefuel:

; 830  : 		}
; 831  : 	}
; 832  : 	// end FRB
; 833  : 
; 834  : 	tnkposition = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+360], 0

; 835  : 	//tankerId = FalconNullId;
; 836  : 	refuelstatus = refDone;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+348], 4

; 837  : 	//ClearATCFlag(NeedToRefuel);
; 838  : 	af->ClearFlag(AirframeClass::Refueling);

	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	call	?ClearFlag@AirframeClass@@QAEXH@Z	; AirframeClass::ClearFlag

; 839  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DoneRefueling@DigitalBrain@@QAEXXZ ENDP		; DigitalBrain::DoneRefueling
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\refuel.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 8
_theTanker$ = -8					; size = 4
_this$ = -4						; size = 4
?StartRefueling@DigitalBrain@@QAEXXZ PROC		; DigitalBrain::StartRefueling
; _this$ = ecx

; 803  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 804  : 	VuEntity *theTanker = NULL;	

	mov	DWORD PTR _theTanker$[ebp], 0

; 805  : 
; 806  : 	theTanker = vuDatabase->Find(tankerId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+356]
	push	ecx
	mov	edx, DWORD PTR [eax+352]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _theTanker$[ebp], eax

; 807  : 	if(theTanker)

	cmp	DWORD PTR _theTanker$[ebp], 0
	je	SHORT $LN2@StartRefue

; 808  : 	{
; 809  : 		tankerId = theTanker->Id();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _theTanker$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+352], ecx
	mov	DWORD PTR [eax+356], edx

; 810  : 		refuelstatus = refWaiting;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+348], 2

; 811  : 		SetATCFlag(NeedToRefuel);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::SetATCFlag
$LN2@StartRefue:

; 812  : 	}
; 813  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?StartRefueling@DigitalBrain@@QAEXXZ ENDP		; DigitalBrain::StartRefueling
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\refuel.cpp
_TEXT	SEGMENT
$T2 = -168						; size = 4
tv487 = -164						; size = 4
tv622 = -160						; size = 4
tv511 = -156						; size = 4
tv617 = -152						; size = 4
tv472 = -148						; size = 4
tv612 = -144						; size = 4
tv637 = -140						; size = 4
tv607 = -136						; size = 4
tv463 = -132						; size = 4
tv593 = -128						; size = 4
tv633 = -124						; size = 4
tv641 = -120						; size = 4
tv506 = -116						; size = 4
tv587 = -112						; size = 4
tv502 = -108						; size = 4
$T3 = -104						; size = 4
tv482 = -100						; size = 4
tv526 = -96						; size = 4
tv478 = -92						; size = 4
tv521 = -88						; size = 4
tv467 = -84						; size = 4
tv639 = -80						; size = 4
tv517 = -76						; size = 4
tv635 = -72						; size = 4
tv295 = -68						; size = 4
$T4 = -64						; size = 4
_zPos$ = -60						; size = 4
_xPos$ = -56						; size = 4
_yPos$ = -52						; size = 4
_time$ = -48						; size = 4
tv74 = -44						; size = 4
_foundSomething$ = -40					; size = 4
_nearest$5 = -36					; size = 4
_newWaypoint$ = -32					; size = 4
_rangeAvail$ = -28					; size = 4
_tankerFlight$ = -24					; size = 4
_this$ = -20						; size = 4
_tmpWaypoint$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_state$ = 8						; size = 4
?FlightMemberWantsFuel@DigitalBrain@@QAEXH@Z PROC	; DigitalBrain::FlightMemberWantsFuel
; _this$ = ecx

; 843  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FlightMemberWantsFuel@DigitalBrain@@QAEXH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 156				; 0000009cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 844  : 	float rangeAvail= 50.0F * NM_TO_FT;

	movss	xmm0, DWORD PTR __real@48945852
	movss	DWORD PTR _rangeAvail$[ebp], xmm0

; 845  : 	FlightClass* tankerFlight = NULL;

	mov	DWORD PTR _tankerFlight$[ebp], 0

; 846  : 	float xPos=0.0F, yPos=0.0F, zPos=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _xPos$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _yPos$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _zPos$[ebp], xmm0

; 847  : 	WayPointClass* tmpWaypoint = self->waypoint;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+732]
	mov	DWORD PTR _tmpWaypoint$[ebp], edx

; 848  : 	WayPointClass* newWaypoint=NULL;

	mov	DWORD PTR _newWaypoint$[ebp], 0

; 849  : 	int foundSomething = FALSE;

	mov	DWORD PTR _foundSomething$[ebp], 0

; 850  : 	int time=0;

	mov	DWORD PTR _time$[ebp], 0

; 851  : 
; 852  : 	// Only Combat AP or AI will respond to request for fuel
; 853  : 	if (self->AutopilotType() == AircraftClass::CombatAP){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
	cmp	eax, 2
	jne	$LN1@FlightMemb

; 854  : 		switch (state){

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR tv74[ebp], ecx
	cmp	DWORD PTR tv74[ebp], 65536		; 00010000H
	jg	SHORT $LN31@FlightMemb
	cmp	DWORD PTR tv74[ebp], 65536		; 00010000H
	je	SHORT $LN23@FlightMemb
	cmp	DWORD PTR tv74[ebp], 16384		; 00004000H
	je	SHORT $LN25@FlightMemb
	cmp	DWORD PTR tv74[ebp], 32768		; 00008000H
	je	SHORT $LN24@FlightMemb
	jmp	SHORT $LN21@FlightMemb
$LN31@FlightMemb:
	cmp	DWORD PTR tv74[ebp], 131072		; 00020000H
	je	SHORT $LN22@FlightMemb
	jmp	SHORT $LN21@FlightMemb
$LN25@FlightMemb:

; 855  : 			case SaidJoker:
; 856  : 			rangeAvail = 100.0F * NM_TO_FT;

	movss	xmm0, DWORD PTR __real@49145852
	movss	DWORD PTR _rangeAvail$[ebp], xmm0

; 857  : 			break;

	jmp	SHORT $LN26@FlightMemb
$LN24@FlightMemb:

; 858  : 
; 859  : 			case SaidBingo:
; 860  : 			rangeAvail =  65.0F * NM_TO_FT;

	movss	xmm0, DWORD PTR __real@48c0d937
	movss	DWORD PTR _rangeAvail$[ebp], xmm0

; 861  : 			break;

	jmp	SHORT $LN26@FlightMemb
$LN23@FlightMemb:

; 862  : 
; 863  : 			case SaidFumes:
; 864  : 			rangeAvail =  25.0F * NM_TO_FT;

	movss	xmm0, DWORD PTR __real@48145852
	movss	DWORD PTR _rangeAvail$[ebp], xmm0

; 865  : 			break;

	jmp	SHORT $LN26@FlightMemb
$LN22@FlightMemb:

; 866  : 
; 867  : 			case SaidFlameout:
; 868  : 			rangeAvail = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _rangeAvail$[ebp], xmm0

; 869  : 			break;

	jmp	SHORT $LN26@FlightMemb
$LN21@FlightMemb:

; 870  : 
; 871  : 			default:
; 872  : 				rangeAvail = 50.0F * NM_TO_FT;

	movss	xmm0, DWORD PTR __real@48945852
	movss	DWORD PTR _rangeAvail$[ebp], xmm0
$LN26@FlightMemb:

; 873  : 			break;
; 874  : 		}
; 875  : 
; 876  : 		// Look for tanker w/in range
; 877  : 		tankerFlight = ((FlightClass*)self->GetCampaignObject())->GetTankerFlight();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetTankerFlight@FlightClass@@QAEPAV1@XZ ; FlightClass::GetTankerFlight
	mov	DWORD PTR _tankerFlight$[ebp], eax

; 878  : 		if (tankerFlight){

	cmp	DWORD PTR _tankerFlight$[ebp], 0
	je	$LN15@FlightMemb
$LN19@FlightMemb:

; 879  : 			// Find the tanker waypoint, and make it the current one
; 880  : 			while (tmpWaypoint){

	cmp	DWORD PTR _tmpWaypoint$[ebp], 0
	je	SHORT $LN18@FlightMemb

; 881  : 				if (tmpWaypoint->GetWPAction() == WP_REFUEL){

	mov	ecx, DWORD PTR _tmpWaypoint$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 4
	jne	SHORT $LN17@FlightMemb

; 882  : 					break;

	jmp	SHORT $LN18@FlightMemb
$LN17@FlightMemb:

; 883  : 				}
; 884  : 				tmpWaypoint = tmpWaypoint->GetNextWP();

	mov	ecx, DWORD PTR _tmpWaypoint$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _tmpWaypoint$[ebp], eax

; 885  : 			}

	jmp	SHORT $LN19@FlightMemb
$LN18@FlightMemb:

; 886  : 
; 887  : 			// Close enough?
; 888  : 			if (tmpWaypoint){

	cmp	DWORD PTR _tmpWaypoint$[ebp], 0
	je	$LN15@FlightMemb

; 889  : 				xPos = tankerFlight->XPos();

	mov	ecx, DWORD PTR _tankerFlight$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _xPos$[ebp]

; 890  : 				yPos = tankerFlight->YPos();

	mov	ecx, DWORD PTR _tankerFlight$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _yPos$[ebp]

; 891  : 				zPos = tankerFlight->ZPos();

	mov	ecx, DWORD PTR _tankerFlight$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _zPos$[ebp]

; 892  : 
; 893  : 				if (
; 894  : 					fabs (self->XPos()-tankerFlight->XPos()) < rangeAvail &&
; 895  : 					fabs (self->YPos()-tankerFlight->YPos()) < rangeAvail
; 896  : 				){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv463[ebp]
	movss	xmm0, DWORD PTR tv463[ebp]
	mov	ecx, DWORD PTR _tankerFlight$[ebp]
	movss	DWORD PTR tv633[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv467[ebp]
	movss	xmm0, DWORD PTR tv633[ebp]
	subss	xmm0, DWORD PTR tv467[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv472[ebp]
	movss	xmm0, DWORD PTR _rangeAvail$[ebp]
	comiss	xmm0, DWORD PTR tv472[ebp]
	jbe	SHORT $LN15@FlightMemb
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv478[ebp]
	movss	xmm0, DWORD PTR tv478[ebp]
	mov	ecx, DWORD PTR _tankerFlight$[ebp]
	movss	DWORD PTR tv635[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv482[ebp]
	movss	xmm0, DWORD PTR tv635[ebp]
	subss	xmm0, DWORD PTR tv482[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv487[ebp]
	movss	xmm0, DWORD PTR _rangeAvail$[ebp]
	comiss	xmm0, DWORD PTR tv487[ebp]
	jbe	SHORT $LN15@FlightMemb

; 897  : 					self->curWaypoint = tmpWaypoint;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _tmpWaypoint$[ebp]
	mov	DWORD PTR [eax+728], ecx

; 898  : 					SetWaypointSpecificStuff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWaypointSpecificStuff@DigitalBrain@@IAEXXZ ; DigitalBrain::SetWaypointSpecificStuff

; 899  : 					foundSomething = TRUE;

	mov	DWORD PTR _foundSomething$[ebp], 1
$LN15@FlightMemb:

; 900  : 					// MonoPrint ("Heading for tanker\n");
; 901  : 				}
; 902  : 			}
; 903  : 		}
; 904  : 
; 905  :       // Check alternate field
; 906  :       if (!foundSomething)

	cmp	DWORD PTR _foundSomething$[ebp], 0
	jne	$LN9@FlightMemb

; 907  :       {
; 908  :          // Find the alternate field
; 909  :          tmpWaypoint = self->waypoint;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+732]
	mov	DWORD PTR _tmpWaypoint$[ebp], ecx
$LN13@FlightMemb:

; 910  : 	      while (tmpWaypoint)

	cmp	DWORD PTR _tmpWaypoint$[ebp], 0
	je	SHORT $LN12@FlightMemb

; 911  : 	      {
; 912  : 		      if (tmpWaypoint->GetWPFlags() == WPF_ALTERNATE)

	mov	ecx, DWORD PTR _tmpWaypoint$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	cmp	eax, 1024				; 00000400H
	jne	SHORT $LN11@FlightMemb

; 913  : 		      {
; 914  : 			      break;

	jmp	SHORT $LN12@FlightMemb
$LN11@FlightMemb:

; 915  : 		      }
; 916  : 		      tmpWaypoint = tmpWaypoint->GetNextWP();

	mov	ecx, DWORD PTR _tmpWaypoint$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _tmpWaypoint$[ebp], eax

; 917  :          }

	jmp	SHORT $LN13@FlightMemb
$LN12@FlightMemb:

; 918  : 
; 919  :          // Close enough?
; 920  :          if (tmpWaypoint)

	cmp	DWORD PTR _tmpWaypoint$[ebp], 0
	je	$LN9@FlightMemb

; 921  :          {
; 922  :             tmpWaypoint->GetLocation (&xPos, &yPos, &zPos);

	lea	edx, DWORD PTR _zPos$[ebp]
	push	edx
	lea	eax, DWORD PTR _yPos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _xPos$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _tmpWaypoint$[ebp]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation

; 923  : 
; 924  :             if (fabs (self->XPos()-tankerFlight->XPos()) < rangeAvail &&
; 925  :                 fabs (self->YPos()-tankerFlight->YPos()) < rangeAvail)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv502[ebp]
	movss	xmm0, DWORD PTR tv502[ebp]
	mov	ecx, DWORD PTR _tankerFlight$[ebp]
	movss	DWORD PTR tv637[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv506[ebp]
	movss	xmm0, DWORD PTR tv637[ebp]
	subss	xmm0, DWORD PTR tv506[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv511[ebp]
	movss	xmm0, DWORD PTR _rangeAvail$[ebp]
	comiss	xmm0, DWORD PTR tv511[ebp]
	jbe	SHORT $LN9@FlightMemb
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv517[ebp]
	movss	xmm0, DWORD PTR tv517[ebp]
	mov	ecx, DWORD PTR _tankerFlight$[ebp]
	movss	DWORD PTR tv639[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv521[ebp]
	movss	xmm0, DWORD PTR tv639[ebp]
	subss	xmm0, DWORD PTR tv521[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv526[ebp]
	movss	xmm0, DWORD PTR _rangeAvail$[ebp]
	comiss	xmm0, DWORD PTR tv526[ebp]
	jbe	SHORT $LN9@FlightMemb

; 926  :             {
; 927  :                self->curWaypoint = tmpWaypoint;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _tmpWaypoint$[ebp]
	mov	DWORD PTR [edx+728], eax

; 928  :                SetWaypointSpecificStuff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWaypointSpecificStuff@DigitalBrain@@IAEXXZ ; DigitalBrain::SetWaypointSpecificStuff

; 929  :                foundSomething = TRUE;

	mov	DWORD PTR _foundSomething$[ebp], 1

; 930  :                MonoPrint ("Heading for alternate\n");

	push	OFFSET ??_C@_0BH@LJCLLEDM@Heading?5for?5alternate?6?$AA@
	call	_MonoPrint
	add	esp, 4
$LN9@FlightMemb:

; 931  :             }
; 932  :          }
; 933  :       }
; 934  : 
; 935  :       // Find nearest ?
; 936  :       if (!foundSomething)

	cmp	DWORD PTR _foundSomething$[ebp], 0
	jne	$LN1@FlightMemb

; 937  :       {
; 938  :          ObjectiveClass* nearest = FindNearestFriendlyRunway(
; 939  : 			 self->GetTeam(), SimToGrid(self->XPos()), SimToGrid(self->YPos())
; 940  : 		);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	movzx	edx, ax
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	movzx	ecx, ax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	call	?FindNearestFriendlyRunway@@YAPAVObjectiveClass@@EFF@Z ; FindNearestFriendlyRunway
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _nearest$5[ebp], eax

; 941  : 
; 942  :          // Head for it in any case, it's our best bet
; 943  :          if (nearest)

	cmp	DWORD PTR _nearest$5[ebp], 0
	je	$LN1@FlightMemb

; 944  :          {
; 945  : 		      newWaypoint = new WayPointClass;

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN32@FlightMemb
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0WayPointClass@@QAE@XZ		; WayPointClass::WayPointClass
	mov	DWORD PTR tv295[ebp], eax
	jmp	SHORT $LN33@FlightMemb
$LN32@FlightMemb:
	mov	DWORD PTR tv295[ebp], 0
$LN33@FlightMemb:
	mov	edx, DWORD PTR tv295[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _newWaypoint$[ebp], eax

; 946  : 		      newWaypoint->SetLocation (nearest->XPos(), nearest->YPos(), -20000);

	push	ecx
	movss	xmm0, DWORD PTR __real@c69c4000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _nearest$5[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _nearest$5[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _newWaypoint$[ebp]
	call	?SetLocation@WayPointClass@@QAEXMMM@Z	; WayPointClass::SetLocation

; 947  :             time = SimLibElapsedTime;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR _time$[ebp], ecx

; 948  : 		      time += FloatToInt32((Distance(self->XPos(), self->YPos(), nearest->XPos(), nearest->YPos())) /
; 949  :                get_air_speed (300.0F, 20000) * 1000.0F);

	mov	ecx, DWORD PTR _nearest$5[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _nearest$5[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Distance@@YAMMMMM@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv587[ebp]
	movss	xmm0, DWORD PTR tv587[ebp]
	push	20000					; 00004e20H
	push	ecx
	movss	xmm1, DWORD PTR __real@43960000
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv641[ebp], xmm0
	call	?get_air_speed@@YAMMH@Z			; get_air_speed
	add	esp, 8
	fstp	DWORD PTR tv593[ebp]
	movss	xmm0, DWORD PTR tv641[ebp]
	divss	xmm0, DWORD PTR tv593[ebp]
	mulss	xmm0, DWORD PTR __real@447a0000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	add	eax, DWORD PTR _time$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 950  : 
; 951  : 		      newWaypoint->SetWPArrive (time);

	mov	ecx, DWORD PTR _time$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _newWaypoint$[ebp]
	call	?SetWPArrive@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPArrive

; 952  : 		      newWaypoint->SetWPDepartTime (time);

	mov	edx, DWORD PTR _time$[ebp]
	push	edx
	mov	ecx, DWORD PTR _newWaypoint$[ebp]
	call	?SetWPDepartTime@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPDepartTime

; 953  : 		      newWaypoint->SetWPAction (WP_LAND);

	push	7
	mov	ecx, DWORD PTR _newWaypoint$[ebp]
	call	?SetWPAction@WayPointClass@@QAEXH@Z	; WayPointClass::SetWPAction

; 954  : 
; 955  :             // Find the last waypoint
; 956  :             tmpWaypoint = self->waypoint;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+732]
	mov	DWORD PTR _tmpWaypoint$[ebp], edx
$LN6@FlightMemb:

; 957  : 	         while (tmpWaypoint)

	cmp	DWORD PTR _tmpWaypoint$[ebp], 0
	je	$LN5@FlightMemb

; 958  : 	         {
; 959  :                // Is this waypoint close to one we have?
; 960  :                tmpWaypoint->GetLocation (&xPos, &yPos, &zPos);

	lea	eax, DWORD PTR _zPos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _yPos$[ebp]
	push	ecx
	lea	edx, DWORD PTR _xPos$[ebp]
	push	edx
	mov	ecx, DWORD PTR _tmpWaypoint$[ebp]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation

; 961  :                if (tmpWaypoint->GetWPAction() == WP_LAND &&
; 962  :                    fabs (nearest->XPos() - xPos) < 2.0F * NM_TO_FT &&
; 963  :                    fabs (nearest->YPos() - yPos) < 2.0F * NM_TO_FT)

	mov	ecx, DWORD PTR _tmpWaypoint$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	cmp	eax, 7
	jne	$LN4@FlightMemb
	mov	ecx, DWORD PTR _nearest$5[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv607[ebp]
	movss	xmm0, DWORD PTR tv607[ebp]
	subss	xmm0, DWORD PTR _xPos$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv612[ebp]
	movss	xmm0, DWORD PTR __real@463de1b0
	comiss	xmm0, DWORD PTR tv612[ebp]
	jbe	SHORT $LN4@FlightMemb
	mov	ecx, DWORD PTR _nearest$5[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv617[ebp]
	movss	xmm0, DWORD PTR tv617[ebp]
	subss	xmm0, DWORD PTR _yPos$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv622[ebp]
	movss	xmm0, DWORD PTR __real@463de1b0
	comiss	xmm0, DWORD PTR tv622[ebp]
	jbe	SHORT $LN4@FlightMemb

; 964  :                {
; 965  :                   foundSomething = TRUE;

	mov	DWORD PTR _foundSomething$[ebp], 1

; 966  :                   break;

	jmp	SHORT $LN5@FlightMemb
$LN4@FlightMemb:

; 967  :                }
; 968  : 
; 969  : 		         if (!tmpWaypoint->GetNextWP())

	mov	ecx, DWORD PTR _tmpWaypoint$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	test	eax, eax
	jne	SHORT $LN3@FlightMemb

; 970  : 		         {
; 971  : 			         break;

	jmp	SHORT $LN5@FlightMemb
$LN3@FlightMemb:

; 972  : 		         }
; 973  : 		         tmpWaypoint = tmpWaypoint->GetNextWP();

	mov	ecx, DWORD PTR _tmpWaypoint$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _tmpWaypoint$[ebp], eax

; 974  :             }

	jmp	$LN6@FlightMemb
$LN5@FlightMemb:

; 975  : 
; 976  :             if (foundSomething)

	cmp	DWORD PTR _foundSomething$[ebp], 0
	je	SHORT $LN2@FlightMemb

; 977  :             {
; 978  :                delete newWaypoint;

	mov	eax, DWORD PTR _newWaypoint$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 979  :             }
; 980  :             else

	jmp	SHORT $LN1@FlightMemb
$LN2@FlightMemb:

; 981  :             {
; 982  :                tmpWaypoint->SetNextWP (newWaypoint);

	mov	edx, DWORD PTR _newWaypoint$[ebp]
	push	edx
	mov	ecx, DWORD PTR _tmpWaypoint$[ebp]
	call	?SetNextWP@WayPointClass@@QAEXPAV1@@Z	; WayPointClass::SetNextWP

; 983  :                self->curWaypoint = newWaypoint;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _newWaypoint$[ebp]
	mov	DWORD PTR [ecx+728], edx

; 984  :                SetWaypointSpecificStuff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWaypointSpecificStuff@DigitalBrain@@IAEXXZ ; DigitalBrain::SetWaypointSpecificStuff
$LN1@FlightMemb:

; 985  :             }
; 986  : //            MonoPrint ("Heading for nearest\n");
; 987  :          }
; 988  :       }
; 989  :    }
; 990  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FlightMemberWantsFuel@DigitalBrain@@QAEXH@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?FlightMemberWantsFuel@DigitalBrain@@QAEXH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-160]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FlightMemberWantsFuel@DigitalBrain@@QAEXH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FlightMemberWantsFuel@DigitalBrain@@QAEXH@Z ENDP	; DigitalBrain::FlightMemberWantsFuel
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?ClearATCFlag@DigitalBrain@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?ClearATCFlag@DigitalBrain@@QAEXH@Z PROC		; DigitalBrain::ClearATCFlag, COMDAT
; _this$ = ecx

; 708  : 	void	ClearATCFlag(int flag)							{atcFlags &= ~flag;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _flag$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+300]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+300], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearATCFlag@DigitalBrain@@QAEXH@Z ENDP		; DigitalBrain::ClearATCFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?SetATCFlag@DigitalBrain@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetATCFlag@DigitalBrain@@QAEXH@Z PROC			; DigitalBrain::SetATCFlag, COMDAT
; _this$ = ecx

; 707  : 	void	SetATCFlag(int flag)							{atcFlags |= flag;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+300]
	or	ecx, DWORD PTR _flag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+300], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetATCFlag@DigitalBrain@@QAEXH@Z ENDP			; DigitalBrain::SetATCFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?SetTrackPoint@DigitalBrain@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?SetTrackPoint@DigitalBrain@@QAEXMMM@Z PROC		; DigitalBrain::SetTrackPoint, COMDAT
; _this$ = ecx

; 699  : 	void	SetTrackPoint(float x, float y, float z){ SetTrackPoint(x, y); trackZ = z; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPoint@DigitalBrain@@QAEXMM@Z	; DigitalBrain::SetTrackPoint
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+156], xmm0
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetTrackPoint@DigitalBrain@@QAEXMMM@Z ENDP		; DigitalBrain::SetTrackPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?SetTrackPoint@DigitalBrain@@QAEXMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SetTrackPoint@DigitalBrain@@QAEXMM@Z PROC		; DigitalBrain::SetTrackPoint, COMDAT
; _this$ = ecx

; 698  : 	void	SetTrackPoint(float x, float y){ trackX = x; trackY=y; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax+148], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [ecx+152], xmm0
	mov	esp, ebp
	pop	ebp
	ret	8
?SetTrackPoint@DigitalBrain@@QAEXMM@Z ENDP		; DigitalBrain::SetTrackPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?SetWPArrive@WayPointClass@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?SetWPArrive@WayPointClass@@QAEXK@Z PROC		; WayPointClass::SetWPArrive, COMDAT
; _this$ = ecx

; 195  : 	void SetWPArrive (CampaignTime t)				{ Arrive = t; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWPArrive@WayPointClass@@QAEXK@Z ENDP		; WayPointClass::SetWPArrive
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?SetWPDepartTime@WayPointClass@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?SetWPDepartTime@WayPointClass@@QAEXK@Z PROC		; WayPointClass::SetWPDepartTime, COMDAT
; _this$ = ecx

; 194  : 	void SetWPDepartTime (CampaignTime t)			{ Depart = t; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWPDepartTime@WayPointClass@@QAEXK@Z ENDP		; WayPointClass::SetWPDepartTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetNextWP@WayPointClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNextWP@WayPointClass@@QAEPAV1@XZ PROC		; WayPointClass::GetNextWP, COMDAT
; _this$ = ecx

; 175  : 	WayPoint GetNextWP (void)						{ return NextWP; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextWP@WayPointClass@@QAEPAV1@XZ ENDP		; WayPointClass::GetNextWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPFlags@WayPointClass@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPFlags@WayPointClass@@QAEKXZ PROC			; WayPointClass::GetWPFlags, COMDAT
; _this$ = ecx

; 173  : 	ulong GetWPFlags (void)							{ return (ulong)Flags; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPFlags@WayPointClass@@QAEKXZ ENDP			; WayPointClass::GetWPFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPAction@WayPointClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPAction@WayPointClass@@QAEHXZ PROC			; WayPointClass::GetWPAction, COMDAT
; _this$ = ecx

; 170  : 	int GetWPAction(void)							{ return (int)Action; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPAction@WayPointClass@@QAEHXZ ENDP			; WayPointClass::GetWPAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?SetWPAction@WayPointClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_a$ = 8							; size = 4
?SetWPAction@WayPointClass@@QAEXH@Z PROC		; WayPointClass::SetWPAction, COMDAT
; _this$ = ecx

; 160  : 	void SetWPAction (int a)						{ Action = (uchar) a; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _a$[ebp]
	mov	BYTE PTR [eax+24], cl
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWPAction@WayPointClass@@QAEXH@Z ENDP		; WayPointClass::SetWPAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Roll@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Roll@VuEntity@@QBEMXZ PROC				; VuEntity::Roll, COMDAT
; _this$ = ecx

; 166  : 	SM_SCALAR Roll() const { return orient_.roll_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+68]
	mov	esp, ebp
	pop	ebp
	ret	0
?Roll@VuEntity@@QBEMXZ ENDP				; VuEntity::Roll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Pitch@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Pitch@VuEntity@@QBEMXZ PROC				; VuEntity::Pitch, COMDAT
; _this$ = ecx

; 165  : 	SM_SCALAR Pitch() const { return orient_.pitch_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+64]
	mov	esp, ebp
	pop	ebp
	ret	0
?Pitch@VuEntity@@QBEMXZ ENDP				; VuEntity::Pitch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Yaw@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Yaw@VuEntity@@QBEMXZ PROC				; VuEntity::Yaw, COMDAT
; _this$ = ecx

; 164  : 	SM_SCALAR Yaw() const { return orient_.yaw_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?Yaw@VuEntity@@QBEMXZ ENDP				; VuEntity::Yaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?SetYPR@VuEntity@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_yaw$ = 8						; size = 4
_pitch$ = 12						; size = 4
_roll$ = 16						; size = 4
?SetYPR@VuEntity@@QAEXMMM@Z PROC			; VuEntity::SetYPR, COMDAT
; _this$ = ecx

; 113  : 	void SetYPR(SM_SCALAR yaw, SM_SCALAR pitch, SM_SCALAR roll){ 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 		orient_.yaw_ = yaw; orient_.pitch_ = pitch; orient_.roll_ = roll; 

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _yaw$[ebp]
	movss	DWORD PTR [eax+60], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _pitch$[ebp]
	movss	DWORD PTR [ecx+64], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _roll$[ebp]
	movss	DWORD PTR [edx+68], xmm0

; 115  : 	}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetYPR@VuEntity@@QAEXMMM@Z ENDP			; VuEntity::SetYPR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??9VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??9VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator!=, COMDAT
; _this$ = ecx

; 111  : 	bool operator != (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 		return (
; 113  : 			num_ == rhs.num_ ? 
; 114  : 			(creator_ == rhs.creator_ ? false : true) : 
; 115  : 			true
; 116  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 1
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 1
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 117  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??9VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
