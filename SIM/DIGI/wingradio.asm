; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\DIGI\wingradio.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
_DATA	SEGMENT
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	ORG $+4
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_DATA	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??9VU_ID@@QBE_NABV0@@Z				; VU_ID::operator!=
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?Type@VuEntity@@QBEGXZ				; VuEntity::Type
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
PUBLIC	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	?AiIsFullResponse@@YAHHH@Z			; AiIsFullResponse
PUBLIC	?AiCreateRadioMsgs@@YAXPAVSimBaseClass@@PAPAVFalconRadioChatterMessage@@@Z ; AiCreateRadioMsgs
PUBLIC	?AiCustomizeRadioMsg@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@HVVU_ID@@@Z ; AiCustomizeRadioMsg
PUBLIC	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
PUBLIC	?AiMakeRadioCall@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z ; AiMakeRadioCall
PUBLIC	?AiMakeRadioResponse@@YAXPAVSimBaseClass@@HPAF@Z ; AiMakeRadioResponse
PUBLIC	?AiRespondLongCallSign@@YAXPAVAircraftClass@@@Z	; AiRespondLongCallSign
PUBLIC	?AiRespondShortCallSign@@YAXPAVAircraftClass@@@Z ; AiRespondShortCallSign
PUBLIC	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?GetICPTertiaryMode@ICPClass@@QAEJXZ		; ICPClass::GetICPTertiaryMode
PUBLIC	?Fuel@AirframeClass@@QAEMXZ			; AirframeClass::Fuel
PUBLIC	?ExternalFuel@AirframeClass@@QAEMXZ		; AirframeClass::ExternalFuel
PUBLIC	?AiDispatchRadioMsgs@@YAXPAPAPAVFalconRadioChatterMessage@@H@Z ; AiDispatchRadioMsgs
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@45bde1b0
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	?FalconSendMessage@@YAXPAVVuMessage@@H@Z:PROC	; FalconSendMessage
EXTRN	?GetComponentIndex@CampBaseClass@@QAEHPAVVuEntity@@@Z:PROC ; CampBaseClass::GetComponentIndex
EXTRN	?GetUnitClassData@UnitClass@@QAEPAUUnitClassDataType@@XZ:PROC ; UnitClass::GetUnitClassData
EXTRN	?SimToGrid@@YAFM@Z:PROC				; SimToGrid
EXTRN	?GetPilotVoiceID@FlightClass@@QAEEH@Z:PROC	; FlightClass::GetPilotVoiceID
EXTRN	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconRadioChatterMessage::FalconRadioChatterMessage
EXTRN	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z:PROC ; FindSensor
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?GetRadioFreq@VoiceManager@@QAEHH@Z:PROC	; VoiceManager::GetRadioFreq
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?PlayerOptions@@3VPlayerOptionsClass@@A:BYTE	; PlayerOptions
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?VM@@3PAVVoiceManager@@A:DWORD			; VM
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@45bde1b0
CONST	SEGMENT
__real@45bde1b0 DD 045bde1b0r			; 6076.21
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?AiCreateRadioMsgs@@YAXPAVSimBaseClass@@PAPAVFalconRadioChatterMessage@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AiCreateRadioMsgs@@YAXPAVSimBaseClass@@PAPAVFalconRadioChatterMessage@@@Z$0
__ehfuncinfo$?AiCreateRadioMsgs@@YAXPAVSimBaseClass@@PAPAVFalconRadioChatterMessage@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AiCreateRadioMsgs@@YAXPAVSimBaseClass@@PAPAVFalconRadioChatterMessage@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\wingradio.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 4
_i$ = -4						; size = 4
_ppp_radioMsgs$ = 8					; size = 4
_numRadioRecipients$ = 12				; size = 4
?AiDispatchRadioMsgs@@YAXPAPAPAVFalconRadioChatterMessage@@H@Z PROC ; AiDispatchRadioMsgs

; 241  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 242  : 	int i;
; 243  : 
; 244  : 	if( numRadioRecipients ) {

	cmp	DWORD PTR _numRadioRecipients$[ebp], 0
	je	SHORT $LN5@AiDispatch

; 245  : 		
; 246  : 		for ( i = 0; i < numRadioRecipients; i++ ) {							// Send the commmand to all recipients.

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@AiDispatch
$LN2@AiDispatch:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@AiDispatch:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numRadioRecipients$[ebp]
	jge	SHORT $LN1@AiDispatch

; 247  : 			FalconSendMessage( (*ppp_radioMsgs)[i], FALSE );

	push	0
	mov	edx, DWORD PTR _ppp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 248  : 		}

	jmp	SHORT $LN2@AiDispatch
$LN1@AiDispatch:

; 249  : 
; 250  : 		delete [] *ppp_radioMsgs;

	mov	eax, DWORD PTR _ppp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN5@AiDispatch:

; 251  : 	}
; 252  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AiDispatchRadioMsgs@@YAXPAPAPAVFalconRadioChatterMessage@@H@Z ENDP ; AiDispatchRadioMsgs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?ExternalFuel@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ExternalFuel@AirframeClass@@QAEMXZ PROC		; AirframeClass::ExternalFuel, COMDAT
; _this$ = ecx

; 1184 : 	float ExternalFuel (void) {return externalFuel;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+32]
	mov	esp, ebp
	pop	ebp
	ret	0
?ExternalFuel@AirframeClass@@QAEMXZ ENDP		; AirframeClass::ExternalFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?Fuel@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Fuel@AirframeClass@@QAEMXZ PROC			; AirframeClass::Fuel, COMDAT
; _this$ = ecx

; 1183 : 	float Fuel (void) {return fuel;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?Fuel@AirframeClass@@QAEMXZ ENDP			; AirframeClass::Fuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\icp.h
;	COMDAT ?GetICPTertiaryMode@ICPClass@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetICPTertiaryMode@ICPClass@@QAEJXZ PROC		; ICPClass::GetICPTertiaryMode, COMDAT
; _this$ = ecx

; 569  : 	long GetICPTertiaryMode(void) {return mICPTertiaryMode;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetICPTertiaryMode@ICPClass@@QAEJXZ ENDP		; ICPClass::GetICPTertiaryMode
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ PROC ; SimulationDriver::GetPlayerEntity, COMDAT
; _this$ = ecx

; 76   : 	SimMoverClass *GetPlayerEntity() const { return const_cast<SimMoverClass*>(playerEntity); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ENDP ; SimulationDriver::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\wingradio.cpp
_TEXT	SEGMENT
_edata$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_p_aircraft$ = 8					; size = 4
?AiRespondShortCallSign@@YAXPAVAircraftClass@@@Z PROC	; AiRespondShortCallSign

; 346  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 347  : 	short edata[10];
; 348  : 
; 349  : 	edata[0] = ((FlightClass*) p_aircraft->GetCampaignObject())->GetComponentIndex(p_aircraft);

	mov	eax, DWORD PTR _p_aircraft$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_aircraft$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentIndex@CampBaseClass@@QAEHPAVVuEntity@@@Z ; CampBaseClass::GetComponentIndex
	mov	ecx, 2
	imul	ecx, 0
	mov	WORD PTR _edata$[ebp+ecx], ax

; 350  : 	edata[1]	= -1;

	mov	edx, 2
	shl	edx, 0
	or	eax, -1
	mov	WORD PTR _edata$[ebp+edx], ax

; 351  : 	edata[2]	= -1;

	mov	ecx, 2
	shl	ecx, 1
	or	edx, -1
	mov	WORD PTR _edata$[ebp+ecx], dx

; 352  : 	edata[3]	= -1;

	mov	eax, 2
	imul	eax, 3
	or	ecx, -1
	mov	WORD PTR _edata$[ebp+eax], cx

; 353  : 	edata[4]	= -1;

	mov	edx, 2
	shl	edx, 2
	or	eax, -1
	mov	WORD PTR _edata$[ebp+edx], ax

; 354  : 	edata[5]	= -1;

	mov	ecx, 2
	imul	ecx, 5
	or	edx, -1
	mov	WORD PTR _edata$[ebp+ecx], dx

; 355  : 	edata[6]	= -1;

	mov	eax, 2
	imul	eax, 6
	or	ecx, -1
	mov	WORD PTR _edata$[ebp+eax], cx

; 356  : 	edata[7]	= -1;

	mov	edx, 2
	imul	edx, 7
	or	eax, -1
	mov	WORD PTR _edata$[ebp+edx], ax

; 357  : 	edata[8]	= -1;

	mov	ecx, 2
	shl	ecx, 3
	or	edx, -1
	mov	WORD PTR _edata$[ebp+ecx], dx

; 358  : 	edata[9]	= -1;

	mov	eax, 2
	imul	eax, 9
	or	ecx, -1
	mov	WORD PTR _edata$[ebp+eax], cx

; 359  : 
; 360  :   	AiMakeRadioResponse( p_aircraft, rcFORMRESPONSEB, edata );

	lea	edx, DWORD PTR _edata$[ebp]
	push	edx
	push	79					; 0000004fH
	mov	eax, DWORD PTR _p_aircraft$[ebp]
	push	eax
	call	?AiMakeRadioResponse@@YAXPAVSimBaseClass@@HPAF@Z ; AiMakeRadioResponse
	add	esp, 12					; 0000000cH

; 361  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?AiRespondShortCallSign@@YAXPAVAircraftClass@@@Z ENDP	; AiRespondShortCallSign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\wingradio.cpp
_TEXT	SEGMENT
_flightIndex$ = -32					; size = 4
_p_flightObj$ = -28					; size = 4
_edata$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_p_aircraft$ = 8					; size = 4
?AiRespondLongCallSign@@YAXPAVAircraftClass@@@Z PROC	; AiRespondLongCallSign

; 317  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 318  : 	FlightClass*	p_flightObj;
; 319  : 	int				flightIndex;
; 320  : 	short				edata[10];
; 321  : 
; 322  : 	p_flightObj	= (FlightClass*) p_aircraft->GetCampaignObject();

	mov	ecx, DWORD PTR _p_aircraft$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _p_flightObj$[ebp], eax

; 323  : 	flightIndex = p_flightObj->GetComponentIndex(p_aircraft);

	mov	eax, DWORD PTR _p_aircraft$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_flightObj$[ebp]
	call	?GetComponentIndex@CampBaseClass@@QAEHPAVVuEntity@@@Z ; CampBaseClass::GetComponentIndex
	mov	DWORD PTR _flightIndex$[ebp], eax

; 324  : 	
; 325  : 	edata[0]		= p_flightObj->callsign_id;

	mov	ecx, DWORD PTR _p_flightObj$[ebp]
	movzx	dx, BYTE PTR [ecx+425]
	mov	eax, 2
	imul	eax, 0
	mov	WORD PTR _edata$[ebp+eax], dx

; 326  : 	edata[1]		= (p_flightObj->callsign_num - 1) * 4 + flightIndex + 1;

	mov	ecx, DWORD PTR _p_flightObj$[ebp]
	movzx	edx, BYTE PTR [ecx+426]
	mov	eax, DWORD PTR _flightIndex$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4-3]
	mov	edx, 2
	shl	edx, 0
	mov	WORD PTR _edata$[ebp+edx], cx

; 327  : 	edata[2]		= -1;

	mov	eax, 2
	shl	eax, 1
	or	ecx, -1
	mov	WORD PTR _edata$[ebp+eax], cx

; 328  : 	edata[3]		= -1;

	mov	edx, 2
	imul	edx, 3
	or	eax, -1
	mov	WORD PTR _edata$[ebp+edx], ax

; 329  : 	edata[4]		= -1;

	mov	ecx, 2
	shl	ecx, 2
	or	edx, -1
	mov	WORD PTR _edata$[ebp+ecx], dx

; 330  : 	edata[5]		= -1;

	mov	eax, 2
	imul	eax, 5
	or	ecx, -1
	mov	WORD PTR _edata$[ebp+eax], cx

; 331  : 	edata[6]		= -1;

	mov	edx, 2
	imul	edx, 6
	or	eax, -1
	mov	WORD PTR _edata$[ebp+edx], ax

; 332  : 	edata[7]		= -1;

	mov	ecx, 2
	imul	ecx, 7
	or	edx, -1
	mov	WORD PTR _edata$[ebp+ecx], dx

; 333  : 	edata[8]		= -1;

	mov	eax, 2
	shl	eax, 3
	or	ecx, -1
	mov	WORD PTR _edata$[ebp+eax], cx

; 334  : 	edata[9]		= -1;

	mov	edx, 2
	imul	edx, 9
	or	eax, -1
	mov	WORD PTR _edata$[ebp+edx], ax

; 335  : 
; 336  :   	AiMakeRadioResponse( p_aircraft, rcENEMYCRASH, edata );

	lea	ecx, DWORD PTR _edata$[ebp]
	push	ecx
	push	58					; 0000003aH
	mov	edx, DWORD PTR _p_aircraft$[ebp]
	push	edx
	call	?AiMakeRadioResponse@@YAXPAVSimBaseClass@@HPAF@Z ; AiMakeRadioResponse
	add	esp, 12					; 0000000cH

; 337  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?AiRespondLongCallSign@@YAXPAVAircraftClass@@@Z ENDP	; AiRespondLongCallSign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\wingradio.cpp
_TEXT	SEGMENT
tv68 = -8						; size = 4
_p_radioMsgs$ = -4					; size = 4
_p_sender$ = 8						; size = 4
_message$ = 12						; size = 4
_p_edata$ = 16						; size = 4
?AiMakeRadioResponse@@YAXPAVSimBaseClass@@HPAF@Z PROC	; AiMakeRadioResponse

; 73   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi

; 74   : 	FalconRadioChatterMessage*		p_radioMsgs;
; 75   : 
; 76   : 	AiCreateRadioMsgs( p_sender, &p_radioMsgs ); // Create radio msgs for flight

	lea	eax, DWORD PTR _p_radioMsgs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	push	ecx
	call	?AiCreateRadioMsgs@@YAXPAVSimBaseClass@@PAPAVFalconRadioChatterMessage@@@Z ; AiCreateRadioMsgs
	add	esp, 8

; 77   : 
; 78   : 	p_radioMsgs->dataBlock.message	= message;

	mov	edx, DWORD PTR _p_radioMsgs$[ebp]
	mov	ax, WORD PTR _message$[ebp]
	mov	WORD PTR [edx+62], ax

; 79   : 
; 80   :    switch (message)

	mov	ecx, DWORD PTR _message$[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	cmp	DWORD PTR tv68[ebp], 98			; 00000062H
	je	SHORT $LN4@AiMakeRadi
	cmp	DWORD PTR tv68[ebp], 181		; 000000b5H
	je	SHORT $LN4@AiMakeRadi
	jmp	SHORT $LN3@AiMakeRadi
$LN4@AiMakeRadi:

; 81   :    {
; 82   :       case rcSAM:
; 83   :       case rcINBOUND:
; 84   : 	      p_radioMsgs->dataBlock.time_to_play	= 0;

	mov	edx, DWORD PTR _p_radioMsgs$[ebp]
	mov	DWORD PTR [edx+56], 0

; 85   :       break;

	jmp	SHORT $LN5@AiMakeRadi
$LN3@AiMakeRadi:

; 86   : 
; 87   :       default:
; 88   : 	  if (PlayerOptions.PlayerRadioVoice)

	movzx	eax, BYTE PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+201
	test	eax, eax
	je	SHORT $LN2@AiMakeRadi

; 89   : 	      //p_radioMsgs->dataBlock.time_to_play	= g_nChatterInterval * CampaignSeconds;
; 90   : 	      p_radioMsgs->dataBlock.time_to_play	= 4000;

	mov	ecx, DWORD PTR _p_radioMsgs$[ebp]
	mov	DWORD PTR [ecx+56], 4000		; 00000fa0H

; 91   : 	  else

	jmp	SHORT $LN5@AiMakeRadi
$LN2@AiMakeRadi:

; 92   : 	      p_radioMsgs->dataBlock.time_to_play	= 500;

	mov	edx, DWORD PTR _p_radioMsgs$[ebp]
	mov	DWORD PTR [edx+56], 500			; 000001f4H
$LN5@AiMakeRadi:

; 93   :       break;
; 94   :    }
; 95   : 
; 96   : 	p_radioMsgs->dataBlock.edata[0]	= p_edata[0];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _p_radioMsgs$[ebp]
	mov	esi, DWORD PTR _p_edata$[ebp]
	mov	ax, WORD PTR [esi+eax]
	mov	WORD PTR [edx+ecx+64], ax

; 97   : 	p_radioMsgs->dataBlock.edata[1]	= p_edata[1];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _p_radioMsgs$[ebp]
	mov	esi, DWORD PTR _p_edata$[ebp]
	mov	cx, WORD PTR [esi+ecx]
	mov	WORD PTR [eax+edx+64], cx

; 98   : 	p_radioMsgs->dataBlock.edata[2]	= p_edata[2];

	mov	edx, 2
	shl	edx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _p_radioMsgs$[ebp]
	mov	esi, DWORD PTR _p_edata$[ebp]
	mov	dx, WORD PTR [esi+edx]
	mov	WORD PTR [ecx+eax+64], dx

; 99   : 	p_radioMsgs->dataBlock.edata[3]	= p_edata[3];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _p_radioMsgs$[ebp]
	mov	esi, DWORD PTR _p_edata$[ebp]
	mov	ax, WORD PTR [esi+eax]
	mov	WORD PTR [edx+ecx+64], ax

; 100  : 	p_radioMsgs->dataBlock.edata[4]	= p_edata[4];

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _p_radioMsgs$[ebp]
	mov	esi, DWORD PTR _p_edata$[ebp]
	mov	cx, WORD PTR [esi+ecx]
	mov	WORD PTR [eax+edx+64], cx

; 101  : 	p_radioMsgs->dataBlock.edata[5]	= p_edata[5];

	mov	edx, 2
	imul	edx, 5
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _p_radioMsgs$[ebp]
	mov	esi, DWORD PTR _p_edata$[ebp]
	mov	dx, WORD PTR [esi+edx]
	mov	WORD PTR [ecx+eax+64], dx

; 102  : 	p_radioMsgs->dataBlock.edata[6]	= p_edata[6];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _p_radioMsgs$[ebp]
	mov	esi, DWORD PTR _p_edata$[ebp]
	mov	ax, WORD PTR [esi+eax]
	mov	WORD PTR [edx+ecx+64], ax

; 103  : 	p_radioMsgs->dataBlock.edata[7]	= p_edata[7];

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _p_radioMsgs$[ebp]
	mov	esi, DWORD PTR _p_edata$[ebp]
	mov	cx, WORD PTR [esi+ecx]
	mov	WORD PTR [eax+edx+64], cx

; 104  : 	p_radioMsgs->dataBlock.edata[8]	= p_edata[8];

	mov	edx, 2
	shl	edx, 3
	mov	eax, 2
	shl	eax, 3
	mov	ecx, DWORD PTR _p_radioMsgs$[ebp]
	mov	esi, DWORD PTR _p_edata$[ebp]
	mov	dx, WORD PTR [esi+edx]
	mov	WORD PTR [ecx+eax+64], dx

; 105  : 	p_radioMsgs->dataBlock.edata[9]	= p_edata[9];

	mov	eax, 2
	imul	eax, 9
	mov	ecx, 2
	imul	ecx, 9
	mov	edx, DWORD PTR _p_radioMsgs$[ebp]
	mov	esi, DWORD PTR _p_edata$[ebp]
	mov	ax, WORD PTR [esi+eax]
	mov	WORD PTR [edx+ecx+64], ax

; 106  : 
; 107  : 	FalconSendMessage( p_radioMsgs, FALSE );

	push	0
	mov	ecx, DWORD PTR _p_radioMsgs$[ebp]
	push	ecx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 108  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?AiMakeRadioResponse@@YAXPAVSimBaseClass@@HPAF@Z ENDP	; AiMakeRadioResponse
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\wingradio.cpp
_TEXT	SEGMENT
tv85 = -16						; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_p_radioMsgs$ = -4					; size = 4
_p_sender$ = 8						; size = 4
_command$ = 12						; size = 4
_extent$ = 16						; size = 4
_targetid$ = 20						; size = 8
?AiMakeRadioCall@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z PROC	; AiMakeRadioCall

; 42   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 43   : 	FalconRadioChatterMessage*	p_radioMsgs = NULL;

	mov	DWORD PTR _p_radioMsgs$[ebp], 0

; 44   : 
; 45   : 	AiCreateRadioMsgs( p_sender, &p_radioMsgs ); // Create radio msgs for flight

	lea	eax, DWORD PTR _p_radioMsgs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	push	ecx
	call	?AiCreateRadioMsgs@@YAXPAVSimBaseClass@@PAPAVFalconRadioChatterMessage@@@Z ; AiCreateRadioMsgs
	add	esp, 8

; 46   : 	ShiAssert(p_radioMsgs);
; 47   : 	AiCustomizeRadioMsg( p_sender, extent, &p_radioMsgs, command, targetid );

	mov	edx, DWORD PTR _targetid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _targetid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	lea	edx, DWORD PTR _p_radioMsgs$[ebp]
	push	edx
	mov	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	push	ecx
	call	?AiCustomizeRadioMsg@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@HVVU_ID@@@Z ; AiCustomizeRadioMsg
	add	esp, 24					; 00000018H

; 48   : 	
; 49   : 	//if the message was set to -1 we don't want to play anything
; 50   : 	if(p_radioMsgs->dataBlock.message == -1)

	mov	edx, DWORD PTR _p_radioMsgs$[ebp]
	movsx	eax, WORD PTR [edx+62]
	cmp	eax, -1
	jne	SHORT $LN2@AiMakeRadi

; 51   : 	{
; 52   : 		delete p_radioMsgs;

	mov	ecx, DWORD PTR _p_radioMsgs$[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN5@AiMakeRadi
	push	1
	mov	eax, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN6@AiMakeRadi
$LN5@AiMakeRadi:
	mov	DWORD PTR tv85[ebp], 0
$LN6@AiMakeRadi:

; 53   : 		return;

	jmp	SHORT $LN3@AiMakeRadi

; 54   : 	}
; 55   : 	else

	jmp	SHORT $LN3@AiMakeRadi
$LN2@AiMakeRadi:

; 56   : 	{
; 57   : 		ShiAssert(p_radioMsgs->dataBlock.message >= 0 && p_radioMsgs->dataBlock.message < LastComm);
; 58   : 		FalconSendMessage( p_radioMsgs, FALSE );

	push	0
	mov	ecx, DWORD PTR _p_radioMsgs$[ebp]
	push	ecx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN3@AiMakeRadi:

; 59   : 	}
; 60   : 
; 61   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AiMakeRadioCall@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z ENDP	; AiMakeRadioCall
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\wingradio.cpp
_TEXT	SEGMENT
_flightIdx$ = -4					; size = 4
_p_sender$ = 8						; size = 4
_extent$ = 12						; size = 4
_pp_radioMsgs$ = 16					; size = 4
_fillCallName$ = 20					; size = 4
?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z PROC ; AiFillCallsign

; 190  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 191  : 	
; 192  : 	int flightIdx;
; 193  : 
; 194  : 	flightIdx	= p_sender->GetCampaignObject()->GetComponentIndex(p_sender);

	mov	eax, DWORD PTR _p_sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentIndex@CampBaseClass@@QAEHPAVVuEntity@@@Z ; CampBaseClass::GetComponentIndex
	mov	DWORD PTR _flightIdx$[ebp], eax

; 195  : 
; 196  : 	if(flightIdx == AiFlightLead) {

	cmp	DWORD PTR _flightIdx$[ebp], 0
	jne	$LN13@AiFillCall

; 197  : 		if(extent == AiWingman) {

	cmp	DWORD PTR _extent$[ebp], 0
	jne	SHORT $LN12@AiFillCall

; 198  : 			if(fillCallName) {

	cmp	DWORD PTR _fillCallName$[ebp], 0
	je	SHORT $LN11@AiFillCall

; 199  : 				(*pp_radioMsgs)->dataBlock.edata[0] = ((FlightClass*)p_sender->GetCampaignObject())->callsign_id;

	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	movzx	cx, BYTE PTR [eax+425]
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, 2
	imul	edx, 0
	mov	WORD PTR [eax+edx+64], cx

; 200  : 			}
; 201  : 			else {

	jmp	SHORT $LN10@AiFillCall
$LN11@AiFillCall:

; 202  : 				(*pp_radioMsgs)->dataBlock.edata[0] = -1;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 2
	imul	edx, 0
	or	eax, -1
	mov	WORD PTR [ecx+edx+64], ax
$LN10@AiFillCall:

; 203  : 			}
; 204  : 			(*pp_radioMsgs)->dataBlock.edata[1] = 4 * (((FlightClass*)p_sender->GetCampaignObject())->callsign_num - 1) + 2;

	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	movzx	ecx, BYTE PTR [eax+426]
	lea	edx, DWORD PTR [ecx*4-2]
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, 2
	shl	eax, 0
	mov	WORD PTR [ecx+eax+64], dx
	jmp	$LN9@AiFillCall
$LN12@AiFillCall:

; 205  : 		}
; 206  : 		else if(extent == AiElement) {

	cmp	DWORD PTR _extent$[ebp], 1
	jne	SHORT $LN8@AiFillCall

; 207  : 			if(fillCallName) {

	cmp	DWORD PTR _fillCallName$[ebp], 0
	je	SHORT $LN7@AiFillCall

; 208  : 				(*pp_radioMsgs)->dataBlock.edata[0] = ((FlightClass*)p_sender->GetCampaignObject())->callsign_id;

	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	movzx	cx, BYTE PTR [eax+425]
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, 2
	imul	edx, 0
	mov	WORD PTR [eax+edx+64], cx

; 209  : 			}
; 210  : 			else {

	jmp	SHORT $LN6@AiFillCall
$LN7@AiFillCall:

; 211  : 				(*pp_radioMsgs)->dataBlock.edata[0] = -1;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 2
	imul	edx, 0
	or	eax, -1
	mov	WORD PTR [ecx+edx+64], ax
$LN6@AiFillCall:

; 212  : 			}
; 213  : 			(*pp_radioMsgs)->dataBlock.edata[1] = 4 * (((FlightClass*)p_sender->GetCampaignObject())->callsign_num - 1) + 3;

	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	movzx	ecx, BYTE PTR [eax+426]
	lea	edx, DWORD PTR [ecx*4-1]
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, 2
	shl	eax, 0
	mov	WORD PTR [ecx+eax+64], dx

; 214  : 		}
; 215  : 		else {

	jmp	SHORT $LN9@AiFillCall
$LN8@AiFillCall:

; 216  : 			(*pp_radioMsgs)->dataBlock.edata[0] = ((FlightClass*)p_sender->GetCampaignObject())->callsign_id;

	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	movzx	cx, BYTE PTR [eax+425]
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, 2
	imul	edx, 0
	mov	WORD PTR [eax+edx+64], cx

; 217  : 			(*pp_radioMsgs)->dataBlock.edata[1] = ((FlightClass*)p_sender->GetCampaignObject())->callsign_num + CALLSIGN_NUM_OFFSET;

	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	movzx	eax, BYTE PTR [eax+426]
	add	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, 2
	shl	ecx, 0
	mov	WORD PTR [edx+ecx+64], ax
$LN9@AiFillCall:

; 218  : 		}

	jmp	SHORT $LN14@AiFillCall
$LN13@AiFillCall:

; 219  : 	}
; 220  : 	else if(flightIdx == AiElementLead) {

	cmp	DWORD PTR _flightIdx$[ebp], 2
	jne	SHORT $LN14@AiFillCall

; 221  : 		if(fillCallName) {

	cmp	DWORD PTR _fillCallName$[ebp], 0
	je	SHORT $LN2@AiFillCall

; 222  : 			(*pp_radioMsgs)->dataBlock.edata[0] = ((FlightClass*)p_sender->GetCampaignObject())->callsign_id;

	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	movzx	dx, BYTE PTR [eax+425]
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, 2
	imul	eax, 0
	mov	WORD PTR [ecx+eax+64], dx

; 223  : 		}
; 224  : 		else {

	jmp	SHORT $LN1@AiFillCall
$LN2@AiFillCall:

; 225  : 			(*pp_radioMsgs)->dataBlock.edata[0] = -1;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 2
	imul	eax, 0
	or	ecx, -1
	mov	WORD PTR [edx+eax+64], cx
$LN1@AiFillCall:

; 226  : 		}
; 227  : 		(*pp_radioMsgs)->dataBlock.edata[1] = 4 * (((FlightClass*)p_sender->GetCampaignObject())->callsign_num - 1) + 4;

	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	movzx	edx, BYTE PTR [eax+426]
	shl	edx, 2
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, 2
	shl	eax, 0
	mov	WORD PTR [ecx+eax+64], dx
$LN14@AiFillCall:

; 228  : 	}
; 229  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ENDP ; AiFillCallsign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\wingradio.cpp
_TEXT	SEGMENT
$T1 = -68						; size = 8
$T2 = -60						; size = 8
tv1723 = -52						; size = 4
tv1961 = -48						; size = 4
tv1718 = -44						; size = 4
_xPos$ = -40						; size = 4
tv1541 = -36						; size = 4
_yPos$ = -32						; size = 4
tv1532 = -28						; size = 4
_com$3 = -24						; size = 4
tv66 = -20						; size = 4
_theTarget$ = -16					; size = 4
_flightIdx$ = -12					; size = 4
_theRadar$ = -8						; size = 4
_pentity$4 = -4						; size = 4
_p_sender$ = 8						; size = 4
_extent$ = 12						; size = 4
_pp_radioMsgs$ = 16					; size = 4
_command$ = 20						; size = 4
_targetid$ = 24						; size = 8
?AiCustomizeRadioMsg@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@HVVU_ID@@@Z PROC ; AiCustomizeRadioMsg

; 375  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H

; 376  : RadarClass* theRadar;
; 377  : float xPos, yPos;
; 378  : VuEntity* theTarget;
; 379  : int	flightIdx;
; 380  : 
; 381  : // 2000-10-09 ADDED BY S.G. SO WE DON'T CRASH IF THERE IS NO TEXT ATTACHED TO THE MESSAGE (-1 IS TO FLAG 'STAY QUIET')
; 382  : 	(*pp_radioMsgs)->dataBlock.message		= -1;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	edx, -1
	mov	WORD PTR [ecx+62], dx

; 383  : // END OF ADDED SECTION
; 384  : 
; 385  : 	switch(command) {

	mov	eax, DWORD PTR _command$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 91			; 0000005bH
	ja	$LN1@AiCustomiz
	mov	ecx, DWORD PTR tv66[ebp]
	movzx	edx, BYTE PTR $LN79@AiCustomiz[ecx]
	jmp	DWORD PTR $LN80@AiCustomiz[edx*4]
$LN74@AiCustomiz:

; 386  : 
; 387  : 	case FalconWingmanMsg::WMSpread:
; 388  : 		(*pp_radioMsgs)->dataBlock.message		= rcGOFORMATION;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 87					; 00000057H
	mov	WORD PTR [ecx+62], dx

; 389  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p_sender$[ebp]
	push	edx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 390  : 		(*pp_radioMsgs)->dataBlock.edata[2]		= 1;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 2
	shl	edx, 1
	mov	eax, 1
	mov	WORD PTR [ecx+edx+64], ax

; 391  : 	break;

	jmp	$LN75@AiCustomiz
$LN73@AiCustomiz:

; 392  : 
; 393  : 	case FalconWingmanMsg::WMWedge:
; 394  : 		(*pp_radioMsgs)->dataBlock.message		= rcGOFORMATION;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 87					; 00000057H
	mov	WORD PTR [edx+62], ax

; 395  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extent$[ebp]
	push	edx
	mov	eax, DWORD PTR _p_sender$[ebp]
	push	eax
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 396  : 		(*pp_radioMsgs)->dataBlock.edata[2]		= 2;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 2
	shl	eax, 1
	mov	ecx, 2
	mov	WORD PTR [edx+eax+64], cx

; 397  : 	break;

	jmp	$LN75@AiCustomiz
$LN72@AiCustomiz:

; 398  : 
; 399  : 	case FalconWingmanMsg::WMTrail:
; 400  : 		(*pp_radioMsgs)->dataBlock.message		= rcGOFORMATION;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 87					; 00000057H
	mov	WORD PTR [eax+62], cx

; 401  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	push	edx
	mov	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	push	ecx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 402  : 		(*pp_radioMsgs)->dataBlock.edata[2]		= 3;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, 3
	mov	WORD PTR [eax+ecx+64], dx

; 403  : 	break;

	jmp	$LN75@AiCustomiz
$LN71@AiCustomiz:

; 404  : 
; 405  : 	case FalconWingmanMsg::WMLadder:
; 406  : 		(*pp_radioMsgs)->dataBlock.message		= rcGOFORMATION;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 87					; 00000057H
	mov	WORD PTR [ecx+62], dx

; 407  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p_sender$[ebp]
	push	edx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 408  : 		(*pp_radioMsgs)->dataBlock.edata[2]		= 4;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 2
	shl	edx, 1
	mov	eax, 4
	mov	WORD PTR [ecx+edx+64], ax

; 409  : 	break;

	jmp	$LN75@AiCustomiz
$LN70@AiCustomiz:

; 410  : 
; 411  : 	case FalconWingmanMsg::WMStack:
; 412  : 		(*pp_radioMsgs)->dataBlock.message		= rcGOFORMATION;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 87					; 00000057H
	mov	WORD PTR [edx+62], ax

; 413  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extent$[ebp]
	push	edx
	mov	eax, DWORD PTR _p_sender$[ebp]
	push	eax
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 414  : 		(*pp_radioMsgs)->dataBlock.edata[2]		= 5;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 2
	shl	eax, 1
	mov	ecx, 5
	mov	WORD PTR [edx+eax+64], cx

; 415  : 	break;

	jmp	$LN75@AiCustomiz
$LN69@AiCustomiz:

; 416  : 
; 417  : 	case FalconWingmanMsg::WMResCell:
; 418  : 		(*pp_radioMsgs)->dataBlock.message		= rcGOFORMATION;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 87					; 00000057H
	mov	WORD PTR [eax+62], cx

; 419  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	push	edx
	mov	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	push	ecx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 420  : 		(*pp_radioMsgs)->dataBlock.edata[2]		= 6;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, 6
	mov	WORD PTR [eax+ecx+64], dx

; 421  : 	break;

	jmp	$LN75@AiCustomiz
$LN68@AiCustomiz:

; 422  : 
; 423  : 	case FalconWingmanMsg::WMBox:
; 424  : 		(*pp_radioMsgs)->dataBlock.message		= rcGOFORMATION;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 87					; 00000057H
	mov	WORD PTR [ecx+62], dx

; 425  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p_sender$[ebp]
	push	edx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 426  : 		(*pp_radioMsgs)->dataBlock.edata[2]		= 7;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 2
	shl	edx, 1
	mov	eax, 7
	mov	WORD PTR [ecx+edx+64], ax

; 427  : 	break;

	jmp	$LN75@AiCustomiz
$LN67@AiCustomiz:

; 428  : 
; 429  : 	case FalconWingmanMsg::WMArrowHead:
; 430  : 		(*pp_radioMsgs)->dataBlock.message		= rcGOFORMATION;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 87					; 00000057H
	mov	WORD PTR [edx+62], ax

; 431  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extent$[ebp]
	push	edx
	mov	eax, DWORD PTR _p_sender$[ebp]
	push	eax
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 432  : 		(*pp_radioMsgs)->dataBlock.edata[2]		= 8;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 2
	shl	eax, 1
	mov	ecx, 8
	mov	WORD PTR [edx+eax+64], cx

; 433  : 	break;

	jmp	$LN75@AiCustomiz
$LN66@AiCustomiz:

; 434  : 
; 435  : 	case FalconWingmanMsg::WMFluidFour:
; 436  : 		(*pp_radioMsgs)->dataBlock.message		= rcGOFORMATION;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 87					; 00000057H
	mov	WORD PTR [eax+62], cx

; 437  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	push	edx
	mov	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	push	ecx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 438  : 		(*pp_radioMsgs)->dataBlock.edata[2]		= 14;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, 14					; 0000000eH
	mov	WORD PTR [eax+ecx+64], dx

; 439  : 	break;

	jmp	$LN75@AiCustomiz
$LN65@AiCustomiz:

; 440  : 
; 441  : 	case FalconWingmanMsg::WMKickout:
; 442  : 		(*pp_radioMsgs)->dataBlock.message		= rcKICKOUT;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 102				; 00000066H
	mov	WORD PTR [ecx+62], dx

; 443  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p_sender$[ebp]
	push	edx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 444  : 	break;

	jmp	$LN75@AiCustomiz
$LN64@AiCustomiz:

; 445  : 
; 446  : 	case FalconWingmanMsg::WMCloseup:
; 447  : 		(*pp_radioMsgs)->dataBlock.message		= rcCLOSEUP;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 43					; 0000002bH
	mov	WORD PTR [ecx+62], dx

; 448  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p_sender$[ebp]
	push	edx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 449  : 	break;

	jmp	$LN75@AiCustomiz
$LN63@AiCustomiz:

; 450  : 	case FalconWingmanMsg::WMGiveBra:
; 451  : 		(*pp_radioMsgs)->dataBlock.message		= rcWHEREAREYOU;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 234				; 000000eaH
	mov	WORD PTR [ecx+62], dx

; 452  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p_sender$[ebp]
	push	edx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 453  : 
; 454  : 		flightIdx		= p_sender->GetCampaignObject()->GetComponentIndex(p_sender);

	mov	eax, DWORD PTR _p_sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentIndex@CampBaseClass@@QAEHPAVVuEntity@@@Z ; CampBaseClass::GetComponentIndex
	mov	DWORD PTR _flightIdx$[ebp], eax

; 455  : 		
; 456  : 		(*pp_radioMsgs)->dataBlock.edata[2] = ((FlightClass*)p_sender->GetCampaignObject())->callsign_id;

	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	movzx	cx, BYTE PTR [eax+425]
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, 2
	shl	edx, 1
	mov	WORD PTR [eax+edx+64], cx

; 457  : 		(*pp_radioMsgs)->dataBlock.edata[3] = (((FlightClass*)p_sender->GetCampaignObject())->callsign_num - 1) * 4 + flightIdx + 1;

	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	movzx	eax, BYTE PTR [eax+426]
	mov	ecx, DWORD PTR _flightIdx$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4-3]
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, 2
	imul	eax, 3
	mov	WORD PTR [ecx+eax+64], dx

; 458  : 	break;

	jmp	$LN75@AiCustomiz
$LN62@AiCustomiz:

; 459  : 
; 460  : 	case FalconWingmanMsg::WMGiveStatus:
; 461  : 		(*pp_radioMsgs)->dataBlock.message		= rcSTATUS;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 198				; 000000c6H
	mov	WORD PTR [edx+62], ax

; 462  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extent$[ebp]
	push	edx
	mov	eax, DWORD PTR _p_sender$[ebp]
	push	eax
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 463  : 	break;

	jmp	$LN75@AiCustomiz
$LN61@AiCustomiz:

; 464  : 
; 465  : 	case FalconWingmanMsg::WMGiveDamageReport:
; 466  : 		(*pp_radioMsgs)->dataBlock.message		= rcSENDDAMAGEREPORT;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 186				; 000000baH
	mov	WORD PTR [edx+62], ax

; 467  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extent$[ebp]
	push	edx
	mov	eax, DWORD PTR _p_sender$[ebp]
	push	eax
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 468  : 	break;

	jmp	$LN75@AiCustomiz
$LN60@AiCustomiz:

; 469  : 
; 470  : 	case FalconWingmanMsg::WMGiveFuelState:
; 471  : 		(*pp_radioMsgs)->dataBlock.message		= rcFUELCHECK;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 82					; 00000052H
	mov	WORD PTR [edx+62], ax

; 472  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extent$[ebp]
	push	edx
	mov	eax, DWORD PTR _p_sender$[ebp]
	push	eax
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 473  : 	break;

	jmp	$LN75@AiCustomiz
$LN59@AiCustomiz:

; 474  : 
; 475  : 	case FalconWingmanMsg::WMGiveWeaponsCheck:
; 476  : 		(*pp_radioMsgs)->dataBlock.message		= rcWEAPONSCHECK;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 232				; 000000e8H
	mov	WORD PTR [edx+62], ax

; 477  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extent$[ebp]
	push	edx
	mov	eax, DWORD PTR _p_sender$[ebp]
	push	eax
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 478  : 
; 479  : 		flightIdx		= p_sender->GetCampaignObject()->GetComponentIndex(p_sender);

	mov	ecx, DWORD PTR _p_sender$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentIndex@CampBaseClass@@QAEHPAVVuEntity@@@Z ; CampBaseClass::GetComponentIndex
	mov	DWORD PTR _flightIdx$[ebp], eax

; 480  : 		
; 481  : 		(*pp_radioMsgs)->dataBlock.edata[2] = ((FlightClass*)p_sender->GetCampaignObject())->callsign_id;

	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	movzx	dx, BYTE PTR [eax+425]
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, 2
	shl	eax, 1
	mov	WORD PTR [ecx+eax+64], dx

; 482  : 		(*pp_radioMsgs)->dataBlock.edata[3] = (((FlightClass*)p_sender->GetCampaignObject())->callsign_num - 1) * 4 + flightIdx + 1;

	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	movzx	ecx, BYTE PTR [eax+426]
	mov	edx, DWORD PTR _flightIdx$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4-3]
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, 2
	imul	ecx, 3
	mov	WORD PTR [edx+ecx+64], ax

; 483  : 	break;

	jmp	$LN75@AiCustomiz
$LN58@AiCustomiz:

; 484  : 
; 485  : 	case FalconWingmanMsg::WMWeaponsHold:
; 486  : 		(*pp_radioMsgs)->dataBlock.message		= rcHOLDFIRE;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 93					; 0000005dH
	mov	WORD PTR [eax+62], cx

; 487  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	push	edx
	mov	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	push	ecx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 488  : 	break;

	jmp	$LN75@AiCustomiz
$LN57@AiCustomiz:

; 489  : 
; 490  : 	case FalconWingmanMsg::WMWeaponsFree:
; 491  : 		(*pp_radioMsgs)->dataBlock.message		= rcWEAPONSFREE;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 233				; 000000e9H
	mov	WORD PTR [eax+62], cx

; 492  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	push	edx
	mov	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	push	ecx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 493  : 	break;

	jmp	$LN75@AiCustomiz
$LN56@AiCustomiz:

; 494  : 
; 495  : 	case FalconWingmanMsg::WMRejoin:
; 496  : 		(*pp_radioMsgs)->dataBlock.message		= rcREJOIN;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 173				; 000000adH
	mov	WORD PTR [eax+62], cx

; 497  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	push	edx
	mov	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	push	ecx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 498  : 	break;

	jmp	$LN75@AiCustomiz
$LN55@AiCustomiz:

; 499  : 
; 500  : 	case FalconWingmanMsg::WMSSOffset:
; 501  : 		(*pp_radioMsgs)->dataBlock.message		= rcEXECUTE;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 67					; 00000043H
	mov	WORD PTR [eax+62], cx

; 502  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	push	edx
	mov	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	push	ecx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 503  : 		(*pp_radioMsgs)->dataBlock.edata[2] = 4;		// was together with Pince, now correct eval setup 

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, 4
	mov	WORD PTR [eax+ecx+64], dx

; 504  : 	break;

	jmp	$LN75@AiCustomiz
$LN54@AiCustomiz:

; 505  : 
; 506  : 	case FalconWingmanMsg::WMPince:
; 507  : 		(*pp_radioMsgs)->dataBlock.message		= rcEXECUTE;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 67					; 00000043H
	mov	WORD PTR [ecx+62], dx

; 508  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p_sender$[ebp]
	push	edx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 509  : 		(*pp_radioMsgs)->dataBlock.edata[2] = 0;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 2
	shl	edx, 1
	xor	eax, eax
	mov	WORD PTR [ecx+edx+64], ax

; 510  : 	break;

	jmp	$LN75@AiCustomiz
$LN53@AiCustomiz:

; 511  : 
; 512  : 	case FalconWingmanMsg::WMChainsaw:
; 513  : 		(*pp_radioMsgs)->dataBlock.message		= rcEXECUTE;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 67					; 00000043H
	mov	WORD PTR [edx+62], ax

; 514  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extent$[ebp]
	push	edx
	mov	eax, DWORD PTR _p_sender$[ebp]
	push	eax
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 515  : 		(*pp_radioMsgs)->dataBlock.edata[2] = 2;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 2
	shl	eax, 1
	mov	ecx, 2
	mov	WORD PTR [edx+eax+64], cx

; 516  : 	break;

	jmp	$LN75@AiCustomiz
$LN52@AiCustomiz:

; 517  : 
; 518  : 	case FalconWingmanMsg::WMPosthole:
; 519  : 		(*pp_radioMsgs)->dataBlock.message		= rcEXECUTE;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 67					; 00000043H
	mov	WORD PTR [eax+62], cx

; 520  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	push	edx
	mov	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	push	ecx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 521  : 		(*pp_radioMsgs)->dataBlock.edata[2] = 1;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, 1
	mov	WORD PTR [eax+ecx+64], dx

; 522  : 	break;

	jmp	$LN75@AiCustomiz
$LN51@AiCustomiz:

; 523  : 
; 524  : 	case FalconWingmanMsg::WMClearSix:
; 525  : 		(*pp_radioMsgs)->dataBlock.message		= rcCLEARSIX;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 40					; 00000028H
	mov	WORD PTR [ecx+62], dx

; 526  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p_sender$[ebp]
	push	edx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 527  : 	break;

	jmp	$LN75@AiCustomiz
$LN50@AiCustomiz:

; 528  : 
; 529  : 	case FalconWingmanMsg::WMCheckSix:
; 530  : 		(*pp_radioMsgs)->dataBlock.message		= rcCHECKSIX;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 35					; 00000023H
	mov	WORD PTR [ecx+62], dx

; 531  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p_sender$[ebp]
	push	edx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 532  : 	break;

	jmp	$LN75@AiCustomiz
$LN49@AiCustomiz:

; 533  : 
; 534  : 	case FalconWingmanMsg::WMResumeNormal:
; 535  : 		(*pp_radioMsgs)->dataBlock.message		= rcRESUME;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 177				; 000000b1H
	mov	WORD PTR [ecx+62], dx

; 536  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p_sender$[ebp]
	push	edx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 537  : 		(*pp_radioMsgs)->dataBlock.edata[2] = -1;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 2
	shl	edx, 1
	or	eax, -1
	mov	WORD PTR [ecx+edx+64], ax

; 538  : 		(*pp_radioMsgs)->dataBlock.edata[3] = -1;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 2
	imul	eax, 3
	or	ecx, -1
	mov	WORD PTR [edx+eax+64], cx

; 539  : 	break;

	jmp	$LN75@AiCustomiz
$LN48@AiCustomiz:

; 540  : 
; 541  : 	case FalconWingmanMsg::WMRTB:
; 542  : 		(*pp_radioMsgs)->dataBlock.message		= rcRTB;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 180				; 000000b4H
	mov	WORD PTR [eax+62], cx

; 543  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	push	edx
	mov	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	push	ecx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 544  : 	break;

	jmp	$LN75@AiCustomiz
$LN47@AiCustomiz:

; 545  : 
; 546  : 	case FalconWingmanMsg::WMRadarStby:
; 547  : 		(*pp_radioMsgs)->dataBlock.message		= rcRADAROFF;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 164				; 000000a4H
	mov	WORD PTR [eax+62], cx

; 548  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	push	edx
	mov	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	push	ecx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 549  : 	break;

	jmp	$LN75@AiCustomiz
$LN46@AiCustomiz:

; 550  : 
; 551  : 	case FalconWingmanMsg::WMRadarOn:
; 552  : 		(*pp_radioMsgs)->dataBlock.message		= rcRADARON;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 165				; 000000a5H
	mov	WORD PTR [eax+62], cx

; 553  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	push	edx
	mov	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	push	ecx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 554  : 	break;

	jmp	$LN75@AiCustomiz
$LN45@AiCustomiz:

; 555  : 	
; 556  : 	case FalconWingmanMsg::WMBuddySpike:
; 557  : 		(*pp_radioMsgs)->dataBlock.message		= rcBUDDYSPIKE;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 32					; 00000020H
	mov	WORD PTR [eax+62], cx

; 558  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	push	edx
	mov	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	push	ecx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 559  : 	break;

	jmp	$LN75@AiCustomiz
$LN44@AiCustomiz:

; 560  : 
; 561  : 	case FalconWingmanMsg::WMRaygun:
; 562  :       theRadar = (RadarClass*)FindSensor ((SimMoverClass*)p_sender, SensorClass::Radar);

	push	1
	mov	edx, DWORD PTR _p_sender$[ebp]
	push	edx
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRadar$[ebp], eax

; 563  :       theRadar->GetCursorPosition (&xPos, &yPos);

	lea	eax, DWORD PTR _yPos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _xPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [eax+204]
	call	edx

; 564  : 		(*pp_radioMsgs)->dataBlock.message		= rcRAYGUN;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 313				; 00000139H
	mov	WORD PTR [ecx+62], dx

; 565  :       if (theRadar->TargetUnderCursor() != FalconNullId)

	push	OFFSET ?FalconNullId@@3VVU_ID@@A	; FalconNullId
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	mov	ecx, eax
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	$LN43@AiCustomiz

; 566  :       {
; 567  :          theTarget = vuDatabase->Find(theRadar->TargetUnderCursor());

	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _theTarget$[ebp], eax

; 568  : 		   (*pp_radioMsgs)->dataBlock.edata[2] = SimToGrid(theTarget->YPos());

	mov	ecx, DWORD PTR _theTarget$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, 2
	shl	ecx, 1
	mov	WORD PTR [edx+ecx+64], ax

; 569  : 		   (*pp_radioMsgs)->dataBlock.edata[3] = SimToGrid(theTarget->XPos());

	mov	ecx, DWORD PTR _theTarget$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	edx, 2
	imul	edx, 3
	mov	WORD PTR [ecx+edx+64], ax

; 570  : 		   (*pp_radioMsgs)->dataBlock.edata[4] = -1*FloatToInt32(theTarget->ZPos());

	mov	ecx, DWORD PTR _theTarget$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	imul	eax, -1
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, 2
	shl	ecx, 2
	mov	WORD PTR [edx+ecx+64], ax

; 571  :       }
; 572  :       else

	jmp	$LN42@AiCustomiz
$LN43@AiCustomiz:

; 573  :       {
; 574  : 		   (*pp_radioMsgs)->dataBlock.edata[2] = SimToGrid(p_sender->YPos() + yPos * NM_TO_FT);

	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1532[ebp]
	movss	xmm0, DWORD PTR tv1532[ebp]
	movss	xmm1, DWORD PTR _yPos$[ebp]
	mulss	xmm1, DWORD PTR __real@45bde1b0
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	edx, 2
	shl	edx, 1
	mov	WORD PTR [ecx+edx+64], ax

; 575  : 		   (*pp_radioMsgs)->dataBlock.edata[3] = SimToGrid(p_sender->XPos() + xPos * NM_TO_FT);

	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1541[ebp]
	movss	xmm0, DWORD PTR tv1541[ebp]
	movss	xmm1, DWORD PTR _xPos$[ebp]
	mulss	xmm1, DWORD PTR __real@45bde1b0
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, 2
	imul	ecx, 3
	mov	WORD PTR [edx+ecx+64], ax

; 576  : 		   (*pp_radioMsgs)->dataBlock.edata[4] = -1*FloatToInt32(p_sender->ZPos());

	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	imul	eax, -1
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	edx, 2
	shl	edx, 2
	mov	WORD PTR [ecx+edx+64], ax
$LN42@AiCustomiz:

; 577  :       }
; 578  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p_sender$[ebp]
	push	edx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 579  : 	break;

	jmp	$LN75@AiCustomiz
$LN41@AiCustomiz:

; 580  : 
; 581  : 	case FalconWingmanMsg::WMSmokeOn:
; 582  : 		(*pp_radioMsgs)->dataBlock.message		= rcEXECUTE;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 67					; 00000043H
	mov	WORD PTR [ecx+62], dx

; 583  : 		(*pp_radioMsgs)->dataBlock.edata[2]		= 6;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 2
	shl	edx, 1
	mov	eax, 6
	mov	WORD PTR [ecx+edx+64], ax

; 584  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extent$[ebp]
	push	edx
	mov	eax, DWORD PTR _p_sender$[ebp]
	push	eax
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 585  : 	break;

	jmp	$LN75@AiCustomiz
$LN40@AiCustomiz:

; 586  : 
; 587  : 	case FalconWingmanMsg::WMSmokeOff:
; 588  : 		(*pp_radioMsgs)->dataBlock.message		= rcEXECUTE;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 67					; 00000043H
	mov	WORD PTR [edx+62], ax

; 589  : 		(*pp_radioMsgs)->dataBlock.edata[2]		= 7;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 2
	shl	eax, 1
	mov	ecx, 7
	mov	WORD PTR [edx+eax+64], cx

; 590  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	push	edx
	mov	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	push	ecx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 591  : 	break;

	jmp	$LN75@AiCustomiz
$LN39@AiCustomiz:

; 592  : 
; 593  : 	case FalconWingmanMsg::WMAssignTarget:
; 594  : // 2000-10-09 ADDED BY S.G. SO 'Assign Targets' SAYS AT LEAST SOMETHING USEFULL
; 595  : 	case FalconWingmanMsg::WMAssignGroup:
; 596  : // END OF ADDED SECTION
; 597  : 		FalconEntity* pentity;
; 598  : 		
; 599  : 		pentity = (FalconEntity*) vuDatabase->Find(targetid);

	mov	edx, DWORD PTR _targetid$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _targetid$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _pentity$4[ebp], eax

; 600  : 
; 601  : 		if(!pentity) {

	cmp	DWORD PTR _pentity$4[ebp], 0
	jne	SHORT $LN38@AiCustomiz

; 602  : 			return;

	jmp	$LN77@AiCustomiz
$LN38@AiCustomiz:

; 603  : 		}
; 604  : 
; 605  : 		int com;
; 606  : 		if (command == FalconWingmanMsg::WMAssignTarget)

	cmp	DWORD PTR _command$[ebp], 9
	jne	SHORT $LN37@AiCustomiz

; 607  : 			com = 0;

	mov	DWORD PTR _com$3[ebp], 0
	jmp	SHORT $LN36@AiCustomiz
$LN37@AiCustomiz:

; 608  : 		else com = 1;

	mov	DWORD PTR _com$3[ebp], 1
$LN36@AiCustomiz:

; 609  : 		
; 610  : 		if(pentity->GetDomain() == DOMAIN_LAND || pentity->GetDomain() == DOMAIN_SEA) {

	mov	ecx, DWORD PTR _pentity$4[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pentity$4[ebp]
	mov	eax, DWORD PTR [edx+124]
	call	eax
	movzx	ecx, al
	cmp	ecx, 3
	je	SHORT $LN34@AiCustomiz
	mov	edx, DWORD PTR _pentity$4[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pentity$4[ebp]
	mov	edx, DWORD PTR [eax+124]
	call	edx
	movzx	eax, al
	cmp	eax, 4
	jne	$LN35@AiCustomiz
$LN34@AiCustomiz:

; 611  : 			(*pp_radioMsgs)->dataBlock.message		= rcENGAGEGNDTARGET;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 60					; 0000003cH
	mov	WORD PTR [edx+62], ax

; 612  : 			AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extent$[ebp]
	push	edx
	mov	eax, DWORD PTR _p_sender$[ebp]
	push	eax
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 613  : 			(*pp_radioMsgs)->dataBlock.edata[2] = com;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 2
	shl	eax, 1
	mov	cx, WORD PTR _com$3[ebp]
	mov	WORD PTR [edx+eax+64], cx

; 614  : 			(*pp_radioMsgs)->dataBlock.edata[3] = SimToGrid(pentity->YPos());

	mov	ecx, DWORD PTR _pentity$4[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	edx, 2
	imul	edx, 3
	mov	WORD PTR [ecx+edx+64], ax

; 615  : 			(*pp_radioMsgs)->dataBlock.edata[4] = SimToGrid(pentity->XPos());

	mov	ecx, DWORD PTR _pentity$4[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, 2
	shl	ecx, 2
	mov	WORD PTR [edx+ecx+64], ax
	jmp	$LN32@AiCustomiz
$LN35@AiCustomiz:

; 616  : 		}
; 617  : 		else if(pentity->IsFlight() || pentity->IsAirplane() || pentity->IsHelicopter() || pentity->IsSquadron() || pentity->IsPackage()) {

	mov	edx, DWORD PTR _pentity$4[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pentity$4[ebp]
	mov	edx, DWORD PTR [eax+248]
	call	edx
	test	eax, eax
	jne	SHORT $LN31@AiCustomiz
	mov	eax, DWORD PTR _pentity$4[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pentity$4[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	jne	SHORT $LN31@AiCustomiz
	mov	ecx, DWORD PTR _pentity$4[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pentity$4[ebp]
	mov	eax, DWORD PTR [edx+184]
	call	eax
	test	eax, eax
	jne	SHORT $LN31@AiCustomiz
	mov	ecx, DWORD PTR _pentity$4[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pentity$4[ebp]
	mov	eax, DWORD PTR [edx+252]
	call	eax
	test	eax, eax
	jne	SHORT $LN31@AiCustomiz
	mov	ecx, DWORD PTR _pentity$4[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pentity$4[ebp]
	mov	eax, DWORD PTR [edx+256]
	call	eax
	test	eax, eax
	je	$LN32@AiCustomiz
$LN31@AiCustomiz:

; 618  : 			// if air target and shooter mode
; 619  : 			(*pp_radioMsgs)->dataBlock.message		= rcENGAGEDIRECTIVE;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 59					; 0000003bH
	mov	WORD PTR [edx+62], ax

; 620  : 			AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extent$[ebp]
	push	edx
	mov	eax, DWORD PTR _p_sender$[ebp]
	push	eax
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 621  : 
; 622  : 			flightIdx		= p_sender->GetCampaignObject()->GetComponentIndex(p_sender);

	mov	ecx, DWORD PTR _p_sender$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentIndex@CampBaseClass@@QAEHPAVVuEntity@@@Z ; CampBaseClass::GetComponentIndex
	mov	DWORD PTR _flightIdx$[ebp], eax

; 623  : 		
; 624  : 			(*pp_radioMsgs)->dataBlock.edata[2] = ((FlightClass*)p_sender->GetCampaignObject())->callsign_id;

	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	movzx	dx, BYTE PTR [eax+425]
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, 2
	shl	eax, 1
	mov	WORD PTR [ecx+eax+64], dx

; 625  : 			(*pp_radioMsgs)->dataBlock.edata[3] = (((FlightClass*)p_sender->GetCampaignObject())->callsign_num - 1) * 4 + flightIdx + 1;

	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	movzx	ecx, BYTE PTR [eax+426]
	mov	edx, DWORD PTR _flightIdx$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4-3]
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, 2
	imul	ecx, 3
	mov	WORD PTR [edx+ecx+64], ax

; 626  : 	
; 627  : 			if(pentity->IsFlight() || pentity->IsSquadron() || pentity->IsPackage()) {

	mov	edx, DWORD PTR _pentity$4[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pentity$4[ebp]
	mov	edx, DWORD PTR [eax+248]
	call	edx
	test	eax, eax
	jne	SHORT $LN29@AiCustomiz
	mov	eax, DWORD PTR _pentity$4[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pentity$4[ebp]
	mov	eax, DWORD PTR [edx+252]
	call	eax
	test	eax, eax
	jne	SHORT $LN29@AiCustomiz
	mov	ecx, DWORD PTR _pentity$4[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pentity$4[ebp]
	mov	eax, DWORD PTR [edx+256]
	call	eax
	test	eax, eax
	je	SHORT $LN30@AiCustomiz
$LN29@AiCustomiz:

; 628  : 				(*pp_radioMsgs)->dataBlock.edata[4] = ((Unit)pentity)->GetUnitClassData()->VehicleType[0] * 2 + 1;

	mov	ecx, DWORD PTR _pentity$4[ebp]
	call	?GetUnitClassData@UnitClass@@QAEPAUUnitClassDataType@@XZ ; UnitClass::GetUnitClassData
	mov	ecx, 2
	imul	ecx, 0
	movsx	edx, WORD PTR [eax+ecx+68]
	lea	eax, DWORD PTR [edx+edx+1]
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, 2
	shl	ecx, 2
	mov	WORD PTR [edx+ecx+64], ax

; 629  : //				(*pp_radioMsgs)->dataBlock.edata[5] = ((Unit)pentity)->GetTotalVehicles();
; 630  : 				(*pp_radioMsgs)->dataBlock.edata[5] = -1;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 2
	imul	ecx, 5
	or	edx, -1
	mov	WORD PTR [eax+ecx+64], dx
	jmp	SHORT $LN27@AiCustomiz
$LN30@AiCustomiz:

; 631  : 			}
; 632  : 			else if(pentity->IsAirplane() || pentity->IsHelicopter()) {

	mov	eax, DWORD PTR _pentity$4[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pentity$4[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	jne	SHORT $LN26@AiCustomiz
	mov	ecx, DWORD PTR _pentity$4[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pentity$4[ebp]
	mov	eax, DWORD PTR [edx+184]
	call	eax
	test	eax, eax
	je	SHORT $LN27@AiCustomiz
$LN26@AiCustomiz:

; 633  : 				(*pp_radioMsgs)->dataBlock.edata[4] = 2 * (pentity->Type() - VU_LAST_ENTITY_TYPE);

	mov	ecx, DWORD PTR _pentity$4[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	ecx, ax
	lea	edx, DWORD PTR [ecx+ecx-200]
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, 2
	shl	eax, 2
	mov	WORD PTR [ecx+eax+64], dx

; 634  : 				(*pp_radioMsgs)->dataBlock.edata[5] = -1;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 2
	imul	eax, 5
	or	ecx, -1
	mov	WORD PTR [edx+eax+64], cx
$LN27@AiCustomiz:

; 635  : //				(*pp_radioMsgs)->dataBlock.edata[5] = 0;
; 636  : 			}
; 637  : 			(*pp_radioMsgs)->dataBlock.edata[6] = SimToGrid(pentity->YPos());

	mov	ecx, DWORD PTR _pentity$4[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	edx, 2
	imul	edx, 6
	mov	WORD PTR [ecx+edx+64], ax

; 638  : 			(*pp_radioMsgs)->dataBlock.edata[7] = SimToGrid(pentity->XPos());

	mov	ecx, DWORD PTR _pentity$4[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, 2
	imul	ecx, 7
	mov	WORD PTR [edx+ecx+64], ax

; 639  : 			(*pp_radioMsgs)->dataBlock.edata[8] = -1*FloatToInt32(pentity->ZPos());

	mov	ecx, DWORD PTR _pentity$4[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	imul	eax, -1
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	edx, 2
	shl	edx, 3
	mov	WORD PTR [ecx+edx+64], ax
$LN32@AiCustomiz:

; 640  : 		}
; 641  : 
; 642  : 	break;

	jmp	$LN75@AiCustomiz
$LN25@AiCustomiz:

; 643  : 
; 644  : 	case FalconWingmanMsg::WMShooterMode://me123 addet
; 645  : 		(*pp_radioMsgs)->dataBlock.message		= rcSHOOTER;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 189				; 000000bdH
	mov	WORD PTR [ecx+62], dx

; 646  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p_sender$[ebp]
	push	edx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 647  : 	break;

	jmp	$LN75@AiCustomiz
$LN24@AiCustomiz:

; 648  : 
; 649  : 	case FalconWingmanMsg::WMCoverMode://me123 addet
; 650  : 		//this indicates I want to not play anything
; 651  : 		//Vince: if you feel these should say something, put the code here. DSP
; 652  : 		(*pp_radioMsgs)->dataBlock.message		= rcCOVER;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 45					; 0000002dH
	mov	WORD PTR [ecx+62], dx

; 653  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p_sender$[ebp]
	push	edx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 654  : 	break;

	jmp	$LN75@AiCustomiz
$LN23@AiCustomiz:

; 655  : 
; 656  : 	case FalconWingmanMsg::WMJokerFuel:
; 657  : 		(*pp_radioMsgs)->dataBlock.edata[0]		= ((AircraftClass*)p_sender)->vehicleInUnit;

	mov	eax, DWORD PTR _p_sender$[ebp]
	movzx	cx, BYTE PTR [eax+664]
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, 2
	imul	edx, 0
	mov	WORD PTR [eax+edx+64], cx

; 658  : 		(*pp_radioMsgs)->dataBlock.message		= rcFUELCRITICAL;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 337				; 00000151H
	mov	WORD PTR [ecx+62], dx

; 659  : 	break;

	jmp	$LN75@AiCustomiz
$LN22@AiCustomiz:

; 660  : 
; 661  : 	case FalconWingmanMsg::WMFlameout:
; 662  : 	case FalconWingmanMsg::WMBingoFuel:
; 663  : 	case FalconWingmanMsg::WMFumes:
; 664  : 		(*pp_radioMsgs)->dataBlock.edata[0]		= ((AircraftClass*)p_sender)->vehicleInUnit;

	mov	eax, DWORD PTR _p_sender$[ebp]
	movzx	cx, BYTE PTR [eax+664]
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, 2
	imul	edx, 0
	mov	WORD PTR [eax+edx+64], cx

; 665  : 		(*pp_radioMsgs)->dataBlock.edata[1]		= (FloatToInt32(((AircraftClass*)p_sender)->af->Fuel() + ((AircraftClass*)p_sender)->af->ExternalFuel()));

	mov	eax, DWORD PTR _p_sender$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?Fuel@AirframeClass@@QAEMXZ		; AirframeClass::Fuel
	fstp	DWORD PTR tv1718[ebp]
	movss	xmm0, DWORD PTR tv1718[ebp]
	mov	ecx, DWORD PTR _p_sender$[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	movss	DWORD PTR tv1961[ebp], xmm0
	call	?ExternalFuel@AirframeClass@@QAEMXZ	; AirframeClass::ExternalFuel
	fstp	DWORD PTR tv1723[ebp]
	movss	xmm0, DWORD PTR tv1961[ebp]
	addss	xmm0, DWORD PTR tv1723[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	edx, 2
	shl	edx, 0
	mov	WORD PTR [ecx+edx+64], ax

; 666  : 		(*pp_radioMsgs)->dataBlock.message		= rcFUELCHECKRSP;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 81					; 00000051H
	mov	WORD PTR [ecx+62], dx

; 667  : 	break;

	jmp	$LN75@AiCustomiz
$LN21@AiCustomiz:

; 668  : 
; 669  : 	
; 670  : 	// Setup for later commfile additions
; 671  : 
; 672  : 	case FalconWingmanMsg::WMBreakRight:
; 673  : 		(*pp_radioMsgs)->dataBlock.message		= rcBREAKRL;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 341				; 00000155H
	mov	WORD PTR [ecx+62], dx

; 674  : 		(*pp_radioMsgs)->dataBlock.edata[2]     =   3;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 2
	shl	edx, 1
	mov	eax, 3
	mov	WORD PTR [ecx+edx+64], ax

; 675  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extent$[ebp]
	push	edx
	mov	eax, DWORD PTR _p_sender$[ebp]
	push	eax
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 676  : 	break;

	jmp	$LN75@AiCustomiz
$LN20@AiCustomiz:

; 677  : 
; 678  : 	case FalconWingmanMsg::WMBreakLeft:
; 679  : 		(*pp_radioMsgs)->dataBlock.message		= rcBREAKRL;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 341				; 00000155H
	mov	WORD PTR [edx+62], ax

; 680  : 		(*pp_radioMsgs)->dataBlock.edata[2]     =   0;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 2
	shl	eax, 1
	xor	ecx, ecx
	mov	WORD PTR [edx+eax+64], cx

; 681  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	push	edx
	mov	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	push	ecx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 682  : 	break;

	jmp	$LN75@AiCustomiz
$LN19@AiCustomiz:

; 683  : 
; 684  : 	case FalconWingmanMsg::WMIncreaseRelAlt:
; 685  : 		(*pp_radioMsgs)->dataBlock.message		= rcINCREASEDECREASERELALT;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 342				; 00000156H
	mov	WORD PTR [eax+62], cx

; 686  : 		(*pp_radioMsgs)->dataBlock.edata[2]     =   0;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 2
	shl	ecx, 1
	xor	edx, edx
	mov	WORD PTR [eax+ecx+64], dx

; 687  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p_sender$[ebp]
	push	edx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 688  : 	break;

	jmp	$LN75@AiCustomiz
$LN18@AiCustomiz:

; 689  : 
; 690  : 	case FalconWingmanMsg::WMDecreaseRelAlt:
; 691  : 		(*pp_radioMsgs)->dataBlock.message		= rcINCREASEDECREASERELALT;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 342				; 00000156H
	mov	WORD PTR [ecx+62], dx

; 692  : 		(*pp_radioMsgs)->dataBlock.edata[2]     =   1;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 2
	shl	edx, 1
	mov	eax, 1
	mov	WORD PTR [ecx+edx+64], ax

; 693  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extent$[ebp]
	push	edx
	mov	eax, DWORD PTR _p_sender$[ebp]
	push	eax
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 694  : 	break;

	jmp	$LN75@AiCustomiz
$LN17@AiCustomiz:

; 695  : 
; 696  : 	case FalconWingmanMsg::WMToggleSide:
; 697  : 		(*pp_radioMsgs)->dataBlock.message		= rcTOGGLESIDE;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 343				; 00000157H
	mov	WORD PTR [edx+62], ax

; 698  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extent$[ebp]
	push	edx
	mov	eax, DWORD PTR _p_sender$[ebp]
	push	eax
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 699  : 	break;

	jmp	$LN75@AiCustomiz
$LN16@AiCustomiz:

; 700  : 
; 701  : 	case FalconWingmanMsg::WMFlex:
; 702  : 		(*pp_radioMsgs)->dataBlock.message		= rcEXECUTE;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 67					; 00000043H
	mov	WORD PTR [edx+62], ax

; 703  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extent$[ebp]
	push	edx
	mov	eax, DWORD PTR _p_sender$[ebp]
	push	eax
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 704  : 		(*pp_radioMsgs)->dataBlock.edata[2] = 3;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 2
	shl	eax, 1
	mov	ecx, 3
	mov	WORD PTR [edx+eax+64], cx

; 705  : 
; 706  : 	break;

	jmp	$LN75@AiCustomiz
$LN15@AiCustomiz:

; 707  : 
; 708  : 	case FalconWingmanMsg::WMPromote:
; 709  : 		//Take lead
; 710  : 		(*pp_radioMsgs)->dataBlock.message		= rcEXECUTE;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 67					; 00000043H
	mov	WORD PTR [eax+62], cx

; 711  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	push	edx
	mov	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	push	ecx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 712  : 		(*pp_radioMsgs)->dataBlock.edata[2]		= 9;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, 9
	mov	WORD PTR [eax+ecx+64], dx

; 713  : 	break;

	jmp	$LN75@AiCustomiz
$LN14@AiCustomiz:

; 714  : 
; 715  : 	case FalconWingmanMsg::WMDropStores:
; 716  : 		(*pp_radioMsgs)->dataBlock.message		= rcDROPSTORES;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 344				; 00000158H
	mov	WORD PTR [ecx+62], dx

; 717  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p_sender$[ebp]
	push	edx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 718  : 		break;

	jmp	$LN75@AiCustomiz
$LN13@AiCustomiz:

; 719  : 
; 720  : 	case FalconWingmanMsg::WMVic:
; 721  : 		(*pp_radioMsgs)->dataBlock.message		= rcGOFORMATION;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 87					; 00000057H
	mov	WORD PTR [ecx+62], dx

; 722  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p_sender$[ebp]
	push	edx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 723  : 		(*pp_radioMsgs)->dataBlock.edata[2]		= 11;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 2
	shl	edx, 1
	mov	eax, 11					; 0000000bH
	mov	WORD PTR [ecx+edx+64], ax

; 724  : 		break;

	jmp	$LN75@AiCustomiz
$LN12@AiCustomiz:

; 725  : 
; 726  : 	case FalconWingmanMsg::WMFinger4:
; 727  : 		(*pp_radioMsgs)->dataBlock.message		= rcGOFORMATION;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 87					; 00000057H
	mov	WORD PTR [edx+62], ax

; 728  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extent$[ebp]
	push	edx
	mov	eax, DWORD PTR _p_sender$[ebp]
	push	eax
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 729  : 		(*pp_radioMsgs)->dataBlock.edata[2]		= 15;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 2
	shl	eax, 1
	mov	ecx, 15					; 0000000fH
	mov	WORD PTR [edx+eax+64], cx

; 730  : 		break;

	jmp	$LN75@AiCustomiz
$LN11@AiCustomiz:

; 731  : 
; 732  : 	case FalconWingmanMsg::WMEchelon:
; 733  : 		(*pp_radioMsgs)->dataBlock.message		= rcGOFORMATION;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 87					; 00000057H
	mov	WORD PTR [eax+62], cx

; 734  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	push	edx
	mov	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	push	ecx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 735  : 		(*pp_radioMsgs)->dataBlock.edata[2]		= 12;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, 12					; 0000000cH
	mov	WORD PTR [eax+ecx+64], dx

; 736  : 		break;

	jmp	$LN75@AiCustomiz
$LN10@AiCustomiz:

; 737  : 
; 738  : 	case FalconWingmanMsg::WMForm1:
; 739  : 		(*pp_radioMsgs)->dataBlock.message		= rcGOFORMATION;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 87					; 00000057H
	mov	WORD PTR [ecx+62], dx

; 740  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p_sender$[ebp]
	push	edx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 741  : 		(*pp_radioMsgs)->dataBlock.edata[2]		= 16;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 2
	shl	edx, 1
	mov	eax, 16					; 00000010H
	mov	WORD PTR [ecx+edx+64], ax

; 742  : 		break;

	jmp	$LN75@AiCustomiz
$LN9@AiCustomiz:

; 743  : 
; 744  : 	case FalconWingmanMsg::WMForm2:
; 745  : 		(*pp_radioMsgs)->dataBlock.message		= rcGOFORMATION;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 87					; 00000057H
	mov	WORD PTR [edx+62], ax

; 746  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extent$[ebp]
	push	edx
	mov	eax, DWORD PTR _p_sender$[ebp]
	push	eax
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 747  : 		(*pp_radioMsgs)->dataBlock.edata[2]		= 17;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 2
	shl	eax, 1
	mov	ecx, 17					; 00000011H
	mov	WORD PTR [edx+eax+64], cx

; 748  : 		break;

	jmp	$LN75@AiCustomiz
$LN8@AiCustomiz:

; 749  : 
; 750  : 	case FalconWingmanMsg::WMForm3:
; 751  : 		(*pp_radioMsgs)->dataBlock.message		= rcGOFORMATION;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 87					; 00000057H
	mov	WORD PTR [eax+62], cx

; 752  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	push	edx
	mov	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	push	ecx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 753  : 		(*pp_radioMsgs)->dataBlock.edata[2]		= 18;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, 18					; 00000012H
	mov	WORD PTR [eax+ecx+64], dx

; 754  : 		break;

	jmp	$LN75@AiCustomiz
$LN7@AiCustomiz:

; 755  : 
; 756  : 	case FalconWingmanMsg::WMForm4:
; 757  : 		(*pp_radioMsgs)->dataBlock.message		= rcGOFORMATION;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 87					; 00000057H
	mov	WORD PTR [ecx+62], dx

; 758  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p_sender$[ebp]
	push	edx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 759  : 		(*pp_radioMsgs)->dataBlock.edata[2]		= 19;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 2
	shl	edx, 1
	mov	eax, 19					; 00000013H
	mov	WORD PTR [ecx+edx+64], ax

; 760  : 		break;

	jmp	$LN75@AiCustomiz
$LN6@AiCustomiz:

; 761  : 
; 762  : 	case FalconWingmanMsg::WMGlue:
; 763  : 		(*pp_radioMsgs)->dataBlock.message		= rcEXECUTE;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 67					; 00000043H
	mov	WORD PTR [edx+62], ax

; 764  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extent$[ebp]
	push	edx
	mov	eax, DWORD PTR _p_sender$[ebp]
	push	eax
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 765  : 		(*pp_radioMsgs)->dataBlock.edata[2] = 11;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 2
	shl	eax, 1
	mov	ecx, 11					; 0000000bH
	mov	WORD PTR [edx+eax+64], cx

; 766  : 		break;

	jmp	$LN75@AiCustomiz
$LN5@AiCustomiz:

; 767  : 	case FalconWingmanMsg::WMSplit:
; 768  : 		(*pp_radioMsgs)->dataBlock.message		= rcEXECUTE;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 67					; 00000043H
	mov	WORD PTR [eax+62], cx

; 769  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	push	edx
	mov	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	push	ecx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 770  : 		(*pp_radioMsgs)->dataBlock.edata[2] = 10;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, 10					; 0000000aH
	mov	WORD PTR [eax+ecx+64], dx

; 771  : 		break;

	jmp	$LN75@AiCustomiz
$LN4@AiCustomiz:

; 772  : 	case FalconWingmanMsg::WMECMOn:
; 773  : 		(*pp_radioMsgs)->dataBlock.message		= rcORDERECM;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 353				; 00000161H
	mov	WORD PTR [ecx+62], dx

; 774  : 		(*pp_radioMsgs)->dataBlock.edata[2]		= 0;	// Music on

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 2
	shl	edx, 1
	xor	eax, eax
	mov	WORD PTR [ecx+edx+64], ax

; 775  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extent$[ebp]
	push	edx
	mov	eax, DWORD PTR _p_sender$[ebp]
	push	eax
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 776  : 	break;

	jmp	$LN75@AiCustomiz
$LN3@AiCustomiz:

; 777  : 
; 778  : 	case FalconWingmanMsg::WMECMOff:
; 779  : 		(*pp_radioMsgs)->dataBlock.message		= rcORDERECM;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 353				; 00000161H
	mov	WORD PTR [edx+62], ax

; 780  : 		(*pp_radioMsgs)->dataBlock.edata[2]		= 1;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 2
	shl	eax, 1
	mov	ecx, 1
	mov	WORD PTR [edx+eax+64], cx

; 781  : 		AiFillCallsign( p_sender, extent, pp_radioMsgs, TRUE );

	push	1
	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	push	edx
	mov	eax, DWORD PTR _extent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	push	ecx
	call	?AiFillCallsign@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@H@Z ; AiFillCallsign
	add	esp, 16					; 00000010H

; 782  : 	break;

	jmp	$LN75@AiCustomiz
$LN2@AiCustomiz:

; 783  : 	// 2002-03-15 ADDED BY S.G. BVR profiles that the player can send to his element
; 784  : 	case FalconWingmanMsg::WMPlevel1a:
; 785  : 	case FalconWingmanMsg::WMPlevel2a:
; 786  : 	case FalconWingmanMsg::WMPlevel3a:
; 787  : 	case FalconWingmanMsg::WMPlevel1b:
; 788  : 	case FalconWingmanMsg::WMPlevel2b:
; 789  : 	case FalconWingmanMsg::WMPlevel3b:
; 790  : 	case FalconWingmanMsg::WMPlevel1c:
; 791  : 	case FalconWingmanMsg::WMPlevel2c:
; 792  : 	case FalconWingmanMsg::WMPlevel3c:
; 793  : 	case FalconWingmanMsg::WMPbeamdeploy:
; 794  : 	case FalconWingmanMsg::WMPbeambeam:
; 795  : 	case FalconWingmanMsg::WMPwall:
; 796  : 	case FalconWingmanMsg::WMPgrinder:
; 797  : 	case FalconWingmanMsg::WMPwideazimuth:
; 798  : 	case FalconWingmanMsg::WMPshortazimuth:
; 799  : 	case FalconWingmanMsg::WMPwideLT:
; 800  : 	case FalconWingmanMsg::WMPShortLT:
; 801  : 	case FalconWingmanMsg::WMPDefensive:
; 802  : 		(*pp_radioMsgs)->dataBlock.message		= -1; // Nothing for now...

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	or	ecx, -1
	mov	WORD PTR [eax+62], cx

; 803  : 		break;

	jmp	$LN75@AiCustomiz
$LN1@AiCustomiz:

; 804  : 	// END OF ADDED SECTION 2002-03-15
; 805  : 	default:
; 806  : 		(*pp_radioMsgs)->dataBlock.message		= rcROGER;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 179				; 000000b3H
	mov	WORD PTR [eax+62], cx

; 807  : 		(*pp_radioMsgs)->dataBlock.edata[0]		= -1;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 2
	imul	ecx, 0
	or	edx, -1
	mov	WORD PTR [eax+ecx+64], dx

; 808  : 		(*pp_radioMsgs)->dataBlock.edata[1]		= -1;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 2
	shl	edx, 0
	or	eax, -1
	mov	WORD PTR [ecx+edx+64], ax

; 809  : 		(*pp_radioMsgs)->dataBlock.edata[2]		= -1;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 2
	shl	eax, 1
	or	ecx, -1
	mov	WORD PTR [edx+eax+64], cx

; 810  : 		(*pp_radioMsgs)->dataBlock.edata[3]		= -1;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 2
	imul	ecx, 3
	or	edx, -1
	mov	WORD PTR [eax+ecx+64], dx

; 811  : 		(*pp_radioMsgs)->dataBlock.edata[4]		= -1;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 2
	shl	edx, 2
	or	eax, -1
	mov	WORD PTR [ecx+edx+64], ax

; 812  : 		(*pp_radioMsgs)->dataBlock.edata[5]		= -1;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 2
	imul	eax, 5
	or	ecx, -1
	mov	WORD PTR [edx+eax+64], cx

; 813  : 		(*pp_radioMsgs)->dataBlock.edata[6]		= -1;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 2
	imul	ecx, 6
	or	edx, -1
	mov	WORD PTR [eax+ecx+64], dx

; 814  : 		(*pp_radioMsgs)->dataBlock.edata[7]		= -1;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, 2
	imul	edx, 7
	or	eax, -1
	mov	WORD PTR [ecx+edx+64], ax

; 815  : 		(*pp_radioMsgs)->dataBlock.edata[8]		= -1;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, 2
	shl	eax, 3
	or	ecx, -1
	mov	WORD PTR [edx+eax+64], cx

; 816  : 		(*pp_radioMsgs)->dataBlock.edata[9]		= -1;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 2
	imul	ecx, 9
	or	edx, -1
	mov	WORD PTR [eax+ecx+64], dx
$LN75@AiCustomiz:
$LN77@AiCustomiz:

; 817  : 	break;
; 818  : 
; 819  : 	}
; 820  : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN80@AiCustomiz:
	DD	$LN74@AiCustomiz
	DD	$LN73@AiCustomiz
	DD	$LN72@AiCustomiz
	DD	$LN71@AiCustomiz
	DD	$LN70@AiCustomiz
	DD	$LN69@AiCustomiz
	DD	$LN68@AiCustomiz
	DD	$LN67@AiCustomiz
	DD	$LN66@AiCustomiz
	DD	$LN39@AiCustomiz
	DD	$LN25@AiCustomiz
	DD	$LN24@AiCustomiz
	DD	$LN58@AiCustomiz
	DD	$LN57@AiCustomiz
	DD	$LN21@AiCustomiz
	DD	$LN20@AiCustomiz
	DD	$LN51@AiCustomiz
	DD	$LN50@AiCustomiz
	DD	$LN54@AiCustomiz
	DD	$LN52@AiCustomiz
	DD	$LN53@AiCustomiz
	DD	$LN16@AiCustomiz
	DD	$LN56@AiCustomiz
	DD	$LN49@AiCustomiz
	DD	$LN65@AiCustomiz
	DD	$LN64@AiCustomiz
	DD	$LN17@AiCustomiz
	DD	$LN19@AiCustomiz
	DD	$LN18@AiCustomiz
	DD	$LN63@AiCustomiz
	DD	$LN62@AiCustomiz
	DD	$LN61@AiCustomiz
	DD	$LN60@AiCustomiz
	DD	$LN59@AiCustomiz
	DD	$LN48@AiCustomiz
	DD	$LN15@AiCustomiz
	DD	$LN47@AiCustomiz
	DD	$LN46@AiCustomiz
	DD	$LN45@AiCustomiz
	DD	$LN55@AiCustomiz
	DD	$LN41@AiCustomiz
	DD	$LN40@AiCustomiz
	DD	$LN44@AiCustomiz
	DD	$LN23@AiCustomiz
	DD	$LN22@AiCustomiz
	DD	$LN5@AiCustomiz
	DD	$LN6@AiCustomiz
	DD	$LN14@AiCustomiz
	DD	$LN13@AiCustomiz
	DD	$LN12@AiCustomiz
	DD	$LN11@AiCustomiz
	DD	$LN10@AiCustomiz
	DD	$LN9@AiCustomiz
	DD	$LN8@AiCustomiz
	DD	$LN7@AiCustomiz
	DD	$LN4@AiCustomiz
	DD	$LN3@AiCustomiz
	DD	$LN2@AiCustomiz
	DD	$LN1@AiCustomiz
$LN79@AiCustomiz:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	18					; 00000012H
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	21					; 00000015H
	DB	22					; 00000016H
	DB	23					; 00000017H
	DB	58					; 0000003aH
	DB	58					; 0000003aH
	DB	24					; 00000018H
	DB	25					; 00000019H
	DB	26					; 0000001aH
	DB	27					; 0000001bH
	DB	28					; 0000001cH
	DB	29					; 0000001dH
	DB	30					; 0000001eH
	DB	31					; 0000001fH
	DB	32					; 00000020H
	DB	33					; 00000021H
	DB	34					; 00000022H
	DB	58					; 0000003aH
	DB	35					; 00000023H
	DB	36					; 00000024H
	DB	37					; 00000025H
	DB	38					; 00000026H
	DB	58					; 0000003aH
	DB	39					; 00000027H
	DB	40					; 00000028H
	DB	41					; 00000029H
	DB	42					; 0000002aH
	DB	58					; 0000003aH
	DB	58					; 0000003aH
	DB	58					; 0000003aH
	DB	43					; 0000002bH
	DB	44					; 0000002cH
	DB	44					; 0000002cH
	DB	44					; 0000002cH
	DB	45					; 0000002dH
	DB	46					; 0000002eH
	DB	58					; 0000003aH
	DB	47					; 0000002fH
	DB	48					; 00000030H
	DB	49					; 00000031H
	DB	50					; 00000032H
	DB	51					; 00000033H
	DB	52					; 00000034H
	DB	53					; 00000035H
	DB	54					; 00000036H
	DB	58					; 0000003aH
	DB	58					; 0000003aH
	DB	58					; 0000003aH
	DB	58					; 0000003aH
	DB	58					; 0000003aH
	DB	58					; 0000003aH
	DB	55					; 00000037H
	DB	56					; 00000038H
	DB	57					; 00000039H
	DB	57					; 00000039H
	DB	57					; 00000039H
	DB	57					; 00000039H
	DB	57					; 00000039H
	DB	57					; 00000039H
	DB	57					; 00000039H
	DB	57					; 00000039H
	DB	57					; 00000039H
	DB	57					; 00000039H
	DB	57					; 00000039H
	DB	57					; 00000039H
	DB	57					; 00000039H
	DB	57					; 00000039H
	DB	57					; 00000039H
	DB	57					; 00000039H
	DB	57					; 00000039H
	DB	57					; 00000039H
?AiCustomizeRadioMsg@@YAXPAVSimBaseClass@@HPAPAVFalconRadioChatterMessage@@HVVU_ID@@@Z ENDP ; AiCustomizeRadioMsg
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\wingradio.cpp
_TEXT	SEGMENT
$T2 = -52						; size = 8
$T3 = -44						; size = 8
$T4 = -36						; size = 4
tv179 = -32						; size = 4
_filter$ = -28						; size = 4
tv132 = -24						; size = 4
$T5 = -20						; size = 4
tv87 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p_sender$ = 8						; size = 4
_pp_radioMsgs$ = 12					; size = 4
?AiCreateRadioMsgs@@YAXPAVSimBaseClass@@PAPAVFalconRadioChatterMessage@@@Z PROC ; AiCreateRadioMsgs

; 118  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AiCreateRadioMsgs@@YAXPAVSimBaseClass@@PAPAVFalconRadioChatterMessage@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 119  : 	int	filter;
; 120  : 
; 121  : 	*pp_radioMsgs								= new FalconRadioChatterMessage( p_sender->GetCampaignObject()->Id(), FalconLocalGame );	// Create new message

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN18@AiCreateRa
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN16@AiCreateRa
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN17@AiCreateRa
$LN16@AiCreateRa:
	mov	DWORD PTR tv87[ebp], 0
$LN17@AiCreateRa:
	push	1
	mov	ecx, DWORD PTR tv87[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv132[ebp], eax
	jmp	SHORT $LN19@AiCreateRa
$LN18@AiCreateRa:
	mov	DWORD PTR tv132[ebp], 0
$LN19@AiCreateRa:
	mov	eax, DWORD PTR tv132[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx], edx

; 122  : 
; 123  : 
; 124  : 	(*pp_radioMsgs)->dataBlock.voice_id	= ((FlightClass*) p_sender->GetCampaignObject())->GetPilotVoiceID(p_sender->GetCampaignObject()->GetComponentIndex(p_sender));

	mov	eax, DWORD PTR _p_sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentIndex@CampBaseClass@@QAEHPAVVuEntity@@@Z ; CampBaseClass::GetComponentIndex
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetPilotVoiceID@FlightClass@@QAEEH@Z	; FlightClass::GetPilotVoiceID
	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx+61], al

; 125  : 	(*pp_radioMsgs)->dataBlock.from		= p_sender->Id();

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_sender$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 126  : 
; 127  : 
; 128  : 	if(p_sender == SimDriver.GetPlayerEntity()) {

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	cmp	DWORD PTR _p_sender$[ebp], eax
	jne	$LN13@AiCreateRa

; 129  : 		if(OTWDriver.pCockpitManager->mpIcp->GetICPTertiaryMode() == COMM1_MODE) {

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	ecx, DWORD PTR [ecx+688]
	call	?GetICPTertiaryMode@ICPClass@@QAEJXZ	; ICPClass::GetICPTertiaryMode
	cmp	eax, 6
	jne	SHORT $LN12@AiCreateRa

; 130  : 			filter = VM->GetRadioFreq(0);

	push	0
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?GetRadioFreq@VoiceManager@@QAEHH@Z	; VoiceManager::GetRadioFreq
	mov	DWORD PTR _filter$[ebp], eax

; 131  : 		}
; 132  : 		else {

	jmp	SHORT $LN11@AiCreateRa
$LN12@AiCreateRa:

; 133  : 			filter = VM->GetRadioFreq(1);

	push	1
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?GetRadioFreq@VoiceManager@@QAEHH@Z	; VoiceManager::GetRadioFreq
	mov	DWORD PTR _filter$[ebp], eax
$LN11@AiCreateRa:

; 134  : 		}
; 135  : 
; 136  : 		switch(filter) {

	mov	edx, DWORD PTR _filter$[ebp]
	mov	DWORD PTR tv179[ebp], edx
	cmp	DWORD PTR tv179[ebp], 15		; 0000000fH
	ja	SHORT $LN9@AiCreateRa
	mov	eax, DWORD PTR tv179[ebp]
	movzx	ecx, BYTE PTR $LN21@AiCreateRa[eax]
	jmp	DWORD PTR $LN23@AiCreateRa[ecx*4]
$LN8@AiCreateRa:

; 137  : 			case rcfOff:
; 138  : 				(*pp_radioMsgs)->dataBlock.to	= MESSAGE_FOR_AIRCRAFT;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	BYTE PTR [eax+60], 4

; 139  : 				break;

	jmp	SHORT $LN9@AiCreateRa
$LN7@AiCreateRa:

; 140  : 
; 141  : 			case rcfFlight5:
; 142  : 			case rcfFlight1:
; 143  : 			case rcfFlight2:
; 144  : 			case rcfFlight3:
; 145  : 			case rcfFlight4:
; 146  : 				(*pp_radioMsgs)->dataBlock.to	= MESSAGE_FOR_FLIGHT;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx+60], 3

; 147  : 				break;

	jmp	SHORT $LN9@AiCreateRa
$LN6@AiCreateRa:

; 148  : 
; 149  : 			case rcfPackage5:
; 150  : 			case rcfPackage1:
; 151  : 			case rcfPackage2:
; 152  : 			case rcfPackage3:
; 153  : 			case rcfPackage4:
; 154  : 			
; 155  : 			case rcfFromPackage:
; 156  : 				(*pp_radioMsgs)->dataBlock.to	= MESSAGE_FOR_PACKAGE;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx+60], 2

; 157  : 				break;

	jmp	SHORT $LN9@AiCreateRa
$LN5@AiCreateRa:

; 158  : 
; 159  : 			case rcfProx:
; 160  : 				(*pp_radioMsgs)->dataBlock.to	= MESSAGE_FOR_PACKAGE;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	BYTE PTR [eax+60], 2

; 161  : 				break;

	jmp	SHORT $LN9@AiCreateRa
$LN4@AiCreateRa:

; 162  : 
; 163  : 			case rcfTeam:
; 164  : 				(*pp_radioMsgs)->dataBlock.to	= MESSAGE_FOR_TEAM;

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx+60], 1

; 165  : 				break;

	jmp	SHORT $LN9@AiCreateRa
$LN3@AiCreateRa:

; 166  : 
; 167  : 			case rcfAll:
; 168  : 				(*pp_radioMsgs)->dataBlock.to	= MESSAGE_FOR_WORLD;

	mov	eax, DWORD PTR _pp_radioMsgs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx+60], 0

; 169  : 				break;

	jmp	SHORT $LN9@AiCreateRa
$LN2@AiCreateRa:

; 170  : 
; 171  : 			case rcfTower:
; 172  : 				(*pp_radioMsgs)->dataBlock.to	= MESSAGE_FOR_TEAM;

	mov	edx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	BYTE PTR [eax+60], 1
$LN9@AiCreateRa:

; 173  : 				break;
; 174  : 		} 
; 175  : 	}
; 176  : 	else {

	jmp	SHORT $LN14@AiCreateRa
$LN13@AiCreateRa:

; 177  : 		(*pp_radioMsgs)->dataBlock.to		= MESSAGE_FOR_FLIGHT;	// Digi's send message to the flight

	mov	ecx, DWORD PTR _pp_radioMsgs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx+60], 3
$LN14@AiCreateRa:

; 178  : 	}	
; 179  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN23@AiCreateRa:
	DD	$LN8@AiCreateRa
	DD	$LN7@AiCreateRa
	DD	$LN6@AiCreateRa
	DD	$LN5@AiCreateRa
	DD	$LN4@AiCreateRa
	DD	$LN3@AiCreateRa
	DD	$LN2@AiCreateRa
$LN21@AiCreateRa:
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AiCreateRadioMsgs@@YAXPAVSimBaseClass@@PAPAVFalconRadioChatterMessage@@@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AiCreateRadioMsgs@@YAXPAVSimBaseClass@@PAPAVFalconRadioChatterMessage@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AiCreateRadioMsgs@@YAXPAVSimBaseClass@@PAPAVFalconRadioChatterMessage@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AiCreateRadioMsgs@@YAXPAVSimBaseClass@@PAPAVFalconRadioChatterMessage@@@Z ENDP ; AiCreateRadioMsgs
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\wingradio.cpp
_TEXT	SEGMENT
_flightIdx$ = 8						; size = 4
_extent$ = 12						; size = 4
?AiIsFullResponse@@YAHHH@Z PROC				; AiIsFullResponse

; 263  : {

	push	ebp
	mov	ebp, esp

; 264  : 
; 265  : 
; 266  : 	// If I'm the leader's wingman
; 267  : 	if(flightIdx == AiFirstWing) {

	cmp	DWORD PTR _flightIdx$[ebp], 1
	jne	SHORT $LN12@AiIsFullRe

; 268  : 
; 269  : 		if(extent == AiFlight) {

	cmp	DWORD PTR _extent$[ebp], 2
	jne	SHORT $LN11@AiIsFullRe

; 270  : 			
; 271  : 			// If the command is intended for the whole flight
; 272  : 			return TRUE;

	mov	eax, 1
	jmp	SHORT $LN13@AiIsFullRe
	jmp	SHORT $LN10@AiIsFullRe
$LN11@AiIsFullRe:

; 273  : 		}
; 274  : 		else if(extent == AiWingman) {

	cmp	DWORD PTR _extent$[ebp], 0
	jne	SHORT $LN10@AiIsFullRe

; 275  : 
; 276  : 			// If the command is intended for just me
; 277  : 			return TRUE;

	mov	eax, 1
	jmp	SHORT $LN13@AiIsFullRe
$LN10@AiIsFullRe:

; 278  : 		}
; 279  : 	}

	jmp	SHORT $LN8@AiIsFullRe
$LN12@AiIsFullRe:

; 280  : 	else if(flightIdx == AiElementLead) {

	cmp	DWORD PTR _flightIdx$[ebp], 2
	jne	SHORT $LN7@AiIsFullRe

; 281  : 		// If I'm the element lead
; 282  : 
; 283  : 		if(extent == AiElement) {

	cmp	DWORD PTR _extent$[ebp], 1
	jne	SHORT $LN6@AiIsFullRe

; 284  : 
; 285  : 			// If the command was intended for the element
; 286  : 			return TRUE;

	mov	eax, 1
	jmp	SHORT $LN13@AiIsFullRe

; 287  : 		}
; 288  : 		else {

	jmp	SHORT $LN5@AiIsFullRe
$LN6@AiIsFullRe:

; 289  : 
; 290  : 			// Otherwise just respond with short call
; 291  : 			return FALSE;

	xor	eax, eax
	jmp	SHORT $LN13@AiIsFullRe
$LN5@AiIsFullRe:

; 292  : 		}

	jmp	SHORT $LN8@AiIsFullRe
$LN7@AiIsFullRe:

; 293  : 	}
; 294  : 	else if(flightIdx == AiSecondWing) {

	cmp	DWORD PTR _flightIdx$[ebp], 3
	jne	SHORT $LN8@AiIsFullRe

; 295  : 		
; 296  : 		if(extent == AiWingman) {

	cmp	DWORD PTR _extent$[ebp], 0
	jne	SHORT $LN2@AiIsFullRe

; 297  : 			// If the command is intended for just me
; 298  : 			return TRUE;

	mov	eax, 1
	jmp	SHORT $LN13@AiIsFullRe

; 299  : 		}
; 300  : 		else {

	jmp	SHORT $LN8@AiIsFullRe
$LN2@AiIsFullRe:

; 301  : 			// If I'm the element's wingman
; 302  : 			return FALSE;

	xor	eax, eax
	jmp	SHORT $LN13@AiIsFullRe
$LN8@AiIsFullRe:

; 303  : 		}
; 304  : 	}
; 305  : 
; 306  : 	return FALSE;

	xor	eax, eax
$LN13@AiIsFullRe:

; 307  : }

	pop	ebp
	ret	0
?AiIsFullResponse@@YAHHH@Z ENDP				; AiIsFullResponse
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ PROC ; SimBaseClass::GetCampaignObject, COMDAT
; _this$ = ecx

; 212  : 	CampBaseClass *GetCampaignObject (void) { return campaignObject.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ENDP ; SimBaseClass::GetCampaignObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ PROC ; VuBin<CampBaseClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ENDP ; VuBin<CampBaseClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Type@VuEntity@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@VuEntity@@QBEGXZ PROC				; VuEntity::Type, COMDAT
; _this$ = ecx

; 154  : 	ushort Type() const       { return share_.entityType_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@VuEntity@@QBEGXZ ENDP				; VuEntity::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??9VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??9VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator!=, COMDAT
; _this$ = ecx

; 111  : 	bool operator != (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 		return (
; 113  : 			num_ == rhs.num_ ? 
; 114  : 			(creator_ == rhs.creator_ ? false : true) : 
; 115  : 			true
; 116  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 1
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 1
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 117  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??9VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
END
