; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\DIGI\BvrEngage.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
_DATA	SEGMENT
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	ORG $+4
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_DATA	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
_NEAR_CLIP DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?Type@VuEntity@@QBEGXZ				; VuEntity::Type
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?XDelta@VuEntity@@QBEMXZ			; VuEntity::XDelta
PUBLIC	?YDelta@VuEntity@@QBEMXZ			; VuEntity::YDelta
PUBLIC	?Yaw@VuEntity@@QBEMXZ				; VuEntity::Yaw
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	?IsSim@FalconEntity@@QAEHXZ			; FalconEntity::IsSim
PUBLIC	?IsSetFalcFlag@FalconEntity@@QAEHH@Z		; FalconEntity::IsSetFalcFlag
PUBLIC	?IsPlayer@FalconEntity@@QAEHXZ			; FalconEntity::IsPlayer
PUBLIC	?mlSinCos@@YAXPAUmlTrig@@M@Z			; mlSinCos
PUBLIC	?SkillLevel@BaseBrain@@QAEHXZ			; BaseBrain::SkillLevel
PUBLIC	?ChoiceProfile@DigitalBrain@@IAEXXZ		; DigitalBrain::ChoiceProfile
PUBLIC	?DoProfile@DigitalBrain@@IAEXXZ			; DigitalBrain::DoProfile
PUBLIC	?level1a@DigitalBrain@@IAEXXZ			; DigitalBrain::level1a
PUBLIC	?level1b@DigitalBrain@@IAEXXZ			; DigitalBrain::level1b
PUBLIC	?level1c@DigitalBrain@@IAEXXZ			; DigitalBrain::level1c
PUBLIC	?level2a@DigitalBrain@@IAEXXZ			; DigitalBrain::level2a
PUBLIC	?level2b@DigitalBrain@@IAEXXZ			; DigitalBrain::level2b
PUBLIC	?level2c@DigitalBrain@@IAEXXZ			; DigitalBrain::level2c
PUBLIC	?level3a@DigitalBrain@@IAEXXZ			; DigitalBrain::level3a
PUBLIC	?level3b@DigitalBrain@@IAEXXZ			; DigitalBrain::level3b
PUBLIC	?level3c@DigitalBrain@@IAEXXZ			; DigitalBrain::level3c
PUBLIC	?beamdeploy@DigitalBrain@@IAEXXZ		; DigitalBrain::beamdeploy
PUBLIC	?beambeam@DigitalBrain@@IAEXXZ			; DigitalBrain::beambeam
PUBLIC	?wall@DigitalBrain@@IAEXXZ			; DigitalBrain::wall
PUBLIC	?grinder@DigitalBrain@@IAEXXZ			; DigitalBrain::grinder
PUBLIC	?wideazimuth@DigitalBrain@@IAEXXZ		; DigitalBrain::wideazimuth
PUBLIC	?shortazimuth@DigitalBrain@@IAEXXZ		; DigitalBrain::shortazimuth
PUBLIC	?wideLT@DigitalBrain@@IAEXXZ			; DigitalBrain::wideLT
PUBLIC	?ShortLT@DigitalBrain@@IAEXXZ			; DigitalBrain::ShortLT
PUBLIC	?Defensive@DigitalBrain@@IAEXXZ			; DigitalBrain::Defensive
PUBLIC	?Sweep@DigitalBrain@@IAEXXZ			; DigitalBrain::Sweep
PUBLIC	?StickandThrottle@DigitalBrain@@IAEXMM@Z	; DigitalBrain::StickandThrottle
PUBLIC	?BaseLineIntercept@DigitalBrain@@IAEXXZ		; DigitalBrain::BaseLineIntercept
PUBLIC	?BeamManeuver@DigitalBrain@@IAEHHH@Z		; DigitalBrain::BeamManeuver
PUBLIC	?CrankManeuver@DigitalBrain@@IAEXHH@Z		; DigitalBrain::CrankManeuver
PUBLIC	?DragManeuver@DigitalBrain@@IAEXXZ		; DigitalBrain::DragManeuver
PUBLIC	?chooseRadarMode@DigitalBrain@@IAEXXZ		; DigitalBrain::chooseRadarMode
PUBLIC	?BvrEngageCheck@DigitalBrain@@IAEXXZ		; DigitalBrain::BvrEngageCheck
PUBLIC	?BvrChooseTactic@DigitalBrain@@IAEXXZ		; DigitalBrain::BvrChooseTactic
PUBLIC	?BvrEngage@DigitalBrain@@IAEXXZ			; DigitalBrain::BvrEngage
PUBLIC	?IsSupportignmissile@DigitalBrain@@IAEHXZ	; DigitalBrain::IsSupportignmissile
PUBLIC	?WhoIsSpiked@DigitalBrain@@IAEHXZ		; DigitalBrain::WhoIsSpiked
PUBLIC	?WhoIsHotnosed@DigitalBrain@@IAEHXZ		; DigitalBrain::WhoIsHotnosed
PUBLIC	?HowManySpiked@DigitalBrain@@IAEHXZ		; DigitalBrain::HowManySpiked
PUBLIC	?HowManyHotnosed@DigitalBrain@@IAEHXZ		; DigitalBrain::HowManyHotnosed
PUBLIC	?HowManyTargetet@DigitalBrain@@IAEHXZ		; DigitalBrain::HowManyTargetet
PUBLIC	?IsSplitup@DigitalBrain@@IAEHXZ			; DigitalBrain::IsSplitup
PUBLIC	?CalculateMAR@DigitalBrain@@IAEXXZ		; DigitalBrain::CalculateMAR
PUBLIC	?AiFlyBvrFOrmation@DigitalBrain@@IAEXXZ		; DigitalBrain::AiFlyBvrFOrmation
PUBLIC	?SetTrackPoint@DigitalBrain@@QAEXMM@Z		; DigitalBrain::SetTrackPoint
PUBLIC	?SetTrackPoint@DigitalBrain@@QAEXMMM@Z		; DigitalBrain::SetTrackPoint
PUBLIC	?IsSetATC@DigitalBrain@@QAEHH@Z			; DigitalBrain::IsSetATC
PUBLIC	?Type@SensorClass@@QAE?AW4SensorType@1@XZ	; SensorClass::Type
PUBLIC	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
PUBLIC	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ	; SimObjectType::BaseData
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
PUBLIC	?GetSPType@SimBaseClass@@QBEEXZ			; SimBaseClass::GetSPType
PUBLIC	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
PUBLIC	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
PUBLIC	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ	; AircraftClass::DBrain
PUBLIC	?MaxVcas@AirframeClass@@QAEMXZ			; AirframeClass::MaxVcas
PUBLIC	?GetSimpleMode@AirframeClass@@QAEHXZ		; AirframeClass::GetSimpleMode
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?DidEmergencyJettison@SMSClass@@QAEHXZ		; SMSClass::DidEmergencyJettison
PUBLIC	?LabelColor@DrawableBSP@@QAEKXZ			; DrawableBSP::LabelColor
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_07DHNLGGDE@BvrDrag?$AA@			; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_08LFFOJGII@BvrCrank?$AA@			; `string'
PUBLIC	??_C@_0L@CAIAJNPK@BvrCrankHi?$AA@		; `string'
PUBLIC	??_C@_0L@HBNDJCKA@BvrCrankLo?$AA@		; `string'
PUBLIC	??_C@_0BA@EGDMFLHH@BvrCrankRightHi?$AA@		; `string'
PUBLIC	??_C@_0BA@BHGPFECN@BvrCrankRightLo?$AA@		; `string'
PUBLIC	??_C@_0P@KHOJDIDL@BvrCrankLeftHi?$AA@		; `string'
PUBLIC	??_C@_0P@PGLKDHGB@BvrCrankLeftLo?$AA@		; `string'
PUBLIC	??_C@_07IPLKBEDI@BvrBeam?$AA@			; `string'
PUBLIC	??_C@_0N@EDFGJMOL@BvrBeamright?$AA@		; `string'
PUBLIC	??_C@_0M@BKKOJFHM@BvrBeamleft?$AA@		; `string'
PUBLIC	??_C@_0BF@KLDKKHEJ@BvrBaseLineIntercept?$AA@	; `string'
PUBLIC	??_C@_05NKIECHCH@Grind?$AA@			; `string'
PUBLIC	??_C@_0BM@PNIOAEMM@BvrPince?4?4BaseLineIntercept?$AA@ ; `string'
PUBLIC	??_C@_0BF@GGFONPJB@BvrBaselineIntercept?$AA@	; `string'
PUBLIC	??_C@_0L@HMAENGNN@BvrPursuit?$AA@		; `string'
PUBLIC	??_C@_0BD@DKIDBIOD@BVRfollowwaypoints?$AA@	; `string'
PUBLIC	??_C@_0P@BEJCPJGI@BvrNoIntercept?$AA@		; `string'
PUBLIC	??_C@_0BA@DBPFIMLD@followwaypoints?$AA@		; `string'
PUBLIC	??_C@_0BC@PGCHBJIO@AiFlyBvrFOrmation?$AA@	; `string'
PUBLIC	??_C@_0N@LEMPFAGH@AiFollowLead?$AA@		; `string'
PUBLIC	??_C@_04CGFJFPFD@none?$AA@			; `string'
PUBLIC	??_C@_05GPCGBJOI@lvl1a?$AA@			; `string'
PUBLIC	??_C@_05EEALEKCL@lvl1b?$AA@			; `string'
PUBLIC	??_C@_05FNBAHLGK@lvl1c?$AA@			; `string'
PUBLIC	??_C@_05GNGAKHLB@lvl2a?$AA@			; `string'
PUBLIC	??_C@_05EGENPEHC@lvl2b?$AA@			; `string'
PUBLIC	??_C@_05FPFGMFDD@lvl2c?$AA@			; `string'
PUBLIC	??_C@_05GMKCMNIG@lvl3a?$AA@			; `string'
PUBLIC	??_C@_05EHIPJOEF@lvl3b?$AA@			; `string'
PUBLIC	??_C@_05FOJEKPAE@lvl3c?$AA@			; `string'
PUBLIC	??_C@_0L@LJGMJOJK@beamdeploy?$AA@		; `string'
PUBLIC	??_C@_04EPJBJPAD@beam?$AA@			; `string'
PUBLIC	??_C@_04HJDALCLE@wall?$AA@			; `string'
PUBLIC	??_C@_08LMPHMIF@chainsaw?$AA@			; `string'
PUBLIC	??_C@_07NMCGJLAN@wide?5az?$AA@			; `string'
PUBLIC	??_C@_08NIGHOGND@short?5az?$AA@			; `string'
PUBLIC	??_C@_07HOOOCPND@long?5LT?$AA@			; `string'
PUBLIC	??_C@_07DJOBGBHI@shortLT?$AA@			; `string'
PUBLIC	??_C@_09JPNDPKKK@defensive?$AA@			; `string'
PUBLIC	??_C@_06ONHFPILM@PSweep?$AA@			; `string'
PUBLIC	??_C@_04JEMGJJJG@?5STT?$AA@			; `string'
PUBLIC	??_C@_04BFCLFBBF@?5SAM?$AA@			; `string'
PUBLIC	??_C@_04EEBGIJLB@?5TWS?$AA@			; `string'
PUBLIC	??_C@_04GBHNNGGN@?5RWS?$AA@			; `string'
PUBLIC	??_C@_06KCCCDHEL@?$CFs?5OFF?$AA@		; `string'
PUBLIC	??_C@_08NENHJECG@?5UNKNOWN?$AA@			; `string'
PUBLIC	??_C@_05BCMHLKAB@?5SIMP?$AA@			; `string'
PUBLIC	??_C@_05FHEMHCFP@?5COMP?$AA@			; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3c8efa34
PUBLIC	__real@3f060a91
PUBLIC	__real@3f1c61a9
PUBLIC	__real@3f32b8c1
PUBLIC	__real@3f490fd9
PUBLIC	__real@3f5f66f1
PUBLIC	__real@3f800000
PUBLIC	__real@3f866666
PUBLIC	__real@3f99999a
PUBLIC	__real@3fa66666
PUBLIC	__real@3fb2b8c1
PUBLIC	__real@3fc90fd9
PUBLIC	__real@3fdf66f1
PUBLIC	__real@3ff5be09
PUBLIC	__real@40000000
PUBLIC	__real@4032b8c1
PUBLIC	__real@40400000
PUBLIC	__real@40490fdb
PUBLIC	__real@40800000
PUBLIC	__real@4097700000000000
PUBLIC	__real@40c00000
PUBLIC	__real@40c90fdb
PUBLIC	__real@41200000
PUBLIC	__real@41a00000
PUBLIC	__real@42480000
PUBLIC	__real@42652ee1
PUBLIC	__real@42b40000
PUBLIC	__real@42c80000
PUBLIC	__real@43a8c89a
PUBLIC	__real@44480000
PUBLIC	__real@44bb8000
PUBLIC	__real@44fa0000
PUBLIC	__real@457a0000
PUBLIC	__real@45bde1b0
PUBLIC	__real@461c4000
PUBLIC	__real@463de1b0
PUBLIC	__real@46bde1b0
PUBLIC	__real@46ea6000
PUBLIC	__real@470e6944
PUBLIC	__real@473de1b0
PUBLIC	__real@476d5a1c
PUBLIC	__real@47bde1b0
PUBLIC	__real@47ed5a1c
PUBLIC	__real@48145852
PUBLIC	__real@48320395
PUBLIC	__real@486d5a1c
PUBLIC	__real@488582b0
PUBLIC	__real@bf800000
PUBLIC	__real@bfb2b8c1
PUBLIC	__real@bfdf66f1
PUBLIC	__real@c0000000
PUBLIC	__real@c0400000
PUBLIC	__real@c0490fdb
PUBLIC	__real@c2c80000
PUBLIC	__real@c4480000
PUBLIC	__real@c47a0000
PUBLIC	__real@c57a0000
PUBLIC	__real@c61c4000
PUBLIC	__real@c7435000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_sprintf:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_sin:PROC
EXTRN	_rand:PROC
EXTRN	_memcpy:PROC
EXTRN	_strcat:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z:PROC	; VuDeReferenceEntity
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?ClearTarget@BaseBrain@@QAEXXZ:PROC		; BaseBrain::ClearTarget
EXTRN	?TargetAz@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z:PROC ; TargetAz
EXTRN	?GetLocation@WayPointClass@@QBEXPAM00@Z:PROC	; WayPointClass::GetLocation
EXTRN	?AddMode@DigitalBrain@@IAEXW4DigiMode@1@@Z:PROC	; DigitalBrain::AddMode
EXTRN	?MachHold@DigitalBrain@@IAEHMMH@Z:PROC		; DigitalBrain::MachHold
EXTRN	?FollowWaypoints@DigitalBrain@@IAEXXZ:PROC	; DigitalBrain::FollowWaypoints
EXTRN	?SelectGroundWeapon@DigitalBrain@@IAEXXZ:PROC	; DigitalBrain::SelectGroundWeapon
EXTRN	?SimpleTrackDistance@DigitalBrain@@IAEMMM@Z:PROC ; DigitalBrain::SimpleTrackDistance
EXTRN	?CalculateRelativePos@DigitalBrain@@IAEXPAM00000@Z:PROC ; DigitalBrain::CalculateRelativePos
EXTRN	?AutoTrack@DigitalBrain@@IAEMM@Z:PROC		; DigitalBrain::AutoTrack
EXTRN	?AiCheckInPositionCall@DigitalBrain@@AAEXMMM@Z:PROC ; DigitalBrain::AiCheckInPositionCall
EXTRN	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z:PROC ; FindSensor
EXTRN	?SetSimpleMode@AirframeClass@@QAEXH@Z:PROC	; AirframeClass::SetSimpleMode
EXTRN	?GetOptKias@AirframeClass@@QAEMH@Z:PROC		; AirframeClass::GetOptKias
EXTRN	?AiMakeRadioResponse@@YAXPAVSimBaseClass@@HPAF@Z:PROC ; AiMakeRadioResponse
EXTRN	?GetComponentIndex@CampBaseClass@@QAEHPAVVuEntity@@@Z:PROC ; CampBaseClass::GetComponentIndex
EXTRN	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z:PROC ; CampBaseClass::GetComponentEntity
EXTRN	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z:PROC ; CampBaseClass::GetComponentNumber
EXTRN	?NumberOfComponents@CampBaseClass@@QAEHXZ:PROC	; CampBaseClass::NumberOfComponents
EXTRN	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z:PROC ; GetVehicleClassData
EXTRN	?GetTotalVehicles@UnitClass@@QAEHXZ:PROC	; UnitClass::GetTotalVehicles
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z:PROC ; OTWDriverClass::GetGroundLevel
EXTRN	?GetApproxGroundLevel@OTWDriverClass@@QAEMMM@Z:PROC ; OTWDriverClass::GetApproxGroundLevel
EXTRN	?GetAreaFloorAndCeiling@OTWDriverClass@@QAEXPAM0@Z:PROC ; OTWDriverClass::GetAreaFloorAndCeiling
EXTRN	?GetMEA@TMap@@QAEMMM@Z:PROC			; TMap::GetMEA
EXTRN	?EmergencyJettison@SMSClass@@QAEXXZ:PROC	; SMSClass::EmergencyJettison
EXTRN	?AGJettison@SMSClass@@QAEXXZ:PROC		; SMSClass::AGJettison
EXTRN	?SpikeCheck@@YAPAVFalconEntity@@PAVAircraftClass@@PAV1@PAH@Z:PROC ; SpikeCheck
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?SimLibMajorFrameTime@@3MA:DWORD		; SimLibMajorFrameTime
EXTRN	?SimLibElapsedTime@@3KA:DWORD			; SimLibElapsedTime
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?acFormationData@@3PAVACFormationData@@A:DWORD	; acFormationData
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?radarDatFileTable@@3PAURadarDataSet@@A:DWORD	; radarDatFileTable
EXTRN	?TheMap@@3VTMap@@A:BYTE				; TheMap
EXTRN	?g_nShowDebugLabels@@3HA:DWORD			; g_nShowDebugLabels
EXTRN	?g_bUseAggresiveIncompleteA2G@@3_NA:BYTE	; g_bUseAggresiveIncompleteA2G
EXTRN	?g_fHotNoseAngle@@3MA:DWORD			; g_fHotNoseAngle
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?heighttimer@?P@??BeamManeuver@DigitalBrain@@IAEHHH@Z@4KA
_BSS	SEGMENT
?heighttimer@?P@??BeamManeuver@DigitalBrain@@IAEHHH@Z@4KA DD 01H DUP (?) ; `DigitalBrain::BeamManeuver'::`15'::heighttimer
_BSS	ENDS
;	COMDAT ?chaffttimer@?BF@??BeamManeuver@DigitalBrain@@IAEHHH@Z@4KA
_BSS	SEGMENT
?chaffttimer@?BF@??BeamManeuver@DigitalBrain@@IAEHHH@Z@4KA DD 01H DUP (?) ; `DigitalBrain::BeamManeuver'::`21'::chaffttimer
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@c7435000
CONST	SEGMENT
__real@c7435000 DD 0c7435000r			; -50000
CONST	ENDS
;	COMDAT __real@c61c4000
CONST	SEGMENT
__real@c61c4000 DD 0c61c4000r			; -10000
CONST	ENDS
;	COMDAT __real@c57a0000
CONST	SEGMENT
__real@c57a0000 DD 0c57a0000r			; -4000
CONST	ENDS
;	COMDAT __real@c47a0000
CONST	SEGMENT
__real@c47a0000 DD 0c47a0000r			; -1000
CONST	ENDS
;	COMDAT __real@c4480000
CONST	SEGMENT
__real@c4480000 DD 0c4480000r			; -800
CONST	ENDS
;	COMDAT __real@c2c80000
CONST	SEGMENT
__real@c2c80000 DD 0c2c80000r			; -100
CONST	ENDS
;	COMDAT __real@c0490fdb
CONST	SEGMENT
__real@c0490fdb DD 0c0490fdbr			; -3.14159
CONST	ENDS
;	COMDAT __real@c0400000
CONST	SEGMENT
__real@c0400000 DD 0c0400000r			; -3
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bfdf66f1
CONST	SEGMENT
__real@bfdf66f1 DD 0bfdf66f1r			; -1.74533
CONST	ENDS
;	COMDAT __real@bfb2b8c1
CONST	SEGMENT
__real@bfb2b8c1 DD 0bfb2b8c1r			; -1.39626
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@488582b0
CONST	SEGMENT
__real@488582b0 DD 0488582b0r			; 273430
CONST	ENDS
;	COMDAT __real@486d5a1c
CONST	SEGMENT
__real@486d5a1c DD 0486d5a1cr			; 243048
CONST	ENDS
;	COMDAT __real@48320395
CONST	SEGMENT
__real@48320395 DD 048320395r			; 182286
CONST	ENDS
;	COMDAT __real@48145852
CONST	SEGMENT
__real@48145852 DD 048145852r			; 151905
CONST	ENDS
;	COMDAT __real@47ed5a1c
CONST	SEGMENT
__real@47ed5a1c DD 047ed5a1cr			; 121524
CONST	ENDS
;	COMDAT __real@47bde1b0
CONST	SEGMENT
__real@47bde1b0 DD 047bde1b0r			; 97219.4
CONST	ENDS
;	COMDAT __real@476d5a1c
CONST	SEGMENT
__real@476d5a1c DD 0476d5a1cr			; 60762.1
CONST	ENDS
;	COMDAT __real@473de1b0
CONST	SEGMENT
__real@473de1b0 DD 0473de1b0r			; 48609.7
CONST	ENDS
;	COMDAT __real@470e6944
CONST	SEGMENT
__real@470e6944 DD 0470e6944r			; 36457.3
CONST	ENDS
;	COMDAT __real@46ea6000
CONST	SEGMENT
__real@46ea6000 DD 046ea6000r			; 30000
CONST	ENDS
;	COMDAT __real@46bde1b0
CONST	SEGMENT
__real@46bde1b0 DD 046bde1b0r			; 24304.8
CONST	ENDS
;	COMDAT __real@463de1b0
CONST	SEGMENT
__real@463de1b0 DD 0463de1b0r			; 12152.4
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@45bde1b0
CONST	SEGMENT
__real@45bde1b0 DD 045bde1b0r			; 6076.21
CONST	ENDS
;	COMDAT __real@457a0000
CONST	SEGMENT
__real@457a0000 DD 0457a0000r			; 4000
CONST	ENDS
;	COMDAT __real@44fa0000
CONST	SEGMENT
__real@44fa0000 DD 044fa0000r			; 2000
CONST	ENDS
;	COMDAT __real@44bb8000
CONST	SEGMENT
__real@44bb8000 DD 044bb8000r			; 1500
CONST	ENDS
;	COMDAT __real@44480000
CONST	SEGMENT
__real@44480000 DD 044480000r			; 800
CONST	ENDS
;	COMDAT __real@43a8c89a
CONST	SEGMENT
__real@43a8c89a DD 043a8c89ar			; 337.567
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42b40000
CONST	SEGMENT
__real@42b40000 DD 042b40000r			; 90
CONST	ENDS
;	COMDAT __real@42652ee1
CONST	SEGMENT
__real@42652ee1 DD 042652ee1r			; 57.2958
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@4097700000000000
CONST	SEGMENT
__real@4097700000000000 DQ 04097700000000000r	; 1500
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@4032b8c1
CONST	SEGMENT
__real@4032b8c1 DD 04032b8c1r			; 2.79253
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff5be09
CONST	SEGMENT
__real@3ff5be09 DD 03ff5be09r			; 1.91986
CONST	ENDS
;	COMDAT __real@3fdf66f1
CONST	SEGMENT
__real@3fdf66f1 DD 03fdf66f1r			; 1.74533
CONST	ENDS
;	COMDAT __real@3fc90fd9
CONST	SEGMENT
__real@3fc90fd9 DD 03fc90fd9r			; 1.5708
CONST	ENDS
;	COMDAT __real@3fb2b8c1
CONST	SEGMENT
__real@3fb2b8c1 DD 03fb2b8c1r			; 1.39626
CONST	ENDS
;	COMDAT __real@3fa66666
CONST	SEGMENT
__real@3fa66666 DD 03fa66666r			; 1.3
CONST	ENDS
;	COMDAT __real@3f99999a
CONST	SEGMENT
__real@3f99999a DD 03f99999ar			; 1.2
CONST	ENDS
;	COMDAT __real@3f866666
CONST	SEGMENT
__real@3f866666 DD 03f866666r			; 1.05
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f5f66f1
CONST	SEGMENT
__real@3f5f66f1 DD 03f5f66f1r			; 0.872665
CONST	ENDS
;	COMDAT __real@3f490fd9
CONST	SEGMENT
__real@3f490fd9 DD 03f490fd9r			; 0.785398
CONST	ENDS
;	COMDAT __real@3f32b8c1
CONST	SEGMENT
__real@3f32b8c1 DD 03f32b8c1r			; 0.698132
CONST	ENDS
;	COMDAT __real@3f1c61a9
CONST	SEGMENT
__real@3f1c61a9 DD 03f1c61a9r			; 0.610865
CONST	ENDS
;	COMDAT __real@3f060a91
CONST	SEGMENT
__real@3f060a91 DD 03f060a91r			; 0.523599
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05FHEMHCFP@?5COMP?$AA@
CONST	SEGMENT
??_C@_05FHEMHCFP@?5COMP?$AA@ DB ' COMP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BCMHLKAB@?5SIMP?$AA@
CONST	SEGMENT
??_C@_05BCMHLKAB@?5SIMP?$AA@ DB ' SIMP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NENHJECG@?5UNKNOWN?$AA@
CONST	SEGMENT
??_C@_08NENHJECG@?5UNKNOWN?$AA@ DB ' UNKNOWN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06KCCCDHEL@?$CFs?5OFF?$AA@
CONST	SEGMENT
??_C@_06KCCCDHEL@?$CFs?5OFF?$AA@ DB '%s OFF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04GBHNNGGN@?5RWS?$AA@
CONST	SEGMENT
??_C@_04GBHNNGGN@?5RWS?$AA@ DB ' RWS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EEBGIJLB@?5TWS?$AA@
CONST	SEGMENT
??_C@_04EEBGIJLB@?5TWS?$AA@ DB ' TWS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BFCLFBBF@?5SAM?$AA@
CONST	SEGMENT
??_C@_04BFCLFBBF@?5SAM?$AA@ DB ' SAM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JEMGJJJG@?5STT?$AA@
CONST	SEGMENT
??_C@_04JEMGJJJG@?5STT?$AA@ DB ' STT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ONHFPILM@PSweep?$AA@
CONST	SEGMENT
??_C@_06ONHFPILM@PSweep?$AA@ DB 'PSweep', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JPNDPKKK@defensive?$AA@
CONST	SEGMENT
??_C@_09JPNDPKKK@defensive?$AA@ DB 'defensive', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DJOBGBHI@shortLT?$AA@
CONST	SEGMENT
??_C@_07DJOBGBHI@shortLT?$AA@ DB 'shortLT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HOOOCPND@long?5LT?$AA@
CONST	SEGMENT
??_C@_07HOOOCPND@long?5LT?$AA@ DB 'long LT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NIGHOGND@short?5az?$AA@
CONST	SEGMENT
??_C@_08NIGHOGND@short?5az?$AA@ DB 'short az', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07NMCGJLAN@wide?5az?$AA@
CONST	SEGMENT
??_C@_07NMCGJLAN@wide?5az?$AA@ DB 'wide az', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LMPHMIF@chainsaw?$AA@
CONST	SEGMENT
??_C@_08LMPHMIF@chainsaw?$AA@ DB 'chainsaw', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HJDALCLE@wall?$AA@
CONST	SEGMENT
??_C@_04HJDALCLE@wall?$AA@ DB 'wall', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EPJBJPAD@beam?$AA@
CONST	SEGMENT
??_C@_04EPJBJPAD@beam?$AA@ DB 'beam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LJGMJOJK@beamdeploy?$AA@
CONST	SEGMENT
??_C@_0L@LJGMJOJK@beamdeploy?$AA@ DB 'beamdeploy', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05FOJEKPAE@lvl3c?$AA@
CONST	SEGMENT
??_C@_05FOJEKPAE@lvl3c?$AA@ DB 'lvl3c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EHIPJOEF@lvl3b?$AA@
CONST	SEGMENT
??_C@_05EHIPJOEF@lvl3b?$AA@ DB 'lvl3b', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GMKCMNIG@lvl3a?$AA@
CONST	SEGMENT
??_C@_05GMKCMNIG@lvl3a?$AA@ DB 'lvl3a', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FPFGMFDD@lvl2c?$AA@
CONST	SEGMENT
??_C@_05FPFGMFDD@lvl2c?$AA@ DB 'lvl2c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EGENPEHC@lvl2b?$AA@
CONST	SEGMENT
??_C@_05EGENPEHC@lvl2b?$AA@ DB 'lvl2b', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GNGAKHLB@lvl2a?$AA@
CONST	SEGMENT
??_C@_05GNGAKHLB@lvl2a?$AA@ DB 'lvl2a', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FNBAHLGK@lvl1c?$AA@
CONST	SEGMENT
??_C@_05FNBAHLGK@lvl1c?$AA@ DB 'lvl1c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EEALEKCL@lvl1b?$AA@
CONST	SEGMENT
??_C@_05EEALEKCL@lvl1b?$AA@ DB 'lvl1b', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GPCGBJOI@lvl1a?$AA@
CONST	SEGMENT
??_C@_05GPCGBJOI@lvl1a?$AA@ DB 'lvl1a', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CGFJFPFD@none?$AA@
CONST	SEGMENT
??_C@_04CGFJFPFD@none?$AA@ DB 'none', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LEMPFAGH@AiFollowLead?$AA@
CONST	SEGMENT
??_C@_0N@LEMPFAGH@AiFollowLead?$AA@ DB 'AiFollowLead', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PGCHBJIO@AiFlyBvrFOrmation?$AA@
CONST	SEGMENT
??_C@_0BC@PGCHBJIO@AiFlyBvrFOrmation?$AA@ DB 'AiFlyBvrFOrmation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DBPFIMLD@followwaypoints?$AA@
CONST	SEGMENT
??_C@_0BA@DBPFIMLD@followwaypoints?$AA@ DB 'followwaypoints', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BEJCPJGI@BvrNoIntercept?$AA@
CONST	SEGMENT
??_C@_0P@BEJCPJGI@BvrNoIntercept?$AA@ DB 'BvrNoIntercept', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DKIDBIOD@BVRfollowwaypoints?$AA@
CONST	SEGMENT
??_C@_0BD@DKIDBIOD@BVRfollowwaypoints?$AA@ DB 'BVRfollowwaypoints', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HMAENGNN@BvrPursuit?$AA@
CONST	SEGMENT
??_C@_0L@HMAENGNN@BvrPursuit?$AA@ DB 'BvrPursuit', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GGFONPJB@BvrBaselineIntercept?$AA@
CONST	SEGMENT
??_C@_0BF@GGFONPJB@BvrBaselineIntercept?$AA@ DB 'BvrBaselineIntercept', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PNIOAEMM@BvrPince?4?4BaseLineIntercept?$AA@
CONST	SEGMENT
??_C@_0BM@PNIOAEMM@BvrPince?4?4BaseLineIntercept?$AA@ DB 'BvrPince..BaseL'
	DB	'ineIntercept', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05NKIECHCH@Grind?$AA@
CONST	SEGMENT
??_C@_05NKIECHCH@Grind?$AA@ DB 'Grind', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KLDKKHEJ@BvrBaseLineIntercept?$AA@
CONST	SEGMENT
??_C@_0BF@KLDKKHEJ@BvrBaseLineIntercept?$AA@ DB 'BvrBaseLineIntercept', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BKKOJFHM@BvrBeamleft?$AA@
CONST	SEGMENT
??_C@_0M@BKKOJFHM@BvrBeamleft?$AA@ DB 'BvrBeamleft', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EDFGJMOL@BvrBeamright?$AA@
CONST	SEGMENT
??_C@_0N@EDFGJMOL@BvrBeamright?$AA@ DB 'BvrBeamright', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07IPLKBEDI@BvrBeam?$AA@
CONST	SEGMENT
??_C@_07IPLKBEDI@BvrBeam?$AA@ DB 'BvrBeam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PGLKDHGB@BvrCrankLeftLo?$AA@
CONST	SEGMENT
??_C@_0P@PGLKDHGB@BvrCrankLeftLo?$AA@ DB 'BvrCrankLeftLo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KHOJDIDL@BvrCrankLeftHi?$AA@
CONST	SEGMENT
??_C@_0P@KHOJDIDL@BvrCrankLeftHi?$AA@ DB 'BvrCrankLeftHi', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BHGPFECN@BvrCrankRightLo?$AA@
CONST	SEGMENT
??_C@_0BA@BHGPFECN@BvrCrankRightLo?$AA@ DB 'BvrCrankRightLo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EGDMFLHH@BvrCrankRightHi?$AA@
CONST	SEGMENT
??_C@_0BA@EGDMFLHH@BvrCrankRightHi?$AA@ DB 'BvrCrankRightHi', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HBNDJCKA@BvrCrankLo?$AA@
CONST	SEGMENT
??_C@_0L@HBNDJCKA@BvrCrankLo?$AA@ DB 'BvrCrankLo', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CAIAJNPK@BvrCrankHi?$AA@
CONST	SEGMENT
??_C@_0L@CAIAJNPK@BvrCrankHi?$AA@ DB 'BvrCrankHi', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LFFOJGII@BvrCrank?$AA@
CONST	SEGMENT
??_C@_08LFFOJGII@BvrCrank?$AA@ DB 'BvrCrank', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DHNLGGDE@BvrDrag?$AA@
CONST	SEGMENT
??_C@_07DHNLGGDE@BvrDrag?$AA@ DB 'BvrDrag', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawbsp.h
;	COMDAT ?LabelColor@DrawableBSP@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LabelColor@DrawableBSP@@QAEKXZ PROC			; DrawableBSP::LabelColor, COMDAT
; _this$ = ecx

; 63   : 	DWORD LabelColor()										{ return labelColor; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+164]
	mov	esp, ebp
	pop	ebp
	ret	0
?LabelColor@DrawableBSP@@QAEKXZ ENDP			; DrawableBSP::LabelColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?DidEmergencyJettison@SMSClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DidEmergencyJettison@SMSClass@@QAEHXZ PROC		; SMSClass::DidEmergencyJettison, COMDAT
; _this$ = ecx

; 222  : 	int  DidEmergencyJettison (void)		{ return flags & EmergencyJettisonFlag; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+52]
	and	eax, 16					; 00000010H
	mov	esp, ebp
	pop	ebp
	ret	0
?DidEmergencyJettison@SMSClass@@QAEHXZ ENDP		; SMSClass::DidEmergencyJettison
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetSimpleMode@AirframeClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSimpleMode@AirframeClass@@QAEHXZ PROC		; AirframeClass::GetSimpleMode, COMDAT
; _this$ = ecx

; 1224 : 	int  GetSimpleMode(void) {return simpleMode;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+824]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSimpleMode@AirframeClass@@QAEHXZ ENDP		; AirframeClass::GetSimpleMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?MaxVcas@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MaxVcas@AirframeClass@@QAEMXZ PROC			; AirframeClass::MaxVcas, COMDAT
; _this$ = ecx

; 1176 : 	float MaxVcas(void) {return maxVcas;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+80]
	mov	esp, ebp
	pop	ebp
	ret	0
?MaxVcas@AirframeClass@@QAEMXZ ENDP			; AirframeClass::MaxVcas
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ PROC	; AircraftClass::DBrain, COMDAT
; _this$ = ecx

; 624  : 	DigitalBrain *DBrain(void)			{return (DigitalBrain *)theBrain;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+672]
	mov	esp, ebp
	pop	ebp
	ret	0
?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ENDP	; AircraftClass::DBrain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ PROC ; AircraftClass::AutopilotType, COMDAT
; _this$ = ecx

; 329  : 	AutoPilotType	AutopilotType (void) {return autopilotType;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+968]
	mov	esp, ebp
	pop	ebp
	ret	0
?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ENDP ; AircraftClass::AutopilotType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ PROC ; SimBaseClass::GetCampaignObject, COMDAT
; _this$ = ecx

; 212  : 	CampBaseClass *GetCampaignObject (void) { return campaignObject.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ENDP ; SimBaseClass::GetCampaignObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetSPType@SimBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSPType@SimBaseClass@@QBEEXZ PROC			; SimBaseClass::GetSPType, COMDAT
; _this$ = ecx

; 163  : 	uchar GetSPType() const					{	return (EntityType())->classInfo_[VU_SPTYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	shl	ecx, 2
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSPType@SimBaseClass@@QBEEXZ ENDP			; SimBaseClass::GetSPType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ PROC ; VuBin<CampBaseClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ENDP ; VuBin<CampBaseClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\object.h
;	COMDAT ?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ PROC	; SimObjectType::BaseData, COMDAT
; _this$ = ecx

; 92   : 	FalconEntity* BaseData(void) { return baseData.get(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ENDP	; SimObjectType::BaseData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ PROC ; SensorClass::CurrentTarget, COMDAT
; _this$ = ecx

; 46   : 	SimObjectType* CurrentTarget(void)	{ return lockedTarget; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ENDP ; SensorClass::CurrentTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?Type@SensorClass@@QAE?AW4SensorType@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@SensorClass@@QAE?AW4SensorType@1@XZ PROC		; SensorClass::Type, COMDAT
; _this$ = ecx

; 36   : 	SensorType	Type(void)			{ return sensorType; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+68]
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@SensorClass@@QAE?AW4SensorType@1@XZ ENDP		; SensorClass::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?IsSetATC@DigitalBrain@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetATC@DigitalBrain@@QAEHH@Z PROC			; DigitalBrain::IsSetATC, COMDAT
; _this$ = ecx

; 709  : 	int		IsSetATC(int flag)								{return (atcFlags & flag) && TRUE;}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+300]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsSetATC
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@IsSetATC
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSetATC
$LN3@IsSetATC:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSetATC:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetATC@DigitalBrain@@QAEHH@Z ENDP			; DigitalBrain::IsSetATC
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?SetTrackPoint@DigitalBrain@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?SetTrackPoint@DigitalBrain@@QAEXMMM@Z PROC		; DigitalBrain::SetTrackPoint, COMDAT
; _this$ = ecx

; 699  : 	void	SetTrackPoint(float x, float y, float z){ SetTrackPoint(x, y); trackZ = z; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPoint@DigitalBrain@@QAEXMM@Z	; DigitalBrain::SetTrackPoint
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+156], xmm0
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetTrackPoint@DigitalBrain@@QAEXMMM@Z ENDP		; DigitalBrain::SetTrackPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?SetTrackPoint@DigitalBrain@@QAEXMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SetTrackPoint@DigitalBrain@@QAEXMM@Z PROC		; DigitalBrain::SetTrackPoint, COMDAT
; _this$ = ecx

; 698  : 	void	SetTrackPoint(float x, float y){ trackX = x; trackY=y; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax+148], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [ecx+152], xmm0
	mov	esp, ebp
	pop	ebp
	ret	8
?SetTrackPoint@DigitalBrain@@QAEXMM@Z ENDP		; DigitalBrain::SetTrackPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_zft$ = -140						; size = 4
_ry$ = -136						; size = 4
_rx$ = -132						; size = 4
_rz$ = -128						; size = 4
tv601 = -124						; size = 4
tv557 = -120						; size = 4
_vehInFlight$ = -116					; size = 4
tv669 = -112						; size = 4
tv675 = -108						; size = 4
tv577 = -104						; size = 4
tv638 = -100						; size = 4
tv519 = -96						; size = 4
tv632 = -92						; size = 4
tv592 = -88						; size = 4
tv621 = -84						; size = 4
tv587 = -80						; size = 4
tv673 = -76						; size = 4
tv667 = -72						; size = 4
tv616 = -68						; size = 4
tv568 = -64						; size = 4
tv611 = -60						; size = 4
tv534 = -56						; size = 4
tv671 = -52						; size = 4
tv506 = -48						; size = 4
tv606 = -44						; size = 4
tv582 = -40						; size = 4
_yft$ = -36						; size = 4
_xft$ = -32						; size = 4
_flightIdx$ = -28					; size = 4
_rangeFactor$ = -24					; size = 4
_iamelementlead$ = -17					; size = 1
_curPosition$ = -16					; size = 4
_groundZ$ = -12						; size = 4
_paircraft$ = -8					; size = 4
_this$ = -4						; size = 4
?AiFlyBvrFOrmation@DigitalBrain@@IAEXXZ PROC		; DigitalBrain::AiFlyBvrFOrmation
; _this$ = ecx

; 2801 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	mov	DWORD PTR _this$[ebp], ecx

; 2802 : 	ACFormationData::PositionData *curPosition;
; 2803 : 	float				rangeFactor;
; 2804 : 	float				groundZ;
; 2805 : 	int				vehInFlight;
; 2806 : 	int				flightIdx;
; 2807 : 	bool			iamelementlead = false;

	mov	BYTE PTR _iamelementlead$[ebp], 0

; 2808 : 	AircraftClass* paircraft;
; 2809 : 		// Get wingman slot position relative to the leader
; 2810 : 		vehInFlight		= ((FlightClass*)self->GetCampaignObject())->GetTotalVehicles();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetTotalVehicles@UnitClass@@QAEHXZ	; UnitClass::GetTotalVehicles
	mov	DWORD PTR _vehInFlight$[ebp], eax

; 2811 : 		flightIdx		= ((FlightClass*)self->GetCampaignObject())->GetComponentIndex(self);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentIndex@CampBaseClass@@QAEHPAVVuEntity@@@Z ; CampBaseClass::GetComponentIndex
	mov	DWORD PTR _flightIdx$[ebp], eax

; 2812 : 
; 2813 : 		if(flightIdx == AiFirstWing && vehInFlight == 2)  {

	cmp	DWORD PTR _flightIdx$[ebp], 1
	jne	SHORT $LN13@AiFlyBvrFO
	cmp	DWORD PTR _vehInFlight$[ebp], 2
	jne	SHORT $LN13@AiFlyBvrFO

; 2814 : 			curPosition	= &(acFormationData->twoposData[mFormation]);	// The four ship #2 slot position is copied in to the 2 ship formation array.

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+808]
	shl	edx, 4
	mov	eax, DWORD PTR ?acFormationData@@3PAVACFormationData@@A ; acFormationData
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _curPosition$[ebp], edx

; 2815 : 			paircraft	= (AircraftClass*) flightLead;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+708]
	mov	DWORD PTR _paircraft$[ebp], edx
	jmp	SHORT $LN10@AiFlyBvrFO
$LN13@AiFlyBvrFO:

; 2816 : 		}
; 2817 : 		else if(flightIdx == AiSecondWing) {

	cmp	DWORD PTR _flightIdx$[ebp], 3
	jne	SHORT $LN11@AiFlyBvrFO

; 2818 : 	      curPosition = &(acFormationData->twoposData[mFormation]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+808]
	shl	ecx, 4
	mov	edx, DWORD PTR ?acFormationData@@3PAVACFormationData@@A ; acFormationData
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR _curPosition$[ebp], ecx

; 2819 : 			paircraft	= (AircraftClass*) ((FlightClass*)self->GetCampaignObject())->GetComponentEntity(AiElementLead);

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentEntity
	mov	DWORD PTR _paircraft$[ebp], eax

; 2820 : 		}
; 2821 : 		else {

	jmp	SHORT $LN10@AiFlyBvrFO
$LN11@AiFlyBvrFO:

; 2822 : 			curPosition = &(acFormationData->positionData[mFormation][flightIdx - 1]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+808]
	mov	eax, DWORD PTR ?acFormationData@@3PAVACFormationData@@A ; acFormationData
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _flightIdx$[ebp]
	sub	eax, 1
	shl	eax, 4
	add	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _curPosition$[ebp], eax

; 2823 : 			paircraft	= (AircraftClass*) flightLead;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+708]
	mov	DWORD PTR _paircraft$[ebp], edx

; 2824 : 			iamelementlead = true;

	mov	BYTE PTR _iamelementlead$[ebp], 1
$LN10@AiFlyBvrFO:

; 2825 : 		}
; 2826 : 
; 2827 : 	 rangeFactor		= curPosition->range * (mFormLateralSpaceFactor);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _curPosition$[ebp]
	movss	xmm0, DWORD PTR [eax+904]
	mulss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR _rangeFactor$[ebp], xmm0

; 2828 : 	 if ((AircraftClass*)flightLead && ((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Pwall) rangeFactor *=6;

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+708], 0
	je	SHORT $LN9@AiFlyBvrFO
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 12			; 0000000cH
	jne	SHORT $LN9@AiFlyBvrFO
	movss	xmm0, DWORD PTR _rangeFactor$[ebp]
	mulss	xmm0, DWORD PTR __real@40c00000
	movss	DWORD PTR _rangeFactor$[ebp], xmm0
$LN9@AiFlyBvrFO:

; 2829 : 
; 2830 : 	// Get my leader's position
; 2831 : 		ShiAssert(paircraft);
; 2832 : 		if (paircraft)

	cmp	DWORD PTR _paircraft$[ebp], 0
	je	$LN8@AiFlyBvrFO

; 2833 : 		{
; 2834 : 			trackX	= paircraft->XPos();

	mov	ecx, DWORD PTR _paircraft$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+148]

; 2835 : 			trackY	= paircraft->YPos();

	mov	ecx, DWORD PTR _paircraft$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+152]

; 2836 : 			trackZ	= paircraft->ZPos();

	mov	ecx, DWORD PTR _paircraft$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+156]

; 2837 : 
; 2838 : 			// Calculate position relative to the leader
; 2839 : 			trackX	+= rangeFactor * (float)cos(curPosition->relAz * mFormSide + paircraft->af->sigma);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+900]
	mov	edx, DWORD PTR _curPosition$[ebp]
	mulss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _paircraft$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	addss	xmm0, DWORD PTR [ecx+1176]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv506[ebp]
	movss	xmm0, DWORD PTR tv506[ebp]
	mulss	xmm0, DWORD PTR _rangeFactor$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+148]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+148], xmm0

; 2840 : 			trackY	+= rangeFactor * (float)sin(curPosition->relAz * mFormSide + paircraft->af->sigma);		

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+900]
	mov	edx, DWORD PTR _curPosition$[ebp]
	mulss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _paircraft$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	addss	xmm0, DWORD PTR [ecx+1176]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv519[ebp]
	movss	xmm0, DWORD PTR tv519[ebp]
	mulss	xmm0, DWORD PTR _rangeFactor$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+152]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+152], xmm0

; 2841 : 			if(curPosition->relEl) {

	mov	ecx, DWORD PTR _curPosition$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@AiFlyBvrFO

; 2842 : 				trackZ	+= rangeFactor * (float)sin(-curPosition->relEl);

	mov	edx, DWORD PTR _curPosition$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv534[ebp]
	movss	xmm0, DWORD PTR tv534[ebp]
	mulss	xmm0, DWORD PTR _rangeFactor$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+156]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+156], xmm0

; 2843 : 			}
; 2844 : 			else {

	jmp	SHORT $LN6@AiFlyBvrFO
$LN7@AiFlyBvrFO:

; 2845 : 				trackZ += (flightIdx * -100.0F);

	cvtsi2ss xmm0, DWORD PTR _flightIdx$[ebp]
	mulss	xmm0, DWORD PTR __real@c2c80000
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+156]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+156], xmm0
$LN6@AiFlyBvrFO:

; 2846 : 			}
; 2847 : 
; 2848 : 			AiCheckInPositionCall(trackX, trackY, trackZ);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+156]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+152]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+148]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiCheckInPositionCall@DigitalBrain@@AAEXMMM@Z ; DigitalBrain::AiCheckInPositionCall

; 2849 : 
; 2850 : 			// Set track point 1NM ahead of desired location
; 2851 : 			trackX	+= 1.0F * NM_TO_FT * (float)cos((paircraft)->af->sigma);

	mov	ecx, DWORD PTR _paircraft$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	push	ecx
	movss	xmm0, DWORD PTR [edx+1176]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv557[ebp]
	movss	xmm0, DWORD PTR tv557[ebp]
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+148]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+148], xmm0

; 2852 : 			trackY	+= 1.0F * NM_TO_FT * (float)sin((paircraft)->af->sigma);

	mov	edx, DWORD PTR _paircraft$[ebp]
	mov	eax, DWORD PTR [edx+932]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1176]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv568[ebp]
	movss	xmm0, DWORD PTR tv568[ebp]
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+152]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+152], xmm0
$LN8@AiFlyBvrFO:

; 2853 : 		}
; 2854 : 
; 2855 : 		// check for terrain following
; 2856 : 	    groundZ = OTWDriver.GetApproxGroundLevel( self->XPos() + self->XDelta(),
; 2857 : 										   		  self->YPos() + self->YDelta() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv577[ebp]
	movss	xmm0, DWORD PTR tv577[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movss	DWORD PTR tv667[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv582[ebp]
	movss	xmm0, DWORD PTR tv667[ebp]
	addss	xmm0, DWORD PTR tv582[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv587[ebp]
	movss	xmm0, DWORD PTR tv587[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv669[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv592[ebp]
	movss	xmm0, DWORD PTR tv669[ebp]
	addss	xmm0, DWORD PTR tv592[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetApproxGroundLevel@OTWDriverClass@@QAEMMM@Z ; OTWDriverClass::GetApproxGroundLevel
	fstp	DWORD PTR _groundZ$[ebp]

; 2858 : 		if ( self->ZPos() - groundZ > -1000.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv601[ebp]
	movss	xmm0, DWORD PTR tv601[ebp]
	subss	xmm0, DWORD PTR _groundZ$[ebp]
	comiss	xmm0, DWORD PTR __real@c47a0000
	jbe	$LN2@AiFlyBvrFO

; 2859 : 		{
; 2860 : 	    	groundZ = OTWDriver.GetGroundLevel( self->XPos() + self->XDelta(),
; 2861 : 										   	    self->YPos() + self->YDelta() );

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv606[ebp]
	movss	xmm0, DWORD PTR tv606[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv671[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv611[ebp]
	movss	xmm0, DWORD PTR tv671[ebp]
	addss	xmm0, DWORD PTR tv611[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv616[ebp]
	movss	xmm0, DWORD PTR tv616[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	movss	DWORD PTR tv673[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv621[ebp]
	movss	xmm0, DWORD PTR tv673[ebp]
	addss	xmm0, DWORD PTR tv621[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	fstp	DWORD PTR _groundZ$[ebp]

; 2862 : 
; 2863 : 			if ( trackZ - groundZ > -800.0f )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+156]
	subss	xmm0, DWORD PTR _groundZ$[ebp]
	comiss	xmm0, DWORD PTR __real@c4480000
	jbe	$LN2@AiFlyBvrFO

; 2864 : 			{
; 2865 : 				if ( self->ZPos() - groundZ > -800.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv632[ebp]
	movss	xmm0, DWORD PTR tv632[ebp]
	subss	xmm0, DWORD PTR _groundZ$[ebp]
	comiss	xmm0, DWORD PTR __real@c4480000
	jbe	SHORT $LN3@AiFlyBvrFO

; 2866 : 					trackZ = groundZ - 800.0f - ( self->ZPos() - groundZ + 800.0f ) * 2.0f;

	movss	xmm0, DWORD PTR _groundZ$[ebp]
	subss	xmm0, DWORD PTR __real@44480000
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	movss	DWORD PTR tv675[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv638[ebp]
	movss	xmm0, DWORD PTR tv638[ebp]
	subss	xmm0, DWORD PTR _groundZ$[ebp]
	addss	xmm0, DWORD PTR __real@44480000
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv675[ebp]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+156], xmm1

; 2867 : 				else

	jmp	SHORT $LN2@AiFlyBvrFO
$LN3@AiFlyBvrFO:

; 2868 : 					trackZ = groundZ - 800.0f;

	movss	xmm0, DWORD PTR _groundZ$[ebp]
	subss	xmm0, DWORD PTR __real@44480000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+156], xmm0
$LN2@AiFlyBvrFO:

; 2869 : 			}
; 2870 : 		}
; 2871 : 	float xft;
; 2872 : 	float yft;
; 2873 : 	float zft;
; 2874 : 	float	rx;
; 2875 : 	float	ry;
; 2876 : 	float	rz;
; 2877 : 	
; 2878 : ShiAssert(trackZ < 0.0F);
; 2879 : 		CalculateRelativePos(&xft, &yft, &zft, &rx, &ry, &rz);

	lea	edx, DWORD PTR _rz$[ebp]
	push	edx
	lea	eax, DWORD PTR _ry$[ebp]
	push	eax
	lea	ecx, DWORD PTR _rx$[ebp]
	push	ecx
	lea	edx, DWORD PTR _zft$[ebp]
	push	edx
	lea	eax, DWORD PTR _yft$[ebp]
	push	eax
	lea	ecx, DWORD PTR _xft$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateRelativePos@DigitalBrain@@IAEXPAM00000@Z ; DigitalBrain::CalculateRelativePos

; 2880 : 	//	SimpleTrack(SimpleTrackDist, 0.0F);
; 2881 : 		ShiAssert(flightLead);
; 2882 : 		if (flightLead)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+708], 0
	je	SHORT $LN1@AiFlyBvrFO

; 2883 : 			SimpleTrackDistance(flightLead->GetVt(), (float)sqrt(xft*xft+yft*yft));

	movss	xmm0, DWORD PTR _xft$[ebp]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	movss	xmm1, DWORD PTR _yft$[ebp]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+708]
	mov	edx, DWORD PTR [eax+220]
	call	edx
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SimpleTrackDistance@DigitalBrain@@IAEMMM@Z ; DigitalBrain::SimpleTrackDistance
	fstp	ST(0)
$LN1@AiFlyBvrFO:

; 2884 : 		AutoTrack (4.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AutoTrack@DigitalBrain@@IAEMM@Z	; DigitalBrain::AutoTrack
	fstp	ST(0)

; 2885 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AiFlyBvrFOrmation@DigitalBrain@@IAEXXZ ENDP		; DigitalBrain::AiFlyBvrFOrmation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CalculateMAR@DigitalBrain@@IAEXXZ PROC			; DigitalBrain::CalculateMAR
; _this$ = ecx

; 2056 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2057 : //Cobra... Just say no to crack... Why can't we comment our code?  What the heck is MAR, DOR, TGTMAR etc.
; 2058 : //So, we just delete you and start over.
; 2059 : /*
; 2060 : // find MAR and DOR
; 2061 : 	MAR = 5.0f * NM_TO_FT;
; 2062 : 	TGTMAR = maxAAWpnRange/2;
; 2063 : 
; 2064 : 	// 2002-03-22 MODIFIED BY S.G. Only use the original code if we have no minTGTMAR
; 2065 : 	if (!self->af || self->af->GetMinTGTMAR() == 0.0) {
; 2066 : 		if (self->EntityType()->classInfo_[VU_SPTYPE] == SPTYPE_MIG29||
; 2067 : 		 self->EntityType()->classInfo_[VU_SPTYPE] == SPTYPE_MIG31)
; 2068 : 		{
; 2069 : 			if (maxAAWpnRange > 6000.0f) // 2002-03-06 ADDED BY S.G. If you only have guns or nothing, don't be foolish and go on the aggresive.
; 2070 : 				TGTMAR = max(TGTMAR,13.0f*NM_TO_FT);
; 2071 : 		}
; 2072 : 
; 2073 : 		if (
; 2074 : 		 self->EntityType()->classInfo_[VU_SPTYPE] == SPTYPE_SU27||
; 2075 : 		 self->EntityType()->classInfo_[VU_SPTYPE] == SPTYPE_F14A||
; 2076 : 		 self->EntityType()->classInfo_[VU_SPTYPE] == SPTYPE_F15C||
; 2077 : 		 self->EntityType()->classInfo_[VU_SPTYPE] == SPTYPE_F15E||
; 2078 : 		 self->EntityType()->classInfo_[VU_SPTYPE] == SPTYPE_F16C||
; 2079 : 		 self->EntityType()->classInfo_[VU_SPTYPE] == SPTYPE_F18A||		 
; 2080 : 		 self->EntityType()->classInfo_[VU_SPTYPE] == SPTYPE_F18D||		 
; 2081 : 		 self->EntityType()->classInfo_[VU_SPTYPE] == SPTYPE_F22)
; 2082 : 		{
; 2083 : 			if (maxAAWpnRange > 6000.0f) // 2002-03-06 ADDED BY S.G. If you only have guns or nothing, don't be foolish and go on the aggresive
; 2084 : 				TGTMAR = max(TGTMAR,22.0f*NM_TO_FT);
; 2085 : 		}
; 2086 : 	}
; 2087 : 	// Otherwise use its assigned minTGTMAR
; 2088 : 	else {
; 2089 : 		if (maxAAWpnRange > 6000.0f)
; 2090 : 		// END OF ADDED SECTION 2002-03-06
; 2091 : 			TGTMAR = max(TGTMAR,self->af->GetMinTGTMAR() * NM_TO_FT);
; 2092 : 	}
; 2093 : 	// END IF MODIFIED SECTION 2002-03-22
; 2094 : 
; 2095 : 	// 2002-02-12 ADDED BY S.G. GetIdentified is a CampBaseClass so we must fetch it
; 2096 : 	CampBaseClass *campBaseObj;
; 2097 : 	if (targetPtr->BaseData()->IsSim())
; 2098 : 		campBaseObj = ((SimBaseClass*)targetPtr->BaseData())->GetCampaignObject();
; 2099 : 	else
; 2100 : 		campBaseObj = ((CampBaseClass *)targetPtr->BaseData());
; 2101 : 
; 2102 : 	// If it doesn't have a campaign object or it's identified... END OF ADDED SECTION plus the use of campBaseObj below
; 2103 : 	if ( !campBaseObj || campBaseObj->GetIdentified(self->GetTeam()))
; 2104 : 	{// we have Type ID.
; 2105 : 		// 2002-03-22 MODIFIED BY S.G. If our target is an airplane and we have a minMAR, use it instead of the original method
; 2106 : 		if (!targetPtr->BaseData()->IsAirplane() || !((AircraftClass *)targetPtr->BaseData())->af || ((AircraftClass *)targetPtr->BaseData())->af->GetMaxMARIdedStart() == 0.0f) {
; 2107 : 			if (targetPtr->BaseData()->EntityType()->classInfo_[VU_SPTYPE] == SPTYPE_MIG29||
; 2108 : 			 targetPtr->BaseData()->EntityType()->classInfo_[VU_SPTYPE] == SPTYPE_MIG31)
; 2109 : 			{
; 2110 : 				MAR  = max(MAR,5.0f*NM_TO_FT) ;
; 2111 : 				if (targetPtr->BaseData()->ZPos() <-28000.0f)
; 2112 : 					MAR += 8.0f* NM_TO_FT;
; 2113 : 				else if (targetPtr->BaseData()->ZPos() <-18000.0f)
; 2114 : 					MAR += 5.0f* NM_TO_FT;
; 2115 : 				else if (targetPtr->BaseData()->ZPos() <-5000.0f)
; 2116 : 					MAR += 3.0f* NM_TO_FT;
; 2117 : 				MAR += min (10.0f * NM_TO_FT, spikesecondselement* NM_TO_FT/3);//add 1nm pr 3 spikesec...max 10nm
; 2118 : 			}
; 2119 : 
; 2120 : 			if (
; 2121 : 			 targetPtr->BaseData()->EntityType()->classInfo_[VU_SPTYPE] == SPTYPE_SU27||
; 2122 : 			 targetPtr->BaseData()->EntityType()->classInfo_[VU_SPTYPE] == SPTYPE_F14A||
; 2123 : 			 targetPtr->BaseData()->EntityType()->classInfo_[VU_SPTYPE] == SPTYPE_F15C||
; 2124 : 			 targetPtr->BaseData()->EntityType()->classInfo_[VU_SPTYPE] == SPTYPE_F15E||
; 2125 : 			 targetPtr->BaseData()->EntityType()->classInfo_[VU_SPTYPE] == SPTYPE_F16C||
; 2126 : 			 targetPtr->BaseData()->EntityType()->classInfo_[VU_SPTYPE] == SPTYPE_F18A||		 
; 2127 : 			 targetPtr->BaseData()->EntityType()->classInfo_[VU_SPTYPE] == SPTYPE_F18D||		 
; 2128 : 			 targetPtr->BaseData()->EntityType()->classInfo_[VU_SPTYPE] == SPTYPE_F22)
; 2129 : 			{
; 2130 : 				MAR  =max(MAR,10.0f*NM_TO_FT);
; 2131 : 				if (targetPtr->BaseData()->ZPos() <-28000.0f)
; 2132 : 					MAR += 17.0f* NM_TO_FT;
; 2133 : 				else if (targetPtr->BaseData()->ZPos() <-18000.0f)
; 2134 : 					MAR += 12.0f* NM_TO_FT;
; 2135 : 				else if (targetPtr->BaseData()->ZPos() <-5000.0f)
; 2136 : 					MAR += 5.0f* NM_TO_FT;
; 2137 : 			}
; 2138 : 		}
; 2139 : 		// We have ACDATA for this target, use it
; 2140 : 		else {
; 2141 : 			MAR  = max(MAR,((AircraftClass *)targetPtr->BaseData())->af->GetMaxMARIdedStart()*NM_TO_FT) ;
; 2142 : 
; 2143 : 			if (targetPtr->BaseData()->ZPos() <-28000.0f)
; 2144 : 				MAR += ((AircraftClass *)targetPtr->BaseData())->af->GetAddMARIded28k()*NM_TO_FT;
; 2145 : 			else if (targetPtr->BaseData()->ZPos() <-18000.0f)
; 2146 : 				MAR += ((AircraftClass *)targetPtr->BaseData())->af->GetAddMARIded18k()*NM_TO_FT;
; 2147 : 			else if (targetPtr->BaseData()->ZPos() <-5000.0f)
; 2148 : 				MAR += ((AircraftClass *)targetPtr->BaseData())->af->GetAddMARIded5k()*NM_TO_FT;
; 2149 : 			MAR += min (((AircraftClass *)targetPtr->BaseData())->af->GetAddMARIdedSpike()*NM_TO_FT, spikesecondselement*NM_TO_FT/3);//add 1nm pr 3 spikesec...max 10nm
; 2150 : 		}
; 2151 : 		// END OF MODIFIED SECTION 2002-03-22
; 2152 : 	}
; 2153 : 	else
; 2154 : 	{// we Don't have Type ID, we have SA on their Speed and altitude though since the ent is spotted
; 2155 : 		// 2002-03-22 MODIFIED BY S.G. Instead of using the hard coded value, use configurable one
; 2156 : 		if (
; 2157 : 			(targetPtr->BaseData()->GetVt() * FTPSEC_TO_KNOTS > 300.0f ||
; 2158 : 			-targetPtr->BaseData()->ZPos() > 10000.0f)
; 2159 : 			
; 2160 : 			) 
; 2161 : 		{//this might be a combat jet.. asume the worst
; 2162 : 			MAR  =max(MAR,g_fMaxMARNoIdA*NM_TO_FT); // 10.0f*NM_TO_FT);
; 2163 : 			if (targetPtr->BaseData()->ZPos() <-28000.0f)
; 2164 : 				MAR +=g_fMinMARNoId28kA*NM_TO_FT; // 17.0f* NM_TO_FT;
; 2165 : 			else if (targetPtr->BaseData()->ZPos() <-18000.0f)
; 2166 : 				MAR +=g_fMinMARNoId18kA*NM_TO_FT; // 12.0f* NM_TO_FT;
; 2167 : 			else if (targetPtr->BaseData()->ZPos() <-5000.0f)
; 2168 : 				MAR += g_fMinMARNoId5kA*NM_TO_FT; // 5.0f* NM_TO_FT;
; 2169 : 		}
; 2170 : 		else if (targetPtr->BaseData()->GetVt() * FTPSEC_TO_KNOTS > 250.0f)
; 2171 : 		{// this could be a a-a capable thingy, but if it's is it's low level so it's a-a long range shoot capabilitys are not great
; 2172 : 			MAR  = max(MAR,g_fMaxMARNoIdB*NM_TO_FT) ; // 5.0f*NM_TO_FT
; 2173 : 			if (targetPtr->BaseData()->ZPos() <-28000.0f)
; 2174 : 				MAR +=g_fMinMARNoId28kB*NM_TO_FT; // 8.0f* NM_TO_FT;
; 2175 : 			else if (targetPtr->BaseData()->ZPos() <-18000.0f)
; 2176 : 				MAR +=g_fMinMARNoId18kB*NM_TO_FT; // 5.0f* NM_TO_FT;
; 2177 : 			else if (targetPtr->BaseData()->ZPos() <-5000.0f)
; 2178 : 				MAR += g_fMinMARNoId5kB*NM_TO_FT; // 3.0f* NM_TO_FT;
; 2179 : 		}
; 2180 : 			else
; 2181 : 		{// this must be something unthreatening...it's below 250 knots
; 2182 : 			MAR  = g_fMinMARNoIdC*NM_TO_FT; // 5.0f * NM_TO_FT;
; 2183 : 		}
; 2184 : 	}
; 2185 : 
; 2186 : 	DOR = MAR + 10.0f* NM_TO_FT;*/
; 2187 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CalculateMAR@DigitalBrain@@IAEXXZ ENDP			; DigitalBrain::CalculateMAR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_rngSq$ = -108						; size = 4
tv330 = -104						; size = 4
tv334 = -100						; size = 4
tv312 = -96						; size = 4
tv336 = -92						; size = 4
tv308 = -88						; size = 4
tv303 = -84						; size = 4
tv332 = -80						; size = 4
tv299 = -76						; size = 4
tv322 = -72						; size = 4
tv326 = -68						; size = 4
tv294 = -64						; size = 4
tv328 = -60						; size = 4
tv290 = -56						; size = 4
tv285 = -52						; size = 4
tv324 = -48						; size = 4
tv281 = -44						; size = 4
tv318 = -40						; size = 4
tv276 = -36						; size = 4
tv320 = -32						; size = 4
tv272 = -28						; size = 4
tv267 = -24						; size = 4
tv316 = -20						; size = 4
tv263 = -16						; size = 4
_result$ = -12						; size = 4
_otherelementlead$ = -8					; size = 4
_this$ = -4						; size = 4
?IsSplitup@DigitalBrain@@IAEHXZ PROC			; DigitalBrain::IsSplitup
; _this$ = ecx

; 2246 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	mov	DWORD PTR _this$[ebp], ecx

; 2247 : 	int result =0;

	mov	DWORD PTR _result$[ebp], 0

; 2248 : 	AircraftClass *otherelementlead = NULL;

	mov	DWORD PTR _otherelementlead$[ebp], 0

; 2249 : 	if (self->vehicleInUnit == 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movzx	edx, BYTE PTR [ecx+664]
	test	edx, edx
	jne	SHORT $LN4@IsSplitup

; 2250 : 	{
; 2251 : 	otherelementlead = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(2);

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _otherelementlead$[ebp], eax
	jmp	SHORT $LN2@IsSplitup
$LN4@IsSplitup:

; 2252 : 	}
; 2253 : 	else if (self->vehicleInUnit == 2)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	movzx	eax, BYTE PTR [edx+664]
	cmp	eax, 2
	jne	SHORT $LN2@IsSplitup

; 2254 : 	{
; 2255 : 	otherelementlead = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _otherelementlead$[ebp], eax
$LN2@IsSplitup:

; 2256 : 	}
; 2257 : 	if (! otherelementlead) return result;

	cmp	DWORD PTR _otherelementlead$[ebp], 0
	jne	SHORT $LN1@IsSplitup
	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN5@IsSplitup
$LN1@IsSplitup:

; 2258 : 
; 2259 :     float  rngSq = (self->XPos()-otherelementlead->XPos())*(self->XPos()-otherelementlead->XPos()) + 
; 2260 : 					(self->YPos()-otherelementlead->YPos())*(self->YPos()-otherelementlead->YPos()) + 
; 2261 : 					(self->ZPos()-otherelementlead->ZPos())*(self->ZPos()-otherelementlead->ZPos());

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv263[ebp]
	movss	xmm0, DWORD PTR tv263[ebp]
	mov	ecx, DWORD PTR _otherelementlead$[ebp]
	movss	DWORD PTR tv316[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv267[ebp]
	movss	xmm0, DWORD PTR tv316[ebp]
	subss	xmm0, DWORD PTR tv267[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv318[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv272[ebp]
	movss	xmm0, DWORD PTR tv272[ebp]
	mov	ecx, DWORD PTR _otherelementlead$[ebp]
	movss	DWORD PTR tv320[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv276[ebp]
	movss	xmm0, DWORD PTR tv320[ebp]
	subss	xmm0, DWORD PTR tv276[ebp]
	movss	xmm1, DWORD PTR tv318[ebp]
	mulss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movss	DWORD PTR tv322[ebp], xmm1
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv281[ebp]
	movss	xmm0, DWORD PTR tv281[ebp]
	mov	ecx, DWORD PTR _otherelementlead$[ebp]
	movss	DWORD PTR tv324[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv285[ebp]
	movss	xmm0, DWORD PTR tv324[ebp]
	subss	xmm0, DWORD PTR tv285[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	movss	DWORD PTR tv326[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv290[ebp]
	movss	xmm0, DWORD PTR tv290[ebp]
	mov	ecx, DWORD PTR _otherelementlead$[ebp]
	movss	DWORD PTR tv328[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv294[ebp]
	movss	xmm0, DWORD PTR tv328[ebp]
	subss	xmm0, DWORD PTR tv294[ebp]
	movss	xmm1, DWORD PTR tv326[ebp]
	mulss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv322[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv330[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv299[ebp]
	movss	xmm0, DWORD PTR tv299[ebp]
	mov	ecx, DWORD PTR _otherelementlead$[ebp]
	movss	DWORD PTR tv332[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv303[ebp]
	movss	xmm0, DWORD PTR tv332[ebp]
	subss	xmm0, DWORD PTR tv303[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movss	DWORD PTR tv334[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv308[ebp]
	movss	xmm0, DWORD PTR tv308[ebp]
	mov	ecx, DWORD PTR _otherelementlead$[ebp]
	movss	DWORD PTR tv336[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv312[ebp]
	movss	xmm0, DWORD PTR tv336[ebp]
	subss	xmm0, DWORD PTR tv312[ebp]
	movss	xmm1, DWORD PTR tv334[ebp]
	mulss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv330[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rngSq$[ebp], xmm0

; 2262 : 	result = (int)rngSq;

	cvttss2si edx, DWORD PTR _rngSq$[ebp]
	mov	DWORD PTR _result$[ebp], edx

; 2263 : 	return result;

	mov	eax, DWORD PTR _result$[ebp]
$LN5@IsSplitup:

; 2264 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsSplitup@DigitalBrain@@IAEHXZ ENDP			; DigitalBrain::IsSplitup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_Elementwing$ = -20					; size = 4
_elementlead$ = -16					; size = 4
_this$ = -12						; size = 4
_Mywing$ = -8						; size = 4
_result$ = -4						; size = 4
?HowManyTargetet@DigitalBrain@@IAEHXZ PROC		; DigitalBrain::HowManyTargetet
; _this$ = ecx

; 2267 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 2268 : 	int	result = 0;

	mov	DWORD PTR _result$[ebp], 0

; 2269 : 	AircraftClass *elementlead = NULL;

	mov	DWORD PTR _elementlead$[ebp], 0

; 2270 : 	AircraftClass *Mywing = NULL;

	mov	DWORD PTR _Mywing$[ebp], 0

; 2271 : 	AircraftClass *Elementwing = NULL;

	mov	DWORD PTR _Elementwing$[ebp], 0

; 2272 : 	if (self->vehicleInUnit == 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movzx	edx, BYTE PTR [ecx+664]
	test	edx, edx
	jne	SHORT $LN21@HowManyTar

; 2273 : 	{
; 2274 : 	elementlead = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(2);

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _elementlead$[ebp], eax

; 2275 : 	Mywing = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _Mywing$[ebp], eax

; 2276 :     Elementwing = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(3);

	push	3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _Elementwing$[ebp], eax
$LN21@HowManyTar:

; 2277 : 	}
; 2278 : 	//we are element lead
; 2279 : 	if (self->vehicleInUnit == 2)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movzx	edx, BYTE PTR [ecx+664]
	cmp	edx, 2
	jne	SHORT $LN20@HowManyTar

; 2280 : 	{
; 2281 : 	elementlead = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _elementlead$[ebp], eax

; 2282 : 	Mywing = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(3);

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _Mywing$[ebp], eax

; 2283 :     Elementwing = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(1);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _Elementwing$[ebp], eax
$LN20@HowManyTar:

; 2284 : 	}
; 2285 : 
; 2286 : 	if (self->targetPtr) result++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	cmp	DWORD PTR [ecx+656], 0
	je	SHORT $LN19@HowManyTar
	mov	edx, DWORD PTR _result$[ebp]
	add	edx, 1
	mov	DWORD PTR _result$[ebp], edx
$LN19@HowManyTar:

; 2287 : 
; 2288 : 	if (Mywing && Mywing->targetPtr)

	cmp	DWORD PTR _Mywing$[ebp], 0
	je	SHORT $LN18@HowManyTar
	mov	eax, DWORD PTR _Mywing$[ebp]
	cmp	DWORD PTR [eax+656], 0
	je	SHORT $LN18@HowManyTar

; 2289 : 	{
; 2290 : 		if ( Mywing->targetPtr != self->targetPtr ) result++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _Mywing$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	cmp	ecx, DWORD PTR [edx+656]
	je	SHORT $LN18@HowManyTar
	mov	edx, DWORD PTR _result$[ebp]
	add	edx, 1
	mov	DWORD PTR _result$[ebp], edx
$LN18@HowManyTar:

; 2291 : 	}
; 2292 : 
; 2293 : 	if (elementlead && elementlead->targetPtr)

	cmp	DWORD PTR _elementlead$[ebp], 0
	je	SHORT $LN16@HowManyTar
	mov	eax, DWORD PTR _elementlead$[ebp]
	cmp	DWORD PTR [eax+656], 0
	je	SHORT $LN16@HowManyTar

; 2294 : 	{
; 2295 : 		if (elementlead->targetPtr != self->targetPtr)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _elementlead$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	cmp	ecx, DWORD PTR [edx+656]
	je	SHORT $LN16@HowManyTar

; 2296 : 		{
; 2297 : 			if (Mywing && elementlead->targetPtr != Mywing->targetPtr) result++;

	cmp	DWORD PTR _Mywing$[ebp], 0
	je	SHORT $LN14@HowManyTar
	mov	edx, DWORD PTR _elementlead$[ebp]
	mov	eax, DWORD PTR _Mywing$[ebp]
	mov	ecx, DWORD PTR [edx+656]
	cmp	ecx, DWORD PTR [eax+656]
	je	SHORT $LN14@HowManyTar
	mov	edx, DWORD PTR _result$[ebp]
	add	edx, 1
	mov	DWORD PTR _result$[ebp], edx
	jmp	SHORT $LN16@HowManyTar
$LN14@HowManyTar:

; 2298 : 			else if (!Mywing)result++;

	cmp	DWORD PTR _Mywing$[ebp], 0
	jne	SHORT $LN16@HowManyTar
	mov	eax, DWORD PTR _result$[ebp]
	add	eax, 1
	mov	DWORD PTR _result$[ebp], eax
$LN16@HowManyTar:

; 2299 : 		}				 
; 2300 : 	}
; 2301 : 	if (Elementwing && Elementwing->targetPtr)

	cmp	DWORD PTR _Elementwing$[ebp], 0
	je	$LN11@HowManyTar
	mov	ecx, DWORD PTR _Elementwing$[ebp]
	cmp	DWORD PTR [ecx+656], 0
	je	$LN11@HowManyTar

; 2302 : 	{
; 2303 : 		if (Elementwing->targetPtr != self->targetPtr)// not my target

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _Elementwing$[ebp]
	mov	edx, DWORD PTR [ecx+656]
	cmp	edx, DWORD PTR [eax+656]
	je	$LN11@HowManyTar

; 2304 : 		{	
; 2305 : 			if (elementlead && elementlead->targetPtr && Elementwing->targetPtr != elementlead->targetPtr)

	cmp	DWORD PTR _elementlead$[ebp], 0
	je	SHORT $LN9@HowManyTar
	mov	eax, DWORD PTR _elementlead$[ebp]
	cmp	DWORD PTR [eax+656], 0
	je	SHORT $LN9@HowManyTar
	mov	ecx, DWORD PTR _Elementwing$[ebp]
	mov	edx, DWORD PTR _elementlead$[ebp]
	mov	eax, DWORD PTR [ecx+656]
	cmp	eax, DWORD PTR [edx+656]
	je	SHORT $LN9@HowManyTar

; 2306 : 			{// its not our element leads target 
; 2307 : 				if (Mywing && Elementwing->targetPtr != Mywing->targetPtr)result++;

	cmp	DWORD PTR _Mywing$[ebp], 0
	je	SHORT $LN8@HowManyTar
	mov	ecx, DWORD PTR _Elementwing$[ebp]
	mov	edx, DWORD PTR _Mywing$[ebp]
	mov	eax, DWORD PTR [ecx+656]
	cmp	eax, DWORD PTR [edx+656]
	je	SHORT $LN8@HowManyTar
	mov	ecx, DWORD PTR _result$[ebp]
	add	ecx, 1
	mov	DWORD PTR _result$[ebp], ecx
	jmp	SHORT $LN7@HowManyTar
$LN8@HowManyTar:

; 2308 : 				else if (!Mywing)result++;

	cmp	DWORD PTR _Mywing$[ebp], 0
	jne	SHORT $LN7@HowManyTar
	mov	edx, DWORD PTR _result$[ebp]
	add	edx, 1
	mov	DWORD PTR _result$[ebp], edx
$LN7@HowManyTar:

; 2309 : 			}

	jmp	SHORT $LN11@HowManyTar
$LN9@HowManyTar:

; 2310 : 			else if (!elementlead)

	cmp	DWORD PTR _elementlead$[ebp], 0
	jne	SHORT $LN11@HowManyTar

; 2311 : 			{// its not my wings target
; 2312 : 				if (Mywing && Elementwing->targetPtr != Mywing->targetPtr)result++;

	cmp	DWORD PTR _Mywing$[ebp], 0
	je	SHORT $LN3@HowManyTar
	mov	eax, DWORD PTR _Elementwing$[ebp]
	mov	ecx, DWORD PTR _Mywing$[ebp]
	mov	edx, DWORD PTR [eax+656]
	cmp	edx, DWORD PTR [ecx+656]
	je	SHORT $LN3@HowManyTar
	mov	eax, DWORD PTR _result$[ebp]
	add	eax, 1
	mov	DWORD PTR _result$[ebp], eax
	jmp	SHORT $LN11@HowManyTar
$LN3@HowManyTar:

; 2313 : 				else if (!Mywing)result++;

	cmp	DWORD PTR _Mywing$[ebp], 0
	jne	SHORT $LN11@HowManyTar
	mov	ecx, DWORD PTR _result$[ebp]
	add	ecx, 1
	mov	DWORD PTR _result$[ebp], ecx
$LN11@HowManyTar:

; 2314 : 			}
; 2315 : 		}
; 2316 : 	}
; 2317 : 	return result;

	mov	eax, DWORD PTR _result$[ebp]

; 2318 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HowManyTargetet@DigitalBrain@@IAEHXZ ENDP		; DigitalBrain::HowManyTargetet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_Elementwing$ = -20					; size = 4
_elementlead$ = -16					; size = 4
_Mywing$ = -12						; size = 4
_result$ = -8						; size = 4
_this$ = -4						; size = 4
?HowManyHotnosed@DigitalBrain@@IAEHXZ PROC		; DigitalBrain::HowManyHotnosed
; _this$ = ecx

; 2321 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 2322 : 	int	result = 0;

	mov	DWORD PTR _result$[ebp], 0

; 2323 : 	AircraftClass *elementlead = NULL;

	mov	DWORD PTR _elementlead$[ebp], 0

; 2324 : 	AircraftClass *Mywing = NULL;

	mov	DWORD PTR _Mywing$[ebp], 0

; 2325 : 	AircraftClass *Elementwing = NULL;

	mov	DWORD PTR _Elementwing$[ebp], 0

; 2326 : 	if (self->vehicleInUnit == 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movzx	edx, BYTE PTR [ecx+664]
	test	edx, edx
	jne	SHORT $LN6@HowManyHot

; 2327 : 	{
; 2328 : 	elementlead = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(2);

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _elementlead$[ebp], eax

; 2329 : 	Mywing = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _Mywing$[ebp], eax

; 2330 :     Elementwing = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(3);

	push	3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _Elementwing$[ebp], eax
$LN6@HowManyHot:

; 2331 : 	}
; 2332 : 	//we are element lead
; 2333 : 	if (self->vehicleInUnit == 2)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movzx	edx, BYTE PTR [ecx+664]
	cmp	edx, 2
	jne	SHORT $LN5@HowManyHot

; 2334 : 	{
; 2335 : 	elementlead = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _elementlead$[ebp], eax

; 2336 : 	Mywing = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(3);

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _Mywing$[ebp], eax

; 2337 :     Elementwing = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(1);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _Elementwing$[ebp], eax
$LN5@HowManyHot:

; 2338 : 	}
; 2339 : 
; 2340 : 	if (self->targetPtr && self->targetPtr->localData->ataFrom <50*DTR) result++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	cmp	DWORD PTR [ecx+656], 0
	je	SHORT $LN4@HowManyHot
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+656]
	mov	edx, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR __real@3f5f66f1
	comiss	xmm0, DWORD PTR [edx+4]
	jbe	SHORT $LN4@HowManyHot
	mov	eax, DWORD PTR _result$[ebp]
	add	eax, 1
	mov	DWORD PTR _result$[ebp], eax
$LN4@HowManyHot:

; 2341 : 	if (Mywing && Mywing->targetPtr && Mywing->targetPtr->localData->ataFrom <50*DTR) result++;

	cmp	DWORD PTR _Mywing$[ebp], 0
	je	SHORT $LN3@HowManyHot
	mov	ecx, DWORD PTR _Mywing$[ebp]
	cmp	DWORD PTR [ecx+656], 0
	je	SHORT $LN3@HowManyHot
	mov	edx, DWORD PTR _Mywing$[ebp]
	mov	eax, DWORD PTR [edx+656]
	mov	ecx, DWORD PTR [eax+12]
	movss	xmm0, DWORD PTR __real@3f5f66f1
	comiss	xmm0, DWORD PTR [ecx+4]
	jbe	SHORT $LN3@HowManyHot
	mov	edx, DWORD PTR _result$[ebp]
	add	edx, 1
	mov	DWORD PTR _result$[ebp], edx
$LN3@HowManyHot:

; 2342 : 	if (elementlead && elementlead->targetPtr && elementlead->targetPtr->localData->ataFrom <50*DTR) result++;

	cmp	DWORD PTR _elementlead$[ebp], 0
	je	SHORT $LN2@HowManyHot
	mov	eax, DWORD PTR _elementlead$[ebp]
	cmp	DWORD PTR [eax+656], 0
	je	SHORT $LN2@HowManyHot
	mov	ecx, DWORD PTR _elementlead$[ebp]
	mov	edx, DWORD PTR [ecx+656]
	mov	eax, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR __real@3f5f66f1
	comiss	xmm0, DWORD PTR [eax+4]
	jbe	SHORT $LN2@HowManyHot
	mov	ecx, DWORD PTR _result$[ebp]
	add	ecx, 1
	mov	DWORD PTR _result$[ebp], ecx
$LN2@HowManyHot:

; 2343 : 	if (Elementwing && Elementwing->targetPtr && Elementwing->targetPtr->localData->ataFrom <50*DTR)result++;

	cmp	DWORD PTR _Elementwing$[ebp], 0
	je	SHORT $LN1@HowManyHot
	mov	edx, DWORD PTR _Elementwing$[ebp]
	cmp	DWORD PTR [edx+656], 0
	je	SHORT $LN1@HowManyHot
	mov	eax, DWORD PTR _Elementwing$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	mov	edx, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR __real@3f5f66f1
	comiss	xmm0, DWORD PTR [edx+4]
	jbe	SHORT $LN1@HowManyHot
	mov	eax, DWORD PTR _result$[ebp]
	add	eax, 1
	mov	DWORD PTR _result$[ebp], eax
$LN1@HowManyHot:

; 2344 : 	return result;

	mov	eax, DWORD PTR _result$[ebp]

; 2345 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HowManyHotnosed@DigitalBrain@@IAEHXZ ENDP		; DigitalBrain::HowManyHotnosed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_spikesecondselement$ = -24				; size = 4
_secondwingman$ = -20					; size = 4
_elementlead$ = -16					; size = 4
_wingman$ = -12						; size = 4
_result$ = -8						; size = 4
_this$ = -4						; size = 4
?HowManySpiked@DigitalBrain@@IAEHXZ PROC		; DigitalBrain::HowManySpiked
; _this$ = ecx

; 1903 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1904 : 	int result = 0;

	mov	DWORD PTR _result$[ebp], 0

; 1905 : 
; 1906 : 	AircraftClass *wingman = NULL;

	mov	DWORD PTR _wingman$[ebp], 0

; 1907 : 	AircraftClass *secondwingman = NULL;

	mov	DWORD PTR _secondwingman$[ebp], 0

; 1908 : 	AircraftClass *elementlead = NULL;  

	mov	DWORD PTR _elementlead$[ebp], 0

; 1909 : 	//the Isflightleads wingie
; 1910 : 	if (self->vehicleInUnit == 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movzx	edx, BYTE PTR [ecx+664]
	test	edx, edx
	jne	SHORT $LN14@HowManySpi

; 1911 : 	{
; 1912 : 	wingman = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _wingman$[ebp], eax
$LN14@HowManySpi:

; 1913 : 	}
; 1914 : 
; 1915 : 	// the elements lead wingie
; 1916 : 	if (self->vehicleInUnit == 2)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	movzx	eax, BYTE PTR [edx+664]
	cmp	eax, 2
	jne	SHORT $LN13@HowManySpi

; 1917 : 	wingman = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(3);

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _wingman$[ebp], eax
$LN13@HowManySpi:

; 1918 : 
; 1919 : 	//we are flightlead
; 1920 : 	if (self->vehicleInUnit == 0)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	movzx	ecx, BYTE PTR [eax+664]
	test	ecx, ecx
	jne	SHORT $LN12@HowManySpi

; 1921 : 	{
; 1922 : 	elementlead = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(2);

	push	2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _elementlead$[ebp], eax

; 1923 : 	secondwingman = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(3);

	push	3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _secondwingman$[ebp], eax
$LN12@HowManySpi:

; 1924 : 	}
; 1925 : 	//we are element lead
; 1926 : 	if (self->vehicleInUnit == 2)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	movzx	eax, BYTE PTR [edx+664]
	cmp	eax, 2
	jne	SHORT $LN11@HowManySpi

; 1927 : 	{
; 1928 : 	elementlead = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _elementlead$[ebp], eax

; 1929 : 	secondwingman = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(1);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _secondwingman$[ebp], eax
$LN11@HowManySpi:

; 1930 : 	}
; 1931 : 
; 1932 : 	spiked = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+596], 0

; 1933 : 	if (SpikeCheck (self)) spiked = true;

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	?SpikeCheck@@YAPAVFalconEntity@@PAVAircraftClass@@PAV1@PAH@Z ; SpikeCheck
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN10@HowManySpi
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+596], 1
$LN10@HowManySpi:

; 1934 : 
; 1935 : 	if (spiked) // we are spiked by someone the flight is targeted to..

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+596]
	test	edx, edx
	je	SHORT $LN9@HowManySpi

; 1936 : 	{
; 1937 : 		// first our own spike
; 1938 : 		 if (SpikeCheck (self) != lastspikeent)

	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	?SpikeCheck@@YAPAVFalconEntity@@PAVAircraftClass@@PAV1@PAH@Z ; SpikeCheck
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+652]
	je	SHORT $LN8@HowManySpi

; 1939 : 			  {
; 1940 : 			  lastspikeent = SpikeCheck (self) ;

	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	?SpikeCheck@@YAPAVFalconEntity@@PAVAircraftClass@@PAV1@PAH@Z ; SpikeCheck
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+652], eax

; 1941 : 			  spiketframetime = SimLibElapsedTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [eax+648], ecx
	jmp	SHORT $LN7@HowManySpi
$LN8@HowManySpi:

; 1942 : 			  }
; 1943 : 		 else spikeseconds = (SimLibElapsedTime - spiketframetime)/CampaignSeconds;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	eax, DWORD PTR [edx+648]
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+604], eax
$LN7@HowManySpi:

; 1944 : 	}
; 1945 : 	else 

	jmp	SHORT $LN6@HowManySpi
$LN9@HowManySpi:

; 1946 : 	{
; 1947 : 		 spikeseconds = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+604], 0

; 1948 : 		 lastspikeent = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+652], 0

; 1949 : 		 spikesecondselement = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+608], 0
$LN6@HowManySpi:

; 1950 : 	}
; 1951 : 
; 1952 : 	VU_TIME spikesecondselement = spikeseconds;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+604]
	mov	DWORD PTR _spikesecondselement$[ebp], ecx

; 1953 : 	if (wingman && wingman->DBrain()->spikeseconds > spikesecondselement) 

	cmp	DWORD PTR _wingman$[ebp], 0
	je	SHORT $LN5@HowManySpi
	mov	ecx, DWORD PTR _wingman$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	edx, DWORD PTR [eax+604]
	cmp	edx, DWORD PTR _spikesecondselement$[ebp]
	jbe	SHORT $LN5@HowManySpi

; 1954 : 	spikesecondselement = wingman->DBrain()->spikeseconds;

	mov	ecx, DWORD PTR _wingman$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	eax, DWORD PTR [eax+604]
	mov	DWORD PTR _spikesecondselement$[ebp], eax
$LN5@HowManySpi:

; 1955 : 
; 1956 : 
; 1957 : 	if (spiked) result ++;

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+596]
	test	edx, edx
	je	SHORT $LN4@HowManySpi
	mov	eax, DWORD PTR _result$[ebp]
	add	eax, 1
	mov	DWORD PTR _result$[ebp], eax
$LN4@HowManySpi:

; 1958 : 	if (wingman && wingman->DBrain()->spiked) result ++;

	cmp	DWORD PTR _wingman$[ebp], 0
	je	SHORT $LN3@HowManySpi
	mov	ecx, DWORD PTR _wingman$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	movzx	ecx, BYTE PTR [eax+596]
	test	ecx, ecx
	je	SHORT $LN3@HowManySpi
	mov	edx, DWORD PTR _result$[ebp]
	add	edx, 1
	mov	DWORD PTR _result$[ebp], edx
$LN3@HowManySpi:

; 1959 : 	if (elementlead && elementlead->DBrain()->spiked) result ++;

	cmp	DWORD PTR _elementlead$[ebp], 0
	je	SHORT $LN2@HowManySpi
	mov	ecx, DWORD PTR _elementlead$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	movzx	eax, BYTE PTR [eax+596]
	test	eax, eax
	je	SHORT $LN2@HowManySpi
	mov	ecx, DWORD PTR _result$[ebp]
	add	ecx, 1
	mov	DWORD PTR _result$[ebp], ecx
$LN2@HowManySpi:

; 1960 : 	if (secondwingman && secondwingman->DBrain()->spiked) result ++;

	cmp	DWORD PTR _secondwingman$[ebp], 0
	je	SHORT $LN1@HowManySpi
	mov	ecx, DWORD PTR _secondwingman$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	movzx	edx, BYTE PTR [eax+596]
	test	edx, edx
	je	SHORT $LN1@HowManySpi
	mov	eax, DWORD PTR _result$[ebp]
	add	eax, 1
	mov	DWORD PTR _result$[ebp], eax
$LN1@HowManySpi:

; 1961 : 	return result;

	mov	eax, DWORD PTR _result$[ebp]

; 1962 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HowManySpiked@DigitalBrain@@IAEHXZ ENDP		; DigitalBrain::HowManySpiked
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_Elementwing$ = -20					; size = 4
_elementlead$ = -16					; size = 4
_Mywing$ = -12						; size = 4
_result$ = -8						; size = 4
_this$ = -4						; size = 4
?WhoIsHotnosed@DigitalBrain@@IAEHXZ PROC		; DigitalBrain::WhoIsHotnosed
; _this$ = ecx

; 2348 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 2349 : 	int	result = 0;

	mov	DWORD PTR _result$[ebp], 0

; 2350 : 	AircraftClass *elementlead = NULL;

	mov	DWORD PTR _elementlead$[ebp], 0

; 2351 : 	AircraftClass *Mywing = NULL;

	mov	DWORD PTR _Mywing$[ebp], 0

; 2352 : 	AircraftClass *Elementwing = NULL;

	mov	DWORD PTR _Elementwing$[ebp], 0

; 2353 : 	if (self->vehicleInUnit == 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movzx	edx, BYTE PTR [ecx+664]
	test	edx, edx
	jne	SHORT $LN6@WhoIsHotno

; 2354 : 	{
; 2355 : 		elementlead = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(2);

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _elementlead$[ebp], eax

; 2356 : 		Mywing = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _Mywing$[ebp], eax

; 2357 : 		Elementwing = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(3);

	push	3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _Elementwing$[ebp], eax
$LN6@WhoIsHotno:

; 2358 : 	}
; 2359 : 	//we are element lead
; 2360 : 	if (self->vehicleInUnit == 2)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movzx	edx, BYTE PTR [ecx+664]
	cmp	edx, 2
	jne	SHORT $LN5@WhoIsHotno

; 2361 : 	{
; 2362 : 		elementlead = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _elementlead$[ebp], eax

; 2363 : 		Mywing = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(3);

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _Mywing$[ebp], eax

; 2364 : 		Elementwing = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(1);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _Elementwing$[ebp], eax
$LN5@WhoIsHotno:

; 2365 : 	}
; 2366 : 
; 2367 : 	if (self->targetPtr && self->targetPtr->localData->ataFrom < g_fHotNoseAngle*DTR) // 2002-03-22 MODIFIED BY S.G. Here and below, replaced 50 by g_fHotNoseAngle so it's configurable

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	cmp	DWORD PTR [ecx+656], 0
	je	SHORT $LN4@WhoIsHotno
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+656]
	mov	edx, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR ?g_fHotNoseAngle@@3MA
	mulss	xmm0, DWORD PTR __real@3c8efa34
	comiss	xmm0, DWORD PTR [edx+4]
	jbe	SHORT $LN4@WhoIsHotno

; 2368 : 		result +=8;

	mov	eax, DWORD PTR _result$[ebp]
	add	eax, 8
	mov	DWORD PTR _result$[ebp], eax
$LN4@WhoIsHotno:

; 2369 : 	if (Mywing && Mywing->targetPtr && Mywing->targetPtr->localData->ataFrom < g_fHotNoseAngle*DTR)

	cmp	DWORD PTR _Mywing$[ebp], 0
	je	SHORT $LN3@WhoIsHotno
	mov	ecx, DWORD PTR _Mywing$[ebp]
	cmp	DWORD PTR [ecx+656], 0
	je	SHORT $LN3@WhoIsHotno
	mov	edx, DWORD PTR _Mywing$[ebp]
	mov	eax, DWORD PTR [edx+656]
	mov	ecx, DWORD PTR [eax+12]
	movss	xmm0, DWORD PTR ?g_fHotNoseAngle@@3MA
	mulss	xmm0, DWORD PTR __real@3c8efa34
	comiss	xmm0, DWORD PTR [ecx+4]
	jbe	SHORT $LN3@WhoIsHotno

; 2370 : 		result +=4;

	mov	edx, DWORD PTR _result$[ebp]
	add	edx, 4
	mov	DWORD PTR _result$[ebp], edx
$LN3@WhoIsHotno:

; 2371 : 	if (elementlead && elementlead->targetPtr && elementlead->targetPtr->localData->ataFrom < g_fHotNoseAngle*DTR)

	cmp	DWORD PTR _elementlead$[ebp], 0
	je	SHORT $LN2@WhoIsHotno
	mov	eax, DWORD PTR _elementlead$[ebp]
	cmp	DWORD PTR [eax+656], 0
	je	SHORT $LN2@WhoIsHotno
	mov	ecx, DWORD PTR _elementlead$[ebp]
	mov	edx, DWORD PTR [ecx+656]
	mov	eax, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR ?g_fHotNoseAngle@@3MA
	mulss	xmm0, DWORD PTR __real@3c8efa34
	comiss	xmm0, DWORD PTR [eax+4]
	jbe	SHORT $LN2@WhoIsHotno

; 2372 : 		result +=2;

	mov	ecx, DWORD PTR _result$[ebp]
	add	ecx, 2
	mov	DWORD PTR _result$[ebp], ecx
$LN2@WhoIsHotno:

; 2373 : 	if (Elementwing && Elementwing->targetPtr && Elementwing->targetPtr->localData->ataFrom < g_fHotNoseAngle*DTR)

	cmp	DWORD PTR _Elementwing$[ebp], 0
	je	SHORT $LN1@WhoIsHotno
	mov	edx, DWORD PTR _Elementwing$[ebp]
	cmp	DWORD PTR [edx+656], 0
	je	SHORT $LN1@WhoIsHotno
	mov	eax, DWORD PTR _Elementwing$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	mov	edx, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR ?g_fHotNoseAngle@@3MA
	mulss	xmm0, DWORD PTR __real@3c8efa34
	comiss	xmm0, DWORD PTR [edx+4]
	jbe	SHORT $LN1@WhoIsHotno

; 2374 : 		result +=1;

	mov	eax, DWORD PTR _result$[ebp]
	add	eax, 1
	mov	DWORD PTR _result$[ebp], eax
$LN1@WhoIsHotno:

; 2375 : 	return result;

	mov	eax, DWORD PTR _result$[ebp]

; 2376 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?WhoIsHotnosed@DigitalBrain@@IAEHXZ ENDP		; DigitalBrain::WhoIsHotnosed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_spikesecondselement$ = -24				; size = 4
_secondwingman$ = -20					; size = 4
_elementlead$ = -16					; size = 4
_wingman$ = -12						; size = 4
_result$ = -8						; size = 4
_this$ = -4						; size = 4
?WhoIsSpiked@DigitalBrain@@IAEHXZ PROC			; DigitalBrain::WhoIsSpiked
; _this$ = ecx

; 1964 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1965 : 	int result = 0;

	mov	DWORD PTR _result$[ebp], 0

; 1966 : 
; 1967 : 	AircraftClass *wingman = NULL;

	mov	DWORD PTR _wingman$[ebp], 0

; 1968 : 	AircraftClass *secondwingman = NULL;

	mov	DWORD PTR _secondwingman$[ebp], 0

; 1969 : 	AircraftClass *elementlead = NULL;  

	mov	DWORD PTR _elementlead$[ebp], 0

; 1970 : 	//the Isflightleads wingie
; 1971 : 	if (self->vehicleInUnit == 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movzx	edx, BYTE PTR [ecx+664]
	test	edx, edx
	jne	SHORT $LN15@WhoIsSpike

; 1972 : 	{
; 1973 : 	wingman = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _wingman$[ebp], eax
$LN15@WhoIsSpike:

; 1974 : 	}
; 1975 : 
; 1976 : 	// the elements lead wingie
; 1977 : 	if (self->vehicleInUnit == 2)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	movzx	eax, BYTE PTR [edx+664]
	cmp	eax, 2
	jne	SHORT $LN14@WhoIsSpike

; 1978 : 	wingman = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(3);

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _wingman$[ebp], eax
$LN14@WhoIsSpike:

; 1979 : 
; 1980 : 	//we are flightlead
; 1981 : 	if (self->vehicleInUnit == 0)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	movzx	ecx, BYTE PTR [eax+664]
	test	ecx, ecx
	jne	SHORT $LN13@WhoIsSpike

; 1982 : 	{
; 1983 : 	elementlead = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(2);

	push	2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _elementlead$[ebp], eax

; 1984 : 	secondwingman = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(3);

	push	3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _secondwingman$[ebp], eax
$LN13@WhoIsSpike:

; 1985 : 	}
; 1986 : 	//we are element lead
; 1987 : 	if (self->vehicleInUnit == 2)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	movzx	eax, BYTE PTR [edx+664]
	cmp	eax, 2
	jne	SHORT $LN12@WhoIsSpike

; 1988 : 	{
; 1989 : 	elementlead = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _elementlead$[ebp], eax

; 1990 : 	secondwingman = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(1);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _secondwingman$[ebp], eax
$LN12@WhoIsSpike:

; 1991 : 	}
; 1992 : 
; 1993 : 	spiked = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+596], 0

; 1994 : 	if (SpikeCheck (self)) spiked = true;

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	?SpikeCheck@@YAPAVFalconEntity@@PAVAircraftClass@@PAV1@PAH@Z ; SpikeCheck
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN11@WhoIsSpike
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+596], 1
$LN11@WhoIsSpike:

; 1995 : 
; 1996 : 	if (spiked) // we are spiked by someone the flight is targeted to..

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+596]
	test	edx, edx
	je	SHORT $LN10@WhoIsSpike

; 1997 : 	{
; 1998 : 		// first our own spike
; 1999 : 		 if (SpikeCheck (self) != lastspikeent)

	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	?SpikeCheck@@YAPAVFalconEntity@@PAVAircraftClass@@PAV1@PAH@Z ; SpikeCheck
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+652]
	je	SHORT $LN9@WhoIsSpike

; 2000 : 			  {
; 2001 : 			  lastspikeent = SpikeCheck (self) ;

	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	?SpikeCheck@@YAPAVFalconEntity@@PAVAircraftClass@@PAV1@PAH@Z ; SpikeCheck
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+652], eax

; 2002 : 			  spiketframetime = SimLibElapsedTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [eax+648], ecx
	jmp	SHORT $LN8@WhoIsSpike
$LN9@WhoIsSpike:

; 2003 : 			  }
; 2004 : 		 else spikeseconds = (SimLibElapsedTime - spiketframetime)/CampaignSeconds;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	eax, DWORD PTR [edx+648]
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+604], eax
$LN8@WhoIsSpike:

; 2005 : 	}
; 2006 : 	else 

	jmp	SHORT $LN7@WhoIsSpike
$LN10@WhoIsSpike:

; 2007 : 	{
; 2008 : 		 spikeseconds = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+604], 0

; 2009 : 		 lastspikeent = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+652], 0

; 2010 : 		 spikesecondselement = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+608], 0
$LN7@WhoIsSpike:

; 2011 : 	}
; 2012 : 
; 2013 : 	VU_TIME spikesecondselement = spikeseconds;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+604]
	mov	DWORD PTR _spikesecondselement$[ebp], ecx

; 2014 : 	if (wingman && wingman->DBrain()->spikeseconds > spikesecondselement) 

	cmp	DWORD PTR _wingman$[ebp], 0
	je	SHORT $LN6@WhoIsSpike
	mov	ecx, DWORD PTR _wingman$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	edx, DWORD PTR [eax+604]
	cmp	edx, DWORD PTR _spikesecondselement$[ebp]
	jbe	SHORT $LN6@WhoIsSpike

; 2015 : 	spikesecondselement = wingman->DBrain()->spikeseconds;

	mov	ecx, DWORD PTR _wingman$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	eax, DWORD PTR [eax+604]
	mov	DWORD PTR _spikesecondselement$[ebp], eax
$LN6@WhoIsSpike:

; 2016 : 
; 2017 : 
; 2018 : 	if (spiked) result = 8;

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+596]
	test	edx, edx
	je	SHORT $LN5@WhoIsSpike
	mov	DWORD PTR _result$[ebp], 8
$LN5@WhoIsSpike:

; 2019 : 	if (wingman && wingman->DBrain()->spiked) result += 4;

	cmp	DWORD PTR _wingman$[ebp], 0
	je	SHORT $LN4@WhoIsSpike
	mov	ecx, DWORD PTR _wingman$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	movzx	eax, BYTE PTR [eax+596]
	test	eax, eax
	je	SHORT $LN4@WhoIsSpike
	mov	ecx, DWORD PTR _result$[ebp]
	add	ecx, 4
	mov	DWORD PTR _result$[ebp], ecx
$LN4@WhoIsSpike:

; 2020 : 	if (elementlead && elementlead->DBrain()->spiked) result += 2;

	cmp	DWORD PTR _elementlead$[ebp], 0
	je	SHORT $LN3@WhoIsSpike
	mov	ecx, DWORD PTR _elementlead$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	movzx	edx, BYTE PTR [eax+596]
	test	edx, edx
	je	SHORT $LN3@WhoIsSpike
	mov	eax, DWORD PTR _result$[ebp]
	add	eax, 2
	mov	DWORD PTR _result$[ebp], eax
$LN3@WhoIsSpike:

; 2021 : 	if (secondwingman && secondwingman->DBrain()->spiked) result += 1;

	cmp	DWORD PTR _secondwingman$[ebp], 0
	je	SHORT $LN2@WhoIsSpike
	mov	ecx, DWORD PTR _secondwingman$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	movzx	ecx, BYTE PTR [eax+596]
	test	ecx, ecx
	je	SHORT $LN2@WhoIsSpike
	mov	edx, DWORD PTR _result$[ebp]
	add	edx, 1
	mov	DWORD PTR _result$[ebp], edx
$LN2@WhoIsSpike:

; 2022 : 
; 2023 : 	//Cobra Remove the scene of a CTD
; 2024 : 	//let's just do the who is hot nosed thing
; 2025 : 	if (WhoIsHotnosed() >3)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?WhoIsHotnosed@DigitalBrain@@IAEHXZ	; DigitalBrain::WhoIsHotnosed
	cmp	eax, 3
	jle	SHORT $LN1@WhoIsSpike

; 2026 : 		{
; 2027 : 			result += 16;

	mov	eax, DWORD PTR _result$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
$LN1@WhoIsSpike:

; 2028 : 		}
; 2029 : 	/*CampBaseClass *campBaseObj;
; 2030 : 	if (targetPtr->BaseData()->IsSim())
; 2031 : 		campBaseObj = ((SimBaseClass*)targetPtr->BaseData())->GetCampaignObject();
; 2032 : 	else
; 2033 : 		campBaseObj = ((CampBaseClass *)targetPtr->BaseData());
; 2034 : 
; 2035 : 	// If it doesn't have a campaign object or it's identified... END OF ADDED SECTION plus the use of campBaseObj below
; 2036 : 	if ( !campBaseObj || campBaseObj->GetIdentified(self->GetTeam()))
; 2037 : 	{
; 2038 : 		RadarClass* theRadar = (RadarClass*)FindSensor(((SimMoverClass*)targetPtr->BaseData()), SensorClass::Radar);
; 2039 : 		if (theRadar) 
; 2040 : 		{
; 2041 : 		RadarDataSet* radarData = &radarDatFileTable[self->GetRadarType()];
; 2042 : 		if (radarData->MaxTwstargets != 0)
; 2043 : 			{
; 2044 : 				if (WhoIsHotnosed() >3)
; 2045 : 				{
; 2046 : 					result += 16;
; 2047 : 				}
; 2048 : 			}
; 2049 : 		}
; 2050 : 	}*/
; 2051 : 
; 2052 : 	return result;

	mov	eax, DWORD PTR _result$[ebp]

; 2053 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?WhoIsSpiked@DigitalBrain@@IAEHXZ ENDP			; DigitalBrain::WhoIsSpiked
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_elementlead$ = -20					; size = 4
_radar$ = -16						; size = 4
_result$ = -12						; size = 4
_wingman$ = -8						; size = 4
_this$ = -4						; size = 4
?IsSupportignmissile@DigitalBrain@@IAEHXZ PROC		; DigitalBrain::IsSupportignmissile
; _this$ = ecx

; 2190 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 2191 : 	int result = 0;

	mov	DWORD PTR _result$[ebp], 0

; 2192 : 	// 0 noone has a missile in the air or its post pitbull
; 2193 : 	// 1 self pre pitbull
; 2194 : 	// 2 wingie prepitbull
; 2195 : 	// 3 both pre pitbull
; 2196 : 	AircraftClass *wingman = NULL;

	mov	DWORD PTR _wingman$[ebp], 0

; 2197 : 	AircraftClass *elementlead = NULL;

	mov	DWORD PTR _elementlead$[ebp], 0

; 2198 : 
; 2199 : // find the pointers to wingie, lead and element lead  
; 2200 : 	//the Isflightleads wingie
; 2201 : 	if (self->vehicleInUnit == 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movzx	edx, BYTE PTR [ecx+664]
	test	edx, edx
	jne	SHORT $LN6@IsSupporti

; 2202 : 	wingman = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _wingman$[ebp], eax
$LN6@IsSupporti:

; 2203 : 	// the elements lead wingie
; 2204 : 	if (self->vehicleInUnit == 2)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	movzx	eax, BYTE PTR [edx+664]
	cmp	eax, 2
	jne	SHORT $LN5@IsSupporti

; 2205 : 	wingman = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(3);

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _wingman$[ebp], eax
$LN5@IsSupporti:

; 2206 : 	
; 2207 : //me123 advanced bvr tactics we have a missile in the air
; 2208 : // ADDED BY S.G. SO DIGI PILOT SHOOTING SARH WONT GET SCARED RIGHT AWAY
; 2209 : 	RadarClass* radar = (RadarClass*)FindSensor( self, SensorClass::Radar );

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _radar$[ebp], eax

; 2210 : 	if (radar->CurrentTarget() && radar->CurrentTarget()->localData->sensorState[SensorClass::Radar] == SensorClass::NoTrack) {

	mov	ecx, DWORD PTR _radar$[ebp]
	call	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
	test	eax, eax
	je	SHORT $LN4@IsSupporti
	mov	ecx, DWORD PTR _radar$[ebp]
	call	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, 4
	shl	edx, 0
	cmp	DWORD PTR [ecx+edx+192], 0
	jne	SHORT $LN4@IsSupporti

; 2211 : 		if (missileFiredEntity)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+416], 0
	je	SHORT $LN3@IsSupporti

; 2212 : 			VuDeReferenceEntity(missileFiredEntity); // 2002-03-13 ADDED BY S.G. Must dereference it or it will cause memory leak...

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+416]
	push	edx
	call	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z ; VuDeReferenceEntity
	add	esp, 4
$LN3@IsSupporti:

; 2213 : 		missileFiredEntity = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+416], 0
$LN4@IsSupporti:

; 2214 : 	}
; 2215 : 
; 2216 : 	// MODIFIED BY S.G. Can't rely on this... I've seen missile still being guided that told they were not being guided. Use the radar of the missile (can't miss with that)
; 2217 : 	if (missileFiredEntity && ((SimWeaponClass *)missileFiredEntity)->sensorArray[0]->Type() == SensorClass::RadarHoming && ((SimWeaponClass *)missileFiredEntity)->GetSPType() != SPTYPE_AIM120)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+416], 0
	je	SHORT $LN2@IsSupporti
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+416]
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR [eax+648]
	mov	ecx, DWORD PTR [edx+ecx]
	call	?Type@SensorClass@@QAE?AW4SensorType@1@XZ ; SensorClass::Type
	cmp	eax, 6
	jne	SHORT $LN2@IsSupporti
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+416]
	call	?GetSPType@SimBaseClass@@QBEEXZ		; SimBaseClass::GetSPType
	movzx	ecx, al
	cmp	ecx, 13					; 0000000dH
	je	SHORT $LN2@IsSupporti

; 2218 : 		result = 1;

	mov	DWORD PTR _result$[ebp], 1
$LN2@IsSupporti:

; 2219 : /*	if (missileFiredEntity && 
; 2220 : 		(((SimWeaponClass *)missileFiredEntity)->sensorArray[0]->Type() == SensorClass::RadarHoming ||
; 2221 : 		((SimWeaponClass *)missileFiredEntity)->sensorArray[0]->Type() == SensorClass::Radar ))
; 2222 : 	{
; 2223 : 		if (self->FCC->lastMissileImpactTime > (((MissileClass *)missileFiredEntity)->GetActiveTime(0.0f, 0.0f, 0.0f, 0.0f, 0.0f)))
; 2224 : 			result = 1;
; 2225 : 		else if (((SimWeaponClass *)missileFiredEntity)->sensorArray[0]->Type() == SensorClass::Radar)
; 2226 : 			result = result;
; 2227 : 	}
; 2228 : */
; 2229 : 	// MODIFIED BY S.G. Can't rely on this... I've seen missile still being guided that told they were not being guided. Use the radar of the missile (can't miss with that)
; 2230 : 	if (wingman && wingman->DBrain()->missileFiredEntity && ((SimWeaponClass *)wingman->DBrain()->missileFiredEntity)->sensorArray[0]->Type() == SensorClass::RadarHoming)

	cmp	DWORD PTR _wingman$[ebp], 0
	je	SHORT $LN1@IsSupporti
	mov	ecx, DWORD PTR _wingman$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+416], 0
	je	SHORT $LN1@IsSupporti
	mov	ecx, DWORD PTR _wingman$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	edx, DWORD PTR [eax+416]
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR [edx+648]
	mov	ecx, DWORD PTR [ecx+eax]
	call	?Type@SensorClass@@QAE?AW4SensorType@1@XZ ; SensorClass::Type
	cmp	eax, 6
	jne	SHORT $LN1@IsSupporti

; 2231 : 		result += 2;

	mov	edx, DWORD PTR _result$[ebp]
	add	edx, 2
	mov	DWORD PTR _result$[ebp], edx
$LN1@IsSupporti:

; 2232 : /*	if (wingman && 
; 2233 : 		wingman->DBrain()->missileFiredEntity && 
; 2234 : 		(((SimWeaponClass *)wingman->DBrain()->missileFiredEntity)->sensorArray[0]->Type() == SensorClass::RadarHoming ||
; 2235 : 		((SimWeaponClass *)wingman->DBrain()->missileFiredEntity)->sensorArray[0]->Type() == SensorClass::Radar ))
; 2236 : 	{
; 2237 : 		if (wingman->FCC->lastMissileImpactTime > (((MissileClass *)wingman->DBrain()->missileFiredEntity)->GetActiveTime(0.0f, 0.0f, 0.0f, 0.0f, 0.0f)))
; 2238 : 			result += 2;
; 2239 : 		else if (((SimWeaponClass *)wingman->DBrain()->missileFiredEntity)->sensorArray[0]->Type() == SensorClass::Radar)
; 2240 : 			result = result;
; 2241 : 	}
; 2242 : */
; 2243 : 	return result;

	mov	eax, DWORD PTR _result$[ebp]

; 2244 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsSupportignmissile@DigitalBrain@@IAEHXZ ENDP		; DigitalBrain::IsSupportignmissile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_tfloor$ = -80						; size = 4
_gainCtrl$ = -76					; size = 4
tv765 = -72						; size = 4
tv772 = -68						; size = 4
tv128 = -64						; size = 4
tv269 = -60						; size = 4
_tceil$ = -56						; size = 4
_theRadar$1 = -52					; size = 4
_this$ = -48						; size = 4
_tmpchr$ = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
?BvrEngage@DigitalBrain@@IAEXXZ PROC			; DigitalBrain::BvrEngage
; _this$ = ecx

; 209  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 210  : 
; 211  :    float tfloor, tceil, gainCtrl;
; 212  : 
; 213  : // 2002-01-27 MN No need to go through all the stuff if we need to avoid the ground
; 214  :    if(groundAvoidNeeded)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	SHORT $LN91@BvrEngage

; 215  : 	   return;   

	jmp	$LN92@BvrEngage
$LN91@BvrEngage:

; 216  :    
; 217  :    /*-------------------*/
; 218  :    /* bail if no target */
; 219  :    /*-------------------*/
; 220  :    if (targetPtr == NULL)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN90@BvrEngage

; 221  :    {
; 222  :       return;

	jmp	$LN92@BvrEngage
$LN90@BvrEngage:

; 223  :    }
; 224  : 
; 225  : 	WhoIsSpiked(); //sets the timers and spikestatus

	mov	ecx, DWORD PTR _this$[ebp]
	call	?WhoIsSpiked@DigitalBrain@@IAEHXZ	; DigitalBrain::WhoIsSpiked

; 226  : 
; 227  : 	#ifdef MANEUVER_DEBUG
; 228  : 	char tmpchr[40];
; 229  : 	#endif
; 230  : 
; 231  : 	// do we need to evaluate our position?
; 232  : 	if (bvrTacticTimer < SimLibElapsedTime || targetPtr != lastTarget || 
; 233  : 		 missilelasttime != missileFiredEntity)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+592]
	cmp	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	jb	SHORT $LN88@BvrEngage
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, DWORD PTR [edx+16]
	jne	SHORT $LN88@BvrEngage
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+644]
	cmp	eax, DWORD PTR [edx+416]
	je	SHORT $LN89@BvrEngage
$LN88@BvrEngage:

; 234  : 	{
; 235  : 		// run logic for next tactic
; 236  : 		BvrChooseTactic();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?BvrChooseTactic@DigitalBrain@@IAEXXZ	; DigitalBrain::BvrChooseTactic
$LN89@BvrEngage:

; 237  : 	}
; 238  : 	missilelasttime = missileFiredEntity;	

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+416]
	mov	DWORD PTR [ecx+644], eax

; 239  : 
; 240  : 	// Execute selected intercept type
; 241  : 	af->SetSimpleMode( SIMPLE_MODE_OFF );//me123 make sure we are out of simple mode

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	call	?SetSimpleMode@AirframeClass@@QAEXH@Z	; AirframeClass::SetSimpleMode

; 242  : 	
; 243  :    switch (bvrCurrTactic)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+636]
	mov	DWORD PTR tv128[ebp], eax
	cmp	DWORD PTR tv128[ebp], 21		; 00000015H
	ja	$LN86@BvrEngage
	mov	ecx, DWORD PTR tv128[ebp]
	jmp	DWORD PTR $LN96@BvrEngage[ecx*4]
$LN85@BvrEngage:

; 244  :    {
; 245  : 		case BvrPump:
; 246  : 	   DragManeuver();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DragManeuver@DigitalBrain@@IAEXXZ	; DigitalBrain::DragManeuver

; 247  : #ifdef MANEUVER_DEBUG
; 248  : 	   sprintf(tmpchr,"%s","BvrDrag");

	push	OFFSET ??_C@_07DHNLGGDE@BvrDrag?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	edx, DWORD PTR _tmpchr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 249  : #endif
; 250  : 
; 251  : 	   break;		

	jmp	$LN86@BvrEngage
$LN84@BvrEngage:

; 252  : 		case BvrCrank:
; 253  : 	   CrankManeuver(0,0);

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CrankManeuver@DigitalBrain@@IAEXHH@Z	; DigitalBrain::CrankManeuver

; 254  : #ifdef MANEUVER_DEBUG
; 255  : 		sprintf(tmpchr,"%s","BvrCrank");

	push	OFFSET ??_C@_08LFFOJGII@BvrCrank?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	eax, DWORD PTR _tmpchr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 256  : #endif
; 257  : 
; 258  : 	   break;

	jmp	$LN86@BvrEngage
$LN83@BvrEngage:

; 259  : 		case BvrCrankRight:
; 260  : 	   CrankManeuver(offRight, 0);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CrankManeuver@DigitalBrain@@IAEXHH@Z	; DigitalBrain::CrankManeuver

; 261  : #ifdef MANEUVER_DEBUG
; 262  : 		sprintf(tmpchr,"%s","BvrCrank");

	push	OFFSET ??_C@_08LFFOJGII@BvrCrank?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	ecx, DWORD PTR _tmpchr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 263  : #endif
; 264  : 
; 265  : 	   break;

	jmp	$LN86@BvrEngage
$LN82@BvrEngage:

; 266  : 		case BvrCrankLeft:
; 267  : 	   CrankManeuver(offLeft, 0);

	push	0
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CrankManeuver@DigitalBrain@@IAEXHH@Z	; DigitalBrain::CrankManeuver

; 268  : #ifdef MANEUVER_DEBUG
; 269  : 		sprintf(tmpchr,"%s","BvrCrank");

	push	OFFSET ??_C@_08LFFOJGII@BvrCrank?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	edx, DWORD PTR _tmpchr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 270  : #endif
; 271  : 
; 272  : 	   break;

	jmp	$LN86@BvrEngage
$LN81@BvrEngage:

; 273  : 	   	case BvrCrankHi:
; 274  : 	   CrankManeuver(0, 1);

	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CrankManeuver@DigitalBrain@@IAEXHH@Z	; DigitalBrain::CrankManeuver

; 275  : #ifdef MANEUVER_DEBUG
; 276  : 		sprintf(tmpchr,"%s","BvrCrankHi");

	push	OFFSET ??_C@_0L@CAIAJNPK@BvrCrankHi?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	eax, DWORD PTR _tmpchr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 277  : #endif
; 278  : 
; 279  : 	   break;

	jmp	$LN86@BvrEngage
$LN80@BvrEngage:

; 280  : 	   	case BvrCrankLo:
; 281  : 	   CrankManeuver(0, 2);

	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CrankManeuver@DigitalBrain@@IAEXHH@Z	; DigitalBrain::CrankManeuver

; 282  : #ifdef MANEUVER_DEBUG
; 283  : 		sprintf(tmpchr,"%s","BvrCrankLo");

	push	OFFSET ??_C@_0L@HBNDJCKA@BvrCrankLo?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	ecx, DWORD PTR _tmpchr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 284  : #endif
; 285  : 
; 286  : 	   break;

	jmp	$LN86@BvrEngage
$LN79@BvrEngage:

; 287  : 	   	case BvrCrankRightHi:
; 288  : 	   CrankManeuver(offRight, 2);

	push	2
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CrankManeuver@DigitalBrain@@IAEXHH@Z	; DigitalBrain::CrankManeuver

; 289  : #ifdef MANEUVER_DEBUG
; 290  : 		sprintf(tmpchr,"%s","BvrCrankRightHi");

	push	OFFSET ??_C@_0BA@EGDMFLHH@BvrCrankRightHi?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	edx, DWORD PTR _tmpchr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 291  : #endif
; 292  : 
; 293  : 	   break;

	jmp	$LN86@BvrEngage
$LN78@BvrEngage:

; 294  : 	   	case BvrCrankRightLo:
; 295  : 	   CrankManeuver(offRight, 2);

	push	2
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CrankManeuver@DigitalBrain@@IAEXHH@Z	; DigitalBrain::CrankManeuver

; 296  : #ifdef MANEUVER_DEBUG
; 297  : 		sprintf(tmpchr,"%s","BvrCrankRightLo");

	push	OFFSET ??_C@_0BA@BHGPFECN@BvrCrankRightLo?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	eax, DWORD PTR _tmpchr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 298  : #endif
; 299  : 
; 300  : 	   break;

	jmp	$LN86@BvrEngage
$LN77@BvrEngage:

; 301  : 	   	case BvrCrankLeftHi:
; 302  : 	   CrankManeuver(offLeft, 2);

	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CrankManeuver@DigitalBrain@@IAEXHH@Z	; DigitalBrain::CrankManeuver

; 303  : #ifdef MANEUVER_DEBUG
; 304  : 		sprintf(tmpchr,"%s","BvrCrankLeftHi");

	push	OFFSET ??_C@_0P@KHOJDIDL@BvrCrankLeftHi?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	ecx, DWORD PTR _tmpchr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 305  : #endif
; 306  : 
; 307  : 	   break;

	jmp	$LN86@BvrEngage
$LN76@BvrEngage:

; 308  : 	   	case BvrCrankLeftLo:
; 309  : 	   CrankManeuver(offLeft, 2);

	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CrankManeuver@DigitalBrain@@IAEXHH@Z	; DigitalBrain::CrankManeuver

; 310  : #ifdef MANEUVER_DEBUG
; 311  : 		sprintf(tmpchr,"%s","BvrCrankLeftLo");

	push	OFFSET ??_C@_0P@PGLKDHGB@BvrCrankLeftLo?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	edx, DWORD PTR _tmpchr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 312  : #endif
; 313  : 
; 314  : 	   break;

	jmp	$LN86@BvrEngage
$LN75@BvrEngage:

; 315  : 		case BvrNotch:
; 316  : 	   BeamManeuver(0,0);

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BeamManeuver@DigitalBrain@@IAEHHH@Z	; DigitalBrain::BeamManeuver

; 317  : #ifdef MANEUVER_DEBUG
; 318  : 	   sprintf(tmpchr,"%s","BvrBeam");

	push	OFFSET ??_C@_07IPLKBEDI@BvrBeam?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	eax, DWORD PTR _tmpchr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 319  : #endif
; 320  : 
; 321  : 	   break;

	jmp	$LN86@BvrEngage
$LN74@BvrEngage:

; 322  : 		case BvrNotchRight:
; 323  : 	   BeamManeuver(offRight,0);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BeamManeuver@DigitalBrain@@IAEHHH@Z	; DigitalBrain::BeamManeuver

; 324  : #ifdef MANEUVER_DEBUG
; 325  : 	   sprintf(tmpchr,"%s","BvrBeamright");

	push	OFFSET ??_C@_0N@EDFGJMOL@BvrBeamright?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	ecx, DWORD PTR _tmpchr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 326  : #endif
; 327  : 
; 328  : 	   break;

	jmp	$LN86@BvrEngage
$LN73@BvrEngage:

; 329  : 
; 330  : 		case BvrNotchRightHigh:
; 331  : 	   BeamManeuver(offRight,1);

	push	1
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BeamManeuver@DigitalBrain@@IAEHHH@Z	; DigitalBrain::BeamManeuver

; 332  : #ifdef MANEUVER_DEBUG
; 333  : 	   sprintf(tmpchr,"%s","BvrBeamright");

	push	OFFSET ??_C@_0N@EDFGJMOL@BvrBeamright?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	edx, DWORD PTR _tmpchr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 334  : #endif
; 335  : 
; 336  : 	   break;

	jmp	$LN86@BvrEngage
$LN72@BvrEngage:

; 337  : 		case BvrNotchLeft:
; 338  : 	   BeamManeuver(offLeft,0);

	push	0
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BeamManeuver@DigitalBrain@@IAEHHH@Z	; DigitalBrain::BeamManeuver

; 339  : #ifdef MANEUVER_DEBUG
; 340  : 	   sprintf(tmpchr,"%s","BvrBeamleft");

	push	OFFSET ??_C@_0M@BKKOJFHM@BvrBeamleft?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	eax, DWORD PTR _tmpchr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 341  : #endif
; 342  : 
; 343  : 	   break;

	jmp	$LN86@BvrEngage
$LN71@BvrEngage:

; 344  : 		case BvrNotchLeftHigh:
; 345  : 	   BeamManeuver(offLeft,1);

	push	1
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BeamManeuver@DigitalBrain@@IAEHHH@Z	; DigitalBrain::BeamManeuver

; 346  : #ifdef MANEUVER_DEBUG
; 347  : 	   sprintf(tmpchr,"%s","BvrBeamleft");

	push	OFFSET ??_C@_0M@BKKOJFHM@BvrBeamleft?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	ecx, DWORD PTR _tmpchr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 348  : #endif
; 349  : 
; 350  : 	   break;

	jmp	$LN86@BvrEngage
$LN70@BvrEngage:

; 351  : //////////////////////////////////////////////////
; 352  : 	  case BvrSingleSideOffset://me123 baseline intercept
; 353  : 		BaseLineIntercept();//me123

	mov	ecx, DWORD PTR _this$[ebp]
	call	?BaseLineIntercept@DigitalBrain@@IAEXXZ	; DigitalBrain::BaseLineIntercept

; 354  : #ifdef MANEUVER_DEBUG
; 355  : 		sprintf(tmpchr,"%s","BvrBaseLineIntercept");

	push	OFFSET ??_C@_0BF@KLDKKHEJ@BvrBaseLineIntercept?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	edx, DWORD PTR _tmpchr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 356  : #endif
; 357  : 
; 358  : 	  break;

	jmp	$LN86@BvrEngage
$LN69@BvrEngage:

; 359  : //////////////////////////////////////////////////
; 360  : 	 case BvrGrind://me123 baseline intercept
; 361  : 		BaseLineIntercept();//me123

	mov	ecx, DWORD PTR _this$[ebp]
	call	?BaseLineIntercept@DigitalBrain@@IAEXXZ	; DigitalBrain::BaseLineIntercept

; 362  : #ifdef MANEUVER_DEBUG
; 363  : 		sprintf(tmpchr,"%s","Grind");

	push	OFFSET ??_C@_05NKIECHCH@Grind?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	eax, DWORD PTR _tmpchr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 364  : #endif
; 365  : 
; 366  : 	  break;

	jmp	$LN86@BvrEngage
$LN68@BvrEngage:

; 367  : //////////////////////////////////////////////////
; 368  : 	  case BvrPince:
; 369  : 		 BaseLineIntercept();//me123

	mov	ecx, DWORD PTR _this$[ebp]
	call	?BaseLineIntercept@DigitalBrain@@IAEXXZ	; DigitalBrain::BaseLineIntercept

; 370  : 		  //AiExecPince();
; 371  : #ifdef MANEUVER_DEBUG
; 372  : 			  sprintf(tmpchr,"%s","BvrPince..BaseLineIntercept");

	push	OFFSET ??_C@_0BM@PNIOAEMM@BvrPince?4?4BaseLineIntercept?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	ecx, DWORD PTR _tmpchr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 373  : #endif
; 374  : 
; 375  : 	  break;

	jmp	$LN86@BvrEngage
$LN67@BvrEngage:

; 376  : //////////////////////////////////////////////////
; 377  : 	  case BvrPursuit:
; 378  : 		  if (0) 

	xor	edx, edx
	je	SHORT $LN66@BvrEngage

; 379  : 		  {
; 380  : 			  BaseLineIntercept();//me123 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?BaseLineIntercept@DigitalBrain@@IAEXXZ	; DigitalBrain::BaseLineIntercept

; 381  : #ifdef MANEUVER_DEBUG
; 382  : 			  sprintf(tmpchr,"%s","BvrBaselineIntercept");

	push	OFFSET ??_C@_0BF@GGFONPJB@BvrBaselineIntercept?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	eax, DWORD PTR _tmpchr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 383  : #endif
; 384  : 		  }
; 385  : 		  else {

	jmp	$LN65@BvrEngage
$LN66@BvrEngage:

; 386  : #ifdef MANEUVER_DEBUG
; 387  : 			  sprintf(tmpchr,"%s","BvrPursuit");

	push	OFFSET ??_C@_0L@HMAENGNN@BvrPursuit?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	ecx, DWORD PTR _tmpchr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 388  : #endif
; 389  : 			  SetTrackPoint(
; 390  : 				  targetPtr->BaseData()->XPos(), 
; 391  : 				  targetPtr->BaseData()->YPos(), 
; 392  : 				  min (targetPtr->BaseData()->ZPos() - 100.0F, -4000.0f)
; 393  : 			  );

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv765[ebp]
	movss	xmm0, DWORD PTR tv765[ebp]
	subss	xmm0, DWORD PTR __real@42c80000
	movss	xmm1, DWORD PTR __real@c57a0000
	comiss	xmm1, xmm0
	jbe	SHORT $LN94@BvrEngage
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv772[ebp]
	movss	xmm0, DWORD PTR tv772[ebp]
	subss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR tv269[ebp], xmm0
	jmp	SHORT $LN95@BvrEngage
$LN94@BvrEngage:
	movss	xmm0, DWORD PTR __real@c57a0000
	movss	DWORD PTR tv269[ebp], xmm0
$LN95@BvrEngage:
	push	ecx
	movss	xmm0, DWORD PTR tv269[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPoint@DigitalBrain@@QAEXMMM@Z	; DigitalBrain::SetTrackPoint

; 394  : 			  // make sure we don't plant
; 395  : 			 
; 396  : 			  OTWDriver.GetAreaFloorAndCeiling( &tfloor, &tceil );

	lea	eax, DWORD PTR _tceil$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tfloor$[ebp]
	push	ecx
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetAreaFloorAndCeiling@OTWDriverClass@@QAEXPAM0@Z ; OTWDriverClass::GetAreaFloorAndCeiling

; 397  : 			  if ( trackZ > tceil - 1500.0f )

	movss	xmm0, DWORD PTR _tceil$[ebp]
	subss	xmm0, DWORD PTR __real@44bb8000
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+156]
	comiss	xmm1, xmm0
	jbe	SHORT $LN64@BvrEngage

; 398  : 			  {
; 399  : 					gainCtrl = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _gainCtrl$[ebp], xmm0

; 400  : 					trackZ = tceil - 1500.0f;

	movss	xmm0, DWORD PTR _tceil$[ebp]
	subss	xmm0, DWORD PTR __real@44bb8000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+156], xmm0
$LN64@BvrEngage:

; 401  : 			  }
; 402  : 	
; 403  : 			 StickandThrottle (-1, trackZ);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+156]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StickandThrottle@DigitalBrain@@IAEXMM@Z ; DigitalBrain::StickandThrottle
$LN65@BvrEngage:

; 404  : 		  }
; 405  : #ifdef DEBUG_INTERCEPT 
; 406  : 		MonoPrint ("BvrPursuit");
; 407  : #endif
; 408  : 	  break;

	jmp	$LN86@BvrEngage
$LN63@BvrEngage:

; 409  : /////////////////////////////////////////////
; 410  : 	  case  BvrFollowWaypoints:
; 411  : #ifdef MANEUVER_DEBUG
; 412  : 		sprintf(tmpchr,"%s","BVRfollowwaypoints");

	push	OFFSET ??_C@_0BD@DKIDBIOD@BVRfollowwaypoints?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	edx, DWORD PTR _tmpchr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 413  : #endif
; 414  : 			FollowWaypoints();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FollowWaypoints@DigitalBrain@@IAEXXZ	; DigitalBrain::FollowWaypoints

; 415  : 			break;

	jmp	SHORT $LN86@BvrEngage
$LN62@BvrEngage:

; 416  : 	  case BvrNoIntercept:
; 417  : #ifdef DEBUG_INTERCEPT 
; 418  : 		MonoPrint ("BvrNoIntercept");
; 419  : #endif
; 420  : #ifdef MANEUVER_DEBUG
; 421  : 		sprintf(tmpchr,"%s","BvrNoIntercept");

	push	OFFSET ??_C@_0P@BEJCPJGI@BvrNoIntercept?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	eax, DWORD PTR _tmpchr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 422  : #endif
; 423  : 		if (!isWing) 

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jne	SHORT $LN61@BvrEngage

; 424  : 		{
; 425  : #ifdef MANEUVER_DEBUG
; 426  : 		sprintf(tmpchr,"%s","followwaypoints");

	push	OFFSET ??_C@_0BA@DBPFIMLD@followwaypoints?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	edx, DWORD PTR _tmpchr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 427  : #endif
; 428  : 			FollowWaypoints();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FollowWaypoints@DigitalBrain@@IAEXXZ	; DigitalBrain::FollowWaypoints

; 429  : 		}
; 430  : 		else 

	jmp	SHORT $LN60@BvrEngage
$LN61@BvrEngage:

; 431  : 		{
; 432  : #ifdef MANEUVER_DEBUG
; 433  : 		sprintf(tmpchr,"%s","AiFlyBvrFOrmation");

	push	OFFSET ??_C@_0BC@PGCHBJIO@AiFlyBvrFOrmation?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	eax, DWORD PTR _tmpchr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 434  : #endif
; 435  : 			AiFlyBvrFOrmation();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiFlyBvrFOrmation@DigitalBrain@@IAEXXZ	; DigitalBrain::AiFlyBvrFOrmation
$LN60@BvrEngage:

; 436  : 		}
; 437  : 	  break;

	jmp	SHORT $LN86@BvrEngage
$LN59@BvrEngage:

; 438  : 	 case BvrFlyFormation:
; 439  : #ifdef DEBUG_INTERCEPT 
; 440  : 		MonoPrint ("AiFollowLead");
; 441  : #endif
; 442  : 		{
; 443  : #ifdef MANEUVER_DEBUG
; 444  : 		sprintf(tmpchr,"%s","AiFollowLead");

	push	OFFSET ??_C@_0N@LEMPFAGH@AiFollowLead?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	ecx, DWORD PTR _tmpchr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 445  : #endif
; 446  : 		AiFlyBvrFOrmation();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiFlyBvrFOrmation@DigitalBrain@@IAEXXZ	; DigitalBrain::AiFlyBvrFOrmation
$LN86@BvrEngage:

; 447  : 		}
; 448  : 	  break;
; 449  :    }
; 450  : #ifdef MANEUVER_DEBUG // 2002-03-13 ADDED BY S.G. If you ask me, the following is just for debug so enclose it in a ifdef statement...
; 451  :    if (Isflightlead && flightLead && ((AircraftClass*)flightLead)->DBrain())

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+624]
	test	eax, eax
	je	$LN19@BvrEngage
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+708], 0
	je	$LN19@BvrEngage
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	test	eax, eax
	je	$LN19@BvrEngage

; 452  :    {
; 453  : 		if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Pnone)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 0
	jne	SHORT $LN57@BvrEngage

; 454  : 		 {
; 455  : 		sprintf(tmpchr,"%s","none");

	push	OFFSET ??_C@_04CGFJFPFD@none?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	ecx, DWORD PTR _tmpchr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
	jmp	$LN19@BvrEngage
$LN57@BvrEngage:

; 456  : 		 }
; 457  : 		 else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Plevel1a)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 1
	jne	SHORT $LN55@BvrEngage

; 458  : 		 {
; 459  : 		sprintf(tmpchr,"%s","lvl1a");   }

	push	OFFSET ??_C@_05GPCGBJOI@lvl1a?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	eax, DWORD PTR _tmpchr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
	jmp	$LN19@BvrEngage
$LN55@BvrEngage:

; 460  : 		 else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Plevel1b)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 2
	jne	SHORT $LN53@BvrEngage

; 461  : 		 {
; 462  : 		sprintf(tmpchr,"%s","lvl1b");  }

	push	OFFSET ??_C@_05EEALEKCL@lvl1b?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	edx, DWORD PTR _tmpchr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
	jmp	$LN19@BvrEngage
$LN53@BvrEngage:

; 463  : 		 else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Plevel1c)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 3
	jne	SHORT $LN51@BvrEngage

; 464  : 		 {
; 465  : 		sprintf(tmpchr,"%s","lvl1c");  }

	push	OFFSET ??_C@_05FNBAHLGK@lvl1c?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	ecx, DWORD PTR _tmpchr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
	jmp	$LN19@BvrEngage
$LN51@BvrEngage:

; 466  : 		 else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Plevel2a)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 4
	jne	SHORT $LN49@BvrEngage

; 467  : 		 {
; 468  : 		sprintf(tmpchr,"%s","lvl2a");  }

	push	OFFSET ??_C@_05GNGAKHLB@lvl2a?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	eax, DWORD PTR _tmpchr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
	jmp	$LN19@BvrEngage
$LN49@BvrEngage:

; 469  : 		 else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Plevel2b)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 5
	jne	SHORT $LN47@BvrEngage

; 470  : 		 {
; 471  : 		sprintf(tmpchr,"%s","lvl2b");  }

	push	OFFSET ??_C@_05EGENPEHC@lvl2b?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	edx, DWORD PTR _tmpchr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
	jmp	$LN19@BvrEngage
$LN47@BvrEngage:

; 472  : 		 else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Plevel2c)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 6
	jne	SHORT $LN45@BvrEngage

; 473  : 		 {
; 474  : 		sprintf(tmpchr,"%s","lvl2c");  }

	push	OFFSET ??_C@_05FPFGMFDD@lvl2c?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	ecx, DWORD PTR _tmpchr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
	jmp	$LN19@BvrEngage
$LN45@BvrEngage:

; 475  : 		 else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Plevel3a)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 7
	jne	SHORT $LN43@BvrEngage

; 476  : 		 {
; 477  : 		sprintf(tmpchr,"%s","lvl3a");  }

	push	OFFSET ??_C@_05GMKCMNIG@lvl3a?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	eax, DWORD PTR _tmpchr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
	jmp	$LN19@BvrEngage
$LN43@BvrEngage:

; 478  : 		 else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Plevel3b)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 8
	jne	SHORT $LN41@BvrEngage

; 479  : 		 {
; 480  : 		sprintf(tmpchr,"%s","lvl3b");  }

	push	OFFSET ??_C@_05EHIPJOEF@lvl3b?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	edx, DWORD PTR _tmpchr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
	jmp	$LN19@BvrEngage
$LN41@BvrEngage:

; 481  : 		 else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Plevel3c)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 9
	jne	SHORT $LN39@BvrEngage

; 482  : 		 {
; 483  : 		sprintf(tmpchr,"%s","lvl3c");  }

	push	OFFSET ??_C@_05FOJEKPAE@lvl3c?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	ecx, DWORD PTR _tmpchr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
	jmp	$LN19@BvrEngage
$LN39@BvrEngage:

; 484  : 		 else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Pbeamdeploy)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 10			; 0000000aH
	jne	SHORT $LN37@BvrEngage

; 485  : 		 {
; 486  : 		sprintf(tmpchr,"%s","beamdeploy");  }

	push	OFFSET ??_C@_0L@LJGMJOJK@beamdeploy?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	eax, DWORD PTR _tmpchr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
	jmp	$LN19@BvrEngage
$LN37@BvrEngage:

; 487  : 		 else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Pbeambeam)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 11			; 0000000bH
	jne	SHORT $LN35@BvrEngage

; 488  : 		 {
; 489  : 		sprintf(tmpchr,"%s","beam");  }

	push	OFFSET ??_C@_04EPJBJPAD@beam?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	edx, DWORD PTR _tmpchr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
	jmp	$LN19@BvrEngage
$LN35@BvrEngage:

; 490  : 		 else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Pwall)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 12			; 0000000cH
	jne	SHORT $LN33@BvrEngage

; 491  : 		 {
; 492  : 		sprintf(tmpchr,"%s","wall");  }

	push	OFFSET ??_C@_04HJDALCLE@wall?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	ecx, DWORD PTR _tmpchr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
	jmp	$LN19@BvrEngage
$LN33@BvrEngage:

; 493  : 		 else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Pgrinder)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 13			; 0000000dH
	jne	SHORT $LN31@BvrEngage

; 494  : 		 {
; 495  : 		sprintf(tmpchr,"%s","chainsaw");  }

	push	OFFSET ??_C@_08LMPHMIF@chainsaw?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	eax, DWORD PTR _tmpchr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
	jmp	$LN19@BvrEngage
$LN31@BvrEngage:

; 496  : 		 else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Pwideazimuth)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 14			; 0000000eH
	jne	SHORT $LN29@BvrEngage

; 497  : 		 {
; 498  : 		sprintf(tmpchr,"%s","wide az");  }

	push	OFFSET ??_C@_07NMCGJLAN@wide?5az?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	edx, DWORD PTR _tmpchr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
	jmp	$LN19@BvrEngage
$LN29@BvrEngage:

; 499  : 		 else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Pshortazimuth)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 15			; 0000000fH
	jne	SHORT $LN27@BvrEngage

; 500  : 		 {
; 501  : 		sprintf(tmpchr,"%s","short az");  }

	push	OFFSET ??_C@_08NIGHOGND@short?5az?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	ecx, DWORD PTR _tmpchr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
	jmp	$LN19@BvrEngage
$LN27@BvrEngage:

; 502  : 		 else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == PwideLT)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 16			; 00000010H
	jne	SHORT $LN25@BvrEngage

; 503  : 		 {
; 504  : 		sprintf(tmpchr,"%s","long LT");  }

	push	OFFSET ??_C@_07HOOOCPND@long?5LT?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	eax, DWORD PTR _tmpchr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
	jmp	$LN19@BvrEngage
$LN25@BvrEngage:

; 505  : 		 else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == PShortLT)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 17			; 00000011H
	jne	SHORT $LN23@BvrEngage

; 506  : 		 {
; 507  : 		sprintf(tmpchr,"%s","shortLT");  }

	push	OFFSET ??_C@_07DJOBGBHI@shortLT?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	edx, DWORD PTR _tmpchr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN19@BvrEngage
$LN23@BvrEngage:

; 508  : 		 else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == PDefensive)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 19			; 00000013H
	jne	SHORT $LN21@BvrEngage

; 509  : 		 {
; 510  : 		sprintf(tmpchr,"%s","defensive");  }

	push	OFFSET ??_C@_09JPNDPKKK@defensive?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	ecx, DWORD PTR _tmpchr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN19@BvrEngage
$LN21@BvrEngage:

; 511  : 		 else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == PSweep)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 18			; 00000012H
	jne	SHORT $LN19@BvrEngage

; 512  : 		 {
; 513  : 		sprintf(tmpchr,"%s","PSweep");  }

	push	OFFSET ??_C@_06ONHFPILM@PSweep?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	eax, DWORD PTR _tmpchr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
$LN19@BvrEngage:

; 514  : 		 else assert (0);
; 515  :    }
; 516  : #endif
; 517  : #ifdef MANEUVER_DEBUG
; 518  : if (g_nShowDebugLabels & 0x08)

	mov	ecx, DWORD PTR ?g_nShowDebugLabels@@3HA	; g_nShowDebugLabels
	and	ecx, 8
	je	$LN1@BvrEngage

; 519  : {
; 520  : 	if (g_nShowDebugLabels & 0x40)

	mov	edx, DWORD PTR ?g_nShowDebugLabels@@3HA	; g_nShowDebugLabels
	and	edx, 64					; 00000040H
	je	$LN5@BvrEngage

; 521  : 	{
; 522  : 	  RadarClass* theRadar = (RadarClass*)FindSensor(self, SensorClass::Radar);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRadar$1[ebp], eax

; 523  : 	  if (theRadar) {

	cmp	DWORD PTR _theRadar$1[ebp], 0
	je	$LN5@BvrEngage

; 524  : 		  if (theRadar->digiRadarMode = RadarClass::DigiSTT)

	mov	edx, DWORD PTR _theRadar$1[ebp]
	mov	DWORD PTR [edx+128], 0
	xor	eax, eax
	je	SHORT $LN14@BvrEngage

; 525  : 			strcat(tmpchr, " STT");

	push	OFFSET ??_C@_04JEMGJJJG@?5STT?$AA@
	lea	ecx, DWORD PTR _tmpchr$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8
	jmp	$LN5@BvrEngage
$LN14@BvrEngage:

; 526  :   		  else if (theRadar->digiRadarMode = RadarClass::DigiSAM)

	mov	edx, DWORD PTR _theRadar$1[ebp]
	mov	DWORD PTR [edx+128], 1
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN12@BvrEngage

; 527  : 			  strcat(tmpchr, " SAM");

	push	OFFSET ??_C@_04BFCLFBBF@?5SAM?$AA@
	lea	ecx, DWORD PTR _tmpchr$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8
	jmp	$LN5@BvrEngage
$LN12@BvrEngage:

; 528  : 		  else if (theRadar->digiRadarMode = RadarClass::DigiTWS)

	mov	edx, DWORD PTR _theRadar$1[ebp]
	mov	DWORD PTR [edx+128], 2
	mov	eax, 2
	test	eax, eax
	je	SHORT $LN10@BvrEngage

; 529  : 			  strcat(tmpchr, " TWS");

	push	OFFSET ??_C@_04EEBGIJLB@?5TWS?$AA@
	lea	ecx, DWORD PTR _tmpchr$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8
	jmp	SHORT $LN5@BvrEngage
$LN10@BvrEngage:

; 530  : 		  else if (theRadar->digiRadarMode = RadarClass::DigiRWS)

	mov	edx, DWORD PTR _theRadar$1[ebp]
	mov	DWORD PTR [edx+128], 3
	mov	eax, 3
	test	eax, eax
	je	SHORT $LN8@BvrEngage

; 531  : 			  strcat(tmpchr, " RWS");

	push	OFFSET ??_C@_04GBHNNGGN@?5RWS?$AA@
	lea	ecx, DWORD PTR _tmpchr$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8
	jmp	SHORT $LN5@BvrEngage
$LN8@BvrEngage:

; 532  : 		  else if (theRadar->digiRadarMode = RadarClass::DigiOFF)

	mov	edx, DWORD PTR _theRadar$1[ebp]
	mov	DWORD PTR [edx+128], 4
	mov	eax, 4
	test	eax, eax
	je	SHORT $LN6@BvrEngage

; 533  : 			strcat(tmpchr, "%s OFF");

	push	OFFSET ??_C@_06KCCCDHEL@?$CFs?5OFF?$AA@
	lea	ecx, DWORD PTR _tmpchr$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8
	jmp	SHORT $LN5@BvrEngage
$LN6@BvrEngage:

; 534  : 		  else strcat(tmpchr, " UNKNOWN");

	push	OFFSET ??_C@_08NENHJECG@?5UNKNOWN?$AA@
	lea	edx, DWORD PTR _tmpchr$[ebp]
	push	edx
	call	_strcat
	add	esp, 8
$LN5@BvrEngage:

; 535  : 	  }
; 536  : 	}
; 537  :    	 
; 538  : 	if (g_nShowDebugLabels & 0x8000)

	mov	eax, DWORD PTR ?g_nShowDebugLabels@@3HA	; g_nShowDebugLabels
	and	eax, 32768				; 00008000H
	je	SHORT $LN2@BvrEngage

; 539  : 	{
; 540  : 		 if (((AircraftClass*) self)->af->GetSimpleMode())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+932]
	call	?GetSimpleMode@AirframeClass@@QAEHXZ	; AirframeClass::GetSimpleMode
	test	eax, eax
	je	SHORT $LN3@BvrEngage

; 541  : 			strcat(tmpchr, " SIMP");

	push	OFFSET ??_C@_05BCMHLKAB@?5SIMP?$AA@
	lea	eax, DWORD PTR _tmpchr$[ebp]
	push	eax
	call	_strcat
	add	esp, 8

; 542  : 	     else

	jmp	SHORT $LN2@BvrEngage
$LN3@BvrEngage:

; 543  : 			strcat(tmpchr, " COMP");

	push	OFFSET ??_C@_05FHEMHCFP@?5COMP?$AA@
	lea	ecx, DWORD PTR _tmpchr$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8
$LN2@BvrEngage:

; 544  : 	}
; 545  : 
; 546  : 	if ( self->drawPointer )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	cmp	DWORD PTR [eax+332], 0
	je	SHORT $LN1@BvrEngage

; 547  : 			((DrawableBSP*)self->drawPointer)->SetLabel (tmpchr, ((DrawableBSP*)self->drawPointer)->LabelColor());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+332]
	call	?LabelColor@DrawableBSP@@QAEKXZ		; DrawableBSP::LabelColor
	push	eax
	lea	eax, DWORD PTR _tmpchr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+332]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+332]
	mov	edx, DWORD PTR [eax+8]
	call	edx
$LN1@BvrEngage:
$LN92@BvrEngage:

; 548  : }
; 549  : #endif 
; 550  : 
; 551  : ShiAssert(trackZ < 0.0F);
; 552  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN96@BvrEngage:
	DD	$LN63@BvrEngage
	DD	$LN59@BvrEngage
	DD	$LN70@BvrEngage
	DD	$LN68@BvrEngage
	DD	$LN67@BvrEngage
	DD	$LN62@BvrEngage
	DD	$LN85@BvrEngage
	DD	$LN84@BvrEngage
	DD	$LN83@BvrEngage
	DD	$LN82@BvrEngage
	DD	$LN75@BvrEngage
	DD	$LN74@BvrEngage
	DD	$LN73@BvrEngage
	DD	$LN72@BvrEngage
	DD	$LN71@BvrEngage
	DD	$LN69@BvrEngage
	DD	$LN81@BvrEngage
	DD	$LN80@BvrEngage
	DD	$LN79@BvrEngage
	DD	$LN78@BvrEngage
	DD	$LN77@BvrEngage
	DD	$LN76@BvrEngage
?BvrEngage@DigitalBrain@@IAEXXZ ENDP			; DigitalBrain::BvrEngage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_targetstrength$ = -48					; size = 4
_ownstrength$ = -44					; size = 4
_flightIdx$1 = -40					; size = 4
tv130 = -36						; size = 4
tv72 = -32						; size = 4
$T2 = -28						; size = 4
tv85 = -24						; size = 4
_outranged$ = -19					; size = 1
_outnumbered$ = -18					; size = 1
_outstrengthed$ = -17					; size = 1
_this$ = -16						; size = 4
_edata$3 = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?BvrChooseTactic@DigitalBrain@@IAEXXZ PROC		; DigitalBrain::BvrChooseTactic
; _this$ = ecx

; 555  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 556  : #define no 0
; 557  : #define prepitbull 1
; 558  : #define pitbull 2
; 559  : 	int targetstrength = 1;

	mov	DWORD PTR _targetstrength$[ebp], 1

; 560  : 	int ownstrength = 1;

	mov	DWORD PTR _ownstrength$[ebp], 1

; 561  : 	bool outranged = false;

	mov	BYTE PTR _outranged$[ebp], 0

; 562  : 	bool outnumbered = false;

	mov	BYTE PTR _outnumbered$[ebp], 0

; 563  : 	bool outstrengthed = false;

	mov	BYTE PTR _outstrengthed$[ebp], 0

; 564  : 
; 565  : 	//CalculateMAR();//Cobra bye bye 
; 566  : 
; 567  :    if (targetPtr->BaseData()->IsAirplane() || targetPtr->BaseData()->IsFlight() || targetPtr->BaseData()->IsHelicopter()) 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv72[ebp], eax
	mov	ecx, DWORD PTR tv72[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv72[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	jne	SHORT $LN7@BvrChooseT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv85[ebp], eax
	mov	edx, DWORD PTR tv85[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv85[ebp]
	mov	edx, DWORD PTR [eax+248]
	call	edx
	test	eax, eax
	jne	SHORT $LN7@BvrChooseT
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv130[ebp], eax
	mov	ecx, DWORD PTR tv130[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv130[ebp]
	mov	eax, DWORD PTR [edx+184]
	call	eax
	test	eax, eax
	je	SHORT $LN8@BvrChooseT
$LN7@BvrChooseT:

; 568  :    {
; 569  : 		bvrCurrTactic = BvrNoIntercept;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 5
$LN8@BvrChooseT:

; 570  :    }
; 571  :    //Cobra big issues here ... VIU isn't changing when flight members die
; 572  :    //This screws up BVR behavior
; 573  :    /*
; 574  : 	if (self->vehicleInUnit == 0)Isflightlead = true;
; 575  : 	if (self->vehicleInUnit == 2)IsElementlead = true;*/
; 576  :    //This should fix it. :)
; 577  :    if (self->GetCampaignObject()->GetComponentIndex(self) == 0)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentIndex@CampBaseClass@@QAEHPAVVuEntity@@@Z ; CampBaseClass::GetComponentIndex
	test	eax, eax
	jne	SHORT $LN6@BvrChooseT

; 578  : 		Isflightlead = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+624], 1
$LN6@BvrChooseT:

; 579  :    if (self->GetCampaignObject()->GetComponentIndex(self) == 2)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentIndex@CampBaseClass@@QAEHPAVVuEntity@@@Z ; CampBaseClass::GetComponentIndex
	cmp	eax, 2
	jne	SHORT $LN5@BvrChooseT

; 580  : 		IsElementlead = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+625], 1
$LN5@BvrChooseT:

; 581  : 
; 582  : 
; 583  : 	if (!Isflightlead && !IsElementlead)// wingies default to formationflying

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+624]
	test	edx, edx
	jne	SHORT $LN4@BvrChooseT
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+625]
	test	ecx, ecx
	jne	SHORT $LN4@BvrChooseT

; 584  : 	{
; 585  : 		bvrCurrTactic = BvrFlyFormation;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 1

; 586  : 		bvrTacticTimer = SimLibElapsedTime + 5 * CampaignSeconds;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 5000				; 00001388H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax
$LN4@BvrChooseT:

; 587  : 	}
; 588  : 	DoProfile();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoProfile@DigitalBrain@@IAEXXZ		; DigitalBrain::DoProfile

; 589  : 
; 590  : // OVERIDE SELFDEFENCE  AND MISSILE SUPPORT CODE
; 591  : 
; 592  : 		if (IsSupportignmissile())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSupportignmissile@DigitalBrain@@IAEHXZ ; DigitalBrain::IsSupportignmissile
	test	eax, eax
	je	SHORT $LN3@BvrChooseT

; 593  : 		{
; 594  : 			bvrCurrTactic =BvrCrank;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 7

; 595  : 			bvrTacticTimer = SimLibElapsedTime + 3 * CampaignSeconds;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 3000				; 00000bb8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax
	jmp	$LN1@BvrChooseT
$LN3@BvrChooseT:

; 596  : 		}
; 597  : 		else if(spiked && targetData->range > maxAAWpnRange/*&& SkillLevel() >2*/)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+596]
	test	eax, eax
	je	$LN1@BvrChooseT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+44]
	comiss	xmm0, DWORD PTR [eax+572]
	jbe	$LN1@BvrChooseT

; 598  : 		{
; 599  : 				bvrCurrTactic = BvrNotch;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 10			; 0000000aH

; 600  : 				bvrTacticTimer = SimLibElapsedTime + 20 * CampaignSeconds + SkillLevel() * 5* CampaignSeconds;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SkillLevel@BaseBrain@@QAEHXZ		; BaseBrain::SkillLevel
	imul	eax, 5
	imul	eax, 1000				; 000003e8H
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	lea	eax, DWORD PTR [edx+eax+20000]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax

; 601  : 				short edata[3];
; 602  : 				int flightIdx	= self->GetCampaignObject()->GetComponentIndex(self);	

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentIndex@CampBaseClass@@QAEHPAVVuEntity@@@Z ; CampBaseClass::GetComponentIndex
	mov	DWORD PTR _flightIdx$1[ebp], eax

; 603  : 				edata[0] = flightIdx;

	mov	edx, 2
	imul	edx, 0
	mov	ax, WORD PTR _flightIdx$1[ebp]
	mov	WORD PTR _edata$3[ebp+edx], ax

; 604  : 				edata[1] = 0;//notching

	mov	DWORD PTR $T2[ebp], 2
	cmp	DWORD PTR $T2[ebp], 6
	jae	SHORT $LN11@BvrChooseT
	jmp	SHORT $LN12@BvrChooseT
$LN11@BvrChooseT:
	call	___report_rangecheckfailure
$LN12@BvrChooseT:
	xor	ecx, ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	WORD PTR _edata$3[ebp+edx], cx

; 605  : 				AiMakeRadioResponse( self, rcEXECUTERESPONSE, edata );

	lea	eax, DWORD PTR _edata$3[ebp]
	push	eax
	push	68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	?AiMakeRadioResponse@@YAXPAVSimBaseClass@@HPAF@Z ; AiMakeRadioResponse
	add	esp, 12					; 0000000cH
$LN1@BvrChooseT:
$LN9@BvrChooseT:

; 606  : 		}
; 607  :    
; 608  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?BvrChooseTactic@DigitalBrain@@IAEXXZ ENDP		; DigitalBrain::BvrChooseTactic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
tv476 = -20						; size = 4
_classPtr$ = -16					; size = 4
tv249 = -12						; size = 4
_engageRange$ = -8					; size = 4
_this$ = -4						; size = 4
?BvrEngageCheck@DigitalBrain@@IAEXXZ PROC		; DigitalBrain::BvrEngageCheck
; _this$ = ecx

; 47   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 48   : Falcon4EntityClassType *classPtr;
; 49   : float engageRange;
; 50   : radModeSelect = 3;//Default

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+540], 3

; 51   : 
; 52   :    /*---------------------*/
; 53   :    /* return if no target */
; 54   :    /*---------------------*/
; 55   :    if (targetPtr == NULL || curMode == RTBMode || /* 2002-04-01 ADDED BY S.G. Player's wing doing a maneuver */ mpActionFlags[AI_EXECUTE_MANEUVER] )/*|| // No Target

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN26@BvrEngageC
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+136], 19			; 00000013H
	je	SHORT $LN26@BvrEngageC
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+760], 0
	je	$LN27@BvrEngageC
$LN26@BvrEngageC:

; 56   :       (!mpActionFlags[AI_ENGAGE_TARGET] && missionClass != AAMission && !missionComplete) || // Target is not assigned and on AG mission
; 57   :        curMode == RTBMode)*/
; 58   :    {
; 59   : 	bvrCurrProfile = Pnone;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+632], 0

; 60   : 	//if ((AircraftClass*)flightLead)
; 61   : 	if ((AircraftClass*)flightLead && bvractionstep != 0)	//THW 2003-11-15 Only calc if necessary

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+708], 0
	je	$LN24@BvrEngageC
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+628], 0
	je	$LN24@BvrEngageC

; 62   : 	{
; 63   : 			if (((AircraftClass*)flightLead)->DBrain()->bvractionstep == 0 && self->GetCampaignObject()->NumberOfComponents() < 3 ||
; 64   : 				((AircraftClass*)flightLead)->DBrain()->bvractionstep == 0 && (AircraftClass *)self->GetCampaignObject() &&
; 65   : 				(AircraftClass *)self->GetCampaignObject()->GetComponentNumber(2)&&
; 66   : 				((AircraftClass *)self->GetCampaignObject()->GetComponentNumber(2))->DBrain()->bvractionstep == 0)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+628], 0
	jne	SHORT $LN22@BvrEngageC
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	cmp	eax, 3
	jl	SHORT $LN23@BvrEngageC
$LN22@BvrEngageC:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+628], 0
	jne	SHORT $LN24@BvrEngageC
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	test	eax, eax
	je	SHORT $LN24@BvrEngageC
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	test	eax, eax
	je	SHORT $LN24@BvrEngageC
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	ecx, eax
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+628], 0
	jne	SHORT $LN24@BvrEngageC
$LN23@BvrEngageC:

; 67   : 			{
; 68   : 			bvractionstep = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+628], 0
$LN24@BvrEngageC:

; 69   : 			}
; 70   : 		}
; 71   :       return;

	jmp	$LN28@BvrEngageC
$LN27@BvrEngageC:

; 72   :    }
; 73   : 
; 74   : 	// RV - Biker - Looks like AceGunsEngage always set... 
; 75   : 	//if (maxAAWpnRange <= 1.0F * NM_TO_FT && !IsSetATC(AceGunsEngage))
; 76   : 	if (maxAAWpnRange <= 1.0F * NM_TO_FT && missionClass == AGMission) {

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@45bde1b0
	comiss	xmm0, DWORD PTR [eax+572]
	jb	$LN21@BvrEngageC
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+288], 0
	jne	$LN21@BvrEngageC

; 77   : 		if (targetPtr->localData->range < 2.0F * NM_TO_FT && !self->Sms->DidEmergencyJettison()) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+12]
	movss	xmm0, DWORD PTR __real@463de1b0
	comiss	xmm0, DWORD PTR [ecx+44]
	jbe	$LN16@BvrEngageC
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+940]
	call	?DidEmergencyJettison@SMSClass@@QAEHXZ	; SMSClass::DidEmergencyJettison
	test	eax, eax
	jne	SHORT $LN16@BvrEngageC

; 78   : 			if (self->CombatClass() != MnvrClassBomber) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR [edx+144]
	call	eax
	cmp	eax, 8
	je	SHORT $LN16@BvrEngageC

; 79   : 				if (rand()%100 < SkillLevel()*25) {

	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	esi, edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SkillLevel@BaseBrain@@QAEHXZ		; BaseBrain::SkillLevel
	imul	eax, 25					; 00000019H
	cmp	esi, eax
	jge	SHORT $LN18@BvrEngageC

; 80   : 					self->Sms->EmergencyJettison();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+940]
	call	?EmergencyJettison@SMSClass@@QAEXXZ	; SMSClass::EmergencyJettison

; 81   : 					SelectGroundWeapon();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectGroundWeapon@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectGroundWeapon
	jmp	SHORT $LN16@BvrEngageC
$LN18@BvrEngageC:

; 82   : 				}
; 83   : 				else if (rand() & 1) {

	call	_rand
	and	eax, 1
	je	SHORT $LN16@BvrEngageC

; 84   : 					self->Sms->AGJettison();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+940]
	call	?AGJettison@SMSClass@@QAEXXZ		; SMSClass::AGJettison

; 85   : 					SelectGroundWeapon();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectGroundWeapon@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectGroundWeapon
$LN16@BvrEngageC:

; 86   : 				}
; 87   : 			}
; 88   : 		}
; 89   : 		return;

	jmp	$LN28@BvrEngageC
$LN21@BvrEngageC:

; 90   : 	}
; 91   : 
; 92   :    if (maxAAWpnRange *1.3F/*ME123 ADDET 1.3*/ < 45.0F * NM_TO_FT)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+572]
	mulss	xmm0, DWORD PTR __real@3fa66666
	movss	xmm1, DWORD PTR __real@488582b0
	comiss	xmm1, xmm0
	jbe	SHORT $LN15@BvrEngageC

; 93   : 		engageRange = 45.0F * NM_TO_FT;

	movss	xmm0, DWORD PTR __real@488582b0
	movss	DWORD PTR _engageRange$[ebp], xmm0

; 94   : 	else

	jmp	SHORT $LN14@BvrEngageC
$LN15@BvrEngageC:

; 95   : 		engageRange = maxAAWpnRange *1.3F/*ME123 ADDET 1.3*/;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+572]
	mulss	xmm0, DWORD PTR __real@3fa66666
	movss	DWORD PTR _engageRange$[ebp], xmm0
$LN14@BvrEngageC:

; 96   : 
; 97   :    engageRange = min (engageRange, maxEngageRange); // DON'T GO FURTHER THEN WHAT THE MISSION ALLOWS US

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+476]
	comiss	xmm0, DWORD PTR _engageRange$[ebp]
	jbe	SHORT $LN30@BvrEngageC
	movss	xmm0, DWORD PTR _engageRange$[ebp]
	movss	DWORD PTR tv249[ebp], xmm0
	jmp	SHORT $LN31@BvrEngageC
$LN30@BvrEngageC:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+476]
	movss	DWORD PTR tv249[ebp], xmm0
$LN31@BvrEngageC:
	movss	xmm0, DWORD PTR tv249[ebp]
	movss	DWORD PTR _engageRange$[ebp], xmm0

; 98   : 
; 99   :    // 2002-02-27 ADDED BY S.G. If on a A2G mission, special consideration here...
; 100  :    if (mpActionFlags[AI_ENGAGE_TARGET] != AI_AIR_TARGET && missionClass != AAMission && !missionComplete) 

	mov	ecx, 4
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx+760], 1
	je	$LN8@BvrEngageC
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+288], 1
	je	$LN8@BvrEngageC
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+292], 0
	jne	$LN8@BvrEngageC

; 101  : 	   { 
; 102  : 	   
; 103  : 	   // not assigned a target, on a A2G mission that is not over yet...  // 2002-03-04 MODIFIED BY S.G. Use new enum type
; 104  : 	   // If we have a ground target selected and doing a ground attack, stick to it unless threatened
; 105  : 
; 106  : 	   //Cobra to the rescue ;) threatPtr is working as expected
; 107  : 	   //We will try and let A/G guys respond in a limited way so as to not blindly ignore 
; 108  : 	   //obvious threats
; 109  : 	   if (groundTargetPtr && agDoctrine != AGD_NONE /*&& !threatPtr*/)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+224], 0
	je	$LN8@BvrEngageC
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+244], 0
	je	$LN8@BvrEngageC

; 110  : 		   {
; 111  : 		   if (targetPtr->localData->range > 8.0f * NM_TO_FT)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR [eax+44]
	comiss	xmm0, DWORD PTR __real@473de1b0
	jbe	SHORT $LN11@BvrEngageC

; 112  : 			   {
; 113  : 			   return;

	jmp	$LN28@BvrEngageC

; 114  : 			   }
; 115  : 			else if ((targetPtr->localData->range > 6.0F * NM_TO_FT

	jmp	SHORT $LN9@BvrEngageC
$LN11@BvrEngageC:

; 116  : 				&& (fabs(targetPtr->localData->ata) > 110 * DTR)))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR [eax+44]
	comiss	xmm0, DWORD PTR __real@470e6944
	jbe	SHORT $LN9@BvrEngageC
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+12]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv476[ebp]
	movss	xmm0, DWORD PTR tv476[ebp]
	comiss	xmm0, DWORD PTR __real@3ff5be09
	jbe	SHORT $LN9@BvrEngageC

; 117  : 				{
; 118  : 				return;

	jmp	$LN28@BvrEngageC
$LN9@BvrEngageC:

; 119  : 				}
; 120  : 			//we made it here so dump A/G stores
; 121  : 			if (targetPtr->localData->range < 2.0F * NM_TO_FT)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR __real@463de1b0
	comiss	xmm0, DWORD PTR [eax+44]
	jbe	SHORT $LN8@BvrEngageC

; 122  : 				{
; 123  : 				self->Sms->EmergencyJettison();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+940]
	call	?EmergencyJettison@SMSClass@@QAEXXZ	; SMSClass::EmergencyJettison

; 124  : 				SelectGroundWeapon();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectGroundWeapon@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectGroundWeapon
$LN8@BvrEngageC:

; 125  : 				}
; 126  : 		   }
; 127  : 
; 128  : 
; 129  : 
; 130  : 	   // 2002-03-04 ADDED BY S.G. Addition to the addition :-) On A2G, don't bother attacking what can't (won't) attack us!
; 131  : /*	   // I think this is not required because SensorFusion will screen them out based on mission type and enemy plane combat type
; 132  : 	   if (SkillLevel() > 0) { // Recruit attacks all that moves
; 133  : 		   CampBaseClass *campBaseObj;
; 134  : 		   if (targetPtr->BaseData()->IsSim())
; 135  : 			   campBaseObj = ((SimBaseClass*)targetPtr->BaseData())->GetCampaignObject();
; 136  : 		   else
; 137  : 			   campBaseObj = ((CampBaseClass *)targetPtr->BaseData());
; 138  : 
; 139  : 		   // If it has a campaign object and it's identified...
; 140  : 		   if (campBaseObj && campBaseObj->GetIdentified(self->GetTeam())) {
; 141  : 			   if (targetPtr->BaseData()->CombatClass() >= MnvrClassA10)
; 142  : 				   return; // Don't bother attacking non treathning aircrafts...
; 143  : 
; 144  : 		   }
; 145  : 	   }
; 146  : */	   // END OF ADDED SECTION 2002-03-04
; 147  : 
; 148  : 	   /*if (SkillLevel() > 1) {
; 149  : 		   // For rookies and up, if our target is far,
; 150  : 		   if (targetPtr->localData->range > 15.0F * NM_TO_FT) {
; 151  : 			   // Ignore if behind us
; 152  : 			   if (fabs(targetPtr->localData->ata) > 90.0F)
; 153  : 				   return;
; 154  : 
; 155  : 			   // Or if we have an escort
; 156  : 			   if (escortFlightID != FalconNullId) {
; 157  : 				   FlightClass *escortFlight = (FlightClass *)vuDatabase->Find(escortFlightID);
; 158  : 				   if (escortFlight && !escortFlight->IsDead())
; 159  : 					   return; // We have an alive escort so concentrate on the task at hand...
; 160  : 			   }
; 161  : 		   }
; 162  : 	   }
; 163  : 	   else {
; 164  : 		   // For recruits and cadets, only ignore the target if it's far and behind them
; 165  : 		   if (targetPtr->localData->range > 15.0F * NM_TO_FT && fabs(targetPtr->localData->ata) > 90.0F * DTR)
; 166  : 			   return;
; 167  : 	   }*/
; 168  : 
; 169  :    }
; 170  :    // END OF ADDED SECTION 2002-02-27
; 171  : 
; 172  :    /*-------*/
; 173  :    /* entry */
; 174  :    /*-------*/
; 175  :    if (curMode != BVREngageMode)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+136], 16			; 00000010H
	je	SHORT $LN7@BvrEngageC

; 176  :    {
; 177  :       /*--------------------------------*/
; 178  :       /* check against threshold values */
; 179  :       /*--------------------------------*/
; 180  : 	  classPtr = (Falcon4EntityClassType*) (targetPtr->BaseData()->EntityType());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	DWORD PTR _classPtr$[ebp], eax

; 181  : 
; 182  : 	  // if its a plane we're in.....
; 183  :       if ((classPtr->vuClassData.classInfo_[VU_TYPE] == TYPE_AIRPLANE ||
; 184  : 		     classPtr->vuClassData.classInfo_[VU_TYPE] == TYPE_HELICOPTER) &&
; 185  :            targetPtr->localData->range < engageRange && self->CombatClass() <=7
; 186  :            /*CanEngage(self, self->CombatClass(), targetPtr, BVRManeuver)*/) // 2002-03-11 MODIFIED BY S.G. Added parameter BVRManeuver

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _classPtr$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+8]
	cmp	ecx, 1
	je	SHORT $LN5@BvrEngageC
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _classPtr$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+8]
	cmp	ecx, 5
	jne	SHORT $LN6@BvrEngageC
$LN5@BvrEngageC:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+12]
	movss	xmm0, DWORD PTR _engageRange$[ebp]
	comiss	xmm0, DWORD PTR [ecx+44]
	jbe	SHORT $LN6@BvrEngageC
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+144]
	call	eax
	cmp	eax, 7
	jg	SHORT $LN6@BvrEngageC

; 187  :       {
; 188  :          AddMode(BVREngageMode);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddMode@DigitalBrain@@IAEXW4DigiMode@1@@Z ; DigitalBrain::AddMode
$LN6@BvrEngageC:

; 189  :       }
; 190  :    }
; 191  :    else if ( targetPtr->localData->range > 1.2F * engageRange ||//1,2 from 1,5

	jmp	SHORT $LN1@BvrEngageC
$LN7@BvrEngageC:

; 192  :       /*!CanEngage(self, self->CombatClass(), targetPtr, BVRManeuver)*/
; 193  : 	  self->CombatClass() > 7) // 2002-03-11 MODIFIED BY S.G. Added parameter BVRManeuver

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR __real@3f99999a
	mulss	xmm0, DWORD PTR _engageRange$[ebp]
	movss	xmm1, DWORD PTR [eax+44]
	comiss	xmm1, xmm0
	ja	SHORT $LN2@BvrEngageC
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR [edx+144]
	call	eax
	cmp	eax, 7
	jle	SHORT $LN3@BvrEngageC
$LN2@BvrEngageC:

; 194  :    {
; 195  :       ClearTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearTarget@BaseBrain@@QAEXXZ		; BaseBrain::ClearTarget

; 196  : 	  ShiAssert(curMode != GunsEngageMode);
; 197  :       
; 198  :       // Clear the current intercept type and timer
; 199  :       bvrCurrTactic = BvrNoIntercept;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 5

; 200  :       bvrTacticTimer = SimLibElapsedTime +1 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 1000				; 000003e8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx

; 201  :    }
; 202  :    else

	jmp	SHORT $LN1@BvrEngageC
$LN3@BvrEngageC:

; 203  :    {
; 204  :       AddMode(BVREngageMode);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddMode@DigitalBrain@@IAEXW4DigiMode@1@@Z ; DigitalBrain::AddMode
$LN1@BvrEngageC:
$LN28@BvrEngageC:

; 205  :    } 
; 206  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?BvrEngageCheck@DigitalBrain@@IAEXXZ ENDP		; DigitalBrain::BvrEngageCheck
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_radarData$1 = -20					; size = 4
_hasTWS$ = -16						; size = 4
tv130 = -12						; size = 4
_theRadar$2 = -8					; size = 4
_this$ = -4						; size = 4
?chooseRadarMode@DigitalBrain@@IAEXXZ PROC		; DigitalBrain::chooseRadarMode
; _this$ = ecx

; 2887 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 2888 : 	//In this function we select the proper radar mode based on radModeSelect
; 2889 : 	//Other functions will set radModeSelect and here we set the radar mode.
; 2890 : 	int hasTWS = 0;

	mov	DWORD PTR _hasTWS$[ebp], 0

; 2891 : 
; 2892 : 	// enum DigiRadarMode {DigiSTT, DigiSAM, DigiTWS, DigiRWS, DigiOFF};
; 2893 : 
; 2894 : 	if (SimLibElapsedTime > radarModeTest) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	ecx, DWORD PTR [eax+952]
	jbe	$LN15@chooseRada

; 2895 : 	  RadarClass* theRadar = (RadarClass*)FindSensor(self, SensorClass::Radar);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRadar$2[ebp], eax

; 2896 : 	  if (theRadar) {

	cmp	DWORD PTR _theRadar$2[ebp], 0
	je	$LN13@chooseRada

; 2897 : 		  RadarDataSet* radarData = &radarDatFileTable[self->GetRadarType()];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR [edx+292]
	call	eax
	imul	eax, 180				; 000000b4H
	add	eax, DWORD PTR ?radarDatFileTable@@3PAURadarDataSet@@A ; radarDatFileTable
	mov	DWORD PTR _radarData$1[ebp], eax

; 2898 : 		  if (radarData->MaxTwstargets > 0) // Must be equipped with a radar capable of doing TWS...

	mov	ecx, DWORD PTR _radarData$1[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jle	SHORT $LN12@chooseRada

; 2899 : 			  hasTWS = 1;

	mov	DWORD PTR _hasTWS$[ebp], 1
$LN12@chooseRada:

; 2900 : 
; 2901 : 		  switch (radModeSelect)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+540]
	mov	DWORD PTR tv130[ebp], eax
	cmp	DWORD PTR tv130[ebp], 4
	ja	SHORT $LN9@chooseRada
	mov	ecx, DWORD PTR tv130[ebp]
	jmp	DWORD PTR $LN17@chooseRada[ecx*4]
$LN9@chooseRada:

; 2902 : 			  {
; 2903 : 			  default://RWS is the default mode
; 2904 : 				  theRadar->digiRadarMode = RadarClass::DigiRWS;

	mov	edx, DWORD PTR _theRadar$2[ebp]
	mov	DWORD PTR [edx+128], 3

; 2905 : 				  break;

	jmp	SHORT $LN10@chooseRada
$LN8@chooseRada:

; 2906 : 
; 2907 : 			  case 0://STT
; 2908 : 				  theRadar->digiRadarMode = RadarClass::DigiSTT;

	mov	eax, DWORD PTR _theRadar$2[ebp]
	mov	DWORD PTR [eax+128], 0

; 2909 : 				  break;

	jmp	SHORT $LN10@chooseRada
$LN7@chooseRada:

; 2910 : 
; 2911 : 			  case 1://SAM
; 2912 : 				  theRadar->digiRadarMode = RadarClass::DigiSAM;

	mov	ecx, DWORD PTR _theRadar$2[ebp]
	mov	DWORD PTR [ecx+128], 1

; 2913 : 				  break;

	jmp	SHORT $LN10@chooseRada
$LN6@chooseRada:

; 2914 : 
; 2915 : 			  case 2://TWS
; 2916 : 				  if (hasTWS)

	cmp	DWORD PTR _hasTWS$[ebp], 0
	je	SHORT $LN5@chooseRada

; 2917 : 					theRadar->digiRadarMode = RadarClass::DigiTWS;

	mov	edx, DWORD PTR _theRadar$2[ebp]
	mov	DWORD PTR [edx+128], 2

; 2918 : 				  else

	jmp	SHORT $LN4@chooseRada
$LN5@chooseRada:

; 2919 : 					theRadar->digiRadarMode = RadarClass::DigiRWS;

	mov	eax, DWORD PTR _theRadar$2[ebp]
	mov	DWORD PTR [eax+128], 3
$LN4@chooseRada:

; 2920 : 				  break;

	jmp	SHORT $LN10@chooseRada
$LN3@chooseRada:

; 2921 : 
; 2922 : 			  case 3://RWS
; 2923 : 				  theRadar->digiRadarMode = RadarClass::DigiRWS;

	mov	ecx, DWORD PTR _theRadar$2[ebp]
	mov	DWORD PTR [ecx+128], 3

; 2924 : 				  break;

	jmp	SHORT $LN10@chooseRada
$LN2@chooseRada:

; 2925 : 
; 2926 : 			  case 4://OFF
; 2927 : 				  theRadar->digiRadarMode = RadarClass::DigiOFF;

	mov	edx, DWORD PTR _theRadar$2[ebp]
	mov	DWORD PTR [edx+128], 4
$LN10@chooseRada:

; 2928 : 				  break;
; 2929 : 
; 2930 : 			  }//end switch
; 2931 : 
; 2932 : 		  //Special Cases
; 2933 : 		  if (curMissile && curMissile->sensorArray && curMissile->sensorArray[0]->Type() == SensorClass::RadarHoming && curMissile->GetSPType() != SPTYPE_AIM120)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+404], 0
	je	SHORT $LN13@chooseRada
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+404]
	cmp	DWORD PTR [edx+648], 0
	je	SHORT $LN13@chooseRada
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+404]
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR [ecx+648]
	mov	ecx, DWORD PTR [eax+edx]
	call	?Type@SensorClass@@QAE?AW4SensorType@1@XZ ; SensorClass::Type
	cmp	eax, 6
	jne	SHORT $LN13@chooseRada
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+404]
	call	?GetSPType@SimBaseClass@@QBEEXZ		; SimBaseClass::GetSPType
	movzx	edx, al
	cmp	edx, 13					; 0000000dH
	je	SHORT $LN13@chooseRada

; 2934 : 			  theRadar->digiRadarMode = RadarClass::DigiSTT;

	mov	eax, DWORD PTR _theRadar$2[ebp]
	mov	DWORD PTR [eax+128], 0
$LN13@chooseRada:

; 2935 : 
; 2936 : 	  }
; 2937 : 	  radarModeTest = SimLibElapsedTime + (4 + (4 - SkillLevel())) * SEC_TO_MSEC;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SkillLevel@BaseBrain@@QAEHXZ		; BaseBrain::SkillLevel
	mov	ecx, 4
	sub	ecx, eax
	add	ecx, 4
	imul	ecx, 1000				; 000003e8H
	add	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+952], ecx
$LN15@chooseRada:

; 2938 : 	}
; 2939 : 
; 2940 : 
; 2941 : 
; 2942 : 
; 2943 : 
; 2944 : 
; 2945 : 	}//End

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN17@chooseRada:
	DD	$LN8@chooseRada
	DD	$LN7@chooseRada
	DD	$LN6@chooseRada
	DD	$LN3@chooseRada
	DD	$LN2@chooseRada
?chooseRadarMode@DigitalBrain@@IAEXXZ ENDP		; DigitalBrain::chooseRadarMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_trig$ = -28						; size = 8
tv178 = -20						; size = 4
tv172 = -16						; size = 4
tv158 = -12						; size = 4
_az$ = -8						; size = 4
_this$ = -4						; size = 4
?DragManeuver@DigitalBrain@@IAEXXZ PROC			; DigitalBrain::DragManeuver
; _this$ = ecx

; 2723 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 2724 : 	float az;
; 2725 : 	mlTrig trig;
; 2726 : 
; 2727 : 	az = targetPtr->BaseData()->Yaw() + targetPtr->localData->azFrom ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv158[ebp]
	movss	xmm0, DWORD PTR tv158[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+12]
	addss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR _az$[ebp], xmm0

; 2728 : 
; 2729 : 	spikeseconds = NULL;  //resetign the spike timer here, asumign that the possible

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+604], 0

; 2730 : 	//missile in the air is trashed by the drag
; 2731 : 
; 2732 : 	if (az > PI) {az -= 2*PI; }

	movss	xmm0, DWORD PTR _az$[ebp]
	comiss	xmm0, DWORD PTR __real@40490fdb
	jbe	SHORT $LN2@DragManeuv
	movss	xmm0, DWORD PTR _az$[ebp]
	subss	xmm0, DWORD PTR __real@40c90fdb
	movss	DWORD PTR _az$[ebp], xmm0
$LN2@DragManeuv:

; 2733 : 	if (az < -PI) { az += 2*PI; }

	movss	xmm0, DWORD PTR __real@c0490fdb
	comiss	xmm0, DWORD PTR _az$[ebp]
	jbe	SHORT $LN1@DragManeuv
	movss	xmm0, DWORD PTR _az$[ebp]
	addss	xmm0, DWORD PTR __real@40c90fdb
	movss	DWORD PTR _az$[ebp], xmm0
$LN1@DragManeuv:

; 2734 : 
; 2735 : 	mlSinCos(&trig, az);

	push	ecx
	movss	xmm0, DWORD PTR _az$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _trig$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 2736 : 	SetTrackPoint(self->XPos() + 10.0F*NM_TO_FT*trig.cos, self->YPos() + 10.0F*NM_TO_FT*trig.sin);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv172[ebp]
	movss	xmm0, DWORD PTR tv172[ebp]
	movss	xmm1, DWORD PTR __real@476d5a1c
	mulss	xmm1, DWORD PTR _trig$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv178[ebp]
	movss	xmm0, DWORD PTR tv178[ebp]
	movss	xmm1, DWORD PTR __real@476d5a1c
	mulss	xmm1, DWORD PTR _trig$[ebp+4]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPoint@DigitalBrain@@QAEXMM@Z	; DigitalBrain::SetTrackPoint

; 2737 : 
; 2738 : 	// sfr: wth is this??
; 2739 : 	//static VU_TIME heighttimer = 0;
; 2740 : 
; 2741 : 	StickandThrottle (-2, trackZ);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+156]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c0000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StickandThrottle@DigitalBrain@@IAEXMM@Z ; DigitalBrain::StickandThrottle

; 2742 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DragManeuver@DigitalBrain@@IAEXXZ ENDP			; DigitalBrain::DragManeuver
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_trig$ = -80						; size = 8
_retval$ = -72						; size = 4
tv456 = -68						; size = 4
tv430 = -64						; size = 4
tv421 = -60						; size = 4
tv406 = -56						; size = 4
tv396 = -52						; size = 4
tv390 = -48						; size = 4
tv366 = -44						; size = 4
tv454 = -40						; size = 4
tv358 = -36						; size = 4
_trackSpeed$1 = -32					; size = 4
tv348 = -28						; size = 4
tv289 = -24						; size = 4
tv155 = -20						; size = 4
_nh2$ = -16						; size = 4
_nh1$ = -12						; size = 4
_az$ = -8						; size = 4
_this$ = -4						; size = 4
_direction$ = 8						; size = 4
_Height$ = 12						; size = 4
?CrankManeuver@DigitalBrain@@IAEXHH@Z PROC		; DigitalBrain::CrankManeuver
; _this$ = ecx

; 2654 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	mov	DWORD PTR _this$[ebp], ecx

; 2655 : 	int retval = FALSE;

	mov	DWORD PTR _retval$[ebp], 0

; 2656 : 	float nh1,nh2,az;
; 2657 : 	mlTrig trig;
; 2658 : 
; 2659 : 	if (targetPtr->localData->ataFrom > 90.0f * DTR)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR [edx+4]
	comiss	xmm0, DWORD PTR __real@3fc90fd9
	jbe	$LN14@CrankManeu

; 2660 : 	{
; 2661 : 		SetTrackPoint(targetPtr->BaseData()->XPos(), targetPtr->BaseData()->YPos(), targetPtr->BaseData()->ZPos());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPoint@DigitalBrain@@QAEXMMM@Z	; DigitalBrain::SetTrackPoint

; 2662 : 		float trackSpeed = targetPtr->BaseData()->GetKias()+100.0f;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv155[ebp], eax
	mov	ecx, DWORD PTR tv155[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv155[ebp]
	mov	eax, DWORD PTR [edx+224]
	call	eax
	fstp	DWORD PTR tv348[ebp]
	movss	xmm0, DWORD PTR tv348[ebp]
	addss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR _trackSpeed$1[ebp], xmm0

; 2663 : 		StickandThrottle (trackSpeed, trackZ);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+156]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _trackSpeed$1[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StickandThrottle@DigitalBrain@@IAEXMM@Z ; DigitalBrain::StickandThrottle

; 2664 : 		return;

	jmp	$LN15@CrankManeu

; 2665 : 	}
; 2666 : 	else{

	jmp	$LN13@CrankManeu
$LN14@CrankManeu:

; 2667 : 		az = self->Yaw() + TargetAz(self,targetPtr) ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv358[ebp]
	movss	xmm0, DWORD PTR tv358[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	movss	DWORD PTR tv454[ebp], xmm0
	call	?TargetAz@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z ; TargetAz
	add	esp, 8
	fstp	DWORD PTR tv366[ebp]
	movss	xmm0, DWORD PTR tv454[ebp]
	addss	xmm0, DWORD PTR tv366[ebp]
	movss	DWORD PTR _az$[ebp], xmm0

; 2668 : 		if (az > PI){

	movss	xmm0, DWORD PTR _az$[ebp]
	comiss	xmm0, DWORD PTR __real@40490fdb
	jbe	SHORT $LN12@CrankManeu

; 2669 : 			az -= 2*PI;

	movss	xmm0, DWORD PTR _az$[ebp]
	subss	xmm0, DWORD PTR __real@40c90fdb
	movss	DWORD PTR _az$[ebp], xmm0
$LN12@CrankManeu:

; 2670 : 		}
; 2671 : 		if (az < -PI){

	movss	xmm0, DWORD PTR __real@c0490fdb
	comiss	xmm0, DWORD PTR _az$[ebp]
	jbe	SHORT $LN11@CrankManeu

; 2672 : 			az += 2*PI;

	movss	xmm0, DWORD PTR _az$[ebp]
	addss	xmm0, DWORD PTR __real@40c90fdb
	movss	DWORD PTR _az$[ebp], xmm0
$LN11@CrankManeu:

; 2673 : 		}
; 2674 : 		/*--------------------*/
; 2675 : 		/* pick a new heading */
; 2676 : 		/*--------------------*/
; 2677 : 		nh1 = az + 45.0f*DTR;

	movss	xmm0, DWORD PTR _az$[ebp]
	addss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR _nh1$[ebp], xmm0

; 2678 : 		if (nh1 > PI){			

	movss	xmm0, DWORD PTR _nh1$[ebp]
	comiss	xmm0, DWORD PTR __real@40490fdb
	jbe	SHORT $LN10@CrankManeu

; 2679 : 			nh1 -= 2*PI;

	movss	xmm0, DWORD PTR _nh1$[ebp]
	subss	xmm0, DWORD PTR __real@40c90fdb
	movss	DWORD PTR _nh1$[ebp], xmm0
$LN10@CrankManeu:

; 2680 : 		}
; 2681 : 
; 2682 : 		nh2 = az - 45.0f*DTR;

	movss	xmm0, DWORD PTR _az$[ebp]
	subss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR _nh2$[ebp], xmm0

; 2683 : 		if (nh2 < -PI){

	movss	xmm0, DWORD PTR __real@c0490fdb
	comiss	xmm0, DWORD PTR _nh2$[ebp]
	jbe	SHORT $LN9@CrankManeu

; 2684 : 			nh2 += 2*PI;

	movss	xmm0, DWORD PTR _nh2$[ebp]
	addss	xmm0, DWORD PTR __real@40c90fdb
	movss	DWORD PTR _nh2$[ebp], xmm0
$LN9@CrankManeu:

; 2685 : 		}
; 2686 : 
; 2687 : 		if (direction == offRight || (targetPtr->localData->azFrom < 0.0f && direction != offLeft) ){

	cmp	DWORD PTR _direction$[ebp], 1
	je	SHORT $LN7@CrankManeu
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+20]
	jbe	SHORT $LN8@CrankManeu
	cmp	DWORD PTR _direction$[ebp], 3
	je	SHORT $LN8@CrankManeu
$LN7@CrankManeu:

; 2688 : 			az = nh1;

	movss	xmm0, DWORD PTR _nh1$[ebp]
	movss	DWORD PTR _az$[ebp], xmm0

; 2689 : 			offsetdir = offRight;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+600], 1

; 2690 : 		}
; 2691 : 		else {

	jmp	SHORT $LN6@CrankManeu
$LN8@CrankManeu:

; 2692 : 			az = nh2;

	movss	xmm0, DWORD PTR _nh2$[ebp]
	movss	DWORD PTR _az$[ebp], xmm0

; 2693 : 			offsetdir = offLeft;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+600], 3
$LN6@CrankManeu:

; 2694 : 		}
; 2695 : 
; 2696 : 		mlSinCos(&trig, az);

	push	ecx
	movss	xmm0, DWORD PTR _az$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 2697 : 		SetTrackPoint(self->XPos() + 10.0F*NM_TO_FT*trig.cos, self->YPos() + 10.0F*NM_TO_FT*trig.sin);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv390[ebp]
	movss	xmm0, DWORD PTR tv390[ebp]
	movss	xmm1, DWORD PTR __real@476d5a1c
	mulss	xmm1, DWORD PTR _trig$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv396[ebp]
	movss	xmm0, DWORD PTR tv396[ebp]
	movss	xmm1, DWORD PTR __real@476d5a1c
	mulss	xmm1, DWORD PTR _trig$[ebp+4]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPoint@DigitalBrain@@QAEXMM@Z	; DigitalBrain::SetTrackPoint
$LN13@CrankManeu:

; 2698 : 	}
; 2699 : 
; 2700 : 	if ((self->GetVt() < 200.0f * KNOTS_TO_FTPSEC) && Height == 1){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+56]
	mov	edx, DWORD PTR [eax+220]
	call	edx
	fstp	DWORD PTR tv406[ebp]
	movss	xmm0, DWORD PTR __real@43a8c89a
	comiss	xmm0, DWORD PTR tv406[ebp]
	jbe	SHORT $LN5@CrankManeu
	cmp	DWORD PTR _Height$[ebp], 1
	jne	SHORT $LN5@CrankManeu

; 2701 : 		Height = 2;

	mov	DWORD PTR _Height$[ebp], 2
$LN5@CrankManeu:

; 2702 : 	}
; 2703 : 
; 2704 : 	// Cobra - Use local max elevation to try and keep AI from lawndarting
; 2705 : 	trackZ = -TheMap.GetMEA(((AircraftClass*) self)->XPos(), ((AircraftClass*) self)->YPos()); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	call	?GetMEA@TMap@@QAEMMM@Z			; TMap::GetMEA
	fstp	DWORD PTR tv421[ebp]
	movss	xmm0, DWORD PTR tv421[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+156], xmm0

; 2706 : 
; 2707 : 	if (Height == 1)//Up 

	cmp	DWORD PTR _Height$[ebp], 1
	jne	SHORT $LN4@CrankManeu

; 2708 : 	{
; 2709 : 		trackZ = min (trackZ - 30000.0f,self->ZPos());

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+156]
	subss	xmm0, DWORD PTR __real@46ea6000
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movss	DWORD PTR tv456[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv430[ebp]
	movss	xmm0, DWORD PTR tv430[ebp]
	movss	xmm1, DWORD PTR tv456[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN17@CrankManeu
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+156]
	subss	xmm0, DWORD PTR __real@46ea6000
	movss	DWORD PTR tv289[ebp], xmm0
	jmp	SHORT $LN18@CrankManeu
$LN17@CrankManeu:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv289[ebp]
$LN18@CrankManeu:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv289[ebp]
	movss	DWORD PTR [ecx+156], xmm0
	jmp	SHORT $LN1@CrankManeu
$LN4@CrankManeu:

; 2710 : 	}
; 2711 : 	else if (Height == 2)//Down

	cmp	DWORD PTR _Height$[ebp], 2
	jne	SHORT $LN2@CrankManeu

; 2712 : 	{
; 2713 : 		trackZ -= 2000.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+156]
	subss	xmm0, DWORD PTR __real@44fa0000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+156], xmm0

; 2714 : 	}
; 2715 : 	else

	jmp	SHORT $LN1@CrankManeu
$LN2@CrankManeu:

; 2716 : 	{
; 2717 : 		trackZ = self->ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+156]
$LN1@CrankManeu:

; 2718 : 	}
; 2719 : 	StickandThrottle (cornerSpeed, trackZ);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+156]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+100]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StickandThrottle@DigitalBrain@@IAEXMM@Z ; DigitalBrain::StickandThrottle
$LN15@CrankManeu:

; 2720 : 	ShiAssert(trackZ < 0.0F);
; 2721 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CrankManeuver@DigitalBrain@@IAEXHH@Z ENDP		; DigitalBrain::CrankManeuver
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_trig$ = -100						; size = 8
_maxAlt$1 = -92						; size = 4
tv496 = -88						; size = 4
tv527 = -84						; size = 4
tv456 = -80						; size = 4
tv447 = -76						; size = 4
tv438 = -72						; size = 4
tv430 = -68						; size = 4
tv418 = -64						; size = 4
tv412 = -60						; size = 4
tv399 = -56						; size = 4
tv381 = -52						; size = 4
tv525 = -48						; size = 4
tv373 = -44						; size = 4
_retval$ = -40						; size = 4
tv353 = -36						; size = 4
_vc$2 = -32						; size = 4
tv325 = -28						; size = 4
tv483 = -24						; size = 4
tv478 = -20						; size = 4
_nh2$ = -16						; size = 4
_nh1$ = -12						; size = 4
_az$ = -8						; size = 4
_this$ = -4						; size = 4
_direction$ = 8						; size = 4
_NotchHI$ = 12						; size = 4
?BeamManeuver@DigitalBrain@@IAEHHH@Z PROC		; DigitalBrain::BeamManeuver
; _this$ = ecx

; 2565 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 2566 : int retval = FALSE;

	mov	DWORD PTR _retval$[ebp], 0

; 2567 : float nh1,nh2,az;
; 2568 : mlTrig trig;
; 2569 : 
; 2570 :    /*-----------------*/
; 2571 :    /* threat heading */
; 2572 :    /*-----------------*/
; 2573 :    az = self->Yaw() + TargetAz(self,targetPtr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv373[ebp]
	movss	xmm0, DWORD PTR tv373[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	movss	DWORD PTR tv525[ebp], xmm0
	call	?TargetAz@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z ; TargetAz
	add	esp, 8
	fstp	DWORD PTR tv381[ebp]
	movss	xmm0, DWORD PTR tv525[ebp]
	addss	xmm0, DWORD PTR tv381[ebp]
	movss	DWORD PTR _az$[ebp], xmm0

; 2574 : 	if (az > PI)

	movss	xmm0, DWORD PTR _az$[ebp]
	comiss	xmm0, DWORD PTR __real@40490fdb
	jbe	SHORT $LN14@BeamManeuv

; 2575 : 	az -= 2*PI;

	movss	xmm0, DWORD PTR _az$[ebp]
	subss	xmm0, DWORD PTR __real@40c90fdb
	movss	DWORD PTR _az$[ebp], xmm0
$LN14@BeamManeuv:

; 2576 : 	if (az < -PI)

	movss	xmm0, DWORD PTR __real@c0490fdb
	comiss	xmm0, DWORD PTR _az$[ebp]
	jbe	SHORT $LN13@BeamManeuv

; 2577 : 	az += 2*PI;

	movss	xmm0, DWORD PTR _az$[ebp]
	addss	xmm0, DWORD PTR __real@40c90fdb
	movss	DWORD PTR _az$[ebp], xmm0
$LN13@BeamManeuv:

; 2578 :    /*--------------------*/
; 2579 :    /* pick a new heading */
; 2580 :    /*--------------------*/
; 2581 : 
; 2582 :    nh1 = az + 90.0f * DTR;

	movss	xmm0, DWORD PTR _az$[ebp]
	addss	xmm0, DWORD PTR __real@3fc90fd9
	movss	DWORD PTR _nh1$[ebp], xmm0

; 2583 : 	if (nh1 > PI)

	movss	xmm0, DWORD PTR _nh1$[ebp]
	comiss	xmm0, DWORD PTR __real@40490fdb
	jbe	SHORT $LN12@BeamManeuv

; 2584 : 		nh1 -= 2*PI;

	movss	xmm0, DWORD PTR _nh1$[ebp]
	subss	xmm0, DWORD PTR __real@40c90fdb
	movss	DWORD PTR _nh1$[ebp], xmm0
$LN12@BeamManeuv:

; 2585 : 
; 2586 :    nh2 = az - 90.0f * DTR;

	movss	xmm0, DWORD PTR _az$[ebp]
	subss	xmm0, DWORD PTR __real@3fc90fd9
	movss	DWORD PTR _nh2$[ebp], xmm0

; 2587 : 	if (nh2 < -PI)

	movss	xmm0, DWORD PTR __real@c0490fdb
	comiss	xmm0, DWORD PTR _nh2$[ebp]
	jbe	SHORT $LN11@BeamManeuv

; 2588 : 		nh2 += 2*PI;

	movss	xmm0, DWORD PTR _nh2$[ebp]
	addss	xmm0, DWORD PTR __real@40c90fdb
	movss	DWORD PTR _nh2$[ebp], xmm0
$LN11@BeamManeuv:

; 2589 : 
; 2590 :    if (direction == offRight || (TargetAz(self,targetPtr) < 0 && direction != offLeft))

	cmp	DWORD PTR _direction$[ebp], 1
	je	SHORT $LN9@BeamManeuv
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	?TargetAz@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z ; TargetAz
	add	esp, 8
	fstp	DWORD PTR tv399[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv399[ebp]
	jbe	SHORT $LN10@BeamManeuv
	cmp	DWORD PTR _direction$[ebp], 3
	je	SHORT $LN10@BeamManeuv
$LN9@BeamManeuv:

; 2591 :    {
; 2592 : 		az = nh1;

	movss	xmm0, DWORD PTR _nh1$[ebp]
	movss	DWORD PTR _az$[ebp], xmm0

; 2593 : 		offsetdir = offRight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+600], 1

; 2594 :    }
; 2595 :    else

	jmp	SHORT $LN8@BeamManeuv
$LN10@BeamManeuv:

; 2596 :    {
; 2597 : 		az = nh2;

	movss	xmm0, DWORD PTR _nh2$[ebp]
	movss	DWORD PTR _az$[ebp], xmm0

; 2598 : 		offsetdir = offLeft;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+600], 3
$LN8@BeamManeuv:

; 2599 :    }
; 2600 : 
; 2601 :    mlSinCos(&trig, az);

	push	ecx
	movss	xmm0, DWORD PTR _az$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _trig$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 2602 :    SetTrackPoint(self->XPos() + 4.0F*NM_TO_FT*trig.cos, self->YPos() + 4.0F*NM_TO_FT*trig.sin);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv412[ebp]
	movss	xmm0, DWORD PTR tv412[ebp]
	movss	xmm1, DWORD PTR __real@46bde1b0
	mulss	xmm1, DWORD PTR _trig$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv418[ebp]
	movss	xmm0, DWORD PTR tv418[ebp]
	movss	xmm1, DWORD PTR __real@46bde1b0
	mulss	xmm1, DWORD PTR _trig$[ebp+4]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPoint@DigitalBrain@@QAEXMM@Z	; DigitalBrain::SetTrackPoint

; 2603 : 
; 2604 : 	static VU_TIME heighttimer = 0;
; 2605 : 
; 2606 : 	if (
; 2607 : 		heighttimer + 15 * CampaignSeconds < SimLibElapsedTime &&
; 2608 : 		(TargetAz(self,targetPtr) >80.0f*DTR && TargetAz(self,targetPtr) <100.0f*DTR ||
; 2609 : 		TargetAz(self,targetPtr) <-80.0f*DTR && TargetAz(self,targetPtr) >-100.0f*DTR)
; 2610 : 	)

	mov	edx, DWORD PTR ?heighttimer@?P@??BeamManeuver@DigitalBrain@@IAEHHH@Z@4KA
	add	edx, 15000				; 00003a98H
	cmp	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	jae	$LN4@BeamManeuv
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	?TargetAz@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z ; TargetAz
	add	esp, 8
	fstp	DWORD PTR tv430[ebp]
	movss	xmm0, DWORD PTR tv430[ebp]
	comiss	xmm0, DWORD PTR __real@3fb2b8c1
	jbe	SHORT $LN5@BeamManeuv
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	?TargetAz@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z ; TargetAz
	add	esp, 8
	fstp	DWORD PTR tv438[ebp]
	movss	xmm0, DWORD PTR __real@3fdf66f1
	comiss	xmm0, DWORD PTR tv438[ebp]
	ja	SHORT $LN6@BeamManeuv
$LN5@BeamManeuv:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	?TargetAz@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z ; TargetAz
	add	esp, 8
	fstp	DWORD PTR tv447[ebp]
	movss	xmm0, DWORD PTR __real@bfb2b8c1
	comiss	xmm0, DWORD PTR tv447[ebp]
	jbe	$LN4@BeamManeuv
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	?TargetAz@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z ; TargetAz
	add	esp, 8
	fstp	DWORD PTR tv456[ebp]
	movss	xmm0, DWORD PTR tv456[ebp]
	comiss	xmm0, DWORD PTR __real@bfdf66f1
	jbe	$LN4@BeamManeuv
$LN6@BeamManeuv:

; 2611 : 	{
; 2612 : 		heighttimer = SimLibElapsedTime;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR ?heighttimer@?P@??BeamManeuver@DigitalBrain@@IAEHHH@Z@4KA, ecx

; 2613 : 
; 2614 : 		if (
; 2615 : 			!direction && 
; 2616 : 			bvrTacticTimer > SimLibElapsedTime + 5 * CampaignSeconds - SkillLevel()* CampaignSeconds &&
; 2617 : 			SpikeCheck (self) != targetPtr->BaseData()
; 2618 : 		){ 

	cmp	DWORD PTR _direction$[ebp], 0
	jne	SHORT $LN4@BeamManeuv
	mov	esi, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	esi, 5000				; 00001388H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SkillLevel@BaseBrain@@QAEHXZ		; BaseBrain::SkillLevel
	imul	eax, 1000				; 000003e8H
	sub	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+592], esi
	jbe	SHORT $LN4@BeamManeuv
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	?SpikeCheck@@YAPAVFalconEntity@@PAVAircraftClass@@PAV1@PAH@Z ; SpikeCheck
	add	esp, 12					; 0000000cH
	mov	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	esi, eax
	je	SHORT $LN4@BeamManeuv

; 2619 : 			bvrTacticTimer = SimLibElapsedTime + 5 * CampaignSeconds - SkillLevel()* CampaignSeconds;

	mov	esi, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	esi, 5000				; 00001388H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SkillLevel@BaseBrain@@QAEHXZ		; BaseBrain::SkillLevel
	imul	eax, 1000				; 000003e8H
	sub	esi, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], esi
$LN4@BeamManeuv:

; 2620 : 		}
; 2621 :    }
; 2622 :    /*----------------------------------------------------------*/
; 2623 :    /* use AUTO_TRACK to steer toward point, override gs limits */
; 2624 :    /*----------------------------------------------------------*/
; 2625 : 	// VP_changes this part should be evaluated. 12.11.2002
; 2626 : 	static VU_TIME chaffttimer = 0;
; 2627 : 	if (
; 2628 : 		SpikeCheck (self) && 
; 2629 : 		SpikeCheck (self) == targetPtr->BaseData() &&
; 2630 : 		chaffttimer + 1.5 * CampaignSeconds < SimLibElapsedTime
; 2631 : 	)

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	?SpikeCheck@@YAPAVFalconEntity@@PAVAircraftClass@@PAV1@PAH@Z ; SpikeCheck
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN3@BeamManeuv
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	?SpikeCheck@@YAPAVFalconEntity@@PAVAircraftClass@@PAV1@PAH@Z ; SpikeCheck
	add	esp, 12					; 0000000cH
	mov	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	esi, eax
	jne	SHORT $LN3@BeamManeuv
	mov	eax, DWORD PTR ?chaffttimer@?BF@??BeamManeuver@DigitalBrain@@IAEHHH@Z@4KA
	mov	DWORD PTR tv478[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv478[ebp]
	mov	ecx, DWORD PTR tv478[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	addsd	xmm0, QWORD PTR __real@4097700000000000
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR tv483[ebp], edx
	cvtsi2sd xmm1, DWORD PTR tv483[ebp]
	mov	eax, DWORD PTR tv483[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	comisd	xmm1, xmm0
	jbe	SHORT $LN3@BeamManeuv

; 2632 : 	{
; 2633 : 		((AircraftClass*)self)->dropChaffCmd = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	BYTE PTR [edx+960], 1

; 2634 : 		chaffttimer= SimLibElapsedTime;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR ?chaffttimer@?BF@??BeamManeuver@DigitalBrain@@IAEHHH@Z@4KA, eax
$LN3@BeamManeuv:

; 2635 : 	}
; 2636 : 
; 2637 : 	if (!NotchHI){

	cmp	DWORD PTR _NotchHI$[ebp], 0
	jne	$LN2@BeamManeuv

; 2638 : 		trackZ = max (-10000.0f + (float)SkillLevel()*2000.0f,self->ZPos());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SkillLevel@BaseBrain@@QAEHXZ		; BaseBrain::SkillLevel
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@44fa0000
	addss	xmm0, DWORD PTR __real@c61c4000
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movss	DWORD PTR tv527[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv496[ebp]
	movss	xmm0, DWORD PTR tv527[ebp]
	comiss	xmm0, DWORD PTR tv496[ebp]
	jbe	SHORT $LN17@BeamManeuv
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SkillLevel@BaseBrain@@QAEHXZ		; BaseBrain::SkillLevel
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@44fa0000
	addss	xmm0, DWORD PTR __real@c61c4000
	movss	DWORD PTR tv325[ebp], xmm0
	jmp	SHORT $LN18@BeamManeuv
$LN17@BeamManeuv:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv325[ebp]
$LN18@BeamManeuv:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv325[ebp]
	movss	DWORD PTR [eax+156], xmm0

; 2639 : 		StickandThrottle (cornerSpeed, trackZ);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+156]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+100]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StickandThrottle@DigitalBrain@@IAEXMM@Z ; DigitalBrain::StickandThrottle

; 2640 : 	}
; 2641 : 	else{

	jmp	$LN1@BeamManeuv
$LN2@BeamManeuv:

; 2642 : 		// 2002-03-14 MODIFIED BY S.G. What about plane that can't go that high?
; 2643 : 		// StickandThrottle (-3, -50000);
; 2644 : 		VehicleClassDataType *vc = GetVehicleClassData(self->Type() - VU_LAST_ENTITY_TYPE);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	ecx, ax
	sub	ecx, 100				; 00000064H
	push	ecx
	call	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z ; GetVehicleClassData
	add	esp, 4
	mov	DWORD PTR _vc$2[ebp], eax

; 2645 : 		float maxAlt = max(vc->HighAlt * -100.0f, -50000.0f);

	mov	edx, DWORD PTR _vc$2[ebp]
	movsx	eax, WORD PTR [edx+48]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@c2c80000
	comiss	xmm0, DWORD PTR __real@c7435000
	jbe	SHORT $LN19@BeamManeuv
	mov	ecx, DWORD PTR _vc$2[ebp]
	movsx	edx, WORD PTR [ecx+48]
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR __real@c2c80000
	movss	DWORD PTR tv353[ebp], xmm0
	jmp	SHORT $LN20@BeamManeuv
$LN19@BeamManeuv:
	movss	xmm0, DWORD PTR __real@c7435000
	movss	DWORD PTR tv353[ebp], xmm0
$LN20@BeamManeuv:
	movss	xmm0, DWORD PTR tv353[ebp]
	movss	DWORD PTR _maxAlt$1[ebp], xmm0

; 2646 : 		StickandThrottle (-3, maxAlt);

	push	ecx
	movss	xmm0, DWORD PTR _maxAlt$1[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c0400000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StickandThrottle@DigitalBrain@@IAEXMM@Z ; DigitalBrain::StickandThrottle
$LN1@BeamManeuv:

; 2647 : 	}
; 2648 : 	//StickandThrottle (cornerSpeed, trackZ);
; 2649 : 	retval = TRUE;

	mov	DWORD PTR _retval$[ebp], 1

; 2650 : 	ShiAssert(trackZ < 0.0F);
; 2651 : 	return (retval);

	mov	eax, DWORD PTR _retval$[ebp]

; 2652 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?BeamManeuver@DigitalBrain@@IAEHHH@Z ENDP		; DigitalBrain::BeamManeuver
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_trig$1 = -104						; size = 8
_wpX$2 = -96						; size = 4
_wpY$3 = -92						; size = 4
tv557 = -88						; size = 4
tv549 = -84						; size = 4
tv543 = -80						; size = 4
tv537 = -76						; size = 4
tv530 = -72						; size = 4
tv524 = -68						; size = 4
tv481 = -64						; size = 4
tv475 = -60						; size = 4
tv447 = -56						; size = 4
tv436 = -52						; size = 4
tv569 = -48						; size = 4
tv428 = -44						; size = 4
tv418 = -40						; size = 4
tv411 = -36						; size = 4
tv403 = -32						; size = 4
tv366 = -28						; size = 4
tv350 = -24						; size = 4
tv302 = -20						; size = 4
tv237 = -16						; size = 4
_wpZ$4 = -12						; size = 4
_az$5 = -8						; size = 4
_this$ = -4						; size = 4
?BaseLineIntercept@DigitalBrain@@IAEXXZ PROC		; DigitalBrain::BaseLineIntercept
; _this$ = ecx

; 2472 : {//only with radar sa !

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	mov	DWORD PTR _this$[ebp], ecx

; 2473 : if (fabs(targetData->azFrom) < 30*DTR ||  
; 2474 : 	 fabs(targetData->azFrom) > 40*DTR &&
; 2475 : 	 fabs(targetData->azFrom) < 160*DTR)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+20]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv403[ebp]
	movss	xmm0, DWORD PTR __real@3f060a91
	comiss	xmm0, DWORD PTR tv403[ebp]
	ja	SHORT $LN16@BaseLineIn
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	ecx
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv411[ebp]
	movss	xmm0, DWORD PTR tv411[ebp]
	comiss	xmm0, DWORD PTR __real@3f32b8c1
	jbe	$LN17@BaseLineIn
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	ecx
	movss	xmm0, DWORD PTR [edx+20]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv418[ebp]
	movss	xmm0, DWORD PTR __real@4032b8c1
	comiss	xmm0, DWORD PTR tv418[ebp]
	jbe	$LN17@BaseLineIn
$LN16@BaseLineIn:

; 2476 : 				{//offset
; 2477 : 
; 2478 : 				float az;
; 2479 : 				mlTrig trig;
; 2480 : 				if (reactiont > 3.0f) reactiont = 3.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+172]
	comiss	xmm0, DWORD PTR __real@40400000
	jbe	SHORT $LN15@BaseLineIn
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [ecx+172], xmm0
$LN15@BaseLineIn:

; 2481 : 				   /*-----------------*/
; 2482 : 				   /*  heading to target*/
; 2483 : 				   /*-----------------*/
; 2484 : 				   az = self->Yaw() + TargetAz(self,targetPtr) ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv428[ebp]
	movss	xmm0, DWORD PTR tv428[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	movss	DWORD PTR tv569[ebp], xmm0
	call	?TargetAz@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z ; TargetAz
	add	esp, 8
	fstp	DWORD PTR tv436[ebp]
	movss	xmm0, DWORD PTR tv569[ebp]
	addss	xmm0, DWORD PTR tv436[ebp]
	movss	DWORD PTR _az$5[ebp], xmm0

; 2485 : 					if (az > PI)

	movss	xmm0, DWORD PTR _az$5[ebp]
	comiss	xmm0, DWORD PTR __real@40490fdb
	jbe	SHORT $LN14@BaseLineIn

; 2486 : 		  			 az -= 2*PI;

	movss	xmm0, DWORD PTR _az$5[ebp]
	subss	xmm0, DWORD PTR __real@40c90fdb
	movss	DWORD PTR _az$5[ebp], xmm0
$LN14@BaseLineIn:

; 2487 : 					if (az < -PI)

	movss	xmm0, DWORD PTR __real@c0490fdb
	comiss	xmm0, DWORD PTR _az$5[ebp]
	jbe	SHORT $LN13@BaseLineIn

; 2488 : 		  			 az += 2*PI;

	movss	xmm0, DWORD PTR _az$5[ebp]
	addss	xmm0, DWORD PTR __real@40c90fdb
	movss	DWORD PTR _az$5[ebp], xmm0
$LN13@BaseLineIn:

; 2489 : 				   /*--------------------*/
; 2490 : 				   /* pick a new heading */
; 2491 : 				   /*--------------------*/
; 2492 : 					if (fabs(targetData->azFrom) < 35* DTR)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	ecx
	movss	xmm0, DWORD PTR [edx+20]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv447[ebp]
	movss	xmm0, DWORD PTR __real@3f1c61a9
	comiss	xmm0, DWORD PTR tv447[ebp]
	jbe	SHORT $LN12@BaseLineIn

; 2493 : 					{//offset
; 2494 : 					   if	(targetData->azFrom < 0.0f )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx+20]
	jbe	SHORT $LN11@BaseLineIn

; 2495 : 					   {
; 2496 : 							az = az + 45.0f * DTR;

	movss	xmm0, DWORD PTR _az$5[ebp]
	addss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR _az$5[ebp], xmm0

; 2497 : 							offsetdir = offRight;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+600], 1

; 2498 : 						#ifdef DEBUG_INTERCEPT 
; 2499 : 								MonoPrint ("offset +");
; 2500 : 						#endif
; 2501 : 					   }
; 2502 : 					   else

	jmp	SHORT $LN10@BaseLineIn
$LN11@BaseLineIn:

; 2503 : 					   {
; 2504 : 							az = az - 45.0f * DTR;

	movss	xmm0, DWORD PTR _az$5[ebp]
	subss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR _az$5[ebp], xmm0

; 2505 : 							offsetdir = offLeft;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+600], 3
$LN10@BaseLineIn:

; 2506 : 						#ifdef DEBUG_INTERCEPT 
; 2507 : 								MonoPrint ("offset -");
; 2508 : 						#endif
; 2509 : 					   }
; 2510 : 					}
; 2511 : 					else 

	jmp	SHORT $LN7@BaseLineIn
$LN12@BaseLineIn:

; 2512 : 					{//collision
; 2513 : 					   if	(targetData->azFrom > 0.0f )				

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [edx+20]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN8@BaseLineIn

; 2514 : 					   {
; 2515 : 							az = az + 45.0f * DTR;

	movss	xmm0, DWORD PTR _az$5[ebp]
	addss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR _az$5[ebp], xmm0

; 2516 : 						#ifdef DEBUG_INTERCEPT 
; 2517 : 								MonoPrint ("collision +");
; 2518 : 						#endif
; 2519 : 					   }
; 2520 : 
; 2521 : 					   else{

	jmp	SHORT $LN7@BaseLineIn
$LN8@BaseLineIn:

; 2522 : 						az = az - 45.0f * DTR;

	movss	xmm0, DWORD PTR _az$5[ebp]
	subss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR _az$5[ebp], xmm0
$LN7@BaseLineIn:

; 2523 : 						#ifdef DEBUG_INTERCEPT 
; 2524 : 								MonoPrint ("collision -");
; 2525 : 						#endif
; 2526 : 						}
; 2527 : 					}
; 2528 : 				   /*------------------------------------*/
; 2529 : 				   /* find a stationary point 10 NM away */
; 2530 : 				   /* in the nh? direction.              */
; 2531 : 				   /*------------------------------------*/
; 2532 : 
; 2533 : 					if (az > PI)

	movss	xmm0, DWORD PTR _az$5[ebp]
	comiss	xmm0, DWORD PTR __real@40490fdb
	jbe	SHORT $LN6@BaseLineIn

; 2534 : 		  			 az -= 2*PI;

	movss	xmm0, DWORD PTR _az$5[ebp]
	subss	xmm0, DWORD PTR __real@40c90fdb
	movss	DWORD PTR _az$5[ebp], xmm0
$LN6@BaseLineIn:

; 2535 : 					if (az < -PI)

	movss	xmm0, DWORD PTR __real@c0490fdb
	comiss	xmm0, DWORD PTR _az$5[ebp]
	jbe	SHORT $LN5@BaseLineIn

; 2536 : 		  			 az += 2*PI;

	movss	xmm0, DWORD PTR _az$5[ebp]
	addss	xmm0, DWORD PTR __real@40c90fdb
	movss	DWORD PTR _az$5[ebp], xmm0
$LN5@BaseLineIn:

; 2537 : 
; 2538 : 				mlSinCos(&trig, az);

	push	ecx
	movss	xmm0, DWORD PTR _az$5[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trig$1[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 2539 : 				reactiont -= SimLibMajorFrameTime;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+172]
	subss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+172], xmm0

; 2540 : 				if (reactiont < 0 ){

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+172]
	jbe	SHORT $LN4@BaseLineIn

; 2541 : 					SetTrackPoint(self->XPos() + 10.0F*NM_TO_FT*trig.cos, self->YPos() + 10.0F*NM_TO_FT*trig.sin);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv475[ebp]
	movss	xmm0, DWORD PTR tv475[ebp]
	movss	xmm1, DWORD PTR __real@476d5a1c
	mulss	xmm1, DWORD PTR _trig$1[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv481[ebp]
	movss	xmm0, DWORD PTR tv481[ebp]
	movss	xmm1, DWORD PTR __real@476d5a1c
	mulss	xmm1, DWORD PTR _trig$1[ebp+4]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPoint@DigitalBrain@@QAEXMM@Z	; DigitalBrain::SetTrackPoint

; 2542 : 					reactiont = 3.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [eax+172], xmm0
$LN4@BaseLineIn:

; 2543 : 				}
; 2544 : 				StickandThrottle (-1, trackZ);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+156]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StickandThrottle@DigitalBrain@@IAEXMM@Z ; DigitalBrain::StickandThrottle

; 2545 : 			}
; 2546 : 			else 

	jmp	$LN3@BaseLineIn
$LN17@BaseLineIn:

; 2547 : 			{// pure
; 2548 : 				offsetdir = offForward;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+600], 0

; 2549 : 				reactiont -= SimLibMajorFrameTime;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+172]
	subss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+172], xmm0

; 2550 : 				if (reactiont < 0){

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [edx+172]
	jbe	SHORT $LN2@BaseLineIn

; 2551 : 					SetTrackPoint(targetPtr->BaseData()->XPos(), trackY = targetPtr->BaseData()->YPos());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv237[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv237[ebp]
	movss	DWORD PTR [ecx+152], xmm0
	push	ecx
	movss	xmm0, DWORD PTR tv237[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPoint@DigitalBrain@@QAEXMM@Z	; DigitalBrain::SetTrackPoint
$LN2@BaseLineIn:

; 2552 : 				}
; 2553 : 				float wpX,wpY,wpZ = 4000.0f;

	movss	xmm0, DWORD PTR __real@457a0000
	movss	DWORD PTR _wpZ$4[ebp], xmm0

; 2554 : 				if (self->curWaypoint)self->curWaypoint->GetLocation (&wpX, &wpY, &wpZ);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	cmp	DWORD PTR [ecx+728], 0
	je	SHORT $LN1@BaseLineIn
	lea	edx, DWORD PTR _wpZ$4[ebp]
	push	edx
	lea	eax, DWORD PTR _wpY$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _wpX$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+728]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation
$LN1@BaseLineIn:

; 2555 : 				trackZ = min(max(targetPtr->BaseData()->ZPos()-10000.0f,wpZ),targetPtr->BaseData()->ZPos()+10000.0f);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv524[ebp]
	movss	xmm0, DWORD PTR tv524[ebp]
	subss	xmm0, DWORD PTR __real@461c4000
	comiss	xmm0, DWORD PTR _wpZ$4[ebp]
	jbe	SHORT $LN20@BaseLineIn
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv530[ebp]
	movss	xmm0, DWORD PTR tv530[ebp]
	subss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR tv302[ebp], xmm0
	jmp	SHORT $LN21@BaseLineIn
$LN20@BaseLineIn:
	movss	xmm0, DWORD PTR _wpZ$4[ebp]
	movss	DWORD PTR tv302[ebp], xmm0
$LN21@BaseLineIn:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv537[ebp]
	movss	xmm0, DWORD PTR tv537[ebp]
	addss	xmm0, DWORD PTR __real@461c4000
	comiss	xmm0, DWORD PTR tv302[ebp]
	jbe	SHORT $LN24@BaseLineIn
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv543[ebp]
	movss	xmm0, DWORD PTR tv543[ebp]
	subss	xmm0, DWORD PTR __real@461c4000
	comiss	xmm0, DWORD PTR _wpZ$4[ebp]
	jbe	SHORT $LN22@BaseLineIn
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv549[ebp]
	movss	xmm0, DWORD PTR tv549[ebp]
	subss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR tv350[ebp], xmm0
	jmp	SHORT $LN23@BaseLineIn
$LN22@BaseLineIn:
	movss	xmm0, DWORD PTR _wpZ$4[ebp]
	movss	DWORD PTR tv350[ebp], xmm0
$LN23@BaseLineIn:
	movss	xmm0, DWORD PTR tv350[ebp]
	movss	DWORD PTR tv366[ebp], xmm0
	jmp	SHORT $LN25@BaseLineIn
$LN24@BaseLineIn:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv557[ebp]
	movss	xmm0, DWORD PTR tv557[ebp]
	addss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR tv366[ebp], xmm0
$LN25@BaseLineIn:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv366[ebp]
	movss	DWORD PTR [ecx+156], xmm0

; 2556 : 				StickandThrottle (-1, trackZ);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+156]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StickandThrottle@DigitalBrain@@IAEXMM@Z ; DigitalBrain::StickandThrottle

; 2557 : 				reactiont = 3.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [eax+172], xmm0
$LN3@BaseLineIn:

; 2558 : #ifdef DEBUG_INTERCEPT 
; 2559 : 			MonoPrint ("PURE");
; 2560 : #endif	
; 2561 : 			}
; 2562 : 			ShiAssert(trackZ < 0.0F);
; 2563 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?BaseLineIntercept@DigitalBrain@@IAEXXZ ENDP		; DigitalBrain::BaseLineIntercept
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_sensitivityDecent$ = -52				; size = 4
tv297 = -48						; size = 4
tv290 = -44						; size = 4
tv284 = -40						; size = 4
_trkZ$ = -36						; size = 4
tv259 = -32						; size = 4
tv239 = -28						; size = 4
tv200 = -24						; size = 4
tv192 = -20						; size = 4
_speeddifference$ = -16					; size = 4
_MaxEnergyMode$ = -12					; size = 4
_sensitivityClimp$ = -8					; size = 4
_this$ = -4						; size = 4
_DesiredSpeed$ = 8					; size = 4
_DesiredAltitude$ = 12					; size = 4
?StickandThrottle@DigitalBrain@@IAEXMM@Z PROC		; DigitalBrain::StickandThrottle
; _this$ = ecx

; 2746 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 2747 : 	float sensitivityDecent= 20.0f;

	movss	xmm0, DWORD PTR __real@41a00000
	movss	DWORD PTR _sensitivityDecent$[ebp], xmm0

; 2748 : 	float sensitivityClimp = 800.0f;

	movss	xmm0, DWORD PTR __real@44480000
	movss	DWORD PTR _sensitivityClimp$[ebp], xmm0

; 2749 : 	float speeddifference;
; 2750 : 	int MaxEnergyMode = 1;

	mov	DWORD PTR _MaxEnergyMode$[ebp], 1

; 2751 : 	if (DesiredSpeed == -1)

	movss	xmm0, DWORD PTR _DesiredSpeed$[ebp]
	ucomiss	xmm0, DWORD PTR __real@bf800000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@StickandTh

; 2752 : 	{
; 2753 : 		DesiredSpeed = ((AircraftClass*)self)->af->GetOptKias(0)*1.05f; // 2002-03-15 MODIFIED BY S.G. From 1.4 to 1.05. Plane will have trouble getting there and will burn too much fuel trying to

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [ecx+932]
	call	?GetOptKias@AirframeClass@@QAEMH@Z	; AirframeClass::GetOptKias
	fstp	DWORD PTR tv239[ebp]
	movss	xmm0, DWORD PTR tv239[ebp]
	mulss	xmm0, DWORD PTR __real@3f866666
	movss	DWORD PTR _DesiredSpeed$[ebp], xmm0

; 2754 : 		MaxEnergyMode = 2;

	mov	DWORD PTR _MaxEnergyMode$[ebp], 2
$LN8@StickandTh:

; 2755 : 	}
; 2756 : 	if (DesiredSpeed == -2)

	movss	xmm0, DWORD PTR _DesiredSpeed$[ebp]
	ucomiss	xmm0, DWORD PTR __real@c0000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN7@StickandTh

; 2757 : 	{
; 2758 : 		DesiredSpeed = ((AircraftClass*)self)->af->MaxVcas();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+932]
	call	?MaxVcas@AirframeClass@@QAEMXZ		; AirframeClass::MaxVcas
	fstp	DWORD PTR _DesiredSpeed$[ebp]

; 2759 : 		MaxEnergyMode = 2;

	mov	DWORD PTR _MaxEnergyMode$[ebp], 2
$LN7@StickandTh:

; 2760 : 	}
; 2761 : 	if (DesiredSpeed == -3)

	movss	xmm0, DWORD PTR _DesiredSpeed$[ebp]
	ucomiss	xmm0, DWORD PTR __real@c0400000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN6@StickandTh

; 2762 : 	{// for notch high maneuver
; 2763 : //		DesiredSpeed = ((AircraftClass*)self)->af->MinVcas();
; 2764 : 		DesiredSpeed = ((AircraftClass*)self)->af->GetOptKias(0); // 2002-03-14 MODIFIED BY S.G. If we have to climb, why not find our best climb speed?

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+932]
	call	?GetOptKias@AirframeClass@@QAEMH@Z	; AirframeClass::GetOptKias
	fstp	DWORD PTR _DesiredSpeed$[ebp]

; 2765 : 		MaxEnergyMode = 10;

	mov	DWORD PTR _MaxEnergyMode$[ebp], 10	; 0000000aH

; 2766 : 		sensitivityClimp *= 10;

	movss	xmm0, DWORD PTR _sensitivityClimp$[ebp]
	mulss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR _sensitivityClimp$[ebp], xmm0
$LN6@StickandTh:

; 2767 : 	}
; 2768 : 	speeddifference = DesiredSpeed - self->GetKias();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+56]
	mov	edx, DWORD PTR [eax+224]
	call	edx
	fstp	DWORD PTR tv259[ebp]
	movss	xmm0, DWORD PTR _DesiredSpeed$[ebp]
	subss	xmm0, DWORD PTR tv259[ebp]
	movss	DWORD PTR _speeddifference$[ebp], xmm0

; 2769 : 
; 2770 : 	// Cobra - Use local max elevation to try and keep AI from lawndarting
; 2771 : 	float trkZ = TheMap.GetMEA(((AircraftClass*) self)->XPos(), ((AircraftClass*) self)->YPos()); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	call	?GetMEA@TMap@@QAEMMM@Z			; TMap::GetMEA
	fstp	DWORD PTR _trkZ$[ebp]

; 2772 : 
; 2773 : 
; 2774 : 	if(speeddifference > 50.0f)

	movss	xmm0, DWORD PTR _speeddifference$[ebp]
	comiss	xmm0, DWORD PTR __real@42480000
	jbe	SHORT $LN5@StickandTh

; 2775 : 	{// we need speed nomatter what sell altitude...speed has priority here
; 2776 : 		if (trackZ < -4000.0f - trkZ)

	movss	xmm0, DWORD PTR __real@c57a0000
	subss	xmm0, DWORD PTR _trkZ$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [edx+156]
	jbe	SHORT $LN4@StickandTh

; 2777 : 			trackZ = self->ZPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+156]
$LN4@StickandTh:

; 2778 : 	}
; 2779 : 	else

	jmp	$LN1@StickandTh
$LN5@StickandTh:

; 2780 : 	{
; 2781 : 		if (-self->ZPos() < -DesiredAltitude)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv284[ebp]
	movss	xmm0, DWORD PTR tv284[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _DesiredAltitude$[ebp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN2@StickandTh

; 2782 : 		{
; 2783 : 		trackZ = min (self->ZPos() + (speeddifference*sensitivityClimp) , DesiredAltitude);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv290[ebp]
	movss	xmm0, DWORD PTR tv290[ebp]
	movss	xmm1, DWORD PTR _speeddifference$[ebp]
	mulss	xmm1, DWORD PTR _sensitivityClimp$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _DesiredAltitude$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN11@StickandTh
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv297[ebp]
	movss	xmm0, DWORD PTR tv297[ebp]
	movss	xmm1, DWORD PTR _speeddifference$[ebp]
	mulss	xmm1, DWORD PTR _sensitivityClimp$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv192[ebp], xmm0
	jmp	SHORT $LN12@StickandTh
$LN11@StickandTh:
	movss	xmm0, DWORD PTR _DesiredAltitude$[ebp]
	movss	DWORD PTR tv192[ebp], xmm0
$LN12@StickandTh:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv192[ebp]
	movss	DWORD PTR [edx+156], xmm0

; 2784 : //		trackZ = max (trackZ,-45000.0f);
; 2785 : 		}
; 2786 : 		else 

	jmp	SHORT $LN1@StickandTh
$LN2@StickandTh:

; 2787 : 		{
; 2788 : 		trackZ = DesiredAltitude;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _DesiredAltitude$[ebp]
	movss	DWORD PTR [eax+156], xmm0

; 2789 : 		trackZ = min (trackZ,-4000.0f);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c57a0000
	comiss	xmm0, DWORD PTR [ecx+156]
	jbe	SHORT $LN13@StickandTh
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+156]
	movss	DWORD PTR tv200[ebp], xmm0
	jmp	SHORT $LN14@StickandTh
$LN13@StickandTh:
	movss	xmm0, DWORD PTR __real@c57a0000
	movss	DWORD PTR tv200[ebp], xmm0
$LN14@StickandTh:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv200[ebp]
	movss	DWORD PTR [eax+156], xmm0
$LN1@StickandTh:

; 2790 : 		}
; 2791 : 	}
; 2792 : 
; 2793 : 
; 2794 : 	AutoTrack (4.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AutoTrack@DigitalBrain@@IAEMM@Z	; DigitalBrain::AutoTrack
	fstp	ST(0)

; 2795 : //	MachHold(DesiredSpeed*MaxEnergyMode, self->GetKias(), TRUE);
; 2796 : 	MachHold(DesiredSpeed, self->GetKias(), TRUE); // 2002-03-14 S.G. Not sure what RIK was trying to do here but this 'MaxEnergyMode' makes MachHold go into overtime trying to go really really fast :-(

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR [edx+224]
	call	eax
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _DesiredSpeed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MachHold@DigitalBrain@@IAEHMMH@Z	; DigitalBrain::MachHold

; 2797 : 	ShiAssert(trackZ < 0.0F);
; 2798 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?StickandThrottle@DigitalBrain@@IAEXMM@Z ENDP		; DigitalBrain::StickandThrottle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_elementlead$ = -12					; size = 4
tv174 = -8						; size = 4
_this$ = -4						; size = 4
?Sweep@DigitalBrain@@IAEXXZ PROC			; DigitalBrain::Sweep
; _this$ = ecx

; 1813 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1814 : // sweep with superior weaopns
; 1815 : /* the plan is to lean into bandits early
; 1816 : if we outnumber them then only lean with one element
; 1817 : when the bandits are cold we fly on course.
; 1818 :  
; 1819 :   */
; 1820 : 	if (!Isflightlead && !IsElementlead) return;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	jne	SHORT $LN15@Sweep
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+625]
	test	eax, eax
	jne	SHORT $LN15@Sweep
	jmp	$LN16@Sweep
$LN15@Sweep:

; 1821 : 
; 1822 : 	AircraftClass *elementlead = NULL;

	mov	DWORD PTR _elementlead$[ebp], 0

; 1823 : 	if (self->vehicleInUnit == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	movzx	eax, BYTE PTR [edx+664]
	test	eax, eax
	jne	SHORT $LN14@Sweep

; 1824 : 	elementlead = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(2);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _elementlead$[ebp], eax
$LN14@Sweep:

; 1825 : 	if (self->vehicleInUnit == 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	movzx	ecx, BYTE PTR [eax+664]
	cmp	ecx, 2
	jne	SHORT $LN13@Sweep

; 1826 : 	elementlead = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(0);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _elementlead$[ebp], eax
$LN13@Sweep:

; 1827 : 
; 1828 : 	bvractionstep = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+628], 0

; 1829 : 	if (HowManyTargetet() <= self->GetCampaignObject()->NumberOfComponents()-1 && HowManyHotnosed()) bvractionstep = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HowManyTargetet@DigitalBrain@@IAEHXZ	; DigitalBrain::HowManyTargetet
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	sub	eax, 1
	cmp	esi, eax
	jg	SHORT $LN12@Sweep
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HowManyHotnosed@DigitalBrain@@IAEHXZ	; DigitalBrain::HowManyHotnosed
	test	eax, eax
	je	SHORT $LN12@Sweep
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+628], 1
	jmp	SHORT $LN11@Sweep
$LN12@Sweep:

; 1830 : 	else if (HowManyTargetet() && HowManyHotnosed()) bvractionstep = 2;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HowManyTargetet@DigitalBrain@@IAEHXZ	; DigitalBrain::HowManyTargetet
	test	eax, eax
	je	SHORT $LN11@Sweep
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HowManyHotnosed@DigitalBrain@@IAEHXZ	; DigitalBrain::HowManyHotnosed
	test	eax, eax
	je	SHORT $LN11@Sweep
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+628], 2
$LN11@Sweep:

; 1831 : 
; 1832 : bvrTacticTimer = SimLibElapsedTime + 15 * CampaignSeconds;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 15000				; 00003a98H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+592], ecx

; 1833 : 	   switch (bvractionstep)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+628]
	mov	DWORD PTR tv174[ebp], ecx
	cmp	DWORD PTR tv174[ebp], 0
	je	SHORT $LN7@Sweep
	cmp	DWORD PTR tv174[ebp], 1
	je	SHORT $LN4@Sweep
	cmp	DWORD PTR tv174[ebp], 2
	je	SHORT $LN1@Sweep
	jmp	SHORT $LN16@Sweep
$LN7@Sweep:

; 1834 : 	   {
; 1835 : 	   case 0: 
; 1836 : 		   {// fly waypoints
; 1837 : 			if (Isflightlead)	bvrCurrTactic = BvrFollowWaypoints;

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+624]
	test	eax, eax
	je	SHORT $LN6@Sweep
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 0
	jmp	SHORT $LN5@Sweep
$LN6@Sweep:

; 1838 : 			else bvrCurrTactic = BvrFlyFormation;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 1
$LN5@Sweep:

; 1839 : 		   }
; 1840 : 		   break;

	jmp	SHORT $LN16@Sweep
$LN4@Sweep:

; 1841 : 	   case 1:// lean element into the threat
; 1842 : 		   {
; 1843 : 			if (Isflightlead)	bvrCurrTactic = BvrFollowWaypoints;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	je	SHORT $LN3@Sweep
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 0
	jmp	SHORT $LN2@Sweep
$LN3@Sweep:

; 1844 : 			else bvrCurrTactic = BvrPursuit;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 4
$LN2@Sweep:

; 1845 : 		   }
; 1846 : 		   break;

	jmp	SHORT $LN16@Sweep
$LN1@Sweep:

; 1847 : 		case 2:// all lean into the threat
; 1848 : 		   {
; 1849 : 			   bvrCurrTactic = BvrPursuit;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 4
$LN16@Sweep:

; 1850 : 		   }
; 1851 : 			break;
; 1852 : 	   }
; 1853 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?Sweep@DigitalBrain@@IAEXXZ ENDP			; DigitalBrain::Sweep
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_flightIdx$1 = -36					; size = 4
_flightIdx$2 = -32					; size = 4
$T3 = -28						; size = 4
_this$ = -24						; size = 4
_edata$4 = -20						; size = 6
_edata$5 = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Defensive@DigitalBrain@@IAEXXZ PROC			; DigitalBrain::Defensive
; _this$ = ecx

; 1855 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1856 : if (!Isflightlead && !IsElementlead) return;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	jne	SHORT $LN6@Defensive
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+625]
	test	eax, eax
	jne	SHORT $LN6@Defensive
	jmp	$LN7@Defensive
$LN6@Defensive:

; 1857 :  if (WhoIsSpiked() || WhoIsHotnosed() )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?WhoIsSpiked@DigitalBrain@@IAEHXZ	; DigitalBrain::WhoIsSpiked
	test	eax, eax
	jne	SHORT $LN4@Defensive
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WhoIsHotnosed@DigitalBrain@@IAEHXZ	; DigitalBrain::WhoIsHotnosed
	test	eax, eax
	je	$LN5@Defensive
$LN4@Defensive:

; 1858 : 	{		
; 1859 :  		bvrCurrTactic = BvrFollowWaypoints;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 0

; 1860 : 		bvrTacticTimer = SimLibElapsedTime + 10 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 10000				; 00002710H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx

; 1861 : 
; 1862 : 		if (targetData->range > 20*NM_TO_FT)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [edx+44]
	comiss	xmm0, DWORD PTR __real@47ed5a1c
	jbe	$LN3@Defensive

; 1863 : 		{
; 1864 : 			
; 1865 : 			bvrCurrTactic = BvrNotch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 10			; 0000000aH

; 1866 : 			bvrTacticTimer = SimLibElapsedTime + 15 * CampaignSeconds;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 15000				; 00003a98H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+592], ecx

; 1867 : 				short edata[3];
; 1868 : 				int flightIdx	= self->GetCampaignObject()->GetComponentIndex(self);	

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentIndex@CampBaseClass@@QAEHPAVVuEntity@@@Z ; CampBaseClass::GetComponentIndex
	mov	DWORD PTR _flightIdx$2[ebp], eax

; 1869 : 				edata[0] = flightIdx;

	mov	eax, 2
	imul	eax, 0
	mov	cx, WORD PTR _flightIdx$2[ebp]
	mov	WORD PTR _edata$4[ebp+eax], cx

; 1870 : 				edata[1] = 0;//notching

	mov	DWORD PTR $T3[ebp], 2
	cmp	DWORD PTR $T3[ebp], 6
	jae	SHORT $LN9@Defensive
	jmp	SHORT $LN10@Defensive
$LN9@Defensive:
	call	___report_rangecheckfailure
$LN10@Defensive:
	xor	edx, edx
	mov	eax, DWORD PTR $T3[ebp]
	mov	WORD PTR _edata$4[ebp+eax], dx

; 1871 : 				AiMakeRadioResponse( self, rcEXECUTERESPONSE, edata );

	lea	ecx, DWORD PTR _edata$4[ebp]
	push	ecx
	push	68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	?AiMakeRadioResponse@@YAXPAVSimBaseClass@@HPAF@Z ; AiMakeRadioResponse
	add	esp, 12					; 0000000cH

; 1872 : 		}
; 1873 : 		else

	jmp	$LN2@Defensive
$LN3@Defensive:

; 1874 : 		{
; 1875 : 			bvrCurrTactic = BvrPump;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 6

; 1876 : 			bvrTacticTimer = SimLibElapsedTime + 30 * CampaignSeconds + SkillLevel() * 5* CampaignSeconds;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SkillLevel@BaseBrain@@QAEHXZ		; BaseBrain::SkillLevel
	imul	eax, 5
	imul	eax, 1000				; 000003e8H
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	lea	eax, DWORD PTR [edx+eax+30000]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax

; 1877 : 				short edata[3];
; 1878 : 				int flightIdx	= self->GetCampaignObject()->GetComponentIndex(self);	

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentIndex@CampBaseClass@@QAEHPAVVuEntity@@@Z ; CampBaseClass::GetComponentIndex
	mov	DWORD PTR _flightIdx$1[ebp], eax

; 1879 : 				edata[0] = flightIdx;

	mov	edx, 2
	imul	edx, 0
	mov	ax, WORD PTR _flightIdx$1[ebp]
	mov	WORD PTR _edata$5[ebp+edx], ax

; 1880 : 				edata[1] = 3;//pumping

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, 3
	mov	WORD PTR _edata$5[ebp+ecx], dx

; 1881 : 				AiMakeRadioResponse( self, rcEXECUTERESPONSE, edata );

	lea	eax, DWORD PTR _edata$5[ebp]
	push	eax
	push	68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	?AiMakeRadioResponse@@YAXPAVSimBaseClass@@HPAF@Z ; AiMakeRadioResponse
	add	esp, 12					; 0000000cH
$LN2@Defensive:

; 1882 : 		}
; 1883 : 
; 1884 : 		/*if (spiked && targetData->range < maxAAWpnRange)
; 1885 : 		{// our lead draged us into a dangeres situation we need to split and notch
; 1886 : 		bvrCurrTactic = BvrNotch;
; 1887 : 		bvrTacticTimer = SimLibElapsedTime + 15 * CampaignSeconds;
; 1888 : 			short edata[3];
; 1889 : 			int flightIdx	= self->GetCampaignObject()->GetComponentIndex(self);	
; 1890 : 			edata[0] = flightIdx;
; 1891 : 			edata[1] = 0;//notching
; 1892 : 			AiMakeRadioResponse( self, rcEXECUTERESPONSE, edata );
; 1893 : 		}*/
; 1894 : 	}
; 1895 :  else 	

	jmp	SHORT $LN1@Defensive
$LN5@Defensive:

; 1896 : 	{
; 1897 : 		bvrCurrTactic = BvrFollowWaypoints;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 0

; 1898 : 		bvrTacticTimer = SimLibElapsedTime + 20 * CampaignSeconds;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 20000				; 00004e20H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+592], ecx
$LN1@Defensive:
$LN7@Defensive:

; 1899 : 	}
; 1900 : 
; 1901 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?Defensive@DigitalBrain@@IAEXXZ ENDP			; DigitalBrain::Defensive
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_ActionRange$ = -12					; size = 4
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?ShortLT@DigitalBrain@@IAEXXZ PROC			; DigitalBrain::ShortLT
; _this$ = ecx

; 1697 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1698 : if (!Isflightlead && !IsElementlead) return;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	jne	SHORT $LN13@ShortLT
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+625]
	test	eax, eax
	jne	SHORT $LN13@ShortLT
	jmp	$LN14@ShortLT
$LN13@ShortLT:

; 1699 : 	float ActionRange = 30*NM_TO_FT;

	movss	xmm0, DWORD PTR __real@48320395
	movss	DWORD PTR _ActionRange$[ebp], xmm0

; 1700 : 
; 1701 : 	   switch (bvractionstep)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+628]
	mov	DWORD PTR tv71[ebp], edx
	cmp	DWORD PTR tv71[ebp], 0
	je	SHORT $LN10@ShortLT
	cmp	DWORD PTR tv71[ebp], 1
	je	$LN5@ShortLT
	cmp	DWORD PTR tv71[ebp], 2
	je	$LN1@ShortLT
	jmp	$LN11@ShortLT
$LN10@ShortLT:

; 1702 : 	   {
; 1703 : 	   case 0:
; 1704 : 		   {
; 1705 : 			   if (targetData->range > ActionRange )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movss	xmm0, DWORD PTR [ecx+44]
	comiss	xmm0, DWORD PTR _ActionRange$[ebp]
	jbe	SHORT $LN9@ShortLT

; 1706 : 			   {
; 1707 : 				   bvrTacticTimer = SimLibElapsedTime + 5 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 5000				; 00001388H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx

; 1708 : 				   break;

	jmp	$LN11@ShortLT
$LN9@ShortLT:

; 1709 : 			   }
; 1710 : 			   //ACTION
; 1711 : 			   if (IsElementlead)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+625]
	test	edx, edx
	je	SHORT $LN8@ShortLT

; 1712 : 			   {
; 1713 : 				bvrCurrTactic = BvrPursuit ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 4

; 1714 : 				bvrTacticTimer = SimLibElapsedTime + 15 * CampaignSeconds;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 15000				; 00003a98H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+592], ecx
	jmp	SHORT $LN6@ShortLT
$LN8@ShortLT:

; 1715 : 			   }
; 1716 : 			   else if (Isflightlead)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	je	SHORT $LN6@ShortLT

; 1717 : 			   {
; 1718 : 				bvrCurrTactic =BvrPump  ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 6

; 1719 : 				bvrTacticTimer = SimLibElapsedTime + 30 * CampaignSeconds;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 30000				; 00007530H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax
$LN6@ShortLT:

; 1720 : 			   }
; 1721 : 		   bvractionstep ++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+628]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+628], eax

; 1722 : 		   break;

	jmp	SHORT $LN11@ShortLT
$LN5@ShortLT:

; 1723 : 		   }
; 1724 : 
; 1725 : 	   case 1:
; 1726 : 		   {
; 1727 : 			   if (Isflightlead)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+624]
	test	eax, eax
	je	SHORT $LN4@ShortLT

; 1728 : 			   {
; 1729 : 				bvrCurrTactic = BvrPursuit ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 4

; 1730 : 				bvrTacticTimer = SimLibElapsedTime + 60 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 60000				; 0000ea60H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx
	jmp	SHORT $LN2@ShortLT
$LN4@ShortLT:

; 1731 : 			   }
; 1732 : 			   else if (IsElementlead)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+625]
	test	edx, edx
	je	SHORT $LN2@ShortLT

; 1733 : 			   {
; 1734 : 				bvrCurrTactic = BvrPursuit  ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 4

; 1735 : 				bvrTacticTimer = SimLibElapsedTime + 60 * CampaignSeconds;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 60000				; 0000ea60H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+592], ecx
$LN2@ShortLT:

; 1736 : 			   }
; 1737 : 			   break;

	jmp	SHORT $LN11@ShortLT
$LN1@ShortLT:

; 1738 : 		   }
; 1739 : 	   case 2:
; 1740 : 		   {
; 1741 :    		   bvrCurrProfile = Pnone;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+632], 0

; 1742 : 		   bvractionstep = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+628], 0
$LN11@ShortLT:
$LN14@ShortLT:

; 1743 : 		   break;
; 1744 : 		   }
; 1745 : 	   }
; 1746 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ShortLT@DigitalBrain@@IAEXXZ ENDP			; DigitalBrain::ShortLT
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_ActionRange$ = -12					; size = 4
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?wideLT@DigitalBrain@@IAEXXZ PROC			; DigitalBrain::wideLT
; _this$ = ecx

; 1644 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1645 : if (!Isflightlead && !IsElementlead) return;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	jne	SHORT $LN13@wideLT
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+625]
	test	eax, eax
	jne	SHORT $LN13@wideLT
	jmp	$LN14@wideLT
$LN13@wideLT:

; 1646 : 	float ActionRange = 30*NM_TO_FT;

	movss	xmm0, DWORD PTR __real@48320395
	movss	DWORD PTR _ActionRange$[ebp], xmm0

; 1647 : 
; 1648 : 	   switch (bvractionstep)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+628]
	mov	DWORD PTR tv71[ebp], edx
	cmp	DWORD PTR tv71[ebp], 0
	je	SHORT $LN10@wideLT
	cmp	DWORD PTR tv71[ebp], 1
	je	$LN5@wideLT
	cmp	DWORD PTR tv71[ebp], 2
	je	$LN1@wideLT
	jmp	$LN11@wideLT
$LN10@wideLT:

; 1649 : 	   {
; 1650 : 	   case 0:
; 1651 : 		   {
; 1652 : 			   if (targetData->range > ActionRange ) 			   

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movss	xmm0, DWORD PTR [ecx+44]
	comiss	xmm0, DWORD PTR _ActionRange$[ebp]
	jbe	SHORT $LN9@wideLT

; 1653 : 			   {
; 1654 : 				   bvrTacticTimer = SimLibElapsedTime + 5 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 5000				; 00001388H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx

; 1655 : 				   break;

	jmp	$LN11@wideLT
$LN9@wideLT:

; 1656 : 			   }
; 1657 : 			   //ACTION
; 1658 : 			   if (IsElementlead)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+625]
	test	edx, edx
	je	SHORT $LN8@wideLT

; 1659 : 			   {
; 1660 : 				bvrCurrTactic = BvrPursuit ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 4

; 1661 : 				bvrTacticTimer = SimLibElapsedTime + 25 * CampaignSeconds;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 25000				; 000061a8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+592], ecx
	jmp	SHORT $LN6@wideLT
$LN8@wideLT:

; 1662 : 			   }
; 1663 : 			   else if (Isflightlead)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	je	SHORT $LN6@wideLT

; 1664 : 			   {
; 1665 : 				bvrCurrTactic =BvrPump  ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 6

; 1666 : 				bvrTacticTimer = SimLibElapsedTime + 45 * CampaignSeconds;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 45000				; 0000afc8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax
$LN6@wideLT:

; 1667 : 			   }
; 1668 : 		   bvractionstep ++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+628]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+628], eax

; 1669 : 		   break;

	jmp	$LN11@wideLT
$LN5@wideLT:

; 1670 : 		   }
; 1671 : 
; 1672 : 	   case 1:
; 1673 : 		   {
; 1674 : 			   if (Isflightlead)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+624]
	test	eax, eax
	je	SHORT $LN4@wideLT

; 1675 : 			   {
; 1676 : 				bvrCurrTactic = BvrPursuit ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 4

; 1677 : 				bvrTacticTimer = SimLibElapsedTime + 60 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 60000				; 0000ea60H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx
	jmp	SHORT $LN2@wideLT
$LN4@wideLT:

; 1678 : 			   }
; 1679 : 			   else if (IsElementlead)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+625]
	test	edx, edx
	je	SHORT $LN2@wideLT

; 1680 : 			   {
; 1681 : 				bvrCurrTactic = BvrPursuit  ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 4

; 1682 : 				bvrTacticTimer = SimLibElapsedTime + 60 * CampaignSeconds;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 60000				; 0000ea60H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+592], ecx
$LN2@wideLT:

; 1683 : 			   }
; 1684 : 		   }
; 1685 : 		   bvractionstep ++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+628]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+628], ecx

; 1686 : 		   break;

	jmp	SHORT $LN11@wideLT
$LN1@wideLT:

; 1687 : 	   case 2:
; 1688 : 		   {
; 1689 :    		   bvrCurrProfile = Pnone;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+632], 0

; 1690 : 		   bvractionstep = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+628], 0
$LN11@wideLT:
$LN14@wideLT:

; 1691 : 		   break;
; 1692 : 		   }
; 1693 : 		break;
; 1694 : 	   }
; 1695 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?wideLT@DigitalBrain@@IAEXXZ ENDP			; DigitalBrain::wideLT
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?shortazimuth@DigitalBrain@@IAEXXZ PROC			; DigitalBrain::shortazimuth
; _this$ = ecx

; 1596 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1597 : if (!Isflightlead && !IsElementlead) return;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	jne	SHORT $LN13@shortazimu
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+625]
	test	eax, eax
	jne	SHORT $LN13@shortazimu
	jmp	$LN14@shortazimu
$LN13@shortazimu:

; 1598 : 	   switch (bvractionstep)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+628]
	mov	DWORD PTR tv71[ebp], edx
	cmp	DWORD PTR tv71[ebp], 0
	je	SHORT $LN10@shortazimu
	cmp	DWORD PTR tv71[ebp], 1
	je	$LN5@shortazimu
	jmp	$LN11@shortazimu
$LN10@shortazimu:

; 1599 : 	   {
; 1600 : 	   case 0:
; 1601 : 		   {
; 1602 : 			   if (targetData->range > MAR*2 ) 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+612]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR [ecx+44]
	comiss	xmm1, xmm0
	jbe	SHORT $LN9@shortazimu

; 1603 : 			   {
; 1604 : 				   bvrTacticTimer = SimLibElapsedTime + 5 * CampaignSeconds;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 5000				; 00001388H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax

; 1605 : 				   break;

	jmp	$LN11@shortazimu
$LN9@shortazimu:

; 1606 : 			   }
; 1607 : 			   //ACTION
; 1608 : 			   if (Isflightlead)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+624]
	test	eax, eax
	je	SHORT $LN8@shortazimu

; 1609 : 			   {
; 1610 : 				bvrCurrTactic = BvrCrankLeft ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 9

; 1611 : 				bvrTacticTimer = SimLibElapsedTime + 55 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 55000				; 0000d6d8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx
	jmp	SHORT $LN6@shortazimu
$LN8@shortazimu:

; 1612 : 			   }
; 1613 : 			   else if (IsElementlead)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+625]
	test	edx, edx
	je	SHORT $LN6@shortazimu

; 1614 : 			   {
; 1615 : 				bvrCurrTactic = BvrCrankRight  ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 8

; 1616 : 				bvrTacticTimer = SimLibElapsedTime + 55 * CampaignSeconds;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 55000				; 0000d6d8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+592], ecx
$LN6@shortazimu:

; 1617 : 			   }
; 1618 : 			   bvractionstep++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+628]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+628], ecx

; 1619 : 		   break;

	jmp	$LN11@shortazimu
$LN5@shortazimu:

; 1620 : 		   }
; 1621 : 	   case 1:
; 1622 : 		   {
; 1623 : 			   if (targetData->range > MAR*2 )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+612]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR [ecx+44]
	comiss	xmm1, xmm0
	jbe	SHORT $LN4@shortazimu

; 1624 : 			   {
; 1625 : 				   bvrTacticTimer = SimLibElapsedTime + 5 * CampaignSeconds;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 5000				; 00001388H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax

; 1626 : 				   break;

	jmp	SHORT $LN11@shortazimu
$LN4@shortazimu:

; 1627 : 			   }
; 1628 : 			   //ACTION
; 1629 : 			   if (Isflightlead)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+624]
	test	eax, eax
	je	SHORT $LN3@shortazimu

; 1630 : 			   {
; 1631 : 				bvrCurrTactic = BvrPursuit ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 4

; 1632 : 				bvrTacticTimer = SimLibElapsedTime + 120 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 120000				; 0001d4c0H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx
	jmp	SHORT $LN1@shortazimu
$LN3@shortazimu:

; 1633 : 			   }
; 1634 : 			   else if (IsElementlead)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+625]
	test	edx, edx
	je	SHORT $LN1@shortazimu

; 1635 : 			   {
; 1636 : 				bvrCurrTactic =BvrPursuit  ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 4

; 1637 : 				bvrTacticTimer = SimLibElapsedTime + 120 * CampaignSeconds;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 120000				; 0001d4c0H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+592], ecx
$LN1@shortazimu:
$LN11@shortazimu:
$LN14@shortazimu:

; 1638 : 			   }
; 1639 : 		   break;
; 1640 : 		   }
; 1641 : 	   }
; 1642 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?shortazimuth@DigitalBrain@@IAEXXZ ENDP			; DigitalBrain::shortazimuth
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?wideazimuth@DigitalBrain@@IAEXXZ PROC			; DigitalBrain::wideazimuth
; _this$ = ecx

; 1547 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1548 : if (!Isflightlead && !IsElementlead) return;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	jne	SHORT $LN13@wideazimut
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+625]
	test	eax, eax
	jne	SHORT $LN13@wideazimut
	jmp	$LN14@wideazimut
$LN13@wideazimut:

; 1549 : 
; 1550 : 	   switch (bvractionstep)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+628]
	mov	DWORD PTR tv71[ebp], edx
	cmp	DWORD PTR tv71[ebp], 0
	je	SHORT $LN10@wideazimut
	cmp	DWORD PTR tv71[ebp], 1
	je	$LN5@wideazimut
	jmp	$LN11@wideazimut
$LN10@wideazimut:

; 1551 : 	   {
; 1552 : 	   case 0:
; 1553 : 		   {
; 1554 : 			   if (targetData->range > MAR*2 ) 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+612]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR [ecx+44]
	comiss	xmm1, xmm0
	jbe	SHORT $LN9@wideazimut

; 1555 : 			   {
; 1556 : 				   bvrTacticTimer = SimLibElapsedTime + 5 * CampaignSeconds;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 5000				; 00001388H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax

; 1557 : 				   break;

	jmp	$LN11@wideazimut
$LN9@wideazimut:

; 1558 : 			   }
; 1559 : 			   //ACTION
; 1560 : 			   if (Isflightlead)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+624]
	test	eax, eax
	je	SHORT $LN8@wideazimut

; 1561 : 			   {
; 1562 : 				bvrCurrTactic = BvrNotchLeft ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 13			; 0000000dH

; 1563 : 				bvrTacticTimer = SimLibElapsedTime + 55 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 55000				; 0000d6d8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx
	jmp	SHORT $LN6@wideazimut
$LN8@wideazimut:

; 1564 : 			   }
; 1565 : 			   else if (IsElementlead)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+625]
	test	edx, edx
	je	SHORT $LN6@wideazimut

; 1566 : 			   {
; 1567 : 				bvrCurrTactic = BvrNotchRight  ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 11			; 0000000bH

; 1568 : 				bvrTacticTimer = SimLibElapsedTime + 55 * CampaignSeconds;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 55000				; 0000d6d8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+592], ecx
$LN6@wideazimut:

; 1569 : 			   }
; 1570 : 			   bvractionstep++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+628]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+628], ecx

; 1571 : 		   break;

	jmp	$LN11@wideazimut
$LN5@wideazimut:

; 1572 : 		   }
; 1573 : 	   case 1:
; 1574 : 		   {
; 1575 : 			   if (targetData->range > MAR*2 )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+612]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR [ecx+44]
	comiss	xmm1, xmm0
	jbe	SHORT $LN4@wideazimut

; 1576 : 			   {
; 1577 : 				   bvrTacticTimer = SimLibElapsedTime + 5 * CampaignSeconds;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 5000				; 00001388H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax

; 1578 : 				   break;

	jmp	SHORT $LN11@wideazimut
$LN4@wideazimut:

; 1579 : 			   }
; 1580 : 			   //ACTION
; 1581 : 			   if (Isflightlead)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+624]
	test	eax, eax
	je	SHORT $LN3@wideazimut

; 1582 : 			   {
; 1583 : 				bvrCurrTactic = BvrPursuit ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 4

; 1584 : 				bvrTacticTimer = SimLibElapsedTime + 120 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 120000				; 0001d4c0H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx
	jmp	SHORT $LN1@wideazimut
$LN3@wideazimut:

; 1585 : 			   }
; 1586 : 			   else if (IsElementlead)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+625]
	test	edx, edx
	je	SHORT $LN1@wideazimut

; 1587 : 			   {
; 1588 : 				bvrCurrTactic =BvrPursuit  ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 4

; 1589 : 				bvrTacticTimer = SimLibElapsedTime + 120 * CampaignSeconds;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 120000				; 0001d4c0H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+592], ecx
$LN1@wideazimut:
$LN11@wideazimut:
$LN14@wideazimut:

; 1590 : 			   }
; 1591 : 		   break;
; 1592 : 		   }
; 1593 : 	   }
; 1594 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?wideazimuth@DigitalBrain@@IAEXXZ ENDP			; DigitalBrain::wideazimuth
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_ActionRange$ = -12					; size = 4
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?grinder@DigitalBrain@@IAEXXZ PROC			; DigitalBrain::grinder
; _this$ = ecx

; 1469 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1470 : if (!Isflightlead && !IsElementlead) return;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	jne	SHORT $LN23@grinder
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+625]
	test	eax, eax
	jne	SHORT $LN23@grinder
	jmp	$LN24@grinder
$LN23@grinder:

; 1471 : 	float  ActionRange = 30.0f *NM_TO_FT;

	movss	xmm0, DWORD PTR __real@48320395
	movss	DWORD PTR _ActionRange$[ebp], xmm0

; 1472 : 
; 1473 : 	   switch (bvractionstep)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+628]
	mov	DWORD PTR tv71[ebp], edx
	cmp	DWORD PTR tv71[ebp], 3
	ja	$LN21@grinder
	mov	eax, DWORD PTR tv71[ebp]
	jmp	DWORD PTR $LN26@grinder[eax*4]
$LN20@grinder:

; 1474 : 	   {
; 1475 : 	   case 0:
; 1476 : 		   {
; 1477 : 			   if (targetData->range > ActionRange )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [edx+44]
	comiss	xmm0, DWORD PTR _ActionRange$[ebp]
	jbe	SHORT $LN19@grinder

; 1478 : 			   {
; 1479 : 				   bvrTacticTimer = SimLibElapsedTime + 5 * CampaignSeconds;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 5000				; 00001388H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax

; 1480 : 				   break;

	jmp	$LN21@grinder
$LN19@grinder:

; 1481 : 			   }
; 1482 : 			   //ACTION
; 1483 : 			   if (IsElementlead)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+625]
	test	eax, eax
	je	SHORT $LN18@grinder

; 1484 : 			   {
; 1485 : 				bvrCurrTactic = BvrPursuit ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 4

; 1486 : 				bvrTacticTimer = SimLibElapsedTime + 30 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 30000				; 00007530H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx
	jmp	SHORT $LN16@grinder
$LN18@grinder:

; 1487 : 			   }
; 1488 : 			   else if (Isflightlead)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+624]
	test	edx, edx
	je	SHORT $LN16@grinder

; 1489 : 			   {
; 1490 : 				bvrCurrTactic =BvrPump  ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 6

; 1491 : 				bvrTacticTimer = SimLibElapsedTime + 30 * CampaignSeconds;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 30000				; 00007530H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+592], ecx
$LN16@grinder:

; 1492 : 			   }
; 1493 : 		   bvractionstep ++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+628]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+628], ecx

; 1494 : 		   break;

	jmp	$LN21@grinder
$LN15@grinder:

; 1495 : 		   }
; 1496 : 
; 1497 : 	   case 1:// we shoudl now be setup about 10-15nm trail
; 1498 : 		   {
; 1499 : 			   if (Isflightlead)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	je	SHORT $LN14@grinder

; 1500 : 			   {
; 1501 : 				bvrCurrTactic = BvrSingleSideOffset ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 2

; 1502 : 				bvrTacticTimer = SimLibElapsedTime + 5 * CampaignSeconds;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 5000				; 00001388H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax
	jmp	SHORT $LN12@grinder
$LN14@grinder:

; 1503 : 			   }
; 1504 : 			   else if (IsElementlead)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+625]
	test	eax, eax
	je	SHORT $LN12@grinder

; 1505 : 			   {
; 1506 : 				bvrCurrTactic = BvrSingleSideOffset  ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 2

; 1507 : 				bvrTacticTimer = SimLibElapsedTime + 5 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 5000				; 00001388H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx
$LN12@grinder:

; 1508 : 			   }
; 1509 : 				if (IsSupportignmissile()) bvractionstep ++;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSupportignmissile@DigitalBrain@@IAEHXZ ; DigitalBrain::IsSupportignmissile
	test	eax, eax
	je	SHORT $LN11@grinder
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+628]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+628], edx
$LN11@grinder:

; 1510 : 			   break;

	jmp	$LN21@grinder
$LN10@grinder:

; 1511 : 		   }
; 1512 : 	   case 2:// we have launched a weapon
; 1513 : 		   {
; 1514 : 				   if (IsSupportignmissile()) 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSupportignmissile@DigitalBrain@@IAEHXZ ; DigitalBrain::IsSupportignmissile
	test	eax, eax
	je	SHORT $LN9@grinder

; 1515 : 			   {
; 1516 : 				   bvrTacticTimer = SimLibElapsedTime + 3 * CampaignSeconds;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 3000				; 00000bb8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+592], ecx

; 1517 : 				   break;

	jmp	$LN21@grinder
$LN9@grinder:

; 1518 : 			   }
; 1519 : 
; 1520 : 			   if (Isflightlead)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	je	SHORT $LN8@grinder

; 1521 : 			   {
; 1522 : 				bvrCurrTactic = BvrPump ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 6

; 1523 : 				bvrTacticTimer = SimLibElapsedTime + 40 * CampaignSeconds;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 40000				; 00009c40H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax

; 1524 : 				if (targetData->range > 10*NM_TO_FT || WhoIsSpiked() < 3)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movss	xmm0, DWORD PTR [eax+44]
	comiss	xmm0, DWORD PTR __real@476d5a1c
	ja	SHORT $LN6@grinder
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WhoIsSpiked@DigitalBrain@@IAEHXZ	; DigitalBrain::WhoIsSpiked
	cmp	eax, 3
	jge	SHORT $LN7@grinder
$LN6@grinder:

; 1525 : 					bvractionstep = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+628], 1
$LN7@grinder:

; 1526 : 			   }

	jmp	SHORT $LN3@grinder
$LN8@grinder:

; 1527 : 			   else if (IsElementlead)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+625]
	test	eax, eax
	je	SHORT $LN3@grinder

; 1528 : 			   {
; 1529 : 				bvrCurrTactic = BvrPump  ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 6

; 1530 : 				bvrTacticTimer = SimLibElapsedTime + 40 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 40000				; 00009c40H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx

; 1531 : 				if (targetData->range > 10*NM_TO_FT || WhoIsSpiked() < 3)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [edx+44]
	comiss	xmm0, DWORD PTR __real@476d5a1c
	ja	SHORT $LN2@grinder
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WhoIsSpiked@DigitalBrain@@IAEHXZ	; DigitalBrain::WhoIsSpiked
	cmp	eax, 3
	jge	SHORT $LN3@grinder
$LN2@grinder:

; 1532 : 					bvractionstep = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+628], 1
$LN3@grinder:

; 1533 : 			   }
; 1534 : 
; 1535 : 			   break;

	jmp	SHORT $LN21@grinder
$LN1@grinder:

; 1536 : 		   }
; 1537 : 
; 1538 : 	   case 3:
; 1539 : 		   {
; 1540 :    		   bvrCurrProfile = Pnone;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+632], 0

; 1541 : 		   bvractionstep = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+628], 0
$LN21@grinder:
$LN24@grinder:

; 1542 : 		   break;
; 1543 : 		   }
; 1544 : 	   }
; 1545 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN26@grinder:
	DD	$LN20@grinder
	DD	$LN15@grinder
	DD	$LN10@grinder
	DD	$LN1@grinder
?grinder@DigitalBrain@@IAEXXZ ENDP			; DigitalBrain::grinder
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?wall@DigitalBrain@@IAEXXZ PROC				; DigitalBrain::wall
; _this$ = ecx

; 1804 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1805 : if (!Isflightlead && !IsElementlead) return;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	jne	SHORT $LN2@wall
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+625]
	test	eax, eax
	jne	SHORT $LN2@wall
	jmp	SHORT $LN3@wall
$LN2@wall:

; 1806 : 	if (Isflightlead)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+624]
	test	edx, edx
	je	SHORT $LN3@wall

; 1807 : 	{
; 1808 : 		bvrCurrTactic = BvrPursuit;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 4

; 1809 : 		bvrTacticTimer = SimLibElapsedTime + 10 * CampaignSeconds;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 10000				; 00002710H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+592], ecx
$LN3@wall:

; 1810 : 	}
; 1811 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?wall@DigitalBrain@@IAEXXZ ENDP				; DigitalBrain::wall
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_ActionRange$ = -12					; size = 4
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?beambeam@DigitalBrain@@IAEXXZ PROC			; DigitalBrain::beambeam
; _this$ = ecx

; 1748 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1749 : if (!Isflightlead && !IsElementlead) return;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	jne	SHORT $LN14@beambeam
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+625]
	test	eax, eax
	jne	SHORT $LN14@beambeam
	jmp	$LN15@beambeam
$LN14@beambeam:

; 1750 : 	float ActionRange = 25*NM_TO_FT;

	movss	xmm0, DWORD PTR __real@48145852
	movss	DWORD PTR _ActionRange$[ebp], xmm0

; 1751 : 	   switch (bvractionstep)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+628]
	mov	DWORD PTR tv71[ebp], edx
	cmp	DWORD PTR tv71[ebp], 0
	je	SHORT $LN11@beambeam
	cmp	DWORD PTR tv71[ebp], 1
	je	$LN6@beambeam
	cmp	DWORD PTR tv71[ebp], 2
	je	$LN1@beambeam
	jmp	$LN12@beambeam
$LN11@beambeam:

; 1752 : 	   {
; 1753 : 	   case 0:
; 1754 : 		   {
; 1755 : 			   if (targetData->range > ActionRange) 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movss	xmm0, DWORD PTR [ecx+44]
	comiss	xmm0, DWORD PTR _ActionRange$[ebp]
	jbe	SHORT $LN10@beambeam

; 1756 : 			   {
; 1757 : 				   bvrTacticTimer = SimLibElapsedTime + 5 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 5000				; 00001388H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx

; 1758 : 				   break;

	jmp	$LN12@beambeam
$LN10@beambeam:

; 1759 : 			   }
; 1760 : 			   //ACTION
; 1761 : 			   if (Isflightlead)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+624]
	test	edx, edx
	je	SHORT $LN9@beambeam

; 1762 : 			   {
; 1763 : 				bvrCurrTactic = BvrNotchLeft ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 13			; 0000000dH

; 1764 : 				bvrTacticTimer = SimLibElapsedTime + 120 * CampaignSeconds;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 120000				; 0001d4c0H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+592], ecx
	jmp	SHORT $LN7@beambeam
$LN9@beambeam:

; 1765 : 			   }
; 1766 : 			   else if (IsElementlead)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+625]
	test	ecx, ecx
	je	SHORT $LN7@beambeam

; 1767 : 			   {
; 1768 : 				bvrCurrTactic =BvrNotchRight  ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 11			; 0000000bH

; 1769 : 				bvrTacticTimer = SimLibElapsedTime + 120 * CampaignSeconds;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 120000				; 0001d4c0H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax
$LN7@beambeam:

; 1770 : 			   }
; 1771 : 			   bvractionstep++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+628]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+628], eax

; 1772 : 		   break;

	jmp	$LN12@beambeam
$LN6@beambeam:

; 1773 : 		   }
; 1774 : 	   case 1:
; 1775 : 		   {
; 1776 : 			  if (targetData->range > ActionRange) 

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movss	xmm0, DWORD PTR [eax+44]
	comiss	xmm0, DWORD PTR _ActionRange$[ebp]
	jbe	SHORT $LN5@beambeam

; 1777 : 			   {
; 1778 : 				   bvrTacticTimer = SimLibElapsedTime + 5 * CampaignSeconds;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 5000				; 00001388H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+592], ecx

; 1779 : 				   break;

	jmp	$LN12@beambeam
$LN5@beambeam:

; 1780 : 			   }
; 1781 : 			   //ACTION
; 1782 : 			   if (Isflightlead)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	je	SHORT $LN4@beambeam

; 1783 : 			   {
; 1784 : 				bvrCurrTactic = BvrPursuit ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 4

; 1785 : 				bvrTacticTimer = SimLibElapsedTime + 60 * CampaignSeconds;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 60000				; 0000ea60H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax
	jmp	SHORT $LN2@beambeam
$LN4@beambeam:

; 1786 : 			   }
; 1787 : 			   else if (IsElementlead)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+625]
	test	eax, eax
	je	SHORT $LN2@beambeam

; 1788 : 			   {
; 1789 : 				bvrCurrTactic = BvrPursuit  ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 4

; 1790 : 				bvrTacticTimer = SimLibElapsedTime + 60 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 60000				; 0000ea60H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx
$LN2@beambeam:

; 1791 : 			   }
; 1792 : 			   bvractionstep++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+628]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+628], edx

; 1793 : 		   break;

	jmp	SHORT $LN12@beambeam
$LN1@beambeam:

; 1794 : 		   }
; 1795 : 	   case 2:
; 1796 : 		   {
; 1797 :    		   bvrCurrProfile = Pnone;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+632], 0

; 1798 : 		   bvractionstep = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+628], 0
$LN12@beambeam:
$LN15@beambeam:

; 1799 : 		   break;
; 1800 : 		   }
; 1801 : 	   }
; 1802 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?beambeam@DigitalBrain@@IAEXXZ ENDP			; DigitalBrain::beambeam
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
?beamdeploy@DigitalBrain@@IAEXXZ PROC			; DigitalBrain::beamdeploy
; _this$ = ecx

; 1415 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1416 : if (!Isflightlead && !IsElementlead) return;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	jne	SHORT $LN13@beamdeploy
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+625]
	test	eax, eax
	jne	SHORT $LN13@beamdeploy
	jmp	$LN14@beamdeploy
$LN13@beamdeploy:

; 1417 : 	if (bvractionstep != 0 && WhoIsSpiked() > 3) 

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+628], 0
	je	SHORT $LN12@beamdeploy
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WhoIsSpiked@DigitalBrain@@IAEHXZ	; DigitalBrain::WhoIsSpiked
	cmp	eax, 3
	jle	SHORT $LN12@beamdeploy

; 1418 : 		bvractionstep = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+628], 1
	jmp	SHORT $LN11@beamdeploy
$LN12@beamdeploy:

; 1419 : 
; 1420 : 	else bvractionstep = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+628], 0
$LN11@beamdeploy:

; 1421 : 
; 1422 : 	   switch (bvractionstep)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+628]
	mov	DWORD PTR tv78[ebp], edx
	cmp	DWORD PTR tv78[ebp], 0
	je	SHORT $LN8@beamdeploy
	cmp	DWORD PTR tv78[ebp], 1
	je	SHORT $LN4@beamdeploy
	jmp	$LN14@beamdeploy
$LN8@beamdeploy:

; 1423 : 	   {
; 1424 : 	   case 0:
; 1425 : 		   {
; 1426 : 			   /*if (targetData->range > maxAAWpnRange ) 
; 1427 : 			   {
; 1428 : 				   bvrTacticTimer = SimLibElapsedTime + 5 * CampaignSeconds;
; 1429 : 				   break;
; 1430 : 			   }*/
; 1431 : 			   //ACTION
; 1432 : 			   if (Isflightlead)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	je	SHORT $LN7@beamdeploy

; 1433 : 			   {
; 1434 : 				bvrCurrTactic = BvrSingleSideOffset ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 2

; 1435 : 				bvrTacticTimer = SimLibElapsedTime + 5 * CampaignSeconds;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 5000				; 00001388H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax
	jmp	SHORT $LN6@beamdeploy
$LN7@beamdeploy:

; 1436 : 			   }
; 1437 : 			   else if (IsElementlead)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+625]
	test	eax, eax
	je	SHORT $LN6@beamdeploy

; 1438 : 			   {
; 1439 : 				bvrCurrTactic = BvrSingleSideOffset  ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 2

; 1440 : 				bvrTacticTimer = SimLibElapsedTime + 5 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 5000				; 00001388H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx
$LN6@beamdeploy:

; 1441 : 			   }
; 1442 : 		   break;

	jmp	SHORT $LN14@beamdeploy
$LN4@beamdeploy:

; 1443 : 		   }
; 1444 : 	   case 1:
; 1445 : 		   {
; 1446 : 			  /* if (targetData->range > maxAAWpnRange )
; 1447 : 			   {
; 1448 : 				   bvrTacticTimer = SimLibElapsedTime + 5 * CampaignSeconds;
; 1449 : 				   break;
; 1450 : 			   }*/
; 1451 : 			   //ACTION
; 1452 : 			   if (Isflightlead)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+624]
	test	edx, edx
	je	SHORT $LN3@beamdeploy

; 1453 : 			   {
; 1454 : 				bvrCurrTactic = BvrNotchLeft ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 13			; 0000000dH

; 1455 : 				bvrTacticTimer = SimLibElapsedTime + 120 * CampaignSeconds;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 120000				; 0001d4c0H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+592], ecx
	jmp	SHORT $LN14@beamdeploy
$LN3@beamdeploy:

; 1456 : 			   }
; 1457 : 			   else if (IsElementlead)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+625]
	test	ecx, ecx
	je	SHORT $LN14@beamdeploy

; 1458 : 			   {
; 1459 : 				bvrCurrTactic =BvrNotchRight  ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 11			; 0000000bH

; 1460 : 				bvrTacticTimer = SimLibElapsedTime + 120 * CampaignSeconds;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 120000				; 0001d4c0H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax
$LN14@beamdeploy:

; 1461 : 			   }
; 1462 : 		   break;
; 1463 : 		   }
; 1464 : 		break;
; 1465 : 	   }
; 1466 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?beamdeploy@DigitalBrain@@IAEXXZ ENDP			; DigitalBrain::beamdeploy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_randme$1 = -12						; size = 4
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?level3c@DigitalBrain@@IAEXXZ PROC			; DigitalBrain::level3c
; _this$ = ecx

; 1336 : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1337 : if (!Isflightlead && !IsElementlead) return;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	jne	SHORT $LN22@level3c
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+625]
	test	eax, eax
	jne	SHORT $LN22@level3c
	jmp	$LN23@level3c
$LN22@level3c:

; 1338 : 	
; 1339 : 	   switch (bvractionstep)// use the leads stepper to coordinate

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+628]
	mov	DWORD PTR tv71[ebp], edx
	cmp	DWORD PTR tv71[ebp], 0
	je	SHORT $LN19@level3c
	cmp	DWORD PTR tv71[ebp], 1
	je	$LN10@level3c
	cmp	DWORD PTR tv71[ebp], 2
	je	$LN6@level3c
	jmp	$LN20@level3c
$LN19@level3c:

; 1340 : 	   {
; 1341 : 	   case 0:
; 1342 : 		   {
; 1343 : 			   if (targetData->range > 40*NM_TO_FT) 			   

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movss	xmm0, DWORD PTR [ecx+44]
	comiss	xmm0, DWORD PTR __real@486d5a1c
	jbe	SHORT $LN18@level3c

; 1344 : 			   {
; 1345 : 				   bvrTacticTimer = SimLibElapsedTime + 5 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 5000				; 00001388H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx

; 1346 : 				   break;

	jmp	$LN20@level3c
$LN18@level3c:

; 1347 : 			   }
; 1348 : 			   //ACTION
; 1349 : 			   if (Isflightlead)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+624]
	test	edx, edx
	je	SHORT $LN17@level3c

; 1350 : 			   {
; 1351 : 			   int randme = rand()%3;

	call	_rand
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR _randme$1[ebp], edx

; 1352 : 			    if (randme == 1)

	cmp	DWORD PTR _randme$1[ebp], 1
	jne	SHORT $LN16@level3c

; 1353 : 					 {
; 1354 : 					 bvrCurrTactic = BvrCrankLeftHi;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 20			; 00000014H
	jmp	SHORT $LN13@level3c
$LN16@level3c:

; 1355 : 					 }
; 1356 : 				 else if (randme == 2)

	cmp	DWORD PTR _randme$1[ebp], 2
	jne	SHORT $LN14@level3c

; 1357 : 					 {
; 1358 : 					 bvrCurrTactic = BvrCrankLeftLo;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 21			; 00000015H

; 1359 : 					 }
; 1360 : 				 else 

	jmp	SHORT $LN13@level3c
$LN14@level3c:

; 1361 :    					bvrCurrTactic = BvrCrankLeft;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 9
$LN13@level3c:

; 1362 : 		
; 1363 : 				bvrTacticTimer = SimLibElapsedTime + 35 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 35000				; 000088b8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx
	jmp	SHORT $LN11@level3c
$LN17@level3c:

; 1364 : 			   }
; 1365 : 			   else if (IsElementlead)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+625]
	test	edx, edx
	je	SHORT $LN11@level3c

; 1366 : 			   {
; 1367 : 				bvrCurrTactic =BvrPump  ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 6

; 1368 : 				bvrTacticTimer = SimLibElapsedTime + 15 * CampaignSeconds;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 15000				; 00003a98H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+592], ecx
$LN11@level3c:

; 1369 : 			   }
; 1370 : 		   bvractionstep ++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+628]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+628], ecx

; 1371 : 		   break;

	jmp	$LN20@level3c
$LN10@level3c:

; 1372 : 		   }
; 1373 : 	   case 1:
; 1374 : 		   {
; 1375 : 			   //ACTION
; 1376 : 			   if (Isflightlead)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	je	SHORT $LN9@level3c

; 1377 : 			   {
; 1378 : 				bvrCurrTactic = BvrNotchLeft ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 13			; 0000000dH

; 1379 : 				bvrTacticTimer = SimLibElapsedTime + 50 * CampaignSeconds;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 50000				; 0000c350H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax
	jmp	SHORT $LN7@level3c
$LN9@level3c:

; 1380 : 			   }
; 1381 : 			   else if (IsElementlead)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+625]
	test	eax, eax
	je	SHORT $LN7@level3c

; 1382 : 			   {
; 1383 : 				bvrCurrTactic =BvrCrankRight  ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 8

; 1384 : 				bvrTacticTimer = SimLibElapsedTime + 30 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 30000				; 00007530H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx
$LN7@level3c:

; 1385 : 			   }
; 1386 : 		   bvractionstep ++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+628]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+628], edx

; 1387 : 		   break;

	jmp	$LN20@level3c
$LN6@level3c:

; 1388 : 		   }
; 1389 : 	   case 2:
; 1390 : 		   {
; 1391 : 			   if (WhoIsSpiked() >3)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?WhoIsSpiked@DigitalBrain@@IAEHXZ	; DigitalBrain::WhoIsSpiked
	cmp	eax, 3
	jle	SHORT $LN5@level3c

; 1392 : 			   {
; 1393 : 				   if (Isflightlead)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+624]
	test	edx, edx
	je	SHORT $LN4@level3c

; 1394 : 				   {
; 1395 : 					bvrCurrTactic = BvrNotchRight ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 11			; 0000000bH

; 1396 : 					bvrTacticTimer = SimLibElapsedTime + 10 * CampaignSeconds;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 10000				; 00002710H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+592], ecx
	jmp	SHORT $LN2@level3c
$LN4@level3c:

; 1397 : 				   }
; 1398 : 				   else if (IsElementlead)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+625]
	test	ecx, ecx
	je	SHORT $LN2@level3c

; 1399 : 				   {
; 1400 : 					bvrCurrTactic =BvrNotchLeft  ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 13			; 0000000dH

; 1401 : 					bvrTacticTimer = SimLibElapsedTime + 10 * CampaignSeconds;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 10000				; 00002710H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax
$LN2@level3c:

; 1402 : 				   }
; 1403 : 			   }
; 1404 : 			   else 

	jmp	SHORT $LN1@level3c
$LN5@level3c:

; 1405 : 			   {
; 1406 : 				bvrCurrTactic = BvrSingleSideOffset  ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 2

; 1407 : 				bvrTacticTimer = SimLibElapsedTime + 10 * CampaignSeconds;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 10000				; 00002710H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax
$LN1@level3c:
$LN20@level3c:
$LN23@level3c:

; 1408 : 			   }
; 1409 : 		   break;
; 1410 : 		   }
; 1411 : 	   }
; 1412 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?level3c@DigitalBrain@@IAEXXZ ENDP			; DigitalBrain::level3c
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
tv180 = -24						; size = 4
_randme$1 = -20						; size = 4
_randme$2 = -16						; size = 4
_crankme$ = -12						; size = 4
_elementlead$ = -8					; size = 4
_this$ = -4						; size = 4
?level3b@DigitalBrain@@IAEXXZ PROC			; DigitalBrain::level3b
; _this$ = ecx

; 1072 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1073 : if (!Isflightlead && !IsElementlead) return;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	jne	SHORT $LN57@level3b
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+625]
	test	eax, eax
	jne	SHORT $LN57@level3b
	jmp	$LN58@level3b
$LN57@level3b:

; 1074 : // b = defensive missilerange superiority
; 1075 : /*idea is :
; 1076 : the element split up if spiked...
; 1077 : the spiked element notch, the naked crank
; 1078 : the offset is in the same direction to "stick together"
; 1079 :   */
; 1080 : 	float crankme = targetPtr->localData->ataFrom * RTD;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR _crankme$[ebp], xmm0

; 1081 : 	AircraftClass *elementlead = NULL;

	mov	DWORD PTR _elementlead$[ebp], 0

; 1082 : 	if (self->vehicleInUnit == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	movzx	eax, BYTE PTR [edx+664]
	test	eax, eax
	jne	SHORT $LN56@level3b

; 1083 : 	elementlead = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(2);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _elementlead$[ebp], eax
$LN56@level3b:

; 1084 : 	if (self->vehicleInUnit == 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	movzx	ecx, BYTE PTR [eax+664]
	cmp	ecx, 2
	jne	SHORT $LN55@level3b

; 1085 : 	elementlead = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(0);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _elementlead$[ebp], eax
$LN55@level3b:

; 1086 : 
; 1087 : if (bvractionstep != 3)// we are not pumping

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+628], 3
	je	SHORT $LN49@level3b

; 1088 : {
; 1089 : 	if ((bvractionstep != 0 || targetData->range > maxAAWpnRange )&& WhoIsSpiked()>=15)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+628], 0
	jne	SHORT $LN52@level3b
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+44]
	comiss	xmm0, DWORD PTR [ecx+572]
	jbe	SHORT $LN53@level3b
$LN52@level3b:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WhoIsSpiked@DigitalBrain@@IAEHXZ	; DigitalBrain::WhoIsSpiked
	cmp	eax, 15					; 0000000fH
	jl	SHORT $LN53@level3b

; 1090 : 	bvractionstep = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+628], 0
	jmp	SHORT $LN51@level3b
$LN53@level3b:

; 1091 : 	else bvractionstep = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+628], 1
$LN51@level3b:

; 1092 : 	if (!HowManyHotnosed())bvractionstep = 2;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HowManyHotnosed@DigitalBrain@@IAEHXZ	; DigitalBrain::HowManyHotnosed
	test	eax, eax
	jne	SHORT $LN50@level3b
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+628], 2
$LN50@level3b:

; 1093 : 	if (IsSupportignmissile()) bvractionstep =3;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSupportignmissile@DigitalBrain@@IAEHXZ ; DigitalBrain::IsSupportignmissile
	test	eax, eax
	je	SHORT $LN49@level3b
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+628], 3
$LN49@level3b:

; 1094 : }
; 1095 : 
; 1096 : 
; 1097 : 	   switch (bvractionstep)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+628]
	mov	DWORD PTR tv180[ebp], ecx
	cmp	DWORD PTR tv180[ebp], 3
	ja	$LN47@level3b
	mov	edx, DWORD PTR tv180[ebp]
	jmp	DWORD PTR $LN61@level3b[edx*4]
$LN46@level3b:

; 1098 : 	   {
; 1099 : 	   case 0:
; 1100 : 		   {
; 1101 : 			if (elementlead && elementlead->DBrain()->bvrCurrTactic != BvrNotch &&
; 1102 : 				elementlead->DBrain()->bvrCurrTactic != BvrPump)

	cmp	DWORD PTR _elementlead$[ebp], 0
	je	SHORT $LN45@level3b
	mov	ecx, DWORD PTR _elementlead$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+636], 10			; 0000000aH
	je	SHORT $LN45@level3b
	mov	ecx, DWORD PTR _elementlead$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+636], 6
	je	SHORT $LN45@level3b

; 1103 : 				if (rand()%2==1)

	call	_rand
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN60@level3b
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN60@level3b:
	cmp	eax, 1
	jne	SHORT $LN44@level3b

; 1104 : 					bvrCurrTactic = BvrNotchRightHigh;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 12			; 0000000cH

; 1105 : 				else

	jmp	SHORT $LN43@level3b
$LN44@level3b:

; 1106 :    					bvrCurrTactic = BvrNotch;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 10			; 0000000aH
$LN43@level3b:

; 1107 : 			else 

	jmp	$LN26@level3b
$LN45@level3b:

; 1108 : 			{
; 1109 : 			int randme = rand()%3;

	call	_rand
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR _randme$2[ebp], edx

; 1110 : 			 if (elementlead && elementlead->DBrain()->offsetdir == offRight)

	cmp	DWORD PTR _elementlead$[ebp], 0
	je	SHORT $LN41@level3b
	mov	ecx, DWORD PTR _elementlead$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+600], 1
	jne	SHORT $LN41@level3b

; 1111 : 				 {
; 1112 : 				 if (randme == 1 && crankme < 90.0f)

	cmp	DWORD PTR _randme$2[ebp], 1
	jne	SHORT $LN40@level3b
	movss	xmm0, DWORD PTR __real@42b40000
	comiss	xmm0, DWORD PTR _crankme$[ebp]
	jbe	SHORT $LN40@level3b

; 1113 : 					 {
; 1114 : 					 bvrCurrTactic = BvrCrankRightHi;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 18			; 00000012H
	jmp	SHORT $LN37@level3b
$LN40@level3b:

; 1115 : 					 }
; 1116 : 				 else if (randme == 2 && crankme < 90.0f)

	cmp	DWORD PTR _randme$2[ebp], 2
	jne	SHORT $LN38@level3b
	movss	xmm0, DWORD PTR __real@42b40000
	comiss	xmm0, DWORD PTR _crankme$[ebp]
	jbe	SHORT $LN38@level3b

; 1117 : 					 {
; 1118 : 					 bvrCurrTactic = BvrCrankRightLo;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 19			; 00000013H

; 1119 : 					 }
; 1120 : 				 else 

	jmp	SHORT $LN37@level3b
$LN38@level3b:

; 1121 :    					bvrCurrTactic = BvrCrankRight;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 8
$LN37@level3b:
	jmp	$LN26@level3b
$LN41@level3b:

; 1122 : 				 }
; 1123 : 
; 1124 : 			 else if (elementlead && elementlead->DBrain()->offsetdir == offLeft)

	cmp	DWORD PTR _elementlead$[ebp], 0
	je	SHORT $LN35@level3b
	mov	ecx, DWORD PTR _elementlead$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+600], 3
	jne	SHORT $LN35@level3b

; 1125 : 				  {
; 1126 : 				 if (randme == 1  && crankme < 90.0f)

	cmp	DWORD PTR _randme$2[ebp], 1
	jne	SHORT $LN34@level3b
	movss	xmm0, DWORD PTR __real@42b40000
	comiss	xmm0, DWORD PTR _crankme$[ebp]
	jbe	SHORT $LN34@level3b

; 1127 : 					 {
; 1128 : 					 bvrCurrTactic = BvrCrankLeftHi;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 20			; 00000014H
	jmp	SHORT $LN31@level3b
$LN34@level3b:

; 1129 : 					 }
; 1130 : 				 else if (randme == 2 && crankme < 90.0f)

	cmp	DWORD PTR _randme$2[ebp], 2
	jne	SHORT $LN32@level3b
	movss	xmm0, DWORD PTR __real@42b40000
	comiss	xmm0, DWORD PTR _crankme$[ebp]
	jbe	SHORT $LN32@level3b

; 1131 : 					 {
; 1132 : 					 bvrCurrTactic = BvrCrankLeftLo;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 21			; 00000015H

; 1133 : 					 }
; 1134 : 				 else 

	jmp	SHORT $LN31@level3b
$LN32@level3b:

; 1135 :    					bvrCurrTactic = BvrCrankLeft;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 9
$LN31@level3b:

; 1136 : 				 }
; 1137 : 			 else

	jmp	SHORT $LN26@level3b
$LN35@level3b:

; 1138 : 				   {
; 1139 : 				 if (randme == 1 && crankme < 90.0f)

	cmp	DWORD PTR _randme$2[ebp], 1
	jne	SHORT $LN29@level3b
	movss	xmm0, DWORD PTR __real@42b40000
	comiss	xmm0, DWORD PTR _crankme$[ebp]
	jbe	SHORT $LN29@level3b

; 1140 : 					 {
; 1141 : 					 bvrCurrTactic = BvrCrankHi;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 16			; 00000010H
	jmp	SHORT $LN26@level3b
$LN29@level3b:

; 1142 : 					 }
; 1143 : 				 else if (randme == 2 && crankme < 90.0f)

	cmp	DWORD PTR _randme$2[ebp], 2
	jne	SHORT $LN27@level3b
	movss	xmm0, DWORD PTR __real@42b40000
	comiss	xmm0, DWORD PTR _crankme$[ebp]
	jbe	SHORT $LN27@level3b

; 1144 : 					 {
; 1145 : 					 bvrCurrTactic = BvrCrankLo;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 17			; 00000011H

; 1146 : 					 }
; 1147 : 				 else 

	jmp	SHORT $LN26@level3b
$LN27@level3b:

; 1148 :    					bvrCurrTactic = BvrCrank;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 7
$LN26@level3b:

; 1149 : 				 }
; 1150 : 			}
; 1151 : 			bvrTacticTimer = SimLibElapsedTime + 50 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 50000				; 0000c350H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx

; 1152 : 		   break;

	jmp	$LN47@level3b
$LN25@level3b:

; 1153 : 		   }
; 1154 : 	   case 1:
; 1155 : 		   {
; 1156 : 			int randme = rand()%3;

	call	_rand
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR _randme$1[ebp], edx

; 1157 : 			 if (elementlead && elementlead->DBrain()->offsetdir == offRight)

	cmp	DWORD PTR _elementlead$[ebp], 0
	je	SHORT $LN24@level3b
	mov	ecx, DWORD PTR _elementlead$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+600], 1
	jne	SHORT $LN24@level3b

; 1158 : 				 {
; 1159 : 				 if (randme == 1 && crankme < 90.0f)

	cmp	DWORD PTR _randme$1[ebp], 1
	jne	SHORT $LN23@level3b
	movss	xmm0, DWORD PTR __real@42b40000
	comiss	xmm0, DWORD PTR _crankme$[ebp]
	jbe	SHORT $LN23@level3b

; 1160 : 					 {
; 1161 : 					 bvrCurrTactic = BvrCrankRightHi;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 18			; 00000012H
	jmp	SHORT $LN20@level3b
$LN23@level3b:

; 1162 : 					 }
; 1163 : 				 else if (randme == 2 && crankme < 90.0f)

	cmp	DWORD PTR _randme$1[ebp], 2
	jne	SHORT $LN21@level3b
	movss	xmm0, DWORD PTR __real@42b40000
	comiss	xmm0, DWORD PTR _crankme$[ebp]
	jbe	SHORT $LN21@level3b

; 1164 : 					 {
; 1165 : 					 bvrCurrTactic = BvrCrankRightLo;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 19			; 00000013H

; 1166 : 					 }
; 1167 : 				 else 

	jmp	SHORT $LN20@level3b
$LN21@level3b:

; 1168 :    					bvrCurrTactic = BvrCrankRight;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 8
$LN20@level3b:
	jmp	$LN9@level3b
$LN24@level3b:

; 1169 : 				 }
; 1170 : 
; 1171 : 			 else if (elementlead && elementlead->DBrain()->offsetdir == offLeft)

	cmp	DWORD PTR _elementlead$[ebp], 0
	je	SHORT $LN18@level3b
	mov	ecx, DWORD PTR _elementlead$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+600], 3
	jne	SHORT $LN18@level3b

; 1172 : 				  {
; 1173 : 				 if (randme == 1 && crankme < 90.0f)

	cmp	DWORD PTR _randme$1[ebp], 1
	jne	SHORT $LN17@level3b
	movss	xmm0, DWORD PTR __real@42b40000
	comiss	xmm0, DWORD PTR _crankme$[ebp]
	jbe	SHORT $LN17@level3b

; 1174 : 					 {
; 1175 : 					 bvrCurrTactic = BvrCrankLeftHi;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 20			; 00000014H
	jmp	SHORT $LN14@level3b
$LN17@level3b:

; 1176 : 					 }
; 1177 : 				 else if (randme == 2 && crankme < 90.0f)

	cmp	DWORD PTR _randme$1[ebp], 2
	jne	SHORT $LN15@level3b
	movss	xmm0, DWORD PTR __real@42b40000
	comiss	xmm0, DWORD PTR _crankme$[ebp]
	jbe	SHORT $LN15@level3b

; 1178 : 					 {
; 1179 : 					 bvrCurrTactic = BvrCrankLeftLo;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 21			; 00000015H

; 1180 : 					 }
; 1181 : 				 else 

	jmp	SHORT $LN14@level3b
$LN15@level3b:

; 1182 :    					bvrCurrTactic = BvrCrankLeft;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 9
$LN14@level3b:

; 1183 : 				 }
; 1184 : 			 else

	jmp	SHORT $LN9@level3b
$LN18@level3b:

; 1185 : 				   {
; 1186 : 				 if (randme == 1 && crankme < 90.0f)

	cmp	DWORD PTR _randme$1[ebp], 1
	jne	SHORT $LN12@level3b
	movss	xmm0, DWORD PTR __real@42b40000
	comiss	xmm0, DWORD PTR _crankme$[ebp]
	jbe	SHORT $LN12@level3b

; 1187 : 					 {
; 1188 : 					 bvrCurrTactic = BvrCrankHi;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 16			; 00000010H
	jmp	SHORT $LN9@level3b
$LN12@level3b:

; 1189 : 					 }
; 1190 : 				 else if (randme == 2 && crankme < 90.0f)

	cmp	DWORD PTR _randme$1[ebp], 2
	jne	SHORT $LN10@level3b
	movss	xmm0, DWORD PTR __real@42b40000
	comiss	xmm0, DWORD PTR _crankme$[ebp]
	jbe	SHORT $LN10@level3b

; 1191 : 					 {
; 1192 : 					 bvrCurrTactic = BvrCrankLo;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 17			; 00000011H

; 1193 : 					 }
; 1194 : 				 else 

	jmp	SHORT $LN9@level3b
$LN10@level3b:

; 1195 :    					bvrCurrTactic = BvrCrank;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 7
$LN9@level3b:

; 1196 : 				 }
; 1197 : 		   bvrTacticTimer = SimLibElapsedTime + 40 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 40000				; 00009c40H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx

; 1198 : 		   break;

	jmp	$LN47@level3b
$LN8@level3b:

; 1199 : 		   }
; 1200 : 		case 2:
; 1201 : 		   {
; 1202 : 			if (Isflightlead)	bvrCurrTactic = BvrFollowWaypoints;

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+624]
	test	edx, edx
	je	SHORT $LN7@level3b
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 0
	jmp	SHORT $LN6@level3b
$LN7@level3b:

; 1203 : 			else bvrCurrTactic = BvrFlyFormation;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 1
$LN6@level3b:

; 1204 : 			bvrTacticTimer = SimLibElapsedTime + 8 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 8000				; 00001f40H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx

; 1205 : 		   break;

	jmp	$LN47@level3b
$LN5@level3b:

; 1206 : 		   }
; 1207 : 	   case 3:// we have launched a weapon
; 1208 : 		   {
; 1209 : 			if (IsSupportignmissile()) 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSupportignmissile@DigitalBrain@@IAEHXZ ; DigitalBrain::IsSupportignmissile
	test	eax, eax
	je	SHORT $LN4@level3b

; 1210 : 			   {
; 1211 : 				   bvrTacticTimer = SimLibElapsedTime + 3 * CampaignSeconds;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 3000				; 00000bb8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+592], ecx

; 1212 : 				   break;

	jmp	SHORT $LN47@level3b
$LN4@level3b:

; 1213 : 			   }
; 1214 : 			   if (Isflightlead)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	je	SHORT $LN3@level3b

; 1215 : 			   {
; 1216 : 				bvrCurrTactic = BvrPump ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 6

; 1217 : 				bvrTacticTimer = SimLibElapsedTime + 15 * CampaignSeconds;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 15000				; 00003a98H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax
	jmp	SHORT $LN1@level3b
$LN3@level3b:

; 1218 : 			   }
; 1219 : 			   else if (IsElementlead)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+625]
	test	eax, eax
	je	SHORT $LN1@level3b

; 1220 : 			   {
; 1221 : 				bvrCurrTactic = BvrPump  ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 6

; 1222 : 				bvrTacticTimer = SimLibElapsedTime + 15 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 15000				; 00003a98H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx
$LN1@level3b:

; 1223 : 			   }
; 1224 : 			   bvractionstep =1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+628], 1
$LN47@level3b:
$LN58@level3b:

; 1225 : 		   }
; 1226 : 		break;
; 1227 : 	   }
; 1228 : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN61@level3b:
	DD	$LN46@level3b
	DD	$LN25@level3b
	DD	$LN8@level3b
	DD	$LN5@level3b
?level3b@DigitalBrain@@IAEXXZ ENDP			; DigitalBrain::level3b
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?level3a@DigitalBrain@@IAEXXZ PROC			; DigitalBrain::level3a
; _this$ = ecx

; 959  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 960  : if (!Isflightlead && !IsElementlead) return;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	jne	SHORT $LN8@level3a
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+625]
	test	eax, eax
	jne	SHORT $LN8@level3a
	jmp	$LN9@level3a
$LN8@level3a:

; 961  : 
; 962  : // allowed to drag once pr missile engagement
; 963  : 	   switch (bvractionstep)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+628]
	mov	DWORD PTR tv71[ebp], edx
	cmp	DWORD PTR tv71[ebp], 0
	je	SHORT $LN5@level3a
	cmp	DWORD PTR tv71[ebp], 1
	je	SHORT $LN2@level3a
	jmp	$LN9@level3a
$LN5@level3a:

; 964  : 	   {
; 965  : 	   case 0:
; 966  : 		   {
; 967  : 		   	if (Isflightlead)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	je	SHORT $LN4@level3a

; 968  : 			  {
; 969  : 				bvrCurrTactic = BvrSingleSideOffset ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 2

; 970  : 				bvrTacticTimer = SimLibElapsedTime + 5 * CampaignSeconds;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 5000				; 00001388H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax
$LN4@level3a:

; 971  : 			  }
; 972  : 		   }
; 973  : 		   if (IsSupportignmissile()) bvractionstep ++;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSupportignmissile@DigitalBrain@@IAEHXZ ; DigitalBrain::IsSupportignmissile
	test	eax, eax
	je	SHORT $LN3@level3a
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+628]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+628], eax
$LN3@level3a:

; 974  : 		   break;

	jmp	SHORT $LN9@level3a
$LN2@level3a:

; 975  : 		   
; 976  : 	   case 1:
; 977  : 		   {
; 978  : 			if (IsSupportignmissile()) 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSupportignmissile@DigitalBrain@@IAEHXZ ; DigitalBrain::IsSupportignmissile
	test	eax, eax
	je	SHORT $LN1@level3a

; 979  : 			   {
; 980  : 				   bvrTacticTimer = SimLibElapsedTime + 3 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 3000				; 00000bb8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx

; 981  : 				   break;

	jmp	SHORT $LN9@level3a
$LN1@level3a:

; 982  : 			   }
; 983  : 				bvrCurrTactic = BvrPump ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 6

; 984  : 				bvrTacticTimer = SimLibElapsedTime + 15 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 15000				; 00003a98H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx

; 985  : 				bvractionstep = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+628], 0
$LN9@level3a:

; 986  : 			   break;
; 987  : 		   }
; 988  : 		break;
; 989  : 	   }
; 990  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?level3a@DigitalBrain@@IAEXXZ ENDP			; DigitalBrain::level3a
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_crankme$ = -24						; size = 4
_randme$1 = -20						; size = 4
tv270 = -16						; size = 4
_wingman$ = -12						; size = 4
_elementlead$ = -8					; size = 4
_this$ = -4						; size = 4
?level2c@DigitalBrain@@IAEXXZ PROC			; DigitalBrain::level2c
; _this$ = ecx

; 1248 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1249 : /*idea is :
; 1250 : the flight split up if spiked...
; 1251 : the spiked element notch, the naked go pure
; 1252 : if both notch they do it in different direction
; 1253 : if inside 16nm the wingies are cleared off if untargeted.
; 1254 :   */
; 1255 : 	float crankme = targetPtr->localData->ataFrom * RTD;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR _crankme$[ebp], xmm0

; 1256 : 	AircraftClass *wingman = NULL;

	mov	DWORD PTR _wingman$[ebp], 0

; 1257 : 	if (self->vehicleInUnit == 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movzx	edx, BYTE PTR [ecx+664]
	test	edx, edx
	jne	SHORT $LN32@level2c

; 1258 : 	{
; 1259 : 	wingman = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _wingman$[ebp], eax
$LN32@level2c:

; 1260 : 	}
; 1261 : 	// the elements lead wingie
; 1262 : 	if ( self->vehicleInUnit == 2)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	movzx	eax, BYTE PTR [edx+664]
	cmp	eax, 2
	jne	SHORT $LN31@level2c

; 1263 : 	{
; 1264 : 	wingman = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(3);

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _wingman$[ebp], eax
$LN31@level2c:

; 1265 : 	}
; 1266 : 
; 1267 : if ((!Isflightlead && !IsElementlead) && targetData->range > 16*NM_TO_FT) return;

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+624]
	test	eax, eax
	jne	SHORT $LN30@level2c
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+625]
	test	edx, edx
	jne	SHORT $LN30@level2c
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movss	xmm0, DWORD PTR [ecx+44]
	comiss	xmm0, DWORD PTR __real@47bde1b0
	jbe	SHORT $LN30@level2c
	jmp	$LN33@level2c
$LN30@level2c:

; 1268 : 
; 1269 : if ((!Isflightlead && !IsElementlead) && WhoIsSpiked()<7 && bvrCurrTactic == BvrFlyFormation) return;

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+624]
	test	eax, eax
	jne	SHORT $LN29@level2c
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+625]
	test	edx, edx
	jne	SHORT $LN29@level2c
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WhoIsSpiked@DigitalBrain@@IAEHXZ	; DigitalBrain::WhoIsSpiked
	cmp	eax, 7
	jge	SHORT $LN29@level2c
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+636], 1
	jne	SHORT $LN29@level2c
	jmp	$LN33@level2c
$LN29@level2c:

; 1270 : 
; 1271 : 	AircraftClass *elementlead = NULL;

	mov	DWORD PTR _elementlead$[ebp], 0

; 1272 : 	if (self->vehicleInUnit == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	movzx	eax, BYTE PTR [edx+664]
	test	eax, eax
	jne	SHORT $LN28@level2c

; 1273 : 	{
; 1274 : 	elementlead = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(2);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _elementlead$[ebp], eax
$LN28@level2c:

; 1275 : 	}
; 1276 : 	//we are element lead
; 1277 : 	if (self->vehicleInUnit == 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	movzx	ecx, BYTE PTR [eax+664]
	cmp	ecx, 2
	jne	SHORT $LN27@level2c

; 1278 : 	{
; 1279 : 	elementlead = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(0);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _elementlead$[ebp], eax
$LN27@level2c:

; 1280 : 	}
; 1281 : 	if (wingman)

	cmp	DWORD PTR _wingman$[ebp], 0
	je	$LN26@level2c

; 1282 : 	{
; 1283 : 		if ((bvractionstep != 0  || targetData->range > TGTMAR) && wingman->DBrain()->bvrCurrTactic ==BvrFlyFormation && WhoIsSpiked()>3  || 
; 1284 : 			(bvractionstep != 0 || targetData->range > TGTMAR) && wingman->DBrain()->bvrCurrTactic !=BvrFlyFormation && WhoIsSpiked()>7)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+628], 0
	jne	SHORT $LN22@level2c
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+44]
	comiss	xmm0, DWORD PTR [eax+616]
	jbe	SHORT $LN23@level2c
$LN22@level2c:
	mov	ecx, DWORD PTR _wingman$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+636], 1
	jne	SHORT $LN23@level2c
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WhoIsSpiked@DigitalBrain@@IAEHXZ	; DigitalBrain::WhoIsSpiked
	cmp	eax, 3
	jg	SHORT $LN24@level2c
$LN23@level2c:
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+628], 0
	jne	SHORT $LN21@level2c
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+44]
	comiss	xmm0, DWORD PTR [ecx+616]
	jbe	SHORT $LN25@level2c
$LN21@level2c:
	mov	ecx, DWORD PTR _wingman$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+636], 1
	je	SHORT $LN25@level2c
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WhoIsSpiked@DigitalBrain@@IAEHXZ	; DigitalBrain::WhoIsSpiked
	cmp	eax, 7
	jle	SHORT $LN25@level2c
$LN24@level2c:

; 1285 : 		bvractionstep = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+628], 0
	jmp	SHORT $LN20@level2c
$LN25@level2c:

; 1286 : 		else bvractionstep = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+628], 1
$LN20@level2c:
	jmp	SHORT $LN16@level2c
$LN26@level2c:

; 1287 : 
; 1288 : 	}
; 1289 : 	else if (!wingman)

	cmp	DWORD PTR _wingman$[ebp], 0
	jne	SHORT $LN16@level2c

; 1290 : 	{
; 1291 : 		if ((bvractionstep != 0  && targetData->range > maxAAWpnRange) && WhoIsSpiked()>7)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+628], 0
	je	SHORT $LN17@level2c
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+44]
	comiss	xmm0, DWORD PTR [ecx+572]
	jbe	SHORT $LN17@level2c
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WhoIsSpiked@DigitalBrain@@IAEHXZ	; DigitalBrain::WhoIsSpiked
	cmp	eax, 7
	jle	SHORT $LN17@level2c

; 1292 : 		bvractionstep = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+628], 0
	jmp	SHORT $LN16@level2c
$LN17@level2c:

; 1293 : 		else bvractionstep = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+628], 1
$LN16@level2c:

; 1294 : 	}
; 1295 : 
; 1296 : 
; 1297 : 	   switch (bvractionstep)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+628]
	mov	DWORD PTR tv270[ebp], edx
	cmp	DWORD PTR tv270[ebp], 0
	je	SHORT $LN13@level2c
	cmp	DWORD PTR tv270[ebp], 1
	je	SHORT $LN9@level2c
	jmp	$LN14@level2c
$LN13@level2c:

; 1298 : 	   {
; 1299 : 	   case 0:
; 1300 : 		   {
; 1301 : 		   if (elementlead && elementlead->DBrain()->offsetdir == offRight)

	cmp	DWORD PTR _elementlead$[ebp], 0
	je	SHORT $LN12@level2c
	mov	ecx, DWORD PTR _elementlead$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+600], 1
	jne	SHORT $LN12@level2c

; 1302 :    		   bvrCurrTactic = BvrNotchRight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 11			; 0000000bH
	jmp	SHORT $LN10@level2c
$LN12@level2c:

; 1303 : 		   else if (elementlead && elementlead->DBrain()->offsetdir == offLeft)

	cmp	DWORD PTR _elementlead$[ebp], 0
	je	SHORT $LN10@level2c
	mov	ecx, DWORD PTR _elementlead$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+600], 3
	jne	SHORT $LN10@level2c

; 1304 :    		   bvrCurrTactic = BvrNotchLeft;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 13			; 0000000dH
$LN10@level2c:

; 1305 : 		   break;

	jmp	$LN14@level2c

; 1306 : 		   bvrTacticTimer = SimLibElapsedTime + 60 * CampaignSeconds;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 60000				; 0000ea60H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+592], edx
$LN9@level2c:

; 1307 : 		   }
; 1308 : 	   case 1:
; 1309 : 		   {
; 1310 : 		   int randme = rand()%3;

	call	_rand
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR _randme$1[ebp], edx

; 1311 : 		   if (elementlead && elementlead->DBrain()->offsetdir == offLeft)

	cmp	DWORD PTR _elementlead$[ebp], 0
	je	SHORT $LN8@level2c
	mov	ecx, DWORD PTR _elementlead$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+600], 3
	jne	SHORT $LN8@level2c

; 1312 :    		   bvrCurrTactic = BvrPursuit;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 4
	jmp	SHORT $LN1@level2c
$LN8@level2c:

; 1313 : 		   else if (elementlead && elementlead->DBrain()->offsetdir == offRight)

	cmp	DWORD PTR _elementlead$[ebp], 0
	je	SHORT $LN6@level2c
	mov	ecx, DWORD PTR _elementlead$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+600], 1
	jne	SHORT $LN6@level2c

; 1314 :    		   bvrCurrTactic = BvrPursuit;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 4

; 1315 : 		   else

	jmp	SHORT $LN1@level2c
$LN6@level2c:

; 1316 : 			   { 
; 1317 : 			   if (randme == 1 && crankme < 90.0f)

	cmp	DWORD PTR _randme$1[ebp], 1
	jne	SHORT $LN4@level2c
	movss	xmm0, DWORD PTR __real@42b40000
	comiss	xmm0, DWORD PTR _crankme$[ebp]
	jbe	SHORT $LN4@level2c

; 1318 : 				{
; 1319 : 				bvrCurrTactic = BvrCrankHi;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 16			; 00000010H
	jmp	SHORT $LN1@level2c
$LN4@level2c:

; 1320 : 				}
; 1321 : 				else if (randme == 2 && crankme < 90.0f)

	cmp	DWORD PTR _randme$1[ebp], 2
	jne	SHORT $LN2@level2c
	movss	xmm0, DWORD PTR __real@42b40000
	comiss	xmm0, DWORD PTR _crankme$[ebp]
	jbe	SHORT $LN2@level2c

; 1322 : 				{
; 1323 : 				bvrCurrTactic = BvrCrankLo;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 17			; 00000011H

; 1324 : 				}
; 1325 : 				else 

	jmp	SHORT $LN1@level2c
$LN2@level2c:

; 1326 :    				bvrCurrTactic = BvrCrank;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 7
$LN1@level2c:

; 1327 : 			   }
; 1328 : 		   bvrTacticTimer = SimLibElapsedTime + 40 * CampaignSeconds;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 40000				; 00009c40H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+592], ecx
$LN14@level2c:
$LN33@level2c:

; 1329 : 		   break;
; 1330 : 		   }
; 1331 : 		break;
; 1332 : 	   }
; 1333 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?level2c@DigitalBrain@@IAEXXZ ENDP			; DigitalBrain::level2c
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
tv174 = -12						; size = 4
_elementlead$ = -8					; size = 4
_this$ = -4						; size = 4
?level2b@DigitalBrain@@IAEXXZ PROC			; DigitalBrain::level2b
; _this$ = ecx

; 1023 : {// b = defensive missilerange superiority

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1024 : /*idea is :
; 1025 : the element split up if spiked...
; 1026 : the spiked element notch, the naked crank
; 1027 : the offset is in the same direction to "stick together"
; 1028 :   */
; 1029 : if (!Isflightlead && !IsElementlead) return;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	jne	SHORT $LN18@level2b
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+625]
	test	eax, eax
	jne	SHORT $LN18@level2b
	jmp	$LN19@level2b
$LN18@level2b:

; 1030 : 	AircraftClass *elementlead = NULL;

	mov	DWORD PTR _elementlead$[ebp], 0

; 1031 : 	if (self->vehicleInUnit == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	movzx	eax, BYTE PTR [edx+664]
	test	eax, eax
	jne	SHORT $LN17@level2b

; 1032 : 	elementlead = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(2);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _elementlead$[ebp], eax
$LN17@level2b:

; 1033 : 	if (self->vehicleInUnit == 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	movzx	ecx, BYTE PTR [eax+664]
	cmp	ecx, 2
	jne	SHORT $LN16@level2b

; 1034 : 	elementlead = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(0);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _elementlead$[ebp], eax
$LN16@level2b:

; 1035 : 
; 1036 : if ((bvractionstep != 0 || targetData->range > TGTMAR) && WhoIsSpiked() >= 15 && targetData->range < MAR)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+628], 0
	jne	SHORT $LN14@level2b
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+44]
	comiss	xmm0, DWORD PTR [eax+616]
	jbe	SHORT $LN15@level2b
$LN14@level2b:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WhoIsSpiked@DigitalBrain@@IAEHXZ	; DigitalBrain::WhoIsSpiked
	cmp	eax, 15					; 0000000fH
	jl	SHORT $LN15@level2b
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+612]
	comiss	xmm0, DWORD PTR [edx+44]
	jbe	SHORT $LN15@level2b

; 1037 : bvractionstep = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+628], 0
	jmp	SHORT $LN13@level2b
$LN15@level2b:

; 1038 : else bvractionstep = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+628], 1
$LN13@level2b:

; 1039 : 
; 1040 : if (!HowManyHotnosed())bvractionstep = 2;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HowManyHotnosed@DigitalBrain@@IAEHXZ	; DigitalBrain::HowManyHotnosed
	test	eax, eax
	jne	SHORT $LN12@level2b
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+628], 2
$LN12@level2b:

; 1041 : 
; 1042 : 
; 1043 : 	   switch (bvractionstep)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+628]
	mov	DWORD PTR tv174[ebp], edx
	cmp	DWORD PTR tv174[ebp], 0
	je	SHORT $LN9@level2b
	cmp	DWORD PTR tv174[ebp], 1
	je	SHORT $LN8@level2b
	cmp	DWORD PTR tv174[ebp], 2
	je	$LN3@level2b
	jmp	$LN10@level2b
$LN9@level2b:

; 1044 : 	   {
; 1045 : 	   case 0:
; 1046 : 		   {
; 1047 :    		   bvrCurrTactic = BvrPump;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 6

; 1048 : 		   bvrTacticTimer = SimLibElapsedTime + 50 * CampaignSeconds;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 50000				; 0000c350H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+592], ecx

; 1049 : 		   break;

	jmp	$LN10@level2b
$LN8@level2b:

; 1050 : 		   }
; 1051 : 	   case 1:
; 1052 : 		   {
; 1053 : 		   if (elementlead && elementlead->DBrain()->offsetdir == offRight)

	cmp	DWORD PTR _elementlead$[ebp], 0
	je	SHORT $LN7@level2b
	mov	ecx, DWORD PTR _elementlead$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+600], 1
	jne	SHORT $LN7@level2b

; 1054 :    		   bvrCurrTactic = BvrCrankRight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 8
	jmp	SHORT $LN4@level2b
$LN7@level2b:

; 1055 : 		   else if (elementlead && elementlead->DBrain()->offsetdir == offLeft)

	cmp	DWORD PTR _elementlead$[ebp], 0
	je	SHORT $LN5@level2b
	mov	ecx, DWORD PTR _elementlead$[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+600], 3
	jne	SHORT $LN5@level2b

; 1056 :    		   bvrCurrTactic = BvrCrankLeft;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 9
	jmp	SHORT $LN4@level2b
$LN5@level2b:

; 1057 : 		   else bvrCurrTactic = BvrCrank;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 7
$LN4@level2b:

; 1058 : 		   bvrTacticTimer = SimLibElapsedTime + 40 * CampaignSeconds;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 40000				; 00009c40H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax

; 1059 : 		   break;

	jmp	SHORT $LN10@level2b
$LN3@level2b:

; 1060 : 		   }
; 1061 : 		case 2:
; 1062 : 		   {
; 1063 : 			   if (Isflightlead)	bvrCurrTactic = BvrFollowWaypoints;

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+624]
	test	eax, eax
	je	SHORT $LN2@level2b
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], 0
	jmp	SHORT $LN1@level2b
$LN2@level2b:

; 1064 : 			   else bvrCurrTactic = BvrFlyFormation;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 1
$LN1@level2b:

; 1065 : 			   bvrTacticTimer = SimLibElapsedTime + 8 * CampaignSeconds;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 8000				; 00001f40H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax
$LN10@level2b:
$LN19@level2b:

; 1066 : 		   break;
; 1067 : 		   }
; 1068 : 		break;
; 1069 : 	   }
; 1070 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?level2b@DigitalBrain@@IAEXXZ ENDP			; DigitalBrain::level2b
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?level2a@DigitalBrain@@IAEXXZ PROC			; DigitalBrain::level2a
; _this$ = ecx

; 943  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 944  : if (!Isflightlead && !IsElementlead) return;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	jne	SHORT $LN5@level2a
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+625]
	test	eax, eax
	jne	SHORT $LN5@level2a
	jmp	SHORT $LN6@level2a
$LN5@level2a:

; 945  : 	   switch (bvractionstep)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+628]
	mov	DWORD PTR tv71[ebp], edx
	cmp	DWORD PTR tv71[ebp], 0
	je	SHORT $LN2@level2a
	jmp	SHORT $LN6@level2a
$LN2@level2a:

; 946  : 	   {
; 947  : 	   case 0:
; 948  : 		   {
; 949  : 		   	if (Isflightlead)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	je	SHORT $LN6@level2a

; 950  : 			  {
; 951  : 				bvrCurrTactic = BvrSingleSideOffset ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 2

; 952  : 				bvrTacticTimer = SimLibElapsedTime + 5 * CampaignSeconds;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 5000				; 00001388H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax
$LN6@level2a:

; 953  : 			  }
; 954  : 		   }
; 955  : 		break;
; 956  : 	   }
; 957  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?level2a@DigitalBrain@@IAEXXZ ENDP			; DigitalBrain::level2a
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?level1c@DigitalBrain@@IAEXXZ PROC			; DigitalBrain::level1c
; _this$ = ecx

; 1232 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1233 : if (!Isflightlead && !IsElementlead) return;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	jne	SHORT $LN4@level1c
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+625]
	test	eax, eax
	jne	SHORT $LN4@level1c
	jmp	SHORT $LN5@level1c
$LN4@level1c:

; 1234 : 	   switch (bvractionstep)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+628]
	mov	DWORD PTR tv71[ebp], edx
	cmp	DWORD PTR tv71[ebp], 0
	je	SHORT $LN1@level1c
	jmp	SHORT $LN5@level1c
$LN1@level1c:

; 1235 : 	   {
; 1236 : 	   case 0:
; 1237 : 		   {
; 1238 : 				bvrCurrTactic = BvrPursuit ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 4

; 1239 : 				bvrTacticTimer = SimLibElapsedTime + 5 * CampaignSeconds;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 5000				; 00001388H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+592], ecx
$LN5@level1c:

; 1240 : 		   break;
; 1241 : 		   }
; 1242 : 		break;
; 1243 : 	   }
; 1244 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?level1c@DigitalBrain@@IAEXXZ ENDP			; DigitalBrain::level1c
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_wing2$ = -20						; size = 4
_wing1$ = -16						; size = 4
_elementlead$ = -12					; size = 4
tv149 = -8						; size = 4
_this$ = -4						; size = 4
?level1b@DigitalBrain@@IAEXXZ PROC			; DigitalBrain::level1b
; _this$ = ecx

; 993  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 994  : // idea is to crank away ...if the target lets us offset we continue enroute
; 995  : // if the target hotnoses us we engage (continuecrank)
; 996  : 
; 997  : bvrTacticTimer = SimLibElapsedTime + 8 * CampaignSeconds;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 8000				; 00001f40H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax

; 998  : if (!Isflightlead) return;

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+624]
	test	eax, eax
	jne	SHORT $LN7@level1b
	jmp	$LN8@level1b
$LN7@level1b:

; 999  : 	AircraftClass *elementlead = (AircraftClass *)self->GetCampaignObject()->GetComponentNumber(2);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _elementlead$[ebp], eax

; 1000 : 	AircraftClass *wing1 =(AircraftClass *)self->GetCampaignObject()->GetComponentNumber(1);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _wing1$[ebp], eax

; 1001 : 	AircraftClass *wing2 =(AircraftClass *)self->GetCampaignObject()->GetComponentNumber(3);

	push	3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _wing2$[ebp], eax

; 1002 : 
; 1003 : if (HowManyHotnosed()) bvractionstep = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HowManyHotnosed@DigitalBrain@@IAEHXZ	; DigitalBrain::HowManyHotnosed
	test	eax, eax
	je	SHORT $LN6@level1b
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+628], 0
	jmp	SHORT $LN5@level1b
$LN6@level1b:

; 1004 : else bvractionstep = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+628], 1
$LN5@level1b:

; 1005 : 
; 1006 : 	   switch (bvractionstep)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+628]
	mov	DWORD PTR tv149[ebp], ecx
	cmp	DWORD PTR tv149[ebp], 0
	je	SHORT $LN2@level1b
	cmp	DWORD PTR tv149[ebp], 1
	je	SHORT $LN1@level1b
	jmp	SHORT $LN8@level1b
$LN2@level1b:

; 1007 : 	   {
; 1008 : 	   case 0:
; 1009 : 		   {
; 1010 :    		   bvrCurrTactic = BvrCrank;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 7

; 1011 : 		   break;

	jmp	SHORT $LN8@level1b
$LN1@level1b:

; 1012 : 		   }
; 1013 : 	   case 1:
; 1014 : 		   {
; 1015 :    		   bvrCurrTactic = BvrFollowWaypoints;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 0
$LN8@level1b:

; 1016 : 		   break;
; 1017 : 		   }
; 1018 : 		break;
; 1019 : 	   }
; 1020 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?level1b@DigitalBrain@@IAEXXZ ENDP			; DigitalBrain::level1b
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?level1a@DigitalBrain@@IAEXXZ PROC			; DigitalBrain::level1a
; _this$ = ecx

; 919  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 920  : //if (Isflightlead) bvrCurrTactic = BvrNotchRightHigh;
; 921  : //else bvrCurrTactic = BvrNotchLeft;
; 922  : 
; 923  : //return;
; 924  : /////////////TEST TEST TEST//////////////////
; 925  : 
; 926  : 	if (!Isflightlead && !IsElementlead) return;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	jne	SHORT $LN5@level1a
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+625]
	test	eax, eax
	jne	SHORT $LN5@level1a
	jmp	SHORT $LN6@level1a
$LN5@level1a:

; 927  : // well just push forward.
; 928  : 	   switch (bvractionstep)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+628]
	mov	DWORD PTR tv71[ebp], edx
	cmp	DWORD PTR tv71[ebp], 0
	je	SHORT $LN2@level1a
	jmp	SHORT $LN6@level1a
$LN2@level1a:

; 929  : 	   {
; 930  : 
; 931  : 	   case 0:
; 932  : 		   {
; 933  : 		   	if (Isflightlead)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	je	SHORT $LN6@level1a

; 934  : 			  {
; 935  : 				bvrCurrTactic = BvrPursuit ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 4

; 936  : 				bvrTacticTimer = SimLibElapsedTime + 5 * CampaignSeconds;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 5000				; 00001388H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], eax
$LN6@level1a:

; 937  : 			  }
; 938  : 		   }
; 939  : 		break;
; 940  : 	   }
; 941  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?level1a@DigitalBrain@@IAEXXZ ENDP			; DigitalBrain::level1a
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DoProfile@DigitalBrain@@IAEXXZ PROC			; DigitalBrain::DoProfile
; _this$ = ecx

; 2379 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2380 : 	if (!flightLead) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+708], 0
	jne	SHORT $LN44@DoProfile
	jmp	$LN45@DoProfile
$LN44@DoProfile:

; 2381 : 
; 2382 : 	if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Pnone)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 0
	jne	SHORT $LN43@DoProfile

; 2383 :    {
; 2384 : 		if (Isflightlead) {

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+624]
	test	eax, eax
	je	SHORT $LN42@DoProfile

; 2385 : 			// 2002-03-15 ADDED BY S.G. If the flightLead is a player and NOT in Combat AP, then it CAN'T run ChoiceProfile. Default to Plevel1c which is a pure pursuit for the element
; 2386 : 			if (flightLead == self && self->IsPlayer() && self->AutopilotType() != AircraftClass::CombatAP)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+708]
	cmp	eax, DWORD PTR [edx+56]
	jne	SHORT $LN41@DoProfile
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN41@DoProfile
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
	cmp	eax, 2
	je	SHORT $LN41@DoProfile

; 2387 : 				bvrCurrProfile = Plevel1c;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+632], 3

; 2388 : 			else

	jmp	SHORT $LN42@DoProfile
$LN41@DoProfile:

; 2389 : 			// END OF ADDED SECTION 2002-03-15
; 2390 : 				ChoiceProfile();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChoiceProfile@DigitalBrain@@IAEXXZ	; DigitalBrain::ChoiceProfile
$LN42@DoProfile:

; 2391 : 		}
; 2392 :    }

	jmp	$LN45@DoProfile
$LN43@DoProfile:

; 2393 :    else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Plevel1a)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 1
	jne	SHORT $LN38@DoProfile

; 2394 :    {
; 2395 : 	level1a();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?level1a@DigitalBrain@@IAEXXZ		; DigitalBrain::level1a
	jmp	$LN45@DoProfile
$LN38@DoProfile:

; 2396 :    }
; 2397 :    else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Plevel1b)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 2
	jne	SHORT $LN36@DoProfile

; 2398 :    {
; 2399 : 	level1b();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?level1b@DigitalBrain@@IAEXXZ		; DigitalBrain::level1b
	jmp	$LN45@DoProfile
$LN36@DoProfile:

; 2400 :    }
; 2401 :    else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Plevel1c)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 3
	jne	SHORT $LN34@DoProfile

; 2402 :    {
; 2403 : 	level1c();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?level1c@DigitalBrain@@IAEXXZ		; DigitalBrain::level1c
	jmp	$LN45@DoProfile
$LN34@DoProfile:

; 2404 :    }
; 2405 :    else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Plevel2a)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 4
	jne	SHORT $LN32@DoProfile

; 2406 :    {
; 2407 : 	level2a();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?level2a@DigitalBrain@@IAEXXZ		; DigitalBrain::level2a
	jmp	$LN45@DoProfile
$LN32@DoProfile:

; 2408 :    }
; 2409 :    else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Plevel2b)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 5
	jne	SHORT $LN30@DoProfile

; 2410 :    {
; 2411 : 	level2b();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?level2b@DigitalBrain@@IAEXXZ		; DigitalBrain::level2b
	jmp	$LN45@DoProfile
$LN30@DoProfile:

; 2412 :    }
; 2413 :    else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Plevel2c)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 6
	jne	SHORT $LN28@DoProfile

; 2414 :    {
; 2415 : 	level2c();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?level2c@DigitalBrain@@IAEXXZ		; DigitalBrain::level2c
	jmp	$LN45@DoProfile
$LN28@DoProfile:

; 2416 :    }
; 2417 :    else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Plevel3a)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 7
	jne	SHORT $LN26@DoProfile

; 2418 :    {
; 2419 : 	level3a();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?level3a@DigitalBrain@@IAEXXZ		; DigitalBrain::level3a
	jmp	$LN45@DoProfile
$LN26@DoProfile:

; 2420 :    }
; 2421 :    else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Plevel3b)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 8
	jne	SHORT $LN24@DoProfile

; 2422 :    {
; 2423 : 	level3b();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?level3b@DigitalBrain@@IAEXXZ		; DigitalBrain::level3b
	jmp	$LN45@DoProfile
$LN24@DoProfile:

; 2424 :    }
; 2425 :    else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Plevel3c)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 9
	jne	SHORT $LN22@DoProfile

; 2426 :    {
; 2427 : 	level3c();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?level3c@DigitalBrain@@IAEXXZ		; DigitalBrain::level3c
	jmp	$LN45@DoProfile
$LN22@DoProfile:

; 2428 :    }
; 2429 :    else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Pbeamdeploy)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 10			; 0000000aH
	jne	SHORT $LN20@DoProfile

; 2430 :    {
; 2431 : 	beamdeploy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?beamdeploy@DigitalBrain@@IAEXXZ	; DigitalBrain::beamdeploy
	jmp	$LN45@DoProfile
$LN20@DoProfile:

; 2432 :    }
; 2433 :    else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Pbeambeam)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 11			; 0000000bH
	jne	SHORT $LN18@DoProfile

; 2434 :    {
; 2435 : 	 beambeam();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?beambeam@DigitalBrain@@IAEXXZ		; DigitalBrain::beambeam
	jmp	$LN45@DoProfile
$LN18@DoProfile:

; 2436 :    }
; 2437 :    else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Pwall)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 12			; 0000000cH
	jne	SHORT $LN16@DoProfile

; 2438 :    {
; 2439 : 	wall();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?wall@DigitalBrain@@IAEXXZ		; DigitalBrain::wall
	jmp	$LN45@DoProfile
$LN16@DoProfile:

; 2440 :    }
; 2441 :    else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Pgrinder)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 13			; 0000000dH
	jne	SHORT $LN14@DoProfile

; 2442 :    {
; 2443 : 	grinder();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?grinder@DigitalBrain@@IAEXXZ		; DigitalBrain::grinder
	jmp	$LN45@DoProfile
$LN14@DoProfile:

; 2444 :    }
; 2445 :    else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Pwideazimuth)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 14			; 0000000eH
	jne	SHORT $LN12@DoProfile

; 2446 :    {
; 2447 : 	wideazimuth();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?wideazimuth@DigitalBrain@@IAEXXZ	; DigitalBrain::wideazimuth
	jmp	$LN45@DoProfile
$LN12@DoProfile:

; 2448 :    }
; 2449 :    else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == Pshortazimuth)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 15			; 0000000fH
	jne	SHORT $LN10@DoProfile

; 2450 :    {
; 2451 : 	shortazimuth();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?shortazimuth@DigitalBrain@@IAEXXZ	; DigitalBrain::shortazimuth
	jmp	$LN45@DoProfile
$LN10@DoProfile:

; 2452 :    }
; 2453 :    else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == PwideLT)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 16			; 00000010H
	jne	SHORT $LN8@DoProfile

; 2454 :    {
; 2455 : 	wideLT();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?wideLT@DigitalBrain@@IAEXXZ		; DigitalBrain::wideLT
	jmp	SHORT $LN45@DoProfile
$LN8@DoProfile:

; 2456 :    }
; 2457 :    else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == PShortLT)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 17			; 00000011H
	jne	SHORT $LN6@DoProfile

; 2458 :    {
; 2459 : 	ShortLT();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ShortLT@DigitalBrain@@IAEXXZ		; DigitalBrain::ShortLT
	jmp	SHORT $LN45@DoProfile
$LN6@DoProfile:

; 2460 :    }
; 2461 :    else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == PDefensive)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 19			; 00000013H
	jne	SHORT $LN4@DoProfile

; 2462 :    {
; 2463 : 	Defensive();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Defensive@DigitalBrain@@IAEXXZ		; DigitalBrain::Defensive
	jmp	SHORT $LN45@DoProfile
$LN4@DoProfile:

; 2464 :    }
; 2465 :    else if (((AircraftClass*)flightLead)->DBrain()->bvrCurrProfile == PSweep)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+708]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+632], 18			; 00000012H
	jne	SHORT $LN45@DoProfile

; 2466 :    {
; 2467 : 	Sweep();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Sweep@DigitalBrain@@IAEXXZ		; DigitalBrain::Sweep
$LN45@DoProfile:

; 2468 :    }
; 2469 :    else assert (0);
; 2470 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DoProfile@DigitalBrain@@IAEXXZ ENDP			; DigitalBrain::DoProfile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\bvrengage.cpp
_TEXT	SEGMENT
_outnumbered$1 = -64					; size = 4
tv387 = -60						; size = 4
tv421 = -56						; size = 4
tv380 = -52						; size = 4
tv419 = -48						; size = 4
tv371 = -44						; size = 4
tv366 = -40						; size = 4
_ownstrength$2 = -36					; size = 4
_myCombatClass$ = -32					; size = 4
tv286 = -28						; size = 4
tv213 = -24						; size = 4
_targetstrength$ = -20					; size = 4
_myMissile$ = -16					; size = 4
_campBaseObj$3 = -12					; size = 4
_threatScore$ = -8					; size = 4
_this$ = -4						; size = 4
?ChoiceProfile@DigitalBrain@@IAEXXZ PROC		; DigitalBrain::ChoiceProfile
; _this$ = ecx

; 615  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 616  : 
; 617  : 	//Cobra here we pick the best profile
; 618  : 	float myMissile = maxAAWpnRange;//my missile range in feet

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+572]
	movss	DWORD PTR _myMissile$[ebp], xmm0

; 619  : 	int threatScore = 0;

	mov	DWORD PTR _threatScore$[ebp], 0

; 620  : 	int targetstrength = 0;

	mov	DWORD PTR _targetstrength$[ebp], 0

; 621  : 	int myCombatClass = self->CombatClass();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR [edx+144]
	call	eax
	mov	DWORD PTR _myCombatClass$[ebp], eax

; 622  : 	
; 623  : 	if (targetPtr)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	$LN14@ChoiceProf

; 624  : 		{
; 625  : 		CampBaseClass *campBaseObj;
; 626  : 		if (targetPtr->BaseData()->IsSim())

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN24@ChoiceProf

; 627  : 			campBaseObj = ((SimBaseClass*)targetPtr->BaseData())->GetCampaignObject();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _campBaseObj$3[ebp], eax

; 628  : 		else

	jmp	SHORT $LN23@ChoiceProf
$LN24@ChoiceProf:

; 629  : 			campBaseObj = (CampBaseClass *)targetPtr->BaseData();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR _campBaseObj$3[ebp], eax
$LN23@ChoiceProf:

; 630  : 
; 631  : 		if (campBaseObj)

	cmp	DWORD PTR _campBaseObj$3[ebp], 0
	je	SHORT $LN22@ChoiceProf

; 632  : 			targetstrength = campBaseObj->NumberOfComponents();

	mov	ecx, DWORD PTR _campBaseObj$3[ebp]
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	mov	DWORD PTR _targetstrength$[ebp], eax
$LN22@ChoiceProf:

; 633  : 
; 634  : 		int ownstrength = self->GetCampaignObject()->NumberOfComponents();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	mov	DWORD PTR _ownstrength$2[ebp], eax

; 635  : 		//do I have an inferior missile?
; 636  : 		if (myMissile < 10*NM_TO_FT)

	movss	xmm0, DWORD PTR __real@476d5a1c
	comiss	xmm0, DWORD PTR _myMissile$[ebp]
	jbe	SHORT $LN21@ChoiceProf

; 637  : 			 threatScore += 20;

	mov	eax, DWORD PTR _threatScore$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _threatScore$[ebp], eax
$LN21@ChoiceProf:

; 638  : 
; 639  : 		if (myCombatClass == 7 && targetPtr->localData->range > myMissile)

	cmp	DWORD PTR _myCombatClass$[ebp], 7
	jne	SHORT $LN20@ChoiceProf
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR [eax+44]
	comiss	xmm0, DWORD PTR _myMissile$[ebp]
	jbe	SHORT $LN20@ChoiceProf

; 640  : 			threatScore +=60;

	mov	ecx, DWORD PTR _threatScore$[ebp]
	add	ecx, 60					; 0000003cH
	mov	DWORD PTR _threatScore$[ebp], ecx
$LN20@ChoiceProf:

; 641  : 
; 642  : 		//who has the numerical advantage?
; 643  : 		int outnumbered = 0;

	mov	DWORD PTR _outnumbered$1[ebp], 0

; 644  : 		if (targetstrength > ownstrength) 

	mov	edx, DWORD PTR _targetstrength$[ebp]
	cmp	edx, DWORD PTR _ownstrength$2[ebp]
	jle	SHORT $LN19@ChoiceProf

; 645  : 			threatScore += 30;

	mov	eax, DWORD PTR _threatScore$[ebp]
	add	eax, 30					; 0000001eH
	mov	DWORD PTR _threatScore$[ebp], eax
$LN19@ChoiceProf:

; 646  : 		//who has height advantage?
; 647  : 		if (targetPtr->BaseData()->ZPos()< self->ZPos())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv366[ebp]
	movss	xmm0, DWORD PTR tv366[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	movss	DWORD PTR tv419[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv371[ebp]
	movss	xmm0, DWORD PTR tv371[ebp]
	movss	xmm1, DWORD PTR tv419[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN18@ChoiceProf

; 648  : 			threatScore += 5;

	mov	eax, DWORD PTR _threatScore$[ebp]
	add	eax, 5
	mov	DWORD PTR _threatScore$[ebp], eax
$LN18@ChoiceProf:

; 649  : 		//who has speed advantage
; 650  : 		if (((AircraftClass *)targetPtr->BaseData())->GetKias() > self->GetKias())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv213[ebp], eax
	mov	edx, DWORD PTR tv213[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv213[ebp]
	mov	edx, DWORD PTR [eax+224]
	call	edx
	fstp	DWORD PTR tv380[ebp]
	movss	xmm0, DWORD PTR tv380[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+56]
	mov	edx, DWORD PTR [eax+224]
	movss	DWORD PTR tv421[ebp], xmm0
	call	edx
	fstp	DWORD PTR tv387[ebp]
	movss	xmm0, DWORD PTR tv421[ebp]
	comiss	xmm0, DWORD PTR tv387[ebp]
	jbe	SHORT $LN17@ChoiceProf

; 651  : 			threatScore += 5;

	mov	eax, DWORD PTR _threatScore$[ebp]
	add	eax, 5
	mov	DWORD PTR _threatScore$[ebp], eax
$LN17@ChoiceProf:

; 652  : 		//who has positional advantage
; 653  : 		//Him -> Me ->
; 654  : 		if (targetPtr->localData->ataFrom < 90*DTR && targetPtr->localData->ata > 90*DTR)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR __real@3fc90fd9
	comiss	xmm0, DWORD PTR [eax+4]
	jbe	SHORT $LN16@ChoiceProf
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR __real@3fc90fd9
	jbe	SHORT $LN16@ChoiceProf

; 655  : 			threatScore += 20;

	mov	ecx, DWORD PTR _threatScore$[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR _threatScore$[ebp], ecx
$LN16@ChoiceProf:

; 656  : 		//is he out of my missile range?
; 657  : 		if (targetPtr->localData->range > myMissile)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+12]
	movss	xmm0, DWORD PTR [ecx+44]
	comiss	xmm0, DWORD PTR _myMissile$[ebp]
	jbe	SHORT $LN15@ChoiceProf

; 658  : 			threatScore += 10;

	mov	edx, DWORD PTR _threatScore$[ebp]
	add	edx, 10					; 0000000aH
	mov	DWORD PTR _threatScore$[ebp], edx
$LN15@ChoiceProf:

; 659  : 		//special cases
; 660  : 		//Me -> Him ->
; 661  : 		if (targetPtr->localData->ataFrom > 90*DTR && targetPtr->localData->ata < 90*DTR)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR [edx+4]
	comiss	xmm0, DWORD PTR __real@3fc90fd9
	jbe	SHORT $LN14@ChoiceProf
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR __real@3fc90fd9
	comiss	xmm0, DWORD PTR [edx]
	jbe	SHORT $LN14@ChoiceProf

; 662  : 			threatScore = 5; //we go offensive

	mov	DWORD PTR _threatScore$[ebp], 5
$LN14@ChoiceProf:

; 663  : 		}
; 664  : 
; 665  : 		missionType = ((UnitClass*)(self->GetCampaignObject()))->GetUnitMission();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR tv286[ebp], eax
	mov	ecx, DWORD PTR tv286[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv286[ebp]
	mov	eax, DWORD PTR [edx+664]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+284], eax

; 666  : 
; 667  : 		if (missionType > 10 && !g_bUseAggresiveIncompleteA2G && (IsSetATC(HasAGWeapon)|| !missionComplete))

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+284], 10			; 0000000aH
	jle	SHORT $LN13@ChoiceProf
	movzx	eax, BYTE PTR ?g_bUseAggresiveIncompleteA2G@@3_NA ; g_bUseAggresiveIncompleteA2G
	test	eax, eax
	jne	SHORT $LN13@ChoiceProf
	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetATC@DigitalBrain@@QAEHH@Z		; DigitalBrain::IsSetATC
	test	eax, eax
	jne	SHORT $LN12@ChoiceProf
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+292], 0
	jne	SHORT $LN13@ChoiceProf
$LN12@ChoiceProf:

; 668  : 			{
; 669  : 			//We are defensive to protect ourselves
; 670  : 			bvrCurrProfile = PDefensive;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+632], 19			; 00000013H

; 671  : 			}
; 672  : 		else //A/A Mission or A/A Capable  

	jmp	$LN1@ChoiceProf
$LN13@ChoiceProf:

; 673  : 			{
; 674  : 			//We will chose a profile based on the situation
; 675  : 			//Defensive Positions
; 676  : 			if (threatScore >=60)

	cmp	DWORD PTR _threatScore$[ebp], 60	; 0000003cH
	jl	SHORT $LN10@ChoiceProf

; 677  : 				{
; 678  : 					bvrCurrProfile = PDefensive;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+632], 19			; 00000013H
	jmp	SHORT $LN1@ChoiceProf
$LN10@ChoiceProf:

; 679  : 				}
; 680  : 			else if (threatScore < 60 && threatScore >=50)

	cmp	DWORD PTR _threatScore$[ebp], 60	; 0000003cH
	jge	SHORT $LN8@ChoiceProf
	cmp	DWORD PTR _threatScore$[ebp], 50	; 00000032H
	jl	SHORT $LN8@ChoiceProf

; 681  : 				{
; 682  : 					bvrCurrProfile = Plevel3c;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+632], 9
	jmp	SHORT $LN1@ChoiceProf
$LN8@ChoiceProf:

; 683  : 				}
; 684  : 			else if (threatScore < 50 && threatScore >=30)

	cmp	DWORD PTR _threatScore$[ebp], 50	; 00000032H
	jge	SHORT $LN6@ChoiceProf
	cmp	DWORD PTR _threatScore$[ebp], 30	; 0000001eH
	jl	SHORT $LN6@ChoiceProf

; 685  : 				{
; 686  : 					bvrCurrProfile = Plevel2c;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+632], 6
	jmp	SHORT $LN1@ChoiceProf
$LN6@ChoiceProf:

; 687  : 				}
; 688  : 			else if (threatScore < 30 && threatScore >=20)

	cmp	DWORD PTR _threatScore$[ebp], 30	; 0000001eH
	jge	SHORT $LN4@ChoiceProf
	cmp	DWORD PTR _threatScore$[ebp], 20	; 00000014H
	jl	SHORT $LN4@ChoiceProf

; 689  : 				{
; 690  : 					bvrCurrProfile = Plevel3b;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+632], 8
	jmp	SHORT $LN1@ChoiceProf
$LN4@ChoiceProf:

; 691  : 				}
; 692  : 			else if (threatScore < 20 && threatScore >=10)

	cmp	DWORD PTR _threatScore$[ebp], 20	; 00000014H
	jge	SHORT $LN2@ChoiceProf
	cmp	DWORD PTR _threatScore$[ebp], 10	; 0000000aH
	jl	SHORT $LN2@ChoiceProf

; 693  : 				{
; 694  : 					bvrCurrProfile = Pgrinder;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+632], 13			; 0000000dH

; 695  : 				}
; 696  : 			else

	jmp	SHORT $LN1@ChoiceProf
$LN2@ChoiceProf:

; 697  : 				{
; 698  : 					bvrCurrProfile = Pwall;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+632], 12			; 0000000cH
$LN1@ChoiceProf:

; 699  : 				}
; 700  : 
; 701  : 			}//end
; 702  : //Cobra log of scores and profiles
; 703  : 	//FILE *deb;
; 704  : 	//deb = fopen("c:\\microprose\\falcon4\\bvr.txt", "a+");
; 705  : 	//fprintf(deb, "Bvrscore %2d  Bvrprofile = %3d\n\n", threatScore, bvrCurrProfile);   
; 706  : 	//fclose(deb);
; 707  : 
; 708  : 
; 709  : 
; 710  : /*
; 711  : 		 Pnone,
; 712  : 
; 713  :   AGGRESIVE MISSILE SUPERIORITY
; 714  : 		 Plevel1a,
; 715  : 		 Plevel2a,
; 716  : 	     Plevel3a,
; 717  : 
; 718  :   DEFENSIVE MISSILE SUPERIORITY
; 719  : 		 Plevel1b,
; 720  : 	     Plevel2b,
; 721  : 	     Plevel3b,
; 722  : 
; 723  :   INFERIOR MISSILES
; 724  : 		 Plevel1c,
; 725  : 	     Plevel2c,
; 726  : 	     Plevel3c,
; 727  :   OTHER
; 728  : 	     Pbeamdeploy,
; 729  : 	     Pbeambeam,
; 730  : 	     Pwall,
; 731  : 	     Pgrinder,
; 732  : 	     Pwideazimuth,
; 733  : 	     Pshortazimuth,
; 734  : 	     PwideLT,
; 735  : 	     PShortLT,
; 736  : 		 PDefensive*/
; 737  : 
; 738  : 	/*switch (((UnitClass*)(self->GetCampaignObject()))->GetUnitMission())
; 739  : 	{
; 740  : // medium agresiveness...balanced efford to kill and to survive
; 741  : // lead trail and grinding technicks when superoir missiles
; 742  : 		case AMIS_BARCAP:
; 743  : 		case AMIS_BARCAP2:
; 744  : 		case AMIS_HAVCAP:    
; 745  : 		case AMIS_TARCAP:    
; 746  : 		case AMIS_RESCAP:    
; 747  : 		case AMIS_AMBUSHCAP:
; 748  : 		{
; 749  : 			if (calcThreatScore == 0)
; 750  : 			{
; 751  : 				if (Isflightlead) AiSendCommand (self, FalconWingmanMsg::WMSpread, AiFlight);
; 752  : 				int choice = rand()% (SkillLevel()+1);
; 753  : 				if (choice == 0) bvrCurrProfile = Pwall;
; 754  : 				else if (choice == 1) bvrCurrProfile = PwideLT;
; 755  : 				else  bvrCurrProfile = Pgrinder;	
; 756  : 			}
; 757  : 			else 
; 758  : 			{
; 759  : 				if (Isflightlead)
; 760  : 					AiSendCommand (self, FalconWingmanMsg::WMResCell, AiFlight);
; 761  : 				if (calcThreatScore == 1)
; 762  : 					{
; 763  : 
; 764  : 					}
; 765  : 				else
; 766  : 					{
; 767  : 
; 768  : 					}
; 769  : 				if (choice == 0) bvrCurrProfile = Plevel1c;
; 770  : 				else if (choice == 1) bvrCurrProfile = Plevel2c;
; 771  : 				else if (choice == 2) bvrCurrProfile = Plevel3c;
; 772  : 				else if (choice == 3) bvrCurrProfile = PwideLT;
; 773  : 				else if (choice == 4) bvrCurrProfile = PShortLT;
; 774  : 				else if (choice == 5) bvrCurrProfile = Pwideazimuth;
; 775  : 				else if (choice == 6) bvrCurrProfile = Pshortazimuth;
; 776  : 				else if (choice == 7) bvrCurrProfile = Pwall;
; 777  : 				else if (choice == 8) bvrCurrProfile = Pbeamdeploy;
; 778  : 				else if (choice == 9) bvrCurrProfile = Pbeambeam;
; 779  : 				else bvrCurrProfile = Pbeambeam;
; 780  : 			}
; 781  : 		}
; 782  : 		break;
; 783  : // extreemly aggresive missions...kill at all cost and move forward    
; 784  : 		case AMIS_ALERT:	
; 785  : 		case AMIS_INTERCEPT: 
; 786  : 		{
; 787  : 			if (!outranged)
; 788  : 			{
; 789  : 				if (Isflightlead)AiSendCommand (self, FalconWingmanMsg::WMFluidFour, AiFlight); 
; 790  : 				int choice = rand()% (SkillLevel()+1);
; 791  : 				if (choice == 0) bvrCurrProfile = Plevel1a;
; 792  : 				else if (choice == 1) bvrCurrProfile = Plevel2a;
; 793  : 				else bvrCurrProfile = Plevel3a;
; 794  : 			}
; 795  : 			else
; 796  : 			{
; 797  : 				if (Isflightlead) AiSendCommand (self, FalconWingmanMsg::WMResCell, AiFlight);
; 798  : 				int choice = rand()% (SkillLevel()+1);
; 799  : 				if (choice == 0) bvrCurrProfile = Plevel1c;
; 800  : 				else if (choice == 1) bvrCurrProfile = Plevel2c;
; 801  : 				else if (choice == 2) bvrCurrProfile = Pbeamdeploy;
; 802  : 				else if (choice == 3) bvrCurrProfile = Pshortazimuth;
; 803  : 				else if (choice == 4) bvrCurrProfile = PwideLT;
; 804  : 				else bvrCurrProfile = Plevel3c;
; 805  : 			}
; 806  : 		}
; 807  : 		break;
; 808  : 		case AMIS_SWEEP: 
; 809  : 		case AMIS_ESCORT: // it's a consideratino to stay on time here to protect the pacage
; 810  : 		{
; 811  : 			if (!outranged)
; 812  : 			{
; 813  : 				if (Isflightlead)AiSendCommand (self, FalconWingmanMsg::WMFluidFour, AiFlight); 
; 814  : 				int choice = rand()% (SkillLevel()+1);
; 815  : 				if (choice == 0) bvrCurrProfile = Plevel2a;
; 816  : 				else if (choice == 1) bvrCurrProfile = PSweep;
; 817  : 				else bvrCurrProfile = PSweep;
; 818  : 			}
; 819  : 			else
; 820  : 			{
; 821  : 				if (Isflightlead) AiSendCommand (self, FalconWingmanMsg::WMResCell, AiFlight);
; 822  : 				int choice = rand()% (SkillLevel()+1);
; 823  : 				choice += rand()%4;
; 824  : 				if (choice == 0) bvrCurrProfile = Plevel1c;
; 825  : 				else if (choice == 1) bvrCurrProfile = Plevel2c;
; 826  : 				else if (choice == 2) bvrCurrProfile = Pbeamdeploy;
; 827  : 				else if (choice == 3) bvrCurrProfile = Pshortazimuth;
; 828  : 				else if (choice == 4) bvrCurrProfile = PShortLT;
; 829  : 				else if (choice == 5) bvrCurrProfile = Pwideazimuth;
; 830  : 				else if (choice == 6) bvrCurrProfile = Plevel3c;
; 831  : 				else if (choice == 7) bvrCurrProfile = Pwall;
; 832  : 				else if (choice == 8) bvrCurrProfile = Pbeamdeploy;
; 833  : 				else if (choice == 9) bvrCurrProfile = Pbeambeam;
; 834  : 				else bvrCurrProfile = Plevel3c;
; 835  : 			}
; 836  : 		}break;
; 837  : 
; 838  : // thiese are mission with killing a-a dudes as second priority
; 839  : // so try to avoid, but be aggresive if the bandits wanna play
; 840  : 		case AMIS_SEADSTRIKE:
; 841  : 		case AMIS_SEADESCORT:
; 842  : 		case AMIS_OCASTRIKE:
; 843  : 		case AMIS_INTSTRIKE:
; 844  : 		case AMIS_STRIKE:
; 845  : 		case AMIS_DEEPSTRIKE:
; 846  : 		case AMIS_CAS:
; 847  : 		case AMIS_ONCALLCAS: 	
; 848  : 		case AMIS_PRPLANCAS: 	
; 849  : 		case AMIS_SAD:			
; 850  : 		case AMIS_INT:
; 851  : 		case AMIS_BAI:	
; 852  : 		case AMIS_ASW:
; 853  : 		case AMIS_ASHIP:
; 854  : 		case AMIS_RECON:
; 855  : 		case AMIS_BDA:
; 856  : 		case AMIS_PATROL:
; 857  : 		case AMIS_RECONPATROL:
; 858  : 		{
; 859  : 		//Cobra we are modifying here to allow A/G flights to attack
; 860  : 		//this works with prior new BVR code for A/G flights
; 861  : 			if (!IsSetATC(HasAGWeapon) || g_bUseAggresiveIncompleteA2G || (!g_bUseAggresiveIncompleteA2G && missionComplete))
; 862  : 			{
; 863  : 				if (!outranged)
; 864  : 					{
; 865  : 					if (Isflightlead) AiSendCommand (self, FalconWingmanMsg::WMBox, AiFlight);
; 866  : 					int choice = rand()%3;
; 867  : 					if (choice == 0) bvrCurrProfile =  Plevel1b;
; 868  : 					else if (choice == 1) bvrCurrProfile = Plevel2b;
; 869  : 					else  bvrCurrProfile = Plevel3b;
; 870  : 					}
; 871  : 				else
; 872  : 					{
; 873  : 					if (Isflightlead) AiSendCommand (self, FalconWingmanMsg::WMResCell, AiFlight);
; 874  : 					int choice = rand()%11;
; 875  : 					if (choice == 0) bvrCurrProfile = Plevel1c;
; 876  : 					else if (choice == 1) bvrCurrProfile = Plevel2c;
; 877  : 					else if (choice == 2) bvrCurrProfile = Pbeamdeploy;
; 878  : 					else if (choice == 3) bvrCurrProfile = Pshortazimuth;
; 879  : 					else if (choice == 4) bvrCurrProfile = PShortLT;
; 880  : 					else if (choice == 5) bvrCurrProfile = Pwideazimuth;
; 881  : 					else if (choice == 6) bvrCurrProfile = Plevel3c;
; 882  : 					else if (choice == 7) bvrCurrProfile = Pwall;
; 883  : 					else if (choice == 8) bvrCurrProfile = Pbeamdeploy;
; 884  : 					else if (choice == 9) bvrCurrProfile = Pbeambeam;
; 885  : 					else bvrCurrProfile = Plevel3c;
; 886  : 					}
; 887  : 			}
; 888  : 			else
; 889  : 			{
; 890  : 				if (Isflightlead)
; 891  : 					{
; 892  : 					AiSendCommand (self, FalconWingmanMsg::WMBox, AiFlight);
; 893  : 					}
; 894  : 				bvrCurrProfile = PDefensive;
; 895  : 			}
; 896  : 		}
; 897  : 		break;
; 898  : 	default:
; 899  : 		{
; 900  : 		bvrCurrProfile = PDefensive;
; 901  : 		break;
; 902  : 		}
; 903  : 	break;
; 904  : 	}*/
; 905  : /////////////TEST TEST TEST//////////////////
; 906  : //	static BVRProfileType test = Plevel1a;
; 907  : //	bvrCurrProfile = test;
; 908  : /////////////TEST TEST TEST//////////////////
; 909  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ChoiceProfile@DigitalBrain@@IAEXXZ ENDP		; DigitalBrain::ChoiceProfile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbrain.h
;	COMDAT ?SkillLevel@BaseBrain@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SkillLevel@BaseBrain@@QAEHXZ PROC			; BaseBrain::SkillLevel, COMDAT
; _this$ = ecx

; 40   :       int SkillLevel(void) {return skillLevel;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?SkillLevel@BaseBrain@@QAEHXZ ENDP			; BaseBrain::SkillLevel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?mlSinCos@@YAXPAUmlTrig@@M@Z
_TEXT	SEGMENT
_trig$ = 8						; size = 4
_angle$ = 12						; size = 4
?mlSinCos@@YAXPAUmlTrig@@M@Z PROC			; mlSinCos, COMDAT

; 12   : {

	push	ebp
	mov	ebp, esp

; 13   : #if defined(_MSC_VER)
; 14   : 	__asm 
; 15   : 	{
; 16   : 		__asm	mov     ecx, trig;

	mov	ecx, DWORD PTR _trig$[ebp]

; 17   : 		__asm	fld     dword ptr [angle];

	fld	DWORD PTR _angle$[ebp]

; 18   : 		__asm	fsincos;

	fsincos

; 19   : 		__asm	fstp    dword ptr [ecx]trig.cos;

	fstp	DWORD PTR [ecx+4]

; 20   : 		__asm	fstp    dword ptr [ecx]trig.sin;

	fstp	DWORD PTR [ecx]

; 21   : 	}
; 22   : #else
; 23   : 	trig->sin = (Float32)sin(angle);
; 24   : 	trig->cos = (Float32)cos(angle);
; 25   : #endif
; 26   : }

	pop	ebp
	ret	0
?mlSinCos@@YAXPAUmlTrig@@M@Z ENDP			; mlSinCos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsPlayer@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPlayer@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsPlayer, COMDAT
; _this$ = ecx

; 113  : 	int IsPlayer (void)							{ return IsSetFalcFlag(FEC_HASPLAYERS); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetFalcFlag@FalconEntity@@QAEHH@Z	; FalconEntity::IsSetFalcFlag
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPlayer@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsPlayer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSetFalcFlag@FalconEntity@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z PROC		; FalconEntity::IsSetFalcFlag, COMDAT
; _this$ = ecx

; 112  : 	int IsSetFalcFlag (int flag)				{ return falconFlags & flag; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+136]
	and	eax, DWORD PTR _flag$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z ENDP		; FalconEntity::IsSetFalcFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSim@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsSim@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsSim, COMDAT
; _this$ = ecx

; 103  : 		{return (falconType & FalconSimEntity) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	and	ecx, 2
	je	SHORT $LN3@IsSim
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSim
$LN3@IsSim:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSim:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSim@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Yaw@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Yaw@VuEntity@@QBEMXZ PROC				; VuEntity::Yaw, COMDAT
; _this$ = ecx

; 164  : 	SM_SCALAR Yaw() const { return orient_.yaw_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?Yaw@VuEntity@@QBEMXZ ENDP				; VuEntity::Yaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YDelta@VuEntity@@QBEMXZ PROC				; VuEntity::YDelta, COMDAT
; _this$ = ecx

; 162  : 	SM_SCALAR YDelta() const { return pos_.dy_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?YDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::YDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XDelta@VuEntity@@QBEMXZ PROC				; VuEntity::XDelta, COMDAT
; _this$ = ecx

; 161  : 	SM_SCALAR XDelta() const { return pos_.dx_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?XDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::XDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Type@VuEntity@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@VuEntity@@QBEGXZ PROC				; VuEntity::Type, COMDAT
; _this$ = ecx

; 154  : 	ushort Type() const       { return share_.entityType_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@VuEntity@@QBEGXZ ENDP				; VuEntity::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
