; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\DIGI\autopilot.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
_DATA	SEGMENT
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	ORG $+4
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_DATA	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?ZDelta@VuEntity@@QBEMXZ			; VuEntity::ZDelta
PUBLIC	?Yaw@VuEntity@@QBEMXZ				; VuEntity::Yaw
PUBLIC	?Pitch@VuEntity@@QBEMXZ				; VuEntity::Pitch
PUBLIC	?Roll@VuEntity@@QBEMXZ				; VuEntity::Roll
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	?checked_atan2@@YANNN@Z				; checked_atan2
PUBLIC	?PIDLoop@DigitalBrain@@QAEMMMMMMPAM0MM_N@Z	; DigitalBrain::PIDLoop
PUBLIC	?ThreeAxisAP@DigitalBrain@@QAEXXZ		; DigitalBrain::ThreeAxisAP
PUBLIC	?WaypointAP@DigitalBrain@@QAEXXZ		; DigitalBrain::WaypointAP
PUBLIC	?LantirnAP@DigitalBrain@@QAEXXZ			; DigitalBrain::LantirnAP
PUBLIC	?RealisticAP@DigitalBrain@@QAEXXZ		; DigitalBrain::RealisticAP
PUBLIC	?HDGSel@DigitalBrain@@QAEXXZ			; DigitalBrain::HDGSel
PUBLIC	?PitchRollHold@DigitalBrain@@QAEXXZ		; DigitalBrain::PitchRollHold
PUBLIC	?RollHold@DigitalBrain@@QAEXXZ			; DigitalBrain::RollHold
PUBLIC	?PitchHold@DigitalBrain@@QAEXXZ			; DigitalBrain::PitchHold
PUBLIC	?AltHold@DigitalBrain@@QAEXXZ			; DigitalBrain::AltHold
PUBLIC	?FollowWP@DigitalBrain@@QAEXXZ			; DigitalBrain::FollowWP
PUBLIC	?CheckForTurn@DigitalBrain@@QAEXXZ		; DigitalBrain::CheckForTurn
PUBLIC	?APAutoDisconnect@DigitalBrain@@QAE_NXZ		; DigitalBrain::APAutoDisconnect
PUBLIC	?CheckAPParameters@DigitalBrain@@QAEHXZ		; DigitalBrain::CheckAPParameters
PUBLIC	?AcceptManual@DigitalBrain@@QAEXXZ		; DigitalBrain::AcceptManual
PUBLIC	?GetPID_K@AirframeClass@@QAEMXZ			; AirframeClass::GetPID_K
PUBLIC	?GetPID_KI@AirframeClass@@QAEMXZ		; AirframeClass::GetPID_KI
PUBLIC	?GetPID_KD@AirframeClass@@QAEMXZ		; AirframeClass::GetPID_KD
PUBLIC	?GetTFR_LimitMX@AirframeClass@@QAE_NXZ		; AirframeClass::GetTFR_LimitMX
PUBLIC	?GetTFR_Corner@AirframeClass@@QAEMXZ		; AirframeClass::GetTFR_Corner
PUBLIC	?GetTFR_Gain@AirframeClass@@QAEMXZ		; AirframeClass::GetTFR_Gain
PUBLIC	?GetEVA_Gain@AirframeClass@@QAEMXZ		; AirframeClass::GetEVA_Gain
PUBLIC	?GetTFR_MaxRoll@AirframeClass@@QAEMXZ		; AirframeClass::GetTFR_MaxRoll
PUBLIC	?GetTFR_GammaCorrMult@AirframeClass@@QAEMXZ	; AirframeClass::GetTFR_GammaCorrMult
PUBLIC	?IsEngineFlag@AirframeClass@@QAEHW4EngineFlags@1@@Z ; AirframeClass::IsEngineFlag
PUBLIC	?SetMaxRoll@AirframeClass@@QAEXM@Z		; AirframeClass::SetMaxRoll
PUBLIC	?MaxGs@AirframeClass@@QAEMXZ			; AirframeClass::MaxGs
PUBLIC	?IsSet@AirframeClass@@QBEHH@Z			; AirframeClass::IsSet
PUBLIC	?GetSimpleMode@AirframeClass@@QAEHXZ		; AirframeClass::GetSimpleMode
PUBLIC	?GetINSLatDrift@AircraftClass@@QAEMXZ		; AircraftClass::GetINSLatDrift
PUBLIC	?GetINSLongDrift@AircraftClass@@QAEMXZ		; AircraftClass::GetINSLongDrift
PUBLIC	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
PUBLIC	?IsOn@AircraftClass@@QAEHW4APFlags@1@@Z		; AircraftClass::IsOn
PUBLIC	?SetAPFlag@AircraftClass@@QAEXW4APFlags@1@@Z	; AircraftClass::SetAPFlag
PUBLIC	?ClearAPFlag@AircraftClass@@QAEXW4APFlags@1@@Z	; AircraftClass::ClearAPFlag
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?GetTFRAlt@LantirnClass@@QAEHXZ			; LantirnClass::GetTFRAlt
PUBLIC	?GetTFRMode@LantirnClass@@QAE?AW4TfrMode@1@XZ	; LantirnClass::GetTFRMode
PUBLIC	?GetHoldHeight@LantirnClass@@QAEMXZ		; LantirnClass::GetHoldHeight
PUBLIC	?GetStptMode@FireControlComputer@@QAE?AW4FCCStptMode@1@XZ ; FireControlComputer::GetStptMode
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3ac49ba6
PUBLIC	__real@3b23d70a
PUBLIC	__real@3ba3d70a
PUBLIC	__real@3c75c28f
PUBLIC	__real@3c8efa34
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3db2b8c1
PUBLIC	__real@3e800000
PUBLIC	__real@3f000000
PUBLIC	__real@3f490fd9
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f800000
PUBLIC	__real@3fee666666666666
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@40000000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@40200000
PUBLIC	__real@40490fd9
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@40b00000
PUBLIC	__real@40c90fd9
PUBLIC	__real@40d00000
PUBLIC	__real@41200000
PUBLIC	__real@41700000
PUBLIC	__real@41e80000
PUBLIC	__real@41f00000
PUBLIC	__real@41f40000
PUBLIC	__real@42480000
PUBLIC	__real@42652ee1
PUBLIC	__real@4270cccd
PUBLIC	__real@42c80000
PUBLIC	__real@43340000
PUBLIC	__real@433e0000
PUBLIC	__real@43960000
PUBLIC	__real@43af0000
PUBLIC	__real@43b40000
PUBLIC	__real@471c4000
PUBLIC	__real@8000000000000000
PUBLIC	__real@bd4ccccd
PUBLIC	__real@bdb2b8c1
PUBLIC	__real@bf000000
PUBLIC	__real@bf800000
PUBLIC	__real@bff921fb54442d18
PUBLIC	__real@c0000000
PUBLIC	__real@c0490fd9
PUBLIC	__real@c1e80000
PUBLIC	__real@c1f00000
PUBLIC	__real@c1f40000
PUBLIC	__real@c270cccd
PUBLIC	__real@c3340000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_atan:PROC
EXTRN	_fabs:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?GetLocation@WayPointClass@@QBEXPAM00@Z:PROC	; WayPointClass::GetLocation
EXTRN	?PullUp@DigitalBrain@@IAEXXZ:PROC		; DigitalBrain::PullUp
EXTRN	?Loiter@DigitalBrain@@IAEXXZ:PROC		; DigitalBrain::Loiter
EXTRN	?GammaHold@DigitalBrain@@IAEXM@Z:PROC		; DigitalBrain::GammaHold
EXTRN	?AltitudeHold@DigitalBrain@@IAEHM@Z:PROC	; DigitalBrain::AltitudeHold
EXTRN	?GoToCurrentWaypoint@DigitalBrain@@IAEXXZ:PROC	; DigitalBrain::GoToCurrentWaypoint
EXTRN	?SimpleGoToCurrentWaypoint@DigitalBrain@@IAEXXZ:PROC ; DigitalBrain::SimpleGoToCurrentWaypoint
EXTRN	?GroundCheck@DigitalBrain@@IAEXXZ:PROC		; DigitalBrain::GroundCheck
EXTRN	?SetPstick@DigitalBrain@@IAEMMMH@Z:PROC		; DigitalBrain::SetPstick
EXTRN	?SetRstick@DigitalBrain@@IAEMM@Z:PROC		; DigitalBrain::SetRstick
EXTRN	?SetYpedal@DigitalBrain@@IAEMM@Z:PROC		; DigitalBrain::SetYpedal
EXTRN	?SetMaxRoll@DigitalBrain@@IAEXM@Z:PROC		; DigitalBrain::SetMaxRoll
EXTRN	?SetMaxRollDelta@DigitalBrain@@IAEXM@Z:PROC	; DigitalBrain::SetMaxRollDelta
EXTRN	?SetSimpleMode@AirframeClass@@QAEXH@Z:PROC	; AirframeClass::SetSimpleMode
EXTRN	?SetAutopilot@AircraftClass@@QAEXW4AutoPilotType@1@@Z:PROC ; AircraftClass::SetAutopilot
EXTRN	?SetNewPitch@AircraftClass@@QAEXXZ:PROC		; AircraftClass::SetNewPitch
EXTRN	?HasPower@AircraftClass@@QAEHW4AvionicsPowerFlags@1@@Z:PROC ; AircraftClass::HasPower
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?GetGLimit@LantirnClass@@QAEMXZ:PROC		; LantirnClass::GetGLimit
EXTRN	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z:PROC ; FackClass::GetFault
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	?GetValue@CPHsi@@QAEMW4HSIValues@1@@Z:PROC	; CPHsi::GetValue
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?SimLibMajorFrameTime@@3MA:DWORD		; SimLibMajorFrameTime
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?theLantirn@@3PAVLantirnClass@@A:DWORD		; theLantirn
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?UserStickInputs@@3VPilotInputs@@A:BYTE		; UserStickInputs
EXTRN	?g_bRealisticAvionics@@3_NA:BYTE		; g_bRealisticAvionics
EXTRN	?g_bINS@@3_NA:BYTE				; g_bINS
EXTRN	?g_bTFRFixes@@3_NA:BYTE				; g_bTFRFixes
EXTRN	?g_bCalibrateTFR_PitchCtrl@@3_NA:BYTE		; g_bCalibrateTFR_PitchCtrl
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c3340000
CONST	SEGMENT
__real@c3340000 DD 0c3340000r			; -180
CONST	ENDS
;	COMDAT __real@c270cccd
CONST	SEGMENT
__real@c270cccd DD 0c270cccdr			; -60.2
CONST	ENDS
;	COMDAT __real@c1f40000
CONST	SEGMENT
__real@c1f40000 DD 0c1f40000r			; -30.5
CONST	ENDS
;	COMDAT __real@c1f00000
CONST	SEGMENT
__real@c1f00000 DD 0c1f00000r			; -30
CONST	ENDS
;	COMDAT __real@c1e80000
CONST	SEGMENT
__real@c1e80000 DD 0c1e80000r			; -29
CONST	ENDS
;	COMDAT __real@c0490fd9
CONST	SEGMENT
__real@c0490fd9 DD 0c0490fd9r			; -3.14159
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bff921fb54442d18
CONST	SEGMENT
__real@bff921fb54442d18 DQ 0bff921fb54442d18r	; -1.5708
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@bdb2b8c1
CONST	SEGMENT
__real@bdb2b8c1 DD 0bdb2b8c1r			; -0.0872665
CONST	ENDS
;	COMDAT __real@bd4ccccd
CONST	SEGMENT
__real@bd4ccccd DD 0bd4ccccdr			; -0.05
CONST	ENDS
;	COMDAT __real@8000000000000000
CONST	SEGMENT
__real@8000000000000000 DQ 08000000000000000r	; -0
CONST	ENDS
;	COMDAT __real@471c4000
CONST	SEGMENT
__real@471c4000 DD 0471c4000r			; 40000
CONST	ENDS
;	COMDAT __real@43b40000
CONST	SEGMENT
__real@43b40000 DD 043b40000r			; 360
CONST	ENDS
;	COMDAT __real@43af0000
CONST	SEGMENT
__real@43af0000 DD 043af0000r			; 350
CONST	ENDS
;	COMDAT __real@43960000
CONST	SEGMENT
__real@43960000 DD 043960000r			; 300
CONST	ENDS
;	COMDAT __real@433e0000
CONST	SEGMENT
__real@433e0000 DD 0433e0000r			; 190
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@4270cccd
CONST	SEGMENT
__real@4270cccd DD 04270cccdr			; 60.2
CONST	ENDS
;	COMDAT __real@42652ee1
CONST	SEGMENT
__real@42652ee1 DD 042652ee1r			; 57.2958
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@41f40000
CONST	SEGMENT
__real@41f40000 DD 041f40000r			; 30.5
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@41e80000
CONST	SEGMENT
__real@41e80000 DD 041e80000r			; 29
CONST	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40d00000
CONST	SEGMENT
__real@40d00000 DD 040d00000r			; 6.5
CONST	ENDS
;	COMDAT __real@40c90fd9
CONST	SEGMENT
__real@40c90fd9 DD 040c90fd9r			; 6.28318
CONST	ENDS
;	COMDAT __real@40b00000
CONST	SEGMENT
__real@40b00000 DD 040b00000r			; 5.5
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40490fd9
CONST	SEGMENT
__real@40490fd9 DD 040490fd9r			; 3.14159
CONST	ENDS
;	COMDAT __real@40200000
CONST	SEGMENT
__real@40200000 DD 040200000r			; 2.5
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3fee666666666666
CONST	SEGMENT
__real@3fee666666666666 DQ 03fee666666666666r	; 0.95
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f490fd9
CONST	SEGMENT
__real@3f490fd9 DD 03f490fd9r			; 0.785398
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3db2b8c1
CONST	SEGMENT
__real@3db2b8c1 DD 03db2b8c1r			; 0.0872665
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@3c75c28f
CONST	SEGMENT
__real@3c75c28f DD 03c75c28fr			; 0.015
CONST	ENDS
;	COMDAT __real@3ba3d70a
CONST	SEGMENT
__real@3ba3d70a DD 03ba3d70ar			; 0.005
CONST	ENDS
;	COMDAT __real@3b23d70a
CONST	SEGMENT
__real@3b23d70a DD 03b23d70ar			; 0.0025
CONST	ENDS
;	COMDAT __real@3ac49ba6
CONST	SEGMENT
__real@3ac49ba6 DD 03ac49ba6r			; 0.0015
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?GetStptMode@FireControlComputer@@QAE?AW4FCCStptMode@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetStptMode@FireControlComputer@@QAE?AW4FCCStptMode@1@XZ PROC ; FireControlComputer::GetStptMode, COMDAT
; _this$ = ecx

; 295  : 	FCCStptMode GetStptMode(void) {return mStptMode;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+124]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetStptMode@FireControlComputer@@QAE?AW4FCCStptMode@1@XZ ENDP ; FireControlComputer::GetStptMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\lantirn.h
;	COMDAT ?GetHoldHeight@LantirnClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHoldHeight@LantirnClass@@QAEMXZ PROC		; LantirnClass::GetHoldHeight, COMDAT
; _this$ = ecx

; 52   :     float GetHoldHeight() { return holdheight; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHoldHeight@LantirnClass@@QAEMXZ ENDP		; LantirnClass::GetHoldHeight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\lantirn.h
;	COMDAT ?GetTFRMode@LantirnClass@@QAE?AW4TfrMode@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTFRMode@LantirnClass@@QAE?AW4TfrMode@1@XZ PROC	; LantirnClass::GetTFRMode, COMDAT
; _this$ = ecx

; 42   :     TfrMode GetTFRMode(void) { return m_tfrmode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+168]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTFRMode@LantirnClass@@QAE?AW4TfrMode@1@XZ ENDP	; LantirnClass::GetTFRMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\lantirn.h
;	COMDAT ?GetTFRAlt@LantirnClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTFRAlt@LantirnClass@@QAEHXZ PROC			; LantirnClass::GetTFRAlt, COMDAT
; _this$ = ecx

; 35   :     int	    GetTFRAlt (void) { return m_tfr_alt; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+160]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTFRAlt@LantirnClass@@QAEHXZ ENDP			; LantirnClass::GetTFRAlt
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?ClearAPFlag@AircraftClass@@QAEXW4APFlags@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?ClearAPFlag@AircraftClass@@QAEXW4APFlags@1@@Z PROC	; AircraftClass::ClearAPFlag, COMDAT
; _this$ = ecx

; 440  : 	void ClearAPFlag (APFlags flag) {APFlag &= ~flag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _flag$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+1048]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1048], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAPFlag@AircraftClass@@QAEXW4APFlags@1@@Z ENDP	; AircraftClass::ClearAPFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?SetAPFlag@AircraftClass@@QAEXW4APFlags@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetAPFlag@AircraftClass@@QAEXW4APFlags@1@@Z PROC	; AircraftClass::SetAPFlag, COMDAT
; _this$ = ecx

; 439  : 	void SetAPFlag (APFlags flag) {APFlag |= flag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	or	ecx, DWORD PTR _flag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1048], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAPFlag@AircraftClass@@QAEXW4APFlags@1@@Z ENDP	; AircraftClass::SetAPFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?IsOn@AircraftClass@@QAEHW4APFlags@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_flag$ = 8						; size = 4
?IsOn@AircraftClass@@QAEHW4APFlags@1@@Z PROC		; AircraftClass::IsOn, COMDAT
; _this$ = ecx

; 438  : 	int IsOn (APFlags flag) {return APFlag & flag ? 1 : 0;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsOn
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsOn
$LN3@IsOn:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsOn:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsOn@AircraftClass@@QAEHW4APFlags@1@@Z ENDP		; AircraftClass::IsOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ PROC ; AircraftClass::AutopilotType, COMDAT
; _this$ = ecx

; 329  : 	AutoPilotType	AutopilotType (void) {return autopilotType;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+968]
	mov	esp, ebp
	pop	ebp
	ret	0
?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ENDP ; AircraftClass::AutopilotType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?GetINSLongDrift@AircraftClass@@QAEMXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?GetINSLongDrift@AircraftClass@@QAEMXZ PROC		; AircraftClass::GetINSLongDrift, COMDAT
; _this$ = ecx

; 222  : 	float GetINSLongDrift(void)	{return (INSLongDrift + INSLongOffset);};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+792]
	addss	xmm0, DWORD PTR [ecx+808]
	movss	DWORD PTR tv72[ebp], xmm0
	fld	DWORD PTR tv72[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetINSLongDrift@AircraftClass@@QAEMXZ ENDP		; AircraftClass::GetINSLongDrift
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?GetINSLatDrift@AircraftClass@@QAEMXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?GetINSLatDrift@AircraftClass@@QAEMXZ PROC		; AircraftClass::GetINSLatDrift, COMDAT
; _this$ = ecx

; 221  : 	float GetINSLatDrift(void)	{return (INSLatDrift + INSLatOffset);};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+788]
	addss	xmm0, DWORD PTR [ecx+804]
	movss	DWORD PTR tv72[ebp], xmm0
	fld	DWORD PTR tv72[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetINSLatDrift@AircraftClass@@QAEMXZ ENDP		; AircraftClass::GetINSLatDrift
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetSimpleMode@AirframeClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSimpleMode@AirframeClass@@QAEHXZ PROC		; AirframeClass::GetSimpleMode, COMDAT
; _this$ = ecx

; 1224 : 	int  GetSimpleMode(void) {return simpleMode;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+824]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSimpleMode@AirframeClass@@QAEHXZ ENDP		; AirframeClass::GetSimpleMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?IsSet@AirframeClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_testFlag$ = 8						; size = 4
?IsSet@AirframeClass@@QBEHH@Z PROC			; AirframeClass::IsSet, COMDAT
; _this$ = ecx

; 1216 : 	int IsSet (int testFlag) const {return flags & testFlag ? 1 : 0;}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	and	ecx, DWORD PTR _testFlag$[ebp]
	je	SHORT $LN3@IsSet
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSet
$LN3@IsSet:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSet:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSet@AirframeClass@@QBEHH@Z ENDP			; AirframeClass::IsSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?MaxGs@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MaxGs@AirframeClass@@QAEMXZ PROC			; AirframeClass::MaxGs, COMDAT
; _this$ = ecx

; 1174 : 	float MaxGs (void) {return maxGs;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?MaxGs@AirframeClass@@QAEMXZ ENDP			; AirframeClass::MaxGs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?SetMaxRoll@AirframeClass@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newRoll$ = 8						; size = 4
?SetMaxRoll@AirframeClass@@QAEXM@Z PROC			; AirframeClass::SetMaxRoll, COMDAT
; _this$ = ecx

; 1171 : 	void  SetMaxRoll (float newRoll) {maxRoll = newRoll * DTR;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	movss	xmm0, DWORD PTR _newRoll$[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+64], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMaxRoll@AirframeClass@@QAEXM@Z ENDP			; AirframeClass::SetMaxRoll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?IsEngineFlag@AirframeClass@@QAEHW4EngineFlags@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_ef$ = 8						; size = 4
?IsEngineFlag@AirframeClass@@QAEHW4EngineFlags@1@@Z PROC ; AirframeClass::IsEngineFlag, COMDAT
; _this$ = ecx

; 1070 : 	int IsEngineFlag(EngineFlags ef) { return (engineFlags & ef) ? 1 : 0; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1676]
	and	ecx, DWORD PTR _ef$[ebp]
	je	SHORT $LN3@IsEngineFl
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsEngineFl
$LN3@IsEngineFl:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsEngineFl:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsEngineFlag@AirframeClass@@QAEHW4EngineFlags@1@@Z ENDP ; AirframeClass::IsEngineFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetTFR_GammaCorrMult@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTFR_GammaCorrMult@AirframeClass@@QAEMXZ PROC	; AirframeClass::GetTFR_GammaCorrMult, COMDAT
; _this$ = ecx

; 791  : 	float GetTFR_GammaCorrMult() {return auxaeroData->TFR_GammaCorrMult;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+2956]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTFR_GammaCorrMult@AirframeClass@@QAEMXZ ENDP	; AirframeClass::GetTFR_GammaCorrMult
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetTFR_MaxRoll@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTFR_MaxRoll@AirframeClass@@QAEMXZ PROC		; AirframeClass::GetTFR_MaxRoll, COMDAT
; _this$ = ecx

; 778  : 	float GetTFR_MaxRoll() {return auxaeroData->TFR_MaxRoll;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+2904]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTFR_MaxRoll@AirframeClass@@QAEMXZ ENDP		; AirframeClass::GetTFR_MaxRoll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetEVA_Gain@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEVA_Gain@AirframeClass@@QAEMXZ PROC			; AirframeClass::GetEVA_Gain, COMDAT
; _this$ = ecx

; 777  : 	float GetEVA_Gain() {return auxaeroData->EVA_Gain;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+2900]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetEVA_Gain@AirframeClass@@QAEMXZ ENDP			; AirframeClass::GetEVA_Gain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetTFR_Gain@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTFR_Gain@AirframeClass@@QAEMXZ PROC			; AirframeClass::GetTFR_Gain, COMDAT
; _this$ = ecx

; 776  : 	float GetTFR_Gain() {return auxaeroData->TFR_Gain;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+2896]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTFR_Gain@AirframeClass@@QAEMXZ ENDP			; AirframeClass::GetTFR_Gain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetTFR_Corner@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTFR_Corner@AirframeClass@@QAEMXZ PROC		; AirframeClass::GetTFR_Corner, COMDAT
; _this$ = ecx

; 775  : 	float GetTFR_Corner() {return auxaeroData->TFR_Corner;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+2892]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTFR_Corner@AirframeClass@@QAEMXZ ENDP		; AirframeClass::GetTFR_Corner
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetTFR_LimitMX@AirframeClass@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?GetTFR_LimitMX@AirframeClass@@QAE_NXZ PROC		; AirframeClass::GetTFR_LimitMX, COMDAT
; _this$ = ecx

; 774  : 	bool GetTFR_LimitMX() {return auxaeroData->TFR_LimitMX > 0;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+2888], 0
	jle	SHORT $LN3@GetTFR_Lim
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@GetTFR_Lim
$LN3@GetTFR_Lim:
	mov	DWORD PTR tv67[ebp], 0
$LN4@GetTFR_Lim:
	mov	al, BYTE PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTFR_LimitMX@AirframeClass@@QAE_NXZ ENDP		; AirframeClass::GetTFR_LimitMX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetPID_KD@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPID_KD@AirframeClass@@QAEMXZ PROC			; AirframeClass::GetPID_KD, COMDAT
; _this$ = ecx

; 773  : 	float GetPID_KD() {return auxaeroData->PID_KD;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+2884]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPID_KD@AirframeClass@@QAEMXZ ENDP			; AirframeClass::GetPID_KD
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetPID_KI@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPID_KI@AirframeClass@@QAEMXZ PROC			; AirframeClass::GetPID_KI, COMDAT
; _this$ = ecx

; 772  : 	float GetPID_KI() {return auxaeroData->PID_KI;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+2880]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPID_KI@AirframeClass@@QAEMXZ ENDP			; AirframeClass::GetPID_KI
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetPID_K@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPID_K@AirframeClass@@QAEMXZ PROC			; AirframeClass::GetPID_K, COMDAT
; _this$ = ecx

; 771  : 	float GetPID_K() {return auxaeroData->PID_K;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+2876]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPID_K@AirframeClass@@QAEMXZ ENDP			; AirframeClass::GetPID_K
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\autopilot.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AcceptManual@DigitalBrain@@QAEXXZ PROC			; DigitalBrain::AcceptManual
; _this$ = ecx

; 695  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 696  : 	//me123 said the switches reset themselves. So here we go....
; 697  : 	self->SetAutopilot(AircraftClass::APOff);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?SetAutopilot@AircraftClass@@QAEXW4AutoPilotType@1@@Z ; AircraftClass::SetAutopilot

; 698  : 	self->ClearAPFlag(AircraftClass::AttHold);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ClearAPFlag@AircraftClass@@QAEXW4APFlags@1@@Z ; AircraftClass::ClearAPFlag

; 699  : 	self->ClearAPFlag(AircraftClass::AltHold);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?ClearAPFlag@AircraftClass@@QAEXW4APFlags@1@@Z ; AircraftClass::ClearAPFlag

; 700  : 	/*rStick = UserStickInputs.rstick;
; 701  : 	pStick = UserStickInputs.pstick;     
; 702  : 	yPedal = UserStickInputs.rudder;
; 703  : 	throtl = UserStickInputs.throttle;*/
; 704  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AcceptManual@DigitalBrain@@QAEXXZ ENDP			; DigitalBrain::AcceptManual
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\autopilot.cpp
_TEXT	SEGMENT
tv181 = -24						; size = 4
tv173 = -20						; size = 4
tv168 = -16						; size = 4
tv161 = -12						; size = 4
tv156 = -8						; size = 4
_this$ = -4						; size = 4
?CheckAPParameters@DigitalBrain@@QAEHXZ PROC		; DigitalBrain::CheckAPParameters
; _this$ = ecx

; 681  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 682  : 	//dont do anything if not within parameters
; 683  : 	if((self->Pitch() * RTD > 60.2F) || (self->Pitch() * RTD < -60.2F))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	fstp	DWORD PTR tv156[ebp]
	movss	xmm0, DWORD PTR tv156[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	comiss	xmm0, DWORD PTR __real@4270cccd
	ja	SHORT $LN8@CheckAPPar
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	fstp	DWORD PTR tv161[ebp]
	movss	xmm0, DWORD PTR tv161[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	xmm1, DWORD PTR __real@c270cccd
	comiss	xmm1, xmm0
	jbe	SHORT $LN9@CheckAPPar
$LN8@CheckAPPar:

; 684  : 		return TRUE;

	mov	eax, 1
	jmp	$LN10@CheckAPPar
	jmp	$LN1@CheckAPPar
$LN9@CheckAPPar:

; 685  : 	else if((self->Roll() * RTD > 60.2F) || (self->Roll() * RTD < -60.2F))

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv168[ebp]
	movss	xmm0, DWORD PTR tv168[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	comiss	xmm0, DWORD PTR __real@4270cccd
	ja	SHORT $LN5@CheckAPPar
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv173[ebp]
	movss	xmm0, DWORD PTR tv173[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	xmm1, DWORD PTR __real@c270cccd
	comiss	xmm1, xmm0
	jbe	SHORT $LN6@CheckAPPar
$LN5@CheckAPPar:

; 686  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN10@CheckAPPar
	jmp	SHORT $LN1@CheckAPPar
$LN6@CheckAPPar:

; 687  : 	else if(self->af->mach > 0.95 || -self->ZPos() > 40000)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+932]
	cvtss2sd xmm0, DWORD PTR [eax+1144]
	comisd	xmm0, QWORD PTR __real@3fee666666666666
	ja	SHORT $LN2@CheckAPPar
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv181[ebp]
	movss	xmm0, DWORD PTR tv181[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, DWORD PTR __real@471c4000
	jbe	SHORT $LN3@CheckAPPar
$LN2@CheckAPPar:

; 688  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN10@CheckAPPar

; 689  : 	else

	jmp	SHORT $LN1@CheckAPPar
$LN3@CheckAPPar:

; 690  : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN10@CheckAPPar
$LN1@CheckAPPar:

; 691  : 
; 692  : 	return FALSE;

	xor	eax, eax
$LN10@CheckAPPar:

; 693  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CheckAPParameters@DigitalBrain@@QAEHXZ ENDP		; DigitalBrain::CheckAPParameters
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\autopilot.cpp
_TEXT	SEGMENT
tv170 = -8						; size = 4
_this$ = -4						; size = 4
?APAutoDisconnect@DigitalBrain@@QAE_NXZ PROC		; DigitalBrain::APAutoDisconnect
; _this$ = ecx

; 652  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 653  : 	if(af->gearHandle == 1.0F) // handle is down

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	xmm0, DWORD PTR [ecx+1556]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@APAutoDisc

; 654  : 		return TRUE;

	mov	al, 1
	jmp	$LN9@APAutoDisc
$LN8@APAutoDisc:

; 655  : 
; 656  : 	if (self->mFaults->GetFault(FaultClass::flcs_fault))

	push	13					; 0000000dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN7@APAutoDisc

; 657  : 		return TRUE;

	mov	al, 1
	jmp	$LN9@APAutoDisc
$LN7@APAutoDisc:

; 658  : 
; 659  : 	if (af->IsEngineFlag(AirframeClass::FuelDoorOpen))

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	call	?IsEngineFlag@AirframeClass@@QAEHW4EngineFlags@1@@Z ; AirframeClass::IsEngineFlag
	test	eax, eax
	je	SHORT $LN6@APAutoDisc

; 660  : 		return TRUE;

	mov	al, 1
	jmp	$LN9@APAutoDisc
$LN6@APAutoDisc:

; 661  : 
; 662  : 	if (!self->HasPower(AircraftClass::APPower))

	push	262144					; 00040000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?HasPower@AircraftClass@@QAEHW4AvionicsPowerFlags@1@@Z ; AircraftClass::HasPower
	test	eax, eax
	jne	SHORT $LN5@APAutoDisc

; 663  : 		return TRUE;

	mov	al, 1
	jmp	SHORT $LN9@APAutoDisc
$LN5@APAutoDisc:

; 664  : 	
; 665  : 	if (self->TrimAPDisc)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movzx	edx, BYTE PTR [ecx+850]
	test	edx, edx
	je	SHORT $LN4@APAutoDisc

; 666  : 		return TRUE;

	mov	al, 1
	jmp	SHORT $LN9@APAutoDisc
$LN4@APAutoDisc:

; 667  : 
; 668  : 	if (self->TEFExtend)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movzx	edx, BYTE PTR [ecx+851]
	test	edx, edx
	je	SHORT $LN3@APAutoDisc

; 669  : 		return TRUE;

	mov	al, 1
	jmp	SHORT $LN9@APAutoDisc
$LN3@APAutoDisc:

; 670  : 
; 671  : 	if (self->GetAlpha() > 15.0F)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+56]
	mov	edx, DWORD PTR [eax+408]
	call	edx
	fstp	DWORD PTR tv170[ebp]
	movss	xmm0, DWORD PTR tv170[ebp]
	comiss	xmm0, DWORD PTR __real@41700000
	jbe	SHORT $LN2@APAutoDisc

; 672  : 		return TRUE;

	mov	al, 1
	jmp	SHORT $LN9@APAutoDisc
$LN2@APAutoDisc:

; 673  : 
; 674  : 	if (af->IsSet(AirframeClass::MPOverride))

	push	262144					; 00040000H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	call	?IsSet@AirframeClass@@QBEHH@Z		; AirframeClass::IsSet
	test	eax, eax
	je	SHORT $LN1@APAutoDisc

; 675  : 		return TRUE;

	mov	al, 1
	jmp	SHORT $LN9@APAutoDisc
$LN1@APAutoDisc:

; 676  : 
; 677  : 	return FALSE;

	xor	al, al
$LN9@APAutoDisc:

; 678  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?APAutoDisconnect@DigitalBrain@@QAE_NXZ ENDP		; DigitalBrain::APAutoDisconnect
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\autopilot.cpp
_TEXT	SEGMENT
tv881 = -216						; size = 4
tv651 = -212						; size = 4
tv868 = -208						; size = 4
tv705 = -204						; size = 4
tv862 = -200						; size = 4
tv730 = -196						; size = 4
tv856 = -192						; size = 4
tv683 = -188						; size = 4
tv851 = -184						; size = 4
tv751 = -180						; size = 4
tv845 = -176						; size = 4
tv720 = -172						; size = 4
tv840 = -168						; size = 4
tv646 = -164						; size = 4
tv825 = -160						; size = 4
tv665 = -156						; size = 4
tv820 = -152						; size = 4
tv756 = -148						; size = 4
tv815 = -144						; size = 4
tv745 = -140						; size = 4
tv810 = -136						; size = 4
tv725 = -132						; size = 4
tv801 = -128						; size = 4
tv714 = -124						; size = 4
tv796 = -120						; size = 4
tv700 = -116						; size = 4
tv791 = -112						; size = 4
tv689 = -108						; size = 4
tv786 = -104						; size = 4
tv671 = -100						; size = 4
tv781 = -96						; size = 4
tv657 = -92						; size = 4
tv769 = -88						; size = 4
tv764 = -84						; size = 4
tv695 = -80						; size = 4
tv562 = -76						; size = 4
tv138 = -72						; size = 4
tv533 = -68						; size = 4
tv227 = -64						; size = 4
tv449 = -60						; size = 4
tv271 = -56						; size = 4
tv446 = -52						; size = 4
tv163 = -48						; size = 4
tv445 = -44						; size = 4
tv274 = -40						; size = 4
tv405 = -36						; size = 4
tv270 = -32						; size = 4
tv404 = -28						; size = 4
tv226 = -24						; size = 4
tv344 = -20						; size = 4
tv160 = -16						; size = 4
tv341 = -12						; size = 4
tv320 = -8						; size = 4
_this$ = -4						; size = 4
?CheckForTurn@DigitalBrain@@QAEXXZ PROC			; DigitalBrain::CheckForTurn
; _this$ = ecx

; 599  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	mov	DWORD PTR _this$[ebp], ecx

; 600  : 	//anything to do for us?
; 601  : 	if(HeadingDifference < -1.0F || HeadingDifference > 1.0F)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	comiss	xmm0, DWORD PTR [eax+676]
	ja	SHORT $LN21@CheckForTu
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+676]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	$LN22@CheckForTu
$LN21@CheckForTu:

; 602  : 	{
; 603  : 		//MI DON'T TOUCH THIS CODE!!!!
; 604  : 		//my brain was smoking after I got this down! It seems to work just fine.
; 605  : 		if(HeadingDifference < 0)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [edx+676]
	jbe	$LN20@CheckForTu

; 606  : 		{
; 607  : 			//turn left
; 608  : 			if(self->Roll() * RTD > -29.0F)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv646[ebp]
	movss	xmm0, DWORD PTR tv646[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	comiss	xmm0, DWORD PTR __real@c1e80000
	jbe	$LN19@CheckForTu

; 609  : 				rStick = ((0.5F * af->rstick) - (AP_TURN * min(29 - (self->Roll() * RTD < 0 ? -self->Roll() * RTD : 0), 10) * DTR));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv651[ebp]
	movss	xmm0, DWORD PTR tv651[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN25@CheckForTu
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv657[ebp]
	movss	xmm0, DWORD PTR tv657[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR tv138[ebp], xmm0
	jmp	SHORT $LN26@CheckForTu
$LN25@CheckForTu:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv138[ebp], xmm0
$LN26@CheckForTu:
	movss	xmm0, DWORD PTR __real@41e80000
	subss	xmm0, DWORD PTR tv138[ebp]
	movss	xmm1, DWORD PTR __real@41200000
	comiss	xmm1, xmm0
	jbe	SHORT $LN29@CheckForTu
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv665[ebp]
	movss	xmm0, DWORD PTR tv665[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN27@CheckForTu
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv671[ebp]
	movss	xmm0, DWORD PTR tv671[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR tv160[ebp], xmm0
	jmp	SHORT $LN28@CheckForTu
$LN27@CheckForTu:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv160[ebp], xmm0
$LN28@CheckForTu:
	movss	xmm0, DWORD PTR __real@41e80000
	subss	xmm0, DWORD PTR tv160[ebp]
	movss	DWORD PTR tv163[ebp], xmm0
	jmp	SHORT $LN30@CheckForTu
$LN29@CheckForTu:
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR tv163[ebp], xmm0
$LN30@CheckForTu:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [eax+1504]
	movss	xmm1, DWORD PTR __real@3f800000
	mulss	xmm1, DWORD PTR tv163[ebp]
	mulss	xmm1, DWORD PTR __real@3c8efa34
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+32], xmm0
	jmp	$LN16@CheckForTu
$LN19@CheckForTu:

; 610  : 			else if(self->Roll() * RTD < -30.5F)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv683[ebp]
	movss	xmm0, DWORD PTR tv683[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	xmm1, DWORD PTR __real@c1f40000
	comiss	xmm1, xmm0
	jbe	$LN17@CheckForTu

; 611  : 				rStick = ((0.5F * af->rstick) + (AP_TURN * min(29 - (self->Roll() * RTD < 0 ? (-self->Roll() * RTD > 29 ? (-self->Roll() * RTD - 29) : -self->Roll() * RTD) : 0), 10) * DTR));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv689[ebp]
	movss	xmm0, DWORD PTR tv689[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	$LN33@CheckForTu
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv695[ebp]
	movss	xmm0, DWORD PTR tv695[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@42652ee1
	comiss	xmm0, DWORD PTR __real@41e80000
	jbe	SHORT $LN31@CheckForTu
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv700[ebp]
	movss	xmm0, DWORD PTR tv700[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@42652ee1
	subss	xmm0, DWORD PTR __real@41e80000
	movss	DWORD PTR tv226[ebp], xmm0
	jmp	SHORT $LN32@CheckForTu
$LN31@CheckForTu:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv705[ebp]
	movss	xmm0, DWORD PTR tv705[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR tv226[ebp], xmm0
$LN32@CheckForTu:
	movss	xmm0, DWORD PTR tv226[ebp]
	movss	DWORD PTR tv227[ebp], xmm0
	jmp	SHORT $LN34@CheckForTu
$LN33@CheckForTu:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv227[ebp], xmm0
$LN34@CheckForTu:
	movss	xmm0, DWORD PTR __real@41e80000
	subss	xmm0, DWORD PTR tv227[ebp]
	movss	xmm1, DWORD PTR __real@41200000
	comiss	xmm1, xmm0
	jbe	$LN39@CheckForTu
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv714[ebp]
	movss	xmm0, DWORD PTR tv714[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	$LN37@CheckForTu
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv720[ebp]
	movss	xmm0, DWORD PTR tv720[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@42652ee1
	comiss	xmm0, DWORD PTR __real@41e80000
	jbe	SHORT $LN35@CheckForTu
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv725[ebp]
	movss	xmm0, DWORD PTR tv725[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@42652ee1
	subss	xmm0, DWORD PTR __real@41e80000
	movss	DWORD PTR tv270[ebp], xmm0
	jmp	SHORT $LN36@CheckForTu
$LN35@CheckForTu:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv730[ebp]
	movss	xmm0, DWORD PTR tv730[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR tv270[ebp], xmm0
$LN36@CheckForTu:
	movss	xmm0, DWORD PTR tv270[ebp]
	movss	DWORD PTR tv271[ebp], xmm0
	jmp	SHORT $LN38@CheckForTu
$LN37@CheckForTu:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv271[ebp], xmm0
$LN38@CheckForTu:
	movss	xmm0, DWORD PTR __real@41e80000
	subss	xmm0, DWORD PTR tv271[ebp]
	movss	DWORD PTR tv274[ebp], xmm0
	jmp	SHORT $LN40@CheckForTu
$LN39@CheckForTu:
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR tv274[ebp], xmm0
$LN40@CheckForTu:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [eax+1504]
	movss	xmm1, DWORD PTR __real@3f800000
	mulss	xmm1, DWORD PTR tv274[ebp]
	mulss	xmm1, DWORD PTR __real@3c8efa34
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+32], xmm0

; 612  : 			else

	jmp	SHORT $LN16@CheckForTu
$LN17@CheckForTu:

; 613  : 				rStick = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+32], xmm0
$LN16@CheckForTu:

; 614  : 		}
; 615  : 		else

	jmp	$LN11@CheckForTu
$LN20@CheckForTu:

; 616  : 		{
; 617  : 			//turn right
; 618  : 			if(self->Roll() * RTD < 29.0F)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv745[ebp]
	movss	xmm0, DWORD PTR tv745[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	xmm1, DWORD PTR __real@41e80000
	comiss	xmm1, xmm0
	jbe	$LN14@CheckForTu

; 619  : 				rStick = ((0.5F * af->rstick) + (AP_TURN * min(29 - (self->Roll() * RTD > 0 ? self->Roll() * RTD : 0), 10) * DTR));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv751[ebp]
	movss	xmm0, DWORD PTR tv751[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN41@CheckForTu
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv756[ebp]
	movss	xmm0, DWORD PTR tv756[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR tv320[ebp], xmm0
	jmp	SHORT $LN42@CheckForTu
$LN41@CheckForTu:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv320[ebp], xmm0
$LN42@CheckForTu:
	movss	xmm0, DWORD PTR __real@41e80000
	subss	xmm0, DWORD PTR tv320[ebp]
	movss	xmm1, DWORD PTR __real@41200000
	comiss	xmm1, xmm0
	jbe	SHORT $LN45@CheckForTu
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv764[ebp]
	movss	xmm0, DWORD PTR tv764[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN43@CheckForTu
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv769[ebp]
	movss	xmm0, DWORD PTR tv769[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR tv341[ebp], xmm0
	jmp	SHORT $LN44@CheckForTu
$LN43@CheckForTu:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv341[ebp], xmm0
$LN44@CheckForTu:
	movss	xmm0, DWORD PTR __real@41e80000
	subss	xmm0, DWORD PTR tv341[ebp]
	movss	DWORD PTR tv344[ebp], xmm0
	jmp	SHORT $LN46@CheckForTu
$LN45@CheckForTu:
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR tv344[ebp], xmm0
$LN46@CheckForTu:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [eax+1504]
	movss	xmm1, DWORD PTR __real@3f800000
	mulss	xmm1, DWORD PTR tv344[ebp]
	mulss	xmm1, DWORD PTR __real@3c8efa34
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+32], xmm0
	jmp	$LN11@CheckForTu
$LN14@CheckForTu:

; 620  : 			else if(self->Roll() * RTD > 30.5F)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv781[ebp]
	movss	xmm0, DWORD PTR tv781[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	comiss	xmm0, DWORD PTR __real@41f40000
	jbe	$LN12@CheckForTu

; 621  : 				rStick = ((0.5F * af->rstick) - (AP_TURN * min(29 - (self->Roll() * RTD > 0 ? (self->Roll() * RTD > 29 ? (self->Roll() * RTD - 29) : self->Roll() * RTD) : 0), 10) * DTR));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv786[ebp]
	movss	xmm0, DWORD PTR tv786[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN49@CheckForTu
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv791[ebp]
	movss	xmm0, DWORD PTR tv791[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	comiss	xmm0, DWORD PTR __real@41e80000
	jbe	SHORT $LN47@CheckForTu
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv796[ebp]
	movss	xmm0, DWORD PTR tv796[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	subss	xmm0, DWORD PTR __real@41e80000
	movss	DWORD PTR tv404[ebp], xmm0
	jmp	SHORT $LN48@CheckForTu
$LN47@CheckForTu:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv801[ebp]
	movss	xmm0, DWORD PTR tv801[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR tv404[ebp], xmm0
$LN48@CheckForTu:
	movss	xmm0, DWORD PTR tv404[ebp]
	movss	DWORD PTR tv405[ebp], xmm0
	jmp	SHORT $LN50@CheckForTu
$LN49@CheckForTu:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv405[ebp], xmm0
$LN50@CheckForTu:
	movss	xmm0, DWORD PTR __real@41e80000
	subss	xmm0, DWORD PTR tv405[ebp]
	movss	xmm1, DWORD PTR __real@41200000
	comiss	xmm1, xmm0
	jbe	$LN55@CheckForTu
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv810[ebp]
	movss	xmm0, DWORD PTR tv810[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN53@CheckForTu
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv815[ebp]
	movss	xmm0, DWORD PTR tv815[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	comiss	xmm0, DWORD PTR __real@41e80000
	jbe	SHORT $LN51@CheckForTu
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv820[ebp]
	movss	xmm0, DWORD PTR tv820[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	subss	xmm0, DWORD PTR __real@41e80000
	movss	DWORD PTR tv445[ebp], xmm0
	jmp	SHORT $LN52@CheckForTu
$LN51@CheckForTu:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv825[ebp]
	movss	xmm0, DWORD PTR tv825[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR tv445[ebp], xmm0
$LN52@CheckForTu:
	movss	xmm0, DWORD PTR tv445[ebp]
	movss	DWORD PTR tv446[ebp], xmm0
	jmp	SHORT $LN54@CheckForTu
$LN53@CheckForTu:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv446[ebp], xmm0
$LN54@CheckForTu:
	movss	xmm0, DWORD PTR __real@41e80000
	subss	xmm0, DWORD PTR tv446[ebp]
	movss	DWORD PTR tv449[ebp], xmm0
	jmp	SHORT $LN56@CheckForTu
$LN55@CheckForTu:
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR tv449[ebp], xmm0
$LN56@CheckForTu:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [eax+1504]
	movss	xmm1, DWORD PTR __real@3f800000
	mulss	xmm1, DWORD PTR tv449[ebp]
	mulss	xmm1, DWORD PTR __real@3c8efa34
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+32], xmm0

; 622  : 			else

	jmp	SHORT $LN11@CheckForTu
$LN12@CheckForTu:

; 623  : 				rStick = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+32], xmm0
$LN11@CheckForTu:

; 624  : 		}
; 625  : 	}
; 626  : 	else

	jmp	$LN1@CheckForTu
$LN22@CheckForTu:

; 627  : 	{
; 628  : 		if(self->Roll() * RTD > 0.5F || self->Roll() *RTD < -0.5F)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv840[ebp]
	movss	xmm0, DWORD PTR tv840[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	comiss	xmm0, DWORD PTR __real@3f000000
	ja	SHORT $LN8@CheckForTu
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv845[ebp]
	movss	xmm0, DWORD PTR tv845[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	xmm1, DWORD PTR __real@bf000000
	comiss	xmm1, xmm0
	jbe	$LN9@CheckForTu
$LN8@CheckForTu:

; 629  : 		{
; 630  : 			if(self->Roll() * RTD > 0.5F)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv851[ebp]
	movss	xmm0, DWORD PTR tv851[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	comiss	xmm0, DWORD PTR __real@3f000000
	jbe	SHORT $LN7@CheckForTu

; 631  : 				bank = (self->Roll() * RTD) - 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv856[ebp]
	movss	xmm0, DWORD PTR tv856[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	subss	xmm0, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+680], xmm0

; 632  : 			else

	jmp	SHORT $LN6@CheckForTu
$LN7@CheckForTu:

; 633  : 				bank = (-self->Roll() * RTD) + 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv862[ebp]
	movss	xmm0, DWORD PTR tv862[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@42652ee1
	addss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+680], xmm0
$LN6@CheckForTu:

; 634  : 			if(self->Roll() * RTD < -0.5F)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv868[ebp]
	movss	xmm0, DWORD PTR tv868[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	xmm1, DWORD PTR __real@bf000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN5@CheckForTu

; 635  : 				rStick = ((0.5F * af->rstick) + (0.5F * max(bank,2.5F) * DTR));

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+680]
	comiss	xmm0, DWORD PTR __real@40200000
	jbe	SHORT $LN57@CheckForTu
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+680]
	movss	DWORD PTR tv533[ebp], xmm0
	jmp	SHORT $LN58@CheckForTu
$LN57@CheckForTu:
	movss	xmm0, DWORD PTR __real@40200000
	movss	DWORD PTR tv533[ebp], xmm0
$LN58@CheckForTu:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [edx+1504]
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR tv533[ebp]
	mulss	xmm1, DWORD PTR __real@3c8efa34
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+32], xmm0
	jmp	$LN2@CheckForTu
$LN5@CheckForTu:

; 636  : 			else if(self->Roll() * RTD > 0.5F)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv881[ebp]
	movss	xmm0, DWORD PTR tv881[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	comiss	xmm0, DWORD PTR __real@3f000000
	jbe	SHORT $LN3@CheckForTu

; 637  : 				rStick = ((0.5F * af->rstick) - (0.5F * max(bank,2.5F) * DTR));

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+680]
	comiss	xmm0, DWORD PTR __real@40200000
	jbe	SHORT $LN59@CheckForTu
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+680]
	movss	DWORD PTR tv562[ebp], xmm0
	jmp	SHORT $LN60@CheckForTu
$LN59@CheckForTu:
	movss	xmm0, DWORD PTR __real@40200000
	movss	DWORD PTR tv562[ebp], xmm0
$LN60@CheckForTu:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [edx+1504]
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR tv562[ebp]
	mulss	xmm1, DWORD PTR __real@3c8efa34
	subss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+32], xmm0

; 638  : 			else

	jmp	SHORT $LN2@CheckForTu
$LN3@CheckForTu:

; 639  : 				rStick = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+32], xmm0
$LN2@CheckForTu:

; 640  : 		}
; 641  : 		else

	jmp	SHORT $LN1@CheckForTu
$LN9@CheckForTu:

; 642  : 			rStick = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+32], xmm0
$LN1@CheckForTu:

; 643  : 	}
; 644  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CheckForTurn@DigitalBrain@@QAEXXZ ENDP			; DigitalBrain::CheckForTurn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\autopilot.cpp
_TEXT	SEGMENT
tv246 = -52						; size = 8
_wpZ$ = -44						; size = 4
tv251 = -40						; size = 4
tv268 = -36						; size = 4
tv239 = -32						; size = 4
tv233 = -28						; size = 4
tv227 = -24						; size = 4
tv222 = -20						; size = 4
_wpY$ = -16						; size = 4
_wpX$ = -12						; size = 4
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
?FollowWP@DigitalBrain@@QAEXXZ PROC			; DigitalBrain::FollowWP
; _this$ = ecx

; 441  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 442  : 	if(CheckAPParameters())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckAPParameters@DigitalBrain@@QAEHXZ	; DigitalBrain::CheckAPParameters
	test	eax, eax
	je	SHORT $LN9@FollowWP

; 443  : 	{
; 444  : 	//	AcceptManual();  MD -- 20031108: switch will remain in selected pitch mode according to the dash one!
; 445  : 		self->SetAutopilot(AircraftClass::APOff);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?SetAutopilot@AircraftClass@@QAEXW4AutoPilotType@1@@Z ; AircraftClass::SetAutopilot

; 446  : 		return;

	jmp	$LN10@FollowWP
$LN9@FollowWP:

; 447  : 	}
; 448  : 
; 449  : 	float wpX, wpY, wpZ;
; 450  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 451  : 
; 452  : 	if(self == playerAC && playerAC->FCC->GetStptMode() != FireControlComputer::FCCWaypoint &&
; 453  : 		playerAC->FCC->GetStptMode() != FireControlComputer::FCCMarkpoint &&
; 454  : 		playerAC->FCC->GetStptMode() != FireControlComputer::FCCDLinkpoint) 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	cmp	edx, DWORD PTR _playerAC$[ebp]
	jne	SHORT $LN8@FollowWP
	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+936]
	call	?GetStptMode@FireControlComputer@@QAE?AW4FCCStptMode@1@XZ ; FireControlComputer::GetStptMode
	test	eax, eax
	je	SHORT $LN8@FollowWP
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+936]
	call	?GetStptMode@FireControlComputer@@QAE?AW4FCCStptMode@1@XZ ; FireControlComputer::GetStptMode
	cmp	eax, 2
	je	SHORT $LN8@FollowWP
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+936]
	call	?GetStptMode@FireControlComputer@@QAE?AW4FCCStptMode@1@XZ ; FireControlComputer::GetStptMode
	cmp	eax, 1
	je	SHORT $LN8@FollowWP

; 455  : 	{
; 456  : 		AcceptManual();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AcceptManual@DigitalBrain@@QAEXXZ	; DigitalBrain::AcceptManual

; 457  : 		return;

	jmp	$LN10@FollowWP
$LN8@FollowWP:

; 458  : 	}
; 459  : 
; 460  : 	if(self && self->curWaypoint)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN7@FollowWP
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	cmp	DWORD PTR [edx+728], 0
	je	SHORT $LN7@FollowWP

; 461  : 		self->curWaypoint->GetLocation (&wpX, &wpY, &wpZ);

	lea	eax, DWORD PTR _wpZ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wpY$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wpX$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [ecx+728]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation

; 462  : 	else

	jmp	SHORT $LN6@FollowWP
$LN7@FollowWP:

; 463  : 	{
; 464  : 		AcceptManual();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AcceptManual@DigitalBrain@@QAEXXZ	; DigitalBrain::AcceptManual

; 465  : 		return;

	jmp	$LN10@FollowWP
$LN6@FollowWP:

; 466  : 	}
; 467  : 	//MI add in INS Drift
; 468  : 	if(g_bINS && g_bRealisticAvionics)

	movzx	edx, BYTE PTR ?g_bINS@@3_NA		; g_bINS
	test	edx, edx
	je	SHORT $LN4@FollowWP
	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN4@FollowWP

; 469  : 	{
; 470  : 		if (playerAC != NULL)

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	SHORT $LN4@FollowWP

; 471  : 		{
; 472  : 			wpX += playerAC->GetINSLatDrift();

	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?GetINSLatDrift@AircraftClass@@QAEMXZ	; AircraftClass::GetINSLatDrift
	fstp	DWORD PTR tv222[ebp]
	movss	xmm0, DWORD PTR tv222[ebp]
	addss	xmm0, DWORD PTR _wpX$[ebp]
	movss	DWORD PTR _wpX$[ebp], xmm0

; 473  : 			wpY += playerAC->GetINSLongDrift();

	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?GetINSLongDrift@AircraftClass@@QAEMXZ	; AircraftClass::GetINSLongDrift
	fstp	DWORD PTR tv227[ebp]
	movss	xmm0, DWORD PTR tv227[ebp]
	addss	xmm0, DWORD PTR _wpY$[ebp]
	movss	DWORD PTR _wpY$[ebp], xmm0
$LN4@FollowWP:

; 474  : 		}
; 475  : 	}
; 476  : 
; 477  :    	/*------------------------------------*/
; 478  : 	/* Heading error for current waypoint */
; 479  : 	/*------------------------------------*/
; 480  : 	HeadingDifference = (float)atan2(wpY - self->YPos(), wpX - self->XPos()) - self->Yaw();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv233[ebp]
	movss	xmm0, DWORD PTR _wpX$[ebp]
	subss	xmm0, DWORD PTR tv233[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv239[ebp]
	movss	xmm0, DWORD PTR _wpY$[ebp]
	subss	xmm0, DWORD PTR tv239[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv246[ebp]
	movsd	xmm0, QWORD PTR tv246[ebp]
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv268[ebp], xmm0
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv251[ebp]
	movss	xmm0, DWORD PTR tv268[ebp]
	subss	xmm0, DWORD PTR tv251[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+676], xmm0

; 481  : 	if (HeadingDifference >= 180.0F * DTR)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+676]
	comiss	xmm0, DWORD PTR __real@40490fd9
	jb	SHORT $LN3@FollowWP

; 482  : 		HeadingDifference -= 360.0F * DTR;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+676]
	subss	xmm0, DWORD PTR __real@40c90fd9
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+676], xmm0
	jmp	SHORT $LN1@FollowWP
$LN3@FollowWP:

; 483  : 	else if (HeadingDifference <= -180.0F * DTR)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c0490fd9
	comiss	xmm0, DWORD PTR [edx+676]
	jb	SHORT $LN1@FollowWP

; 484  : 		HeadingDifference += 360.0F * DTR;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+676]
	addss	xmm0, DWORD PTR __real@40c90fd9
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+676], xmm0
$LN1@FollowWP:

; 485  : 
; 486  : 	HeadingDifference *= RTD;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+676]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+676], xmm0

; 487  : 	
; 488  : 	CheckForTurn();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckForTurn@DigitalBrain@@QAEXXZ	; DigitalBrain::CheckForTurn
$LN10@FollowWP:

; 489  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FollowWP@DigitalBrain@@QAEXXZ ENDP			; DigitalBrain::FollowWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\autopilot.cpp
_TEXT	SEGMENT
tv157 = -20						; size = 4
tv150 = -16						; size = 4
_abs_alterr$1 = -12					; size = 4
_alterr$ = -8						; size = 4
_this$ = -4						; size = 4
?AltHold@DigitalBrain@@QAEXXZ PROC			; DigitalBrain::AltHold
; _this$ = ecx

; 306  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 307  : 	if(CheckAPParameters())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckAPParameters@DigitalBrain@@QAEHXZ	; DigitalBrain::CheckAPParameters
	test	eax, eax
	je	SHORT $LN9@AltHold

; 308  : 	{
; 309  : 	//	AcceptManual();  MD -- 20031108: switch will remain in selected pitch mode according to the dash one!
; 310  : 		self->SetAutopilot(AircraftClass::APOff);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?SetAutopilot@AircraftClass@@QAEXW4AutoPilotType@1@@Z ; AircraftClass::SetAutopilot

; 311  : 		return;

	jmp	$LN10@AltHold
$LN9@AltHold:

; 312  : 	}
; 313  :  	float alterr = currAlt + self->ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv150[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv150[ebp]
	addss	xmm0, DWORD PTR [edx+436]
	movss	DWORD PTR _alterr$[ebp], xmm0

; 314  : 	alterr -= self->ZDelta();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv157[ebp]
	movss	xmm0, DWORD PTR _alterr$[ebp]
	subss	xmm0, DWORD PTR tv157[ebp]
	movss	DWORD PTR _alterr$[ebp], xmm0

; 315  : 
; 316  : 	if (self->AutopilotType() == AircraftClass::LantirnAP)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
	cmp	eax, 3
	jne	SHORT $LN8@AltHold

; 317  : 		GammaHold(alterr * 0.015F);

	movss	xmm0, DWORD PTR _alterr$[ebp]
	mulss	xmm0, DWORD PTR __real@3c75c28f
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GammaHold@DigitalBrain@@IAEXM@Z	; DigitalBrain::GammaHold

; 318  : 	else

	jmp	$LN1@AltHold
$LN8@AltHold:

; 319  : 	{
; 320  : 		// MD -- 20031107: Adding some damping when you are close to the mark
; 321  : 		// this should get rid of most of the porpoise effect if we are lucky.
; 322  : 		// I'm no aerodynamics guru but it seems to me that when you are close
; 323  : 		// to the desired altitude, you want to shoot for a zero degree pitch
; 324  : 		// to stay straight and level.  This seems to do better than the original
; 325  : 		// algorithm that always applied the GammaHold(alterr * 0.015) pitch angle
; 326  : 		// correction but it seems like that would cause enough overshoot even
; 327  : 		// at small deltas from desired altitude so as to lead to the porpoising
; 328  : 		// effect we all love to hate.
; 329  : 		//  All that said, if you can do better than this, with a more scientific
; 330  : 		// approach, please go ahead!
; 331  : 		// The F-16 dash one says the autopilot holds alt +/- 100 feet.  The old
; 332  : 		// algorithm did that too but with a lot more gyration around the desired
; 333  : 		// altitude reference.
; 334  : 
; 335  : 		// NB: it might be appropriate to add this for LantirnAP as well but changing
; 336  : 		// the pitch rate multipliers for that seems intuitively more risky so without
; 337  : 		// doing more investigation...well, leave it alone for now.
; 338  : 
; 339  : 		float abs_alterr = fabsf(alterr);

	push	ecx
	movss	xmm0, DWORD PTR _alterr$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR _abs_alterr$1[ebp]

; 340  : 		if (abs_alterr < 15.0F) {

	movss	xmm0, DWORD PTR __real@41700000
	comiss	xmm0, DWORD PTR _abs_alterr$1[ebp]
	jbe	SHORT $LN6@AltHold

; 341  : 			GammaHold(alterr * 0.0F);

	movss	xmm0, DWORD PTR _alterr$[ebp]
	mulss	xmm0, DWORD PTR __real@00000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GammaHold@DigitalBrain@@IAEXM@Z	; DigitalBrain::GammaHold

; 342  : 		}
; 343  : 		else {

	jmp	SHORT $LN1@AltHold
$LN6@AltHold:

; 344  : 			if (abs_alterr < 50.0F) {

	movss	xmm0, DWORD PTR __real@42480000
	comiss	xmm0, DWORD PTR _abs_alterr$1[ebp]
	jbe	SHORT $LN4@AltHold

; 345  : 				GammaHold(alterr * 0.0015F);

	movss	xmm0, DWORD PTR _alterr$[ebp]
	mulss	xmm0, DWORD PTR __real@3ac49ba6
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GammaHold@DigitalBrain@@IAEXM@Z	; DigitalBrain::GammaHold

; 346  : 			}
; 347  : 			else {

	jmp	SHORT $LN1@AltHold
$LN4@AltHold:

; 348  : 				if (abs_alterr < 100.0F)

	movss	xmm0, DWORD PTR __real@42c80000
	comiss	xmm0, DWORD PTR _abs_alterr$1[ebp]
	jbe	SHORT $LN2@AltHold

; 349  : 					GammaHold(alterr * 0.005F);

	movss	xmm0, DWORD PTR _alterr$[ebp]
	mulss	xmm0, DWORD PTR __real@3ba3d70a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GammaHold@DigitalBrain@@IAEXM@Z	; DigitalBrain::GammaHold

; 350  : 				else

	jmp	SHORT $LN1@AltHold
$LN2@AltHold:

; 351  : 					GammaHold(alterr * 0.015F);

	movss	xmm0, DWORD PTR _alterr$[ebp]
	mulss	xmm0, DWORD PTR __real@3c75c28f
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GammaHold@DigitalBrain@@IAEXM@Z	; DigitalBrain::GammaHold
$LN1@AltHold:
$LN10@AltHold:

; 352  : 			}
; 353  : 		}
; 354  : 	}
; 355  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AltHold@DigitalBrain@@QAEXXZ ENDP			; DigitalBrain::AltHold
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\autopilot.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?PitchHold@DigitalBrain@@QAEXXZ PROC			; DigitalBrain::PitchHold
; _this$ = ecx

; 568  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 569  : 	if(CheckAPParameters())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckAPParameters@DigitalBrain@@QAEHXZ	; DigitalBrain::CheckAPParameters
	test	eax, eax
	je	SHORT $LN6@PitchHold

; 570  : 	{
; 571  : 	//	pitch switch will remain in selected pitch mode according to the dash one!
; 572  : 		self->SetAutopilot(AircraftClass::APOff);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?SetAutopilot@AircraftClass@@QAEXW4AutoPilotType@1@@Z ; AircraftClass::SetAutopilot

; 573  : 		return;

	jmp	$LN7@PitchHold
$LN6@PitchHold:

; 574  : 	}
; 575  : 
; 576  : 	// Use the Gamma (pitch angle) hold command here since it seems to work right
; 577  : 	// and the pitch/roll hold code above in earlier versions of this file don't seem to
; 578  : 	// hold pitch at all to speak of.
; 579  : 	if (!self->IsOn(AircraftClass::StickStrng))

	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?IsOn@AircraftClass@@QAEHW4APFlags@1@@Z	; AircraftClass::IsOn
	test	eax, eax
	jne	SHORT $LN5@PitchHold

; 580  : 		GammaHold(destPitch);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+432]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GammaHold@DigitalBrain@@IAEXM@Z	; DigitalBrain::GammaHold
$LN5@PitchHold:

; 581  : 
; 582  : 	// Now grab any user input to emulate stick steering during autopilot operation.
; 583  : 	// AP just holds the set reference.  Pressure on the stick will change the reference
; 584  : 	// provided the pitch and other parameters that would disconnect the AP stay within limits.
; 585  : 	// Be careful to take this input only if there is some pressure on the stick though!
; 586  : 	if ((UserStickInputs.pstick > 0.05F) || (UserStickInputs.pstick < -0.05F)) {

	movss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+60
	comiss	xmm0, DWORD PTR __real@3d4ccccd
	ja	SHORT $LN3@PitchHold
	movss	xmm0, DWORD PTR __real@bd4ccccd
	comiss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+60
	jbe	SHORT $LN4@PitchHold
$LN3@PitchHold:

; 587  : 		self->SetAPFlag(AircraftClass::StickStrng);

	push	64					; 00000040H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?SetAPFlag@AircraftClass@@QAEXW4APFlags@1@@Z ; AircraftClass::SetAPFlag

; 588  : 		pStick = 0.0F * af->pstick + 0.5F * UserStickInputs.pstick;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR __real@00000000
	mulss	xmm0, DWORD PTR [edx+1500]
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+60
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+28], xmm0

; 589  : 		self->SetNewPitch();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?SetNewPitch@AircraftClass@@QAEXXZ	; AircraftClass::SetNewPitch

; 590  : 	} else {

	jmp	SHORT $LN1@PitchHold
$LN4@PitchHold:

; 591  : 		if (self->IsOn(AircraftClass::StickStrng))

	push	64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?IsOn@AircraftClass@@QAEHW4APFlags@1@@Z	; AircraftClass::IsOn
	test	eax, eax
	je	SHORT $LN1@PitchHold

; 592  : 			self->ClearAPFlag(AircraftClass::StickStrng);

	push	64					; 00000040H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ClearAPFlag@AircraftClass@@QAEXW4APFlags@1@@Z ; AircraftClass::ClearAPFlag
$LN1@PitchHold:
$LN7@PitchHold:

; 593  : 	}
; 594  : 
; 595  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PitchHold@DigitalBrain@@QAEXXZ ENDP			; DigitalBrain::PitchHold
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\autopilot.cpp
_TEXT	SEGMENT
tv361 = -56						; size = 4
tv347 = -52						; size = 4
tv329 = -48						; size = 4
tv316 = -44						; size = 4
tv305 = -40						; size = 4
tv298 = -36						; size = 4
tv291 = -32						; size = 4
tv243 = -28						; size = 4
tv217 = -24						; size = 4
tv184 = -20						; size = 4
tv158 = -16						; size = 4
_CurrentRoll$ = -12					; size = 4
_corrRoll$ = -8						; size = 4
_this$ = -4						; size = 4
?RollHold@DigitalBrain@@QAEXXZ PROC			; DigitalBrain::RollHold
; _this$ = ecx

; 516  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 517  : 	if(CheckAPParameters())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckAPParameters@DigitalBrain@@QAEHXZ	; DigitalBrain::CheckAPParameters
	test	eax, eax
	je	SHORT $LN15@RollHold

; 518  : 	{
; 519  : 	//	AcceptManual();  MD -- 20031108: switch will remain in selected pitch mode according to the dash one!
; 520  : 		self->SetAutopilot(AircraftClass::APOff);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?SetAutopilot@AircraftClass@@QAEXW4AutoPilotType@1@@Z ; AircraftClass::SetAutopilot

; 521  : 		return;

	jmp	$LN16@RollHold
$LN15@RollHold:

; 522  : 	}
; 523  : 	
; 524  : 	float corrRoll = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _corrRoll$[ebp], xmm0

; 525  : 	float CurrentRoll = self->Roll() * RTD;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv291[ebp]
	movss	xmm0, DWORD PTR tv291[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR _CurrentRoll$[ebp], xmm0

; 526  : 	if(CurrentRoll < 0)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _CurrentRoll$[ebp]
	jbe	SHORT $LN14@RollHold

; 527  : 		CurrentRoll *= -1;

	movss	xmm0, DWORD PTR _CurrentRoll$[ebp]
	mulss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _CurrentRoll$[ebp], xmm0
$LN14@RollHold:

; 528  : 	//anything to do?
; 529  : 	if(self->Roll() * RTD > destRoll + 1.0F ||  self->Roll() * RTD < destRoll - 1.0F)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv298[ebp]
	movss	xmm0, DWORD PTR tv298[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+428]
	addss	xmm1, DWORD PTR __real@3f800000
	comiss	xmm0, xmm1
	ja	SHORT $LN12@RollHold
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv305[ebp]
	movss	xmm0, DWORD PTR tv305[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+428]
	subss	xmm1, DWORD PTR __real@3f800000
	comiss	xmm1, xmm0
	jbe	$LN13@RollHold
$LN12@RollHold:

; 530  : 	{
; 531  : 		if(CurrentRoll > destRoll)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _CurrentRoll$[ebp]
	comiss	xmm0, DWORD PTR [eax+428]
	jbe	$LN11@RollHold

; 532  : 		{
; 533  : 			//bank left
; 534  : 			//How much to correct?
; 535  : 			corrRoll = CurrentRoll - destRoll;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _CurrentRoll$[ebp]
	subss	xmm0, DWORD PTR [ecx+428]
	movss	DWORD PTR _corrRoll$[ebp], xmm0

; 536  : 			if(self->Roll() * RTD > destRoll)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv316[ebp]
	movss	xmm0, DWORD PTR tv316[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	eax, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [eax+428]
	jbe	SHORT $LN10@RollHold

; 537  : 				rStick = ((0.5F * af->rstick) - (0.5F * max(corrRoll, 6.5F) * DTR));

	movss	xmm0, DWORD PTR _corrRoll$[ebp]
	comiss	xmm0, DWORD PTR __real@40d00000
	jbe	SHORT $LN18@RollHold
	movss	xmm0, DWORD PTR _corrRoll$[ebp]
	movss	DWORD PTR tv158[ebp], xmm0
	jmp	SHORT $LN19@RollHold
$LN18@RollHold:
	movss	xmm0, DWORD PTR __real@40d00000
	movss	DWORD PTR tv158[ebp], xmm0
$LN19@RollHold:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [edx+1504]
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR tv158[ebp]
	mulss	xmm1, DWORD PTR __real@3c8efa34
	subss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+32], xmm0
	jmp	$LN7@RollHold
$LN10@RollHold:

; 538  : 			//turned too far? correct
; 539  : 			else if(self->Roll() * RTD < destRoll)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv329[ebp]
	movss	xmm0, DWORD PTR tv329[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+428]
	comiss	xmm1, xmm0
	jbe	SHORT $LN8@RollHold

; 540  : 				rStick = ((0.5F * af->rstick) + (0.5F * max(corrRoll, 6.5F) * DTR));

	movss	xmm0, DWORD PTR _corrRoll$[ebp]
	comiss	xmm0, DWORD PTR __real@40d00000
	jbe	SHORT $LN20@RollHold
	movss	xmm0, DWORD PTR _corrRoll$[ebp]
	movss	DWORD PTR tv184[ebp], xmm0
	jmp	SHORT $LN21@RollHold
$LN20@RollHold:
	movss	xmm0, DWORD PTR __real@40d00000
	movss	DWORD PTR tv184[ebp], xmm0
$LN21@RollHold:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [ecx+1504]
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR tv184[ebp]
	mulss	xmm1, DWORD PTR __real@3c8efa34
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+32], xmm0

; 541  : 			else

	jmp	SHORT $LN7@RollHold
$LN8@RollHold:

; 542  : 				rStick = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+32], xmm0
$LN7@RollHold:

; 543  : 		}
; 544  : 		else

	jmp	$LN2@RollHold
$LN11@RollHold:

; 545  : 		{
; 546  : 			//bank right
; 547  : 			//How much to correct?
; 548  : 			corrRoll = destRoll - CurrentRoll;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+428]
	subss	xmm0, DWORD PTR _CurrentRoll$[ebp]
	movss	DWORD PTR _corrRoll$[ebp], xmm0

; 549  : 			if(self->Roll() * RTD < destRoll)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv347[ebp]
	movss	xmm0, DWORD PTR tv347[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+428]
	comiss	xmm1, xmm0
	jbe	SHORT $LN5@RollHold

; 550  : 				rStick = ((0.5F * af->rstick) + (0.5F * max(corrRoll, 6.5F) * DTR));

	movss	xmm0, DWORD PTR _corrRoll$[ebp]
	comiss	xmm0, DWORD PTR __real@40d00000
	jbe	SHORT $LN22@RollHold
	movss	xmm0, DWORD PTR _corrRoll$[ebp]
	movss	DWORD PTR tv217[ebp], xmm0
	jmp	SHORT $LN23@RollHold
$LN22@RollHold:
	movss	xmm0, DWORD PTR __real@40d00000
	movss	DWORD PTR tv217[ebp], xmm0
$LN23@RollHold:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [edx+1504]
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR tv217[ebp]
	mulss	xmm1, DWORD PTR __real@3c8efa34
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+32], xmm0
	jmp	$LN2@RollHold
$LN5@RollHold:

; 551  : 			//turned too far? correct
; 552  : 			else if(self->Roll() * RTD > destRoll)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv361[ebp]
	movss	xmm0, DWORD PTR tv361[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	edx, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [edx+428]
	jbe	SHORT $LN3@RollHold

; 553  : 				rStick = ((0.5F * af->rstick) - (0.5F * max(corrRoll, 6.5F) * DTR));

	movss	xmm0, DWORD PTR _corrRoll$[ebp]
	comiss	xmm0, DWORD PTR __real@40d00000
	jbe	SHORT $LN24@RollHold
	movss	xmm0, DWORD PTR _corrRoll$[ebp]
	movss	DWORD PTR tv243[ebp], xmm0
	jmp	SHORT $LN25@RollHold
$LN24@RollHold:
	movss	xmm0, DWORD PTR __real@40d00000
	movss	DWORD PTR tv243[ebp], xmm0
$LN25@RollHold:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [ecx+1504]
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR tv243[ebp]
	mulss	xmm1, DWORD PTR __real@3c8efa34
	subss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+32], xmm0

; 554  : 			else

	jmp	SHORT $LN2@RollHold
$LN3@RollHold:

; 555  : 				rStick = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+32], xmm0
$LN2@RollHold:

; 556  : 		}
; 557  : 	}
; 558  : 	else

	jmp	SHORT $LN1@RollHold
$LN13@RollHold:

; 559  : 		rStick = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+32], xmm0
$LN1@RollHold:

; 560  : 
; 561  : 	//here we get our Roll axis anyway, the AP just holds it
; 562  : 	rStick = 0.5F * af->rstick + 0.5F * UserStickInputs.rstick;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [eax+1504]
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+64
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+32], xmm0
$LN16@RollHold:

; 563  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RollHold@DigitalBrain@@QAEXXZ ENDP			; DigitalBrain::RollHold
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\autopilot.cpp
_TEXT	SEGMENT
tv626 = -108						; size = 4
tv612 = -104						; size = 4
tv594 = -100						; size = 4
tv581 = -96						; size = 4
tv570 = -92						; size = 4
tv563 = -88						; size = 4
tv556 = -84						; size = 4
tv538 = -80						; size = 4
tv524 = -76						; size = 4
tv506 = -72						; size = 4
tv493 = -68						; size = 4
tv482 = -64						; size = 4
tv475 = -60						; size = 4
tv468 = -56						; size = 4
tv416 = -52						; size = 4
tv390 = -48						; size = 4
tv357 = -44						; size = 4
tv331 = -40						; size = 4
tv259 = -36						; size = 4
tv229 = -32						; size = 4
tv192 = -28						; size = 4
tv162 = -24						; size = 4
_CurrentRoll$ = -20					; size = 4
_CurrentPitch$ = -16					; size = 4
_corrRoll$ = -12					; size = 4
_corrPitch$ = -8					; size = 4
_this$ = -4						; size = 4
?PitchRollHold@DigitalBrain@@QAEXXZ PROC		; DigitalBrain::PitchRollHold
; _this$ = ecx

; 357  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	mov	DWORD PTR _this$[ebp], ecx

; 358  : 	if(CheckAPParameters())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckAPParameters@DigitalBrain@@QAEHXZ	; DigitalBrain::CheckAPParameters
	test	eax, eax
	je	SHORT $LN29@PitchRollH

; 359  : 	{
; 360  : 	//	AcceptManual();  MD -- 20031108: switch will remain in selected pitch mode according to the dash one!
; 361  : 		self->SetAutopilot(AircraftClass::APOff);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?SetAutopilot@AircraftClass@@QAEXW4AutoPilotType@1@@Z ; AircraftClass::SetAutopilot

; 362  : 		return;

	jmp	$LN30@PitchRollH
$LN29@PitchRollH:

; 363  : 	}
; 364  : 
; 365  : 	float corrPitch = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _corrPitch$[ebp], xmm0

; 366  : 	float CurrentPitch = self->Pitch() * RTD;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	fstp	DWORD PTR tv468[ebp]
	movss	xmm0, DWORD PTR tv468[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR _CurrentPitch$[ebp], xmm0

; 367  : 	if(CurrentPitch < 0)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _CurrentPitch$[ebp]
	jbe	SHORT $LN28@PitchRollH

; 368  : 		CurrentPitch *= -1;

	movss	xmm0, DWORD PTR _CurrentPitch$[ebp]
	mulss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _CurrentPitch$[ebp], xmm0
$LN28@PitchRollH:

; 369  : 	
; 370  : 	//anything to do?
; 371  : 	if(self->Pitch() * RTD > destPitch + 0.5F ||  self->Pitch() * RTD < destPitch - 0.5F)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	fstp	DWORD PTR tv475[ebp]
	movss	xmm0, DWORD PTR tv475[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+432]
	addss	xmm1, DWORD PTR __real@3f000000
	comiss	xmm0, xmm1
	ja	SHORT $LN26@PitchRollH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	fstp	DWORD PTR tv482[ebp]
	movss	xmm0, DWORD PTR tv482[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+432]
	subss	xmm1, DWORD PTR __real@3f000000
	comiss	xmm1, xmm0
	jbe	$LN27@PitchRollH
$LN26@PitchRollH:

; 372  : 	{
; 373  : 		if(CurrentPitch > destPitch)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _CurrentPitch$[ebp]
	comiss	xmm0, DWORD PTR [eax+432]
	jbe	$LN25@PitchRollH

; 374  : 		{
; 375  : 			//down
; 376  : 			//How much to correct?
; 377  : 			corrPitch = CurrentPitch - destPitch;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _CurrentPitch$[ebp]
	subss	xmm0, DWORD PTR [ecx+432]
	movss	DWORD PTR _corrPitch$[ebp], xmm0

; 378  : 			if(self->Pitch() * RTD > destPitch)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	fstp	DWORD PTR tv493[ebp]
	movss	xmm0, DWORD PTR tv493[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	eax, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [eax+432]
	jbe	SHORT $LN24@PitchRollH

; 379  : 				pStick = ((0.5F * af->pstick) - (0.5F * max(corrPitch * 5.0F,15.0F) * DTR));

	movss	xmm0, DWORD PTR _corrPitch$[ebp]
	mulss	xmm0, DWORD PTR __real@40a00000
	comiss	xmm0, DWORD PTR __real@41700000
	jbe	SHORT $LN32@PitchRollH
	movss	xmm0, DWORD PTR _corrPitch$[ebp]
	mulss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR tv162[ebp], xmm0
	jmp	SHORT $LN33@PitchRollH
$LN32@PitchRollH:
	movss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR tv162[ebp], xmm0
$LN33@PitchRollH:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [edx+1500]
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR tv162[ebp]
	mulss	xmm1, DWORD PTR __real@3c8efa34
	subss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+28], xmm0
	jmp	$LN21@PitchRollH
$LN24@PitchRollH:

; 380  : 			//turned too far? correct
; 381  : 			else if(self->Pitch() * RTD < destPitch)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	fstp	DWORD PTR tv506[ebp]
	movss	xmm0, DWORD PTR tv506[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+432]
	comiss	xmm1, xmm0
	jbe	SHORT $LN22@PitchRollH

; 382  : 				pStick = ((0.5F * af->pstick) + (0.5F * max(corrPitch * 5.0F,15.0F) * DTR));

	movss	xmm0, DWORD PTR _corrPitch$[ebp]
	mulss	xmm0, DWORD PTR __real@40a00000
	comiss	xmm0, DWORD PTR __real@41700000
	jbe	SHORT $LN34@PitchRollH
	movss	xmm0, DWORD PTR _corrPitch$[ebp]
	mulss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR tv192[ebp], xmm0
	jmp	SHORT $LN35@PitchRollH
$LN34@PitchRollH:
	movss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR tv192[ebp], xmm0
$LN35@PitchRollH:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [ecx+1500]
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR tv192[ebp]
	mulss	xmm1, DWORD PTR __real@3c8efa34
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+28], xmm0

; 383  : 			else

	jmp	SHORT $LN21@PitchRollH
$LN22@PitchRollH:

; 384  : 				pStick = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+28], xmm0
$LN21@PitchRollH:

; 385  : 		}
; 386  : 		else

	jmp	$LN16@PitchRollH
$LN25@PitchRollH:

; 387  : 		{
; 388  : 			//up
; 389  : 			//How much to correct?
; 390  : 			corrPitch = destPitch - CurrentPitch;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+432]
	subss	xmm0, DWORD PTR _CurrentPitch$[ebp]
	movss	DWORD PTR _corrPitch$[ebp], xmm0

; 391  : 			if(self->Pitch() * RTD < destPitch)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	fstp	DWORD PTR tv524[ebp]
	movss	xmm0, DWORD PTR tv524[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+432]
	comiss	xmm1, xmm0
	jbe	SHORT $LN19@PitchRollH

; 392  : 				pStick = ((0.5F * af->pstick) + (0.5F * max(corrPitch * 5.0F,15.0F) * DTR));

	movss	xmm0, DWORD PTR _corrPitch$[ebp]
	mulss	xmm0, DWORD PTR __real@40a00000
	comiss	xmm0, DWORD PTR __real@41700000
	jbe	SHORT $LN36@PitchRollH
	movss	xmm0, DWORD PTR _corrPitch$[ebp]
	mulss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR tv229[ebp], xmm0
	jmp	SHORT $LN37@PitchRollH
$LN36@PitchRollH:
	movss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR tv229[ebp], xmm0
$LN37@PitchRollH:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [edx+1500]
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR tv229[ebp]
	mulss	xmm1, DWORD PTR __real@3c8efa34
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+28], xmm0
	jmp	$LN16@PitchRollH
$LN19@PitchRollH:

; 393  : 			//turned too far? correct
; 394  : 			else if(self->Pitch() * RTD > destPitch)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	fstp	DWORD PTR tv538[ebp]
	movss	xmm0, DWORD PTR tv538[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	edx, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [edx+432]
	jbe	SHORT $LN17@PitchRollH

; 395  : 				pStick = ((0.5F * af->pstick) - (0.5F * max(corrPitch * 5.0F,15.0F) * DTR));

	movss	xmm0, DWORD PTR _corrPitch$[ebp]
	mulss	xmm0, DWORD PTR __real@40a00000
	comiss	xmm0, DWORD PTR __real@41700000
	jbe	SHORT $LN38@PitchRollH
	movss	xmm0, DWORD PTR _corrPitch$[ebp]
	mulss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR tv259[ebp], xmm0
	jmp	SHORT $LN39@PitchRollH
$LN38@PitchRollH:
	movss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR tv259[ebp], xmm0
$LN39@PitchRollH:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [ecx+1500]
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR tv259[ebp]
	mulss	xmm1, DWORD PTR __real@3c8efa34
	subss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+28], xmm0

; 396  : 			else

	jmp	SHORT $LN16@PitchRollH
$LN17@PitchRollH:

; 397  : 				pStick = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+28], xmm0
$LN16@PitchRollH:

; 398  : 		}
; 399  : 	}
; 400  : 	else

	jmp	SHORT $LN15@PitchRollH
$LN27@PitchRollH:

; 401  : 		pStick = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+28], xmm0
$LN15@PitchRollH:

; 402  : 
; 403  : 	float corrRoll = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _corrRoll$[ebp], xmm0

; 404  : 	float CurrentRoll = self->Roll() * RTD;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv556[ebp]
	movss	xmm0, DWORD PTR tv556[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR _CurrentRoll$[ebp], xmm0

; 405  : 	if(CurrentRoll < 0)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _CurrentRoll$[ebp]
	jbe	SHORT $LN14@PitchRollH

; 406  : 		CurrentRoll *= -1;

	movss	xmm0, DWORD PTR _CurrentRoll$[ebp]
	mulss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _CurrentRoll$[ebp], xmm0
$LN14@PitchRollH:

; 407  : 	//anything to do?
; 408  : 	if(self->Roll() * RTD > destRoll + 1.0F ||  self->Roll() * RTD < destRoll - 1.0F)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv563[ebp]
	movss	xmm0, DWORD PTR tv563[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+428]
	addss	xmm1, DWORD PTR __real@3f800000
	comiss	xmm0, xmm1
	ja	SHORT $LN12@PitchRollH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv570[ebp]
	movss	xmm0, DWORD PTR tv570[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+428]
	subss	xmm1, DWORD PTR __real@3f800000
	comiss	xmm1, xmm0
	jbe	$LN13@PitchRollH
$LN12@PitchRollH:

; 409  : 	{
; 410  : 		if(CurrentRoll > destRoll)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _CurrentRoll$[ebp]
	comiss	xmm0, DWORD PTR [ecx+428]
	jbe	$LN11@PitchRollH

; 411  : 		{
; 412  : 			//bank left
; 413  : 			//How much to correct?
; 414  : 			corrRoll = CurrentRoll - destRoll;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _CurrentRoll$[ebp]
	subss	xmm0, DWORD PTR [edx+428]
	movss	DWORD PTR _corrRoll$[ebp], xmm0

; 415  : 			if(self->Roll() * RTD > destRoll)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv581[ebp]
	movss	xmm0, DWORD PTR tv581[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	ecx, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [ecx+428]
	jbe	SHORT $LN10@PitchRollH

; 416  : 				rStick = ((0.5F * af->rstick) - (0.5F * max(corrRoll, 6.5F) * DTR));

	movss	xmm0, DWORD PTR _corrRoll$[ebp]
	comiss	xmm0, DWORD PTR __real@40d00000
	jbe	SHORT $LN40@PitchRollH
	movss	xmm0, DWORD PTR _corrRoll$[ebp]
	movss	DWORD PTR tv331[ebp], xmm0
	jmp	SHORT $LN41@PitchRollH
$LN40@PitchRollH:
	movss	xmm0, DWORD PTR __real@40d00000
	movss	DWORD PTR tv331[ebp], xmm0
$LN41@PitchRollH:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [eax+1504]
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR tv331[ebp]
	mulss	xmm1, DWORD PTR __real@3c8efa34
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+32], xmm0
	jmp	$LN7@PitchRollH
$LN10@PitchRollH:

; 417  : 			//turned too far? correct
; 418  : 			else if(self->Roll() * RTD < destRoll)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv594[ebp]
	movss	xmm0, DWORD PTR tv594[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+428]
	comiss	xmm1, xmm0
	jbe	SHORT $LN8@PitchRollH

; 419  : 				rStick = ((0.5F * af->rstick) + (0.5F * max(corrRoll, 6.5F) * DTR));

	movss	xmm0, DWORD PTR _corrRoll$[ebp]
	comiss	xmm0, DWORD PTR __real@40d00000
	jbe	SHORT $LN42@PitchRollH
	movss	xmm0, DWORD PTR _corrRoll$[ebp]
	movss	DWORD PTR tv357[ebp], xmm0
	jmp	SHORT $LN43@PitchRollH
$LN42@PitchRollH:
	movss	xmm0, DWORD PTR __real@40d00000
	movss	DWORD PTR tv357[ebp], xmm0
$LN43@PitchRollH:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [edx+1504]
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR tv357[ebp]
	mulss	xmm1, DWORD PTR __real@3c8efa34
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+32], xmm0

; 420  : 			else

	jmp	SHORT $LN7@PitchRollH
$LN8@PitchRollH:

; 421  : 				rStick = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+32], xmm0
$LN7@PitchRollH:

; 422  : 		}
; 423  : 		else

	jmp	$LN2@PitchRollH
$LN11@PitchRollH:

; 424  : 		{
; 425  : 			//bank right
; 426  : 			//How much to correct?
; 427  : 			corrRoll = destRoll - CurrentRoll;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+428]
	subss	xmm0, DWORD PTR _CurrentRoll$[ebp]
	movss	DWORD PTR _corrRoll$[ebp], xmm0

; 428  : 			if(self->Roll() * RTD < destRoll)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv612[ebp]
	movss	xmm0, DWORD PTR tv612[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+428]
	comiss	xmm1, xmm0
	jbe	SHORT $LN5@PitchRollH

; 429  : 				rStick = ((0.5F * af->rstick) + (0.5F * max(corrRoll, 6.5F) * DTR));

	movss	xmm0, DWORD PTR _corrRoll$[ebp]
	comiss	xmm0, DWORD PTR __real@40d00000
	jbe	SHORT $LN44@PitchRollH
	movss	xmm0, DWORD PTR _corrRoll$[ebp]
	movss	DWORD PTR tv390[ebp], xmm0
	jmp	SHORT $LN45@PitchRollH
$LN44@PitchRollH:
	movss	xmm0, DWORD PTR __real@40d00000
	movss	DWORD PTR tv390[ebp], xmm0
$LN45@PitchRollH:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [eax+1504]
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR tv390[ebp]
	mulss	xmm1, DWORD PTR __real@3c8efa34
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+32], xmm0
	jmp	$LN2@PitchRollH
$LN5@PitchRollH:

; 430  : 			//turned too far? correct
; 431  : 			else if(self->Roll() * RTD > destRoll)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv626[ebp]
	movss	xmm0, DWORD PTR tv626[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	eax, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [eax+428]
	jbe	SHORT $LN3@PitchRollH

; 432  : 				rStick = ((0.5F * af->rstick) - (0.5F * max(corrRoll, 6.5F) * DTR));

	movss	xmm0, DWORD PTR _corrRoll$[ebp]
	comiss	xmm0, DWORD PTR __real@40d00000
	jbe	SHORT $LN46@PitchRollH
	movss	xmm0, DWORD PTR _corrRoll$[ebp]
	movss	DWORD PTR tv416[ebp], xmm0
	jmp	SHORT $LN47@PitchRollH
$LN46@PitchRollH:
	movss	xmm0, DWORD PTR __real@40d00000
	movss	DWORD PTR tv416[ebp], xmm0
$LN47@PitchRollH:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [edx+1504]
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR tv416[ebp]
	mulss	xmm1, DWORD PTR __real@3c8efa34
	subss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+32], xmm0

; 433  : 			else

	jmp	SHORT $LN2@PitchRollH
$LN3@PitchRollH:

; 434  : 				rStick = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+32], xmm0
$LN2@PitchRollH:

; 435  : 		}
; 436  : 	}
; 437  : 	else

	jmp	SHORT $LN1@PitchRollH
$LN13@PitchRollH:

; 438  : 		rStick = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+32], xmm0
$LN1@PitchRollH:
$LN30@PitchRollH:

; 439  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PitchRollHold@DigitalBrain@@QAEXXZ ENDP		; DigitalBrain::PitchRollHold
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\autopilot.cpp
_TEXT	SEGMENT
tv143 = -16						; size = 4
_FinalHeading$ = -12					; size = 4
_curHeading$ = -8					; size = 4
_this$ = -4						; size = 4
?HDGSel@DigitalBrain@@QAEXXZ PROC			; DigitalBrain::HDGSel
; _this$ = ecx

; 491  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 492  : 	if(CheckAPParameters())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckAPParameters@DigitalBrain@@QAEHXZ	; DigitalBrain::CheckAPParameters
	test	eax, eax
	je	SHORT $LN6@HDGSel

; 493  : 	{
; 494  : 	//	AcceptManual();  MD -- 20031108: switch will remain in selected pitch mode according to the dash one!
; 495  : 		self->SetAutopilot(AircraftClass::APOff);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?SetAutopilot@AircraftClass@@QAEXW4AutoPilotType@1@@Z ; AircraftClass::SetAutopilot

; 496  : 		return;

	jmp	$LN7@HDGSel
$LN6@HDGSel:

; 497  : 	}
; 498  : 
; 499  : 	float FinalHeading = OTWDriver.pCockpitManager->mpHsi->GetValue(CPHsi::HSI_VAL_DESIRED_HEADING);

	push	5
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	ecx, DWORD PTR [ecx+692]
	call	?GetValue@CPHsi@@QAEMW4HSIValues@1@@Z	; CPHsi::GetValue
	fstp	DWORD PTR _FinalHeading$[ebp]

; 500  : 	if(FinalHeading == 0)

	movss	xmm0, DWORD PTR _FinalHeading$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN5@HDGSel

; 501  : 		FinalHeading = 360;

	movss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR _FinalHeading$[ebp], xmm0
$LN5@HDGSel:

; 502  : 	float curHeading = self->Yaw() * RTD;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv143[ebp]
	movss	xmm0, DWORD PTR tv143[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR _curHeading$[ebp], xmm0

; 503  : 	if(curHeading < 0)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _curHeading$[ebp]
	jbe	SHORT $LN4@HDGSel

; 504  : 		curHeading += 360;

	movss	xmm0, DWORD PTR _curHeading$[ebp]
	addss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR _curHeading$[ebp], xmm0
$LN4@HDGSel:

; 505  : 	
; 506  : 	HeadingDifference = FinalHeading - curHeading;

	movss	xmm0, DWORD PTR _FinalHeading$[ebp]
	subss	xmm0, DWORD PTR _curHeading$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+676], xmm0

; 507  : 
; 508  : 	if(HeadingDifference >= 180)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+676]
	comiss	xmm0, DWORD PTR __real@43340000
	jb	SHORT $LN3@HDGSel

; 509  : 		HeadingDifference -= 360;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+676]
	subss	xmm0, DWORD PTR __real@43b40000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+676], xmm0
	jmp	SHORT $LN1@HDGSel
$LN3@HDGSel:

; 510  : 	else if(HeadingDifference <= -180)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c3340000
	comiss	xmm0, DWORD PTR [ecx+676]
	jb	SHORT $LN1@HDGSel

; 511  : 		HeadingDifference += 360;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+676]
	addss	xmm0, DWORD PTR __real@43b40000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+676], xmm0
$LN1@HDGSel:

; 512  : 
; 513  : 	CheckForTurn();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckForTurn@DigitalBrain@@QAEXXZ	; DigitalBrain::CheckForTurn
$LN7@HDGSel:

; 514  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HDGSel@DigitalBrain@@QAEXXZ ENDP			; DigitalBrain::HDGSel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\autopilot.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RealisticAP@DigitalBrain@@QAEXXZ PROC			; DigitalBrain::RealisticAP
; _this$ = ecx

; 250  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 251  : 	// do nothing if on ground
; 252  : 	if(self->OnGround())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+56]
	mov	edx, DWORD PTR [eax+148]
	call	edx
	test	eax, eax
	je	SHORT $LN12@RealisticA

; 253  : 		return;

	jmp	$LN13@RealisticA
$LN12@RealisticA:

; 254  : 
; 255  : #if 0  // MD -- 20031108: see "else"
; 256  : 	//Right switch
; 257  : 	if(self->IsOn(AircraftClass::AltHold))	//up
; 258  : 		AltHold();	
; 259  : 	else if(self->IsOn(AircraftClass::AttHold) && self->IsOn(AircraftClass::RollHold))	//down
; 260  : 		PitchRollHold();
; 261  : 	else
; 262  : 		AcceptManual();
; 263  : 
; 264  : 	//Left switch
; 265  : 	if(!self->IsOn(AircraftClass::AttHold))	//does nothing in ATT HOLD position
; 266  : 	{
; 267  : 		if(self->IsOn(AircraftClass::RollHold))
; 268  : 			RollHold();
; 269  : 		else if(self->IsOn(AircraftClass::HDGSel))
; 270  : 			HDGSel();
; 271  : 		else if(self->IsOn(AircraftClass::StrgSel))
; 272  : 			FollowWP();
; 273  : 	}
; 274  : #else
; 275  : 	// MD -- 20031108: reworking autopilot code so that it matches the real behavior a little
; 276  : 	// better.  The AP will hold pitch independently of the left switch state so that if you
; 277  : 	// want pitch hold and STRG SEL for example, you should be allowed to do that.  Old SP3
; 278  : 	// code would only allow fixed pitch and fixed roll hold mode.
; 279  : 
; 280  : 	if(self->IsOn(AircraftClass::AttHold) || self->IsOn(AircraftClass::AltHold)) {

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?IsOn@AircraftClass@@QAEHW4APFlags@1@@Z	; AircraftClass::IsOn
	test	eax, eax
	jne	SHORT $LN10@RealisticA
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?IsOn@AircraftClass@@QAEHW4APFlags@1@@Z	; AircraftClass::IsOn
	test	eax, eax
	je	$LN1@RealisticA
$LN10@RealisticA:

; 281  : 
; 282  : 		//Right switch
; 283  : 		if(self->IsOn(AircraftClass::AltHold))	

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?IsOn@AircraftClass@@QAEHW4APFlags@1@@Z	; AircraftClass::IsOn
	test	eax, eax
	je	SHORT $LN9@RealisticA

; 284  : 			AltHold();	//up

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AltHold@DigitalBrain@@QAEXXZ		; DigitalBrain::AltHold

; 285  : 		else

	jmp	SHORT $LN6@RealisticA
$LN9@RealisticA:

; 286  : 			if (self->IsOn(AircraftClass::AttHold))

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?IsOn@AircraftClass@@QAEHW4APFlags@1@@Z	; AircraftClass::IsOn
	test	eax, eax
	je	SHORT $LN7@RealisticA

; 287  : 				PitchHold();  //down

	mov	ecx, DWORD PTR _this$[ebp]
	call	?PitchHold@DigitalBrain@@QAEXXZ		; DigitalBrain::PitchHold

; 288  : 		else {

	jmp	SHORT $LN6@RealisticA
$LN7@RealisticA:

; 289  : 			AcceptManual();  // not really used unless something really wierd happens...

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AcceptManual@DigitalBrain@@QAEXXZ	; DigitalBrain::AcceptManual

; 290  : 			return;

	jmp	SHORT $LN13@RealisticA
$LN6@RealisticA:

; 291  : 		}
; 292  : 
; 293  : 		//Left switch
; 294  : 		if(self->IsOn(AircraftClass::RollHold))

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?IsOn@AircraftClass@@QAEHW4APFlags@1@@Z	; AircraftClass::IsOn
	test	eax, eax
	je	SHORT $LN5@RealisticA

; 295  : 			RollHold();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RollHold@DigitalBrain@@QAEXXZ		; DigitalBrain::RollHold
	jmp	SHORT $LN1@RealisticA
$LN5@RealisticA:

; 296  : 		else if(self->IsOn(AircraftClass::HDGSel))

	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?IsOn@AircraftClass@@QAEHW4APFlags@1@@Z	; AircraftClass::IsOn
	test	eax, eax
	je	SHORT $LN3@RealisticA

; 297  : 			HDGSel();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HDGSel@DigitalBrain@@QAEXXZ		; DigitalBrain::HDGSel
	jmp	SHORT $LN1@RealisticA
$LN3@RealisticA:

; 298  : 		else if(self->IsOn(AircraftClass::StrgSel))

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?IsOn@AircraftClass@@QAEHW4APFlags@1@@Z	; AircraftClass::IsOn
	test	eax, eax
	je	SHORT $LN1@RealisticA

; 299  : 			FollowWP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FollowWP@DigitalBrain@@QAEXXZ		; DigitalBrain::FollowWP
$LN1@RealisticA:

; 300  : 	}
; 301  : #endif
; 302  : 	//get our pedal
; 303  : 	yPedal = UserStickInputs.rudder;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+80
	movss	DWORD PTR [ecx+36], xmm0
$LN13@RealisticA:

; 304  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RealisticAP@DigitalBrain@@QAEXXZ ENDP			; DigitalBrain::RealisticAP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\autopilot.cpp
_TEXT	SEGMENT
tv1518 = -432						; size = 4
tv1524 = -428						; size = 4
tv1512 = -424						; size = 4
tv1125 = -420						; size = 4
tv1507 = -416						; size = 4
tv1532 = -412						; size = 4
tv1501 = -408						; size = 4
tv1071 = -404						; size = 4
tv1496 = -400						; size = 4
tv1522 = -396						; size = 4
tv1490 = -392						; size = 4
tv1152 = -388						; size = 4
tv1485 = -384						; size = 4
tv1092 = -380						; size = 4
tv1475 = -376						; size = 4
tv1526 = -372						; size = 4
tv1468 = -368						; size = 4
tv1023 = -364						; size = 4
tv1604 = -360						; size = 4
tv1212 = -356						; size = 4
_headingErr$ = -352					; size = 4
tv1161 = -348						; size = 4
tv1441 = -344						; size = 4
tv1137 = -340						; size = 4
tv1436 = -336						; size = 4
tv1102 = -332						; size = 4
tv1428 = -328						; size = 4
tv1083 = -324						; size = 4
tv1423 = -320						; size = 4
tv1528 = -316						; size = 4
tv1415 = -312						; size = 4
tv1053 = -308						; size = 4
tv1410 = -304						; size = 4
tv1038 = -300						; size = 4
tv1402 = -296						; size = 4
tv1012 = -292						; size = 4
tv1397 = -288						; size = 4
tv1534 = -284						; size = 4
tv1370 = -280						; size = 4
tv1175 = -276						; size = 4
tv1361 = -272						; size = 4
tv1166 = -268						; size = 4
tv1339 = -264						; size = 4
tv1530 = -260						; size = 4
tv1334 = -256						; size = 4
tv1142 = -252						; size = 4
tv1602 = -248						; size = 4
tv1130 = -244						; size = 4
tv1329 = -240						; size = 4
tv1109 = -236						; size = 4
tv1322 = -232						; size = 4
tv1097 = -228						; size = 4
tv1304 = -224						; size = 4
tv987 = -220						; size = 4
tv1299 = -216						; size = 4
tv1078 = -212						; size = 4
tv1291 = -208						; size = 4
tv1066 = -204						; size = 4
tv1286 = -200						; size = 4
tv1059 = -196						; size = 4
tv1278 = -192						; size = 4
_alterr$1 = -188					; size = 4
tv1273 = -184						; size = 4
tv1048 = -180						; size = 4
tv1265 = -176						; size = 4
tv1043 = -172						; size = 4
tv1260 = -168						; size = 4
tv1030 = -164						; size = 4
tv1600 = -160						; size = 4
tv1018 = -156						; size = 4
tv1235 = -152						; size = 4
tv1003 = -148						; size = 4
tv1230 = -144						; size = 4
tv992 = -140						; size = 4
tv1217 = -136						; size = 4
tv1087 = -132						; size = 4
tv737 = -128						; size = 4
tv357 = -124						; size = 4
tv736 = -120						; size = 4
tv542 = -116						; size = 4
tv735 = -112						; size = 4
tv279 = -108						; size = 4
tv718 = -104						; size = 4
tv524 = -100						; size = 4
tv701 = -96						; size = 4
tv301 = -92						; size = 4
tv700 = -88						; size = 4
tv559 = -84						; size = 4
tv683 = -80						; size = 4
tv525 = -76						; size = 4
tv604 = -72						; size = 4
_max_roll$ = -68					; size = 4
tv603 = -64						; size = 4
tv346 = -60						; size = 4
tv600 = -56						; size = 4
tv295 = -52						; size = 4
tv561 = -48						; size = 4
tv560 = -44						; size = 4
tv507 = -40						; size = 4
_alterr$2 = -36						; size = 4
_elevCmd$3 = -32					; size = 4
_gammaCmd$4 = -28					; size = 4
_gammaCmd$5 = -24					; size = 4
_desGamma$6 = -20					; size = 4
_roll_multiply$7 = -16					; size = 4
_desGamma$8 = -12					; size = 4
_elevCmd$9 = -8						; size = 4
_this$ = -4						; size = 4
?LantirnAP@DigitalBrain@@QAEXXZ PROC			; DigitalBrain::LantirnAP
; _this$ = ecx

; 89   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 432				; 000001b0H
	mov	DWORD PTR _this$[ebp], ecx

; 90   : 	float max_roll = 50.0F;

	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR _max_roll$[ebp], xmm0

; 91   : 
; 92   : 	//MI
; 93   : 	if(theLantirn->GetTFRMode() == LantirnClass::TFR_STBY)

	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetTFRMode@LantirnClass@@QAE?AW4TfrMode@1@XZ ; LantirnClass::GetTFRMode
	cmp	eax, 3
	jne	SHORT $LN30@LantirnAP

; 94   : 	{
; 95   : 		//Here we want manual control
; 96   : 		self->af->SetMaxRoll(190.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@433e0000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [ecx+932]
	call	?SetMaxRoll@AirframeClass@@QAEXM@Z	; AirframeClass::SetMaxRoll

; 97   : 		rStick = UserStickInputs.rstick;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+64
	movss	DWORD PTR [edx+32], xmm0

; 98   : 		pStick = UserStickInputs.pstick;     

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+60
	movss	DWORD PTR [eax+28], xmm0

; 99   : 		yPedal = UserStickInputs.rudder;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+80
	movss	DWORD PTR [ecx+36], xmm0

; 100  : 		throtl = UserStickInputs.throttle;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?UserStickInputs@@3VPilotInputs@@A+68
	movss	DWORD PTR [edx+40], xmm0

; 101  : 		return;

	jmp	$LN31@LantirnAP
$LN30@LantirnAP:

; 102  : 	}
; 103  : 
; 104  : 	float headingErr;
; 105  : 
; 106  : 	self->af->SetSimpleMode(FALSE);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [ecx+932]
	call	?SetSimpleMode@AirframeClass@@QAEXH@Z	; AirframeClass::SetSimpleMode

; 107  : 	curMode = NoMode;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+136], 25			; 00000019H

; 108  : 	// do nothing if on ground
; 109  : 	if ( self->OnGround() )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+56]
	mov	edx, DWORD PTR [eax+148]
	call	edx
	test	eax, eax
	je	SHORT $LN29@LantirnAP

; 110  : 		return;

	jmp	$LN31@LantirnAP
$LN29@LantirnAP:

; 111  : 
; 112  : 	//   self->af->SetSimpleMode(TRUE);
; 113  : 	//   GroundCheck();
; 114  : 	headingErr = holdPsi - af->sigma;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+164]
	subss	xmm0, DWORD PTR [ecx+1176]
	movss	DWORD PTR _headingErr$[ebp], xmm0

; 115  : 	if(g_bTFRFixes)

	movzx	eax, BYTE PTR ?g_bTFRFixes@@3_NA	; g_bTFRFixes
	test	eax, eax
	je	$LN28@LantirnAP

; 116  : 	{
; 117  : 		//disabled for now...
; 118  : 		//SetYpedal( headingErr * 0.05F * RTD * self->GetVt()/cornerSpeed);
; 119  : 		SetYpedal( 0.0F );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetYpedal@DigitalBrain@@IAEMM@Z	; DigitalBrain::SetYpedal
	fstp	ST(0)

; 120  : 
; 121  : 		//quick and dirty fix to level the wings! -NEES WORK, and possibly hold holdPsi!
; 122  : 		theLantirn->roll = self->Roll();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	mov	edx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	fstp	DWORD PTR [edx+108]

; 123  : 		float roll_multiply = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _roll_multiply$7[ebp], xmm0

; 124  : 		//if (fabs(self->Roll()) * RTD > af->GetTFR_MaxRoll() / 2.0F)
; 125  : 		if (fabs(self->Roll()) * RTD > af->GetTFR_MaxRoll() / 1.0F)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	push	ecx
	fstp	DWORD PTR [esp]
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv987[ebp]
	movss	xmm0, DWORD PTR tv987[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	movss	DWORD PTR tv1522[ebp], xmm0
	call	?GetTFR_MaxRoll@AirframeClass@@QAEMXZ	; AirframeClass::GetTFR_MaxRoll
	fstp	DWORD PTR tv992[ebp]
	movss	xmm0, DWORD PTR tv992[ebp]
	divss	xmm0, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR tv1522[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN27@LantirnAP

; 126  : 			roll_multiply = 1.0F;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _roll_multiply$7[ebp], xmm0

; 127  : 		else

	jmp	SHORT $LN26@LantirnAP
$LN27@LantirnAP:

; 128  : 			roll_multiply = 0.5F;

	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _roll_multiply$7[ebp], xmm0
$LN26@LantirnAP:

; 129  : 		if (fabs(self->Roll()) * RTD * roll_multiply > max_roll)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	push	ecx
	fstp	DWORD PTR [esp]
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1003[ebp]
	movss	xmm0, DWORD PTR tv1003[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mulss	xmm0, DWORD PTR _roll_multiply$7[ebp]
	comiss	xmm0, DWORD PTR _max_roll$[ebp]
	jbe	SHORT $LN25@LantirnAP

; 130  : 			roll_multiply = max_roll / (float) fabs(self->Roll()) * RTD;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	push	ecx
	fstp	DWORD PTR [esp]
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1012[ebp]
	movss	xmm0, DWORD PTR _max_roll$[ebp]
	divss	xmm0, DWORD PTR tv1012[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR _roll_multiply$7[ebp], xmm0
$LN25@LantirnAP:

; 131  : 		if (fabs(self->Roll() * RTD) < 0.001)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv1018[ebp]
	movss	xmm0, DWORD PTR tv1018[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1023[ebp]
	movss	xmm0, DWORD PTR tv1023[ebp]
	cvtss2sd xmm0, xmm0
	movsd	xmm1, QWORD PTR __real@3f50624dd2f1a9fc
	comisd	xmm1, xmm0
	jbe	SHORT $LN24@LantirnAP

; 132  : 			roll_multiply = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _roll_multiply$7[ebp], xmm0
$LN24@LantirnAP:

; 133  : 
; 134  : 		SetRstick( -self->Roll() * roll_multiply * RTD);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv1030[ebp]
	movss	xmm0, DWORD PTR tv1030[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _roll_multiply$7[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRstick@DigitalBrain@@IAEMM@Z	; DigitalBrain::SetRstick
	fstp	ST(0)

; 135  : 		SetMaxRoll (0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMaxRoll@DigitalBrain@@IAEXM@Z	; DigitalBrain::SetMaxRoll

; 136  : 		SetMaxRollDelta (-self->Roll() * roll_multiply * RTD);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv1038[ebp]
	movss	xmm0, DWORD PTR tv1038[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _roll_multiply$7[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMaxRollDelta@DigitalBrain@@IAEXM@Z	; DigitalBrain::SetMaxRollDelta

; 137  : 
; 138  : 
; 139  : 		float alterr = theLantirn->GetHoldHeight() + self->ZPos();

	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetHoldHeight@LantirnClass@@QAEMXZ	; LantirnClass::GetHoldHeight
	fstp	DWORD PTR tv1043[ebp]
	movss	xmm0, DWORD PTR tv1043[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movss	DWORD PTR tv1524[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1048[ebp]
	movss	xmm0, DWORD PTR tv1524[ebp]
	addss	xmm0, DWORD PTR tv1048[ebp]
	movss	DWORD PTR _alterr$1[ebp], xmm0

; 140  : 		float desGamma = alterr * af->GetTFR_Gain() * af->GetTFR_Corner() /self->GetKias();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	call	?GetTFR_Gain@AirframeClass@@QAEMXZ	; AirframeClass::GetTFR_Gain
	fstp	DWORD PTR tv1053[ebp]
	movss	xmm0, DWORD PTR tv1053[ebp]
	mulss	xmm0, DWORD PTR _alterr$1[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	movss	DWORD PTR tv1526[ebp], xmm0
	call	?GetTFR_Corner@AirframeClass@@QAEMXZ	; AirframeClass::GetTFR_Corner
	fstp	DWORD PTR tv1059[ebp]
	movss	xmm0, DWORD PTR tv1526[ebp]
	mulss	xmm0, DWORD PTR tv1059[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR [edx+224]
	movss	DWORD PTR tv1528[ebp], xmm0
	call	eax
	fstp	DWORD PTR tv1066[ebp]
	movss	xmm0, DWORD PTR tv1528[ebp]
	divss	xmm0, DWORD PTR tv1066[ebp]
	movss	DWORD PTR _desGamma$8[ebp], xmm0

; 141  : 
; 142  : 		//if (theLantirn->gammaCorr < 0.0F)
; 143  : 			desGamma += theLantirn->gammaCorr * af->GetTFR_GammaCorrMult();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	call	?GetTFR_GammaCorrMult@AirframeClass@@QAEMXZ ; AirframeClass::GetTFR_GammaCorrMult
	fstp	DWORD PTR tv1071[ebp]
	mov	edx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	movss	xmm0, DWORD PTR tv1071[ebp]
	mulss	xmm0, DWORD PTR [edx+88]
	addss	xmm0, DWORD PTR _desGamma$8[ebp]
	movss	DWORD PTR _desGamma$8[ebp], xmm0

; 144  : 		//else if (theLantirn->gammaCorr < 5.0F)
; 145  : 		//	desGamma += 5.0F + (theLantirn->gammaCorr - 5.0F) / 2.0F;
; 146  : 		//else
; 147  : 		//	desGamma += theLantirn->gammaCorr;
; 148  : 
; 149  : 		desGamma = max ( min ( desGamma, theLantirn->GetGLimit() * 5.0F), -theLantirn->GetGLimit() * 4.0F);

	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1078[ebp]
	movss	xmm0, DWORD PTR tv1078[ebp]
	mulss	xmm0, DWORD PTR __real@40a00000
	comiss	xmm0, DWORD PTR _desGamma$8[ebp]
	jbe	SHORT $LN33@LantirnAP
	movss	xmm0, DWORD PTR _desGamma$8[ebp]
	movss	DWORD PTR tv279[ebp], xmm0
	jmp	SHORT $LN34@LantirnAP
$LN33@LantirnAP:
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1083[ebp]
	movss	xmm0, DWORD PTR tv1083[ebp]
	mulss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR tv279[ebp], xmm0
$LN34@LantirnAP:
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1087[ebp]
	movss	xmm0, DWORD PTR tv1087[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@40800000
	movss	xmm1, DWORD PTR tv279[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN37@LantirnAP
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1092[ebp]
	movss	xmm0, DWORD PTR tv1092[ebp]
	mulss	xmm0, DWORD PTR __real@40a00000
	comiss	xmm0, DWORD PTR _desGamma$8[ebp]
	jbe	SHORT $LN35@LantirnAP
	movss	xmm0, DWORD PTR _desGamma$8[ebp]
	movss	DWORD PTR tv295[ebp], xmm0
	jmp	SHORT $LN36@LantirnAP
$LN35@LantirnAP:
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1097[ebp]
	movss	xmm0, DWORD PTR tv1097[ebp]
	mulss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR tv295[ebp], xmm0
$LN36@LantirnAP:
	movss	xmm0, DWORD PTR tv295[ebp]
	movss	DWORD PTR tv301[ebp], xmm0
	jmp	SHORT $LN38@LantirnAP
$LN37@LantirnAP:
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1102[ebp]
	movss	xmm0, DWORD PTR tv1102[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR tv301[ebp], xmm0
$LN38@LantirnAP:
	movss	xmm0, DWORD PTR tv301[ebp]
	movss	DWORD PTR _desGamma$8[ebp], xmm0

; 150  : 		if (theLantirn->evasize > 0)

	mov	eax, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	cmp	DWORD PTR [eax+36], 0
	jle	SHORT $LN23@LantirnAP

; 151  : 			desGamma += af->GetEVA_Gain() * (theLantirn->evasize)*(theLantirn->evasize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	call	?GetEVA_Gain@AirframeClass@@QAEMXZ	; AirframeClass::GetEVA_Gain
	fstp	DWORD PTR tv1109[ebp]
	movss	xmm0, DWORD PTR tv1109[ebp]
	mov	edx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	cvtsi2ss xmm1, DWORD PTR [edx+36]
	mulss	xmm0, xmm1
	mov	eax, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	cvtsi2ss xmm1, DWORD PTR [eax+36]
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _desGamma$8[ebp]
	movss	DWORD PTR _desGamma$8[ebp], xmm0
$LN23@LantirnAP:

; 152  : 
; 153  : 		if(!g_bCalibrateTFR_PitchCtrl)

	movzx	ecx, BYTE PTR ?g_bCalibrateTFR_PitchCtrl@@3_NA ; g_bCalibrateTFR_PitchCtrl
	test	ecx, ecx
	jne	SHORT $LN22@LantirnAP

; 154  : 			theLantirn->PID_error = desGamma - af->gmma * RTD;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	xmm0, DWORD PTR [eax+1172]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	xmm1, DWORD PTR _desGamma$8[ebp]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	movss	DWORD PTR [ecx+60], xmm1

; 155  : 		else

	jmp	SHORT $LN21@LantirnAP
$LN22@LantirnAP:

; 156  : 			theLantirn->PID_error = (theLantirn->GetTFRAlt() - 300.0F)/100 - af->gmma * RTD;

	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetTFRAlt@LantirnClass@@QAEHXZ		; LantirnClass::GetTFRAlt
	cvtsi2ss xmm0, eax
	subss	xmm0, DWORD PTR __real@43960000
	divss	xmm0, DWORD PTR __real@42c80000
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	movss	xmm1, DWORD PTR [eax+1172]
	mulss	xmm1, DWORD PTR __real@42652ee1
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	movss	DWORD PTR [ecx+60], xmm0
$LN21@LantirnAP:

; 157  : 
; 158  : 		theLantirn->MinG = max(-(theLantirn->GetGLimit()) / 2.0F, -2.0F);

	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1125[ebp]
	movss	xmm0, DWORD PTR tv1125[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR __real@40000000
	comiss	xmm0, DWORD PTR __real@c0000000
	jbe	SHORT $LN39@LantirnAP
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1130[ebp]
	movss	xmm0, DWORD PTR tv1130[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv346[ebp], xmm0
	jmp	SHORT $LN40@LantirnAP
$LN39@LantirnAP:
	movss	xmm0, DWORD PTR __real@c0000000
	movss	DWORD PTR tv346[ebp], xmm0
$LN40@LantirnAP:
	mov	edx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	movss	xmm0, DWORD PTR tv346[ebp]
	movss	DWORD PTR [edx+72], xmm0

; 159  : 		theLantirn->MaxG = min(theLantirn->GetGLimit() -1.0F, 6.5F -1.0F);

	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1137[ebp]
	movss	xmm0, DWORD PTR tv1137[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@40b00000
	comiss	xmm1, xmm0
	jbe	SHORT $LN41@LantirnAP
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1142[ebp]
	movss	xmm0, DWORD PTR tv1142[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv357[ebp], xmm0
	jmp	SHORT $LN42@LantirnAP
$LN41@LantirnAP:
	movss	xmm0, DWORD PTR __real@40b00000
	movss	DWORD PTR tv357[ebp], xmm0
$LN42@LantirnAP:
	mov	eax, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	movss	xmm0, DWORD PTR tv357[ebp]
	movss	DWORD PTR [eax+68], xmm0

; 160  : 
; 161  : 		theLantirn->PID_Output = PIDLoop (theLantirn->PID_error, af->GetPID_K(), af->GetPID_KD(),
; 162  : 			af->GetPID_KI(), SimLibMajorFrameTime, &theLantirn->PID_lastErr, &theLantirn->PID_MX,
; 163  : 			theLantirn->MaxG * af->GetTFR_Corner() / self->GetKias(),
; 164  : 			theLantirn->MinG * af->GetTFR_Corner() / self->GetKias(),
; 165  : 			af->GetTFR_LimitMX());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	call	?GetTFR_LimitMX@AirframeClass@@QAE_NXZ	; AirframeClass::GetTFR_LimitMX
	movzx	edx, al
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	call	?GetTFR_Corner@AirframeClass@@QAEMXZ	; AirframeClass::GetTFR_Corner
	fstp	DWORD PTR tv1152[ebp]
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	movss	xmm0, DWORD PTR tv1152[ebp]
	mulss	xmm0, DWORD PTR [ecx+72]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+224]
	movss	DWORD PTR tv1530[ebp], xmm0
	call	eax
	fstp	DWORD PTR tv1161[ebp]
	movss	xmm0, DWORD PTR tv1530[ebp]
	divss	xmm0, DWORD PTR tv1161[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	call	?GetTFR_Corner@AirframeClass@@QAEMXZ	; AirframeClass::GetTFR_Corner
	fstp	DWORD PTR tv1166[ebp]
	mov	edx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	movss	xmm0, DWORD PTR tv1166[ebp]
	mulss	xmm0, DWORD PTR [edx+68]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+56]
	mov	edx, DWORD PTR [eax+224]
	movss	DWORD PTR tv1532[ebp], xmm0
	call	edx
	fstp	DWORD PTR tv1175[ebp]
	movss	xmm0, DWORD PTR tv1532[ebp]
	divss	xmm0, DWORD PTR tv1175[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	add	eax, 52					; 00000034H
	push	eax
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	add	ecx, 56					; 00000038H
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	call	?GetPID_KI@AirframeClass@@QAEMXZ	; AirframeClass::GetPID_KI
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	call	?GetPID_KD@AirframeClass@@QAEMXZ	; AirframeClass::GetPID_KD
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	call	?GetPID_K@AirframeClass@@QAEMXZ		; AirframeClass::GetPID_K
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	push	ecx
	movss	xmm0, DWORD PTR [edx+60]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PIDLoop@DigitalBrain@@QAEMMMMMMPAM0MM_N@Z ; DigitalBrain::PIDLoop
	mov	eax, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	fstp	DWORD PTR [eax+64]

; 166  : 
; 167  : 		float elevCmd = theLantirn->PID_Output;

	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	movss	xmm0, DWORD PTR [ecx+64]
	movss	DWORD PTR _elevCmd$3[ebp], xmm0

; 168  : 		elevCmd *= self->GetKias() / af->GetTFR_Corner();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+224]
	call	eax
	fstp	DWORD PTR tv1212[ebp]
	movss	xmm0, DWORD PTR tv1212[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	movss	DWORD PTR tv1534[ebp], xmm0
	call	?GetTFR_Corner@AirframeClass@@QAEMXZ	; AirframeClass::GetTFR_Corner
	fstp	DWORD PTR tv1217[ebp]
	movss	xmm0, DWORD PTR tv1534[ebp]
	divss	xmm0, DWORD PTR tv1217[ebp]
	mulss	xmm0, DWORD PTR _elevCmd$3[ebp]
	movss	DWORD PTR _elevCmd$3[ebp], xmm0

; 169  : 		float gammaCmd = elevCmd + (1.0F/self->platformAngles.cosphi);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR [eax+400]
	addss	xmm0, DWORD PTR _elevCmd$3[ebp]
	movss	DWORD PTR _gammaCmd$4[ebp], xmm0

; 170  : 		if (fabs(self->Roll()) < af->GetTFR_MaxRoll() * DTR)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	push	ecx
	fstp	DWORD PTR [esp]
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1230[ebp]
	movss	xmm0, DWORD PTR tv1230[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	movss	DWORD PTR tv1600[ebp], xmm0
	call	?GetTFR_MaxRoll@AirframeClass@@QAEMXZ	; AirframeClass::GetTFR_MaxRoll
	fstp	DWORD PTR tv1235[ebp]
	movss	xmm0, DWORD PTR tv1235[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	xmm1, DWORD PTR tv1600[ebp]
	comiss	xmm0, xmm1
	jbe	$LN16@LantirnAP

; 171  : 		{
; 172  : 			if (theLantirn->evasize == 2)

	mov	eax, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	cmp	DWORD PTR [eax+36], 2
	jne	SHORT $LN19@LantirnAP

; 173  : 				SetPstick (theLantirn->GetGLimit(), af->MaxGs(), AirframeClass::GCommand);

	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	call	?MaxGs@AirframeClass@@QAEMXZ		; AirframeClass::MaxGs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPstick@DigitalBrain@@IAEMMMH@Z	; DigitalBrain::SetPstick
	fstp	ST(0)
	jmp	$LN16@LantirnAP
$LN19@LantirnAP:

; 174  : 			else if (theLantirn->evasize >= 3)

	mov	edx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	cmp	DWORD PTR [edx+36], 3
	jl	SHORT $LN17@LantirnAP

; 175  : 				SetPstick (af->MaxGs(), af->MaxGs(), AirframeClass::GCommand);

	push	128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	call	?MaxGs@AirframeClass@@QAEMXZ		; AirframeClass::MaxGs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	call	?MaxGs@AirframeClass@@QAEMXZ		; AirframeClass::MaxGs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPstick@DigitalBrain@@IAEMMMH@Z	; DigitalBrain::SetPstick
	fstp	ST(0)

; 176  : 			else

	jmp	$LN16@LantirnAP
$LN17@LantirnAP:

; 177  : 				SetPstick(min(max(gammaCmd, max(1.0F - (theLantirn->GetGLimit() - 1) / 2.0F, -2.0F)), 6.5F), maxGs, AirframeClass::GCommand);

	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1260[ebp]
	movss	xmm0, DWORD PTR tv1260[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	comiss	xmm1, DWORD PTR __real@c0000000
	jbe	SHORT $LN43@LantirnAP
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1265[ebp]
	movss	xmm0, DWORD PTR tv1265[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR tv507[ebp], xmm1
	jmp	SHORT $LN44@LantirnAP
$LN43@LantirnAP:
	movss	xmm0, DWORD PTR __real@c0000000
	movss	DWORD PTR tv507[ebp], xmm0
$LN44@LantirnAP:
	movss	xmm0, DWORD PTR _gammaCmd$4[ebp]
	comiss	xmm0, DWORD PTR tv507[ebp]
	jbe	SHORT $LN47@LantirnAP
	movss	xmm0, DWORD PTR _gammaCmd$4[ebp]
	movss	DWORD PTR tv525[ebp], xmm0
	jmp	$LN48@LantirnAP
$LN47@LantirnAP:
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1273[ebp]
	movss	xmm0, DWORD PTR tv1273[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	comiss	xmm1, DWORD PTR __real@c0000000
	jbe	SHORT $LN45@LantirnAP
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1278[ebp]
	movss	xmm0, DWORD PTR tv1278[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR tv524[ebp], xmm1
	jmp	SHORT $LN46@LantirnAP
$LN45@LantirnAP:
	movss	xmm0, DWORD PTR __real@c0000000
	movss	DWORD PTR tv524[ebp], xmm0
$LN46@LantirnAP:
	movss	xmm0, DWORD PTR tv524[ebp]
	movss	DWORD PTR tv525[ebp], xmm0
$LN48@LantirnAP:
	movss	xmm0, DWORD PTR __real@40d00000
	comiss	xmm0, DWORD PTR tv525[ebp]
	jbe	$LN55@LantirnAP
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1286[ebp]
	movss	xmm0, DWORD PTR tv1286[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	comiss	xmm1, DWORD PTR __real@c0000000
	jbe	SHORT $LN49@LantirnAP
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1291[ebp]
	movss	xmm0, DWORD PTR tv1291[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR tv542[ebp], xmm1
	jmp	SHORT $LN50@LantirnAP
$LN49@LantirnAP:
	movss	xmm0, DWORD PTR __real@c0000000
	movss	DWORD PTR tv542[ebp], xmm0
$LN50@LantirnAP:
	movss	xmm0, DWORD PTR _gammaCmd$4[ebp]
	comiss	xmm0, DWORD PTR tv542[ebp]
	jbe	SHORT $LN53@LantirnAP
	movss	xmm0, DWORD PTR _gammaCmd$4[ebp]
	movss	DWORD PTR tv560[ebp], xmm0
	jmp	$LN54@LantirnAP
$LN53@LantirnAP:
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1299[ebp]
	movss	xmm0, DWORD PTR tv1299[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	comiss	xmm1, DWORD PTR __real@c0000000
	jbe	SHORT $LN51@LantirnAP
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1304[ebp]
	movss	xmm0, DWORD PTR tv1304[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR tv559[ebp], xmm1
	jmp	SHORT $LN52@LantirnAP
$LN51@LantirnAP:
	movss	xmm0, DWORD PTR __real@c0000000
	movss	DWORD PTR tv559[ebp], xmm0
$LN52@LantirnAP:
	movss	xmm0, DWORD PTR tv559[ebp]
	movss	DWORD PTR tv560[ebp], xmm0
$LN54@LantirnAP:
	movss	xmm0, DWORD PTR tv560[ebp]
	movss	DWORD PTR tv561[ebp], xmm0
	jmp	SHORT $LN56@LantirnAP
$LN55@LantirnAP:
	movss	xmm0, DWORD PTR __real@40d00000
	movss	DWORD PTR tv561[ebp], xmm0
$LN56@LantirnAP:
	push	128					; 00000080H
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+96]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR tv561[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPstick@DigitalBrain@@IAEMMMH@Z	; DigitalBrain::SetPstick
	fstp	ST(0)
$LN16@LantirnAP:

; 178  : 		}
; 179  : 	}
; 180  : 	else

	jmp	$LN1@LantirnAP
$LN28@LantirnAP:

; 181  : 	{
; 182  : 		if (theLantirn->evasize == 0)

	mov	eax, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	cmp	DWORD PTR [eax+36], 0
	jne	$LN14@LantirnAP

; 183  : 		{
; 184  : 			// JB 010325 Custom hold alt code to minimize neg g's.
; 185  : 			SetYpedal( 0.0F );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetYpedal@DigitalBrain@@IAEMM@Z	; DigitalBrain::SetYpedal
	fstp	ST(0)

; 186  : 			SetRstick( -self->Roll() * 2.0F * RTD);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv1322[ebp]
	movss	xmm0, DWORD PTR tv1322[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR __real@42652ee1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRstick@DigitalBrain@@IAEMM@Z	; DigitalBrain::SetRstick
	fstp	ST(0)

; 187  : 			SetMaxRoll (0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMaxRoll@DigitalBrain@@IAEXM@Z	; DigitalBrain::SetMaxRoll

; 188  : 
; 189  : 			float alterr = theLantirn->GetHoldHeight() + self->ZPos();

	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetHoldHeight@LantirnClass@@QAEMXZ	; LantirnClass::GetHoldHeight
	fstp	DWORD PTR tv1329[ebp]
	movss	xmm0, DWORD PTR tv1329[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	movss	DWORD PTR tv1602[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1334[ebp]
	movss	xmm0, DWORD PTR tv1602[ebp]
	addss	xmm0, DWORD PTR tv1334[ebp]
	movss	DWORD PTR _alterr$2[ebp], xmm0

; 190  : 			alterr -= self->ZDelta();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv1339[ebp]
	movss	xmm0, DWORD PTR _alterr$2[ebp]
	subss	xmm0, DWORD PTR tv1339[ebp]
	movss	DWORD PTR _alterr$2[ebp], xmm0

; 191  : 			float desGamma = alterr * 0.015F;

	movss	xmm0, DWORD PTR _alterr$2[ebp]
	mulss	xmm0, DWORD PTR __real@3c75c28f
	movss	DWORD PTR _desGamma$6[ebp], xmm0

; 192  : 
; 193  : 			desGamma = max ( min ( desGamma, 30.0F), -30.0F);

	movss	xmm0, DWORD PTR __real@41f00000
	comiss	xmm0, DWORD PTR _desGamma$6[ebp]
	jbe	SHORT $LN57@LantirnAP
	movss	xmm0, DWORD PTR _desGamma$6[ebp]
	movss	DWORD PTR tv600[ebp], xmm0
	jmp	SHORT $LN58@LantirnAP
$LN57@LantirnAP:
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR tv600[ebp], xmm0
$LN58@LantirnAP:
	movss	xmm0, DWORD PTR tv600[ebp]
	comiss	xmm0, DWORD PTR __real@c1f00000
	jbe	SHORT $LN61@LantirnAP
	movss	xmm0, DWORD PTR __real@41f00000
	comiss	xmm0, DWORD PTR _desGamma$6[ebp]
	jbe	SHORT $LN59@LantirnAP
	movss	xmm0, DWORD PTR _desGamma$6[ebp]
	movss	DWORD PTR tv603[ebp], xmm0
	jmp	SHORT $LN60@LantirnAP
$LN59@LantirnAP:
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR tv603[ebp], xmm0
$LN60@LantirnAP:
	movss	xmm0, DWORD PTR tv603[ebp]
	movss	DWORD PTR tv604[ebp], xmm0
	jmp	SHORT $LN62@LantirnAP
$LN61@LantirnAP:
	movss	xmm0, DWORD PTR __real@c1f00000
	movss	DWORD PTR tv604[ebp], xmm0
$LN62@LantirnAP:
	movss	xmm0, DWORD PTR tv604[ebp]
	movss	DWORD PTR _desGamma$6[ebp], xmm0

; 194  : 			float elevCmd = desGamma - af->gmma * RTD;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	movss	xmm0, DWORD PTR [edx+1172]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	xmm1, DWORD PTR _desGamma$6[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _elevCmd$9[ebp], xmm1

; 195  : 
; 196  : 			elevCmd *= 0.25F * self->GetKias() / 350.0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+56]
	mov	edx, DWORD PTR [eax+224]
	call	edx
	fstp	DWORD PTR tv1361[ebp]
	movss	xmm0, DWORD PTR tv1361[ebp]
	mulss	xmm0, DWORD PTR __real@3e800000
	divss	xmm0, DWORD PTR __real@43af0000
	mulss	xmm0, DWORD PTR _elevCmd$9[ebp]
	movss	DWORD PTR _elevCmd$9[ebp], xmm0

; 197  : 
; 198  : 			if (fabs (af->gmma) < (45.0F * DTR))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+1172]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1370[ebp]
	movss	xmm0, DWORD PTR __real@3f490fd9
	comiss	xmm0, DWORD PTR tv1370[ebp]
	jbe	SHORT $LN13@LantirnAP

; 199  : 				elevCmd /= self->platformAngles.cosphi;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	movss	xmm0, DWORD PTR _elevCmd$9[ebp]
	divss	xmm0, DWORD PTR [eax+400]
	movss	DWORD PTR _elevCmd$9[ebp], xmm0
$LN13@LantirnAP:

; 200  : 
; 201  : 			if (elevCmd > 0.0F)

	movss	xmm0, DWORD PTR _elevCmd$9[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN12@LantirnAP

; 202  : 				elevCmd *= elevCmd;

	movss	xmm0, DWORD PTR _elevCmd$9[ebp]
	mulss	xmm0, DWORD PTR _elevCmd$9[ebp]
	movss	DWORD PTR _elevCmd$9[ebp], xmm0

; 203  : 			else

	jmp	SHORT $LN11@LantirnAP
$LN12@LantirnAP:

; 204  : 				elevCmd *= -elevCmd;

	movss	xmm0, DWORD PTR _elevCmd$9[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _elevCmd$9[ebp]
	movss	DWORD PTR _elevCmd$9[ebp], xmm0
$LN11@LantirnAP:

; 205  : 
; 206  : 			gammaHoldIError += 0.0025F*elevCmd;

	movss	xmm0, DWORD PTR __real@3b23d70a
	mulss	xmm0, DWORD PTR _elevCmd$9[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+168]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+168], xmm0

; 207  : 			if (gammaHoldIError > 1.0F)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+168]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN10@LantirnAP

; 208  : 				gammaHoldIError = 1.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+168], xmm0
	jmp	SHORT $LN8@LantirnAP
$LN10@LantirnAP:

; 209  : 			else if (gammaHoldIError < -1.0F)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	comiss	xmm0, DWORD PTR [edx+168]
	jbe	SHORT $LN8@LantirnAP

; 210  : 				gammaHoldIError = -1.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax+168], xmm0
$LN8@LantirnAP:

; 211  : 
; 212  : 			float gammaCmd = gammaHoldIError + elevCmd + (1.0F/self->platformAngles.cosphi);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+168]
	addss	xmm0, DWORD PTR _elevCmd$9[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, DWORD PTR [eax+400]
	addss	xmm0, xmm1
	movss	DWORD PTR _gammaCmd$5[ebp], xmm0

; 213  : 			SetPstick(min(max(gammaCmd, max(1.0f - (theLantirn->GetGLimit() - 1) / 2.0f, -2.0F)), 6.5F), maxGs, AirframeClass::GCommand);

	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1397[ebp]
	movss	xmm0, DWORD PTR tv1397[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	comiss	xmm1, DWORD PTR __real@c0000000
	jbe	SHORT $LN63@LantirnAP
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1402[ebp]
	movss	xmm0, DWORD PTR tv1402[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR tv683[ebp], xmm1
	jmp	SHORT $LN64@LantirnAP
$LN63@LantirnAP:
	movss	xmm0, DWORD PTR __real@c0000000
	movss	DWORD PTR tv683[ebp], xmm0
$LN64@LantirnAP:
	movss	xmm0, DWORD PTR _gammaCmd$5[ebp]
	comiss	xmm0, DWORD PTR tv683[ebp]
	jbe	SHORT $LN67@LantirnAP
	movss	xmm0, DWORD PTR _gammaCmd$5[ebp]
	movss	DWORD PTR tv701[ebp], xmm0
	jmp	$LN68@LantirnAP
$LN67@LantirnAP:
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1410[ebp]
	movss	xmm0, DWORD PTR tv1410[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	comiss	xmm1, DWORD PTR __real@c0000000
	jbe	SHORT $LN65@LantirnAP
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1415[ebp]
	movss	xmm0, DWORD PTR tv1415[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR tv700[ebp], xmm1
	jmp	SHORT $LN66@LantirnAP
$LN65@LantirnAP:
	movss	xmm0, DWORD PTR __real@c0000000
	movss	DWORD PTR tv700[ebp], xmm0
$LN66@LantirnAP:
	movss	xmm0, DWORD PTR tv700[ebp]
	movss	DWORD PTR tv701[ebp], xmm0
$LN68@LantirnAP:
	movss	xmm0, DWORD PTR __real@40d00000
	comiss	xmm0, DWORD PTR tv701[ebp]
	jbe	$LN75@LantirnAP
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1423[ebp]
	movss	xmm0, DWORD PTR tv1423[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	comiss	xmm1, DWORD PTR __real@c0000000
	jbe	SHORT $LN69@LantirnAP
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1428[ebp]
	movss	xmm0, DWORD PTR tv1428[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR tv718[ebp], xmm1
	jmp	SHORT $LN70@LantirnAP
$LN69@LantirnAP:
	movss	xmm0, DWORD PTR __real@c0000000
	movss	DWORD PTR tv718[ebp], xmm0
$LN70@LantirnAP:
	movss	xmm0, DWORD PTR _gammaCmd$5[ebp]
	comiss	xmm0, DWORD PTR tv718[ebp]
	jbe	SHORT $LN73@LantirnAP
	movss	xmm0, DWORD PTR _gammaCmd$5[ebp]
	movss	DWORD PTR tv736[ebp], xmm0
	jmp	$LN74@LantirnAP
$LN73@LantirnAP:
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1436[ebp]
	movss	xmm0, DWORD PTR tv1436[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	comiss	xmm1, DWORD PTR __real@c0000000
	jbe	SHORT $LN71@LantirnAP
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	fstp	DWORD PTR tv1441[ebp]
	movss	xmm0, DWORD PTR tv1441[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR tv735[ebp], xmm1
	jmp	SHORT $LN72@LantirnAP
$LN71@LantirnAP:
	movss	xmm0, DWORD PTR __real@c0000000
	movss	DWORD PTR tv735[ebp], xmm0
$LN72@LantirnAP:
	movss	xmm0, DWORD PTR tv735[ebp]
	movss	DWORD PTR tv736[ebp], xmm0
$LN74@LantirnAP:
	movss	xmm0, DWORD PTR tv736[ebp]
	movss	DWORD PTR tv737[ebp], xmm0
	jmp	SHORT $LN76@LantirnAP
$LN75@LantirnAP:
	movss	xmm0, DWORD PTR __real@40d00000
	movss	DWORD PTR tv737[ebp], xmm0
$LN76@LantirnAP:
	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+96]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR tv737[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPstick@DigitalBrain@@IAEMMMH@Z	; DigitalBrain::SetPstick
	fstp	ST(0)

; 214  : 		}
; 215  : 		else 

	jmp	SHORT $LN7@LantirnAP
$LN14@LantirnAP:

; 216  : 			SetPstick (theLantirn->GetGLimit(), af->MaxGs(), AirframeClass::GCommand);

	push	128					; 00000080H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	call	?MaxGs@AirframeClass@@QAEMXZ		; AirframeClass::MaxGs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?GetGLimit@LantirnClass@@QAEMXZ		; LantirnClass::GetGLimit
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPstick@DigitalBrain@@IAEMMMH@Z	; DigitalBrain::SetPstick
	fstp	ST(0)
$LN7@LantirnAP:

; 217  : 		
; 218  : 
; 219  : 		SetYpedal( headingErr * 0.05F * RTD * self->GetVt()/cornerSpeed);

	movss	xmm0, DWORD PTR _headingErr$[ebp]
	mulss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+56]
	mov	edx, DWORD PTR [eax+220]
	movss	DWORD PTR tv1604[ebp], xmm0
	call	edx
	fstp	DWORD PTR tv1468[ebp]
	movss	xmm0, DWORD PTR tv1604[ebp]
	mulss	xmm0, DWORD PTR tv1468[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [eax+100]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetYpedal@DigitalBrain@@IAEMM@Z	; DigitalBrain::SetYpedal
	fstp	ST(0)

; 220  : 		SetMaxRoll ((float)fabs(self->Roll()*RTD));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv1475[ebp]
	movss	xmm0, DWORD PTR tv1475[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMaxRoll@DigitalBrain@@IAEXM@Z	; DigitalBrain::SetMaxRoll

; 221  : 
; 222  : 		if (self->Roll() > 5.0F * DTR)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv1485[ebp]
	movss	xmm0, DWORD PTR tv1485[ebp]
	comiss	xmm0, DWORD PTR __real@3db2b8c1
	jbe	SHORT $LN6@LantirnAP

; 223  : 			SetMaxRollDelta (-self->Roll()*RTD);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv1490[ebp]
	movss	xmm0, DWORD PTR tv1490[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@42652ee1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMaxRollDelta@DigitalBrain@@IAEXM@Z	; DigitalBrain::SetMaxRollDelta
	jmp	$LN1@LantirnAP
$LN6@LantirnAP:

; 224  : 		else if (self->Roll() >= 0.0F * DTR)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv1496[ebp]
	movss	xmm0, DWORD PTR tv1496[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN4@LantirnAP

; 225  : 			SetMaxRollDelta (-self->Roll()*RTD - 1.0F * DTR);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv1501[ebp]
	movss	xmm0, DWORD PTR tv1501[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@42652ee1
	subss	xmm0, DWORD PTR __real@3c8efa34
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMaxRollDelta@DigitalBrain@@IAEXM@Z	; DigitalBrain::SetMaxRollDelta
	jmp	$LN1@LantirnAP
$LN4@LantirnAP:

; 226  : 		else if (self->Roll() > -5.0F * DTR)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv1507[ebp]
	movss	xmm0, DWORD PTR tv1507[ebp]
	comiss	xmm0, DWORD PTR __real@bdb2b8c1
	jbe	SHORT $LN2@LantirnAP

; 227  : 			SetMaxRollDelta (-self->Roll()*RTD + 1.0F * DTR);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv1512[ebp]
	movss	xmm0, DWORD PTR tv1512[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@42652ee1
	addss	xmm0, DWORD PTR __real@3c8efa34
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMaxRollDelta@DigitalBrain@@IAEXM@Z	; DigitalBrain::SetMaxRollDelta

; 228  : 		else

	jmp	SHORT $LN1@LantirnAP
$LN2@LantirnAP:

; 229  : 			SetMaxRollDelta (-self->Roll()*RTD);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv1518[ebp]
	movss	xmm0, DWORD PTR tv1518[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@42652ee1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMaxRollDelta@DigitalBrain@@IAEXM@Z	; DigitalBrain::SetMaxRollDelta
$LN1@LantirnAP:
$LN31@LantirnAP:

; 230  : 	}
; 231  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?LantirnAP@DigitalBrain@@QAEXXZ ENDP			; DigitalBrain::LantirnAP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\autopilot.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?WaypointAP@DigitalBrain@@QAEXXZ PROC			; DigitalBrain::WaypointAP
; _this$ = ecx

; 56   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 57   : 	self->af->SetSimpleMode(TRUE);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [ecx+932]
	call	?SetSimpleMode@AirframeClass@@QAEXH@Z	; AirframeClass::SetSimpleMode

; 58   :    GroundCheck();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GroundCheck@DigitalBrain@@IAEXXZ	; DigitalBrain::GroundCheck

; 59   : 
; 60   :    if (self->curWaypoint)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	cmp	DWORD PTR [eax+728], 0
	je	SHORT $LN7@WaypointAP

; 61   :    {
; 62   : 	   if(((AircraftClass*) self)->af->GetSimpleMode())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+932]
	call	?GetSimpleMode@AirframeClass@@QAEHXZ	; AirframeClass::GetSimpleMode
	test	eax, eax
	je	SHORT $LN6@WaypointAP

; 63   :       {
; 64   : 		   SimpleGoToCurrentWaypoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SimpleGoToCurrentWaypoint@DigitalBrain@@IAEXXZ ; DigitalBrain::SimpleGoToCurrentWaypoint

; 65   : 	   }
; 66   : 	   else

	jmp	SHORT $LN5@WaypointAP
$LN6@WaypointAP:

; 67   :       {
; 68   : 		   GoToCurrentWaypoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GoToCurrentWaypoint@DigitalBrain@@IAEXXZ ; DigitalBrain::GoToCurrentWaypoint
$LN5@WaypointAP:

; 69   : 	   }
; 70   :       lastMode = curMode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	mov	DWORD PTR [eax+140], edx

; 71   :       curMode = WaypointMode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+136], 22			; 00000016H

; 72   :       if (groundAvoidNeeded)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+104], 0
	je	SHORT $LN4@WaypointAP

; 73   :          PullUp();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?PullUp@DigitalBrain@@IAEXXZ		; DigitalBrain::PullUp
$LN4@WaypointAP:

; 74   :    }
; 75   :    else

	jmp	SHORT $LN8@WaypointAP
$LN7@WaypointAP:

; 76   :    {
; 77   :       if (self->waypoint)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	cmp	DWORD PTR [eax+732], 0
	je	SHORT $LN2@WaypointAP

; 78   :       {
; 79   :          self->curWaypoint = self->waypoint;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [edx+732]
	mov	DWORD PTR [ecx+728], edx

; 80   :       }
; 81   :       else

	jmp	SHORT $LN8@WaypointAP
$LN2@WaypointAP:

; 82   :       {
; 83   :          Loiter();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Loiter@DigitalBrain@@IAEXXZ		; DigitalBrain::Loiter
$LN8@WaypointAP:

; 84   :       }
; 85   :    }
; 86   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?WaypointAP@DigitalBrain@@QAEXXZ ENDP			; DigitalBrain::WaypointAP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\autopilot.cpp
_TEXT	SEGMENT
tv301 = -48						; size = 4
tv295 = -44						; size = 4
tv290 = -40						; size = 4
tv284 = -36						; size = 4
tv279 = -32						; size = 4
tv273 = -28						; size = 4
tv268 = -24						; size = 4
tv258 = -20						; size = 4
tv251 = -16						; size = 4
tv305 = -12						; size = 4
_headingErr$ = -8					; size = 4
_this$ = -4						; size = 4
?ThreeAxisAP@DigitalBrain@@QAEXXZ PROC			; DigitalBrain::ThreeAxisAP
; _this$ = ecx

; 23   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 24   :    float headingErr;
; 25   : 
; 26   : 	self->af->SetSimpleMode(FALSE);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [ecx+932]
	call	?SetSimpleMode@AirframeClass@@QAEXH@Z	; AirframeClass::SetSimpleMode

; 27   : 
; 28   :    // do nothing if on ground
; 29   :    if ( self->OnGround() )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	je	SHORT $LN7@ThreeAxisA

; 30   :    		return;

	jmp	$LN8@ThreeAxisA
$LN7@ThreeAxisA:

; 31   : 
; 32   :    headingErr = holdPsi - af->sigma;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+164]
	subss	xmm0, DWORD PTR [edx+1176]
	movss	DWORD PTR _headingErr$[ebp], xmm0

; 33   :    AltitudeHold(holdAlt);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+160]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AltitudeHold@DigitalBrain@@IAEHM@Z	; DigitalBrain::AltitudeHold

; 34   :    SetYpedal( headingErr * 0.05F * RTD * self->GetVt()/cornerSpeed);

	movss	xmm0, DWORD PTR _headingErr$[ebp]
	mulss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+220]
	movss	DWORD PTR tv305[ebp], xmm0
	call	eax
	fstp	DWORD PTR tv251[ebp]
	movss	xmm0, DWORD PTR tv305[ebp]
	mulss	xmm0, DWORD PTR tv251[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [ecx+100]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetYpedal@DigitalBrain@@IAEMM@Z	; DigitalBrain::SetYpedal
	fstp	ST(0)

; 35   :    SetMaxRoll ((float)fabs(self->Roll()*RTD));

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv258[ebp]
	movss	xmm0, DWORD PTR tv258[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMaxRoll@DigitalBrain@@IAEXM@Z	; DigitalBrain::SetMaxRoll

; 36   : 
; 37   :    if (self->Roll() > 5.0F * DTR)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv268[ebp]
	movss	xmm0, DWORD PTR tv268[ebp]
	comiss	xmm0, DWORD PTR __real@3db2b8c1
	jbe	SHORT $LN6@ThreeAxisA

; 38   :    {
; 39   :       SetMaxRollDelta (-self->Roll()*RTD);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv273[ebp]
	movss	xmm0, DWORD PTR tv273[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@42652ee1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMaxRollDelta@DigitalBrain@@IAEXM@Z	; DigitalBrain::SetMaxRollDelta
	jmp	$LN1@ThreeAxisA
$LN6@ThreeAxisA:

; 40   :    }
; 41   :    else if (self->Roll() >= 0.0F * DTR)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv279[ebp]
	movss	xmm0, DWORD PTR tv279[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN4@ThreeAxisA

; 42   :    {
; 43   :       SetMaxRollDelta (-self->Roll()*RTD - 1.0F * DTR);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv284[ebp]
	movss	xmm0, DWORD PTR tv284[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@42652ee1
	subss	xmm0, DWORD PTR __real@3c8efa34
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMaxRollDelta@DigitalBrain@@IAEXM@Z	; DigitalBrain::SetMaxRollDelta
	jmp	$LN1@ThreeAxisA
$LN4@ThreeAxisA:

; 44   :    }
; 45   :    else if (self->Roll() > -5.0F * DTR)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv290[ebp]
	movss	xmm0, DWORD PTR tv290[ebp]
	comiss	xmm0, DWORD PTR __real@bdb2b8c1
	jbe	SHORT $LN2@ThreeAxisA

; 46   :    {
; 47   :       SetMaxRollDelta (-self->Roll()*RTD + 1.0F * DTR);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv295[ebp]
	movss	xmm0, DWORD PTR tv295[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@42652ee1
	addss	xmm0, DWORD PTR __real@3c8efa34
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMaxRollDelta@DigitalBrain@@IAEXM@Z	; DigitalBrain::SetMaxRollDelta

; 48   :    }
; 49   :    else

	jmp	SHORT $LN1@ThreeAxisA
$LN2@ThreeAxisA:

; 50   :    {
; 51   :       SetMaxRollDelta (-self->Roll()*RTD);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv301[ebp]
	movss	xmm0, DWORD PTR tv301[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@42652ee1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMaxRollDelta@DigitalBrain@@IAEXM@Z	; DigitalBrain::SetMaxRollDelta
$LN1@ThreeAxisA:
$LN8@ThreeAxisA:

; 52   :    }
; 53   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ThreeAxisAP@DigitalBrain@@QAEXXZ ENDP			; DigitalBrain::ThreeAxisAP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\autopilot.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
_MD$ = -12						; size = 4
_MP$ = -8						; size = 4
_Output$ = -4						; size = 4
_error$ = 8						; size = 4
_K$ = 12						; size = 4
_KD$ = 16						; size = 4
_KI$ = 20						; size = 4
_Ts$ = 24						; size = 4
_lastErr$ = 28						; size = 4
_MX$ = 32						; size = 4
_Output_Top$ = 36					; size = 4
_Output_Bottom$ = 40					; size = 4
_LimitMX$ = 44						; size = 1
?PIDLoop@DigitalBrain@@QAEMMMMMMPAM0MM_N@Z PROC		; DigitalBrain::PIDLoop
; _this$ = ecx

; 234  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 235  : 	float MP = K * error;

	movss	xmm0, DWORD PTR _K$[ebp]
	mulss	xmm0, DWORD PTR _error$[ebp]
	movss	DWORD PTR _MP$[ebp], xmm0

; 236  : 	float MD = KD/Ts * (error - *lastErr);

	movss	xmm0, DWORD PTR _KD$[ebp]
	divss	xmm0, DWORD PTR _Ts$[ebp]
	mov	eax, DWORD PTR _lastErr$[ebp]
	movss	xmm1, DWORD PTR _error$[ebp]
	subss	xmm1, DWORD PTR [eax]
	mulss	xmm0, xmm1
	movss	DWORD PTR _MD$[ebp], xmm0

; 237  : 	*MX += KI*Ts * error;

	movss	xmm0, DWORD PTR _KI$[ebp]
	mulss	xmm0, DWORD PTR _Ts$[ebp]
	mulss	xmm0, DWORD PTR _error$[ebp]
	mov	ecx, DWORD PTR _MX$[ebp]
	addss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _MX$[ebp]
	movss	DWORD PTR [edx], xmm0

; 238  : 	float Output = MP + MD + *MX;

	movss	xmm0, DWORD PTR _MP$[ebp]
	addss	xmm0, DWORD PTR _MD$[ebp]
	mov	eax, DWORD PTR _MX$[ebp]
	addss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _Output$[ebp], xmm0

; 239  : 	if (Output > Output_Top)

	movss	xmm0, DWORD PTR _Output$[ebp]
	comiss	xmm0, DWORD PTR _Output_Top$[ebp]
	jbe	SHORT $LN3@PIDLoop

; 240  : 		Output = Output_Top;

	movss	xmm0, DWORD PTR _Output_Top$[ebp]
	movss	DWORD PTR _Output$[ebp], xmm0
$LN3@PIDLoop:

; 241  : 	if (Output < Output_Bottom)

	movss	xmm0, DWORD PTR _Output_Bottom$[ebp]
	comiss	xmm0, DWORD PTR _Output$[ebp]
	jbe	SHORT $LN2@PIDLoop

; 242  : 		Output = Output_Bottom;

	movss	xmm0, DWORD PTR _Output_Bottom$[ebp]
	movss	DWORD PTR _Output$[ebp], xmm0
$LN2@PIDLoop:

; 243  : 	if (LimitMX)

	movzx	ecx, BYTE PTR _LimitMX$[ebp]
	test	ecx, ecx
	je	SHORT $LN1@PIDLoop

; 244  : 		*MX = Output - MP - MD;

	movss	xmm0, DWORD PTR _Output$[ebp]
	subss	xmm0, DWORD PTR _MP$[ebp]
	subss	xmm0, DWORD PTR _MD$[ebp]
	mov	edx, DWORD PTR _MX$[ebp]
	movss	DWORD PTR [edx], xmm0
$LN1@PIDLoop:

; 245  : 	*lastErr = error;

	mov	eax, DWORD PTR _lastErr$[ebp]
	movss	xmm0, DWORD PTR _error$[ebp]
	movss	DWORD PTR [eax], xmm0

; 246  : 
; 247  : 	return Output;

	fld	DWORD PTR _Output$[ebp]

; 248  : }

	mov	esp, ebp
	pop	ebp
	ret	40					; 00000028H
?PIDLoop@DigitalBrain@@QAEMMMMMMPAM0MM_N@Z ENDP		; DigitalBrain::PIDLoop
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?checked_atan2@@YANNN@Z
_TEXT	SEGMENT
_z$ = -8						; size = 8
_y$ = 8							; size = 8
_x$ = 16						; size = 8
?checked_atan2@@YANNN@Z PROC				; checked_atan2, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 47   : 	double z;
; 48   : 	
; 49   : 	if (x == -0.0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@8000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@checked_at

; 50   : 		x = 0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _x$[ebp], xmm0
$LN8@checked_at:

; 51   : 	
; 52   : 	if (x != 0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@checked_at

; 53   : 		z = atan(y / x);

	movsd	xmm0, QWORD PTR _y$[ebp]
	divsd	xmm0, QWORD PTR _x$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR _z$[ebp]
	jmp	SHORT $LN4@checked_at
$LN7@checked_at:

; 54   : 	else if (y > 0)

	movsd	xmm0, QWORD PTR _y$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@checked_at

; 55   : 		z = HALF_DPI;

	movsd	xmm0, QWORD PTR __real@3ff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 56   : 	else

	jmp	SHORT $LN4@checked_at
$LN5@checked_at:

; 57   : 		z = -HALF_DPI;

	movsd	xmm0, QWORD PTR __real@bff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN4@checked_at:

; 58   : 
; 59   : 	if (x < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _x$[ebp]
	jbe	SHORT $LN1@checked_at

; 60   : 	{
; 61   : 		if (y < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _y$[ebp]
	jbe	SHORT $LN2@checked_at

; 62   : 			z -= DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	subsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 63   : 		else

	jmp	SHORT $LN1@checked_at
$LN2@checked_at:

; 64   : 			z += DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	addsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN1@checked_at:

; 65   : 	}
; 66   : 
; 67   : 	return z;

	fld	QWORD PTR _z$[ebp]

; 68   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?checked_atan2@@YANNN@Z ENDP				; checked_atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Roll@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Roll@VuEntity@@QBEMXZ PROC				; VuEntity::Roll, COMDAT
; _this$ = ecx

; 166  : 	SM_SCALAR Roll() const { return orient_.roll_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+68]
	mov	esp, ebp
	pop	ebp
	ret	0
?Roll@VuEntity@@QBEMXZ ENDP				; VuEntity::Roll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Pitch@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Pitch@VuEntity@@QBEMXZ PROC				; VuEntity::Pitch, COMDAT
; _this$ = ecx

; 165  : 	SM_SCALAR Pitch() const { return orient_.pitch_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+64]
	mov	esp, ebp
	pop	ebp
	ret	0
?Pitch@VuEntity@@QBEMXZ ENDP				; VuEntity::Pitch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Yaw@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Yaw@VuEntity@@QBEMXZ PROC				; VuEntity::Yaw, COMDAT
; _this$ = ecx

; 164  : 	SM_SCALAR Yaw() const { return orient_.yaw_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?Yaw@VuEntity@@QBEMXZ ENDP				; VuEntity::Yaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZDelta@VuEntity@@QBEMXZ PROC				; VuEntity::ZDelta, COMDAT
; _this$ = ecx

; 163  : 	SM_SCALAR ZDelta() const { return pos_.dz_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::ZDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
