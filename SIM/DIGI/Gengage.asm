; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\DIGI\Gengage.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
_DATA	SEGMENT
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	ORG $+4
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_DATA	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	_atanf
PUBLIC	_sinf
PUBLIC	?atan@@YAMM@Z					; atan
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?XDelta@VuEntity@@QBEMXZ			; VuEntity::XDelta
PUBLIC	?YDelta@VuEntity@@QBEMXZ			; VuEntity::YDelta
PUBLIC	?ZDelta@VuEntity@@QBEMXZ			; VuEntity::ZDelta
PUBLIC	?Yaw@VuEntity@@QBEMXZ				; VuEntity::Yaw
PUBLIC	?Pitch@VuEntity@@QBEMXZ				; VuEntity::Pitch
PUBLIC	?Roll@VuEntity@@QBEMXZ				; VuEntity::Roll
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	?mlSinCos@@YAXPAUmlTrig@@M@Z			; mlSinCos
PUBLIC	?checked_atan2@@YANNN@Z				; checked_atan2
PUBLIC	?SetFlag@BaseBrain@@QAEXH@Z			; BaseBrain::SetFlag
PUBLIC	?GunsEngage@DigitalBrain@@IAEXXZ		; DigitalBrain::GunsEngage
PUBLIC	?TrainableGunsEngage@DigitalBrain@@IAEXXZ	; DigitalBrain::TrainableGunsEngage
PUBLIC	?GunsAutoTrack@DigitalBrain@@IAEMM@Z		; DigitalBrain::GunsAutoTrack
PUBLIC	?FineGunsTrack@DigitalBrain@@IAEXMPAM@Z		; DigitalBrain::FineGunsTrack
PUBLIC	?CoarseGunsTrack@DigitalBrain@@IAEXMMPAM@Z	; DigitalBrain::CoarseGunsTrack
PUBLIC	?GunsEngageCheck@DigitalBrain@@IAEXXZ		; DigitalBrain::GunsEngageCheck
PUBLIC	?SetTrackPoint@DigitalBrain@@QAEXMM@Z		; DigitalBrain::SetTrackPoint
PUBLIC	?SetTrackPoint@DigitalBrain@@QAEXMMM@Z		; DigitalBrain::SetTrackPoint
PUBLIC	?SetATCFlag@DigitalBrain@@QAEXH@Z		; DigitalBrain::SetATCFlag
PUBLIC	?ClearATCFlag@DigitalBrain@@QAEXH@Z		; DigitalBrain::ClearATCFlag
PUBLIC	?IsSetATC@DigitalBrain@@QAEHH@Z			; DigitalBrain::IsSetATC
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ	; SimObjectType::BaseData
PUBLIC	?GsAvail@AirframeClass@@QAEMXZ			; AirframeClass::GsAvail
PUBLIC	?NumHardpoints@SMSBaseClass@@QAEHXZ		; SMSBaseClass::NumHardpoints
PUBLIC	??_C@_0CD@HOIBHIKC@Help?5me?0?5I?8m?5Stuck?5in?5a?5Luffberr@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3c0efa34
PUBLIC	__real@3c23d70a
PUBLIC	__real@3d0efa34
PUBLIC	__real@3db2b8c1
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e32b8c1
PUBLIC	__real@3e860a91
PUBLIC	__real@3edf66f1
PUBLIC	__real@3f060a91
PUBLIC	__real@3f17ac60
PUBLIC	__real@3f1c61a9
PUBLIC	__real@3f490fd9
PUBLIC	__real@3f5f66f1
PUBLIC	__real@3f800000
PUBLIC	__real@3f860a91
PUBLIC	__real@3f9acee9c0000000
PUBLIC	__real@3fa1df4680000000
PUBLIC	__real@3faf46bb60000000
PUBLIC	__real@3fc90fd9
PUBLIC	__real@3ff4000000000000
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@40000000
PUBLIC	__real@40060a91
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@40490fd9
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@4180b53f
PUBLIC	__real@41f00000
PUBLIC	__real@4200b53f
PUBLIC	__real@42480000
PUBLIC	__real@42652ee1
PUBLIC	__real@42c80000
PUBLIC	__real@44480000
PUBLIC	__real@447a0000
PUBLIC	__real@44af0000
PUBLIC	__real@44fa0000
PUBLIC	__real@453b8000
PUBLIC	__real@455ac000
PUBLIC	__real@463de1b0
PUBLIC	__real@8000000000000000
PUBLIC	__real@bcd6774e
PUBLIC	__real@bd0efa34
PUBLIC	__real@bfc90fd9
PUBLIC	__real@bff921fb54442d18
PUBLIC	__real@c0490fd9
PUBLIC	__real@c3af0000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_atan:PROC
EXTRN	_fabs:PROC
EXTRN	_sin:PROC
EXTRN	_MonoPrint:PROC
EXTRN	?AddMode@DigitalBrain@@IAEXW4DigiMode@1@@Z:PROC	; DigitalBrain::AddMode
EXTRN	?MachHold@DigitalBrain@@IAEHMMH@Z:PROC		; DigitalBrain::MachHold
EXTRN	?RollAndPull@DigitalBrain@@IAEXXZ:PROC		; DigitalBrain::RollAndPull
EXTRN	?SetPstick@DigitalBrain@@IAEMMMH@Z:PROC		; DigitalBrain::SetPstick
EXTRN	?SetRstick@DigitalBrain@@IAEMM@Z:PROC		; DigitalBrain::SetRstick
EXTRN	?SetYpedal@DigitalBrain@@IAEMM@Z:PROC		; DigitalBrain::SetYpedal
EXTRN	?SetMaxRoll@DigitalBrain@@IAEXM@Z:PROC		; DigitalBrain::SetMaxRoll
EXTRN	?SetMaxRollDelta@DigitalBrain@@IAEXM@Z:PROC	; DigitalBrain::SetMaxRollDelta
EXTRN	?Stagnated@DigitalBrain@@IAEHXZ:PROC		; DigitalBrain::Stagnated
EXTRN	?SendFireMessage@SimVehicleClass@@QAEXPAVSimWeaponClass@@HHPAVSimObjectType@@VVU_ID@@@Z:PROC ; SimVehicleClass::SendFireMessage
EXTRN	?Exec@GunClass@@QAEHPAHQAY02MPAVObjectGeometry@@PAVSimObjectType@@H@Z:PROC ; GunClass::Exec
EXTRN	@__security_check_cookie@4:PROC
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	?SimLibMajorFrameRate@@3MA:DWORD		; SimLibMajorFrameRate
EXTRN	?SimLibElapsedTime@@3KA:DWORD			; SimLibElapsedTime
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c3af0000
CONST	SEGMENT
__real@c3af0000 DD 0c3af0000r			; -350
CONST	ENDS
;	COMDAT __real@c0490fd9
CONST	SEGMENT
__real@c0490fd9 DD 0c0490fd9r			; -3.14159
CONST	ENDS
;	COMDAT __real@bff921fb54442d18
CONST	SEGMENT
__real@bff921fb54442d18 DQ 0bff921fb54442d18r	; -1.5708
CONST	ENDS
;	COMDAT __real@bfc90fd9
CONST	SEGMENT
__real@bfc90fd9 DD 0bfc90fd9r			; -1.5708
CONST	ENDS
;	COMDAT __real@bd0efa34
CONST	SEGMENT
__real@bd0efa34 DD 0bd0efa34r			; -0.0349066
CONST	ENDS
;	COMDAT __real@bcd6774e
CONST	SEGMENT
__real@bcd6774e DD 0bcd6774er			; -0.0261799
CONST	ENDS
;	COMDAT __real@8000000000000000
CONST	SEGMENT
__real@8000000000000000 DQ 08000000000000000r	; -0
CONST	ENDS
;	COMDAT __real@463de1b0
CONST	SEGMENT
__real@463de1b0 DD 0463de1b0r			; 12152.4
CONST	ENDS
;	COMDAT __real@455ac000
CONST	SEGMENT
__real@455ac000 DD 0455ac000r			; 3500
CONST	ENDS
;	COMDAT __real@453b8000
CONST	SEGMENT
__real@453b8000 DD 0453b8000r			; 3000
CONST	ENDS
;	COMDAT __real@44fa0000
CONST	SEGMENT
__real@44fa0000 DD 044fa0000r			; 2000
CONST	ENDS
;	COMDAT __real@44af0000
CONST	SEGMENT
__real@44af0000 DD 044af0000r			; 1400
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@44480000
CONST	SEGMENT
__real@44480000 DD 044480000r			; 800
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42652ee1
CONST	SEGMENT
__real@42652ee1 DD 042652ee1r			; 57.2958
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@4200b53f
CONST	SEGMENT
__real@4200b53f DD 04200b53fr			; 32.177
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@4180b53f
CONST	SEGMENT
__real@4180b53f DD 04180b53fr			; 16.0885
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40490fd9
CONST	SEGMENT
__real@40490fd9 DD 040490fd9r			; 3.14159
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@40060a91
CONST	SEGMENT
__real@40060a91 DD 040060a91r			; 2.09439
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3ff4000000000000
CONST	SEGMENT
__real@3ff4000000000000 DQ 03ff4000000000000r	; 1.25
CONST	ENDS
;	COMDAT __real@3fc90fd9
CONST	SEGMENT
__real@3fc90fd9 DD 03fc90fd9r			; 1.5708
CONST	ENDS
;	COMDAT __real@3faf46bb60000000
CONST	SEGMENT
__real@3faf46bb60000000 DQ 03faf46bb60000000r	; 0.0610865
CONST	ENDS
;	COMDAT __real@3fa1df4680000000
CONST	SEGMENT
__real@3fa1df4680000000 DQ 03fa1df4680000000r	; 0.0349066
CONST	ENDS
;	COMDAT __real@3f9acee9c0000000
CONST	SEGMENT
__real@3f9acee9c0000000 DQ 03f9acee9c0000000r	; 0.0261799
CONST	ENDS
;	COMDAT __real@3f860a91
CONST	SEGMENT
__real@3f860a91 DD 03f860a91r			; 1.0472
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f5f66f1
CONST	SEGMENT
__real@3f5f66f1 DD 03f5f66f1r			; 0.872665
CONST	ENDS
;	COMDAT __real@3f490fd9
CONST	SEGMENT
__real@3f490fd9 DD 03f490fd9r			; 0.785398
CONST	ENDS
;	COMDAT __real@3f1c61a9
CONST	SEGMENT
__real@3f1c61a9 DD 03f1c61a9r			; 0.610865
CONST	ENDS
;	COMDAT __real@3f17ac60
CONST	SEGMENT
__real@3f17ac60 DD 03f17ac60r			; 0.592474
CONST	ENDS
;	COMDAT __real@3f060a91
CONST	SEGMENT
__real@3f060a91 DD 03f060a91r			; 0.523599
CONST	ENDS
;	COMDAT __real@3edf66f1
CONST	SEGMENT
__real@3edf66f1 DD 03edf66f1r			; 0.436332
CONST	ENDS
;	COMDAT __real@3e860a91
CONST	SEGMENT
__real@3e860a91 DD 03e860a91r			; 0.261799
CONST	ENDS
;	COMDAT __real@3e32b8c1
CONST	SEGMENT
__real@3e32b8c1 DD 03e32b8c1r			; 0.174533
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3db2b8c1
CONST	SEGMENT
__real@3db2b8c1 DD 03db2b8c1r			; 0.0872665
CONST	ENDS
;	COMDAT __real@3d0efa34
CONST	SEGMENT
__real@3d0efa34 DD 03d0efa34r			; 0.0349066
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3c0efa34
CONST	SEGMENT
__real@3c0efa34 DD 03c0efa34r			; 0.00872665
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_0CD@HOIBHIKC@Help?5me?0?5I?8m?5Stuck?5in?5a?5Luffberr@
CONST	SEGMENT
??_C@_0CD@HOIBHIKC@Help?5me?0?5I?8m?5Stuck?5in?5a?5Luffberr@ DB 'Help me,'
	DB	' I''m Stuck in a Luffberry', 0aH, 00H	; `string'
CONST	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?NumHardpoints@SMSBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NumHardpoints@SMSBaseClass@@QAEHXZ PROC		; SMSBaseClass::NumHardpoints, COMDAT
; _this$ = ecx

; 87   : 	int NumHardpoints (void) {return numHardpoints;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?NumHardpoints@SMSBaseClass@@QAEHXZ ENDP		; SMSBaseClass::NumHardpoints
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GsAvail@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GsAvail@AirframeClass@@QAEMXZ PROC			; AirframeClass::GsAvail, COMDAT
; _this$ = ecx

; 1179 : 	float GsAvail (void) {return gsAvail;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?GsAvail@AirframeClass@@QAEMXZ ENDP			; AirframeClass::GsAvail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\object.h
;	COMDAT ?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ PROC	; SimObjectType::BaseData, COMDAT
; _this$ = ecx

; 92   : 	FalconEntity* BaseData(void) { return baseData.get(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ENDP	; SimObjectType::BaseData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?IsSetATC@DigitalBrain@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetATC@DigitalBrain@@QAEHH@Z PROC			; DigitalBrain::IsSetATC, COMDAT
; _this$ = ecx

; 709  : 	int		IsSetATC(int flag)								{return (atcFlags & flag) && TRUE;}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+300]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsSetATC
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@IsSetATC
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSetATC
$LN3@IsSetATC:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSetATC:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetATC@DigitalBrain@@QAEHH@Z ENDP			; DigitalBrain::IsSetATC
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?ClearATCFlag@DigitalBrain@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?ClearATCFlag@DigitalBrain@@QAEXH@Z PROC		; DigitalBrain::ClearATCFlag, COMDAT
; _this$ = ecx

; 708  : 	void	ClearATCFlag(int flag)							{atcFlags &= ~flag;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _flag$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+300]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+300], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearATCFlag@DigitalBrain@@QAEXH@Z ENDP		; DigitalBrain::ClearATCFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?SetATCFlag@DigitalBrain@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetATCFlag@DigitalBrain@@QAEXH@Z PROC			; DigitalBrain::SetATCFlag, COMDAT
; _this$ = ecx

; 707  : 	void	SetATCFlag(int flag)							{atcFlags |= flag;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+300]
	or	ecx, DWORD PTR _flag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+300], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetATCFlag@DigitalBrain@@QAEXH@Z ENDP			; DigitalBrain::SetATCFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?SetTrackPoint@DigitalBrain@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?SetTrackPoint@DigitalBrain@@QAEXMMM@Z PROC		; DigitalBrain::SetTrackPoint, COMDAT
; _this$ = ecx

; 699  : 	void	SetTrackPoint(float x, float y, float z){ SetTrackPoint(x, y); trackZ = z; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPoint@DigitalBrain@@QAEXMM@Z	; DigitalBrain::SetTrackPoint
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+156], xmm0
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetTrackPoint@DigitalBrain@@QAEXMMM@Z ENDP		; DigitalBrain::SetTrackPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?SetTrackPoint@DigitalBrain@@QAEXMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SetTrackPoint@DigitalBrain@@QAEXMM@Z PROC		; DigitalBrain::SetTrackPoint, COMDAT
; _this$ = ecx

; 698  : 	void	SetTrackPoint(float x, float y){ trackX = x; trackY=y; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax+148], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [ecx+152], xmm0
	mov	esp, ebp
	pop	ebp
	ret	8
?SetTrackPoint@DigitalBrain@@QAEXMM@Z ENDP		; DigitalBrain::SetTrackPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gengage.cpp
_TEXT	SEGMENT
tv183 = -20						; size = 4
tv170 = -16						; size = 4
tv68 = -12						; size = 4
_angleLimit$ = -8					; size = 4
_this$ = -4						; size = 4
?GunsEngageCheck@DigitalBrain@@IAEXXZ PROC		; DigitalBrain::GunsEngageCheck
; _this$ = ecx

; 23   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 24   : float angleLimit;
; 25   : 
; 26   :    if ((!mpActionFlags[AI_ENGAGE_TARGET] != AI_AIR_TARGET && missionClass != AAMission && !missionComplete) || curMode == RTBMode) // 2002-03-04 MODIFIED BY S.G. Use new enum type

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+760], 0
	jne	SHORT $LN14@GunsEngage
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN15@GunsEngage
$LN14@GunsEngage:
	mov	DWORD PTR tv68[ebp], 0
$LN15@GunsEngage:
	cmp	DWORD PTR tv68[ebp], 1
	je	SHORT $LN9@GunsEngage
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+288], 1
	je	SHORT $LN9@GunsEngage
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+292], 0
	je	SHORT $LN10@GunsEngage
$LN9@GunsEngage:
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+136], 19			; 00000013H
	jne	SHORT $LN11@GunsEngage
$LN10@GunsEngage:

; 27   :       angleLimit = 15.0f * DTR;

	movss	xmm0, DWORD PTR __real@3e860a91
	movss	DWORD PTR _angleLimit$[ebp], xmm0

; 28   :    else

	jmp	SHORT $LN8@GunsEngage
$LN11@GunsEngage:

; 29   :       angleLimit = 35.0f * DTR;

	movss	xmm0, DWORD PTR __real@3f1c61a9
	movss	DWORD PTR _angleLimit$[ebp], xmm0
$LN8@GunsEngage:

; 30   : 
; 31   :    /*-----------*/
; 32   :    /* no target */
; 33   :    /*-----------*/
; 34   :    if (targetPtr == NULL) 

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN7@GunsEngage

; 35   :    {
; 36   :       return;

	jmp	$LN12@GunsEngage
$LN7@GunsEngage:

; 37   :    }
; 38   : 
; 39   :    /*-------*/
; 40   :    /* entry */
; 41   :    /*-------*/
; 42   :    if (curMode != GunsEngageMode)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+136], 12			; 0000000cH
	je	SHORT $LN6@GunsEngage

; 43   :    {
; 44   :       if (targetPtr && targetData->range <= 3500.0F && //targetData->range >= 1000.0F &&//me123 let's bfm to 4000 before gunning changed from 10000
; 45   : // JB		!(self->YawDelta() > 0 && targetPtr->BaseData()->YawDelta() < 0 ||// not nose to nose
; 46   : // JB		self->YawDelta() < 0 && targetPtr->BaseData()->YawDelta() > 0) &&
; 47   : 		  ((AircraftClass *)self)->Guns &&
; 48   :    		((AircraftClass *)self)->Guns->numRoundsRemaining > 0 &&
; 49   :           targetData->ata < angleLimit && IsSetATC (AceGunsEngage))

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN5@GunsEngage
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movss	xmm0, DWORD PTR __real@455ac000
	comiss	xmm0, DWORD PTR [eax+44]
	jb	SHORT $LN5@GunsEngage
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	cmp	DWORD PTR [edx+944], 0
	je	SHORT $LN5@GunsEngage
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+944]
	cmp	DWORD PTR [edx+808], 0
	jle	SHORT $LN5@GunsEngage
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movss	xmm0, DWORD PTR _angleLimit$[ebp]
	comiss	xmm0, DWORD PTR [ecx]
	jbe	SHORT $LN5@GunsEngage
	push	8192					; 00002000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetATC@DigitalBrain@@QAEHH@Z		; DigitalBrain::IsSetATC
	test	eax, eax
	je	SHORT $LN5@GunsEngage

; 50   :       {
; 51   :          AddMode(GunsEngageMode);

	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddMode@DigitalBrain@@IAEXW4DigiMode@1@@Z ; DigitalBrain::AddMode
$LN5@GunsEngage:

; 52   :       }
; 53   :    }

	jmp	$LN2@GunsEngage
$LN6@GunsEngage:

; 54   :    /*------*/
; 55   :    /* exit */
; 56   :    /*------*/
; 57   :    else if (curMode == GunsEngageMode)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+136], 12			; 0000000cH
	jne	$LN2@GunsEngage

; 58   :    {
; 59   :       if (targetData->range < 3500.0f && //targetData->range > 1000.0f &&
; 60   : // JB		!(self->YawDelta() > 0 && targetPtr->BaseData()->YawDelta() < 0 ||// not nose to nose
; 61   : // JB		self->YawDelta() < 0 && targetPtr->BaseData()->YawDelta() > 0) &&
; 62   :          ((AircraftClass *)self)->Guns->numRoundsRemaining > 0 && 
; 63   : 		 (targetPtr->BaseData()->IsAirplane() || targetPtr->BaseData()->IsHelicopter()) // 2002-03-05 MODIFIED BY S.G. airplane, choppers and fligth are ok in here (choppers only makes it here if it passed the SensorFusion test first)
; 64   : 		 //&& targetData->ata < 135.0f * DTR) 
; 65   :            && targetData->ata < 1.25 * angleLimit)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movss	xmm0, DWORD PTR __real@455ac000
	comiss	xmm0, DWORD PTR [ecx+44]
	jbe	$LN2@GunsEngage
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+944]
	cmp	DWORD PTR [ecx+808], 0
	jle	SHORT $LN2@GunsEngage
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv170[ebp], eax
	mov	eax, DWORD PTR tv170[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv170[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	jne	SHORT $LN1@GunsEngage
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv183[ebp], eax
	mov	edx, DWORD PTR tv183[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv183[ebp]
	mov	edx, DWORD PTR [eax+184]
	call	edx
	test	eax, eax
	je	SHORT $LN2@GunsEngage
$LN1@GunsEngage:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cvtss2sd xmm0, DWORD PTR [ecx]
	cvtss2sd xmm1, DWORD PTR _angleLimit$[ebp]
	mulsd	xmm1, QWORD PTR __real@3ff4000000000000
	comisd	xmm1, xmm0
	jbe	SHORT $LN2@GunsEngage

; 66   :       {
; 67   :          AddMode(GunsEngageMode);

	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddMode@DigitalBrain@@IAEXW4DigiMode@1@@Z ; DigitalBrain::AddMode
$LN2@GunsEngage:
$LN12@GunsEngage:

; 68   :       }
; 69   :    }
; 70   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GunsEngageCheck@DigitalBrain@@IAEXXZ ENDP		; DigitalBrain::GunsEngageCheck
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gengage.cpp
_TEXT	SEGMENT
_ata$ = -76						; size = 4
_tx$ = -72						; size = 4
_ty$ = -68						; size = 4
tv346 = -64						; size = 4
tv322 = -60						; size = 4
tv316 = -56						; size = 4
tv344 = -52						; size = 4
tv310 = -48						; size = 4
tv304 = -44						; size = 4
tv342 = -40						; size = 4
tv298 = -36						; size = 4
tv292 = -32						; size = 4
_multiplier$ = -28					; size = 4
tv340 = -24						; size = 4
tv274 = -20						; size = 4
tv153 = -16						; size = 4
_tz$ = -12						; size = 4
_gunFactor$ = -8					; size = 4
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
_leadTof$ = 12						; size = 4
_newata$ = 16						; size = 4
?CoarseGunsTrack@DigitalBrain@@IAEXMMPAM@Z PROC		; DigitalBrain::CoarseGunsTrack
; _this$ = ecx

; 189  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 190  : float ata, gunFactor;
; 191  : float multiplier;
; 192  : 
; 193  : /*-----------------------------------------------------------------*/
; 194  : /* Project ahead target leadTof number of bullet times of flight  */
; 195  : /*-----------------------------------------------------------------*/
; 196  : 
; 197  : gunFactor = leadTof * targetData->range/(self->Guns->initBulletVelocity + self->GetVt());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movss	xmm0, DWORD PTR _leadTof$[ebp]
	mulss	xmm0, DWORD PTR [ecx+44]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	esi, DWORD PTR [eax+944]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR [edx+220]
	movss	DWORD PTR tv340[ebp], xmm0
	call	eax
	fstp	DWORD PTR tv274[ebp]
	movss	xmm0, DWORD PTR tv274[ebp]
	addss	xmm0, DWORD PTR [esi+792]
	movss	xmm1, DWORD PTR tv340[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _gunFactor$[ebp], xmm1

; 198  : 	if (targetData->ata > 45.0F * DTR){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [edx]
	comiss	xmm0, DWORD PTR __real@3f490fd9
	jbe	$LN1@CoarseGuns

; 199  : 		multiplier = max (1.0F - ((targetData->ata - 45.0F * DTR) / (45.0F * DTR)), 0.0F);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR __real@3f490fd9
	divss	xmm0, DWORD PTR __real@3f490fd9
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	comiss	xmm1, DWORD PTR __real@00000000
	jbe	SHORT $LN4@CoarseGuns
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR __real@3f490fd9
	divss	xmm0, DWORD PTR __real@3f490fd9
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR tv153[ebp], xmm1
	jmp	SHORT $LN5@CoarseGuns
$LN4@CoarseGuns:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv153[ebp], xmm0
$LN5@CoarseGuns:
	movss	xmm0, DWORD PTR tv153[ebp]
	movss	DWORD PTR _multiplier$[ebp], xmm0

; 200  : 		gunFactor *= multiplier;

	movss	xmm0, DWORD PTR _gunFactor$[ebp]
	mulss	xmm0, DWORD PTR _multiplier$[ebp]
	movss	DWORD PTR _gunFactor$[ebp], xmm0
$LN1@CoarseGuns:

; 201  : 	}
; 202  : 
; 203  : 	float tx = targetPtr->BaseData()->XPos() + targetPtr->BaseData()->XDelta() * gunFactor;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv292[ebp]
	movss	xmm0, DWORD PTR tv292[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	movss	DWORD PTR tv342[ebp], xmm0
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv298[ebp]
	movss	xmm0, DWORD PTR tv298[ebp]
	mulss	xmm0, DWORD PTR _gunFactor$[ebp]
	movss	xmm1, DWORD PTR tv342[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _tx$[ebp], xmm1

; 204  : 	float ty = targetPtr->BaseData()->YPos() + targetPtr->BaseData()->YDelta() * gunFactor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv304[ebp]
	movss	xmm0, DWORD PTR tv304[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	movss	DWORD PTR tv344[ebp], xmm0
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv310[ebp]
	movss	xmm0, DWORD PTR tv310[ebp]
	mulss	xmm0, DWORD PTR _gunFactor$[ebp]
	movss	xmm1, DWORD PTR tv344[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _ty$[ebp], xmm1

; 205  : 	float tz = targetPtr->BaseData()->ZPos() + targetPtr->BaseData()->ZDelta() * gunFactor;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv316[ebp]
	movss	xmm0, DWORD PTR tv316[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	movss	DWORD PTR tv346[ebp], xmm0
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv322[ebp]
	movss	xmm0, DWORD PTR tv322[ebp]
	mulss	xmm0, DWORD PTR _gunFactor$[ebp]
	movss	xmm1, DWORD PTR tv346[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _tz$[ebp], xmm1

; 206  : 	tz -= 0.5F * GRAVITY * gunFactor * gunFactor * 4.0F;

	movss	xmm0, DWORD PTR __real@4180b53f
	mulss	xmm0, DWORD PTR _gunFactor$[ebp]
	mulss	xmm0, DWORD PTR _gunFactor$[ebp]
	mulss	xmm0, DWORD PTR __real@40800000
	movss	xmm1, DWORD PTR _tz$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _tz$[ebp], xmm1

; 207  : 	SetTrackPoint(tx, ty, tz);

	push	ecx
	movss	xmm0, DWORD PTR _tz$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ty$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _tx$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPoint@DigitalBrain@@QAEXMMM@Z	; DigitalBrain::SetTrackPoint

; 208  : 	ata = GunsAutoTrack(maxGs);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+96]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GunsAutoTrack@DigitalBrain@@IAEMM@Z	; DigitalBrain::GunsAutoTrack
	fstp	DWORD PTR _ata$[ebp]

; 209  : 	*newata = ata;

	mov	edx, DWORD PTR _newata$[ebp]
	movss	xmm0, DWORD PTR _ata$[ebp]
	movss	DWORD PTR [edx], xmm0

; 210  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?CoarseGunsTrack@DigitalBrain@@IAEXMMPAM@Z ENDP		; DigitalBrain::CoarseGunsTrack
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gengage.cpp
_TEXT	SEGMENT
tv976 = -144						; size = 4
tv759 = -140						; size = 4
tv951 = -136						; size = 4
tv777 = -132						; size = 4
tv942 = -128						; size = 4
tv786 = -124						; size = 4
tv917 = -120						; size = 4
tv768 = -116						; size = 4
tv904 = -112						; size = 4
tv737 = -108						; size = 4
tv891 = -104						; size = 4
tv748 = -100						; size = 4
_lastStick$ = -96					; size = 4
_atadot$ = -92						; size = 4
_cata$ = -88						; size = 4
_rz$ = -84						; size = 4
tv567 = -80						; size = 4
tv79 = -76						; size = 4
_pipperRate$ = -72					; size = 4
tv545 = -68						; size = 4
_leadTime$ = -64					; size = 4
_pipperAta$ = -60					; size = 4
_rangeEst$ = -56					; size = 4
_ata$ = -52						; size = 4
_rx$ = -48						; size = 4
_pipperAz$ = -44					; size = 4
_localTarget$ = -40					; size = 4
_ry$ = -36						; size = 4
_pipperEl$ = -32					; size = 4
_azerr$ = -28						; size = 4
_dy$ = -24						; size = 4
_dz$ = -20						; size = 4
_dx$ = -16						; size = 4
_elerr$ = -12						; size = 4
_tf$ = -8						; size = 4
_this$ = -4						; size = 4
_speed$ = 8						; size = 4
_lagAngle$ = 12						; size = 4
?FineGunsTrack@DigitalBrain@@IAEXMPAM@Z PROC		; DigitalBrain::FineGunsTrack
; _this$ = ecx

; 213  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 214  : float rx=0.0F,ry=0.0F,rz=0.0F,pipperEl=0.0F,pipperAz=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _rx$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ry$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _rz$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pipperEl$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pipperAz$[ebp], xmm0

; 215  : float ata=0.0F,dx=0.0F,dy=0.0F,dz=0.0F,tf=0.0F,rangeEst=0.0F,elerr=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ata$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dx$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dy$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dz$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _tf$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _rangeEst$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _elerr$[ebp], xmm0

; 216  : float azerr=0.0F,cata=0.0F,atadot=0.0F,pipperRate=0.0F,pipperAta=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _azerr$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _cata$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _atadot$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pipperRate$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pipperAta$[ebp], xmm0

; 217  : float lastStick=0.0F, leadTime=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _lastStick$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _leadTime$[ebp], xmm0

; 218  : 
; 219  :    /*----------------------------------------------------------*/
; 220  :    /* start by seeing if the target is flying upder our pipper */
; 221  :    /* and fire at him if he should be so unlucky.              */
; 222  :    /*----------------------------------------------------------*/
; 223  : 
; 224  :    /*----------------*/
; 225  :    /* range estimate */
; 226  :    /*----------------*/
; 227  :    rangeEst = min (targetData->range,2000.0F);//me123 from 10000

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movss	xmm0, DWORD PTR __real@44fa0000
	comiss	xmm0, DWORD PTR [ecx+44]
	jbe	SHORT $LN15@FineGunsTr
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movss	xmm0, DWORD PTR [eax+44]
	movss	DWORD PTR tv79[ebp], xmm0
	jmp	SHORT $LN16@FineGunsTr
$LN15@FineGunsTr:
	movss	xmm0, DWORD PTR __real@44fa0000
	movss	DWORD PTR tv79[ebp], xmm0
$LN16@FineGunsTr:
	movss	xmm0, DWORD PTR tv79[ebp]
	movss	DWORD PTR _rangeEst$[ebp], xmm0

; 228  : 
; 229  : 	SimObjectType* localTarget;
; 230  : 	if (targetPtr)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN12@FineGunsTr

; 231  : 		localTarget = targetPtr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _localTarget$[ebp], eax

; 232  : 	else

	jmp	SHORT $LN11@FineGunsTr
$LN12@FineGunsTr:

; 233  : 		localTarget = threatPtr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+664]
	mov	DWORD PTR _localTarget$[ebp], edx
$LN11@FineGunsTr:

; 234  : 
; 235  :    tf = rangeEst / (self->Guns->initBulletVelocity + self->GetVt());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	esi, DWORD PTR [ecx+944]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv737[ebp]
	movss	xmm0, DWORD PTR tv737[ebp]
	addss	xmm0, DWORD PTR [esi+792]
	movss	xmm1, DWORD PTR _rangeEst$[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _tf$[ebp], xmm1

; 236  : 	 if (localTarget && localTarget->localData)

	cmp	DWORD PTR _localTarget$[ebp], 0
	je	SHORT $LN10@FineGunsTr
	mov	ecx, DWORD PTR _localTarget$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN10@FineGunsTr

; 237  : 		 tf = rangeEst / (self->Guns->initBulletVelocity + self->GetVt() - localTarget->localData->rangedot); // JB 010211

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	esi, DWORD PTR [eax+944]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv748[ebp]
	movss	xmm0, DWORD PTR tv748[ebp]
	addss	xmm0, DWORD PTR [esi+792]
	mov	ecx, DWORD PTR _localTarget$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	subss	xmm0, DWORD PTR [edx+48]
	movss	xmm1, DWORD PTR _rangeEst$[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _tf$[ebp], xmm1

; 238  : 	 else

	jmp	SHORT $LN9@FineGunsTr
$LN10@FineGunsTr:

; 239  : 		 tf = rangeEst / (self->Guns->initBulletVelocity + self->GetVt());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	esi, DWORD PTR [ecx+944]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv759[ebp]
	movss	xmm0, DWORD PTR tv759[ebp]
	addss	xmm0, DWORD PTR [esi+792]
	movss	xmm1, DWORD PTR _rangeEst$[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _tf$[ebp], xmm1
$LN9@FineGunsTr:

; 240  : 
; 241  :    /*------------------------------*/
; 242  :    /* Ownship Speed + gravity Drop */
; 243  :    /*------------------------------*/
; 244  :    dx = self->GetVt() * self->platformAngles.cosgam * self->platformAngles.cossig * tf;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv768[ebp]
	movss	xmm0, DWORD PTR tv768[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mulss	xmm0, DWORD PTR [edx+368]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mulss	xmm0, DWORD PTR [ecx+376]
	mulss	xmm0, DWORD PTR _tf$[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 245  :    dy = self->GetVt() * self->platformAngles.cosgam * self->platformAngles.sinsig * tf;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv777[ebp]
	movss	xmm0, DWORD PTR tv777[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mulss	xmm0, DWORD PTR [edx+368]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mulss	xmm0, DWORD PTR [ecx+372]
	mulss	xmm0, DWORD PTR _tf$[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 246  :    dz = -(self->GetVt() * self->platformAngles.singam * tf + 0.5F * GRAVITY * tf * tf);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv786[ebp]
	movss	xmm0, DWORD PTR tv786[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mulss	xmm0, DWORD PTR [edx+364]
	mulss	xmm0, DWORD PTR _tf$[ebp]
	movss	xmm1, DWORD PTR __real@4180b53f
	mulss	xmm1, DWORD PTR _tf$[ebp]
	mulss	xmm1, DWORD PTR _tf$[ebp]
	addss	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _dz$[ebp], xmm0

; 247  : 
; 248  :    /*------------*/
; 249  :    /* Muzzle Vel */
; 250  :    /*------------*/
; 251  :    dx += self->Guns->initBulletVelocity * self->platformAngles.costhe * self->platformAngles.cospsi * tf;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+944]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	xmm0, DWORD PTR [edx+792]
	mulss	xmm0, DWORD PTR [ecx+392]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mulss	xmm0, DWORD PTR [eax+408]
	mulss	xmm0, DWORD PTR _tf$[ebp]
	addss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 252  :    dy += self->Guns->initBulletVelocity * self->platformAngles.costhe * self->platformAngles.sinpsi * tf;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+944]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	movss	xmm0, DWORD PTR [eax+792]
	mulss	xmm0, DWORD PTR [edx+392]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mulss	xmm0, DWORD PTR [ecx+404]
	mulss	xmm0, DWORD PTR _tf$[ebp]
	addss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 253  :    dz -= self->Guns->initBulletVelocity * self->platformAngles.sinthe * tf;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+944]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	movss	xmm0, DWORD PTR [ecx+792]
	mulss	xmm0, DWORD PTR [eax+388]
	mulss	xmm0, DWORD PTR _tf$[ebp]
	movss	xmm1, DWORD PTR _dz$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _dz$[ebp], xmm1

; 254  : 
; 255  :    /*----------------------------*/
; 256  :    /* find pipper body az and el */
; 257  :    /*----------------------------*/
; 258  :    rx = self->dmx[0][0]*dx + self->dmx[0][1]*dy + self->dmx[0][2]*dz;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 259  :    ry = self->dmx[1][0]*dx + self->dmx[1][1]*dy + self->dmx[1][2]*dz;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 260  :    rz = self->dmx[2][0]*dx + self->dmx[2][1]*dy + self->dmx[2][2]*dz;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rz$[ebp], xmm0

; 261  : 
; 262  :    pipperAz = (float)atan2 (ry,rx);

	cvtss2sd xmm0, DWORD PTR _rx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _pipperAz$[ebp]

; 263  :    pipperEl = (float)atan2(-rz,(float)sqrt(rx*rx+ry*ry+.1f));

	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR _rx$[ebp]
	movss	xmm1, DWORD PTR _ry$[ebp]
	mulss	xmm1, DWORD PTR _ry$[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	movss	xmm0, DWORD PTR _rz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _pipperEl$[ebp]

; 264  : 
; 265  :    pipperAta = (float)sqrt(pipperEl*pipperEl + pipperAz*pipperAz);

	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	mulss	xmm0, DWORD PTR _pipperEl$[ebp]
	movss	xmm1, DWORD PTR _pipperAz$[ebp]
	mulss	xmm1, DWORD PTR _pipperAz$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _pipperAta$[ebp]

; 266  :    pipperRate = (pipperAta - pastPipperAta)*SimLibMajorFrameRate;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _pipperAta$[ebp]
	subss	xmm0, DWORD PTR [ecx+524]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameRate@@3MA
	movss	DWORD PTR _pipperRate$[ebp], xmm0

; 267  :    pastPipperAta = pipperAta;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _pipperAta$[ebp]
	movss	DWORD PTR [edx+524], xmm0

; 268  :    *lagAngle = pipperEl;

	mov	eax, DWORD PTR _lagAngle$[ebp]
	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	movss	DWORD PTR [eax], xmm0

; 269  : 
; 270  :    /*-----------------------------------------------*/
; 271  :    /* find error between pipper and target location */
; 272  :    /*-----------------------------------------------*/
; 273  :    azerr = targetData->az - pipperAz;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [edx+16]
	subss	xmm0, DWORD PTR _pipperAz$[ebp]
	movss	DWORD PTR _azerr$[ebp], xmm0

; 274  :    elerr = targetData->el - pipperEl;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movss	xmm0, DWORD PTR [ecx+28]
	subss	xmm0, DWORD PTR _pipperEl$[ebp]
	movss	DWORD PTR _elerr$[ebp], xmm0

; 275  :    ata = (float)sqrt(azerr*azerr + elerr*elerr);

	movss	xmm0, DWORD PTR _azerr$[ebp]
	mulss	xmm0, DWORD PTR _azerr$[ebp]
	movss	xmm1, DWORD PTR _elerr$[ebp]
	mulss	xmm1, DWORD PTR _elerr$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _ata$[ebp]

; 276  :    atadot = (ata - pastAta)*SimLibMajorFrameRate;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _ata$[ebp]
	subss	xmm0, DWORD PTR [edx+516]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameRate@@3MA
	movss	DWORD PTR _atadot$[ebp], xmm0

; 277  :    pastAta = ata;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _ata$[ebp]
	movss	DWORD PTR [eax+516], xmm0

; 278  : 
; 279  :    /*-------------------------------------------------------------*/
; 280  :    /* shoot gun if pipper close, pipper moving twords target, etc */
; 281  :    /*-------------------------------------------------------------*/
; 282  : 
; 283  :    /*-----------------------------------------------------------*/
; 284  :    /* begin steering commands by pointing 1.2 bullet times of   */
; 285  :    /* ahead of the target. When we get near there, unload the   */
; 286  :    /* aircraft and see if the target will fly under the pipper. */
; 287  :    /* If he doesn't, start again.                               */
; 288  :    /*-----------------------------------------------------------*/
; 289  : 
; 290  :    if (ata > 60.0F * DTR)

	movss	xmm0, DWORD PTR _ata$[ebp]
	comiss	xmm0, DWORD PTR __real@3f860a91
	jbe	SHORT $LN8@FineGunsTr

; 291  :       speed = cornerSpeed;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+100]
	movss	DWORD PTR _speed$[ebp], xmm0
$LN8@FineGunsTr:

; 292  : 
; 293  :    if( !waitingForShot )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+496], 0
	jne	$LN7@FineGunsTr

; 294  :    {
; 295  : //      leadTime = 1.5F + 5.0F * targetData->ataFrom / (180.0F * DTR);
; 296  : // MODIFIED TO ACCOUNT FOR DIFFERENT PULL OF THE TARGET
; 297  : //      leadTime = 1.5F;
; 298  :       leadTime = 2.0F + 2.0F * (float)sin(targetData->ataFrom);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv891[ebp]
	movss	xmm0, DWORD PTR tv891[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _leadTime$[ebp], xmm0

; 299  :       CoarseGunsTrack(speed, leadTime, &cata);

	lea	edx, DWORD PTR _cata$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _leadTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CoarseGunsTrack@DigitalBrain@@IAEXMMPAM@Z ; DigitalBrain::CoarseGunsTrack

; 300  : 
; 301  : // MODIFIED BY S.G. TO MAKE IT MORE PRECISE AND WE NEED TO TAKE THE abs OF elerr
; 302  : //      if( fabs (azerr) < 1.5 * DTR && elerr < 1.0F * DTR)
; 303  : //me123      if( fabs (azerr) < 0.3 * DTR && elerr < 0.5F * DTR && elerr > -0.5F * DTR)      {
; 304  : // JB      if( fabs (azerr) < 3.5 * DTR && fabs(elerr) < 3.5F * DTR)      {
; 305  :       if( fabs (azerr) < 2.0 * DTR && elerr < .5F * DTR && elerr > -2.0F * DTR)      {

	push	ecx
	movss	xmm0, DWORD PTR _azerr$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv904[ebp]
	movss	xmm0, DWORD PTR tv904[ebp]
	cvtss2sd xmm0, xmm0
	movsd	xmm1, QWORD PTR __real@3fa1df4680000000
	comisd	xmm1, xmm0
	jbe	SHORT $LN6@FineGunsTr
	movss	xmm0, DWORD PTR __real@3c0efa34
	comiss	xmm0, DWORD PTR _elerr$[ebp]
	jbe	SHORT $LN6@FineGunsTr
	movss	xmm0, DWORD PTR _elerr$[ebp]
	comiss	xmm0, DWORD PTR __real@bd0efa34
	jbe	SHORT $LN6@FineGunsTr

; 306  : 			  waitingForShot = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+496], 1

; 307  :          pastPstick = af->nzcgb;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1192]
	mov	DWORD PTR [eax+520], ecx
$LN6@FineGunsTr:

; 308  :       }
; 309  :    }
; 310  :    else

	jmp	$LN2@FineGunsTr
$LN7@FineGunsTr:

; 311  :    {
; 312  : // MODIFIED BY S.G. TO MAKE IT MORE PRECISE
; 313  : //      if (elerr < 10.0F * DTR && elerr > -15.0F * DTR && fabs(azerr) < 10.0F /* ADDED BY S.G. - IT'S IN RADIAN! */ * DTR &&
; 314  : //ajusted by me123      if (elerr < 1.0F * DTR && elerr > -1.5F * DTR && fabs(azerr) < 1.0F /* ADDED BY S.G. - IT'S IN RADIAN! */ * DTR &&
; 315  : // JB     if (elerr < 3.0F * DTR && fabs(elerr) < 2.5F * DTR && fabs(azerr) < 3.0F /* ADDED BY S.G. - IT'S IN RADIAN! */ * DTR &&
; 316  :       if( fabs (azerr) < 1.5 * DTR && elerr < .5F * DTR && elerr > -1.5F * DTR &&
; 317  :           atadot < 50.0F* DTR && targetData->range < 2.0F * self->Guns->initBulletVelocity)//ME123 FROM 0.1 TO 0.2

	push	ecx
	movss	xmm0, DWORD PTR _azerr$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv917[ebp]
	movss	xmm0, DWORD PTR tv917[ebp]
	cvtss2sd xmm0, xmm0
	movsd	xmm1, QWORD PTR __real@3f9acee9c0000000
	comisd	xmm1, xmm0
	jbe	SHORT $LN4@FineGunsTr
	movss	xmm0, DWORD PTR __real@3c0efa34
	comiss	xmm0, DWORD PTR _elerr$[ebp]
	jbe	SHORT $LN4@FineGunsTr
	movss	xmm0, DWORD PTR _elerr$[ebp]
	comiss	xmm0, DWORD PTR __real@bcd6774e
	jbe	SHORT $LN4@FineGunsTr
	movss	xmm0, DWORD PTR __real@3f5f66f1
	comiss	xmm0, DWORD PTR _atadot$[ebp]
	jbe	SHORT $LN4@FineGunsTr
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+944]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx+792]
	comiss	xmm0, DWORD PTR [eax+44]
	jbe	SHORT $LN4@FineGunsTr

; 318  :       {
; 319  :          SetFlag (GunFireFlag);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@BaseBrain@@QAEXH@Z		; BaseBrain::SetFlag
$LN4@FineGunsTr:

; 320  :          //MonoPrint ("Digi Firing %8ld   %4d -> %4d\n", SimLibElapsedTime,
; 321  :             //self->Id().num_, targetPtr->BaseData()->Id().num_);
; 322  :       }
; 323  : 
; 324  :        /*---------------------------------*/
; 325  :        /* Relax stick and neutralize roll */
; 326  :        /*---------------------------------*/
; 327  :       SetPstick (max (pastPstick - 1.0F, 0.0F), maxGs, AirframeClass::GCommand);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+520]
	subss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN17@FineGunsTr
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+520]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv545[ebp], xmm0
	jmp	SHORT $LN18@FineGunsTr
$LN17@FineGunsTr:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv545[ebp], xmm0
$LN18@FineGunsTr:
	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+96]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR tv545[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPstick@DigitalBrain@@IAEMMMH@Z	; DigitalBrain::SetPstick
	fstp	ST(0)

; 328  :       SetRstick( 0.0F );         

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRstick@DigitalBrain@@IAEMM@Z	; DigitalBrain::SetRstick
	fstp	ST(0)

; 329  :       if( fabs (azerr) < 3.5 * DTR  && elerr < .5F * DTR && elerr > -1.5F * DTR &&
; 330  :       fabs(pipperRate) < 10.0F * DTR && targetData->range < 3000.0F)//me123 from 6000 

	push	ecx
	movss	xmm0, DWORD PTR _azerr$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv942[ebp]
	movss	xmm0, DWORD PTR tv942[ebp]
	cvtss2sd xmm0, xmm0
	movsd	xmm1, QWORD PTR __real@3faf46bb60000000
	comisd	xmm1, xmm0
	jbe	$LN3@FineGunsTr
	movss	xmm0, DWORD PTR __real@3c0efa34
	comiss	xmm0, DWORD PTR _elerr$[ebp]
	jbe	SHORT $LN3@FineGunsTr
	movss	xmm0, DWORD PTR _elerr$[ebp]
	comiss	xmm0, DWORD PTR __real@bcd6774e
	jbe	SHORT $LN3@FineGunsTr
	push	ecx
	movss	xmm0, DWORD PTR _pipperRate$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv951[ebp]
	movss	xmm0, DWORD PTR __real@3e32b8c1
	comiss	xmm0, DWORD PTR tv951[ebp]
	jbe	SHORT $LN3@FineGunsTr
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movss	xmm0, DWORD PTR __real@453b8000
	comiss	xmm0, DWORD PTR [eax+44]
	jbe	SHORT $LN3@FineGunsTr

; 331  :       {
; 332  :          waitingForShot = (ataDot < 0.01F ? TRUE : FALSE);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3c23d70a
	comiss	xmm0, DWORD PTR [ecx+368]
	jbe	SHORT $LN19@FineGunsTr
	mov	DWORD PTR tv567[ebp], 1
	jmp	SHORT $LN20@FineGunsTr
$LN19@FineGunsTr:
	mov	DWORD PTR tv567[ebp], 0
$LN20@FineGunsTr:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv567[ebp]
	mov	DWORD PTR [edx+496], eax

; 333  :       }
; 334  :       else

	jmp	SHORT $LN2@FineGunsTr
$LN3@FineGunsTr:

; 335  :          waitingForShot = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+496], 0
$LN2@FineGunsTr:

; 336  :    }
; 337  : 
; 338  :    lastStick = pStick;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+28]
	movss	DWORD PTR _lastStick$[ebp], xmm0

; 339  :    MachHold(speed, self->GetKias(), FALSE);//me123 true

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+56]
	mov	edx, DWORD PTR [eax+224]
	call	edx
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MachHold@DigitalBrain@@IAEHMMH@Z	; DigitalBrain::MachHold

; 340  : 
; 341  :    // Check for full pull
; 342  :    if (!waitingForShot && cata < 5.0F * DTR * (af->GsAvail() - af->nzcgb))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+496], 0
	jne	SHORT $LN1@FineGunsTr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	call	?GsAvail@AirframeClass@@QAEMXZ		; AirframeClass::GsAvail
	fstp	DWORD PTR tv976[ebp]
	movss	xmm0, DWORD PTR tv976[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	subss	xmm0, DWORD PTR [eax+1192]
	mulss	xmm0, DWORD PTR __real@3db2b8c1
	comiss	xmm0, DWORD PTR _cata$[ebp]
	jbe	SHORT $LN1@FineGunsTr

; 343  :       pStick = lastStick;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _lastStick$[ebp]
	movss	DWORD PTR [ecx+28], xmm0
$LN1@FineGunsTr:

; 344  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?FineGunsTrack@DigitalBrain@@IAEXMPAM@Z ENDP		; DigitalBrain::FineGunsTrack
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gengage.cpp
_TEXT	SEGMENT
tv612 = -132						; size = 4
tv455 = -128						; size = 4
tv607 = -124						; size = 4
tv619 = -120						; size = 4
_pullFact$ = -116					; size = 4
tv505 = -112						; size = 4
tv591 = -108						; size = 4
tv488 = -104						; size = 4
tv583 = -100						; size = 4
tv621 = -96						; size = 4
_rx$ = -92						; size = 4
tv500 = -88						; size = 4
tv520 = -84						; size = 4
tv495 = -80						; size = 4
tv623 = -76						; size = 4
tv441 = -72						; size = 4
tv515 = -68						; size = 4
tv448 = -64						; size = 4
tv510 = -60						; size = 4
tv477 = -56						; size = 4
_ata$ = -52						; size = 4
_realRange$ = -48					; size = 4
tv377 = -44						; size = 4
_ry$ = -40						; size = 4
_target$ = -36						; size = 4
_droll$ = -32						; size = 4
_rz$ = -28						; size = 4
_tof$ = -24						; size = 4
_localTarget$ = -20					; size = 4
_yft$ = -16						; size = 4
_xft$ = -12						; size = 4
_zft$ = -8						; size = 4
_this$ = -4						; size = 4
_trackGs$ = 8						; size = 4
?GunsAutoTrack@DigitalBrain@@IAEMM@Z PROC		; DigitalBrain::GunsAutoTrack
; _this$ = ecx

; 347  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 348  : float xft,yft,zft,rx,ry,rz,ata,droll;
; 349  : float pullFact;
; 350  : 
; 351  :    /*-----------------------------*/
; 352  :    /* calculate relative position */
; 353  :    /*-----------------------------*/
; 354  :    xft = trackX - self->XPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv441[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+148]
	subss	xmm0, DWORD PTR tv441[ebp]
	movss	DWORD PTR _xft$[ebp], xmm0

; 355  :    yft = trackY - self->YPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv448[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+152]
	subss	xmm0, DWORD PTR tv448[ebp]
	movss	DWORD PTR _yft$[ebp], xmm0

; 356  :    zft = trackZ - self->ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv455[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+156]
	subss	xmm0, DWORD PTR tv455[ebp]
	movss	DWORD PTR _zft$[ebp], xmm0

; 357  : 
; 358  : 	// JB 010210 Start
; 359  : 	SimObjectType* localTarget;
; 360  : 	FalconEntity	*target;
; 361  : 	if (targetPtr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN6@GunsAutoTr

; 362  : 		localTarget = targetPtr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _localTarget$[ebp], edx

; 363  : 	else

	jmp	SHORT $LN5@GunsAutoTr
$LN6@GunsAutoTr:

; 364  : 		localTarget = threatPtr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+664]
	mov	DWORD PTR _localTarget$[ebp], ecx
$LN5@GunsAutoTr:

; 365  : 	float realRange, tof;
; 366  : 	realRange = (float)sqrt( xft * xft + yft * yft + zft * zft );

	movss	xmm0, DWORD PTR _xft$[ebp]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	movss	xmm1, DWORD PTR _yft$[ebp]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _zft$[ebp]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _realRange$[ebp]

; 367  : 
; 368  : 	// Guess TOF
; 369  : 	if (localTarget && localTarget->localData)

	cmp	DWORD PTR _localTarget$[ebp], 0
	je	SHORT $LN4@GunsAutoTr
	mov	edx, DWORD PTR _localTarget$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN4@GunsAutoTr

; 370  : 		tof = realRange / (self->Guns->initBulletVelocity + self->GetVt() - localTarget->localData->rangedot);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	esi, DWORD PTR [ecx+944]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv477[ebp]
	movss	xmm0, DWORD PTR tv477[ebp]
	addss	xmm0, DWORD PTR [esi+792]
	mov	ecx, DWORD PTR _localTarget$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	subss	xmm0, DWORD PTR [edx+48]
	movss	xmm1, DWORD PTR _realRange$[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _tof$[ebp], xmm1

; 371  : 	else

	jmp	SHORT $LN3@GunsAutoTr
$LN4@GunsAutoTr:

; 372  : 		tof = realRange / (self->Guns->initBulletVelocity + self->GetVt());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	esi, DWORD PTR [ecx+944]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv488[ebp]
	movss	xmm0, DWORD PTR tv488[ebp]
	addss	xmm0, DWORD PTR [esi+792]
	movss	xmm1, DWORD PTR _realRange$[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _tof$[ebp], xmm1
$LN3@GunsAutoTr:

; 373  : 
; 374  : 	if (localTarget)

	cmp	DWORD PTR _localTarget$[ebp], 0
	je	$LN1@GunsAutoTr

; 375  : 	{
; 376  : 		target = localTarget->BaseData();

	mov	ecx, DWORD PTR _localTarget$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR _target$[ebp], eax

; 377  : 		if (target)

	cmp	DWORD PTR _target$[ebp], 0
	je	$LN1@GunsAutoTr

; 378  : 		{
; 379  : 			// now get vector to where we're aiming
; 380  : 			xft += (target->XDelta() - self->XDelta()) * tof;

	mov	ecx, DWORD PTR _target$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv495[ebp]
	movss	xmm0, DWORD PTR tv495[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movss	DWORD PTR tv619[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv500[ebp]
	movss	xmm0, DWORD PTR tv619[ebp]
	subss	xmm0, DWORD PTR tv500[ebp]
	mulss	xmm0, DWORD PTR _tof$[ebp]
	addss	xmm0, DWORD PTR _xft$[ebp]
	movss	DWORD PTR _xft$[ebp], xmm0

; 381  : 			yft += (target->YDelta() - self->YDelta()) * tof;

	mov	ecx, DWORD PTR _target$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv505[ebp]
	movss	xmm0, DWORD PTR tv505[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	movss	DWORD PTR tv621[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv510[ebp]
	movss	xmm0, DWORD PTR tv621[ebp]
	subss	xmm0, DWORD PTR tv510[ebp]
	mulss	xmm0, DWORD PTR _tof$[ebp]
	addss	xmm0, DWORD PTR _yft$[ebp]
	movss	DWORD PTR _yft$[ebp], xmm0

; 382  : 			zft += (target->ZDelta() - self->ZDelta()) * tof - 4.0f;

	mov	ecx, DWORD PTR _target$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv515[ebp]
	movss	xmm0, DWORD PTR tv515[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv623[ebp], xmm0
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv520[ebp]
	movss	xmm0, DWORD PTR tv623[ebp]
	subss	xmm0, DWORD PTR tv520[ebp]
	mulss	xmm0, DWORD PTR _tof$[ebp]
	subss	xmm0, DWORD PTR __real@40800000
	addss	xmm0, DWORD PTR _zft$[ebp]
	movss	DWORD PTR _zft$[ebp], xmm0
$LN1@GunsAutoTr:

; 383  : 		}
; 384  : 	}
; 385  : 
; 386  : 	// Correct for gravity
; 387  : 	zft -= GRAVITY * tof * tof;

	movss	xmm0, DWORD PTR __real@4200b53f
	mulss	xmm0, DWORD PTR _tof$[ebp]
	mulss	xmm0, DWORD PTR _tof$[ebp]
	movss	xmm1, DWORD PTR _zft$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _zft$[ebp], xmm1

; 388  : 	// JB 010210 End
; 389  : 
; 390  :    rx = self->dmx[0][0]*xft + self->dmx[0][1]*yft + self->dmx[0][2]*zft;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 391  :    ry = self->dmx[1][0]*xft + self->dmx[1][1]*yft + self->dmx[1][2]*zft;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 392  :    rz = self->dmx[2][0]*xft + self->dmx[2][1]*yft + self->dmx[2][2]*zft;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rz$[ebp], xmm0

; 393  : 
; 394  :    // Bias for lead
; 395  :    rz     = -(rz * 2.0F);

	movss	xmm0, DWORD PTR _rz$[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _rz$[ebp], xmm0

; 396  :    droll  = (float)atan2(ry,rz);

	cvtss2sd xmm0, DWORD PTR _rz$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _droll$[ebp]

; 397  : 
; 398  :    // Bias X degrees upward
; 399  : 
; 400  :    // Ata including elevation bias
; 401  :    ata    = (float)atan2(sqrt(ry*ry+rz*rz),rx);

	cvtss2sd xmm0, DWORD PTR _rx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _ry$[ebp]
	mulss	xmm0, DWORD PTR _ry$[ebp]
	movss	xmm1, DWORD PTR _rz$[ebp]
	mulss	xmm1, DWORD PTR _rz$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _ata$[ebp]

; 402  : 
; 403  :    // Scale pull based on roll error
; 404  :    pullFact = min ((25.0F * DTR) / (float)fabs(droll), 1.0F);

	push	ecx
	movss	xmm0, DWORD PTR _droll$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv583[ebp]
	movss	xmm0, DWORD PTR __real@3edf66f1
	divss	xmm0, DWORD PTR tv583[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN9@GunsAutoTr
	push	ecx
	movss	xmm0, DWORD PTR _droll$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv591[ebp]
	movss	xmm0, DWORD PTR __real@3edf66f1
	divss	xmm0, DWORD PTR tv591[ebp]
	movss	DWORD PTR tv377[ebp], xmm0
	jmp	SHORT $LN10@GunsAutoTr
$LN9@GunsAutoTr:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv377[ebp], xmm0
$LN10@GunsAutoTr:
	movss	xmm0, DWORD PTR tv377[ebp]
	movss	DWORD PTR _pullFact$[ebp], xmm0

; 405  : 
; 406  :    SetPstick( ata * RTD * 2.0F * pullFact, trackGs, AirframeClass::GCommand);

	push	128					; 00000080H
	push	ecx
	movss	xmm0, DWORD PTR _trackGs$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _ata$[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _pullFact$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPstick@DigitalBrain@@IAEMMMH@Z	; DigitalBrain::SetPstick
	fstp	ST(0)

; 407  : 	SetRstick( droll*RTD);

	movss	xmm0, DWORD PTR _droll$[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRstick@DigitalBrain@@IAEMM@Z	; DigitalBrain::SetRstick
	fstp	ST(0)

; 408  :    SetYpedal( 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetYpedal@DigitalBrain@@IAEMM@Z	; DigitalBrain::SetYpedal
	fstp	ST(0)

; 409  : 
; 410  :    SetMaxRoll ((float)fabs(self->Roll() + droll) * RTD);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv607[ebp]
	movss	xmm0, DWORD PTR tv607[ebp]
	addss	xmm0, DWORD PTR _droll$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv612[ebp]
	movss	xmm0, DWORD PTR tv612[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMaxRoll@DigitalBrain@@IAEXM@Z	; DigitalBrain::SetMaxRoll

; 411  :    SetMaxRollDelta (droll * RTD);

	movss	xmm0, DWORD PTR _droll$[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMaxRollDelta@DigitalBrain@@IAEXM@Z	; DigitalBrain::SetMaxRollDelta

; 412  : 
; 413  :    return (ata);

	fld	DWORD PTR _ata$[ebp]

; 414  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?GunsAutoTrack@DigitalBrain@@IAEMM@Z ENDP		; DigitalBrain::GunsAutoTrack
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gengage.cpp
_TEXT	SEGMENT
_el$1 = -232						; size = 4
_az$2 = -228						; size = 4
tv645 = -224						; size = 4
tv666 = -220						; size = 4
tv631 = -216						; size = 4
tv826 = -212						; size = 4
tv711 = -208						; size = 4
tv657 = -204						; size = 4
tv828 = -200						; size = 4
tv693 = -196						; size = 4
tv762 = -192						; size = 4
tv623 = -188						; size = 4
tv755 = -184						; size = 4
tv822 = -180						; size = 4
tv743 = -176						; size = 4
tv706 = -172						; size = 4
tv834 = -168						; size = 4
tv701 = -164						; size = 4
tv735 = -160						; size = 4
tv680 = -156						; size = 4
tv726 = -152						; size = 4
tv675 = -148						; size = 4
tv832 = -144						; size = 4
tv824 = -140						; size = 4
tv721 = -136						; size = 4
tv662 = -132						; size = 4
tv716 = -128						; size = 4
tv830 = -124						; size = 4
tv671 = -120						; size = 4
_realRange$3 = -116					; size = 4
_azErr$ = -112						; size = 4
tv179 = -108						; size = 4
tv208 = -104						; size = 4
_trigAz$ = -100						; size = 8
_trigEl$ = -92						; size = 8
_angles$ = -84						; size = 4
_fireFlag$ = -80					; size = 4
_tof$4 = -76						; size = 4
_target$5 = -72						; size = 4
_xft$ = -68						; size = 4
_i$ = -64						; size = 4
_yft$ = -60						; size = 4
_zft$ = -56						; size = 4
_theGun$ = -52						; size = 4
_localTarget$ = -48					; size = 4
_this$ = -44						; size = 4
_gMat$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
?TrainableGunsEngage@DigitalBrain@@IAEXXZ PROC		; DigitalBrain::TrainableGunsEngage
; _this$ = ecx

; 417  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 418  : int i, angles = FALSE;

	mov	DWORD PTR _angles$[ebp], 0

; 419  : int fireFlag = TRUE;

	mov	DWORD PTR _fireFlag$[ebp], 1

; 420  : GunClass* theGun = NULL;

	mov	DWORD PTR _theGun$[ebp], 0

; 421  : TransformMatrix gMat;
; 422  : SimObjectType* localTarget;
; 423  : //float az, el, xft, yft, zft, azErr, dt; // JB 010210
; 424  : float xft, yft, zft, azErr;
; 425  : mlTrig trigAz, trigEl;
; 426  : 
; 427  :    if (targetPtr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN18@TrainableG

; 428  :       localTarget = targetPtr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _localTarget$[ebp], edx

; 429  :    else

	jmp	SHORT $LN17@TrainableG
$LN18@TrainableG:

; 430  :       localTarget = threatPtr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+664]
	mov	DWORD PTR _localTarget$[ebp], ecx
$LN17@TrainableG:

; 431  : 
; 432  :    // Don't shoot if far away
; 433  :    if (localTarget->localData->range > 2.0F * NM_TO_FT)//me123 from 5

	mov	edx, DWORD PTR _localTarget$[ebp]
	mov	eax, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR [eax+44]
	comiss	xmm0, DWORD PTR __real@463de1b0
	jbe	SHORT $LN16@TrainableG

; 434  :       return;

	jmp	$LN19@TrainableG
$LN16@TrainableG:

; 435  : 
; 436  :    // Find the trainable gun
; 437  :    for (i=0; i<self->Sms->NumHardpoints(); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@TrainableG
$LN14@TrainableG:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN15@TrainableG:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+940]
	call	?NumHardpoints@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumHardpoints
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN13@TrainableG

; 438  :    {
; 439  : 	   //!
; 440  :       if ((self->Sms->hardPoint[i]->GetWeaponData()->flags & SMSClass::Trainable) &&
; 441  :           (theGun = self->Sms->hardPoint[i]->GetGun()))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+940]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+940]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [eax+148]
	call	edx
	mov	eax, DWORD PTR [eax]
	and	eax, 1024				; 00000400H
	je	$LN12@TrainableG
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+940]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+940]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [eax+176]
	call	edx
	mov	DWORD PTR _theGun$[ebp], eax
	cmp	DWORD PTR _theGun$[ebp], 0
	je	$LN12@TrainableG

; 442  :       {
; 443  :          // Tail guns point out the rear (obviously)
; 444  :          if (theGun->EntityType()->classInfo_[VU_STYPE] == STYPE_TAIL_GUN && !localTarget->BaseData()->OnGround())

	mov	ecx, DWORD PTR _theGun$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	movzx	edx, BYTE PTR [eax+ecx+8]
	cmp	edx, 6
	jne	$LN11@TrainableG
	mov	ecx, DWORD PTR _localTarget$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv179[ebp], eax
	mov	eax, DWORD PTR tv179[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv179[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	jne	$LN11@TrainableG

; 445  :          {
; 446  :             theGun->unlimitedAmmo = TRUE;

	mov	ecx, DWORD PTR _theGun$[ebp]
	mov	DWORD PTR [ecx+820], 1

; 447  :             if (localTarget->localData->az > 0.0F)

	mov	edx, DWORD PTR _localTarget$[ebp]
	mov	eax, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR [eax+16]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN10@TrainableG

; 448  :                azErr = 180.0F*DTR - localTarget->localData->az;

	mov	ecx, DWORD PTR _localTarget$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR __real@40490fd9
	subss	xmm0, DWORD PTR [edx+16]
	movss	DWORD PTR _azErr$[ebp], xmm0

; 449  :             else

	jmp	SHORT $LN9@TrainableG
$LN10@TrainableG:

; 450  :                azErr = -180.0F*DTR - localTarget->localData->az;

	mov	eax, DWORD PTR _localTarget$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	movss	xmm0, DWORD PTR __real@c0490fd9
	subss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR _azErr$[ebp], xmm0
$LN9@TrainableG:

; 451  : 
; 452  :             // Within 30 degree box and 2 NM, fire that weapon
; 453  :             if (fabs (azErr) < 30.0F * DTR && fabs(localTarget->localData->el) < 30.0F * DTR &&
; 454  :                localTarget->localData->range < 2.0F * NM_TO_FT)

	push	ecx
	movss	xmm0, DWORD PTR _azErr$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv623[ebp]
	movss	xmm0, DWORD PTR __real@3f060a91
	comiss	xmm0, DWORD PTR tv623[ebp]
	jbe	SHORT $LN8@TrainableG
	mov	edx, DWORD PTR _localTarget$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	ecx
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv631[ebp]
	movss	xmm0, DWORD PTR __real@3f060a91
	comiss	xmm0, DWORD PTR tv631[ebp]
	jbe	SHORT $LN8@TrainableG
	mov	ecx, DWORD PTR _localTarget$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR __real@463de1b0
	comiss	xmm0, DWORD PTR [edx+44]
	jbe	SHORT $LN8@TrainableG

; 455  :             {
; 456  :                angles = TRUE;

	mov	DWORD PTR _angles$[ebp], 1
$LN8@TrainableG:

; 457  :             }
; 458  :          }

	jmp	SHORT $LN5@TrainableG
$LN11@TrainableG:

; 459  :          else if (localTarget->BaseData()->OnGround())

	mov	ecx, DWORD PTR _localTarget$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv208[ebp], eax
	mov	eax, DWORD PTR tv208[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv208[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	je	SHORT $LN5@TrainableG

; 460  :          {
; 461  :             // For now assume all other guns point out the left side
; 462  : 
; 463  :             // Within 15 degree box and 2 NM, fire that weapon
; 464  :             if (fabs (-90.0F * DTR - localTarget->localData->az) < 15.0F * DTR &&
; 465  :                localTarget->localData->range < 2.0F * NM_TO_FT)

	mov	ecx, DWORD PTR _localTarget$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR __real@bfc90fd9
	subss	xmm0, DWORD PTR [edx+16]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv645[ebp]
	movss	xmm0, DWORD PTR __real@3e860a91
	comiss	xmm0, DWORD PTR tv645[ebp]
	jbe	SHORT $LN5@TrainableG
	mov	eax, DWORD PTR _localTarget$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	movss	xmm0, DWORD PTR __real@463de1b0
	comiss	xmm0, DWORD PTR [ecx+44]
	jbe	SHORT $LN5@TrainableG

; 466  :             {
; 467  :                angles = TRUE;

	mov	DWORD PTR _angles$[ebp], 1
$LN5@TrainableG:

; 468  :             }
; 469  :          }
; 470  : 
; 471  :          if (angles && SimLibElapsedTime % 2000 < 500)

	cmp	DWORD PTR _angles$[ebp], 0
	je	$LN4@TrainableG
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	xor	edx, edx
	mov	ecx, 2000				; 000007d0H
	div	ecx
	cmp	edx, 500				; 000001f4H
	jae	$LN4@TrainableG

; 472  :          {
; 473  : 						// JB 010210 Start
; 474  : 						FalconEntity	*target;
; 475  : 						float realRange;
; 476  : 						float az, el, tof;
; 477  : 
; 478  : 						target = localTarget->BaseData();

	mov	ecx, DWORD PTR _localTarget$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR _target$5[ebp], eax

; 479  : 						xft = target->XPos() - self->XPos();

	mov	ecx, DWORD PTR _target$5[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv657[ebp]
	movss	xmm0, DWORD PTR tv657[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	movss	DWORD PTR tv822[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv662[ebp]
	movss	xmm0, DWORD PTR tv822[ebp]
	subss	xmm0, DWORD PTR tv662[ebp]
	movss	DWORD PTR _xft$[ebp], xmm0

; 480  : 						yft = target->YPos() - self->YPos();

	mov	ecx, DWORD PTR _target$5[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv666[ebp]
	movss	xmm0, DWORD PTR tv666[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv824[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv671[ebp]
	movss	xmm0, DWORD PTR tv824[ebp]
	subss	xmm0, DWORD PTR tv671[ebp]
	movss	DWORD PTR _yft$[ebp], xmm0

; 481  : 						zft = target->ZPos() - self->ZPos() + 4.0f;

	mov	ecx, DWORD PTR _target$5[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv675[ebp]
	movss	xmm0, DWORD PTR tv675[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movss	DWORD PTR tv826[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv680[ebp]
	movss	xmm0, DWORD PTR tv826[ebp]
	subss	xmm0, DWORD PTR tv680[ebp]
	addss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR _zft$[ebp], xmm0

; 482  : 						realRange = (float)sqrt( xft * xft + yft * yft + zft * zft );

	movss	xmm0, DWORD PTR _xft$[ebp]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	movss	xmm1, DWORD PTR _yft$[ebp]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _zft$[ebp]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _realRange$3[ebp]

; 483  : 
; 484  : 						// Guess TOF
; 485  : 						tof = realRange / (theGun->initBulletVelocity + self->GetVt() - localTarget->localData->rangedot);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv693[ebp]
	mov	ecx, DWORD PTR _theGun$[ebp]
	movss	xmm0, DWORD PTR tv693[ebp]
	addss	xmm0, DWORD PTR [ecx+792]
	mov	edx, DWORD PTR _localTarget$[ebp]
	mov	eax, DWORD PTR [edx+12]
	subss	xmm0, DWORD PTR [eax+48]
	movss	xmm1, DWORD PTR _realRange$3[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _tof$4[ebp], xmm1

; 486  : 
; 487  : 						// now get vector to where we're aiming
; 488  : 						xft += (target->XDelta() - self->XDelta()) * tof;

	mov	ecx, DWORD PTR _target$5[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv701[ebp]
	movss	xmm0, DWORD PTR tv701[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movss	DWORD PTR tv828[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv706[ebp]
	movss	xmm0, DWORD PTR tv828[ebp]
	subss	xmm0, DWORD PTR tv706[ebp]
	mulss	xmm0, DWORD PTR _tof$4[ebp]
	addss	xmm0, DWORD PTR _xft$[ebp]
	movss	DWORD PTR _xft$[ebp], xmm0

; 489  : 						yft += (target->YDelta() - self->YDelta()) * tof;

	mov	ecx, DWORD PTR _target$5[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv711[ebp]
	movss	xmm0, DWORD PTR tv711[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	movss	DWORD PTR tv830[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv716[ebp]
	movss	xmm0, DWORD PTR tv830[ebp]
	subss	xmm0, DWORD PTR tv716[ebp]
	mulss	xmm0, DWORD PTR _tof$4[ebp]
	addss	xmm0, DWORD PTR _yft$[ebp]
	movss	DWORD PTR _yft$[ebp], xmm0

; 490  : 						zft += (target->ZDelta() - self->ZDelta()) * tof;

	mov	ecx, DWORD PTR _target$5[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv721[ebp]
	movss	xmm0, DWORD PTR tv721[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv832[ebp], xmm0
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv726[ebp]
	movss	xmm0, DWORD PTR tv832[ebp]
	subss	xmm0, DWORD PTR tv726[ebp]
	mulss	xmm0, DWORD PTR _tof$4[ebp]
	addss	xmm0, DWORD PTR _zft$[ebp]
	movss	DWORD PTR _zft$[ebp], xmm0

; 491  : 
; 492  : 						// Correct for gravity
; 493  : 						zft -= GRAVITY * tof * tof;

	movss	xmm0, DWORD PTR __real@4200b53f
	mulss	xmm0, DWORD PTR _tof$4[ebp]
	mulss	xmm0, DWORD PTR _tof$4[ebp]
	movss	xmm1, DWORD PTR _zft$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _zft$[ebp], xmm1

; 494  : 
; 495  : 						localTarget->localData->az = (float)atan2(yft,xft);

	cvtss2sd xmm0, DWORD PTR _xft$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _yft$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv735[ebp]
	fld	DWORD PTR tv735[ebp]
	mov	ecx, DWORD PTR _localTarget$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	fstp	DWORD PTR [edx+16]

; 496  : 						localTarget->localData->el = (float)atan(-zft/(float)sqrt(xft*xft + yft*yft +0.1F));

	movss	xmm0, DWORD PTR _zft$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _xft$[ebp]
	mulss	xmm1, DWORD PTR _xft$[ebp]
	movss	xmm2, DWORD PTR _yft$[ebp]
	mulss	xmm2, DWORD PTR _yft$[ebp]
	addss	xmm1, xmm2
	addss	xmm1, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv834[ebp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv743[ebp]
	movss	xmm0, DWORD PTR tv834[ebp]
	divss	xmm0, DWORD PTR tv743[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	mov	eax, DWORD PTR _localTarget$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	fstp	DWORD PTR [ecx+28]

; 497  : 						localTarget->localData->range = realRange;

	mov	edx, DWORD PTR _localTarget$[ebp]
	mov	eax, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR _realRange$3[ebp]
	movss	DWORD PTR [eax+44], xmm0

; 498  : 
; 499  : 						az = localTarget->localData->az - self->Yaw();

	mov	ecx, DWORD PTR _localTarget$[ebp]
	mov	esi, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv755[ebp]
	movss	xmm0, DWORD PTR [esi+16]
	subss	xmm0, DWORD PTR tv755[ebp]
	movss	DWORD PTR _az$2[ebp], xmm0

; 500  : 						el = localTarget->localData->el - self->Pitch();

	mov	eax, DWORD PTR _localTarget$[ebp]
	mov	esi, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	fstp	DWORD PTR tv762[ebp]
	movss	xmm0, DWORD PTR [esi+28]
	subss	xmm0, DWORD PTR tv762[ebp]
	movss	DWORD PTR _el$1[ebp], xmm0

; 501  : 
; 502  : 						mlSinCos (&trigEl, localTarget->localData->el);

	mov	edx, DWORD PTR _localTarget$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	ecx
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _trigEl$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 503  : 						mlSinCos (&trigAz, localTarget->localData->az);

	mov	edx, DWORD PTR _localTarget$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	ecx
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _trigAz$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 504  : 
; 505  : 						/*
; 506  : 
; 507  : 												dt = localTarget->localData->range / (3000.0F - localTarget->localData->rangedot);
; 508  : 
; 509  : 												xft = localTarget->BaseData()->XPos() + localTarget->BaseData()->XDelta() * dt - self->XPos();
; 510  : 												yft = localTarget->BaseData()->YPos() + localTarget->BaseData()->YDelta() * dt - self->YPos();
; 511  : 												zft = localTarget->BaseData()->ZPos() + localTarget->BaseData()->ZDelta() * dt - self->ZPos();
; 512  : 												zft += 0.5F * GRAVITY * dt * dt;
; 513  :             
; 514  : 												az = (float)atan2(yft,xft);
; 515  : 												// sqrt returns positive, so this is cool
; 516  : 												el = (float)atan2(-zft,sqrt(xft*xft+yft*yft));
; 517  : 
; 518  : 												mlSinCos (&trigAz, az);
; 519  : 												mlSinCos (&trigEl, el);
; 520  : 						*/
; 521  : 						// JB 010210 End
; 522  : 
; 523  :             // Gun pointing matrix - NOTE roll = 0.0F
; 524  :             gMat[0][0] = trigAz.cos * trigEl.cos;

	movss	xmm0, DWORD PTR _trigAz$[ebp+4]
	mulss	xmm0, DWORD PTR _trigEl$[ebp+4]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	lea	eax, DWORD PTR _gMat$[ebp+edx]
	mov	ecx, 4
	imul	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 525  :             gMat[0][1] = trigAz.sin * trigEl.cos;

	movss	xmm0, DWORD PTR _trigAz$[ebp]
	mulss	xmm0, DWORD PTR _trigEl$[ebp+4]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	lea	eax, DWORD PTR _gMat$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 526  :             gMat[0][2] = -trigEl.sin;

	movss	xmm0, DWORD PTR _trigEl$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	lea	eax, DWORD PTR _gMat$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR [eax+ecx], xmm0

; 527  : 
; 528  :             gMat[1][0] = -trigAz.sin;

	movss	xmm0, DWORD PTR _trigAz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR _gMat$[ebp+edx]
	mov	ecx, 4
	imul	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 529  :             gMat[1][1] = trigAz.cos;

	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR _gMat$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _trigAz$[ebp+4]
	movss	DWORD PTR [eax+ecx], xmm0

; 530  :             gMat[1][2] = 0.0F;

	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR _gMat$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+ecx], xmm0

; 531  : 
; 532  :             gMat[2][0] = trigAz.cos * trigEl.sin;

	movss	xmm0, DWORD PTR _trigAz$[ebp+4]
	mulss	xmm0, DWORD PTR _trigEl$[ebp]
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	lea	eax, DWORD PTR _gMat$[ebp+edx]
	mov	ecx, 4
	imul	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 533  :             gMat[2][1] = trigAz.sin * trigEl.sin;

	movss	xmm0, DWORD PTR _trigAz$[ebp]
	mulss	xmm0, DWORD PTR _trigEl$[ebp]
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	lea	eax, DWORD PTR _gMat$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 534  :             gMat[2][2] = trigEl.cos;

	mov	edx, 12					; 0000000cH
	shl	edx, 1
	lea	eax, DWORD PTR _gMat$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR _trigEl$[ebp+4]
	movss	DWORD PTR [eax+ecx], xmm0

; 535  : 
; 536  :             fireFlag = TRUE;

	mov	DWORD PTR _fireFlag$[ebp], 1

; 537  :             if (!IsSetATC(FireTrainable))

	push	524288					; 00080000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetATC@DigitalBrain@@QAEHH@Z		; DigitalBrain::IsSetATC
	test	eax, eax
	jne	SHORT $LN3@TrainableG

; 538  :             {
; 539  :                self->SendFireMessage (theGun, FalconWeaponsFire::GUN, TRUE, localTarget);

	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	eax
	mov	ecx, DWORD PTR _localTarget$[ebp]
	push	ecx
	push	1
	push	0
	mov	edx, DWORD PTR _theGun$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?SendFireMessage@SimVehicleClass@@QAEXPAVSimWeaponClass@@HHPAVSimObjectType@@VVU_ID@@@Z ; SimVehicleClass::SendFireMessage

; 540  :                SetATCFlag (FireTrainable);

	push	524288					; 00080000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::SetATCFlag
$LN3@TrainableG:

; 541  :             }
; 542  :          }
; 543  :          else

	jmp	SHORT $LN1@TrainableG
$LN4@TrainableG:

; 544  :          {
; 545  :             fireFlag = FALSE;

	mov	DWORD PTR _fireFlag$[ebp], 0

; 546  :             if (IsSetATC(FireTrainable))

	push	524288					; 00080000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetATC@DigitalBrain@@QAEHH@Z		; DigitalBrain::IsSetATC
	test	eax, eax
	je	SHORT $LN1@TrainableG

; 547  :             {
; 548  :                self->SendFireMessage (theGun, FalconWeaponsFire::GUN, FALSE, localTarget);

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	mov	eax, DWORD PTR _localTarget$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _theGun$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?SendFireMessage@SimVehicleClass@@QAEXPAVSimWeaponClass@@HHPAVSimObjectType@@VVU_ID@@@Z ; SimVehicleClass::SendFireMessage

; 549  :                ClearATCFlag (FireTrainable);

	push	524288					; 00080000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag
$LN1@TrainableG:

; 550  :             }
; 551  :          }
; 552  : 
; 553  :          // Keep the tracers alive
; 554  :          theGun->Exec(&fireFlag, gMat, &self->platformAngles, targetList, FALSE );

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+376]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	add	eax, 340				; 00000154H
	push	eax
	lea	ecx, DWORD PTR _gMat$[ebp]
	push	ecx
	lea	edx, DWORD PTR _fireFlag$[ebp]
	push	edx
	mov	ecx, DWORD PTR _theGun$[ebp]
	call	?Exec@GunClass@@QAEHPAHQAY02MPAVObjectGeometry@@PAVSimObjectType@@H@Z ; GunClass::Exec
$LN12@TrainableG:

; 555  :       }
; 556  :    }

	jmp	$LN14@TrainableG
$LN13@TrainableG:
$LN19@TrainableG:

; 557  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?TrainableGunsEngage@DigitalBrain@@IAEXXZ ENDP		; DigitalBrain::TrainableGunsEngage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gengage.cpp
_TEXT	SEGMENT
tv760 = -188						; size = 4
tv617 = -184						; size = 4
tv753 = -180						; size = 4
tv653 = -176						; size = 4
tv774 = -172						; size = 4
tv673 = -168						; size = 4
tv744 = -164						; size = 4
tv638 = -160						; size = 4
tv737 = -156						; size = 4
tv588 = -152						; size = 4
tv725 = -148						; size = 4
tv666 = -144						; size = 4
tv772 = -140						; size = 4
tv768 = -136						; size = 4
tv710 = -132						; size = 4
tv631 = -128						; size = 4
tv703 = -124						; size = 4
tv597 = -120						; size = 4
tv688 = -116						; size = 4
tv770 = -112						; size = 4
_rngdot$1 = -108					; size = 4
tv497 = -104						; size = 4
tv155 = -100						; size = 4
tv475 = -96						; size = 4
tv186 = -92						; size = 4
_CONTROL_POINT_DISTANCE$2 = -88				; size = 4
tv250 = -84						; size = 4
tv432 = -80						; size = 4
tv165 = -76						; size = 4
tv411 = -72						; size = 4
_rng$3 = -68						; size = 4
tv381 = -64						; size = 4
tv227 = -60						; size = 4
tv364 = -56						; size = 4
tv180 = -52						; size = 4
tv343 = -48						; size = 4
tv156 = -44						; size = 4
tv313 = -40						; size = 4
tv152 = -36						; size = 4
tv301 = -32						; size = 4
tv280 = -28						; size = 4
tv444 = -24						; size = 4
_lagAngle$ = -20					; size = 4
_closure$4 = -16					; size = 4
_desiredClosure$ = -12					; size = 4
_actualClosure$ = -8					; size = 4
_this$ = -4						; size = 4
?GunsEngage@DigitalBrain@@IAEXXZ PROC			; DigitalBrain::GunsEngage
; _this$ = ecx

; 73   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 188				; 000000bcH
	mov	DWORD PTR _this$[ebp], ecx

; 74   : float desiredClosure,actualClosure,lagAngle;
; 75   : 
; 76   :    if (targetPtr == NULL) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN14@GunsEngage

; 77   :    {
; 78   :       return;

	jmp	$LN15@GunsEngage
$LN14@GunsEngage:

; 79   :    }
; 80   : 
; 81   :    /*-----------------------------*/
; 82   :    /* if ahead of target 3/9 line */
; 83   :    /*-----------------------------*/
; 84   :    if(targetData->ataFrom < 90.0F * DTR)//me123 this looks like a snapshot

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR __real@3fc90fd9
	comiss	xmm0, DWORD PTR [edx+4]
	jbe	SHORT $LN13@GunsEngage

; 85   :    {
; 86   :       // Pointing near, so look for a shot
; 87   :       FineGunsTrack(cornerSpeed,&lagAngle); 

	lea	eax, DWORD PTR _lagAngle$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+100]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FineGunsTrack@DigitalBrain@@IAEXMPAM@Z	; DigitalBrain::FineGunsTrack

; 88   :    }         
; 89   :    else 

	jmp	$LN1@GunsEngage
$LN13@GunsEngage:

; 90   :    /*---------------------------*/
; 91   :    /* if behind target 3/9 line */
; 92   :    /*---------------------------*/
; 93   :    {
; 94   : 	float CONTROL_POINT_DISTANCE = 1400.0f;

	movss	xmm0, DWORD PTR __real@44af0000
	movss	DWORD PTR _CONTROL_POINT_DISTANCE$2[ebp], xmm0

; 95   : 	float rngdot;
; 96   : 	float rng;
; 97   : 	float closure;
; 98   :    /*------------------------*/
; 99   :    /* range to control point */
; 100  :    /*------------------------*/
; 101  : 	if (targetData->ataFrom >= 120 *DTR)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movss	xmm0, DWORD PTR [eax+4]
	comiss	xmm0, DWORD PTR __real@40060a91
	jb	SHORT $LN11@GunsEngage

; 102  : 	   {rng = targetData->range - CONTROL_POINT_DISTANCE;}

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [edx+44]
	subss	xmm0, DWORD PTR _CONTROL_POINT_DISTANCE$2[ebp]
	movss	DWORD PTR _rng$3[ebp], xmm0
	jmp	SHORT $LN10@GunsEngage
$LN11@GunsEngage:

; 103  : 
; 104  : 	else {rng = -targetData->range + 3000.0f - CONTROL_POINT_DISTANCE  ;}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movss	xmm0, DWORD PTR [ecx+44]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	addss	xmm0, DWORD PTR __real@453b8000
	subss	xmm0, DWORD PTR _CONTROL_POINT_DISTANCE$2[ebp]
	movss	DWORD PTR _rng$3[ebp], xmm0
$LN10@GunsEngage:

; 105  : 
; 106  :    /*------------------------*/
; 107  :    /* current closure in kts */
; 108  :    /*------------------------*/
; 109  :    rngdot = -targetData->rangedot * FTPSEC_TO_KNOTS;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movss	xmm0, DWORD PTR [eax+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	DWORD PTR _rngdot$1[ebp], xmm0

; 110  : 
; 111  :    /*---------------------------------------*/
; 112  :    /* desired in kts closure based on range */
; 113  :    /*---------------------------------------*/
; 114  :     closure = (((rng - rngdot *5) / 1000.0F) * 50.0F); /* farmer range*closure function */ //me123

	movss	xmm0, DWORD PTR _rngdot$1[ebp]
	mulss	xmm0, DWORD PTR __real@40a00000
	movss	xmm1, DWORD PTR _rng$3[ebp]
	subss	xmm1, xmm0
	divss	xmm1, DWORD PTR __real@447a0000
	mulss	xmm1, DWORD PTR __real@42480000
	movss	DWORD PTR _closure$4[ebp], xmm1

; 115  :     closure = min (max (closure, -350.0F), 1000.0F);

	movss	xmm0, DWORD PTR _closure$4[ebp]
	comiss	xmm0, DWORD PTR __real@c3af0000
	jbe	SHORT $LN17@GunsEngage
	movss	xmm0, DWORD PTR _closure$4[ebp]
	movss	DWORD PTR tv152[ebp], xmm0
	jmp	SHORT $LN18@GunsEngage
$LN17@GunsEngage:
	movss	xmm0, DWORD PTR __real@c3af0000
	movss	DWORD PTR tv152[ebp], xmm0
$LN18@GunsEngage:
	movss	xmm0, DWORD PTR __real@447a0000
	comiss	xmm0, DWORD PTR tv152[ebp]
	jbe	SHORT $LN21@GunsEngage
	movss	xmm0, DWORD PTR _closure$4[ebp]
	comiss	xmm0, DWORD PTR __real@c3af0000
	jbe	SHORT $LN19@GunsEngage
	movss	xmm0, DWORD PTR _closure$4[ebp]
	movss	DWORD PTR tv155[ebp], xmm0
	jmp	SHORT $LN20@GunsEngage
$LN19@GunsEngage:
	movss	xmm0, DWORD PTR __real@c3af0000
	movss	DWORD PTR tv155[ebp], xmm0
$LN20@GunsEngage:
	movss	xmm0, DWORD PTR tv155[ebp]
	movss	DWORD PTR tv156[ebp], xmm0
	jmp	SHORT $LN22@GunsEngage
$LN21@GunsEngage:
	movss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR tv156[ebp], xmm0
$LN22@GunsEngage:
	movss	xmm0, DWORD PTR tv156[ebp]
	movss	DWORD PTR _closure$4[ebp], xmm0

; 116  : 	closure = min (closure, targetPtr->BaseData()->GetKias() + 50.0f);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv165[ebp], eax
	mov	edx, DWORD PTR tv165[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv165[ebp]
	mov	edx, DWORD PTR [eax+224]
	call	edx
	fstp	DWORD PTR tv588[ebp]
	movss	xmm0, DWORD PTR tv588[ebp]
	addss	xmm0, DWORD PTR __real@42480000
	comiss	xmm0, DWORD PTR _closure$4[ebp]
	jbe	SHORT $LN23@GunsEngage
	movss	xmm0, DWORD PTR _closure$4[ebp]
	movss	DWORD PTR tv186[ebp], xmm0
	jmp	SHORT $LN24@GunsEngage
$LN23@GunsEngage:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv180[ebp], eax
	mov	ecx, DWORD PTR tv180[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv180[ebp]
	mov	eax, DWORD PTR [edx+224]
	call	eax
	fstp	DWORD PTR tv597[ebp]
	movss	xmm0, DWORD PTR tv597[ebp]
	addss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR tv186[ebp], xmm0
$LN24@GunsEngage:
	movss	xmm0, DWORD PTR tv186[ebp]
	movss	DWORD PTR _closure$4[ebp], xmm0

; 117  : 	desiredClosure = closure;

	movss	xmm0, DWORD PTR _closure$4[ebp]
	movss	DWORD PTR _desiredClosure$[ebp], xmm0

; 118  : 
; 119  : 
; 120  :       /*--------------------------------------------------------------------*/
; 121  :       /* use one dimensional interpolation to find desired closure in knots */
; 122  :       /*--------------------------------------------------------------------*/
; 123  :   //    desiredClosure = (100.0F * targetData->range / 2000.0F) - 100.0F; //me123
; 124  :       /*--------------------*/
; 125  :       /* get actual closure */
; 126  :       /*--------------------*/
; 127  :       actualClosure = -targetData->rangedot * FTPSEC_TO_KNOTS;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR [edx+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	DWORD PTR _actualClosure$[ebp], xmm0

; 128  : 
; 129  :       /*-------------------------------------------------------*/
; 130  :       /* if too close and too fast, bail out on the high side  */
; 131  :       /*-------------------------------------------------------*/
; 132  :       if( targetData->range < 2000.0F)//me123 changed from 2000

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movss	xmm0, DWORD PTR __real@44fa0000
	comiss	xmm0, DWORD PTR [ecx+44]
	jbe	$LN9@GunsEngage

; 133  :       {
; 134  :          if( actualClosure > desiredClosure)

	movss	xmm0, DWORD PTR _actualClosure$[ebp]
	comiss	xmm0, DWORD PTR _desiredClosure$[ebp]
	jbe	$LN8@GunsEngage

; 135  :          {
; 136  : 			
; 137  : 				//          AddMode (RoopMode);
; 138  : 			 //me123           FineGunsTrack(self->GetKias()+(desiredClosure - actualClosure),&lagAngle);
; 139  : 						//      FineGunsTrack(min (targetPtr->BaseData()->GetKias() -250,self->GetKias()+(desiredClosure - actualClosure)),&lagAngle);//me123 erhh don't use corner here, it's not good you might overshoot.(max (cornerSpeed, self->GetKias()+(desiredClosure - actualClosure)),&lagAngle);
; 140  : 						MachHold(targetPtr->BaseData()->GetKias()-100.0f, self->GetKias(), FALSE);//me123 addet

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv227[ebp], eax
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR [edx+224]
	call	eax
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR tv227[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv227[ebp]
	mov	eax, DWORD PTR [edx+224]
	call	eax
	fstp	DWORD PTR tv617[ebp]
	movss	xmm0, DWORD PTR tv617[ebp]
	subss	xmm0, DWORD PTR __real@42c80000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MachHold@DigitalBrain@@IAEHMMH@Z	; DigitalBrain::MachHold

; 141  : 						if (targetData->range < 800.0F) // JB 010212 1000.0F)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR __real@44480000
	comiss	xmm0, DWORD PTR [edx+44]
	jbe	SHORT $LN7@GunsEngage

; 142  : 						//{ // JB 010212
; 143  : 							RollAndPull();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RollAndPull@DigitalBrain@@IAEXXZ	; DigitalBrain::RollAndPull
$LN7@GunsEngage:

; 144  : 						//	return; // JB 010212
; 145  : 						//} // JB 010212
; 146  : 						FineGunsTrack(min (targetPtr->BaseData()->GetKias(),self->GetKias()+(desiredClosure - actualClosure)),&lagAngle);//me123 erhh don't use corner here, it's not good you might overshoot.(max (cornerSpeed, self->GetKias()+(desiredClosure - actualClosure)),&lagAngle); // JB 010212

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv250[ebp], eax
	mov	ecx, DWORD PTR tv250[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv250[ebp]
	mov	eax, DWORD PTR [edx+224]
	call	eax
	fstp	DWORD PTR tv631[ebp]
	movss	xmm0, DWORD PTR tv631[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR [edx+224]
	movss	DWORD PTR tv768[ebp], xmm0
	call	eax
	fstp	DWORD PTR tv638[ebp]
	movss	xmm0, DWORD PTR tv638[ebp]
	movss	xmm1, DWORD PTR _desiredClosure$[ebp]
	subss	xmm1, DWORD PTR _actualClosure$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR tv768[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN25@GunsEngage
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv280[ebp], eax
	mov	edx, DWORD PTR tv280[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv280[ebp]
	mov	edx, DWORD PTR [eax+224]
	call	edx
	fstp	DWORD PTR tv301[ebp]
	jmp	SHORT $LN26@GunsEngage
$LN25@GunsEngage:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+56]
	mov	edx, DWORD PTR [eax+224]
	call	edx
	fstp	DWORD PTR tv653[ebp]
	movss	xmm0, DWORD PTR tv653[ebp]
	movss	xmm1, DWORD PTR _desiredClosure$[ebp]
	subss	xmm1, DWORD PTR _actualClosure$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv301[ebp], xmm0
$LN26@GunsEngage:
	lea	eax, DWORD PTR _lagAngle$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR tv301[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FineGunsTrack@DigitalBrain@@IAEXMPAM@Z	; DigitalBrain::FineGunsTrack

; 147  : 
; 148  : 			//            MonoPrint ("too close and too fast, let's BFM");
; 149  :          }
; 150  : 
; 151  :          /*---------------------------------------*/
; 152  :          /* if too close and slow, point to shoot */
; 153  :          /* if lagging behind target.             */
; 154  :          /*---------------------------------------*/
; 155  :          else

	jmp	$LN5@GunsEngage
$LN8@GunsEngage:

; 156  :          {
; 157  :             FineGunsTrack(min (targetPtr->BaseData()->GetKias(),self->GetKias()+(desiredClosure - actualClosure)),&lagAngle);//me123 erhh don't use corner here, it's not good you might overshoot.(max (cornerSpeed, self->GetKias()+(desiredClosure - actualClosure)),&lagAngle);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv313[ebp], eax
	mov	edx, DWORD PTR tv313[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv313[ebp]
	mov	edx, DWORD PTR [eax+224]
	call	edx
	fstp	DWORD PTR tv666[ebp]
	movss	xmm0, DWORD PTR tv666[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+56]
	mov	edx, DWORD PTR [eax+224]
	movss	DWORD PTR tv770[ebp], xmm0
	call	edx
	fstp	DWORD PTR tv673[ebp]
	movss	xmm0, DWORD PTR tv673[ebp]
	movss	xmm1, DWORD PTR _desiredClosure$[ebp]
	subss	xmm1, DWORD PTR _actualClosure$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR tv770[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN27@GunsEngage
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv343[ebp], eax
	mov	ecx, DWORD PTR tv343[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv343[ebp]
	mov	eax, DWORD PTR [edx+224]
	call	eax
	fstp	DWORD PTR tv364[ebp]
	jmp	SHORT $LN28@GunsEngage
$LN27@GunsEngage:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR [edx+224]
	call	eax
	fstp	DWORD PTR tv688[ebp]
	movss	xmm0, DWORD PTR tv688[ebp]
	movss	xmm1, DWORD PTR _desiredClosure$[ebp]
	subss	xmm1, DWORD PTR _actualClosure$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv364[ebp], xmm0
$LN28@GunsEngage:
	lea	ecx, DWORD PTR _lagAngle$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR tv364[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FineGunsTrack@DigitalBrain@@IAEXMPAM@Z	; DigitalBrain::FineGunsTrack

; 158  :             if (Stagnated())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Stagnated@DigitalBrain@@IAEHXZ		; DigitalBrain::Stagnated
	test	eax, eax
	je	SHORT $LN5@GunsEngage

; 159  :             {
; 160  :                MonoPrint ("Help me, I'm Stuck in a Luffberry\n");

	push	OFFSET ??_C@_0CD@HOIBHIKC@Help?5me?0?5I?8m?5Stuck?5in?5a?5Luffberr@
	call	_MonoPrint
	add	esp, 4
$LN5@GunsEngage:

; 161  :             }
; 162  :          }
; 163  :       }
; 164  :       else

	jmp	$LN1@GunsEngage
$LN9@GunsEngage:

; 165  :       /*-------------------------------------------------------*/
; 166  :       /* if too far and too fast, point to shoot and slow      */
; 167  :       /*-------------------------------------------------------*/
; 168  :       {
; 169  :          if( actualClosure > desiredClosure )

	movss	xmm0, DWORD PTR _actualClosure$[ebp]
	comiss	xmm0, DWORD PTR _desiredClosure$[ebp]
	jbe	$LN3@GunsEngage

; 170  :          {
; 171  : 						FineGunsTrack(min (targetPtr->BaseData()->GetKias(), self->GetKias()+(desiredClosure - actualClosure)),&lagAngle);//me123 erhh don't use corner here, it's not good you might overshoot.(max (cornerSpeed, self->GetKias()+(desiredClosure - actualClosure)),&lagAngle);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv381[ebp], eax
	mov	eax, DWORD PTR tv381[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv381[ebp]
	mov	eax, DWORD PTR [edx+224]
	call	eax
	fstp	DWORD PTR tv703[ebp]
	movss	xmm0, DWORD PTR tv703[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR [edx+224]
	movss	DWORD PTR tv772[ebp], xmm0
	call	eax
	fstp	DWORD PTR tv710[ebp]
	movss	xmm0, DWORD PTR tv710[ebp]
	movss	xmm1, DWORD PTR _desiredClosure$[ebp]
	subss	xmm1, DWORD PTR _actualClosure$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR tv772[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN29@GunsEngage
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv411[ebp], eax
	mov	edx, DWORD PTR tv411[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv411[ebp]
	mov	edx, DWORD PTR [eax+224]
	call	edx
	fstp	DWORD PTR tv432[ebp]
	jmp	SHORT $LN30@GunsEngage
$LN29@GunsEngage:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+56]
	mov	edx, DWORD PTR [eax+224]
	call	edx
	fstp	DWORD PTR tv725[ebp]
	movss	xmm0, DWORD PTR tv725[ebp]
	movss	xmm1, DWORD PTR _desiredClosure$[ebp]
	subss	xmm1, DWORD PTR _actualClosure$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv432[ebp], xmm0
$LN30@GunsEngage:
	lea	eax, DWORD PTR _lagAngle$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR tv432[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FineGunsTrack@DigitalBrain@@IAEXMPAM@Z	; DigitalBrain::FineGunsTrack

; 172  :          }
; 173  :          /*-------------------------------------------------------*/
; 174  :          /* if too far and slow, point to shoot, and overbank     */
; 175  :          /* if lagging behind target.                             */
; 176  :          /*-------------------------------------------------------*/
; 177  :          else

	jmp	$LN1@GunsEngage
$LN3@GunsEngage:

; 178  :          {
; 179  :             FineGunsTrack(min (targetPtr->BaseData()->GetKias() + 30.0f,self->GetKias()+(desiredClosure - actualClosure)),&lagAngle);//me123 erhh don't use corner here, it's not good you might overshoot.(max (cornerSpeed, self->GetKias()+(desiredClosure - actualClosure)),&lagAngle);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv444[ebp], eax
	mov	edx, DWORD PTR tv444[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv444[ebp]
	mov	edx, DWORD PTR [eax+224]
	call	edx
	fstp	DWORD PTR tv737[ebp]
	movss	xmm0, DWORD PTR tv737[ebp]
	addss	xmm0, DWORD PTR __real@41f00000
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+56]
	mov	edx, DWORD PTR [eax+224]
	movss	DWORD PTR tv774[ebp], xmm0
	call	edx
	fstp	DWORD PTR tv744[ebp]
	movss	xmm0, DWORD PTR tv744[ebp]
	movss	xmm1, DWORD PTR _desiredClosure$[ebp]
	subss	xmm1, DWORD PTR _actualClosure$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR tv774[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN31@GunsEngage
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv475[ebp], eax
	mov	ecx, DWORD PTR tv475[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv475[ebp]
	mov	eax, DWORD PTR [edx+224]
	call	eax
	fstp	DWORD PTR tv753[ebp]
	movss	xmm0, DWORD PTR tv753[ebp]
	addss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR tv497[ebp], xmm0
	jmp	SHORT $LN32@GunsEngage
$LN31@GunsEngage:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR [edx+224]
	call	eax
	fstp	DWORD PTR tv760[ebp]
	movss	xmm0, DWORD PTR tv760[ebp]
	movss	xmm1, DWORD PTR _desiredClosure$[ebp]
	subss	xmm1, DWORD PTR _actualClosure$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv497[ebp], xmm0
$LN32@GunsEngage:
	lea	ecx, DWORD PTR _lagAngle$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR tv497[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FineGunsTrack@DigitalBrain@@IAEXMPAM@Z	; DigitalBrain::FineGunsTrack

; 180  :             if( lagAngle > 2.0F * DTR)

	movss	xmm0, DWORD PTR _lagAngle$[ebp]
	comiss	xmm0, DWORD PTR __real@3d0efa34
	jbe	SHORT $LN1@GunsEngage

; 181  :                AddMode (OverBMode);

	push	14					; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddMode@DigitalBrain@@IAEXW4DigiMode@1@@Z ; DigitalBrain::AddMode
$LN1@GunsEngage:
$LN15@GunsEngage:

; 182  :          }
; 183  :       } /* check on range desired */
; 184  :    } /* behind 3/9 line */
; 185  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GunsEngage@DigitalBrain@@IAEXXZ ENDP			; DigitalBrain::GunsEngage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbrain.h
;	COMDAT ?SetFlag@BaseBrain@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_val$ = 8						; size = 4
?SetFlag@BaseBrain@@QAEXH@Z PROC			; BaseBrain::SetFlag, COMDAT
; _this$ = ecx

; 37   :       void SetFlag (int val) {flags |= val;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	or	ecx, DWORD PTR _val$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFlag@BaseBrain@@QAEXH@Z ENDP			; BaseBrain::SetFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?checked_atan2@@YANNN@Z
_TEXT	SEGMENT
_z$ = -8						; size = 8
_y$ = 8							; size = 8
_x$ = 16						; size = 8
?checked_atan2@@YANNN@Z PROC				; checked_atan2, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 47   : 	double z;
; 48   : 	
; 49   : 	if (x == -0.0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@8000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@checked_at

; 50   : 		x = 0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _x$[ebp], xmm0
$LN8@checked_at:

; 51   : 	
; 52   : 	if (x != 0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@checked_at

; 53   : 		z = atan(y / x);

	movsd	xmm0, QWORD PTR _y$[ebp]
	divsd	xmm0, QWORD PTR _x$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR _z$[ebp]
	jmp	SHORT $LN4@checked_at
$LN7@checked_at:

; 54   : 	else if (y > 0)

	movsd	xmm0, QWORD PTR _y$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@checked_at

; 55   : 		z = HALF_DPI;

	movsd	xmm0, QWORD PTR __real@3ff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 56   : 	else

	jmp	SHORT $LN4@checked_at
$LN5@checked_at:

; 57   : 		z = -HALF_DPI;

	movsd	xmm0, QWORD PTR __real@bff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN4@checked_at:

; 58   : 
; 59   : 	if (x < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _x$[ebp]
	jbe	SHORT $LN1@checked_at

; 60   : 	{
; 61   : 		if (y < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _y$[ebp]
	jbe	SHORT $LN2@checked_at

; 62   : 			z -= DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	subsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 63   : 		else

	jmp	SHORT $LN1@checked_at
$LN2@checked_at:

; 64   : 			z += DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	addsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN1@checked_at:

; 65   : 	}
; 66   : 
; 67   : 	return z;

	fld	QWORD PTR _z$[ebp]

; 68   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?checked_atan2@@YANNN@Z ENDP				; checked_atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?mlSinCos@@YAXPAUmlTrig@@M@Z
_TEXT	SEGMENT
_trig$ = 8						; size = 4
_angle$ = 12						; size = 4
?mlSinCos@@YAXPAUmlTrig@@M@Z PROC			; mlSinCos, COMDAT

; 12   : {

	push	ebp
	mov	ebp, esp

; 13   : #if defined(_MSC_VER)
; 14   : 	__asm 
; 15   : 	{
; 16   : 		__asm	mov     ecx, trig;

	mov	ecx, DWORD PTR _trig$[ebp]

; 17   : 		__asm	fld     dword ptr [angle];

	fld	DWORD PTR _angle$[ebp]

; 18   : 		__asm	fsincos;

	fsincos

; 19   : 		__asm	fstp    dword ptr [ecx]trig.cos;

	fstp	DWORD PTR [ecx+4]

; 20   : 		__asm	fstp    dword ptr [ecx]trig.sin;

	fstp	DWORD PTR [ecx]

; 21   : 	}
; 22   : #else
; 23   : 	trig->sin = (Float32)sin(angle);
; 24   : 	trig->cos = (Float32)cos(angle);
; 25   : #endif
; 26   : }

	pop	ebp
	ret	0
?mlSinCos@@YAXPAUmlTrig@@M@Z ENDP			; mlSinCos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Roll@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Roll@VuEntity@@QBEMXZ PROC				; VuEntity::Roll, COMDAT
; _this$ = ecx

; 166  : 	SM_SCALAR Roll() const { return orient_.roll_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+68]
	mov	esp, ebp
	pop	ebp
	ret	0
?Roll@VuEntity@@QBEMXZ ENDP				; VuEntity::Roll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Pitch@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Pitch@VuEntity@@QBEMXZ PROC				; VuEntity::Pitch, COMDAT
; _this$ = ecx

; 165  : 	SM_SCALAR Pitch() const { return orient_.pitch_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+64]
	mov	esp, ebp
	pop	ebp
	ret	0
?Pitch@VuEntity@@QBEMXZ ENDP				; VuEntity::Pitch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Yaw@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Yaw@VuEntity@@QBEMXZ PROC				; VuEntity::Yaw, COMDAT
; _this$ = ecx

; 164  : 	SM_SCALAR Yaw() const { return orient_.yaw_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?Yaw@VuEntity@@QBEMXZ ENDP				; VuEntity::Yaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZDelta@VuEntity@@QBEMXZ PROC				; VuEntity::ZDelta, COMDAT
; _this$ = ecx

; 163  : 	SM_SCALAR ZDelta() const { return pos_.dz_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::ZDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YDelta@VuEntity@@QBEMXZ PROC				; VuEntity::YDelta, COMDAT
; _this$ = ecx

; 162  : 	SM_SCALAR YDelta() const { return pos_.dy_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?YDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::YDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XDelta@VuEntity@@QBEMXZ PROC				; VuEntity::XDelta, COMDAT
; _this$ = ecx

; 161  : 	SM_SCALAR XDelta() const { return pos_.dx_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?XDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::XDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?atan@@YAMM@Z PROC					; atan, COMDAT

; 505  :         {return (atanf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atanf
	add	esp, 4
	pop	ebp
	ret	0
?atan@@YAMM@Z ENDP					; atan
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 404  :         {return ((float)atan((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_atanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
