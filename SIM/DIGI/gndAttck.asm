; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\DIGI\gndAttck.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?TP@@3PAPAVSimObjectType@@A			; TP
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
_BSS	SEGMENT
?TP@@3PAPAVSimObjectType@@A DD 01H DUP (?)		; TP
_BSS	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
_DATA	SEGMENT
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_DATA	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
_NEAR_CLIP DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	_acosf
PUBLIC	?acos@@YAMM@Z					; acos
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	??0VU_SESSION_ID@@QAE@K@Z			; VU_SESSION_ID::VU_SESSION_ID
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??0VU_ID@@QAE@XZ				; VU_ID::VU_ID
PUBLIC	??9VU_ID@@QBE_NABV0@@Z				; VU_ID::operator!=
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?Type@VuEntity@@QBEGXZ				; VuEntity::Type
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?XDelta@VuEntity@@QBEMXZ			; VuEntity::XDelta
PUBLIC	?YDelta@VuEntity@@QBEMXZ			; VuEntity::YDelta
PUBLIC	?Yaw@VuEntity@@QBEMXZ				; VuEntity::Yaw
PUBLIC	?Pitch@VuEntity@@QBEMXZ				; VuEntity::Pitch
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	?IsCampaign@FalconEntity@@QAEHXZ		; FalconEntity::IsCampaign
PUBLIC	?IsSim@FalconEntity@@QAEHXZ			; FalconEntity::IsSim
PUBLIC	?IsSetFalcFlag@FalconEntity@@QAEHH@Z		; FalconEntity::IsSetFalcFlag
PUBLIC	?IsPlayer@FalconEntity@@QAEHXZ			; FalconEntity::IsPlayer
PUBLIC	?mlSinCos@@YAXPAUmlTrig@@M@Z			; mlSinCos
PUBLIC	?checked_atan2@@YANNN@Z				; checked_atan2
PUBLIC	?SetFlag@BaseBrain@@QAEXH@Z			; BaseBrain::SetFlag
PUBLIC	?ClearFlag@BaseBrain@@QAEXH@Z			; BaseBrain::ClearFlag
PUBLIC	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
PUBLIC	?GetWPTargetBuilding@WayPointClass@@QAEEXZ	; WayPointClass::GetWPTargetBuilding
PUBLIC	?GetWPAction@WayPointClass@@QAEHXZ		; WayPointClass::GetWPAction
PUBLIC	?GetWPRouteAction@WayPointClass@@QAEHXZ		; WayPointClass::GetWPRouteAction
PUBLIC	?GetWPFlags@WayPointClass@@QAEKXZ		; WayPointClass::GetWPFlags
PUBLIC	?GetNextWP@WayPointClass@@QAEPAV1@XZ		; WayPointClass::GetNextWP
PUBLIC	?GetPrevWP@WayPointClass@@QAEPAV1@XZ		; WayPointClass::GetPrevWP
PUBLIC	?GroundAttackMode@DigitalBrain@@IAEXXZ		; DigitalBrain::GroundAttackMode
PUBLIC	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget
PUBLIC	?SetGroundTargetPtr@DigitalBrain@@IAEXPAVSimObjectType@@@Z ; DigitalBrain::SetGroundTargetPtr
PUBLIC	?SelectGroundTarget@DigitalBrain@@IAEXH@Z	; DigitalBrain::SelectGroundTarget
PUBLIC	?SelectCampGroundTarget@DigitalBrain@@IAEXXZ	; DigitalBrain::SelectCampGroundTarget
PUBLIC	?TakePicture@DigitalBrain@@IAEXMM@Z		; DigitalBrain::TakePicture
PUBLIC	?DropBomb@DigitalBrain@@IAEXMMPAVRadarClass@@@Z	; DigitalBrain::DropBomb
PUBLIC	?DropGBU@DigitalBrain@@IAEXMMPAVRadarClass@@@Z	; DigitalBrain::DropGBU
PUBLIC	?FireAGMissile@DigitalBrain@@IAEXMM@Z		; DigitalBrain::FireAGMissile
PUBLIC	?FireRocket@DigitalBrain@@IAEHMM@Z		; DigitalBrain::FireRocket
PUBLIC	?GunStrafe@DigitalBrain@@IAEHMM@Z		; DigitalBrain::GunStrafe
PUBLIC	?MaverickSetup@DigitalBrain@@IAEHMMMMPAVRadarClass@@@Z ; DigitalBrain::MaverickSetup
PUBLIC	?HARMSetup@DigitalBrain@@IAEHMMMM@Z		; DigitalBrain::HARMSetup
PUBLIC	?JSOWSetup@DigitalBrain@@IAEHMMMM@Z		; DigitalBrain::JSOWSetup
PUBLIC	?AGflyOut@DigitalBrain@@IAEXXZ			; DigitalBrain::AGflyOut
PUBLIC	?SelectGroundWeapon@DigitalBrain@@IAEXXZ	; DigitalBrain::SelectGroundWeapon
PUBLIC	?SetupAGMode@DigitalBrain@@IAEXPAVWayPointClass@@0@Z ; DigitalBrain::SetupAGMode
PUBLIC	?IPCheck@DigitalBrain@@IAEXXZ			; DigitalBrain::IPCheck
PUBLIC	?SetTrackPoint@DigitalBrain@@QAEXMM@Z		; DigitalBrain::SetTrackPoint
PUBLIC	?SetTrackPoint@DigitalBrain@@QAEXMMM@Z		; DigitalBrain::SetTrackPoint
PUBLIC	?SetATCFlag@DigitalBrain@@QAEXH@Z		; DigitalBrain::SetATCFlag
PUBLIC	?ClearATCFlag@DigitalBrain@@QAEXH@Z		; DigitalBrain::ClearATCFlag
PUBLIC	?IsSetATC@DigitalBrain@@QAEHH@Z			; DigitalBrain::IsSetATC
PUBLIC	?IsNotMainTargetSEAD@DigitalBrain@@AAEHXZ	; DigitalBrain::IsNotMainTargetSEAD
PUBLIC	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
PUBLIC	?IsAwake@SimBaseClass@@QBEHXZ			; SimBaseClass::IsAwake
PUBLIC	?IsSetFlag@SimBaseClass@@QBEHH@Z		; SimBaseClass::IsSetFlag
PUBLIC	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
PUBLIC	?RdrRng@SimBaseClass@@QAEMXZ			; SimBaseClass::RdrRng
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
PUBLIC	??7?$VuBin@VSimWeaponClass@@@@QBE_NXZ		; VuBin<SimWeaponClass>::operator!
PUBLIC	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ		; VuBin<SimWeaponClass>::operator bool
PUBLIC	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
PUBLIC	?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::get
PUBLIC	?GetNextOnRail@SimWeaponClass@@QAEPAV1@XZ	; SimWeaponClass::GetNextOnRail
PUBLIC	?IsSetBombFlag@BombClass@@QAEHH@Z		; BombClass::IsSetBombFlag
PUBLIC	?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ ; FireControlComputer::GetMasterMode
PUBLIC	?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetSubMode
PUBLIC	?SetBombReleaseOverride@FireControlComputer@@QAEXH@Z ; FireControlComputer::SetBombReleaseOverride
PUBLIC	?NumHardpoints@SMSBaseClass@@QAEHXZ		; SMSBaseClass::NumHardpoints
PUBLIC	?CurHardpoint@SMSBaseClass@@QAEHXZ		; SMSBaseClass::CurHardpoint
PUBLIC	?NumCurrentWpn@SMSBaseClass@@QAEHXZ		; SMSBaseClass::NumCurrentWpn
PUBLIC	?IsFiringRockets@SMSClass@@QAEHXZ		; SMSClass::IsFiringRockets
PUBLIC	?CurRippleCount@SMSClass@@QAEHXZ		; SMSClass::CurRippleCount
PUBLIC	?GetAGBRippleCount@SMSClass@@QAEHXZ		; SMSClass::GetAGBRippleCount
PUBLIC	?GetAGBRippleInterval@SMSClass@@QAEHXZ		; SMSClass::GetAGBRippleInterval
PUBLIC	?GetAGBBurstAlt@SMSClass@@QAEHXZ		; SMSClass::GetAGBBurstAlt
PUBLIC	?SetAGBRippleCount@SMSClass@@QAEXH@Z		; SMSClass::SetAGBRippleCount
PUBLIC	?SetAGBBurstAlt@SMSClass@@QAEXH@Z		; SMSClass::SetAGBBurstAlt
PUBLIC	?SetAGBPair@SMSClass@@QAEX_N@Z			; SMSClass::SetAGBPair
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
PUBLIC	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ	; AircraftClass::DBrain
PUBLIC	?FabsF@@YAMM@Z					; FabsF
PUBLIC	?SqrtF@@YAMM@Z					; SqrtF
PUBLIC	?IsAggregate@CampBaseClass@@QAEHXZ		; CampBaseClass::IsAggregate
PUBLIC	?UnsetChecked@CampBaseClass@@QAEXXZ		; CampBaseClass::UnsetChecked
PUBLIC	?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ	; UnitClass::GetTarget
PUBLIC	?GetUnitTactic@UnitClass@@QBEHXZ		; UnitClass::GetUnitTactic
PUBLIC	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ	; SimObjectType::BaseData
PUBLIC	?TStance@TeamClass@@QAEHE@Z			; TeamClass::TStance
PUBLIC	?IsLocked@LaserPodClass@@QAEHXZ			; LaserPodClass::IsLocked
PUBLIC	?MoveStick@@YAXAAMMM@Z				; MoveStick
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_0N@PEIHJIIA@Way?5Too?5Low?6?$AA@		; `string'
PUBLIC	??_C@_08BAMGLEEE@Too?5Low?6?$AA@		; `string'
PUBLIC	??_C@_0O@DIIALKLP@RocketFiring?6?$AA@		; `string'
PUBLIC	??_C@_0M@KMPJBFFN@RocketJink?6?$AA@		; `string'
PUBLIC	??_C@_0CB@JNHJEDCH@RocketFlyOut?5Alt?3?5?$CFf?5?5Range?3?5?$CFf?6@ ; `string'
PUBLIC	??_C@_0BA@NAONBMMI@noSolution?5?$DN?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0BJ@BJNDFIH@Pitch?3?5To?5Attack?5Alt?5?$CFf?6?$AA@ ; `string'
PUBLIC	??_C@_0HE@BDJBNFGF@?$CK?$CKME?$CK?$CK?5hdg?5?$CFf?5atel?5?$CFf?5pitch?5?$CFf?5t@ ; `string'
PUBLIC	??_C@_0L@NKJBDNAB@Too?5Close?6?$AA@		; `string'
PUBLIC	??_C@_0BI@PGBJGCL@Roll?3?5To?5Tgt?5Direction?6?$AA@ ; `string'
PUBLIC	??_C@_0BN@OEJMGLIO@Roll?3?5Pipper?5To?5Tgt?5taz?3?5?$CFf?6?$AA@ ; `string'
PUBLIC	??_C@_06MHHKCODM@Firing?$AA@			; `string'
PUBLIC	??_C@_0CC@OEAEGKEN@?$CK?$CK?$CK?$CK?5Fire?5Missiles?5?$CK?$CK?$CK?$CK?5Angle?5?$CFf@ ; `string'
PUBLIC	??_C@_0M@JCNJJKHD@Rocket?9Fail?$AA@		; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@392c987a
PUBLIC	__real@3c0efa34
PUBLIC	__real@3c8efa34
PUBLIC	__real@3d8efa34
PUBLIC	__real@3db2b8c1
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e32b8c1
PUBLIC	__real@3e800000
PUBLIC	__real@3e860a91
PUBLIC	__real@3eb2b8c1
PUBLIC	__real@3f000000
PUBLIC	__real@3f060a91
PUBLIC	__real@3f1c61a9
PUBLIC	__real@3f32b8c1
PUBLIC	__real@3f333333
PUBLIC	__real@3f490fd9
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3f860a91
PUBLIC	__real@3fa66666
PUBLIC	__real@3fa78d35
PUBLIC	__real@3fc00000
PUBLIC	__real@3fc90fd9
PUBLIC	__real@3fd80b03
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@40000000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@40400000
PUBLIC	__real@40833333
PUBLIC	__real@40a00000
PUBLIC	__real@40c00000
PUBLIC	__real@40f00000
PUBLIC	__real@41200000
PUBLIC	__real@42480000
PUBLIC	__real@42652ee1
PUBLIC	__real@42700000
PUBLIC	__real@42c80000
PUBLIC	__real@43160000
PUBLIC	__real@437a0000
PUBLIC	__real@43fa0000
PUBLIC	__real@4417e7c0
PUBLIC	__real@447a0000
PUBLIC	__real@4497e7c0
PUBLIC	__real@44bb8000
PUBLIC	__real@44fa0000
PUBLIC	__real@45bb8000
PUBLIC	__real@45bde1b0
PUBLIC	__real@45e3dba1
PUBLIC	__real@463de1b0
PUBLIC	__real@466d5a1c
PUBLIC	__real@468e6944
PUBLIC	__real@46a6257a
PUBLIC	__real@46ed5a1c
PUBLIC	__real@4704d000
PUBLIC	__real@473de1b0
PUBLIC	__real@47927c00
PUBLIC	__real@4f5c0ff8
PUBLIC	__real@50abec7b
PUBLIC	__real@8000000000000000
PUBLIC	__real@bc8efa34
PUBLIC	__real@bdb2b8c1
PUBLIC	__real@be32b8c1
PUBLIC	__real@bf060a91
PUBLIC	__real@bf32b8c1
PUBLIC	__real@bf333333
PUBLIC	__real@bf800000
PUBLIC	__real@bf860a91
PUBLIC	__real@bff921fb54442d18
PUBLIC	__real@c2c80000
PUBLIC	__real@c3160000
PUBLIC	__real@c37a0000
PUBLIC	__real@c3c80000
PUBLIC	__real@c3fa0000
PUBLIC	__real@c47a0000
PUBLIC	__real@c4bb8000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_fflush:PROC
EXTRN	_fprintf:PROC
EXTRN	_acos:PROC
EXTRN	_atan:PROC
EXTRN	_fabs:PROC
EXTRN	_rand:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_MonoPrint:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z:PROC ; VuGridIterator::VuGridIterator
EXTRN	?GetFirst@VuGridIterator@@QAEPAVVuEntity@@XZ:PROC ; VuGridIterator::GetFirst
EXTRN	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ:PROC ; VuGridIterator::GetNext
EXTRN	?TargetAzEl@@YAXPAVFalconEntity@@MMMAAM1@Z:PROC	; TargetAzEl
EXTRN	?CalcRelGeom@@YAXPAVSimBaseClass@@PAVSimObjectType@@QAY02MM@Z:PROC ; CalcRelGeom
EXTRN	?GetLocation@WayPointClass@@QBEXPAM00@Z:PROC	; WayPointClass::GetLocation
EXTRN	?SelectNextWaypoint@DigitalBrain@@IAEXXZ:PROC	; DigitalBrain::SelectNextWaypoint
EXTRN	?GetWaypointIndex@DigitalBrain@@IAEHXZ:PROC	; DigitalBrain::GetWaypointIndex
EXTRN	?GetTargetWPIndex@DigitalBrain@@IAEHXZ:PROC	; DigitalBrain::GetTargetWPIndex
EXTRN	?SimpleTrackSpeed@DigitalBrain@@IAEMM@Z:PROC	; DigitalBrain::SimpleTrackSpeed
EXTRN	?TrackPoint@DigitalBrain@@IAEMMM@Z:PROC		; DigitalBrain::TrackPoint
EXTRN	?SetTrackPoint@DigitalBrain@@QAEXPAVSimObjectType@@@Z:PROC ; DigitalBrain::SetTrackPoint
EXTRN	?AiRunTargetSelection@DigitalBrain@@AAEXXZ:PROC	; DigitalBrain::AiRunTargetSelection
EXTRN	?AiRejoin@DigitalBrain@@AAEXPAVFalconWingmanMsg@@W4AiHint@1@@Z:PROC ; DigitalBrain::AiRejoin
EXTRN	?FindSimGroundTarget@DigitalBrain@@AAEPAVSimBaseClass@@PAVCampBaseClass@@HH@Z:PROC ; DigitalBrain::FindSimGroundTarget
EXTRN	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z:PROC ; FindSensor
EXTRN	?GetWeaponId@SimWeaponClass@@QAEFXZ:PROC	; SimWeaponClass::GetWeaponId
EXTRN	?GetTheBomb@FireControlComputer@@QAEPAVBombClass@@XZ:PROC ; FireControlComputer::GetTheBomb
EXTRN	?SetMasterMode@FireControlComputer@@QAEXW4FCCMasterMode@1@@Z:PROC ; FireControlComputer::SetMasterMode
EXTRN	?SetSubMode@FireControlComputer@@QAEXW4FCCSubMode@1@@Z:PROC ; FireControlComputer::SetSubMode
EXTRN	?SetTarget@FireControlComputer@@QAEXPAVSimObjectType@@@Z:PROC ; FireControlComputer::SetTarget
EXTRN	?SetWeaponType@SMSClass@@QAEXW4WeaponType@@@Z:PROC ; SMSClass::SetWeaponType
EXTRN	?FindWeaponClass@SMSClass@@QAEHW4WeaponClass@@H@Z:PROC ; SMSClass::FindWeaponClass
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z:PROC ; OTWDriverClass::GetGroundLevel
EXTRN	?DropProgramed@AircraftClass@@QAEXXZ:PROC	; AircraftClass::DropProgramed
EXTRN	?GetA2GJDAMAlt@AircraftClass@@QAEMXZ:PROC	; AircraftClass::GetA2GJDAMAlt
EXTRN	?GetA2GJSOWAlt@AircraftClass@@QAEMXZ:PROC	; AircraftClass::GetA2GJSOWAlt
EXTRN	?GetA2GHarmAlt@AircraftClass@@QAEMXZ:PROC	; AircraftClass::GetA2GHarmAlt
EXTRN	?GetA2GAGMAlt@AircraftClass@@QAEMXZ:PROC	; AircraftClass::GetA2GAGMAlt
EXTRN	?GetA2GGBUAlt@AircraftClass@@QAEMXZ:PROC	; AircraftClass::GetA2GGBUAlt
EXTRN	?GetA2GClusterAlt@AircraftClass@@QAEMXZ:PROC	; AircraftClass::GetA2GClusterAlt
EXTRN	?GetA2GDumbLDAlt@AircraftClass@@QAEMXZ:PROC	; AircraftClass::GetA2GDumbLDAlt
EXTRN	?GetA2GGenericBombAlt@AircraftClass@@QAEMXZ:PROC ; AircraftClass::GetA2GGenericBombAlt
EXTRN	?GetA2GGunRocketAlt@AircraftClass@@QAEMXZ:PROC	; AircraftClass::GetA2GGunRocketAlt
EXTRN	?GetA2GCameraAlt@AircraftClass@@QAEMXZ:PROC	; AircraftClass::GetA2GCameraAlt
EXTRN	?RunSeeker@MissileClass@@QAEXXZ:PROC		; MissileClass::RunSeeker
EXTRN	?GetRMax@MissileClass@@QAEMMMMMM@Z:PROC		; MissileClass::GetRMax
EXTRN	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z:PROC ; CampBaseClass::GetComponentEntity
EXTRN	?NumberOfComponents@CampBaseClass@@QAEHXZ:PROC	; CampBaseClass::NumberOfComponents
EXTRN	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z:PROC ; GetVehicleClassData
EXTRN	?GetOverrideWP@FlightClass@@QAEPAVWayPointClass@@XZ:PROC ; FlightClass::GetOverrideWP
EXTRN	??0SimObjectType@@QAE@PAVFalconEntity@@@Z:PROC	; SimObjectType::SimObjectType
EXTRN	?Reference@SimObjectType@@QAEXXZ:PROC		; SimObjectType::Reference
EXTRN	?Release@SimObjectType@@QAEXXZ:PROC		; SimObjectType::Release
EXTRN	?AiMakeRadioResponse@@YAXPAVSimBaseClass@@HPAF@Z:PROC ; AiMakeRadioResponse
EXTRN	?AiSendCommand@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z:PROC ; AiSendCommand
EXTRN	?FindLaserPod@@YAPAVSensorClass@@PAVSimMoverClass@@@Z:PROC ; FindLaserPod
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	?SimLibMajorFrameTime@@3MA:DWORD		; SimLibMajorFrameTime
EXTRN	?SimLibElapsedTime@@3KA:DWORD			; SimLibElapsedTime
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?WeaponDataTable@@3PAUWeaponClassDataType@@A:DWORD ; WeaponDataTable
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?RealUnitProxList@@3PAVVuGridTree@@A:DWORD	; RealUnitProxList
EXTRN	?TeamInfo@@3PAPAVTeamClass@@A:BYTE		; TeamInfo
EXTRN	?RadarDataTable@@3PAURadarDataType@@A:DWORD	; RadarDataTable
EXTRN	?g_nSeadAttackTime@@3HA:DWORD			; g_nSeadAttackTime
EXTRN	?g_nStrikeAttackTime@@3HA:DWORD			; g_nStrikeAttackTime
EXTRN	?g_nGroundAttackTime@@3HA:DWORD			; g_nGroundAttackTime
EXTRN	?g_nCASAttackTime@@3HA:DWORD			; g_nCASAttackTime
EXTRN	?g_fAIHarmMaxRange@@3MA:DWORD			; g_fAIHarmMaxRange
EXTRN	?g_fAIJSOWMaxRange@@3MA:DWORD			; g_fAIJSOWMaxRange
EXTRN	?g_nAIshootLookShootTime@@3HA:DWORD		; g_nAIshootLookShootTime
EXTRN	?g_fAGFlyoutRange@@3MA:DWORD			; g_fAGFlyoutRange
EXTRN	?g_fAGSlowFlyoutRange@@3MA:DWORD		; g_fAGSlowFlyoutRange
EXTRN	?g_fRocketPitchFactor@@3MA:DWORD		; g_fRocketPitchFactor
EXTRN	?g_fRocketPitchCorr@@3MA:DWORD			; g_fRocketPitchCorr
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A
_BSS	SEGMENT
?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A DD 01H DUP (?) ; `DigitalBrain::FireRocket'::`2'::fp
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c4bb8000
CONST	SEGMENT
__real@c4bb8000 DD 0c4bb8000r			; -1500
CONST	ENDS
;	COMDAT __real@c47a0000
CONST	SEGMENT
__real@c47a0000 DD 0c47a0000r			; -1000
CONST	ENDS
;	COMDAT __real@c3fa0000
CONST	SEGMENT
__real@c3fa0000 DD 0c3fa0000r			; -500
CONST	ENDS
;	COMDAT __real@c3c80000
CONST	SEGMENT
__real@c3c80000 DD 0c3c80000r			; -400
CONST	ENDS
;	COMDAT __real@c37a0000
CONST	SEGMENT
__real@c37a0000 DD 0c37a0000r			; -250
CONST	ENDS
;	COMDAT __real@c3160000
CONST	SEGMENT
__real@c3160000 DD 0c3160000r			; -150
CONST	ENDS
;	COMDAT __real@c2c80000
CONST	SEGMENT
__real@c2c80000 DD 0c2c80000r			; -100
CONST	ENDS
;	COMDAT __real@bff921fb54442d18
CONST	SEGMENT
__real@bff921fb54442d18 DQ 0bff921fb54442d18r	; -1.5708
CONST	ENDS
;	COMDAT __real@bf860a91
CONST	SEGMENT
__real@bf860a91 DD 0bf860a91r			; -1.0472
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf333333
CONST	SEGMENT
__real@bf333333 DD 0bf333333r			; -0.7
CONST	ENDS
;	COMDAT __real@bf32b8c1
CONST	SEGMENT
__real@bf32b8c1 DD 0bf32b8c1r			; -0.698132
CONST	ENDS
;	COMDAT __real@bf060a91
CONST	SEGMENT
__real@bf060a91 DD 0bf060a91r			; -0.523599
CONST	ENDS
;	COMDAT __real@be32b8c1
CONST	SEGMENT
__real@be32b8c1 DD 0be32b8c1r			; -0.174533
CONST	ENDS
;	COMDAT __real@bdb2b8c1
CONST	SEGMENT
__real@bdb2b8c1 DD 0bdb2b8c1r			; -0.0872665
CONST	ENDS
;	COMDAT __real@bc8efa34
CONST	SEGMENT
__real@bc8efa34 DD 0bc8efa34r			; -0.0174533
CONST	ENDS
;	COMDAT __real@8000000000000000
CONST	SEGMENT
__real@8000000000000000 DQ 08000000000000000r	; -0
CONST	ENDS
;	COMDAT __real@50abec7b
CONST	SEGMENT
__real@50abec7b DD 050abec7br			; 2.30752e+010
CONST	ENDS
;	COMDAT __real@4f5c0ff8
CONST	SEGMENT
__real@4f5c0ff8 DD 04f5c0ff8r			; 3.69203e+009
CONST	ENDS
;	COMDAT __real@47927c00
CONST	SEGMENT
__real@47927c00 DD 047927c00r			; 75000
CONST	ENDS
;	COMDAT __real@473de1b0
CONST	SEGMENT
__real@473de1b0 DD 0473de1b0r			; 48609.7
CONST	ENDS
;	COMDAT __real@4704d000
CONST	SEGMENT
__real@4704d000 DD 04704d000r			; 34000
CONST	ENDS
;	COMDAT __real@46ed5a1c
CONST	SEGMENT
__real@46ed5a1c DD 046ed5a1cr			; 30381.1
CONST	ENDS
;	COMDAT __real@46a6257a
CONST	SEGMENT
__real@46a6257a DD 046a6257ar			; 21266.7
CONST	ENDS
;	COMDAT __real@468e6944
CONST	SEGMENT
__real@468e6944 DD 0468e6944r			; 18228.6
CONST	ENDS
;	COMDAT __real@466d5a1c
CONST	SEGMENT
__real@466d5a1c DD 0466d5a1cr			; 15190.5
CONST	ENDS
;	COMDAT __real@463de1b0
CONST	SEGMENT
__real@463de1b0 DD 0463de1b0r			; 12152.4
CONST	ENDS
;	COMDAT __real@45e3dba1
CONST	SEGMENT
__real@45e3dba1 DD 045e3dba1r			; 7291.45
CONST	ENDS
;	COMDAT __real@45bde1b0
CONST	SEGMENT
__real@45bde1b0 DD 045bde1b0r			; 6076.21
CONST	ENDS
;	COMDAT __real@45bb8000
CONST	SEGMENT
__real@45bb8000 DD 045bb8000r			; 6000
CONST	ENDS
;	COMDAT __real@44fa0000
CONST	SEGMENT
__real@44fa0000 DD 044fa0000r			; 2000
CONST	ENDS
;	COMDAT __real@44bb8000
CONST	SEGMENT
__real@44bb8000 DD 044bb8000r			; 1500
CONST	ENDS
;	COMDAT __real@4497e7c0
CONST	SEGMENT
__real@4497e7c0 DD 04497e7c0r			; 1215.24
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@4417e7c0
CONST	SEGMENT
__real@4417e7c0 DD 04417e7c0r			; 607.621
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@437a0000
CONST	SEGMENT
__real@437a0000 DD 0437a0000r			; 250
CONST	ENDS
;	COMDAT __real@43160000
CONST	SEGMENT
__real@43160000 DD 043160000r			; 150
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@42652ee1
CONST	SEGMENT
__real@42652ee1 DD 042652ee1r			; 57.2958
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40f00000
CONST	SEGMENT
__real@40f00000 DD 040f00000r			; 7.5
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40833333
CONST	SEGMENT
__real@40833333 DD 040833333r			; 4.1
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3fd80b03
CONST	SEGMENT
__real@3fd80b03 DD 03fd80b03r			; 1.68784
CONST	ENDS
;	COMDAT __real@3fc90fd9
CONST	SEGMENT
__real@3fc90fd9 DD 03fc90fd9r			; 1.5708
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3fa78d35
CONST	SEGMENT
__real@3fa78d35 DD 03fa78d35r			; 1.309
CONST	ENDS
;	COMDAT __real@3fa66666
CONST	SEGMENT
__real@3fa66666 DD 03fa66666r			; 1.3
CONST	ENDS
;	COMDAT __real@3f860a91
CONST	SEGMENT
__real@3f860a91 DD 03f860a91r			; 1.0472
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f490fd9
CONST	SEGMENT
__real@3f490fd9 DD 03f490fd9r			; 0.785398
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f32b8c1
CONST	SEGMENT
__real@3f32b8c1 DD 03f32b8c1r			; 0.698132
CONST	ENDS
;	COMDAT __real@3f1c61a9
CONST	SEGMENT
__real@3f1c61a9 DD 03f1c61a9r			; 0.610865
CONST	ENDS
;	COMDAT __real@3f060a91
CONST	SEGMENT
__real@3f060a91 DD 03f060a91r			; 0.523599
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3eb2b8c1
CONST	SEGMENT
__real@3eb2b8c1 DD 03eb2b8c1r			; 0.349066
CONST	ENDS
;	COMDAT __real@3e860a91
CONST	SEGMENT
__real@3e860a91 DD 03e860a91r			; 0.261799
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e32b8c1
CONST	SEGMENT
__real@3e32b8c1 DD 03e32b8c1r			; 0.174533
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3db2b8c1
CONST	SEGMENT
__real@3db2b8c1 DD 03db2b8c1r			; 0.0872665
CONST	ENDS
;	COMDAT __real@3d8efa34
CONST	SEGMENT
__real@3d8efa34 DD 03d8efa34r			; 0.0698132
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@3c0efa34
CONST	SEGMENT
__real@3c0efa34 DD 03c0efa34r			; 0.00872665
CONST	ENDS
;	COMDAT __real@392c987a
CONST	SEGMENT
__real@392c987a DD 0392c987ar			; 0.0001646
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JCNJJKHD@Rocket?9Fail?$AA@
CONST	SEGMENT
??_C@_0M@JCNJJKHD@Rocket?9Fail?$AA@ DB 'Rocket-Fail', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@OEAEGKEN@?$CK?$CK?$CK?$CK?5Fire?5Missiles?5?$CK?$CK?$CK?$CK?5Angle?5?$CFf@
CONST	SEGMENT
??_C@_0CC@OEAEGKEN@?$CK?$CK?$CK?$CK?5Fire?5Missiles?5?$CK?$CK?$CK?$CK?5Angle?5?$CFf@ DB '*'
	DB	'*** Fire Missiles **** Angle %f', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06MHHKCODM@Firing?$AA@
CONST	SEGMENT
??_C@_06MHHKCODM@Firing?$AA@ DB 'Firing', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OEJMGLIO@Roll?3?5Pipper?5To?5Tgt?5taz?3?5?$CFf?6?$AA@
CONST	SEGMENT
??_C@_0BN@OEJMGLIO@Roll?3?5Pipper?5To?5Tgt?5taz?3?5?$CFf?6?$AA@ DB 'Roll:'
	DB	' Pipper To Tgt taz: %f', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PGBJGCL@Roll?3?5To?5Tgt?5Direction?6?$AA@
CONST	SEGMENT
??_C@_0BI@PGBJGCL@Roll?3?5To?5Tgt?5Direction?6?$AA@ DB 'Roll: To Tgt Dire'
	DB	'ction', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NKJBDNAB@Too?5Close?6?$AA@
CONST	SEGMENT
??_C@_0L@NKJBDNAB@Too?5Close?6?$AA@ DB 'Too Close', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HE@BDJBNFGF@?$CK?$CKME?$CK?$CK?5hdg?5?$CFf?5atel?5?$CFf?5pitch?5?$CFf?5t@
CONST	SEGMENT
??_C@_0HE@BDJBNFGF@?$CK?$CKME?$CK?$CK?5hdg?5?$CFf?5atel?5?$CFf?5pitch?5?$CFf?5t@ DB '*'
	DB	'*ME** hdg %f atel %f pitch %f tel %f  taz %f  dtaz %f  iel %f'
	DB	'  iaz %f  diaz %f  ang %f  Rng %f  rStk %f  pStk %f ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BJNDFIH@Pitch?3?5To?5Attack?5Alt?5?$CFf?6?$AA@
CONST	SEGMENT
??_C@_0BJ@BJNDFIH@Pitch?3?5To?5Attack?5Alt?5?$CFf?6?$AA@ DB 'Pitch: To At'
	DB	'tack Alt %f', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NAONBMMI@noSolution?5?$DN?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BA@NAONBMMI@noSolution?5?$DN?5?$CFd?$AA@ DB 'noSolution = %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@JNHJEDCH@RocketFlyOut?5Alt?3?5?$CFf?5?5Range?3?5?$CFf?6@
CONST	SEGMENT
??_C@_0CB@JNHJEDCH@RocketFlyOut?5Alt?3?5?$CFf?5?5Range?3?5?$CFf?6@ DB 'Ro'
	DB	'cketFlyOut Alt: %f  Range: %f', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KMPJBFFN@RocketJink?6?$AA@
CONST	SEGMENT
??_C@_0M@KMPJBFFN@RocketJink?6?$AA@ DB 'RocketJink', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DIIALKLP@RocketFiring?6?$AA@
CONST	SEGMENT
??_C@_0O@DIIALKLP@RocketFiring?6?$AA@ DB 'RocketFiring', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BAMGLEEE@Too?5Low?6?$AA@
CONST	SEGMENT
??_C@_08BAMGLEEE@Too?5Low?6?$AA@ DB 'Too Low', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PEIHJIIA@Way?5Too?5Low?6?$AA@
CONST	SEGMENT
??_C@_0N@PEIHJIIA@Way?5Too?5Low?6?$AA@ DB 'Way Too Low', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ?azRough@?7??FireRocket@DigitalBrain@@IAEHMM@Z@4MA
_DATA	SEGMENT
?azRough@?7??FireRocket@DigitalBrain@@IAEHMM@Z@4MA DD 03e32b8c1r ; 0.174533 ; `DigitalBrain::FireRocket'::`8'::azRough
_DATA	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?SelectGroundTarget@DigitalBrain@@IAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SelectGroundTarget@DigitalBrain@@IAEXH@Z$0
__unwindtable$?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z$0
__ehfuncinfo$?SelectGroundTarget@DigitalBrain@@IAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SelectGroundTarget@DigitalBrain@@IAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gndattck.cpp
_TEXT	SEGMENT
_stick$ = 8						; size = 4
_desired$ = 12						; size = 4
_dps$ = 16						; size = 4
?MoveStick@@YAXAAMMM@Z PROC				; MoveStick

; 3680 : 	{

	push	ebp
	mov	ebp, esp

; 3681 : 		if(stick > desired)

	mov	eax, DWORD PTR _stick$[ebp]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR _desired$[ebp]
	jbe	SHORT $LN5@MoveStick

; 3682 : 		{
; 3683 : 			stick -= dps * SimLibMajorFrameTime;

	movss	xmm0, DWORD PTR _dps$[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	ecx, DWORD PTR _stick$[ebp]
	movss	xmm1, DWORD PTR [ecx]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _stick$[ebp]
	movss	DWORD PTR [edx], xmm1

; 3684 : 			if(stick < desired) stick = desired;

	mov	eax, DWORD PTR _stick$[ebp]
	movss	xmm0, DWORD PTR _desired$[ebp]
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN4@MoveStick
	mov	ecx, DWORD PTR _stick$[ebp]
	movss	xmm0, DWORD PTR _desired$[ebp]
	movss	DWORD PTR [ecx], xmm0
$LN4@MoveStick:

; 3685 : 
; 3686 : 		}
; 3687 : 		else

	jmp	SHORT $LN1@MoveStick
$LN5@MoveStick:

; 3688 : 		{
; 3689 : 			if(stick < desired)

	mov	edx, DWORD PTR _stick$[ebp]
	movss	xmm0, DWORD PTR _desired$[ebp]
	comiss	xmm0, DWORD PTR [edx]
	jbe	SHORT $LN1@MoveStick

; 3690 : 			{
; 3691 : 				stick += dps * SimLibMajorFrameTime;

	movss	xmm0, DWORD PTR _dps$[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	eax, DWORD PTR _stick$[ebp]
	addss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _stick$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 3692 : 				if(stick > desired) stick = desired;

	mov	edx, DWORD PTR _stick$[ebp]
	movss	xmm0, DWORD PTR [edx]
	comiss	xmm0, DWORD PTR _desired$[ebp]
	jbe	SHORT $LN1@MoveStick
	mov	eax, DWORD PTR _stick$[ebp]
	movss	xmm0, DWORD PTR _desired$[ebp]
	movss	DWORD PTR [eax], xmm0
$LN1@MoveStick:

; 3693 : 			}	
; 3694 : 		}
; 3695 : 	}

	pop	ebp
	ret	0
?MoveStick@@YAXAAMMM@Z ENDP				; MoveStick
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\laserpod.h
;	COMDAT ?IsLocked@LaserPodClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
?IsLocked@LaserPodClass@@QAEHXZ PROC			; LaserPodClass::IsLocked, COMDAT
; _this$ = ecx

; 19   : 	int IsLocked (void)							{return (hasTarget == TargetLocked);}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 1
	jne	SHORT $LN3@IsLocked
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@IsLocked
$LN3@IsLocked:
	mov	DWORD PTR tv66[ebp], 0
$LN4@IsLocked:
	mov	eax, DWORD PTR tv66[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsLocked@LaserPodClass@@QAEHXZ ENDP			; LaserPodClass::IsLocked
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\team.h
;	COMDAT ?TStance@TeamClass@@QAEHE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_team$ = 8						; size = 1
?TStance@TeamClass@@QAEHE@Z PROC			; TeamClass::TStance, COMDAT
; _this$ = ecx

; 317  : 	int TStance(Team team)						{ return stance[team]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _team$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2+580]
	mov	esp, ebp
	pop	ebp
	ret	4
?TStance@TeamClass@@QAEHE@Z ENDP			; TeamClass::TStance
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\object.h
;	COMDAT ?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ PROC	; SimObjectType::BaseData, COMDAT
; _this$ = ecx

; 92   : 	FalconEntity* BaseData(void) { return baseData.get(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ENDP	; SimObjectType::BaseData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitTactic@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitTactic@UnitClass@@QBEHXZ PROC			; UnitClass::GetUnitTactic, COMDAT
; _this$ = ecx

; 375  : 	int GetUnitTactic() const						{ return tactic; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+222]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitTactic@UnitClass@@QBEHXZ ENDP			; UnitClass::GetUnitTactic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ PROC	; UnitClass::GetTarget, COMDAT
; _this$ = ecx

; 366  : 	FalconEntity* GetTarget (void)					{ return (FalconEntity*) vuDatabase->Find(target_id); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+216]
	push	ecx
	mov	edx, DWORD PTR [eax+212]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ ENDP	; UnitClass::GetTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?UnsetChecked@CampBaseClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?UnsetChecked@CampBaseClass@@QAEXXZ PROC		; CampBaseClass::UnsetChecked, COMDAT
; _this$ = ecx

; 307  : 	void UnsetChecked (void)					{	local_flags &= ~CBC_CHECKED; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+156]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+156], cx
	mov	esp, ebp
	pop	ebp
	ret	0
?UnsetChecked@CampBaseClass@@QAEXXZ ENDP		; CampBaseClass::UnsetChecked
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?IsAggregate@CampBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAggregate@CampBaseClass@@QAEHXZ PROC			; CampBaseClass::IsAggregate, COMDAT
; _this$ = ecx

; 278  : 	int IsAggregate (void)						{	return local_flags & CBC_AGGREGATE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+156]
	and	eax, 128				; 00000080H
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAggregate@CampBaseClass@@QAEHXZ ENDP			; CampBaseClass::IsAggregate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\fmath.h
;	COMDAT ?SqrtF@@YAMM@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
?SqrtF@@YAMM@Z PROC					; SqrtF, COMDAT

; 49   : {

	push	ebp
	mov	ebp, esp

; 50   : 	_asm
; 51   : 	{
; 52   : 		fld f;

	fld	DWORD PTR _f$[ebp]

; 53   : 		fsqrt;

	fsqrt

; 54   : 		fstp f;

	fstp	DWORD PTR _f$[ebp]

; 55   : 	}
; 56   : 
; 57   : 	return f;

	fld	DWORD PTR _f$[ebp]

; 58   : }

	pop	ebp
	ret	0
?SqrtF@@YAMM@Z ENDP					; SqrtF
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\fmath.h
;	COMDAT ?FabsF@@YAMM@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
?FabsF@@YAMM@Z PROC					; FabsF, COMDAT

; 37   : {

	push	ebp
	mov	ebp, esp

; 38   : 	_asm
; 39   : 	{
; 40   : 		fld f;

	fld	DWORD PTR _f$[ebp]

; 41   : 		fabs;

	fabs

; 42   : 		fstp f;

	fstp	DWORD PTR _f$[ebp]

; 43   : 	}
; 44   : 
; 45   : 	return f;

	fld	DWORD PTR _f$[ebp]

; 46   : }

	pop	ebp
	ret	0
?FabsF@@YAMM@Z ENDP					; FabsF
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ PROC	; AircraftClass::DBrain, COMDAT
; _this$ = ecx

; 624  : 	DigitalBrain *DBrain(void)			{return (DigitalBrain *)theBrain;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+672]
	mov	esp, ebp
	pop	ebp
	ret	0
?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ENDP	; AircraftClass::DBrain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ PROC ; AircraftClass::AutopilotType, COMDAT
; _this$ = ecx

; 329  : 	AutoPilotType	AutopilotType (void) {return autopilotType;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+968]
	mov	esp, ebp
	pop	ebp
	ret	0
?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ENDP ; AircraftClass::AutopilotType
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?SetAGBPair@SMSClass@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 1
?SetAGBPair@SMSClass@@QAEX_N@Z PROC			; SMSClass::SetAGBPair, COMDAT
; _this$ = ecx

; 325  : 	void SetAGBPair(bool x)           { agbProfile[curProfile].releasePair    = x; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _x$[ebp]
	mov	BYTE PTR [edx+ecx+232], al
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAGBPair@SMSClass@@QAEX_N@Z ENDP			; SMSClass::SetAGBPair
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?SetAGBBurstAlt@SMSClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?SetAGBBurstAlt@SMSClass@@QAEXH@Z PROC			; SMSClass::SetAGBBurstAlt, COMDAT
; _this$ = ecx

; 320  : 	void SetAGBBurstAlt(int x)        { agbProfile[curProfile].burstAltitude  = x; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR [edx+ecx+212], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAGBBurstAlt@SMSClass@@QAEXH@Z ENDP			; SMSClass::SetAGBBurstAlt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?SetAGBRippleCount@SMSClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?SetAGBRippleCount@SMSClass@@QAEXH@Z PROC		; SMSClass::SetAGBRippleCount, COMDAT
; _this$ = ecx

; 317  : 	void SetAGBRippleCount(int x)     { agbProfile[curProfile].rippleCount    = x; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR [edx+ecx+200], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAGBRippleCount@SMSClass@@QAEXH@Z ENDP		; SMSClass::SetAGBRippleCount
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?GetAGBBurstAlt@SMSClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAGBBurstAlt@SMSClass@@QAEHXZ PROC			; SMSClass::GetAGBBurstAlt, COMDAT
; _this$ = ecx

; 309  : 	int GetAGBBurstAlt(void)       { return agbProfile[curProfile].burstAltitude;   }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+212]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAGBBurstAlt@SMSClass@@QAEHXZ ENDP			; SMSClass::GetAGBBurstAlt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?GetAGBRippleInterval@SMSClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAGBRippleInterval@SMSClass@@QAEHXZ PROC		; SMSClass::GetAGBRippleInterval, COMDAT
; _this$ = ecx

; 307  : 	int GetAGBRippleInterval(void) { return agbProfile[curProfile].rippleInterval;  }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+204]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAGBRippleInterval@SMSClass@@QAEHXZ ENDP		; SMSClass::GetAGBRippleInterval
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?GetAGBRippleCount@SMSClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAGBRippleCount@SMSClass@@QAEHXZ PROC		; SMSClass::GetAGBRippleCount, COMDAT
; _this$ = ecx

; 306  : 	int GetAGBRippleCount(void)    { return agbProfile[curProfile].rippleCount;     }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+200]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAGBRippleCount@SMSClass@@QAEHXZ ENDP		; SMSClass::GetAGBRippleCount
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?CurRippleCount@SMSClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CurRippleCount@SMSClass@@QAEHXZ PROC			; SMSClass::CurRippleCount, COMDAT
; _this$ = ecx

; 255  : 		int  CurRippleCount(void) {return curRippleCount;}; // JB 010708

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+72]
	mov	esp, ebp
	pop	ebp
	ret	0
?CurRippleCount@SMSClass@@QAEHXZ ENDP			; SMSClass::CurRippleCount
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?IsFiringRockets@SMSClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsFiringRockets@SMSClass@@QAEHXZ PROC			; SMSClass::IsFiringRockets, COMDAT
; _this$ = ecx

; 194  : 	int IsFiringRockets( void ) { return runRockets; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+84]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsFiringRockets@SMSClass@@QAEHXZ ENDP			; SMSClass::IsFiringRockets
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?NumCurrentWpn@SMSBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NumCurrentWpn@SMSBaseClass@@QAEHXZ PROC		; SMSBaseClass::NumCurrentWpn, COMDAT
; _this$ = ecx

; 89   : 	int  NumCurrentWpn(void) {return numCurrentWpn;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?NumCurrentWpn@SMSBaseClass@@QAEHXZ ENDP		; SMSBaseClass::NumCurrentWpn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?CurHardpoint@SMSBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CurHardpoint@SMSBaseClass@@QAEHXZ PROC			; SMSBaseClass::CurHardpoint, COMDAT
; _this$ = ecx

; 88   : 	int CurHardpoint (void) {return curHardpoint;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?CurHardpoint@SMSBaseClass@@QAEHXZ ENDP			; SMSBaseClass::CurHardpoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?NumHardpoints@SMSBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NumHardpoints@SMSBaseClass@@QAEHXZ PROC		; SMSBaseClass::NumHardpoints, COMDAT
; _this$ = ecx

; 87   : 	int NumHardpoints (void) {return numHardpoints;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?NumHardpoints@SMSBaseClass@@QAEHXZ ENDP		; SMSBaseClass::NumHardpoints
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?SetBombReleaseOverride@FireControlComputer@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newVal$ = 8						; size = 4
?SetBombReleaseOverride@FireControlComputer@@QAEXH@Z PROC ; FireControlComputer::SetBombReleaseOverride, COMDAT
; _this$ = ecx

; 297  :    void SetBombReleaseOverride (int newVal) {bombReleaseOverride = newVal;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newVal$[ebp]
	mov	DWORD PTR [eax+100], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetBombReleaseOverride@FireControlComputer@@QAEXH@Z ENDP ; FireControlComputer::SetBombReleaseOverride
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ PROC ; FireControlComputer::GetSubMode, COMDAT
; _this$ = ecx

; 281  : 	FCCSubMode GetSubMode (void) {return (subMode);};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+148]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ENDP ; FireControlComputer::GetSubMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ PROC ; FireControlComputer::GetMasterMode, COMDAT
; _this$ = ecx

; 276  : 	FCCMasterMode GetMasterMode (void) {return (masterMode);};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+144]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ ENDP ; FireControlComputer::GetMasterMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\bomb.h
;	COMDAT ?IsSetBombFlag@BombClass@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_newFlag$ = 8						; size = 4
?IsSetBombFlag@BombClass@@QAEHH@Z PROC			; BombClass::IsSetBombFlag, COMDAT
; _this$ = ecx

; 102  : 	int IsSetBombFlag (int newFlag) {return flags & newFlag ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+732]
	and	ecx, DWORD PTR _newFlag$[ebp]
	je	SHORT $LN3@IsSetBombF
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSetBombF
$LN3@IsSetBombF:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSetBombF:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetBombFlag@BombClass@@QAEHH@Z ENDP			; BombClass::IsSetBombFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simweapn.h
;	COMDAT ?GetNextOnRail@SimWeaponClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNextOnRail@SimWeaponClass@@QAEPAV1@XZ PROC		; SimWeaponClass::GetNextOnRail, COMDAT
; _this$ = ecx

; 41   : 	SimWeaponClass* GetNextOnRail(void) { return nextOnRail.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 672				; 000002a0H
	call	?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextOnRail@SimWeaponClass@@QAEPAV1@XZ ENDP		; SimWeaponClass::GetNextOnRail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ PROC ; VuBin<SimWeaponClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ENDP ; VuBin<SimWeaponClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ PROC ; VuBin<SimWeaponClass>::operator->, COMDAT
; _this$ = ecx

; 50   : 	E *operator->() const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 52   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ENDP ; VuBin<SimWeaponClass>::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ PROC		; VuBin<SimWeaponClass>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ ENDP		; VuBin<SimWeaponClass>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??7?$VuBin@VSimWeaponClass@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??7?$VuBin@VSimWeaponClass@@@@QBE_NXZ PROC		; VuBin<SimWeaponClass>::operator!, COMDAT
; _this$ = ecx

; 37   : 	bool operator!() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 		return e == NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 39   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??7?$VuBin@VSimWeaponClass@@@@QBE_NXZ ENDP		; VuBin<SimWeaponClass>::operator!
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ PROC ; SensorClass::CurrentTarget, COMDAT
; _this$ = ecx

; 46   : 	SimObjectType* CurrentTarget(void)	{ return lockedTarget; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ENDP ; SensorClass::CurrentTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?RdrRng@SimBaseClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RdrRng@SimBaseClass@@QAEMXZ PROC			; SimBaseClass::RdrRng, COMDAT
; _this$ = ecx

; 225  : 	float RdrRng (void) {return specialData.rdrNominalRng;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+156]
	mov	esp, ebp
	pop	ebp
	ret	0
?RdrRng@SimBaseClass@@QAEMXZ ENDP			; SimBaseClass::RdrRng
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ PROC ; SimBaseClass::GetCampaignObject, COMDAT
; _this$ = ecx

; 212  : 	CampBaseClass *GetCampaignObject (void) { return campaignObject.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ENDP ; SimBaseClass::GetCampaignObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsSetFlag@SimBaseClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFlag@SimBaseClass@@QBEHH@Z PROC			; SimBaseClass::IsSetFlag, COMDAT
; _this$ = ecx

; 178  : 	int  IsSetFlag(int flag) const { return ((specialData.flags & flag) ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsSetFlag
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSetFlag
$LN3@IsSetFlag:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSetFlag:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFlag@SimBaseClass@@QBEHH@Z ENDP			; SimBaseClass::IsSetFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsAwake@SimBaseClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAwake@SimBaseClass@@QBEHXZ PROC			; SimBaseClass::IsAwake, COMDAT
; _this$ = ecx

; 177  : 	int IsAwake() const { return localFlags & OBJ_AWAKE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+284]
	and	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAwake@SimBaseClass@@QBEHXZ ENDP			; SimBaseClass::IsAwake
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ PROC ; VuBin<CampBaseClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ENDP ; VuBin<CampBaseClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gndattck.cpp
_TEXT	SEGMENT
_campBaseTarget$ = -8					; size = 4
_this$ = -4						; size = 4
?IsNotMainTargetSEAD@DigitalBrain@@AAEHXZ PROC		; DigitalBrain::IsNotMainTargetSEAD
; _this$ = ecx

; 62   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 63   : 	// SEADESCORT has no main target
; 64   : 	if ( missionType == AMIS_SEADESCORT )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+284], 12			; 0000000cH
	jne	SHORT $LN6@IsNotMainT

; 65   : 		return TRUE;

	mov	eax, 1
	jmp	$LN7@IsNotMainT
$LN6@IsNotMainT:

; 66   : 
; 67   : 	// Only for SEADS missions
; 68   : 	if ( missionType != AMIS_SEADSTRIKE )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+284], 11			; 0000000bH
	je	SHORT $LN5@IsNotMainT

; 69   : 		return FALSE;

	xor	eax, eax
	jmp	$LN7@IsNotMainT
$LN5@IsNotMainT:

; 70   : 
; 71   : 	// If not ground target, we can't check if it's our main target, right? So assume it's not our main target
; 72   : 	if (!groundTargetPtr)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+224], 0
	jne	SHORT $LN4@IsNotMainT

; 73   : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN7@IsNotMainT
$LN4@IsNotMainT:

; 74   : 
; 75   : 	// Get the target campaign object if it's a sim
; 76   : 	CampBaseClass *campBaseTarget = ((CampBaseClass *)groundTargetPtr->BaseData());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR _campBaseTarget$[ebp], eax

; 77   : 	if (((SimBaseClass *)groundTargetPtr->BaseData())->IsSim())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN3@IsNotMainT

; 78   : 		campBaseTarget = ((SimBaseClass *)groundTargetPtr->BaseData())->GetCampaignObject();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _campBaseTarget$[ebp], eax
$LN3@IsNotMainT:

; 79   : 
; 80   : 	// We should always have a waypoint but if we don't, can't be our attack waypoint right?
; 81   : 	if (!self->curWaypoint)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	cmp	DWORD PTR [ecx+728], 0
	jne	SHORT $LN2@IsNotMainT

; 82   : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN7@IsNotMainT
$LN2@IsNotMainT:

; 83   : 
; 84   : 	// If it's not our main target, it's ok to stop attacking it
; 85   : 	if (self->curWaypoint->GetWPTarget() != campBaseTarget)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+728]
	call	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
	cmp	eax, DWORD PTR _campBaseTarget$[ebp]
	je	SHORT $LN1@IsNotMainT

; 86   : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN7@IsNotMainT
$LN1@IsNotMainT:

; 87   : 
; 88   : 	// It's our main target, keep pounding it to death...
; 89   : 	return FALSE;

	xor	eax, eax
$LN7@IsNotMainT:

; 90   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsNotMainTargetSEAD@DigitalBrain@@AAEHXZ ENDP		; DigitalBrain::IsNotMainTargetSEAD
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?IsSetATC@DigitalBrain@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetATC@DigitalBrain@@QAEHH@Z PROC			; DigitalBrain::IsSetATC, COMDAT
; _this$ = ecx

; 709  : 	int		IsSetATC(int flag)								{return (atcFlags & flag) && TRUE;}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+300]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsSetATC
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@IsSetATC
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSetATC
$LN3@IsSetATC:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSetATC:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetATC@DigitalBrain@@QAEHH@Z ENDP			; DigitalBrain::IsSetATC
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?ClearATCFlag@DigitalBrain@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?ClearATCFlag@DigitalBrain@@QAEXH@Z PROC		; DigitalBrain::ClearATCFlag, COMDAT
; _this$ = ecx

; 708  : 	void	ClearATCFlag(int flag)							{atcFlags &= ~flag;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _flag$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+300]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+300], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearATCFlag@DigitalBrain@@QAEXH@Z ENDP		; DigitalBrain::ClearATCFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?SetATCFlag@DigitalBrain@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetATCFlag@DigitalBrain@@QAEXH@Z PROC			; DigitalBrain::SetATCFlag, COMDAT
; _this$ = ecx

; 707  : 	void	SetATCFlag(int flag)							{atcFlags |= flag;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+300]
	or	ecx, DWORD PTR _flag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+300], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetATCFlag@DigitalBrain@@QAEXH@Z ENDP			; DigitalBrain::SetATCFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?SetTrackPoint@DigitalBrain@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?SetTrackPoint@DigitalBrain@@QAEXMMM@Z PROC		; DigitalBrain::SetTrackPoint, COMDAT
; _this$ = ecx

; 699  : 	void	SetTrackPoint(float x, float y, float z){ SetTrackPoint(x, y); trackZ = z; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPoint@DigitalBrain@@QAEXMM@Z	; DigitalBrain::SetTrackPoint
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+156], xmm0
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetTrackPoint@DigitalBrain@@QAEXMMM@Z ENDP		; DigitalBrain::SetTrackPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?SetTrackPoint@DigitalBrain@@QAEXMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SetTrackPoint@DigitalBrain@@QAEXMM@Z PROC		; DigitalBrain::SetTrackPoint, COMDAT
; _this$ = ecx

; 698  : 	void	SetTrackPoint(float x, float y){ trackX = x; trackY=y; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax+148], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [ecx+152], xmm0
	mov	esp, ebp
	pop	ebp
	ret	8
?SetTrackPoint@DigitalBrain@@QAEXMM@Z ENDP		; DigitalBrain::SetTrackPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gndattck.cpp
_TEXT	SEGMENT
_Sms$ = -112						; size = 4
tv383 = -108						; size = 4
tv356 = -104						; size = 4
tv401 = -100						; size = 4
_response$ = -96					; size = 4
tv373 = -92						; size = 4
tv425 = -88						; size = 4
tv394 = -84						; size = 4
tv454 = -80						; size = 4
tv378 = -76						; size = 4
tv419 = -72						; size = 4
tv351 = -68						; size = 4
tv413 = -64						; size = 4
tv361 = -60						; size = 4
_tgtrangeSq$ = -56					; size = 4
_wpZ$ = -52						; size = 4
_wpY$ = -48						; size = 4
_rangeSq$ = -44						; size = 4
_wpX$ = -40						; size = 4
_dY$ = -36						; size = 4
_dZ$ = -32						; size = 4
_dX$ = -28						; size = 4
_tmpWaypoint$ = -24					; size = 4
_this$ = -20						; size = 4
_edata$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?IPCheck@DigitalBrain@@IAEXXZ PROC			; DigitalBrain::IPCheck
; _this$ = ecx

; 2970 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2971 : 		WayPointClass* tmpWaypoint = self->waypoint;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+732]
	mov	DWORD PTR _tmpWaypoint$[ebp], edx

; 2972 : 		SMSClass* Sms = self->Sms;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+940]
	mov	DWORD PTR _Sms$[ebp], edx

; 2973 : 		float wpX, wpY, wpZ;
; 2974 : 		//TJL 10/20/03 Added back in dZ
; 2975 : 		float dX, dY, dZ;
; 2976 : 		float rangeSq, tgtrangeSq;
; 2977 : 		short edata[6];
; 2978 : 		int response;
; 2979 : 
; 2980 : 		// Only for the player's wingmen
; 2981 : 		// JB 020315 All aircraft will now all check to see if they have passed the IP.  
; 2982 : 		// Only checking for the IP if the lead is a player is silly.  
; 2983 : 		// Things depend on the ReachedIP flag being set properly.
; 2984 : 		//if (flightLead && flightLead->IsSetFlag(MOTION_OWNSHIP)) 
; 2985 : 		{
; 2986 : 			// Periodically check for IP and if so, ask for permission to engage
; 2987 : 			//if (!IsSetATC(ReachedIP)) 
; 2988 : 			//TJL 10/20/03 Put this back to check FL lead
; 2989 : 			if (!IsSetATC(ReachedIP) && flightLead->IsSetFlag(MOTION_OWNSHIP))

	push	2097152					; 00200000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetATC@DigitalBrain@@QAEHH@Z		; DigitalBrain::IsSetATC
	test	eax, eax
	jne	$LN20@IPCheck
	push	65536					; 00010000H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	$LN20@IPCheck
$LN19@IPCheck:

; 2990 : 			{
; 2991 : 				// Find the IP waypoint
; 2992 : 				while (tmpWaypoint) {

	cmp	DWORD PTR _tmpWaypoint$[ebp], 0
	je	SHORT $LN18@IPCheck

; 2993 : 					if (tmpWaypoint->GetWPFlags() & WPF_TARGET)

	mov	ecx, DWORD PTR _tmpWaypoint$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 1
	je	SHORT $LN17@IPCheck

; 2994 : 						break;

	jmp	SHORT $LN18@IPCheck
$LN17@IPCheck:

; 2995 : 					tmpWaypoint = tmpWaypoint->GetNextWP();

	mov	ecx, DWORD PTR _tmpWaypoint$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _tmpWaypoint$[ebp], eax

; 2996 : 				}

	jmp	SHORT $LN19@IPCheck
$LN18@IPCheck:

; 2997 : 
; 2998 : 				// From the target, find the IP
; 2999 : 				if (tmpWaypoint)

	cmp	DWORD PTR _tmpWaypoint$[ebp], 0
	je	$LN16@IPCheck

; 3000 : 				{
; 3001 : 					tmpWaypoint->GetLocation (&wpX, &wpY, &wpZ);

	lea	ecx, DWORD PTR _wpZ$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wpY$[ebp]
	push	edx
	lea	eax, DWORD PTR _wpX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tmpWaypoint$[ebp]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation

; 3002 : 					dX = self->XPos() - wpX;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv351[ebp]
	movss	xmm0, DWORD PTR tv351[ebp]
	subss	xmm0, DWORD PTR _wpX$[ebp]
	movss	DWORD PTR _dX$[ebp], xmm0

; 3003 : 					dY = self->YPos() - wpY;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv356[ebp]
	movss	xmm0, DWORD PTR tv356[ebp]
	subss	xmm0, DWORD PTR _wpY$[ebp]
	movss	DWORD PTR _dY$[ebp], xmm0

; 3004 : 					dZ = self->ZPos() - wpZ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv361[ebp]
	movss	xmm0, DWORD PTR tv361[ebp]
	subss	xmm0, DWORD PTR _wpZ$[ebp]
	movss	DWORD PTR _dZ$[ebp], xmm0

; 3005 : 					tgtrangeSq = dX*dX + dY*dY + dZ*dZ;

	movss	xmm0, DWORD PTR _dX$[ebp]
	mulss	xmm0, DWORD PTR _dX$[ebp]
	movss	xmm1, DWORD PTR _dY$[ebp]
	mulss	xmm1, DWORD PTR _dY$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dZ$[ebp]
	mulss	xmm1, DWORD PTR _dZ$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _tgtrangeSq$[ebp], xmm0

; 3006 : 					tmpWaypoint = tmpWaypoint->GetPrevWP();

	mov	ecx, DWORD PTR _tmpWaypoint$[ebp]
	call	?GetPrevWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetPrevWP
	mov	DWORD PTR _tmpWaypoint$[ebp], eax
$LN16@IPCheck:

; 3007 : 				}
; 3008 : 
; 3009 : 				// Have an IP
; 3010 : 				// TJL 10/20/03 Added back Zpos
; 3011 : 				if (tmpWaypoint) 

	cmp	DWORD PTR _tmpWaypoint$[ebp], 0
	je	$LN4@IPCheck

; 3012 : 				{
; 3013 : 					tmpWaypoint->GetLocation (&wpX, &wpY, &wpZ);

	lea	ecx, DWORD PTR _wpZ$[ebp]
	push	ecx
	lea	edx, DWORD PTR _wpY$[ebp]
	push	edx
	lea	eax, DWORD PTR _wpX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tmpWaypoint$[ebp]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation

; 3014 : 					dX = self->XPos() - wpX;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv373[ebp]
	movss	xmm0, DWORD PTR tv373[ebp]
	subss	xmm0, DWORD PTR _wpX$[ebp]
	movss	DWORD PTR _dX$[ebp], xmm0

; 3015 : 					dY = self->YPos() - wpY;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv378[ebp]
	movss	xmm0, DWORD PTR tv378[ebp]
	subss	xmm0, DWORD PTR _wpY$[ebp]
	movss	DWORD PTR _dY$[ebp], xmm0

; 3016 : 					dZ = self->ZPos() - wpZ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv383[ebp]
	movss	xmm0, DWORD PTR tv383[ebp]
	subss	xmm0, DWORD PTR _wpZ$[ebp]
	movss	DWORD PTR _dZ$[ebp], xmm0

; 3017 : 
; 3018 : 					// Original code was looking for the SLANT distance, I'm not...
; 3019 : 					// Check for within 5 NM of IP
; 3020 : 					// TJL 10/20/03 Added back Z slant and change 5.0F to 10.0F
; 3021 : 					rangeSq = dX*dX + dY*dY + dZ*dZ;

	movss	xmm0, DWORD PTR _dX$[ebp]
	mulss	xmm0, DWORD PTR _dX$[ebp]
	movss	xmm1, DWORD PTR _dY$[ebp]
	mulss	xmm1, DWORD PTR _dY$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dZ$[ebp]
	mulss	xmm1, DWORD PTR _dZ$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rangeSq$[ebp], xmm0

; 3022 : 					//Cobra TJL Attempt to let SEAD flights target earlier
; 3023 : 					if (missionType == AMIS_SEADESCORT || missionType == AMIS_SEADSTRIKE)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+284], 12			; 0000000cH
	je	SHORT $LN13@IPCheck
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+284], 11			; 0000000bH
	jne	$LN14@IPCheck
$LN13@IPCheck:

; 3024 : 					{
; 3025 : 						if ((FabsF(rangeSq) < (25.0F * NM_TO_FT)*(25.0F * NM_TO_FT)) &&
; 3026 : 								(FabsF(tgtrangeSq) < (g_fAIHarmMaxRange * NM_TO_FT)*(g_fAIHarmMaxRange * NM_TO_FT))) 

	push	ecx
	movss	xmm0, DWORD PTR _rangeSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FabsF@@YAMM@Z				; FabsF
	add	esp, 4
	fstp	DWORD PTR tv394[ebp]
	movss	xmm0, DWORD PTR __real@50abec7b
	comiss	xmm0, DWORD PTR tv394[ebp]
	jbe	SHORT $LN11@IPCheck
	push	ecx
	movss	xmm0, DWORD PTR _tgtrangeSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FabsF@@YAMM@Z				; FabsF
	add	esp, 4
	fstp	DWORD PTR tv401[ebp]
	movss	xmm0, DWORD PTR ?g_fAIHarmMaxRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	movss	xmm1, DWORD PTR ?g_fAIHarmMaxRange@@3MA
	mulss	xmm1, DWORD PTR __real@45bde1b0
	mulss	xmm0, xmm1
	comiss	xmm0, DWORD PTR tv401[ebp]
	jbe	SHORT $LN11@IPCheck

; 3027 : 						{
; 3028 : 							SetATCFlag(ReachedIP);

	push	2097152					; 00200000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::SetATCFlag

; 3029 : 							// JB 020315 Only set the WaitForTarget flag if the lead is a player.
; 3030 : 							if (flightLead && flightLead->IsSetFlag(MOTION_OWNSHIP)) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+708], 0
	je	SHORT $LN11@IPCheck
	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+708]
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN11@IPCheck

; 3031 : 								SetATCFlag(WaitForTarget);

	push	1073741824				; 40000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::SetATCFlag
$LN11@IPCheck:

; 3032 : 						}
; 3033 : 
; 3034 : 					}

	jmp	$LN4@IPCheck
$LN14@IPCheck:

; 3035 : 					//Cobra - Attempt to let JSOW flights target earlier
; 3036 : 					//else if (((BombClass *)Sms->hardPoint[Sms->CurHardpoint()]->weaponPointer) && 
; 3037 : 					//					(((BombClass *)Sms->hardPoint[Sms->CurHardpoint()]->weaponPointer)->IsSetBombFlag(BombClass::IsJSOW)) ||
; 3038 : 					else if	(hasBomb == TRUE+4)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+180], 5
	jne	$LN9@IPCheck

; 3039 : 					{
; 3040 : 						if ((FabsF(rangeSq) < FabsF((25.0F * NM_TO_FT)*(25.0F * NM_TO_FT))) &&
; 3041 : 								(FabsF(tgtrangeSq) < (g_fAIJSOWMaxRange * NM_TO_FT)*(g_fAIJSOWMaxRange * NM_TO_FT))) 

	push	ecx
	movss	xmm0, DWORD PTR _rangeSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FabsF@@YAMM@Z				; FabsF
	add	esp, 4
	fstp	DWORD PTR tv413[ebp]
	movss	xmm0, DWORD PTR tv413[ebp]
	push	ecx
	movss	xmm1, DWORD PTR __real@50abec7b
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv454[ebp], xmm0
	call	?FabsF@@YAMM@Z				; FabsF
	add	esp, 4
	fstp	DWORD PTR tv419[ebp]
	movss	xmm0, DWORD PTR tv419[ebp]
	movss	xmm1, DWORD PTR tv454[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN7@IPCheck
	push	ecx
	movss	xmm0, DWORD PTR _tgtrangeSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FabsF@@YAMM@Z				; FabsF
	add	esp, 4
	fstp	DWORD PTR tv425[ebp]
	movss	xmm0, DWORD PTR ?g_fAIJSOWMaxRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	movss	xmm1, DWORD PTR ?g_fAIJSOWMaxRange@@3MA
	mulss	xmm1, DWORD PTR __real@45bde1b0
	mulss	xmm0, xmm1
	comiss	xmm0, DWORD PTR tv425[ebp]
	jbe	SHORT $LN7@IPCheck

; 3042 : 						{
; 3043 : 							SetATCFlag(ReachedIP);

	push	2097152					; 00200000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::SetATCFlag

; 3044 : 							// JB 020315 Only set the WaitForTarget flag if the lead is a player.
; 3045 : 							if (flightLead && flightLead->IsSetFlag(MOTION_OWNSHIP)) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+708], 0
	je	SHORT $LN7@IPCheck
	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+708]
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN7@IPCheck

; 3046 : 								SetATCFlag(WaitForTarget);

	push	1073741824				; 40000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::SetATCFlag
$LN7@IPCheck:

; 3047 : 						}
; 3048 : 					}

	jmp	SHORT $LN4@IPCheck
$LN9@IPCheck:

; 3049 : 					else if (rangeSq < (10.0F * NM_TO_FT)*(10.0F * NM_TO_FT)) 

	movss	xmm0, DWORD PTR __real@4f5c0ff8
	comiss	xmm0, DWORD PTR _rangeSq$[ebp]
	jbe	SHORT $LN4@IPCheck

; 3050 : 					{
; 3051 : 						// The range is INCREASING so we assume (may be wronly if we turned away from the IP waypoint) we've reached it, say so and wait for a target
; 3052 : 						SetATCFlag(ReachedIP);

	push	2097152					; 00200000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::SetATCFlag

; 3053 : 						// JB 020315 Only set the WaitForTarget flag if the lead is a player.
; 3054 : 						if (flightLead && flightLead->IsSetFlag(MOTION_OWNSHIP)) 

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+708], 0
	je	SHORT $LN4@IPCheck
	push	65536					; 00010000H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN4@IPCheck

; 3055 : 							SetATCFlag(WaitForTarget);

	push	1073741824				; 40000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::SetATCFlag
$LN4@IPCheck:

; 3056 : 					}
; 3057 : 				}
; 3058 : 			}

	jmp	$LN1@IPCheck
$LN20@IPCheck:

; 3059 : 			// We have reached our IP waypoint, are we waiting for a target?
; 3060 : 			else if (IsSetATC(WaitForTarget)) {

	push	1073741824				; 40000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetATC@DigitalBrain@@QAEHH@Z		; DigitalBrain::IsSetATC
	test	eax, eax
	je	$LN1@IPCheck

; 3061 : 				// Yes, ask for permission if we are an incomplete AGMission that doesn't already have a designated target and it holds a ground target
; 3062 : 				if (missionClass == AGMission && !missionComplete && !mpActionFlags[AI_ENGAGE_TARGET] && groundTargetPtr)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+288], 0
	jne	$LN1@IPCheck
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+292], 0
	jne	$LN1@IPCheck
	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+760], 0
	jne	$LN1@IPCheck
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+224], 0
	je	$LN1@IPCheck

; 3063 : 				{
; 3064 : 					// Flag we are waiting for permission and we have a ground target to shoot at
; 3065 : 					SetATCFlag(WaitingPermission);

	push	67108864				; 04000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::SetATCFlag

; 3066 : 					ClearATCFlag(WaitForTarget);

	push	1073741824				; 40000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 3067 : 
; 3068 : 					// Ask for permission to engage
; 3069 : 					SetATCFlag (AskedToEngage);

	push	1048576					; 00100000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::SetATCFlag

; 3070 : 					edata[0]	= ((FlightClass*)self->GetCampaignObject())->callsign_id;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	movzx	cx, BYTE PTR [eax+425]
	mov	edx, 2
	imul	edx, 0
	mov	WORD PTR _edata$[ebp+edx], cx

; 3071 : 					edata[1]	= (((FlightClass*)self->GetCampaignObject())->callsign_num - 1) * 4 + isWing + 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	movzx	ecx, BYTE PTR [eax+426]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	lea	ecx, DWORD PTR [eax+ecx*4-3]
	mov	edx, 2
	shl	edx, 0
	mov	WORD PTR _edata$[ebp+edx], cx

; 3072 : 					response = rcREQUESTTOENGAGE;

	mov	DWORD PTR _response$[ebp], 175		; 000000afH

; 3073 : 					AiMakeRadioResponse( self, response, edata );

	lea	eax, DWORD PTR _edata$[ebp]
	push	eax
	mov	ecx, DWORD PTR _response$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	?AiMakeRadioResponse@@YAXPAVSimBaseClass@@HPAF@Z ; AiMakeRadioResponse
	add	esp, 12					; 0000000cH
$LN1@IPCheck:

; 3074 : 				}
; 3075 : 			}
; 3076 : 		}
; 3077 : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?IPCheck@DigitalBrain@@IAEXXZ ENDP			; DigitalBrain::IPCheck
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gndattck.cpp
_TEXT	SEGMENT
_dz$ = -164						; size = 4
tv947 = -160						; size = 4
tv1130 = -156						; size = 4
tv965 = -152						; size = 4
tv1121 = -148						; size = 4
tv1139 = -144						; size = 4
tv1105 = -140						; size = 4
tv1143 = -136						; size = 4
tv1079 = -132						; size = 4
tv942 = -128						; size = 4
tv1072 = -124						; size = 4
tv924 = -120						; size = 4
tv1056 = -116						; size = 4
tv958 = -112						; size = 4
tv1048 = -108						; size = 4
tv953 = -104						; size = 4
tv1040 = -100						; size = 4
tv1141 = -96						; size = 4
tv1031 = -92						; size = 4
tv917 = -88						; size = 4
tv1022 = -84						; size = 4
tv931 = -80						; size = 4
tv1005 = -76						; size = 4
_classPtr$ = -72					; size = 4
tv936 = -68						; size = 4
tv697 = -64						; size = 4
_campUnit$ = -60					; size = 4
tv680 = -56						; size = 4
tv90 = -52						; size = 4
tv342 = -48						; size = 4
_Sms$ = -44						; size = 4
_range$ = -40						; size = 4
_dx$ = -36						; size = 4
_vc$1 = -32						; size = 4
_wpAction$ = -28					; size = 4
tv143 = -24						; size = 4
_dy$ = -20						; size = 4
_campBaseTarg$ = -16					; size = 4
_LoiterTime$2 = -12					; size = 4
_dwp$ = -8						; size = 4
_this$ = -4						; size = 4
_cwp$ = 8						; size = 4
_wp$ = 12						; size = 4
?SetupAGMode@DigitalBrain@@IAEXPAVWayPointClass@@0@Z PROC ; DigitalBrain::SetupAGMode
; _this$ = ecx

; 2551 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 164				; 000000a4H
	mov	DWORD PTR _this$[ebp], ecx

; 2552 : 		int wpAction;	
; 2553 : 		UnitClass *campUnit = (UnitClass *)self->GetCampaignObject();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _campUnit$[ebp], eax

; 2554 : 		CampBaseClass *campBaseTarg;
; 2555 : 		float dx, dy, dz, range;
; 2556 : 		Falcon4EntityClassType* classPtr;
; 2557 : 		WayPointClass *dwp;
; 2558 : 		SMSClass* Sms = self->Sms;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+940]
	mov	DWORD PTR _Sms$[ebp], eax

; 2559 : 
; 2560 : 		//================================================
; 2561 : 		// Cobra - bypass Setup while attacking with rockets
; 2562 : 		//================================================
; 2563 : 			if((Sms->curWeapon && Sms->curWeapon->IsLauncher() && hasRocket && onStation == Final) || rocketMnvr == RocketFiring)

	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN80@SetupAGMod
	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	DWORD PTR tv90[ebp], eax
	mov	edx, DWORD PTR tv90[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv90[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
	test	eax, eax
	je	SHORT $LN80@SetupAGMod
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+192], 0
	je	SHORT $LN80@SetupAGMod
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+132], 15			; 0000000fH
	je	SHORT $LN81@SetupAGMod
$LN80@SetupAGMod:
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+44], 1
	jne	SHORT $LN82@SetupAGMod
$LN81@SetupAGMod:

; 2564 : 			{
; 2565 : 				return;

	jmp	$LN83@SetupAGMod
$LN82@SetupAGMod:

; 2566 : 			}
; 2567 : 		//================================================
; 2568 : 
; 2569 : 		// Cobra - Initialize the loitering timer
; 2570 : 		if (agmergeTimer < 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+556], 0
	jae	$LN72@SetupAGMod

; 2571 : 		{
; 2572 : 			int LoiterTime = g_nGroundAttackTime;

	mov	ecx, DWORD PTR ?g_nGroundAttackTime@@3HA ; g_nGroundAttackTime
	mov	DWORD PTR _LoiterTime$2[ebp], ecx

; 2573 : 			switch (self->curWaypoint->GetWPAction())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+728]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	mov	DWORD PTR tv143[ebp], eax
	mov	ecx, DWORD PTR tv143[ebp]
	sub	ecx, 9
	mov	DWORD PTR tv143[ebp], ecx
	cmp	DWORD PTR tv143[ebp], 12		; 0000000cH
	ja	SHORT $LN73@SetupAGMod
	mov	edx, DWORD PTR tv143[ebp]
	movzx	eax, BYTE PTR $LN89@SetupAGMod[edx]
	jmp	DWORD PTR $LN90@SetupAGMod[eax*4]
$LN76@SetupAGMod:

; 2574 : 			{
; 2575 : 				case WP_GNDSTRIKE:
; 2576 : 				case WP_NAVSTRIKE:
; 2577 : 				case WP_STRIKE:
; 2578 : 				case WP_BOMB:
; 2579 : 					LoiterTime = g_nStrikeAttackTime;

	mov	ecx, DWORD PTR ?g_nStrikeAttackTime@@3HA ; g_nStrikeAttackTime
	mov	DWORD PTR _LoiterTime$2[ebp], ecx

; 2580 : 					break;

	jmp	SHORT $LN77@SetupAGMod
$LN75@SetupAGMod:

; 2581 : 
; 2582 : 				case WP_SEAD:
; 2583 : 					LoiterTime = g_nSeadAttackTime;

	mov	edx, DWORD PTR ?g_nSeadAttackTime@@3HA	; g_nSeadAttackTime
	mov	DWORD PTR _LoiterTime$2[ebp], edx

; 2584 : 					break;

	jmp	SHORT $LN77@SetupAGMod
$LN74@SetupAGMod:

; 2585 : 
; 2586 : 				case WP_SAD:
; 2587 : 				case WP_CASCP:
; 2588 : 				case WP_RECON:
; 2589 : 					LoiterTime = g_nCASAttackTime;

	mov	eax, DWORD PTR ?g_nCASAttackTime@@3HA	; g_nCASAttackTime
	mov	DWORD PTR _LoiterTime$2[ebp], eax

; 2590 : 					break;

	jmp	SHORT $LN77@SetupAGMod
$LN73@SetupAGMod:

; 2591 : 
; 2592 : 				default:
; 2593 : 					LoiterTime = g_nGroundAttackTime;

	mov	ecx, DWORD PTR ?g_nGroundAttackTime@@3HA ; g_nGroundAttackTime
	mov	DWORD PTR _LoiterTime$2[ebp], ecx
$LN77@SetupAGMod:

; 2594 : 					break;
; 2595 : 			}
; 2596 : 
; 2597 : 			agmergeTimer = SimLibElapsedTime + LoiterTime * 60 * SEC_TO_MSEC;

	mov	edx, DWORD PTR _LoiterTime$2[ebp]
	imul	edx, 60					; 0000003cH
	imul	edx, 1000				; 000003e8H
	add	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+556], edx

; 2598 : 
; 2599 : 
; 2600 : 			// Cobra - Try turning your AI wingmen loose
; 2601 : 			if (self->GetCampaignObject()->NumberOfComponents()>1 && !isWing)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	cmp	eax, 1
	jle	SHORT $LN72@SetupAGMod
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], 0
	jne	SHORT $LN72@SetupAGMod

; 2602 : 				// RED - FIXED CTD - AI should not use this function
; 2603 : 				// AiSendPlayerCommand( FalconWingmanMsg::WMWeaponsFree, AiFlight );
; 2604 : 				AiSendCommand( self, FalconWingmanMsg::WMWeaponsFree, AiFlight, FalconNullId );

	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	ecx
	push	2
	push	14					; 0000000eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	?AiSendCommand@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z ; AiSendCommand
	add	esp, 20					; 00000014H
$LN72@SetupAGMod:

; 2605 : 		}
; 2606 : 
; 2607 : 		// So we don't think our mission is complete and forget to go to CrossWind from 'NotThereYet'
; 2608 : 		// Cobra - if we have been attacking long enough, go home
; 2609 : 		if (agmergeTimer != 0 && SimLibElapsedTime > agmergeTimer)   

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+556], 0
	je	SHORT $LN71@SetupAGMod
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	eax, DWORD PTR [edx+556]
	jbe	SHORT $LN71@SetupAGMod

; 2610 : 		{
; 2611 : 			ClearATCFlag(HasCanUseAGWeapon);

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 2612 : 			ClearATCFlag(HasAGWeapon);

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 2613 : 			agmergeTimer = SimLibElapsedTime + 1;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+556], ecx

; 2614 : 			SetGroundTarget(NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget

; 2615 : 			agDoctrine = AGD_NONE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+244], 0

; 2616 : 			missionComplete = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+292], 1

; 2617 : 			return;

	jmp	$LN83@SetupAGMod

; 2618 : 		}
; 2619 : 		else

	jmp	SHORT $LN70@SetupAGMod
$LN71@SetupAGMod:

; 2620 : 			missionComplete = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+292], 0
$LN70@SetupAGMod:

; 2621 : 
; 2622 : 		agImprovise = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+240], 0

; 2623 : 
; 2624 : 		// First, lets get a target if we're the lead, otherwise use the target provided by the lead...
; 2625 : 
; 2626 : 		if (!isWing) 

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jne	$LN69@SetupAGMod

; 2627 : 		{
; 2628 : 			dwp = NULL;

	mov	DWORD PTR _dwp$[ebp], 0

; 2629 : 			if (campUnit)

	cmp	DWORD PTR _campUnit$[ebp], 0
	je	SHORT $LN68@SetupAGMod

; 2630 : 				dwp = ((FlightClass *)campUnit)->GetOverrideWP();

	mov	ecx, DWORD PTR _campUnit$[ebp]
	call	?GetOverrideWP@FlightClass@@QAEPAVWayPointClass@@XZ ; FlightClass::GetOverrideWP
	mov	DWORD PTR _dwp$[ebp], eax
$LN68@SetupAGMod:

; 2631 : 
; 2632 : 			// If we were passed a target wayp
; 2633 : 			if (wp) 

	cmp	DWORD PTR _wp$[ebp], 0
	je	$LN67@SetupAGMod

; 2634 : 			{
; 2635 : 				// First have the lead fly toward the IP waypoint until he can see a target
; 2636 : 				if (cwp != wp) 

	mov	edx, DWORD PTR _cwp$[ebp]
	cmp	edx, DWORD PTR _wp$[ebp]
	je	SHORT $LN66@SetupAGMod

; 2637 : 				{
; 2638 : 					cwp->GetLocation(&ipX, &ipY, &ipZ);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 276				; 00000114H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 268				; 0000010cH
	push	edx
	mov	ecx, DWORD PTR _cwp$[ebp]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation

; 2639 : 
; 2640 : 					// Next waypoint is our target waypoint
; 2641 : 					SelectNextWaypoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectNextWaypoint@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectNextWaypoint

; 2642 : 
; 2643 : 					// If we have HARM or JSOW on board (even if we can't use them), start your attack from here
; 2644 : 					// Cobra - JSOWs start attack here also
; 2645 : 					if ((hasHARM) || (hasBomb == TRUE + 4)) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+188], 0
	jne	SHORT $LN64@SetupAGMod
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+180], 5
	jne	SHORT $LN65@SetupAGMod
$LN64@SetupAGMod:

; 2646 : 					{
; 2647 : 						ipX = self->XPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+268]

; 2648 : 						ipY = self->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+272]
$LN65@SetupAGMod:

; 2649 : 					}
; 2650 : 				}
; 2651 : 				else 

	jmp	SHORT $LN61@SetupAGMod
$LN66@SetupAGMod:

; 2652 : 				{
; 2653 : 					if (dwp)

	cmp	DWORD PTR _dwp$[ebp], 0
	je	SHORT $LN62@SetupAGMod

; 2654 : 						dwp->GetLocation(&ipX, &ipY, &ipZ);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 276				; 00000114H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 268				; 0000010cH
	push	edx
	mov	ecx, DWORD PTR _dwp$[ebp]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation

; 2655 : 					else

	jmp	SHORT $LN61@SetupAGMod
$LN62@SetupAGMod:

; 2656 : 						wp->GetLocation(&ipX, &ipY, &ipZ);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 276				; 00000114H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 268				; 0000010cH
	push	edx
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation
$LN61@SetupAGMod:

; 2657 : 
; 2658 : 				}
; 2659 : 
; 2660 : 				wpAction = wp->GetWPAction();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPAction
	mov	DWORD PTR _wpAction$[ebp], eax

; 2661 : 				// If we have nothing, look at our enroute action
; 2662 : 				if (wpAction == WP_NOTHING)

	cmp	DWORD PTR _wpAction$[ebp], 0
	jne	SHORT $LN60@SetupAGMod

; 2663 : 					wpAction = wp->GetWPRouteAction();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPRouteAction@WayPointClass@@QAEHXZ	; WayPointClass::GetWPRouteAction
	mov	DWORD PTR _wpAction$[ebp], eax
$LN60@SetupAGMod:

; 2664 : 
; 2665 : 				// If it's a SEAD or CASCP waypoint, do the following...
; 2666 : 				if ((wpAction == WP_SEAD || wpAction == WP_CASCP) && cwp == wp) 

	cmp	DWORD PTR _wpAction$[ebp], 19		; 00000013H
	je	SHORT $LN58@SetupAGMod
	cmp	DWORD PTR _wpAction$[ebp], 9
	jne	$LN59@SetupAGMod
$LN58@SetupAGMod:
	mov	eax, DWORD PTR _cwp$[ebp]
	cmp	eax, DWORD PTR _wp$[ebp]
	jne	$LN59@SetupAGMod

; 2667 : 				{
; 2668 : 					// But only if it is time to retarget, otherwise stay quiet
; 2669 : 					if (SimLibElapsedTime > nextAGTargetTime) 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	edx, DWORD PTR [ecx+252]
	jbe	$LN57@SetupAGMod

; 2670 : 					{
; 2671 : 						// Next retarget in 5 seconds
; 2672 : 						nextAGTargetTime = SimLibElapsedTime + 5000;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 5000				; 00001388H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+252], eax

; 2673 : 
; 2674 : 						// First, lets release our current target and target history
; 2675 : 						SetGroundTarget( NULL );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget

; 2676 : 						gndTargetHistory[0] = NULL;

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+452], 0

; 2677 : 
; 2678 : 						// The first call should get a campaign entity while the second one will fetch a sim entity within
; 2679 : 						SelectGroundTarget( TARGET_ANYTHING );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectGroundTarget@DigitalBrain@@IAEXH@Z ; DigitalBrain::SelectGroundTarget

; 2680 : 						if (groundTargetPtr == NULL)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+224], 0
	jne	SHORT $LN56@SetupAGMod

; 2681 : 							return;

	jmp	$LN83@SetupAGMod
$LN56@SetupAGMod:

; 2682 : 						if (groundTargetPtr->BaseData()->IsCampaign() && !((CampBaseClass *)groundTargetPtr->BaseData())->IsAggregate())

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsCampaign@FalconEntity@@QAEHXZ	; FalconEntity::IsCampaign
	test	eax, eax
	je	SHORT $LN55@SetupAGMod
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	jne	SHORT $LN55@SetupAGMod

; 2683 : 							SelectGroundTarget( TARGET_ANYTHING );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectGroundTarget@DigitalBrain@@IAEXH@Z ; DigitalBrain::SelectGroundTarget
$LN55@SetupAGMod:

; 2684 : 					}
; 2685 : 					else

	jmp	SHORT $LN54@SetupAGMod
$LN57@SetupAGMod:

; 2686 : 						return;

	jmp	$LN83@SetupAGMod
$LN54@SetupAGMod:

; 2687 : 				}
; 2688 : 				else 

	jmp	$LN40@SetupAGMod
$LN59@SetupAGMod:

; 2689 : 				{
; 2690 : 					// divert waypoint overrides everything else
; 2691 : 					if (dwp) 

	cmp	DWORD PTR _dwp$[ebp], 0
	je	SHORT $LN52@SetupAGMod

; 2692 : 					{
; 2693 : 						campBaseTarg = dwp->GetWPTarget();

	mov	ecx, DWORD PTR _dwp$[ebp]
	call	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
	mov	DWORD PTR _campBaseTarg$[ebp], eax

; 2694 : 						if (!campBaseTarg) {

	cmp	DWORD PTR _campBaseTarg$[ebp], 0
	jne	SHORT $LN51@SetupAGMod

; 2695 : 							dwp = NULL;

	mov	DWORD PTR _dwp$[ebp], 0

; 2696 : 							campBaseTarg = wp->GetWPTarget();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
	mov	DWORD PTR _campBaseTarg$[ebp], eax
$LN51@SetupAGMod:

; 2697 : 						}
; 2698 : 					}
; 2699 : 					else

	jmp	SHORT $LN50@SetupAGMod
$LN52@SetupAGMod:

; 2700 : 						campBaseTarg = wp->GetWPTarget();

	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
	mov	DWORD PTR _campBaseTarg$[ebp], eax
$LN50@SetupAGMod:

; 2701 : 
; 2702 : 					// See if we got a target waypoint target, if not, try and see if we can select one by using the campaign target selector
; 2703 : 					if (campBaseTarg == NULL) 

	cmp	DWORD PTR _campBaseTarg$[ebp], 0
	jne	$LN49@SetupAGMod

; 2704 : 					{
; 2705 : 						if (SimLibElapsedTime > nextAGTargetTime) 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	edx, DWORD PTR [ecx+252]
	jbe	$LN48@SetupAGMod

; 2706 : 						{
; 2707 : 							// Next retarget in 5 seconds
; 2708 : 							nextAGTargetTime = SimLibElapsedTime + 5000;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 5000				; 00001388H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+252], eax

; 2709 : 
; 2710 : 							// First, lets release our current target and target history
; 2711 : 							SetGroundTarget( NULL );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget

; 2712 : 							gndTargetHistory[0] = NULL;

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+452], 0

; 2713 : 
; 2714 : 							// The first call should get a campaign entity while the second one will fetch a sim entity within
; 2715 : 							SelectGroundTarget( TARGET_ANYTHING );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectGroundTarget@DigitalBrain@@IAEXH@Z ; DigitalBrain::SelectGroundTarget

; 2716 : 							if (groundTargetPtr == NULL)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+224], 0
	jne	SHORT $LN47@SetupAGMod

; 2717 : 								return;

	jmp	$LN83@SetupAGMod
$LN47@SetupAGMod:

; 2718 : 							if (groundTargetPtr->BaseData()->IsCampaign() && !((CampBaseClass *)groundTargetPtr->BaseData())->IsAggregate())

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsCampaign@FalconEntity@@QAEHXZ	; FalconEntity::IsCampaign
	test	eax, eax
	je	SHORT $LN46@SetupAGMod
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	jne	SHORT $LN46@SetupAGMod

; 2719 : 								SelectGroundTarget( TARGET_ANYTHING );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectGroundTarget@DigitalBrain@@IAEXH@Z ; DigitalBrain::SelectGroundTarget
$LN46@SetupAGMod:

; 2720 : 						}
; 2721 : 						else

	jmp	SHORT $LN45@SetupAGMod
$LN48@SetupAGMod:

; 2722 : 							return;

	jmp	$LN83@SetupAGMod
$LN45@SetupAGMod:
	jmp	$LN40@SetupAGMod
$LN49@SetupAGMod:

; 2723 : 					}
; 2724 : 					// set ground target to camp base if ground target is NULL at this point
; 2725 : 					else if ( groundTargetPtr == NULL )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+224], 0
	jne	$LN40@SetupAGMod

; 2726 : 					{
; 2727 : 						SetGroundTarget( campBaseTarg );

	mov	edx, DWORD PTR _campBaseTarg$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget

; 2728 : 
; 2729 : 						if (groundTargetPtr == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+224], 0
	jne	SHORT $LN42@SetupAGMod

; 2730 : 							return;

	jmp	$LN83@SetupAGMod
$LN42@SetupAGMod:

; 2731 : 						// 2001-10-26 ADDED by M.N. If player changed mission type in TE planner, and below the target WP
; 2732 : 						// we find a package object, it will become a ground target. If a package is engaged, CTD.
; 2733 : 						if (groundTargetPtr->BaseData()->IsPackage())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv342[ebp], eax
	mov	edx, DWORD PTR tv342[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv342[ebp]
	mov	edx, DWORD PTR [eax+256]
	call	edx
	test	eax, eax
	je	SHORT $LN41@SetupAGMod

; 2734 : 						{
; 2735 : 							SetGroundTarget( NULL );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget

; 2736 : 							gndTargetHistory[0] = NULL;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+452], 0

; 2737 : 							SelectGroundTarget( TARGET_ANYTHING );	// choose something else

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectGroundTarget@DigitalBrain@@IAEXH@Z ; DigitalBrain::SelectGroundTarget
$LN41@SetupAGMod:

; 2738 : 						}
; 2739 : 						// END of added section
; 2740 : 
; 2741 : 						// Then get a sim entity from it
; 2742 : 						if (groundTargetPtr->BaseData()->IsCampaign() && !((CampBaseClass *)groundTargetPtr->BaseData())->IsAggregate())

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsCampaign@FalconEntity@@QAEHXZ	; FalconEntity::IsCampaign
	test	eax, eax
	je	SHORT $LN40@SetupAGMod
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	jne	SHORT $LN40@SetupAGMod

; 2743 : 							SelectGroundTarget( TARGET_ANYTHING );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectGroundTarget@DigitalBrain@@IAEXH@Z ; DigitalBrain::SelectGroundTarget
$LN40@SetupAGMod:

; 2744 : 					}
; 2745 : 				}

	jmp	SHORT $LN36@SetupAGMod
$LN67@SetupAGMod:

; 2746 : 			}
; 2747 : 			// It's not from a waypoint action (could be a target of opportunity, even from A2A mission if it has A2G weapons as well)
; 2748 : 			else  if (SimLibElapsedTime > nextAGTargetTime) 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	edx, DWORD PTR [ecx+252]
	jbe	SHORT $LN38@SetupAGMod

; 2749 : 			{
; 2750 : 				// Next retarget in 5 seconds
; 2751 : 				nextAGTargetTime = SimLibElapsedTime + 5000;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 5000				; 00001388H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+252], eax

; 2752 : 
; 2753 : 				// First, lets release our current target and target history
; 2754 : 				SetGroundTarget( NULL );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget

; 2755 : 				gndTargetHistory[0] = NULL;

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+452], 0

; 2756 : 
; 2757 : 				// The first call should get a campaign entity while the second one will fetch a sim entity within
; 2758 : 				SelectGroundTarget( TARGET_ANYTHING );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectGroundTarget@DigitalBrain@@IAEXH@Z ; DigitalBrain::SelectGroundTarget

; 2759 : 				if (groundTargetPtr == NULL)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+224], 0
	jne	SHORT $LN37@SetupAGMod

; 2760 : 					return;

	jmp	$LN83@SetupAGMod
$LN37@SetupAGMod:

; 2761 : 				SelectGroundTarget( TARGET_ANYTHING );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectGroundTarget@DigitalBrain@@IAEXH@Z ; DigitalBrain::SelectGroundTarget

; 2762 : 
; 2763 : 				// Don't ask me, that's how they had it in the orininal code
; 2764 : 				agImprovise = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+240], 1

; 2765 : 			}
; 2766 : 			// Not the time to retarget, so get out
; 2767 : 			else

	jmp	SHORT $LN36@SetupAGMod
$LN38@SetupAGMod:

; 2768 : 				return;

	jmp	$LN83@SetupAGMod
$LN36@SetupAGMod:

; 2769 : 
; 2770 : 		}
; 2771 : 		// Don't ask me, that's how they had it in the orininal code
; 2772 : 		else

	jmp	SHORT $LN35@SetupAGMod
$LN69@SetupAGMod:

; 2773 : 		{
; 2774 : 			agImprovise = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+240], 1
$LN35@SetupAGMod:

; 2775 : 		}
; 2776 : 
; 2777 : 		// No ground target? do nothing
; 2778 : 		if (!groundTargetPtr)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+224], 0
	jne	SHORT $LN34@SetupAGMod

; 2779 : 			return;

	jmp	$LN83@SetupAGMod
$LN34@SetupAGMod:

; 2780 : 
; 2781 : 		// After all this, make sure we have a sim target if we can
; 2782 : 		if (groundTargetPtr->BaseData()->IsCampaign() && !((CampBaseClass *)groundTargetPtr->BaseData())->IsAggregate())

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsCampaign@FalconEntity@@QAEHXZ	; FalconEntity::IsCampaign
	test	eax, eax
	je	SHORT $LN33@SetupAGMod
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	jne	SHORT $LN33@SetupAGMod

; 2783 : 			SelectGroundTarget( TARGET_ANYTHING );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectGroundTarget@DigitalBrain@@IAEXH@Z ; DigitalBrain::SelectGroundTarget
$LN33@SetupAGMod:

; 2784 : 
; 2785 : 		// do we have any ground weapons?
; 2786 : /*		SelectGroundWeapon();
; 2787 : 		if (!IsSetATC(HasAGWeapon)) 
; 2788 : 		{
; 2789 : 			// Nope, can't really attack can't we? so bail out
; 2790 : 			SetGroundTarget(NULL);
; 2791 : 			agDoctrine = AGD_NONE;
; 2792 : 			return;
; 2793 : 		}
; 2794 : */
; 2795 : 		// Better be safe than sory...
; 2796 : 		if (groundTargetPtr == NULL) 

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+224], 0
	jne	SHORT $LN32@SetupAGMod

; 2797 : 		{
; 2798 : 			// Nope, somehow we lost our target so bail out...
; 2799 : 			agDoctrine = AGD_NONE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+244], 0

; 2800 : 			return;

	jmp	$LN83@SetupAGMod
$LN32@SetupAGMod:

; 2801 : 		}
; 2802 : 
; 2803 : 		// Tell the AI it hasn't done a ground pass yet so it can redo its attack profile
; 2804 : 		madeAGPass = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+260], 0

; 2805 : 
; 2806 : 		// set doctrine and approach to default value, calc an insertion point loc
; 2807 : 		agDoctrine = AGD_LOOK_SHOOT_LOOK;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+244], 2

; 2808 : 		if (missionType == AMIS_SEADESCORT || missionType == AMIS_SEADSTRIKE) 

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+284], 12			; 0000000cH
	je	SHORT $LN30@SetupAGMod
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+284], 11			; 0000000bH
	jne	SHORT $LN31@SetupAGMod
$LN30@SetupAGMod:

; 2809 : 		{
; 2810 : 			// Cobra - SEAD escort or strike do not fly in low.  They want the radars to see them and turn on.
; 2811 : 			agApproach = AGA_HIGH;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+248], 2

; 2812 : 			//		agApproach = AGA_LOW;
; 2813 : 			//ipZ = 0.0f;
; 2814 : 			//TJL 10/28/03 HARM Altitude
; 2815 : 			ipZ = -self->GetA2GHarmAlt();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetA2GHarmAlt@AircraftClass@@QAEMXZ	; AircraftClass::GetA2GHarmAlt
	fstp	DWORD PTR tv917[ebp]
	movss	xmm0, DWORD PTR tv917[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+276], xmm0

; 2816 : 		}
; 2817 : 		else 

	jmp	SHORT $LN29@SetupAGMod
$LN31@SetupAGMod:

; 2818 : 		{
; 2819 : 			// Cobra - kind of a radical default profile for non-Harm missions
; 2820 : 			//agApproach = AGA_DIVE;
; 2821 : 			//ipZ = -self->GetA2GGunRocketAlt();
; 2822 : 			agApproach = AGA_HIGH;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+248], 2

; 2823 : 			ipZ = -self->GetA2GDumbLDAlt();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetA2GDumbLDAlt@AircraftClass@@QAEMXZ	; AircraftClass::GetA2GDumbLDAlt
	fstp	DWORD PTR tv924[ebp]
	movss	xmm0, DWORD PTR tv924[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+276], xmm0
$LN29@SetupAGMod:

; 2824 : 		}
; 2825 : 
; 2826 : 		dx = groundTargetPtr->BaseData()->XPos() - self->XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv931[ebp]
	movss	xmm0, DWORD PTR tv931[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	movss	DWORD PTR tv1139[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv936[ebp]
	movss	xmm0, DWORD PTR tv1139[ebp]
	subss	xmm0, DWORD PTR tv936[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 2827 : 		dy = groundTargetPtr->BaseData()->YPos() - self->YPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv942[ebp]
	movss	xmm0, DWORD PTR tv942[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movss	DWORD PTR tv1141[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv947[ebp]
	movss	xmm0, DWORD PTR tv1141[ebp]
	subss	xmm0, DWORD PTR tv947[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 2828 : 		dz = groundTargetPtr->BaseData()->ZPos() - self->ZPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv953[ebp]
	movss	xmm0, DWORD PTR tv953[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv1143[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv958[ebp]
	movss	xmm0, DWORD PTR tv1143[ebp]
	subss	xmm0, DWORD PTR tv958[ebp]
	movss	DWORD PTR _dz$[ebp], xmm0

; 2829 : 
; 2830 : 		// x-y get range
; 2831 : 		range = (float)sqrt( dx * dx + dy * dy ) + 0.1f;

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv965[ebp]
	movss	xmm0, DWORD PTR tv965[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _range$[ebp], xmm0

; 2832 : 
; 2833 : 		// normalize the x and y vector
; 2834 : 		dx /= range;

	movss	xmm0, DWORD PTR _dx$[ebp]
	divss	xmm0, DWORD PTR _range$[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 2835 : 		dy /= range;

	movss	xmm0, DWORD PTR _dy$[ebp]
	divss	xmm0, DWORD PTR _range$[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 2836 : 
; 2837 : 		// see if we're too close in and set ipX/ipY accordingly
; 2838 : 		if ( range < 2.0f * NM_TO_FT ) // was 5.0

	movss	xmm0, DWORD PTR __real@463de1b0
	comiss	xmm0, DWORD PTR _range$[ebp]
	jbe	SHORT $LN28@SetupAGMod

; 2839 : 		{
; 2840 : 			AGflyOut();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AGflyOut@DigitalBrain@@IAEXXZ		; DigitalBrain::AGflyOut

; 2841 : 			SetGroundTarget(NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget

; 2842 : 			onStation = Downwind;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+132], 13			; 0000000dH

; 2843 : 		}
; 2844 : 		else

	jmp	SHORT $LN27@SetupAGMod
$LN28@SetupAGMod:

; 2845 : 		{
; 2846 : 			// get point between us and target
; 2847 : 			ipX = groundTargetPtr->BaseData()->XPos(); // + dy * g_fAGFlyoutRange * NM_TO_FT;//previously 7.0 Cobra

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+268]

; 2848 : 			ipY = groundTargetPtr->BaseData()->YPos(); // - dx * g_fAGFlyoutRange * NM_TO_FT;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+272]
$LN27@SetupAGMod:

; 2849 : 			ShiAssert (ipX > 0.0F);
; 2850 : 		}
; 2851 : 
; 2852 : 		// Depending on the type of plane, adjust our attack profile
; 2853 : 		classPtr = (Falcon4EntityClassType*)self->EntityType();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	DWORD PTR _classPtr$[ebp], eax

; 2854 : 		if (classPtr->vuClassData.classInfo_[VU_STYPE] == STYPE_AIR_BOMBER )

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _classPtr$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+8]
	cmp	eax, 4
	jne	SHORT $LN26@SetupAGMod

; 2855 : 		{
; 2856 : 			agApproach = AGA_BOMBER;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+248], 4

; 2857 : 			agDoctrine = AGD_SHOOT_RUN;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+244], 1

; 2858 : 			ipZ = self->ZPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+276]

; 2859 : 		}
; 2860 : 		else

	jmp	$LN2@SetupAGMod
$LN26@SetupAGMod:

; 2861 : 		{
; 2862 : 			// Cobra - Check for AG weapons to make sure we have the correct info
; 2863 : 			SelectGroundWeapon();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectGroundWeapon@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectGroundWeapon

; 2864 : 
; 2865 : 			// Order of fire is: HARMs, AGMissiles, GBUs, bombs, rockets then gun so do it similarely
; 2866 : 			//TJL 10/27/03 Porting out all attack altitudes to spconfig variables
; 2867 : 			if (hasHARM) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+188], 0
	je	SHORT $LN24@SetupAGMod

; 2868 : 				// Cobra - SEAD escort or strike do not fly in low.  They want the radars to see them and turn on.
; 2869 : 				agApproach = AGA_HIGH;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+248], 2

; 2870 : 				//		agApproach = AGA_LOW;
; 2871 : 				agDoctrine = AGD_LOOK_SHOOT_LOOK;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+244], 2

; 2872 : 				ipX = self->XPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+268]

; 2873 : 				ipY = self->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+272]

; 2874 : 				ipZ = -self->GetA2GHarmAlt();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetA2GHarmAlt@AircraftClass@@QAEMXZ	; AircraftClass::GetA2GHarmAlt
	fstp	DWORD PTR tv1005[ebp]
	movss	xmm0, DWORD PTR tv1005[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+276], xmm0
	jmp	$LN8@SetupAGMod
$LN24@SetupAGMod:

; 2875 : 				//ipZ = 0.0f;
; 2876 : 			}
; 2877 : 			else if (hasAGMissile) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+184], 0
	je	SHORT $LN22@SetupAGMod

; 2878 : 				agApproach = AGA_HIGH;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+248], 2

; 2879 : 				agDoctrine = AGD_LOOK_SHOOT_LOOK;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+244], 2

; 2880 : 
; 2881 : 				// Wings shoots Mavericks as soon as asked.
; 2882 : 				ipX = self->XPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+268]

; 2883 : 				ipY = self->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+272]

; 2884 : 				ipZ = -self->GetA2GAGMAlt();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetA2GAGMAlt@AircraftClass@@QAEMXZ	; AircraftClass::GetA2GAGMAlt
	fstp	DWORD PTR tv1022[ebp]
	movss	xmm0, DWORD PTR tv1022[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+276], xmm0
	jmp	$LN8@SetupAGMod
$LN22@SetupAGMod:

; 2885 : 				//ipZ = -4000.0f;
; 2886 : 			}
; 2887 : 			else if (hasGBU) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+204], 0
	je	SHORT $LN20@SetupAGMod

; 2888 : 				agApproach = AGA_HIGH;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+248], 2

; 2889 : 				agDoctrine = AGD_SHOOT_RUN;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+244], 1

; 2890 : 				ipZ = -self->GetA2GGBUAlt();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetA2GGBUAlt@AircraftClass@@QAEMXZ	; AircraftClass::GetA2GGBUAlt
	fstp	DWORD PTR tv1031[ebp]
	movss	xmm0, DWORD PTR tv1031[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+276], xmm0
	jmp	$LN8@SetupAGMod
$LN20@SetupAGMod:

; 2891 : 				//ipZ = -13000.0f;
; 2892 : 			}
; 2893 : 			else if (hasBomb) 

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+180], 0
	je	$LN18@SetupAGMod

; 2894 : 			{
; 2895 : 				if (hasBomb == TRUE + 1) 		// It's a durandal

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+180], 2
	jne	SHORT $LN17@SetupAGMod

; 2896 : 				{
; 2897 : 					agApproach = AGA_HIGH;		// Because if 'low', he will 'pop up' on final...

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+248], 2

; 2898 : 					ipZ = -self->GetA2GGenericBombAlt();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetA2GGenericBombAlt@AircraftClass@@QAEMXZ ; AircraftClass::GetA2GGenericBombAlt
	fstp	DWORD PTR tv1040[ebp]
	movss	xmm0, DWORD PTR tv1040[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+276], xmm0
	jmp	$LN10@SetupAGMod
$LN17@SetupAGMod:

; 2899 : 					//ipZ = -250.0f;
; 2900 : 				}
; 2901 : 				else if (hasBomb == TRUE + 2) 	// It's a cluster bomb

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+180], 3
	jne	SHORT $LN15@SetupAGMod

; 2902 : 				{
; 2903 : 					agApproach = AGA_HIGH;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+248], 2

; 2904 : 					ipZ = -self->GetA2GClusterAlt();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetA2GClusterAlt@AircraftClass@@QAEMXZ	; AircraftClass::GetA2GClusterAlt
	fstp	DWORD PTR tv1048[ebp]
	movss	xmm0, DWORD PTR tv1048[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+276], xmm0
	jmp	$LN10@SetupAGMod
$LN15@SetupAGMod:

; 2905 : 					//ipZ = -5000.0f;
; 2906 : 				}
; 2907 : 				else if (hasBomb == TRUE + 3) 	// It's a JDAM bomb

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+180], 4
	jne	SHORT $LN13@SetupAGMod

; 2908 : 				{
; 2909 : 					agApproach = AGA_HIGH;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+248], 2

; 2910 : 					ipZ = -self->GetA2GJDAMAlt();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetA2GJDAMAlt@AircraftClass@@QAEMXZ	; AircraftClass::GetA2GJDAMAlt
	fstp	DWORD PTR tv1056[ebp]
	movss	xmm0, DWORD PTR tv1056[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+276], xmm0
	jmp	$LN10@SetupAGMod
$LN13@SetupAGMod:

; 2911 : 					//ipZ = -5000.0f;
; 2912 : 				}
; 2913 : 				else if (hasBomb == TRUE + 4) 	// It's a JSOW bomb

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+180], 5
	jne	SHORT $LN11@SetupAGMod

; 2914 : 				{
; 2915 : 					ipX = self->XPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+268]

; 2916 : 					ipY = self->YPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+272]

; 2917 : 					agApproach = AGA_HIGH;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+248], 2

; 2918 : 					ipZ = -self->GetA2GJSOWAlt();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetA2GJSOWAlt@AircraftClass@@QAEMXZ	; AircraftClass::GetA2GJSOWAlt
	fstp	DWORD PTR tv1072[ebp]
	movss	xmm0, DWORD PTR tv1072[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+276], xmm0

; 2919 : 					//ipZ = -5000.0f;
; 2920 : 				}
; 2921 : 				else 

	jmp	SHORT $LN10@SetupAGMod
$LN11@SetupAGMod:

; 2922 : 				{		// It's any other type of bombs
; 2923 : 					agApproach = AGA_HIGH;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+248], 2

; 2924 : 					ipZ = -self->GetA2GDumbLDAlt();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetA2GDumbLDAlt@AircraftClass@@QAEMXZ	; AircraftClass::GetA2GDumbLDAlt
	fstp	DWORD PTR tv1079[ebp]
	movss	xmm0, DWORD PTR tv1079[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+276], xmm0
$LN10@SetupAGMod:

; 2925 : 					//ipZ = -11000.0f;
; 2926 : 				}
; 2927 : 
; 2928 : 				// Now check if we are within the plane's min/max altitude and snap if not...
; 2929 : 				VehicleClassDataType *vc = GetVehicleClassData(self->Type() - VU_LAST_ENTITY_TYPE);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	edx, ax
	sub	edx, 100				; 00000064H
	push	edx
	call	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z ; GetVehicleClassData
	add	esp, 4
	mov	DWORD PTR _vc$1[ebp], eax

; 2930 : 				ipZ = max(vc->HighAlt * -100.0f, ipZ);

	mov	eax, DWORD PTR _vc$1[ebp]
	movsx	ecx, WORD PTR [eax+48]
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR __real@c2c80000
	mov	edx, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [edx+276]
	jbe	SHORT $LN85@SetupAGMod
	mov	eax, DWORD PTR _vc$1[ebp]
	movsx	ecx, WORD PTR [eax+48]
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR __real@c2c80000
	movss	DWORD PTR tv680[ebp], xmm0
	jmp	SHORT $LN86@SetupAGMod
$LN85@SetupAGMod:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+276]
	movss	DWORD PTR tv680[ebp], xmm0
$LN86@SetupAGMod:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv680[ebp]
	movss	DWORD PTR [eax+276], xmm0

; 2931 : 				ipZ = min(vc->LowAlt * -100.0f, ipZ);

	mov	ecx, DWORD PTR _vc$1[ebp]
	movsx	edx, WORD PTR [ecx+50]
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR __real@c2c80000
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+276]
	comiss	xmm1, xmm0
	jbe	SHORT $LN87@SetupAGMod
	mov	ecx, DWORD PTR _vc$1[ebp]
	movsx	edx, WORD PTR [ecx+50]
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR __real@c2c80000
	movss	DWORD PTR tv697[ebp], xmm0
	jmp	SHORT $LN88@SetupAGMod
$LN87@SetupAGMod:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+276]
	movss	DWORD PTR tv697[ebp], xmm0
$LN88@SetupAGMod:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv697[ebp]
	movss	DWORD PTR [ecx+276], xmm0

; 2932 : 
; 2933 : 				agDoctrine = AGD_SHOOT_RUN;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+244], 1
	jmp	SHORT $LN8@SetupAGMod
$LN18@SetupAGMod:

; 2934 : 			}
; 2935 : 			else if (hasGun || hasRocket) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+196], 0
	jne	SHORT $LN7@SetupAGMod
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+192], 0
	je	SHORT $LN8@SetupAGMod
$LN7@SetupAGMod:

; 2936 : 			{
; 2937 : 				agDoctrine = AGD_LOOK_SHOOT_LOOK;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+244], 2

; 2938 : 				agApproach = AGA_DIVE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+248], 3

; 2939 : 				ipZ = -self->GetA2GGunRocketAlt();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetA2GGunRocketAlt@AircraftClass@@QAEMXZ ; AircraftClass::GetA2GGunRocketAlt
	fstp	DWORD PTR tv1105[ebp]
	movss	xmm0, DWORD PTR tv1105[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+276], xmm0
$LN8@SetupAGMod:

; 2940 : 				//ipZ = -7000.0f;
; 2941 : 			}
; 2942 : 
; 2943 : 			// For these, it's always a LOOK SHOOT LOOK
; 2944 : 			if ( missionType == AMIS_SAD || missionType == AMIS_INT || missionType == AMIS_BAI || hasAGMissile || hasHARM || IsNotMainTargetSEAD())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+284], 23			; 00000017H
	je	SHORT $LN5@SetupAGMod
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+284], 24			; 00000018H
	je	SHORT $LN5@SetupAGMod
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+284], 25			; 00000019H
	je	SHORT $LN5@SetupAGMod
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+184], 0
	jne	SHORT $LN5@SetupAGMod
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+188], 0
	jne	SHORT $LN5@SetupAGMod
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsNotMainTargetSEAD@DigitalBrain@@AAEHXZ ; DigitalBrain::IsNotMainTargetSEAD
	test	eax, eax
	je	SHORT $LN6@SetupAGMod
$LN5@SetupAGMod:

; 2945 : 				agDoctrine = AGD_LOOK_SHOOT_LOOK;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+244], 2
$LN6@SetupAGMod:

; 2946 : 
; 2947 : 			// Just in case it was changed by a weapon type earlier
; 2948 : 			if (missionType == AMIS_SEADESCORT || missionType == AMIS_SEADSTRIKE) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+284], 12			; 0000000cH
	je	SHORT $LN3@SetupAGMod
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+284], 11			; 0000000bH
	jne	SHORT $LN4@SetupAGMod
$LN3@SetupAGMod:

; 2949 : 			{
; 2950 : 				agApproach = AGA_HIGH;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+248], 2

; 2951 : 				//ipZ = 0.0f;
; 2952 : 				//TJL 10/28/03 Harm Alt
; 2953 : 				ipZ = -self->GetA2GHarmAlt();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetA2GHarmAlt@AircraftClass@@QAEMXZ	; AircraftClass::GetA2GHarmAlt
	fstp	DWORD PTR tv1121[ebp]
	movss	xmm0, DWORD PTR tv1121[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+276], xmm0
$LN4@SetupAGMod:

; 2954 : 			}
; 2955 : 
; 2956 : 			// Then if we have a camera, 
; 2957 : 			if ((missionType == AMIS_BDA || missionType == AMIS_RECON) && hasCamera) 

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+284], 30			; 0000001eH
	je	SHORT $LN1@SetupAGMod
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+284], 29			; 0000001dH
	jne	SHORT $LN2@SetupAGMod
$LN1@SetupAGMod:
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+200], 0
	je	SHORT $LN2@SetupAGMod

; 2958 : 			{
; 2959 : 				ipZ = -self->GetA2GCameraAlt();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetA2GCameraAlt@AircraftClass@@QAEMXZ	; AircraftClass::GetA2GCameraAlt
	fstp	DWORD PTR tv1130[ebp]
	movss	xmm0, DWORD PTR tv1130[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+276], xmm0

; 2960 : 				//ipZ = -7000.0f;
; 2961 : 				agDoctrine = AGD_SHOOT_RUN;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+244], 1

; 2962 : 				agApproach = AGA_DIVE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+248], 3
$LN2@SetupAGMod:

; 2963 : 			}
; 2964 : 		}
; 2965 : 		// Cobra - Save current weapon attack altitude
; 2966 : 		AGattackAlt = ipZ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+276]
	mov	DWORD PTR [eax+264], edx
$LN83@SetupAGMod:

; 2967 : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN90@SetupAGMod:
	DD	$LN74@SetupAGMod
	DD	$LN76@SetupAGMod
	DD	$LN75@SetupAGMod
	DD	$LN73@SetupAGMod
$LN89@SetupAGMod:
	DB	0
	DB	3
	DB	3
	DB	3
	DB	3
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	2
	DB	3
	DB	0
?SetupAGMode@DigitalBrain@@IAEXPAVWayPointClass@@0@Z ENDP ; DigitalBrain::SetupAGMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gndattck.cpp
_TEXT	SEGMENT
tv1125 = -76						; size = 4
_usComponents$1 = -72					; size = 4
tv712 = -68						; size = 4
_ret$ = -64						; size = 4
tv560 = -60						; size = 4
tv540 = -56						; size = 4
tv523 = -52						; size = 4
tv514 = -48						; size = 4
tv497 = -44						; size = 4
_flightMember$2 = -40					; size = 4
_classPtr$ = -36					; size = 4
_i$3 = -32						; size = 4
_runAway$ = -28						; size = 4
_weap$4 = -24						; size = 4
_theBomb$ = -20						; size = 4
_tmpWaypoint$5 = -16					; size = 4
_Sms$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?SelectGroundWeapon@DigitalBrain@@IAEXXZ PROC		; DigitalBrain::SelectGroundWeapon
; _this$ = ecx

; 2083 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 2084 : 	int i;
; 2085 : 	Falcon4EntityClassType* classPtr;
; 2086 : 	int runAway = FALSE;

	mov	DWORD PTR _runAway$[ebp], 0

; 2087 : 	SMSClass* Sms = self->Sms;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+940]
	mov	DWORD PTR _Sms$[ebp], edx

; 2088 : 	BombClass *theBomb;
; 2089 : 
; 2090 : 	hasAGMissile = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+184], 0

; 2091 : 	hasBomb = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+180], 0

; 2092 : 	hasHARM = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+188], 0

; 2093 : 	hasGun = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+196], 0

; 2094 : 	hasCamera = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+200], 0

; 2095 : 	hasRocket = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], 0

; 2096 : 	hasGBU = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+204], 0

; 2097 : 
; 2098 : 	// always make sure the FCC is in a weapons neutral mode when a
; 2099 : 	// weapon selection is made.  Potentially we may be out of missiles
; 2100 : 	// and have a SMS current bomb selected by this function and be in
; 2101 : 	// FCC air-air mode which will cause a crash.
; 2102 : 	//Cobra Reset to Nav messes up SOI for human player.
; 2103 : 	//self->FCC->SetMasterMode (FireControlComputer::Nav);
; 2104 : 	self->FCC->preDesignate = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+936]
	mov	BYTE PTR [eax+182], 1

; 2105 : 
; 2106 : 
; 2107 : 	// Set no AG weapon, set true if found
; 2108 : 	ClearATCFlag (HasAGWeapon);

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 2109 : 
; 2110 : 	// look for a bomb and/or a missile
; 2111 : 	for (i=0; i<self->Sms->NumHardpoints(); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN72@SelectGrou
$LN71@SelectGrou:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN72@SelectGrou:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+940]
	call	?NumHardpoints@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumHardpoints
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN70@SelectGrou

; 2112 : 	{
; 2113 : 		theBomb = self->FCC->GetTheBomb();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+936]
	call	?GetTheBomb@FireControlComputer@@QAEPAVBombClass@@XZ ; FireControlComputer::GetTheBomb
	mov	DWORD PTR _theBomb$[ebp], eax

; 2114 : 
; 2115 : 		// Check for AG Missiles
; 2116 : 		if (!hasAGMissile && Sms->hardPoint[i]->weaponPointer && Sms->hardPoint[i]->GetWeaponClass() == wcAgmWpn)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+184], 0
	jne	SHORT $LN69@SelectGrou
	mov	ecx, DWORD PTR _Sms$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	add	ecx, 12					; 0000000cH
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN69@SelectGrou
	mov	edx, DWORD PTR _Sms$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _Sms$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+164]
	call	eax
	cmp	eax, 6
	jne	SHORT $LN69@SelectGrou

; 2117 : 		{
; 2118 : 			hasAGMissile = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+184], 1
	jmp	$LN44@SelectGrou
$LN69@SelectGrou:

; 2119 : 		}
; 2120 : 		else if (!hasHARM && Sms->hardPoint[i]->weaponPointer && Sms->hardPoint[i]->GetWeaponClass() == wcHARMWpn)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+188], 0
	jne	SHORT $LN67@SelectGrou
	mov	eax, DWORD PTR _Sms$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	add	ecx, 12					; 0000000cH
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN67@SelectGrou
	mov	ecx, DWORD PTR _Sms$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _Sms$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [esi+164]
	call	eax
	cmp	eax, 7
	jne	SHORT $LN67@SelectGrou

; 2121 : 		{
; 2122 : 			hasHARM = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+188], 1
	jmp	$LN44@SelectGrou
$LN67@SelectGrou:

; 2123 : 		}
; 2124 : 		else if (!hasBomb && Sms->hardPoint[i]->weaponPointer && Sms->hardPoint[i]->GetWeaponClass() == wcBombWpn)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+180], 0
	jne	$LN65@SelectGrou
	mov	eax, DWORD PTR _Sms$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	add	ecx, 12					; 0000000cH
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	eax, al
	test	eax, eax
	je	$LN65@SelectGrou
	mov	ecx, DWORD PTR _Sms$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _Sms$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [esi+164]
	call	eax
	cmp	eax, 2
	jne	$LN65@SelectGrou

; 2125 : 		{
; 2126 : 			// 2001-07-11 ADDED BY S.G. SO DURANDAL AND CLUSTER and JDAM and JSOW ARE ACCOUNTED FOR DIFFERENTLY THAN NORMAL BOMBS
; 2127 : 			hasBomb = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+180], 1

; 2128 : 			// JDAM or JSOW
; 2129 : 			if (Sms->hardPoint[i]->GetWeaponType()==wtGPS || (theBomb && theBomb->IsSetBombFlag(BombClass::IsJSOW))) 

	mov	edx, DWORD PTR _Sms$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _Sms$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+156]
	call	eax
	cmp	eax, 12					; 0000000cH
	je	SHORT $LN63@SelectGrou
	cmp	DWORD PTR _theBomb$[ebp], 0
	je	SHORT $LN64@SelectGrou
	push	512					; 00000200H
	mov	ecx, DWORD PTR _theBomb$[ebp]
	call	?IsSetBombFlag@BombClass@@QAEHH@Z	; BombClass::IsSetBombFlag
	test	eax, eax
	je	SHORT $LN64@SelectGrou
$LN63@SelectGrou:

; 2130 : 			{
; 2131 : 				if (theBomb && theBomb->EntityType()->classInfo_[VU_STYPE] == STYPE_BOMB_JSOW)

	cmp	DWORD PTR _theBomb$[ebp], 0
	je	SHORT $LN62@SelectGrou
	mov	ecx, DWORD PTR _theBomb$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	movzx	edx, BYTE PTR [eax+ecx+8]
	cmp	edx, 5
	jne	SHORT $LN62@SelectGrou

; 2132 : 					hasBomb = TRUE + 4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+180], 5

; 2133 : 				else  // JDAM

	jmp	SHORT $LN61@SelectGrou
$LN62@SelectGrou:

; 2134 : 					hasBomb = TRUE + 3;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+180], 4
$LN61@SelectGrou:
	jmp	$LN55@SelectGrou
$LN64@SelectGrou:

; 2135 : 			}
; 2136 : 			else if (Sms->hardPoint[i]->GetWeaponData()->cd >= 0.9f) // S.G. used edg kludge: drag coeff >= 1.0 is a durandal (w/chute) BUT 0.9 is hardcode for high drag :-(

	mov	edx, DWORD PTR _Sms$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _Sms$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	movss	xmm0, DWORD PTR [eax+4]
	comiss	xmm0, DWORD PTR __real@3f666666
	jb	SHORT $LN59@SelectGrou

; 2137 : 				hasBomb = TRUE + 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+180], 2
	jmp	SHORT $LN55@SelectGrou
$LN59@SelectGrou:

; 2138 : 			else if (Sms->hardPoint[i]->GetWeaponData()->flags & SMSClass::HasBurstHeight) // S.G. If it has burst height, it's a cluster bomb

	mov	edx, DWORD PTR _Sms$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _Sms$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	mov	ecx, DWORD PTR [eax]
	and	ecx, 4
	je	SHORT $LN55@SelectGrou

; 2139 : 			{
; 2140 : 				if (theBomb && theBomb->EntityType()->classInfo_[VU_STYPE] == STYPE_BOMB_JSOW)

	cmp	DWORD PTR _theBomb$[ebp], 0
	je	SHORT $LN56@SelectGrou
	mov	ecx, DWORD PTR _theBomb$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	edx, 1
	imul	edx, 3
	movzx	eax, BYTE PTR [eax+edx+8]
	cmp	eax, 5
	jne	SHORT $LN56@SelectGrou

; 2141 : 					hasBomb = TRUE + 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+180], 5

; 2142 : 				else

	jmp	SHORT $LN55@SelectGrou
$LN56@SelectGrou:

; 2143 : 					hasBomb = TRUE + 2;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], 3
$LN55@SelectGrou:

; 2144 : 			}
; 2145 : 		}

	jmp	$LN44@SelectGrou
$LN65@SelectGrou:

; 2146 : 		else if (!hasGBU && Sms->hardPoint[i]->weaponPointer && Sms->hardPoint[i]->GetWeaponClass() == wcGbuWpn)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+204], 0
	jne	SHORT $LN53@SelectGrou
	mov	ecx, DWORD PTR _Sms$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	add	ecx, 12					; 0000000cH
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN53@SelectGrou
	mov	edx, DWORD PTR _Sms$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _Sms$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+164]
	call	eax
	cmp	eax, 9
	jne	SHORT $LN53@SelectGrou

; 2147 : 		{
; 2148 : 			hasGBU = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+204], 1

; 2149 : 		}
; 2150 : 		else if (!hasRocket	&& 

	jmp	$LN44@SelectGrou
$LN53@SelectGrou:

; 2151 : 				Sms->hardPoint[i]->GetWeaponClass() == wcRocketWpn  &&
; 2152 : 				Sms->hardPoint[i]->GetWeaponType()  == wtLAU		)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+192], 0
	jne	$LN51@SelectGrou
	mov	eax, DWORD PTR _Sms$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _Sms$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [eax+164]
	call	edx
	cmp	eax, 1
	jne	$LN51@SelectGrou
	mov	eax, DWORD PTR _Sms$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _Sms$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [eax+156]
	call	edx
	cmp	eax, 9
	jne	$LN51@SelectGrou

; 2153 : 		{
; 2154 : 			SimWeaponClass *weap = Sms->hardPoint[i]->weaponPointer.get();

	mov	eax, DWORD PTR _Sms$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	add	ecx, 12					; 0000000cH
	call	?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::get
	mov	DWORD PTR _weap$4[ebp], eax
$LN50@SelectGrou:

; 2155 : 
; 2156 : 			while(weap && !weap->IsUseable())

	cmp	DWORD PTR _weap$4[ebp], 0
	je	SHORT $LN49@SelectGrou
	mov	eax, DWORD PTR _weap$4[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _weap$4[ebp]
	mov	eax, DWORD PTR [edx+460]
	call	eax
	test	eax, eax
	jne	SHORT $LN49@SelectGrou

; 2157 : 			{
; 2158 : 				weap = weap->GetNextOnRail();

	mov	ecx, DWORD PTR _weap$4[ebp]
	call	?GetNextOnRail@SimWeaponClass@@QAEPAV1@XZ ; SimWeaponClass::GetNextOnRail
	mov	DWORD PTR _weap$4[ebp], eax

; 2159 : 			}

	jmp	SHORT $LN50@SelectGrou
$LN49@SelectGrou:

; 2160 : 			if(weap)

	cmp	DWORD PTR _weap$4[ebp], 0
	je	SHORT $LN46@SelectGrou

; 2161 : 			{
; 2162 : 				hasRocket = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+192], 1

; 2163 : 				if (rocketMnvr != RocketFlyout && rocketMnvr != RocketJink && rocketMnvr != RocketFiring)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+44], 3
	je	SHORT $LN46@SelectGrou
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 2
	je	SHORT $LN46@SelectGrou
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+44], 1
	je	SHORT $LN46@SelectGrou

; 2164 : 				{
; 2165 : 					if (rocketMnvr != RocketFlyToTgt)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN46@SelectGrou

; 2166 : 					{
; 2167 : 						rocketMnvr = RocketFlyToTgt; // Cobra Interrupts RocketFlyOut before far enough from target to get good approach.

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0

; 2168 : 						rocketTimer = 60; // 1 minute for something to happen

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42700000
	movss	DWORD PTR [ecx+48], xmm0
$LN46@SelectGrou:

; 2169 : 					}
; 2170 : 				}
; 2171 : 			}
; 2172 : 		}

	jmp	SHORT $LN44@SelectGrou
$LN51@SelectGrou:

; 2173 : 		else if (!hasCamera && Sms->hardPoint[i]->weaponPointer && Sms->hardPoint[i]->GetWeaponClass() == wcCamera)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+200], 0
	jne	SHORT $LN44@SelectGrou
	mov	eax, DWORD PTR _Sms$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	add	ecx, 12					; 0000000cH
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN44@SelectGrou
	mov	ecx, DWORD PTR _Sms$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _Sms$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [esi+164]
	call	eax
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN44@SelectGrou

; 2174 : 		{
; 2175 : 			hasCamera = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+200], 1
$LN44@SelectGrou:

; 2176 : 		}
; 2177 : 	}

	jmp	$LN71@SelectGrou
$LN70@SelectGrou:

; 2178 : 
; 2179 : 
; 2180 : 	// finally look for guns
; 2181 : 	// only the A-10 and SU-25 are guns-capable for A-G
; 2182 : 	classPtr = (Falcon4EntityClassType*)self->EntityType();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	DWORD PTR _classPtr$[ebp], eax

; 2183 : 	if (classPtr->vuClassData.classInfo_[VU_STYPE] == STYPE_AIR_ATTACK &&
; 2184 : 			(classPtr->vuClassData.classInfo_[VU_SPTYPE] == SPTYPE_A10 ||
; 2185 : 			 classPtr->vuClassData.classInfo_[VU_SPTYPE] == SPTYPE_SU25 ) )

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _classPtr$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+8]
	cmp	edx, 2
	jne	SHORT $LN41@SelectGrou
	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _classPtr$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+8]
	cmp	edx, 1
	je	SHORT $LN42@SelectGrou
	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _classPtr$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+8]
	cmp	edx, 12					; 0000000cH
	jne	SHORT $LN41@SelectGrou
$LN42@SelectGrou:

; 2186 : 	{
; 2187 : 		if ( self->Guns &&
; 2188 : 				self->Guns->numRoundsRemaining )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	cmp	DWORD PTR [ecx+944], 0
	je	SHORT $LN41@SelectGrou
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+944]
	cmp	DWORD PTR [ecx+808], 0
	je	SHORT $LN41@SelectGrou

; 2189 : 		{
; 2190 : 			hasGun = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+196], 1
$LN41@SelectGrou:

; 2191 : 		}
; 2192 : 	}
; 2193 : 
; 2194 : 	if (hasAGMissile | hasBomb | hasHARM | hasRocket | hasGBU)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+184]
	or	edx, DWORD PTR [ecx+180]
	mov	eax, DWORD PTR _this$[ebp]
	or	edx, DWORD PTR [eax+188]
	mov	ecx, DWORD PTR _this$[ebp]
	or	edx, DWORD PTR [ecx+192]
	mov	eax, DWORD PTR _this$[ebp]
	or	edx, DWORD PTR [eax+204]
	je	$LN28@SelectGrou

; 2195 : 	{
; 2196 : 		SetATCFlag(HasAGWeapon);

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::SetATCFlag

; 2197 : 		// 2001-05-27 ADDED BY S.G. IF WE HAVE HARMS AND OUR TARGET IS NOT EMITTING, CLEAR hasHARM ONLY IF WE HAVE SOMETHING ELSE ON BOARD
; 2198 : 		// 2001-06-20 MODIFIED BY S.G. EVEN IF ONLY HAVE HARMS, DO THIS. HOPEFULLY WING WILL REJOIN AND LEAD WILL TERMINATE IF ON SEAD STRIKES
; 2199 : 		//	  if (hasHARM && groundTargetPtr && (hasAGMissile | hasBomb | hasRocket | hasGBU)) {
; 2200 : 		if (hasHARM && groundTargetPtr) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+188], 0
	je	$LN28@SelectGrou
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+224], 0
	je	$LN28@SelectGrou

; 2201 : 			// If it's a sim entity, look at its radar type)
; 2202 : 			if (groundTargetPtr->BaseData()->IsSim()) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	$LN38@SelectGrou

; 2203 : 				// 2001-06-20 MODIFIED BY S.G. IT DOESN'T MATTER AT THIS POINT IF IT'S EMITTING OR NOT. ALL THAT MATTERS IS - IS IT A RADAR VEHICLE/FEATURE FOR A SIM OR DOES IT HAVE A RADAR VEHICLE IF A CAMPAIGN ENTITY
; 2204 : 				// No need to check if they exists because if they got selected, it's because they exists. Only check if they have a radar
; 2205 : 				if (!((groundTargetPtr->BaseData()->IsVehicle() && ((SimVehicleClass *)groundTargetPtr->BaseData())->GetRadarType() != RDR_NO_RADAR) ||	// It's a vehicle and it has a radar
; 2206 : 							(groundTargetPtr->BaseData()->IsStatic()  &&  ((SimStaticClass *)groundTargetPtr->BaseData())->GetRadarType() != RDR_NO_RADAR)))	// It's a feature and it has a radar

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv497[ebp], eax
	mov	edx, DWORD PTR tv497[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv497[ebp]
	mov	edx, DWORD PTR [eax+176]
	call	edx
	test	eax, eax
	je	SHORT $LN36@SelectGrou
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv514[ebp], eax
	mov	ecx, DWORD PTR tv514[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv514[ebp]
	mov	eax, DWORD PTR [edx+292]
	call	eax
	test	eax, eax
	jne	SHORT $LN37@SelectGrou
$LN36@SelectGrou:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv523[ebp], eax
	mov	edx, DWORD PTR tv523[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv523[ebp]
	mov	edx, DWORD PTR [eax+180]
	call	edx
	test	eax, eax
	je	SHORT $LN35@SelectGrou
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv540[ebp], eax
	mov	ecx, DWORD PTR tv540[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv540[ebp]
	mov	eax, DWORD PTR [edx+292]
	call	eax
	test	eax, eax
	jne	SHORT $LN37@SelectGrou
$LN35@SelectGrou:

; 2207 : 					hasHARM = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+188], 0
$LN37@SelectGrou:

; 2208 : 			}

	jmp	$LN28@SelectGrou
$LN38@SelectGrou:

; 2209 : 			// NOPE - It's a campaign object, if it's aggregated, can't use HARM unless no one has chosen it yet.
; 2210 : 			else if (((CampBaseClass *)groundTargetPtr->BaseData())->IsAggregate()) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	je	$LN28@SelectGrou

; 2211 : 				// 2002-01-20 ADDED BY S.G. Unless it's an AAA since it has more than one radar.
; 2212 : 				if (!groundTargetPtr->BaseData()->IsBattalion() || ((BattalionClass *)groundTargetPtr->BaseData())->class_data->RadarVehicle < 16) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv560[ebp], eax
	mov	ecx, DWORD PTR tv560[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv560[ebp]
	mov	eax, DWORD PTR [edx+240]
	call	eax
	test	eax, eax
	je	SHORT $LN31@SelectGrou
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	edx, DWORD PTR [eax+236]
	movzx	eax, BYTE PTR [edx+328]
	cmp	eax, 16					; 00000010H
	jge	$LN28@SelectGrou
$LN31@SelectGrou:

; 2213 : 					// END OF ADDED SECTION 2002-01-20
; 2214 : 					if (((FlightClass *)self->GetCampaignObject())->shotAt != groundTargetPtr->BaseData()) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	DWORD PTR [esi+444], eax
	je	SHORT $LN30@SelectGrou

; 2215 : 						((FlightClass *)self->GetCampaignObject())->shotAt = groundTargetPtr->BaseData();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR [eax+444], esi

; 2216 : 						((FlightClass *)self->GetCampaignObject())->whoShot = self;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+448], edx
	jmp	SHORT $LN28@SelectGrou
$LN30@SelectGrou:

; 2217 : 					}
; 2218 : 					else if (((FlightClass *)self->GetCampaignObject())->whoShot != self)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+448]
	cmp	edx, DWORD PTR [ecx+56]
	je	SHORT $LN28@SelectGrou

; 2219 : 						hasHARM = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+188], 0
$LN28@SelectGrou:

; 2220 : 				}
; 2221 : 			}
; 2222 : 		}
; 2223 : 		// END OF ADDED SECTION
; 2224 : 	}
; 2225 : 
; 2226 : 	// 2001-06-30 ADDED BY S.G. SO THE TRUE WEAPON STATE IS KEPT...
; 2227 : 	if (hasAGMissile | hasBomb | hasHARM | hasRocket | hasGBU)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+184]
	or	eax, DWORD PTR [edx+180]
	mov	ecx, DWORD PTR _this$[ebp]
	or	eax, DWORD PTR [ecx+188]
	mov	edx, DWORD PTR _this$[ebp]
	or	eax, DWORD PTR [edx+192]
	mov	ecx, DWORD PTR _this$[ebp]
	or	eax, DWORD PTR [ecx+204]
	je	SHORT $LN27@SelectGrou

; 2228 : 		SetATCFlag(HasCanUseAGWeapon);

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::SetATCFlag

; 2229 : 	else

	jmp	SHORT $LN26@SelectGrou
$LN27@SelectGrou:

; 2230 : 		ClearATCFlag(HasCanUseAGWeapon);

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag
$LN26@SelectGrou:

; 2231 : 	// END OF ADDED SECTION
; 2232 : 
; 2233 : 	hasWeapons = hasAGMissile | hasBomb | hasHARM | hasRocket | hasGun | hasGBU;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+184]
	or	ecx, DWORD PTR [eax+180]
	mov	edx, DWORD PTR _this$[ebp]
	or	ecx, DWORD PTR [edx+188]
	mov	eax, DWORD PTR _this$[ebp]
	or	ecx, DWORD PTR [eax+192]
	mov	edx, DWORD PTR _this$[ebp]
	or	ecx, DWORD PTR [edx+196]
	mov	eax, DWORD PTR _this$[ebp]
	or	ecx, DWORD PTR [eax+204]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+216], ecx

; 2234 : 
; 2235 : 	// 2001-06-20 ADDED BY S.G. LEAD WILL TAKE ITS WING WEAPON LOADOUT INTO CONSIDERATION BEFORE ABORTING
; 2236 : 	// 2001-06-30 MODIFIED BY S.G. IF NOT A ENROUTE SEAD TARGET, SKIP HARMS AS AVAILABLE IF IT CAN'T BE FIRED
; 2237 : 	int ret;
; 2238 : 	if (!hasWeapons && !isWing && ((ret = IsNotMainTargetSEAD()) || sentWingAGAttack != AG_ORDER_ATTACK)) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+216], 0
	jne	$LN21@SelectGrou
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jne	$LN21@SelectGrou
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsNotMainTargetSEAD@DigitalBrain@@AAEHXZ ; DigitalBrain::IsNotMainTargetSEAD
	mov	DWORD PTR _ret$[ebp], eax
	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN24@SelectGrou
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+232], 2
	je	$LN21@SelectGrou
$LN24@SelectGrou:

; 2239 : 		int i;
; 2240 : 		int usComponents = self->GetCampaignObject()->NumberOfComponents();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	mov	DWORD PTR _usComponents$1[ebp], eax

; 2241 : 		for (i = 0; i < usComponents; i++) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN23@SelectGrou
$LN22@SelectGrou:
	mov	ecx, DWORD PTR _i$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$3[ebp], ecx
$LN23@SelectGrou:
	mov	edx, DWORD PTR _i$3[ebp]
	cmp	edx, DWORD PTR _usComponents$1[ebp]
	jge	SHORT $LN21@SelectGrou

; 2242 : 			AircraftClass *flightMember = (AircraftClass *)self->GetCampaignObject()->GetComponentEntity(i);

	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentEntity
	mov	DWORD PTR _flightMember$2[ebp], eax

; 2243 : 			if (flightMember && flightMember->DBrain() && flightMember->DBrain()->IsSetATC(ret ? HasAGWeapon : HasCanUseAGWeapon)) {

	cmp	DWORD PTR _flightMember$2[ebp], 0
	je	SHORT $LN20@SelectGrou
	mov	ecx, DWORD PTR _flightMember$2[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	test	eax, eax
	je	SHORT $LN20@SelectGrou
	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN75@SelectGrou
	mov	DWORD PTR tv712[ebp], 4194304		; 00400000H
	jmp	SHORT $LN76@SelectGrou
$LN75@SelectGrou:
	mov	DWORD PTR tv712[ebp], 536870912		; 20000000H
$LN76@SelectGrou:
	mov	edx, DWORD PTR tv712[ebp]
	push	edx
	mov	ecx, DWORD PTR _flightMember$2[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, eax
	call	?IsSetATC@DigitalBrain@@QAEHH@Z		; DigitalBrain::IsSetATC
	test	eax, eax
	je	SHORT $LN20@SelectGrou

; 2244 : 				hasWeapons = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+216], 1

; 2245 : 				SetATCFlag(HasAGWeapon);

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::SetATCFlag

; 2246 : 				break;

	jmp	SHORT $LN21@SelectGrou
$LN20@SelectGrou:

; 2247 : 			}
; 2248 : 		}

	jmp	$LN22@SelectGrou
$LN21@SelectGrou:

; 2249 : 	}
; 2250 : 	// END OF ADDED SECTION
; 2251 : 	// make sure, if we're guns or rockets only, that are approach is
; 2252 : 	// a dive
; 2253 : 	if ( !hasBomb && !hasGBU && !hasAGMissile && !hasHARM && (hasGun || hasRocket))

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+180], 0
	jne	SHORT $LN19@SelectGrou
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+204], 0
	jne	SHORT $LN19@SelectGrou
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+184], 0
	jne	SHORT $LN19@SelectGrou
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+188], 0
	jne	SHORT $LN19@SelectGrou
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+196], 0
	jne	SHORT $LN18@SelectGrou
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+192], 0
	je	SHORT $LN19@SelectGrou
$LN18@SelectGrou:

; 2254 : 	{
; 2255 : 		agApproach = AGA_DIVE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+248], 3

; 2256 : 		ipZ = -self->GetA2GGunRocketAlt();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetA2GGunRocketAlt@AircraftClass@@QAEMXZ ; AircraftClass::GetA2GGunRocketAlt
	fstp	DWORD PTR tv1125[ebp]
	movss	xmm0, DWORD PTR tv1125[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+276], xmm0
$LN19@SelectGrou:

; 2257 : 	}
; 2258 : 
; 2259 : 	// Check for run-away case
; 2260 : 	if (missionType == AMIS_BDA || missionType == AMIS_RECON)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+284], 30			; 0000001eH
	je	SHORT $LN16@SelectGrou
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+284], 29			; 0000001dH
	jne	SHORT $LN17@SelectGrou
$LN16@SelectGrou:

; 2261 : 	{
; 2262 : 		if (!hasCamera)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+200], 0
	jne	SHORT $LN15@SelectGrou

; 2263 : 		{
; 2264 : 			runAway = TRUE;

	mov	DWORD PTR _runAway$[ebp], 1
$LN15@SelectGrou:

; 2265 : 		}
; 2266 : 	}

	jmp	SHORT $LN13@SelectGrou
$LN17@SelectGrou:

; 2267 : 	// 2001-06-20 MODIFIED BY S.G. SO AI DO NOT RUN AWAY IF YOU STILL HAVE HARMS AND ON A SEAD TYPE MISSION
; 2268 : 	// else if (!hasWeapons)
; 2269 : 	else if (!hasWeapons && !(IsSetATC(HasAGWeapon) && IsNotMainTargetSEAD()))

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+216], 0
	jne	SHORT $LN13@SelectGrou
	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetATC@DigitalBrain@@QAEHH@Z		; DigitalBrain::IsSetATC
	test	eax, eax
	je	SHORT $LN12@SelectGrou
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsNotMainTargetSEAD@DigitalBrain@@AAEHXZ ; DigitalBrain::IsNotMainTargetSEAD
	test	eax, eax
	jne	SHORT $LN13@SelectGrou
$LN12@SelectGrou:

; 2270 : 	{
; 2271 : 		runAway = TRUE;

	mov	DWORD PTR _runAway$[ebp], 1
$LN13@SelectGrou:

; 2272 : 	}
; 2273 : 
; 2274 : 	if (missionType == AMIS_AIRCAV) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+284], 32			; 00000020H
	jne	SHORT $LN11@SelectGrou

; 2275 : 		runAway = false;

	mov	DWORD PTR _runAway$[ebp], 0
$LN11@SelectGrou:

; 2276 : 	}
; 2277 : 
; 2278 : 	// 2002-03-08 ADDED BY S.G. Don't run away if designating...
; 2279 : 	if ((moreFlags & KeepLasing) && runAway == TRUE)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+968]
	and	ecx, 4
	je	SHORT $LN10@SelectGrou
	cmp	DWORD PTR _runAway$[ebp], 1
	jne	SHORT $LN10@SelectGrou

; 2280 : 		runAway = FALSE;

	mov	DWORD PTR _runAway$[ebp], 0
$LN10@SelectGrou:

; 2281 : 	// END OF ADDED SECTION 2002-03-08
; 2282 : 
; 2283 : 	// Cobra - Check for over-staying welcome.  missionClass was changed to AAMission by SelectNextWaypoint()
; 2284 : 	if (runAway || ((SimLibElapsedTime > agmergeTimer || agmergeTimer == 0) && missionClass == AAMission))// 

	cmp	DWORD PTR _runAway$[ebp], 0
	jne	SHORT $LN8@SelectGrou
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	eax, DWORD PTR [edx+556]
	ja	SHORT $LN7@SelectGrou
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+556], 0
	jne	$LN1@SelectGrou
$LN7@SelectGrou:
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+288], 1
	jne	$LN1@SelectGrou
$LN8@SelectGrou:

; 2285 : 	{
; 2286 : 		// no AG weapons, next waypoint....
; 2287 : 		agDoctrine = AGD_NONE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+244], 0

; 2288 : 		// 2001-08-04 MODIFIED BY S.G. SET missionComplete ONLY ONCE WE TEST IT (ADDED THAT TEST FOR THE IF AS WELL)
; 2289 : 		//		missionComplete = TRUE;
; 2290 : 		self->FCC->SetMasterMode (FireControlComputer::Nav);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+936]
	call	?SetMasterMode@FireControlComputer@@QAEXW4FCCMasterMode@1@@Z ; FireControlComputer::SetMasterMode

; 2291 : 		self->FCC->preDesignate = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+936]
	mov	BYTE PTR [edx+182], 1

; 2292 : 		SetGroundTarget( NULL );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget

; 2293 : 		if (missionClass == AGMission && !missionComplete && agImprovise == FALSE && !self->OnGround())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+288], 0
	jne	SHORT $LN2@SelectGrou
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+292], 0
	jne	SHORT $LN2@SelectGrou
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+240], 0
	jne	SHORT $LN2@SelectGrou
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+56]
	mov	edx, DWORD PTR [eax+148]
	call	edx
	test	eax, eax
	jne	SHORT $LN2@SelectGrou

; 2294 : 		{
; 2295 : 			// JB 020315 Only skip to the waypoint after the target waypoint. Otherwise we may go into landing mode too early.
; 2296 : 			WayPointClass* tmpWaypoint = self->curWaypoint;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+728]
	mov	DWORD PTR _tmpWaypoint$5[ebp], edx
$LN5@SelectGrou:

; 2297 : 			while (tmpWaypoint)

	cmp	DWORD PTR _tmpWaypoint$5[ebp], 0
	je	SHORT $LN4@SelectGrou

; 2298 : 			{
; 2299 : 				if (tmpWaypoint->GetWPFlags() & WPF_TARGET)

	mov	ecx, DWORD PTR _tmpWaypoint$5[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 1
	je	SHORT $LN3@SelectGrou

; 2300 : 				{
; 2301 : 					tmpWaypoint = tmpWaypoint->GetNextWP();

	mov	ecx, DWORD PTR _tmpWaypoint$5[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _tmpWaypoint$5[ebp], eax

; 2302 : 					break;

	jmp	SHORT $LN4@SelectGrou
$LN3@SelectGrou:

; 2303 : 				}
; 2304 : 				tmpWaypoint = tmpWaypoint->GetNextWP();

	mov	ecx, DWORD PTR _tmpWaypoint$5[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _tmpWaypoint$5[ebp], eax

; 2305 : 			}

	jmp	SHORT $LN5@SelectGrou
$LN4@SelectGrou:

; 2306 : 
; 2307 : 			if (tmpWaypoint)

	cmp	DWORD PTR _tmpWaypoint$5[ebp], 0
	je	SHORT $LN2@SelectGrou

; 2308 : 				SelectNextWaypoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectNextWaypoint@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectNextWaypoint
$LN2@SelectGrou:

; 2309 : 		}
; 2310 : 
; 2311 : 		missionComplete = TRUE; /*S.G.*/

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+292], 1

; 2312 : 		// if we're a wingie, rejoin the lead
; 2313 : 		if ( isWing )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN1@SelectGrou

; 2314 : 		{
; 2315 : 			// 2001-05-03 ADDED BY S.G. WE WANT WEDGE AFTER GROUND PASS!
; 2316 : 			mFormation = FalconWingmanMsg::WMWedge;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+808], 1

; 2317 : 			// END OF ADDED SECTION
; 2318 : 			AiRejoin( NULL );

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiRejoin@DigitalBrain@@AAEXPAVFalconWingmanMsg@@W4AiHint@1@@Z ; DigitalBrain::AiRejoin

; 2319 : 			// make sure wing's designated target is NULL'd out
; 2320 : 			mDesignatedObject = FalconNullId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax+800], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+804], edx
$LN1@SelectGrou:

; 2321 : 		}
; 2322 : 	}
; 2323 : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?SelectGroundWeapon@DigitalBrain@@IAEXXZ ENDP		; DigitalBrain::SelectGroundWeapon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gndattck.cpp
_TEXT	SEGMENT
tv307 = -64						; size = 8
_trig$ = -56						; size = 8
_z$ = -48						; size = 4
_angle$ = -44						; size = 4
tv389 = -40						; size = 4
tv289 = -36						; size = 4
tv282 = -32						; size = 4
_y$ = -28						; size = 4
_x$ = -24						; size = 4
_approxRange$ = -20					; size = 4
_dx$ = -16						; size = 4
_dy$ = -12						; size = 4
_dir$ = -8						; size = 4
_this$ = -4						; size = 4
?AGflyOut@DigitalBrain@@IAEXXZ PROC			; DigitalBrain::AGflyOut
; _this$ = ecx

; 4512 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 4513 : 	float dir, dx, dy, x, y, z, approxRange;
; 4514 : 	mlTrig trig;
; 4515 : 
; 4516 : 	if (groundTargetPtr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+224], 0
	je	SHORT $LN17@AGflyOut

; 4517 : 	{
; 4518 : 		trackX = groundTargetPtr->BaseData()->XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+148]

; 4519 : 		trackY = groundTargetPtr->BaseData()->YPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+152]

; 4520 : 	}
; 4521 : 	else

	jmp	SHORT $LN16@AGflyOut
$LN17@AGflyOut:

; 4522 : 	{
; 4523 : 		self->curWaypoint->GetLocation(&x, &y, &z);

	lea	edx, DWORD PTR _z$[ebp]
	push	edx
	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+728]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation

; 4524 : 		trackX = x;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [ecx+148], xmm0

; 4525 : 		trackY = y;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [edx+152], xmm0
$LN16@AGflyOut:

; 4526 : 	}
; 4527 : 
; 4528 : 	dx = trackX - self->XPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv282[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+148]
	subss	xmm0, DWORD PTR tv282[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 4529 : 	dy = trackY - self->YPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv289[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+152]
	subss	xmm0, DWORD PTR tv289[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 4530 : 	approxRange = (float)sqrt( dx * dx + dy * dy );

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _approxRange$[ebp]

; 4531 : 
; 4532 : 	dir = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _dir$[ebp], xmm0

; 4533 : 	if (rand()%2)

	call	_rand
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN20@AGflyOut
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN20@AGflyOut:
	test	eax, eax
	je	SHORT $LN15@AGflyOut

; 4534 : 		dir *= -1.0f;

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _dir$[ebp], xmm0
$LN15@AGflyOut:

; 4535 : 
; 4536 : 	float angle = 90.0F * DTR * dir + (float)atan2(dy, dx);

	movss	xmm0, DWORD PTR __real@3fc90fd9
	mulss	xmm0, DWORD PTR _dir$[ebp]
	cvtss2sd xmm1, DWORD PTR _dx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	cvtss2sd xmm1, DWORD PTR _dy$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movss	DWORD PTR tv389[ebp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv307[ebp]
	movsd	xmm0, QWORD PTR tv307[ebp]
	cvtsd2ss xmm0, xmm0
	movss	xmm1, DWORD PTR tv389[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _angle$[ebp], xmm1

; 4537 : 	mlSinCos (&trig, angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 4538 : 
; 4539 : 	// Cobra - Slow-movers don't need to flyout too far
; 4540 : 	if (slowMover)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+560], 0
	je	SHORT $LN14@AGflyOut

; 4541 : 	{
; 4542 : 		ipX = trackX + trig.cos * g_fAGSlowFlyoutRange * NM_TO_FT;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	mulss	xmm0, DWORD PTR ?g_fAGSlowFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+148]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+268], xmm0

; 4543 : 		ipY = trackY + trig.sin * g_fAGSlowFlyoutRange * NM_TO_FT;

	movss	xmm0, DWORD PTR _trig$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGSlowFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+152]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+272], xmm0

; 4544 : 	}
; 4545 : 	else

	jmp	SHORT $LN13@AGflyOut
$LN14@AGflyOut:

; 4546 : 	{
; 4547 : 		ipX = trackX + trig.cos * g_fAGFlyoutRange * NM_TO_FT;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	mulss	xmm0, DWORD PTR ?g_fAGFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+148]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+268], xmm0

; 4548 : 		ipY = trackY + trig.sin * g_fAGFlyoutRange * NM_TO_FT;

	movss	xmm0, DWORD PTR _trig$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+152]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+272], xmm0
$LN13@AGflyOut:

; 4549 : 	}
; 4550 : 
; 4551 : 	dx = ipX - trackX;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+268]
	subss	xmm0, DWORD PTR [eax+148]
	movss	DWORD PTR _dx$[ebp], xmm0

; 4552 : 	dy = ipY - trackY;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+272]
	subss	xmm0, DWORD PTR [edx+152]
	movss	DWORD PTR _dy$[ebp], xmm0

; 4553 : 	approxRange = (float)sqrt( dx * dx + dy * dy );

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _approxRange$[ebp]

; 4554 : 
; 4555 : 	if (slowMover)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+560], 0
	je	$LN12@AGflyOut

; 4556 : 	{
; 4557 : 		if (approxRange < g_fAGSlowFlyoutRange * NM_TO_FT)

	movss	xmm0, DWORD PTR ?g_fAGSlowFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	$LN7@AGflyOut

; 4558 : 		{
; 4559 : 			if (dy < 0.0f)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _dy$[ebp]
	jbe	SHORT $LN10@AGflyOut

; 4560 : 				ipX = trackX - dir*g_fAGSlowFlyoutRange * NM_TO_FT;

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGSlowFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+148]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+268], xmm1

; 4561 : 			else

	jmp	SHORT $LN9@AGflyOut
$LN10@AGflyOut:

; 4562 : 				ipX = trackX + dir*g_fAGSlowFlyoutRange * NM_TO_FT;

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGSlowFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+148]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+268], xmm0
$LN9@AGflyOut:

; 4563 : 			if (dx < 0.0f)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _dx$[ebp]
	jbe	SHORT $LN8@AGflyOut

; 4564 : 				ipY = trackY - dir*g_fAGSlowFlyoutRange * NM_TO_FT;

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGSlowFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+152]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+272], xmm1

; 4565 : 			else

	jmp	SHORT $LN7@AGflyOut
$LN8@AGflyOut:

; 4566 : 				ipY = trackY + dir*g_fAGSlowFlyoutRange * NM_TO_FT;

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGSlowFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+152]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+272], xmm0
$LN7@AGflyOut:

; 4567 : 		}
; 4568 : 	}

	jmp	$LN1@AGflyOut
$LN12@AGflyOut:

; 4569 : 	else if (approxRange < g_fAGFlyoutRange * NM_TO_FT)

	movss	xmm0, DWORD PTR ?g_fAGFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	$LN1@AGflyOut

; 4570 : 	{
; 4571 : 		if (dy < 0.0f)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _dy$[ebp]
	jbe	SHORT $LN4@AGflyOut

; 4572 : 			ipX = trackX - dir*g_fAGFlyoutRange * NM_TO_FT;

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+148]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+268], xmm1

; 4573 : 		else

	jmp	SHORT $LN3@AGflyOut
$LN4@AGflyOut:

; 4574 : 			ipX = trackX + dir*g_fAGFlyoutRange * NM_TO_FT;

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+148]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+268], xmm0
$LN3@AGflyOut:

; 4575 : 		if (dx < 0.0f)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _dx$[ebp]
	jbe	SHORT $LN2@AGflyOut

; 4576 : 			ipY = trackY - dir*g_fAGFlyoutRange * NM_TO_FT;

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+152]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+272], xmm1

; 4577 : 		else

	jmp	SHORT $LN1@AGflyOut
$LN2@AGflyOut:

; 4578 : 			ipY = trackY + dir*g_fAGFlyoutRange * NM_TO_FT;

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+152]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+272], xmm0
$LN1@AGflyOut:

; 4579 : 	}
; 4580 : 
; 4581 : 	trackX = ipX;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	mov	DWORD PTR [edx+148], ecx

; 4582 : 	trackY = ipY;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+272]
	mov	DWORD PTR [edx+152], ecx

; 4583 : 	trackZ = ipZ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+276]
	mov	DWORD PTR [edx+156], ecx

; 4584 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AGflyOut@DigitalBrain@@IAEXXZ ENDP			; DigitalBrain::AGflyOut
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gndattck.cpp
_TEXT	SEGMENT
_rMin$ = -32						; size = 4
_az$ = -28						; size = 4
tv316 = -24						; size = 4
_Sms$ = -20						; size = 4
_rMax$ = -16						; size = 4
_FCC$ = -12						; size = 4
_retval$ = -8						; size = 4
_this$ = -4						; size = 4
_rx$ = 8						; size = 4
_ry$ = 12						; size = 4
_ata$ = 16						; size = 4
_approxRange$ = 20					; size = 4
?JSOWSetup@DigitalBrain@@IAEHMMMM@Z PROC		; DigitalBrain::JSOWSetup
; _this$ = ecx

; 4408 : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 4409 : 			FireControlComputer* FCC = self->FCC;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+936]
	mov	DWORD PTR _FCC$[ebp], edx

; 4410 : 			SMSClass* Sms = self->Sms;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+940]
	mov	DWORD PTR _Sms$[ebp], edx

; 4411 : 			float /*dx, dy,*/ az, rMin, rMax;
; 4412 : 			int retval = TRUE;

	mov	DWORD PTR _retval$[ebp], 1

; 4413 : 
; 4414 : 			// Set up FCC for JSOW shot
; 4415 : 			if (FCC->GetMasterMode() != FireControlComputer::AirGroundBomb)

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ ; FireControlComputer::GetMasterMode
	cmp	eax, 5
	je	SHORT $LN17@JSOWSetup

; 4416 : 			{
; 4417 : 				//Cobra test
; 4418 : 				self->FCC->SetMasterMode (FireControlComputer::AirGroundBomb);

	push	5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [ecx+936]
	call	?SetMasterMode@FireControlComputer@@QAEXW4FCCMasterMode@1@@Z ; FireControlComputer::SetMasterMode

; 4419 : 				self->FCC->SetSubMode (FireControlComputer::MAN);

	push	21					; 00000015H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+936]
	call	?SetSubMode@FireControlComputer@@QAEXW4FCCSubMode@1@@Z ; FireControlComputer::SetSubMode
$LN17@JSOWSetup:

; 4420 : 			}
; 4421 : 
; 4422 : 			// fcc target needs to be set cuz that's the target
; 4423 : 			// that will be used in sms launch
; 4424 : 			FCC->SetTarget(groundTargetPtr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+224]
	push	edx
	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?SetTarget@FireControlComputer@@QAEXPAVSimObjectType@@@Z ; FireControlComputer::SetTarget

; 4425 : 
; 4426 : 			az	= (float)atan2(ry,rx);

	cvtss2sd xmm0, DWORD PTR _rx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _az$[ebp]

; 4427 : 
; 4428 : 			// Got this null in multiplayer - RH
; 4429 : 			ShiAssert (Sms->curWeapon);
; 4430 : 
; 4431 : 			if (Sms->curWeapon)

	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN16@JSOWSetup

; 4432 : 			{
; 4433 : 				rMax = g_fAIJSOWMaxRange;

	movss	xmm0, DWORD PTR ?g_fAIJSOWMaxRange@@3MA
	movss	DWORD PTR _rMax$[ebp], xmm0

; 4434 : 			}
; 4435 : 			else

	jmp	SHORT $LN15@JSOWSetup
$LN16@JSOWSetup:

; 4436 : 			{
; 4437 : 				rMax = 0.1F;

	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _rMax$[ebp], xmm0
$LN15@JSOWSetup:

; 4438 : 			}
; 4439 : 
; 4440 : 			//Cobra removed RMax Rmin in favor of this
; 4441 : 			rMin = 0.0f; // JSOW's don't have a min

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _rMin$[ebp], xmm0

; 4442 : 
; 4443 : 			//Cobra JSOWs have a guidance limit
; 4444 : 			if (fabs(ata) > 30.0f * DTR)

	push	ecx
	movss	xmm0, DWORD PTR _ata$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv316[ebp]
	movss	xmm0, DWORD PTR tv316[ebp]
	comiss	xmm0, DWORD PTR __real@3f060a91
	jbe	SHORT $LN14@JSOWSetup

; 4445 : 			{
; 4446 : 				retval = FALSE;

	mov	DWORD PTR _retval$[ebp], 0
$LN14@JSOWSetup:

; 4447 : 			}
; 4448 : 
; 4449 : 			if (approxRange > g_fAIJSOWMaxRange * NM_TO_FT) // Cobra limit AI max firing range to g_fAIHarmMaxRange

	movss	xmm0, DWORD PTR ?g_fAIJSOWMaxRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	movss	xmm1, DWORD PTR _approxRange$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN13@JSOWSetup

; 4450 : 			{
; 4451 : 				retval = FALSE;

	mov	DWORD PTR _retval$[ebp], 0
$LN13@JSOWSetup:

; 4452 : 			}
; 4453 : 
; 4454 : 			// we want to see what the target campaign
; 4455 : 			// entity is doing
; 4456 : 			if ( groundTargetPtr->BaseData()->IsSim() )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN12@JSOWSetup

; 4457 : 			{
; 4458 : 				// 2001-06-25 ADDED BY S.G. IF I HAVE SOMETHING IN shotAt, IT COULD MEAN SOMEONE SHOT WHILE THE TARGET WAS AGGREGATED. DEAL WITH THIS
; 4459 : 				// If shotAt has something, someone is/was targeting the aggregated entity. If it wasn't me, don't fire at it once it is deaggregated as well.
; 4460 : 				if (((FlightClass *)self->GetCampaignObject())->shotAt == ((SimBaseClass *)groundTargetPtr->BaseData())->GetCampaignObject() && ((FlightClass *)self->GetCampaignObject())->whoShot != self)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	esi, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	cmp	DWORD PTR [esi+444], eax
	jne	SHORT $LN11@JSOWSetup
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+448]
	cmp	eax, DWORD PTR [edx+56]
	je	SHORT $LN11@JSOWSetup

; 4461 : 					retval = FALSE - 1;

	mov	DWORD PTR _retval$[ebp], -1
$LN11@JSOWSetup:

; 4462 : 			}
; 4463 : 			else

	jmp	$LN1@JSOWSetup
$LN12@JSOWSetup:

; 4464 : 			{
; 4465 : 				// campaign entity
; 4466 : 				if (((CampBaseClass *)groundTargetPtr->BaseData())->IsAggregate()) 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	je	SHORT $LN8@JSOWSetup

; 4467 : 				{
; 4468 : 					// If it's not at what we shot last, then it's valid
; 4469 : 					if (((FlightClass *)self->GetCampaignObject())->shotAt != groundTargetPtr->BaseData()) 

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	esi, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	DWORD PTR [esi+444], eax
	je	SHORT $LN8@JSOWSetup

; 4470 : 					{
; 4471 : 						((FlightClass *)self->GetCampaignObject())->shotAt = groundTargetPtr->BaseData();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR [eax+444], esi

; 4472 : 						((FlightClass *)self->GetCampaignObject())->whoShot = self;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+448], edx
$LN8@JSOWSetup:

; 4473 : 					}
; 4474 : 				}
; 4475 : 				if ( !((CampBaseClass *)groundTargetPtr->BaseData())->IsAggregate() ) 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	jne	$LN1@JSOWSetup

; 4476 : 				{
; 4477 : 					//retval = FALSE; //????
; 4478 : 					//It's close to target so try some other weapon
; 4479 : 					if (approxRange < 0.25F * rMax) 

	movss	xmm0, DWORD PTR __real@3e800000
	mulss	xmm0, DWORD PTR _rMax$[ebp]
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	$LN1@JSOWSetup

; 4480 : 					{
; 4481 : 						if (hasAGMissile | hasBomb | hasRocket | hasGun | hasGBU)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+184]
	or	eax, DWORD PTR [edx+180]
	mov	ecx, DWORD PTR _this$[ebp]
	or	eax, DWORD PTR [ecx+192]
	mov	edx, DWORD PTR _this$[ebp]
	or	eax, DWORD PTR [edx+196]
	mov	ecx, DWORD PTR _this$[ebp]
	or	eax, DWORD PTR [ecx+204]
	je	SHORT $LN5@JSOWSetup

; 4482 : 							retval = FALSE - 1;

	mov	DWORD PTR _retval$[ebp], -1

; 4483 : 						else 

	jmp	$LN1@JSOWSetup
$LN5@JSOWSetup:

; 4484 : 						{
; 4485 : 							ClearATCFlag(HasCanUseAGWeapon);

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 4486 : 							ClearATCFlag(HasAGWeapon);

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 4487 : 							agDoctrine = AGD_NONE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+244], 0

; 4488 : 							missionComplete = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+292], 1

; 4489 : 							self->FCC->SetMasterMode (FireControlComputer::Nav);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+936]
	call	?SetMasterMode@FireControlComputer@@QAEXW4FCCMasterMode@1@@Z ; FireControlComputer::SetMasterMode

; 4490 : 							self->FCC->preDesignate = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+936]
	mov	BYTE PTR [edx+182], 1

; 4491 : 							SetGroundTarget( NULL );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget

; 4492 : 							if (GetWaypointIndex() == GetTargetWPIndex())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWaypointIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetWaypointIndex
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTargetWPIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetTargetWPIndex
	cmp	esi, eax
	jne	SHORT $LN3@JSOWSetup

; 4493 : 								SelectNextWaypoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectNextWaypoint@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectNextWaypoint
$LN3@JSOWSetup:

; 4494 : 							// if we're a wingie, rejoin the lead
; 4495 : 							if ( isWing ) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN2@JSOWSetup

; 4496 : 							{
; 4497 : 								mFormation = FalconWingmanMsg::WMWedge;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+808], 1

; 4498 : 								AiRejoin( NULL );

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiRejoin@DigitalBrain@@AAEXPAVFalconWingmanMsg@@W4AiHint@1@@Z ; DigitalBrain::AiRejoin

; 4499 : 								// make sure wing's designated target is NULL'd out
; 4500 : 								mDesignatedObject = FalconNullId;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [edx+800], eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [edx+804], ecx

; 4501 : 							}
; 4502 : 							else // So the player's wingmen still know they have something

	jmp	SHORT $LN1@JSOWSetup
$LN2@JSOWSetup:

; 4503 : 								hasWeapons = FALSE; // Got here so nothing else than HARMS was available anyway

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+216], 0
$LN1@JSOWSetup:

; 4504 : 						}
; 4505 : 					}
; 4506 : 				}
; 4507 : 			}
; 4508 : 			return retval;

	mov	eax, DWORD PTR _retval$[ebp]

; 4509 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?JSOWSetup@DigitalBrain@@IAEHMMMM@Z ENDP		; DigitalBrain::JSOWSetup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gndattck.cpp
_TEXT	SEGMENT
_rMin$ = -72						; size = 4
tv647 = -68						; size = 4
tv569 = -64						; size = 4
_az$ = -60						; size = 4
tv454 = -56						; size = 4
tv372 = -52						; size = 4
tv298 = -48						; size = 4
tv215 = -44						; size = 4
tv213 = -40						; size = 4
tv205 = -36						; size = 4
tv195 = -32						; size = 4
_FCC$ = -28						; size = 4
_Sms$ = -24						; size = 4
_theHTS$ = -20						; size = 4
_radarRange$ = -16					; size = 4
_retval$ = -12						; size = 4
_rMax$ = -8						; size = 4
_this$ = -4						; size = 4
_rx$ = 8						; size = 4
_ry$ = 12						; size = 4
_ata$ = 16						; size = 4
_approxRange$ = 20					; size = 4
?HARMSetup@DigitalBrain@@IAEHMMMM@Z PROC		; DigitalBrain::HARMSetup
; _this$ = ecx

; 4209 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 4210 : 		FireControlComputer* FCC = self->FCC;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+936]
	mov	DWORD PTR _FCC$[ebp], edx

; 4211 : 		SMSClass* Sms = self->Sms;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+940]
	mov	DWORD PTR _Sms$[ebp], edx

; 4212 : 		float /*dx, dy,*/ az, rMin, rMax;
; 4213 : 		int retval = TRUE;

	mov	DWORD PTR _retval$[ebp], 1

; 4214 : 		HarmTargetingPod	*theHTS;
; 4215 : 
; 4216 : 		theHTS = (HarmTargetingPod*)FindSensor(self, SensorClass::HTS);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theHTS$[ebp], eax

; 4217 : 
; 4218 : 		F4Assert (!Sms->curWeapon || Sms->curWeapon->IsMissile());
; 4219 : 		// Set up FCC for harm shot
; 4220 : 		if (FCC->GetMasterMode() != FireControlComputer::AirGroundHARM)

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ ; FireControlComputer::GetMasterMode
	cmp	eax, 7
	je	SHORT $LN37@HARMSetup

; 4221 : 		{
; 4222 : 			//Cobra test
; 4223 : 			self->FCC->SetMasterMode (FireControlComputer::AirGroundHARM);

	push	7
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+936]
	call	?SetMasterMode@FireControlComputer@@QAEXW4FCCMasterMode@1@@Z ; FireControlComputer::SetMasterMode

; 4224 : 			self->FCC->SetSubMode (FireControlComputer::HARM); // RV- I-Hawk 

	push	23					; 00000017H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+936]
	call	?SetSubMode@FireControlComputer@@QAEXW4FCCSubMode@1@@Z ; FireControlComputer::SetSubMode
$LN37@HARMSetup:

; 4225 : 		}
; 4226 : 
; 4227 : 		// fcc target needs to be set cuz that's the target
; 4228 : 		// that will be used in sms launch missile
; 4229 : 		FCC->SetTarget(groundTargetPtr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	push	ecx
	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?SetTarget@FireControlComputer@@QAEXPAVSimObjectType@@@Z ; FireControlComputer::SetTarget

; 4230 : 
; 4231 : 		az	= (float)atan2(ry,rx);

	cvtss2sd xmm0, DWORD PTR _rx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _az$[ebp]

; 4232 : 
; 4233 : 		// Got this null in multiplayer - RH
; 4234 : 		ShiAssert (Sms->curWeapon);
; 4235 : 
; 4236 : 		if (Sms->curWeapon)

	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN36@HARMSetup

; 4237 : 		{
; 4238 : 			ShiAssert(Sms->curWeapon->IsMissile());
; 4239 : 			rMax = ((MissileClass*)Sms->GetCurrentWeapon())->GetRMax(-self->ZPos(), self->GetVt(), az, 0.0f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _az$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+56]
	mov	edx, DWORD PTR [eax+220]
	call	edx
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv569[ebp]
	movss	xmm0, DWORD PTR tv569[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _Sms$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _Sms$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	?GetRMax@MissileClass@@QAEMMMMMM@Z	; MissileClass::GetRMax
	fstp	DWORD PTR _rMax$[ebp]

; 4240 : 		}
; 4241 : 		else

	jmp	SHORT $LN35@HARMSetup
$LN36@HARMSetup:

; 4242 : 		{
; 4243 : 			rMax = 0.1F;

	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _rMax$[ebp], xmm0
$LN35@HARMSetup:

; 4244 : 		}
; 4245 : 
; 4246 : 		// 2002-01-21 ADDED BY S.G. GetRMax is not enough, need to see if the HARM seeker will see the target as well
; 4247 : 		//                          Adjust rMax accordingly.
; 4248 : 		float radarRange;//Cobra changed from int to float to match RdrRng
; 4249 : 		if (groundTargetPtr->BaseData()->IsSim())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN34@HARMSetup

; 4250 : 			radarRange = ((SimBaseClass*)groundTargetPtr->BaseData())->RdrRng();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?RdrRng@SimBaseClass@@QAEMXZ		; SimBaseClass::RdrRng
	fstp	DWORD PTR _radarRange$[ebp]

; 4251 : 		else {

	jmp	SHORT $LN31@HARMSetup
$LN34@HARMSetup:

; 4252 : 			if (groundTargetPtr->BaseData()->IsEmitting())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv195[ebp], eax
	mov	ecx, DWORD PTR tv195[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv195[ebp]
	mov	eax, DWORD PTR [edx+216]
	call	eax
	test	eax, eax
	je	SHORT $LN32@HARMSetup

; 4253 : 				radarRange = RadarDataTable[groundTargetPtr->BaseData()->GetRadarType()].NominalRange;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv205[ebp]
	mov	edx, DWORD PTR [eax+292]
	call	edx
	imul	eax, 58					; 0000003aH
	mov	ecx, DWORD PTR ?RadarDataTable@@3PAURadarDataType@@A ; RadarDataTable
	movss	xmm0, DWORD PTR [ecx+eax+16]
	movss	DWORD PTR _radarRange$[ebp], xmm0

; 4254 : 			else

	jmp	SHORT $LN31@HARMSetup
$LN32@HARMSetup:

; 4255 : 				radarRange = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _radarRange$[ebp], xmm0
$LN31@HARMSetup:

; 4256 : 		}
; 4257 : 		rMax = min(rMax, radarRange);

	movss	xmm0, DWORD PTR _radarRange$[ebp]
	comiss	xmm0, DWORD PTR _rMax$[ebp]
	jbe	SHORT $LN40@HARMSetup
	movss	xmm0, DWORD PTR _rMax$[ebp]
	movss	DWORD PTR tv213[ebp], xmm0
	jmp	SHORT $LN41@HARMSetup
$LN40@HARMSetup:
	movss	xmm0, DWORD PTR _radarRange$[ebp]
	movss	DWORD PTR tv213[ebp], xmm0
$LN41@HARMSetup:
	movss	xmm0, DWORD PTR tv213[ebp]
	movss	DWORD PTR _rMax$[ebp], xmm0

; 4258 : 		rMax = max(rMax, 0.1f);

	movss	xmm0, DWORD PTR _rMax$[ebp]
	comiss	xmm0, DWORD PTR __real@3dcccccd
	jbe	SHORT $LN42@HARMSetup
	movss	xmm0, DWORD PTR _rMax$[ebp]
	movss	DWORD PTR tv215[ebp], xmm0
	jmp	SHORT $LN43@HARMSetup
$LN42@HARMSetup:
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR tv215[ebp], xmm0
$LN43@HARMSetup:
	movss	xmm0, DWORD PTR tv215[ebp]
	movss	DWORD PTR _rMax$[ebp], xmm0

; 4259 : 		// END OF ADDED SECTION 2002-01-21
; 4260 : 
; 4261 : 		//Cobra removed RMax Rmin in favor of this
; 4262 : 		rMin = 0.0f; // HARM's don't have a min

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _rMin$[ebp], xmm0

; 4263 : 
; 4264 : 		// Make sure the HTS has the target
; 4265 : 		if (theHTS)

	cmp	DWORD PTR _theHTS$[ebp], 0
	je	SHORT $LN29@HARMSetup

; 4266 : 		{
; 4267 : 			theHTS->SetDesiredTarget (groundTargetPtr);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+224]
	push	eax
	mov	ecx, DWORD PTR _theHTS$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theHTS$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 4268 : 			if (!theHTS->CurrentTarget())

	mov	ecx, DWORD PTR _theHTS$[ebp]
	call	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
	test	eax, eax
	jne	SHORT $LN29@HARMSetup

; 4269 : 				retval = FALSE;

	mov	DWORD PTR _retval$[ebp], 0
$LN29@HARMSetup:

; 4270 : 
; 4271 : 			// 2001-06-18 ADDED BY S.G. JUST DO A LOS CHECK :-( I CAN'T RELIABLY GET THE POD LOCK STATUS
; 4272 : 			/*if (!self->CheckLOS(groundTargetPtr))
; 4273 : 			  retval = FALSE;*///Cobra removed this
; 4274 : 			// END OF ADDED SECTION
; 4275 : 		}
; 4276 : 
; 4277 : 		//Cobra HARMs are all aspect but we will limit AI to 1/2 range if target behind 3/9 line
; 4278 : 		if (ata > 90.0f * DTR && approxRange > rMax * 0.5f)

	movss	xmm0, DWORD PTR _ata$[ebp]
	comiss	xmm0, DWORD PTR __real@3fc90fd9
	jbe	SHORT $LN28@HARMSetup
	movss	xmm0, DWORD PTR _rMax$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR _approxRange$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN28@HARMSetup

; 4279 : 		{
; 4280 : 			retval = FALSE;

	mov	DWORD PTR _retval$[ebp], 0
$LN28@HARMSetup:

; 4281 : 		}
; 4282 : 
; 4283 : 		if (approxRange > g_fAIHarmMaxRange * NM_TO_FT) // Cobra limit AI max firing range to g_fAIHarmMaxRange

	movss	xmm0, DWORD PTR ?g_fAIHarmMaxRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	movss	xmm1, DWORD PTR _approxRange$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN27@HARMSetup

; 4284 : 		{
; 4285 : 			retval = FALSE;

	mov	DWORD PTR _retval$[ebp], 0
$LN27@HARMSetup:

; 4286 : 		}
; 4287 : 
; 4288 : 		// we want to see what the target campaign
; 4289 : 		// entity is doing
; 4290 : 		if ( groundTargetPtr->BaseData()->IsSim() )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	$LN26@HARMSetup

; 4291 : 		{
; 4292 : 			// 2001-06-25 ADDED BY S.G. IF I HAVE SOMETHING IN shotAt, IT COULD MEAN SOMEONE SHOT WHILE THE TARGET WAS AGGREGATED. DEAL WITH THIS
; 4293 : 			// If shotAt has something, someone is/was targeting the aggregated entity. If it wasn't me, don't fire at it once it is deaggregated as well.
; 4294 : 			if (((FlightClass *)self->GetCampaignObject())->shotAt == ((SimBaseClass *)groundTargetPtr->BaseData())->GetCampaignObject() && ((FlightClass *)self->GetCampaignObject())->whoShot != self)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	esi, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	cmp	DWORD PTR [esi+444], eax
	jne	SHORT $LN25@HARMSetup
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+448]
	cmp	eax, DWORD PTR [edx+56]
	je	SHORT $LN25@HARMSetup

; 4295 : 				retval = FALSE - 1;

	mov	DWORD PTR _retval$[ebp], -1
$LN25@HARMSetup:

; 4296 : 			// END OF ADDED SECTION
; 4297 : 			// 2001-05-27 MODIFIED BY S.G. LAUNCH AT A CLOSER RANGE IF NOT EMITTING (AND IT'S THE ONLY WEAPONS ON BOARD - TESTED SOMEWHERE ELSE)
; 4298 : 			//		if ( !((SimBaseClass *)groundTargetPtr->BaseData())->GetCampaignObject()->IsEmitting() && approxRange > 0.5F * rMax)
; 4299 : 			//			retval = FALSE;
; 4300 : 			// 2002-01-20 MODIFIED BY S.G. If RdrRng() is zero, this means the radar is off. Can't fire at it if it's off! (only valid for sim object)
; 4301 : 			//		if ( !((SimBaseClass *)groundTargetPtr->BaseData())->GetCampaignObject()->IsEmitting())
; 4302 : 			if ( !((SimBaseClass *)groundTargetPtr->BaseData())->GetCampaignObject()->IsEmitting() || ((SimBaseClass *)groundTargetPtr->BaseData())->RdrRng() == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR tv298[ebp], eax
	mov	edx, DWORD PTR tv298[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv298[ebp]
	mov	edx, DWORD PTR [eax+216]
	call	edx
	test	eax, eax
	je	SHORT $LN23@HARMSetup
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?RdrRng@SimBaseClass@@QAEMXZ		; SimBaseClass::RdrRng
	fstp	DWORD PTR tv647[ebp]
	movss	xmm0, DWORD PTR tv647[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	$LN17@HARMSetup
$LN23@HARMSetup:

; 4303 : 			{
; 4304 : 				retval = FALSE;

	mov	DWORD PTR _retval$[ebp], 0

; 4305 : 				// 2001-07-02 MODIFIED BY S.G. IT'S NOW 0.25 SO TWICE AS CLOSE AS BEFORE
; 4306 : 				//			if (approxRange < 0.5F * rMax)
; 4307 : 				if (approxRange < 0.25F * rMax)

	movss	xmm0, DWORD PTR __real@3e800000
	mulss	xmm0, DWORD PTR _rMax$[ebp]
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	$LN17@HARMSetup

; 4308 : 				{
; 4309 : 					// 2001-06-24 ADDED BY S.G. TRY WITH SOMETHING ELSE IF YOU CAN
; 4310 : 					if (hasAGMissile | hasBomb | hasRocket | hasGun | hasGBU)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+184]
	or	eax, DWORD PTR [edx+180]
	mov	ecx, DWORD PTR _this$[ebp]
	or	eax, DWORD PTR [ecx+192]
	mov	edx, DWORD PTR _this$[ebp]
	or	eax, DWORD PTR [edx+196]
	mov	ecx, DWORD PTR _this$[ebp]
	or	eax, DWORD PTR [ecx+204]
	je	SHORT $LN21@HARMSetup

; 4311 : 						retval = FALSE - 1;

	mov	DWORD PTR _retval$[ebp], -1

; 4312 : 					else {

	jmp	$LN17@HARMSetup
$LN21@HARMSetup:

; 4313 : 						// END OF ADDED SECTION
; 4314 : 						ClearATCFlag(HasCanUseAGWeapon);

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 4315 : 						ClearATCFlag(HasAGWeapon);

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 4316 : 						agDoctrine = AGD_NONE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+244], 0

; 4317 : 						missionComplete = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+292], 1

; 4318 : 						self->FCC->SetMasterMode (FireControlComputer::Nav);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+936]
	call	?SetMasterMode@FireControlComputer@@QAEXW4FCCMasterMode@1@@Z ; FireControlComputer::SetMasterMode

; 4319 : 						self->FCC->preDesignate = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+936]
	mov	BYTE PTR [edx+182], 1

; 4320 : 						SetGroundTarget( NULL );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget

; 4321 : 						if (GetWaypointIndex() == GetTargetWPIndex())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWaypointIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetWaypointIndex
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTargetWPIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetTargetWPIndex
	cmp	esi, eax
	jne	SHORT $LN19@HARMSetup

; 4322 : 							SelectNextWaypoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectNextWaypoint@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectNextWaypoint
$LN19@HARMSetup:

; 4323 : 						// if we're a wingie, rejoin the lead
; 4324 : 						if ( isWing ) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN18@HARMSetup

; 4325 : 							mFormation = FalconWingmanMsg::WMWedge;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+808], 1

; 4326 : 							AiRejoin( NULL );

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiRejoin@DigitalBrain@@AAEXPAVFalconWingmanMsg@@W4AiHint@1@@Z ; DigitalBrain::AiRejoin

; 4327 : 							// make sure wing's designated target is NULL'd out
; 4328 : 							mDesignatedObject = FalconNullId;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [edx+800], eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [edx+804], ecx

; 4329 : 						}
; 4330 : 						else // So the player's wingmen still know they have something

	jmp	SHORT $LN17@HARMSetup
$LN18@HARMSetup:

; 4331 : 							hasWeapons = FALSE; // Got here so nothing else than HARMS was available anyway

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+216], 0
$LN17@HARMSetup:

; 4332 : 					}
; 4333 : 				}
; 4334 : 			}
; 4335 : 			// END OF MODIFIED SECTION
; 4336 : 		}
; 4337 : 		else

	jmp	$LN2@HARMSetup
$LN26@HARMSetup:

; 4338 : 		{
; 4339 : 			// campaign entity
; 4340 : 			// 2001-06-25 ADDED BY S.G. IF IT IS AGGREGATED, ONLY ONE PLANE CAN SHOOT AT IT WITH HARMS
; 4341 : 			if (((CampBaseClass *)groundTargetPtr->BaseData())->IsAggregate()) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	je	$LN10@HARMSetup

; 4342 : 				// 2002-01-20 ADDED BY S.G. Unless it's an AAA since it has more than one radar.
; 4343 : 				if (!groundTargetPtr->BaseData()->IsBattalion() || ((BattalionClass *)groundTargetPtr->BaseData())->class_data->RadarVehicle < 16) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv372[ebp], eax
	mov	edx, DWORD PTR tv372[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv372[ebp]
	mov	edx, DWORD PTR [eax+240]
	call	edx
	test	eax, eax
	je	SHORT $LN13@HARMSetup
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, DWORD PTR [eax+236]
	movzx	edx, BYTE PTR [ecx+328]
	cmp	edx, 16					; 00000010H
	jge	SHORT $LN10@HARMSetup
$LN13@HARMSetup:

; 4344 : 					// END OF ADDED SECTION 2002-01-20
; 4345 : 					// If it's not at what we shot last, then it's valid
; 4346 : 					if (((FlightClass *)self->GetCampaignObject())->shotAt != groundTargetPtr->BaseData()) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	DWORD PTR [esi+444], eax
	je	SHORT $LN12@HARMSetup

; 4347 : 						((FlightClass *)self->GetCampaignObject())->shotAt = groundTargetPtr->BaseData();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	esi, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR [eax+444], esi

; 4348 : 						((FlightClass *)self->GetCampaignObject())->whoShot = self;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	mov	DWORD PTR [eax+448], ecx
	jmp	SHORT $LN10@HARMSetup
$LN12@HARMSetup:

; 4349 : 					}
; 4350 : 					// If one of us is shooting, make sure it's me, otherwise no HARMS for me please.
; 4351 : 					else if (((FlightClass *)self->GetCampaignObject())->whoShot != self)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+448]
	cmp	edx, DWORD PTR [ecx+56]
	je	SHORT $LN10@HARMSetup

; 4352 : 						retval = FALSE - 1;

	mov	DWORD PTR _retval$[ebp], -1
$LN10@HARMSetup:

; 4353 : 				}
; 4354 : 			}
; 4355 : 			// END OF ADDED SECTION
; 4356 : 			// 2001-05-27 MODIFIED BY S.G. LAUNCH AT A CLOSER RANGE IF NOT EMITTING (AND IT'S THE ONLY WEAPONS ON BOARD - TESTED SOMEWHERE ELSE)
; 4357 : 			//		if ( !groundTargetPtr->BaseData()->IsEmitting() && approxRange > 0.5F * rMax)
; 4358 : 			//			retval = FALSE;
; 4359 : 			// 2001-06-05 MODIFIED BY S.G. THAT'S IT IF YOU CAN CONNECT WITH IT...
; 4360 : 			// 2001-06-21 MODIFIED BY S.G. EVEN IF EMITTING, IF IT'S NOT AGGREGATED, DON'T FIRE (IE retval = FALSE)
; 4361 : 			if ( !groundTargetPtr->BaseData()->IsEmitting() || !((CampBaseClass *)groundTargetPtr->BaseData())->IsAggregate() ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv454[ebp], eax
	mov	ecx, DWORD PTR tv454[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv454[ebp]
	mov	eax, DWORD PTR [edx+216]
	call	eax
	test	eax, eax
	je	SHORT $LN8@HARMSetup
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	jne	$LN2@HARMSetup
$LN8@HARMSetup:

; 4362 : 				retval = FALSE;

	mov	DWORD PTR _retval$[ebp], 0

; 4363 : 				// 2001-07-02 MODIFIED BY S.G. IT'S NOW 0.25 SO TWICE AS CLOSE AS BEFORE
; 4364 : 				//			if (approxRange < 0.5F * rMax) {
; 4365 : 				if (approxRange < 0.25F * rMax) {

	movss	xmm0, DWORD PTR __real@3e800000
	mulss	xmm0, DWORD PTR _rMax$[ebp]
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	$LN2@HARMSetup

; 4366 : 					// 2001-06-24 ADDED BY S.G. TRY WITH SOMETHING ELSE IF YOU CAN
; 4367 : 					if (hasAGMissile | hasBomb | hasRocket | hasGun | hasGBU)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+184]
	or	ecx, DWORD PTR [eax+180]
	mov	edx, DWORD PTR _this$[ebp]
	or	ecx, DWORD PTR [edx+192]
	mov	eax, DWORD PTR _this$[ebp]
	or	ecx, DWORD PTR [eax+196]
	mov	edx, DWORD PTR _this$[ebp]
	or	ecx, DWORD PTR [edx+204]
	je	SHORT $LN6@HARMSetup

; 4368 : 						retval = FALSE - 1;

	mov	DWORD PTR _retval$[ebp], -1

; 4369 : 					else {

	jmp	$LN2@HARMSetup
$LN6@HARMSetup:

; 4370 : 						// END OF ADDED SECTION
; 4371 : 						ClearATCFlag(HasCanUseAGWeapon);

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 4372 : 						ClearATCFlag(HasAGWeapon);

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 4373 : 						agDoctrine = AGD_NONE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+244], 0

; 4374 : 						missionComplete = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+292], 1

; 4375 : 						self->FCC->SetMasterMode (FireControlComputer::Nav);

	push	4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+936]
	call	?SetMasterMode@FireControlComputer@@QAEXW4FCCMasterMode@1@@Z ; FireControlComputer::SetMasterMode

; 4376 : 						self->FCC->preDesignate = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+936]
	mov	BYTE PTR [eax+182], 1

; 4377 : 						SetGroundTarget( NULL );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget

; 4378 : 						if (GetWaypointIndex() == GetTargetWPIndex())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWaypointIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetWaypointIndex
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTargetWPIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetTargetWPIndex
	cmp	esi, eax
	jne	SHORT $LN4@HARMSetup

; 4379 : 							SelectNextWaypoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectNextWaypoint@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectNextWaypoint
$LN4@HARMSetup:

; 4380 : 						// if we're a wingie, rejoin the lead
; 4381 : 						if ( isWing ) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN3@HARMSetup

; 4382 : 							mFormation = FalconWingmanMsg::WMWedge;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+808], 1

; 4383 : 							AiRejoin( NULL );

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiRejoin@DigitalBrain@@AAEXPAVFalconWingmanMsg@@W4AiHint@1@@Z ; DigitalBrain::AiRejoin

; 4384 : 							// make sure wing's designated target is NULL'd out
; 4385 : 							mDesignatedObject = FalconNullId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax+800], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+804], edx

; 4386 : 						}
; 4387 : 						else // So the player's wingmen still know they have something

	jmp	SHORT $LN2@HARMSetup
$LN3@HARMSetup:

; 4388 : 							hasWeapons = FALSE; // Got here so nothing else than HARMS was available anyway

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+216], 0
$LN2@HARMSetup:

; 4389 : 					}
; 4390 : 				}
; 4391 : 			}
; 4392 : 			// END OF MODIFIED SECTION
; 4393 : 			}
; 4394 : 
; 4395 : 			// if we use missiles we don't drop bombs
; 4396 : 			// unless we shot a harm
; 4397 : 			if (agDoctrine != AGD_LOOK_SHOOT_LOOK )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+244], 2
	je	SHORT $LN1@HARMSetup

; 4398 : 			{
; 4399 : 				hasBomb = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], 0

; 4400 : 				hasGBU = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+204], 0

; 4401 : 				hasRocket = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+192], 0
$LN1@HARMSetup:

; 4402 : 			}
; 4403 : 
; 4404 : 			return retval;

	mov	eax, DWORD PTR _retval$[ebp]

; 4405 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?HARMSetup@DigitalBrain@@IAEHMMMM@Z ENDP		; DigitalBrain::HARMSetup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gndattck.cpp
_TEXT	SEGMENT
_rMin$ = -40						; size = 4
tv439 = -36						; size = 4
_az$ = -32						; size = 4
tv166 = -28						; size = 4
tv151 = -24						; size = 4
_rMax$ = -20						; size = 4
_FCC$ = -16						; size = 4
_retval$ = -12						; size = 4
_Sms$ = -8						; size = 4
_this$ = -4						; size = 4
_rx$ = 8						; size = 4
_ry$ = 12						; size = 4
_ata$ = 16						; size = 4
_approxRange$ = 20					; size = 4
_theRadar$ = 24						; size = 4
?MaverickSetup@DigitalBrain@@IAEHMMMMPAVRadarClass@@@Z PROC ; DigitalBrain::MaverickSetup
; _this$ = ecx

; 4060 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 4061 : 		FireControlComputer* FCC = self->FCC;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+936]
	mov	DWORD PTR _FCC$[ebp], edx

; 4062 : 		SMSClass* Sms = self->Sms;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+940]
	mov	DWORD PTR _Sms$[ebp], edx

; 4063 : 		float az, rMin, rMax;
; 4064 : 		int retval = TRUE;

	mov	DWORD PTR _retval$[ebp], 1

; 4065 : 
; 4066 : 		if (FCC->postDrop)

	mov	eax, DWORD PTR _FCC$[ebp]
	movsx	ecx, BYTE PTR [eax+183]
	test	ecx, ecx
	je	SHORT $LN24@MaverickSe

; 4067 : 		{
; 4068 : 			// Force a retarget
; 4069 : 			if (groundTargetPtr && groundTargetPtr->BaseData()->IsSim())

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+224], 0
	je	SHORT $LN23@MaverickSe
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN23@MaverickSe

; 4070 : 			{
; 4071 : 				SetGroundTarget (((SimBaseClass*)groundTargetPtr->BaseData())->GetCampaignObject());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget
$LN23@MaverickSe:

; 4072 : 			}
; 4073 : 			SelectGroundTarget(TARGET_ANYTHING);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectGroundTarget@DigitalBrain@@IAEXH@Z ; DigitalBrain::SelectGroundTarget

; 4074 : 			retval = FALSE;

	mov	DWORD PTR _retval$[ebp], 0

; 4075 : 		}
; 4076 : 		else

	jmp	$LN1@MaverickSe
$LN24@MaverickSe:

; 4077 : 		{
; 4078 : 			// Point the radar at the target
; 4079 : 			if (theRadar) 

	cmp	DWORD PTR _theRadar$[ebp], 0
	je	$LN21@MaverickSe

; 4080 : 			{
; 4081 : 				// 2001-07-23 MODIFIED BY S.G. MOVERS ARE ONLY 3D ENTITIES WHILE BATTALIONS WILL INCLUDE 2D AND 3D VEHICLES...
; 4082 : 				//       if (groundTargetPtr && groundTargetPtr->BaseData()->IsMover())
; 4083 : 				if (groundTargetPtr && (groundTargetPtr->BaseData()->IsSim() && ((SimBaseClass *)groundTargetPtr->BaseData())->GetCampaignObject()->IsBattalion()) || (groundTargetPtr->BaseData()->IsCampaign() && groundTargetPtr->BaseData()->IsBattalion()))

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+224], 0
	je	SHORT $LN17@MaverickSe
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN17@MaverickSe
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR tv151[ebp], eax
	mov	edx, DWORD PTR tv151[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv151[ebp]
	mov	edx, DWORD PTR [eax+240]
	call	edx
	test	eax, eax
	jne	SHORT $LN19@MaverickSe
$LN17@MaverickSe:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsCampaign@FalconEntity@@QAEHXZ	; FalconEntity::IsCampaign
	test	eax, eax
	je	SHORT $LN20@MaverickSe
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv166[ebp], eax
	mov	edx, DWORD PTR tv166[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv166[ebp]
	mov	edx, DWORD PTR [eax+240]
	call	edx
	test	eax, eax
	je	SHORT $LN20@MaverickSe
$LN19@MaverickSe:

; 4084 : 					theRadar->SetMode(RadarClass::GMT);

	push	16					; 00000010H
	mov	eax, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax

; 4085 : 				else

	jmp	SHORT $LN16@MaverickSe
$LN20@MaverickSe:

; 4086 : 					theRadar->SetMode(RadarClass::GM);

	push	14					; 0000000eH
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax
$LN16@MaverickSe:

; 4087 : 				theRadar->SetDesiredTarget(groundTargetPtr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+224]
	push	edx
	mov	eax, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 4088 : 				theRadar->SetAGSnowPlow(TRUE);

	push	1
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+176]
	call	eax
$LN21@MaverickSe:

; 4089 : 			}
; 4090 : 
; 4091 : 			F4Assert (!Sms->curWeapon || Sms->curWeapon->IsMissile());
; 4092 : 
; 4093 : 
; 4094 : 			// Set up FCC for maverick shot
; 4095 : 			if (FCC->GetMasterMode() != FireControlComputer::AirGroundMissile)

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ ; FireControlComputer::GetMasterMode
	cmp	eax, 6
	je	SHORT $LN15@MaverickSe

; 4096 : 			{
; 4097 : 				//Cobra test
; 4098 : 				self->FCC->SetMasterMode (FireControlComputer::AirGroundMissile);

	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+936]
	call	?SetMasterMode@FireControlComputer@@QAEXW4FCCMasterMode@1@@Z ; FireControlComputer::SetMasterMode

; 4099 : 				self->FCC->SetSubMode (FireControlComputer::SLAVE);

	push	15					; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [ecx+936]
	call	?SetSubMode@FireControlComputer@@QAEXW4FCCSubMode@1@@Z ; FireControlComputer::SetSubMode

; 4100 : 				self->FCC->designateCmd = FALSE; 

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+936]
	mov	BYTE PTR [ecx+184], 0

; 4101 : 				self->FCC->preDesignate = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+936]
	mov	BYTE PTR [ecx+182], 1
$LN15@MaverickSe:

; 4102 : 			}
; 4103 : 			// 2001-07-23 REMOVED BY S.G. DO LIKE THE HARMSetup. ONCE SET, DO YOUR STUFF
; 4104 : 			//    else
; 4105 : 			{
; 4106 : 				// Has the current weapon locked?
; 4107 : 				if (Sms->curWeapon)

	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	edx, al
	test	edx, edx
	je	$LN14@MaverickSe

; 4108 : 				{
; 4109 : 					if (Sms->curWeapon->targetPtr)

	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	cmp	DWORD PTR [eax+656], 0
	je	SHORT $LN13@MaverickSe

; 4110 : 					{
; 4111 : 						if (self->curSOI != SimVehicleClass::SOI_WEAPON)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	cmp	DWORD PTR [ecx+724], 2
	je	SHORT $LN12@MaverickSe

; 4112 : 						{
; 4113 : 							FCC->designateCmd = TRUE;

	mov	edx, DWORD PTR _FCC$[ebp]
	mov	BYTE PTR [edx+184], 1

; 4114 : 						}
; 4115 : 						else

	jmp	SHORT $LN11@MaverickSe
$LN12@MaverickSe:

; 4116 : 						{
; 4117 : 							FCC->designateCmd = FALSE;

	mov	eax, DWORD PTR _FCC$[ebp]
	mov	BYTE PTR [eax+184], 0
$LN11@MaverickSe:

; 4118 : 						}
; 4119 : 
; 4120 : 						FCC->preDesignate = FALSE;

	mov	ecx, DWORD PTR _FCC$[ebp]
	mov	BYTE PTR [ecx+182], 0

; 4121 : 					}
; 4122 : 					// 2001-07-23 ADDED BY S.G. DON'T LAUNCH IF OUR MISSILE DO NOT HAVE A LOCK!
; 4123 : 					else

	jmp	SHORT $LN10@MaverickSe
$LN13@MaverickSe:

; 4124 : 						retval = FALSE;

	mov	DWORD PTR _retval$[ebp], 0
$LN10@MaverickSe:

; 4125 : 
; 4126 : 					// fcc target needs to be set cuz that's the target
; 4127 : 					// that will be used in sms launch missile
; 4128 : 					FCC->SetTarget(groundTargetPtr);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+224]
	push	eax
	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?SetTarget@FireControlComputer@@QAEXPAVSimObjectType@@@Z ; FireControlComputer::SetTarget

; 4129 : 
; 4130 : 					az	= (float)atan2(ry,rx);

	cvtss2sd xmm0, DWORD PTR _rx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _az$[ebp]

; 4131 : 					ShiAssert(Sms->curWeapon->IsMissile());
; 4132 : 					rMax = ((MissileClass*)Sms->GetCurrentWeapon())->GetRMax(-self->ZPos(), self->GetVt(), az, 0.0f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _az$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv439[ebp]
	movss	xmm0, DWORD PTR tv439[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _Sms$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _Sms$[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	mov	ecx, eax
	call	?GetRMax@MissileClass@@QAEMMMMMM@Z	; MissileClass::GetRMax
	fstp	DWORD PTR _rMax$[ebp]

; 4133 : 
; 4134 : 					// 2001-08-31 REMOVED BY S.G. NOT USED ANYWAY AND I NEED THE FLAG FOR SOMETHING ELSE
; 4135 : 					//				if (approxRange < rMax)
; 4136 : 					//					SetATCFlag(InhibitDefensive);
; 4137 : 
; 4138 : 					// rmin is just a percent of rmax
; 4139 : 					rMin = rMax * 0.1f;

	movss	xmm0, DWORD PTR _rMax$[ebp]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _rMin$[ebp], xmm0

; 4140 : 					// get the sweet spot
; 4141 : 					rMax *= 0.8f;

	movss	xmm0, DWORD PTR _rMax$[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR _rMax$[ebp], xmm0

; 4142 : 
; 4143 : 					// Check for firing solution
; 4144 : 					if ( !( ata < 15.0f * DTR && approxRange > rMin && approxRange < rMax ) )

	movss	xmm0, DWORD PTR __real@3e860a91
	comiss	xmm0, DWORD PTR _ata$[ebp]
	jbe	SHORT $LN8@MaverickSe
	movss	xmm0, DWORD PTR _approxRange$[ebp]
	comiss	xmm0, DWORD PTR _rMin$[ebp]
	jbe	SHORT $LN8@MaverickSe
	movss	xmm0, DWORD PTR _rMax$[ebp]
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	ja	SHORT $LN9@MaverickSe
$LN8@MaverickSe:

; 4145 : 					{
; 4146 : 						retval = FALSE;

	mov	DWORD PTR _retval$[ebp], 0
	jmp	$LN4@MaverickSe
$LN9@MaverickSe:

; 4147 : 					}
; 4148 : 					// 2001-07-23 ADDED BY S.G. MAKE SURE WE CAN SEE THE TARGET
; 4149 : 					else if (Sms->curWeapon) {

	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	eax, al
	test	eax, eax
	je	$LN4@MaverickSe

; 4150 : 						// First make sure the relative geometry is valid
; 4151 : 						if (Sms->curWeapon->targetPtr) {

	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	cmp	DWORD PTR [eax+656], 0
	je	SHORT $LN5@MaverickSe

; 4152 : 							CalcRelGeom(self, Sms->curWeapon->targetPtr, NULL, 1.0F / SimLibMajorFrameTime);

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	ecx, DWORD PTR [eax+656]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	?CalcRelGeom@@YAXPAVSimBaseClass@@PAVSimObjectType@@QAY02MM@Z ; CalcRelGeom
	add	esp, 16					; 00000010H

; 4153 : 							// Then run the seeker if we already have a target
; 4154 : 							((MissileClass *)Sms->GetCurrentWeapon())->RunSeeker();

	mov	ecx, DWORD PTR _Sms$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _Sms$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	?RunSeeker@MissileClass@@QAEXXZ		; MissileClass::RunSeeker
$LN5@MaverickSe:

; 4155 : 						}
; 4156 : 
; 4157 : 						// If we have no target, don't shoot!
; 4158 : 						if (!Sms->curWeapon || !Sms->curWeapon->targetPtr)

	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??7?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator!
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@MaverickSe
	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	cmp	DWORD PTR [eax+656], 0
	jne	SHORT $LN4@MaverickSe
$LN3@MaverickSe:

; 4159 : 							retval = FALSE;

	mov	DWORD PTR _retval$[ebp], 0
$LN4@MaverickSe:

; 4160 : 					}
; 4161 : 					// END OF ADDED SECTION
; 4162 : 
; 4163 : 					// Check for Min Range
; 4164 : 					//if (approxRange < 1.1F * rMin || ata > 165.0F * DTR)
; 4165 : 					//{
; 4166 : 					//	// Bail and try again
; 4167 : 					//	dx = ( self->XPos() - trackX );
; 4168 : 					//	dy = ( self->YPos() - trackY );
; 4169 : 					//	approxRange = (float)sqrt( dx * dx + dy * dy );
; 4170 : 					//	dx /= approxRange;
; 4171 : 					//	dy /= approxRange;
; 4172 : 
; 4173 : 					//	// COBRA - RED - Calculate minimum range for a nice ATA
; 4174 : 					//	float r=rMax * 0.75f + (rMax) * PRANDFloatPos() * 0.25f;
; 4175 : 					//	ipX = trackX + dx * r ;
; 4176 : 					//	ipY = trackY + dy * r ;
; 4177 : 
; 4178 : 					//	ShiAssert (ipX > 0.0F);
; 4179 : 
; 4180 : 					//	// Start again
; 4181 : 					//	onStation = Crosswind;
; 4182 : 					//	//MonoPrint ("Too close to Maverick, head to IP and try again\n");
; 4183 : 					//	retval = FALSE;
; 4184 : 					//}
; 4185 : 
; 4186 : 					// FRB
; 4187 : 					//if (approxRange < 1.1F * rMin || ata > 165.0F * DTR)
; 4188 : 					//if (approxRange < 1.0F || ata > 165.0F * DTR)
; 4189 : 					if (approxRange < 4.1F)

	movss	xmm0, DWORD PTR __real@40833333
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	SHORT $LN2@MaverickSe

; 4190 : 					{
; 4191 : 						// Release current target and target history
; 4192 : 						SetGroundTarget( NULL );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget

; 4193 : 						gndTargetHistory[0] = NULL;

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+452], 0

; 4194 : 						onStation = Downwind;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+132], 13			; 0000000dH

; 4195 : 						retval = FALSE-2;

	mov	DWORD PTR _retval$[ebp], -2		; fffffffeH
$LN2@MaverickSe:

; 4196 : 					}
; 4197 : 					// FRB - end
; 4198 : 				}
; 4199 : 				else

	jmp	SHORT $LN1@MaverickSe
$LN14@MaverickSe:

; 4200 : 				{
; 4201 : 					retval = FALSE;

	mov	DWORD PTR _retval$[ebp], 0
$LN1@MaverickSe:

; 4202 : 				}
; 4203 : 			}
; 4204 : 		}
; 4205 : 		return retval;

	mov	eax, DWORD PTR _retval$[ebp]

; 4206 : 	}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?MaverickSetup@DigitalBrain@@IAEHMMMMPAVRadarClass@@@Z ENDP ; DigitalBrain::MaverickSetup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gndattck.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_FCC$ = -4						; size = 4
_approxRange$ = 8					; size = 4
_ata$ = 12						; size = 4
?GunStrafe@DigitalBrain@@IAEHMM@Z PROC			; DigitalBrain::GunStrafe
; _this$ = ecx

; 4037 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4038 : 		FireControlComputer* FCC = self->FCC;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+936]
	mov	DWORD PTR _FCC$[ebp], edx

; 4039 : 
; 4040 : 		if (FCC->GetMasterMode() != FireControlComputer::AGGun ||
; 4041 : 				FCC->GetSubMode() != FireControlComputer::STRAF )

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ ; FireControlComputer::GetMasterMode
	cmp	eax, 1
	jne	SHORT $LN4@GunStrafe
	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetSubMode
	cmp	eax, 12					; 0000000cH
	je	SHORT $LN5@GunStrafe
$LN4@GunStrafe:

; 4042 : 		{
; 4043 : 			FCC->SetMasterMode (FireControlComputer::AGGun);

	push	1
	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?SetMasterMode@FireControlComputer@@QAEXW4FCCMasterMode@1@@Z ; FireControlComputer::SetMasterMode

; 4044 : 			FCC->SetSubMode (FireControlComputer::STRAF);

	push	12					; 0000000cH
	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?SetSubMode@FireControlComputer@@QAEXW4FCCSubMode@1@@Z ; FireControlComputer::SetSubMode
$LN5@GunStrafe:

; 4045 : 		}
; 4046 : 
; 4047 : 		if ( ata < 5.0f * DTR && approxRange < 1.2f * NM_TO_FT )

	movss	xmm0, DWORD PTR __real@3db2b8c1
	comiss	xmm0, DWORD PTR _ata$[ebp]
	jbe	SHORT $LN3@GunStrafe
	movss	xmm0, DWORD PTR __real@45e3dba1
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	SHORT $LN3@GunStrafe

; 4048 : 		{
; 4049 : 			SetFlag( GunFireFlag );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@BaseBrain@@QAEXH@Z		; BaseBrain::SetFlag
	jmp	SHORT $LN1@GunStrafe
$LN3@GunStrafe:

; 4050 : 		}
; 4051 : 		else if ( approxRange < 1.2f * NM_TO_FT && ata > 75.0f * DTR )

	movss	xmm0, DWORD PTR __real@45e3dba1
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	SHORT $LN1@GunStrafe
	movss	xmm0, DWORD PTR _ata$[ebp]
	comiss	xmm0, DWORD PTR __real@3fa78d35
	jbe	SHORT $LN1@GunStrafe

; 4052 : 		{
; 4053 : 			waitingForShot = SimLibElapsedTime + 5000;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 5000				; 00001388H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+496], eax

; 4054 : 			onStation = Final1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+132], 16			; 00000010H
$LN1@GunStrafe:

; 4055 : 		}
; 4056 : 		return 0;

	xor	eax, eax

; 4057 : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?GunStrafe@DigitalBrain@@IAEHMM@Z ENDP			; DigitalBrain::GunStrafe
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gndattck.cpp
_TEXT	SEGMENT
tv1099 = -288						; size = 8
tv1075 = -280						; size = 8
_Sms$ = -272						; size = 4
tv1037 = -268						; size = 4
tv1113 = -264						; size = 4
tv971 = -260						; size = 4
tv1399 = -256						; size = 4
tv1080 = -252						; size = 4
tv1378 = -248						; size = 4
tv1486 = -244						; size = 4
tv1372 = -240						; size = 4
tv1154 = -236						; size = 4
_iel$1 = -232						; size = 4
tv1092 = -228						; size = 4
_iaz$2 = -224						; size = 4
tv1062 = -220						; size = 4
tv1345 = -216						; size = 4
_FCC$ = -212						; size = 4
tv1324 = -208						; size = 4
_tz$3 = -204						; size = 4
tv1496 = -200						; size = 4
tv957 = -196						; size = 4
tv1319 = -192						; size = 4
_tgtAltDelta$4 = -188					; size = 4
tv1313 = -184						; size = 4
_deltaEl$5 = -180					; size = 4
tv1494 = -176						; size = 4
tv1086 = -172						; size = 4
tv1298 = -168						; size = 4
tv1068 = -164						; size = 4
tv1285 = -160						; size = 4
_iz$6 = -156						; size = 4
tv1267 = -152						; size = 4
tv1488 = -148						; size = 4
tv1492 = -144						; size = 4
tv1018 = -140						; size = 4
tv1262 = -136						; size = 4
tv1012 = -132						; size = 4
tv1238 = -128						; size = 4
_dz$7 = -124						; size = 4
tv1490 = -120						; size = 4
tv964 = -116						; size = 4
tv1233 = -112						; size = 4
tv1162 = -108						; size = 4
tv1023 = -104						; size = 4
_tel$8 = -100						; size = 4
tv417 = -96						; size = 4
tv656 = -92						; size = 4
_diffaz$9 = -88						; size = 4
_flyout$10 = -84					; size = 4
_diffel$11 = -80					; size = 4
_dxx$12 = -76						; size = 4
_tx$13 = -72						; size = 4
_diaz$14 = -68						; size = 4
_dyy$15 = -64						; size = 4
_ty$16 = -60						; size = 4
_ix$17 = -56						; size = 4
_angle$18 = -52						; size = 4
_iy$19 = -48						; size = 4
_rmode$20 = -44						; size = 4
_dtaz$21 = -40						; size = 4
_dy$22 = -36						; size = 4
_dx$23 = -32						; size = 4
_pmode$24 = -28						; size = 4
_atel$25 = -24						; size = 4
_selfAlt$26 = -20					; size = 4
_taz$27 = -16						; size = 4
_stick$28 = -12						; size = 4
_diff$29 = -8						; size = 4
_this$ = -4						; size = 4
_approxRange$ = 8					; size = 4
_ata$ = 12						; size = 4
?FireRocket@DigitalBrain@@IAEHMM@Z PROC			; DigitalBrain::FireRocket
; _this$ = ecx

; 3698 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	mov	DWORD PTR _this$[ebp], ecx

; 3699 : 	// Cobra test
; 3700 : 	static FILE *fp = NULL;
; 3701 : 	//if (fp == NULL)
; 3702 : 		//fp = fopen("G:\\RocketFCC.txt", "w");
; 3703 : 
; 3704 : 
; 3705 : 	FireControlComputer* FCC = self->FCC;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+936]
	mov	DWORD PTR _FCC$[ebp], edx

; 3706 : 	SMSClass* Sms = self->Sms;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+940]
	mov	DWORD PTR _Sms$[ebp], edx

; 3707 : 		
; 3708 : 	if (FCC->GetMasterMode() != FireControlComputer::AirGroundRocket) // MLR 4/3/2004 - 

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ ; FireControlComputer::GetMasterMode
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN80@FireRocket

; 3709 : 	{		
; 3710 : 		//self->Sms->FindWeaponClass(wcRocketWpn);
; 3711 : 		//FCC->SetAGMasterModeForCurrentWeapon();
; 3712 : 	//Cobra test
; 3713 : 		self->FCC->SetMasterMode (FireControlComputer::AirGroundRocket);

	push	13					; 0000000dH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [ecx+936]
	call	?SetMasterMode@FireControlComputer@@QAEXW4FCCMasterMode@1@@Z ; FireControlComputer::SetMasterMode
$LN80@FireRocket:

; 3714 : 	}
; 3715 : 	
; 3716 : 	// put pipper on target
; 3717 : 	if( groundTargetPtr)//			&& 

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+224], 0
	je	$LN79@FireRocket

; 3718 : 		//ata < 45 * DTR)
; 3719 : 	{
; 3720 : 		static float azRough = 10 * DTR;
; 3721 : 		int pmode = 0;

	mov	DWORD PTR _pmode$24[ebp], 0

; 3722 : 		int rmode = 0;

	mov	DWORD PTR _rmode$20[ebp], 0

; 3723 : 
; 3724 : 		float dx = groundTargetPtr->BaseData()->XPos() - self->FCC->groundImpactX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv957[ebp]
	movss	xmm0, DWORD PTR tv957[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+936]
	subss	xmm0, DWORD PTR [eax+348]
	movss	DWORD PTR _dx$23[ebp], xmm0

; 3725 : 		float dy = groundTargetPtr->BaseData()->YPos() - self->FCC->groundImpactY;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv964[ebp]
	movss	xmm0, DWORD PTR tv964[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+936]
	subss	xmm0, DWORD PTR [ecx+352]
	movss	DWORD PTR _dy$22[ebp], xmm0

; 3726 : 		float dz = groundTargetPtr->BaseData()->ZPos() - self->FCC->groundImpactZ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv971[ebp]
	movss	xmm0, DWORD PTR tv971[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+936]
	subss	xmm0, DWORD PTR [edx+356]
	movss	DWORD PTR _dz$7[ebp], xmm0

; 3727 : 		float deltaEl = (float)atan2(-dz,sqrt(dx*dx+dy*dy));

	movss	xmm0, DWORD PTR _dx$23[ebp]
	mulss	xmm0, DWORD PTR _dx$23[ebp]
	movss	xmm1, DWORD PTR _dy$22[ebp]
	mulss	xmm1, DWORD PTR _dy$22[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	movss	xmm0, DWORD PTR _dz$7[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _deltaEl$5[ebp]

; 3728 : 
; 3729 : 		float taz,tel; // target
; 3730 : 		float tx = groundTargetPtr->BaseData()->XPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _tx$13[ebp]

; 3731 : 		float ty = groundTargetPtr->BaseData()->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _ty$16[ebp]

; 3732 : 		float tz = groundTargetPtr->BaseData()->ZPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _tz$3[ebp]

; 3733 : 
; 3734 : 		TargetAzEl(self,tx,ty,tz,taz,tel);

	lea	eax, DWORD PTR _tel$8[ebp]
	push	eax
	lea	ecx, DWORD PTR _taz$27[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _tz$3[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ty$16[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _tx$13[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	?TargetAzEl@@YAXPAVFalconEntity@@MMMAAM1@Z ; TargetAzEl
	add	esp, 24					; 00000018H

; 3735 : 		
; 3736 : 		float tgtAltDelta = self->ZPos() - groundTargetPtr->BaseData()->ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1012[ebp]
	movss	xmm0, DWORD PTR tv1012[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	movss	DWORD PTR tv1486[ebp], xmm0
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1018[ebp]
	movss	xmm0, DWORD PTR tv1486[ebp]
	subss	xmm0, DWORD PTR tv1018[ebp]
	movss	DWORD PTR _tgtAltDelta$4[ebp], xmm0

; 3737 : 		float selfAlt	  = self->ZPos() - OTWDriver.GetGroundLevel( self->XPos(), self->YPos() ); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1023[ebp]
	movss	xmm0, DWORD PTR tv1023[ebp]
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movss	DWORD PTR tv1488[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	fstp	DWORD PTR tv1037[ebp]
	movss	xmm0, DWORD PTR tv1488[ebp]
	subss	xmm0, DWORD PTR tv1037[ebp]
	movss	DWORD PTR _selfAlt$26[ebp], xmm0

; 3738 : 
; 3739 : 
; 3740 : 		float iaz,iel; // predicted impact
; 3741 : 		float ix = self->FCC->groundImpactX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+936]
	movss	xmm0, DWORD PTR [edx+348]
	movss	DWORD PTR _ix$17[ebp], xmm0

; 3742 : 		float iy = self->FCC->groundImpactY;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+936]
	movss	xmm0, DWORD PTR [edx+352]
	movss	DWORD PTR _iy$19[ebp], xmm0

; 3743 : 		float iz = OTWDriver.GetGroundLevel( ix, iy);  // returned iz is zero when tz is much higher

	push	0
	push	ecx
	movss	xmm0, DWORD PTR _iy$19[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ix$17[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	fstp	DWORD PTR _iz$6[ebp]

; 3744 : 
; 3745 : 		TargetAzEl(self,ix,iy,iz,iaz,iel);

	lea	eax, DWORD PTR _iel$1[ebp]
	push	eax
	lea	ecx, DWORD PTR _iaz$2[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _iz$6[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _iy$19[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ix$17[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	?TargetAzEl@@YAXPAVFalconEntity@@MMMAAM1@Z ; TargetAzEl
	add	esp, 24					; 00000018H

; 3746 : 
; 3747 : 		float dxx = tx - self->XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1062[ebp]
	movss	xmm0, DWORD PTR _tx$13[ebp]
	subss	xmm0, DWORD PTR tv1062[ebp]
	movss	DWORD PTR _dxx$12[ebp], xmm0

; 3748 : 		float dyy = ty - self->YPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1068[ebp]
	movss	xmm0, DWORD PTR _ty$16[ebp]
	subss	xmm0, DWORD PTR tv1068[ebp]
	movss	DWORD PTR _dyy$15[ebp], xmm0

; 3749 : 		float dtaz = (float)atan2(dyy,dxx)*RTD;

	cvtss2sd xmm0, DWORD PTR _dxx$12[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _dyy$15[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv1075[ebp]
	movsd	xmm0, QWORD PTR tv1075[ebp]
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR _dtaz$21[ebp], xmm0

; 3750 : 		dtaz -= (self->Yaw()* RTD);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv1080[ebp]
	movss	xmm0, DWORD PTR tv1080[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	xmm1, DWORD PTR _dtaz$21[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _dtaz$21[ebp], xmm1

; 3751 : 
; 3752 : 		dxx = ix - self->XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1086[ebp]
	movss	xmm0, DWORD PTR _ix$17[ebp]
	subss	xmm0, DWORD PTR tv1086[ebp]
	movss	DWORD PTR _dxx$12[ebp], xmm0

; 3753 : 		dyy = iy - self->YPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1092[ebp]
	movss	xmm0, DWORD PTR _iy$19[ebp]
	subss	xmm0, DWORD PTR tv1092[ebp]
	movss	DWORD PTR _dyy$15[ebp], xmm0

; 3754 : 		float diaz = (float)atan2(dyy,dxx)*RTD;

	cvtss2sd xmm0, DWORD PTR _dxx$12[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _dyy$15[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv1099[ebp]
	movsd	xmm0, QWORD PTR tv1099[ebp]
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR _diaz$14[ebp], xmm0

; 3755 : 
; 3756 : 		diaz = 0.0f; // Cobra - missile projected impact should always be off the nose

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _diaz$14[ebp], xmm0

; 3757 : 
; 3758 : 		float atel;
; 3759 : 		atel = tel/2.0f;

	movss	xmm0, DWORD PTR _tel$8[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _atel$25[ebp], xmm0

; 3760 : 		// Pitch correction
; 3761 : 		atel -= g_fRocketPitchFactor * DTR;

	movss	xmm0, DWORD PTR ?g_fRocketPitchFactor@@3MA
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	xmm1, DWORD PTR _atel$25[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _atel$25[ebp], xmm1

; 3762 : 
; 3763 : 		float diffel = FabsF(deltaEl);

	push	ecx
	movss	xmm0, DWORD PTR _deltaEl$5[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FabsF@@YAMM@Z				; FabsF
	add	esp, 4
	fstp	DWORD PTR _diffel$11[ebp]

; 3764 : 		float diffaz = FabsF(dtaz - diaz)*DTR;

	movss	xmm0, DWORD PTR _dtaz$21[ebp]
	subss	xmm0, DWORD PTR _diaz$14[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FabsF@@YAMM@Z				; FabsF
	add	esp, 4
	fstp	DWORD PTR tv1113[ebp]
	movss	xmm0, DWORD PTR tv1113[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR _diffaz$9[ebp], xmm0

; 3765 : 		float angle = SqrtF(diffel * diffel + diffaz * diffaz);

	movss	xmm0, DWORD PTR _diffel$11[ebp]
	mulss	xmm0, DWORD PTR _diffel$11[ebp]
	movss	xmm1, DWORD PTR _diffaz$9[ebp]
	mulss	xmm1, DWORD PTR _diffaz$9[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtF@@YAMM@Z				; SqrtF
	add	esp, 4
	fstp	DWORD PTR _angle$18[ebp]

; 3766 : 
; 3767 : 		if( selfAlt > -400 )     // REALLY avoid ground

	movss	xmm0, DWORD PTR _selfAlt$26[ebp]
	comiss	xmm0, DWORD PTR __real@c3c80000
	jbe	$LN78@FireRocket

; 3768 : 		{
; 3769 : 			if (fp && self->IsPlayer())

	cmp	DWORD PTR ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A, 0
	je	SHORT $LN77@FireRocket
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN77@FireRocket

; 3770 : 				fprintf(fp,"Way Too Low\n");

	push	OFFSET ??_C@_0N@PEIHJIIA@Way?5Too?5Low?6?$AA@
	mov	ecx, DWORD PTR ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A
	push	ecx
	call	_fprintf
	add	esp, 8
$LN77@FireRocket:

; 3771 : 			MoveStick(pStick, 45 * DTR, 45 * DTR);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	call	?MoveStick@@YAXAAMMM@Z			; MoveStick

; 3772 : 			MoveStick(rStick, 0,        20 * DTR);

	add	esp, 8
	movss	xmm0, DWORD PTR __real@3eb2b8c1
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	call	?MoveStick@@YAXAAMMM@Z			; MoveStick
	add	esp, 12					; 0000000cH

; 3773 : 			return 1;

	mov	eax, 1
	jmp	$LN81@FireRocket
$LN78@FireRocket:

; 3774 : 		}
; 3775 : 
; 3776 : 		if( tgtAltDelta > -1500   ||  // atleast 500" above target
; 3777 : 		    selfAlt     > -1500 )     // avoid ground

	movss	xmm0, DWORD PTR _tgtAltDelta$4[ebp]
	comiss	xmm0, DWORD PTR __real@c4bb8000
	ja	SHORT $LN75@FireRocket
	movss	xmm0, DWORD PTR _selfAlt$26[ebp]
	comiss	xmm0, DWORD PTR __real@c4bb8000
	jbe	$LN76@FireRocket
$LN75@FireRocket:

; 3778 : 		{
; 3779 : 			if (fp && self->IsPlayer())

	cmp	DWORD PTR ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A, 0
	je	SHORT $LN74@FireRocket
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN74@FireRocket

; 3780 : 				fprintf(fp,"Too Low\n");

	push	OFFSET ??_C@_08BAMGLEEE@Too?5Low?6?$AA@
	mov	edx, DWORD PTR ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A
	push	edx
	call	_fprintf
	add	esp, 8
$LN74@FireRocket:

; 3781 : 			MoveStick(pStick, 45 * DTR, 20 * DTR);

	push	ecx
	movss	xmm0, DWORD PTR __real@3eb2b8c1
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	?MoveStick@@YAXAAMMM@Z			; MoveStick

; 3782 : 			MoveStick(rStick, 0,        20 * DTR);

	add	esp, 8
	movss	xmm0, DWORD PTR __real@3eb2b8c1
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	call	?MoveStick@@YAXAAMMM@Z			; MoveStick
	add	esp, 12					; 0000000cH

; 3783 : 			return 1;

	mov	eax, 1
	jmp	$LN81@FireRocket
$LN76@FireRocket:

; 3784 : 		}
; 3785 : 
; 3786 : 		dx = (float)fabs( self->XPos() - tx );

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1154[ebp]
	movss	xmm0, DWORD PTR tv1154[ebp]
	subss	xmm0, DWORD PTR _tx$13[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _dx$23[ebp]

; 3787 : 		dy = (float)fabs( self->YPos() - ty );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1162[ebp]
	movss	xmm0, DWORD PTR tv1162[ebp]
	subss	xmm0, DWORD PTR _ty$16[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _dy$22[ebp]

; 3788 : 		approxRange = (float)sqrt( dx * dx + dy * dy );

	movss	xmm0, DWORD PTR _dx$23[ebp]
	mulss	xmm0, DWORD PTR _dx$23[ebp]
	movss	xmm1, DWORD PTR _dy$22[ebp]
	mulss	xmm1, DWORD PTR _dy$22[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _approxRange$[ebp]

; 3789 : 
; 3790 : 		switch(rocketMnvr)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR tv417[ebp], edx
	cmp	DWORD PTR tv417[ebp], 3
	ja	$LN72@FireRocket
	mov	eax, DWORD PTR tv417[ebp]
	jmp	DWORD PTR $LN85@FireRocket[eax*4]
$LN71@FireRocket:

; 3791 : 		{
; 3792 : 		case RocketFiring:
; 3793 : 			if (fp && self->IsPlayer())

	cmp	DWORD PTR ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A, 0
	je	SHORT $LN70@FireRocket
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN70@FireRocket

; 3794 : 				fprintf(fp,"RocketFiring\n");

	push	OFFSET ??_C@_0O@DIIALKLP@RocketFiring?6?$AA@
	mov	edx, DWORD PTR ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A
	push	edx
	call	_fprintf
	add	esp, 8
$LN70@FireRocket:

; 3795 : 			rocketTimer -= SimLibMajorFrameTime;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+48]
	subss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+48], xmm0

; 3796 : 			// wait for the SMS to finish the salvo, then Jink
; 3797 : 			if(!self->Sms->IsFiringRockets() && (rocketTimer < 0))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+940]
	call	?IsFiringRockets@SMSClass@@QAEHXZ	; SMSClass::IsFiringRockets
	test	eax, eax
	jne	SHORT $LN69@FireRocket
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx+48]
	jbe	SHORT $LN69@FireRocket

; 3798 : 			{
; 3799 : 				rocketMnvr = RocketJink;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], 2

; 3800 : 				rocketTimer = 10; // was 5 sec

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [eax+48], xmm0

; 3801 : 			}
; 3802 : 			else

	jmp	SHORT $LN68@FireRocket
$LN69@FireRocket:

; 3803 : 				return 1; // Cobra - let's finish firing this salvo.

	mov	eax, 1
	jmp	$LN81@FireRocket
$LN68@FireRocket:

; 3804 : 			break;

	jmp	$LN72@FireRocket
$LN67@FireRocket:

; 3805 : 
; 3806 : 		case RocketJink:
; 3807 : 			if (fp && self->IsPlayer())

	cmp	DWORD PTR ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A, 0
	je	SHORT $LN66@FireRocket
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN66@FireRocket

; 3808 : 				fprintf(fp,"RocketJink\n");

	push	OFFSET ??_C@_0M@KMPJBFFN@RocketJink?6?$AA@
	mov	edx, DWORD PTR ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A
	push	edx
	call	_fprintf
	add	esp, 8
$LN66@FireRocket:

; 3809 : 			//if(SimLibElapsedTime & 4096)
; 3810 : 				//MoveStick(rStick, 45 * DTR , 45 * DTR); // Cobra - was 90
; 3811 : 			//else
; 3812 : 				//MoveStick(rStick, -45 * DTR , 45 * DTR); // Cobra - was -90
; 3813 : 			if(SimLibElapsedTime & 8192)

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	and	eax, 8192				; 00002000H
	je	SHORT $LN65@FireRocket

; 3814 : 				MoveStick(rStick, 40 * DTR , 10 * DTR);

	push	ecx
	movss	xmm0, DWORD PTR __real@3e32b8c1
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f32b8c1
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	call	?MoveStick@@YAXAAMMM@Z			; MoveStick
	add	esp, 12					; 0000000cH

; 3815 : 			else

	jmp	SHORT $LN64@FireRocket
$LN65@FireRocket:

; 3816 : 				MoveStick(rStick, -40 * DTR , 10 * DTR);

	push	ecx
	movss	xmm0, DWORD PTR __real@3e32b8c1
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf32b8c1
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	call	?MoveStick@@YAXAAMMM@Z			; MoveStick
	add	esp, 12					; 0000000cH
$LN64@FireRocket:

; 3817 : 
; 3818 : 			MoveStick(pStick, 10 * DTR, 5 * DTR);

	push	ecx
	movss	xmm0, DWORD PTR __real@3db2b8c1
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3e32b8c1
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	?MoveStick@@YAXAAMMM@Z			; MoveStick
	add	esp, 12					; 0000000cH

; 3819 : 			//MoveStick(pStick, 30 * DTR, 20 * DTR); // Cobra - was 0
; 3820 : 
; 3821 : 			rocketTimer -= SimLibMajorFrameTime;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+48]
	subss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+48], xmm0

; 3822 : 			if(rocketTimer < 0)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+48]
	jbe	SHORT $LN63@FireRocket

; 3823 : 			{
; 3824 : 				rocketMnvr = RocketFlyout;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], 3

; 3825 : 				rocketTimer = 60; // Cobra - was 10

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42700000
	movss	DWORD PTR [edx+48], xmm0
$LN63@FireRocket:

; 3826 : 			}
; 3827 : 			return 1;

	mov	eax, 1
	jmp	$LN81@FireRocket

; 3828 : 			break;

	jmp	$LN72@FireRocket
$LN62@FireRocket:

; 3829 : 
; 3830 : 		case RocketFlyout:
; 3831 : 			// just fly level for a few seconds
; 3832 : 			if (fp && self->IsPlayer())

	cmp	DWORD PTR ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A, 0
	je	SHORT $LN61@FireRocket
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN61@FireRocket

; 3833 : 				fprintf(fp,"RocketFlyOut Alt: %f  Range: %f\n", -selfAlt, approxRange*FT_TO_NM);

	movss	xmm0, DWORD PTR _approxRange$[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _selfAlt$26[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0CB@JNHJEDCH@RocketFlyOut?5Alt?3?5?$CFf?5?5Range?3?5?$CFf?6@
	mov	ecx, DWORD PTR ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A
	push	ecx
	call	_fprintf
	add	esp, 24					; 00000018H
$LN61@FireRocket:

; 3834 : 			MoveStick(rStick, 0 * DTR , 20 * DTR);

	push	ecx
	movss	xmm0, DWORD PTR __real@3eb2b8c1
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	call	?MoveStick@@YAXAAMMM@Z			; MoveStick

; 3835 : 			if (FabsF(selfAlt) >= self->GetA2GGunRocketAlt())

	add	esp, 8
	movss	xmm0, DWORD PTR _selfAlt$26[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FabsF@@YAMM@Z				; FabsF
	add	esp, 4
	fstp	DWORD PTR tv1233[ebp]
	movss	xmm0, DWORD PTR tv1233[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv1490[ebp], xmm0
	call	?GetA2GGunRocketAlt@AircraftClass@@QAEMXZ ; AircraftClass::GetA2GGunRocketAlt
	fstp	DWORD PTR tv1238[ebp]
	movss	xmm0, DWORD PTR tv1490[ebp]
	comiss	xmm0, DWORD PTR tv1238[ebp]
	jb	SHORT $LN60@FireRocket

; 3836 : 				MoveStick(pStick, 0, 10 * DTR);

	push	ecx
	movss	xmm0, DWORD PTR __real@3e32b8c1
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	call	?MoveStick@@YAXAAMMM@Z			; MoveStick
	add	esp, 12					; 0000000cH

; 3837 : 			else

	jmp	SHORT $LN59@FireRocket
$LN60@FireRocket:

; 3838 : 				MoveStick(pStick, 20 * DTR, 20 * DTR); // Cobra - was 0

	push	ecx
	movss	xmm0, DWORD PTR __real@3eb2b8c1
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3eb2b8c1
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	call	?MoveStick@@YAXAAMMM@Z			; MoveStick
	add	esp, 12					; 0000000cH
$LN59@FireRocket:

; 3839 : 
; 3840 : 			rocketTimer -= SimLibMajorFrameTime;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+48]
	subss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+48], xmm0

; 3841 : 			float flyout;
; 3842 : 			if (slowMover)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+560], 0
	je	SHORT $LN58@FireRocket

; 3843 : 				flyout = g_fAGSlowFlyoutRange;

	movss	xmm0, DWORD PTR ?g_fAGSlowFlyoutRange@@3MA
	movss	DWORD PTR _flyout$10[ebp], xmm0

; 3844 : 			else

	jmp	SHORT $LN57@FireRocket
$LN58@FireRocket:

; 3845 : 				flyout = g_fAGFlyoutRange;

	movss	xmm0, DWORD PTR ?g_fAGFlyoutRange@@3MA
	movss	DWORD PTR _flyout$10[ebp], xmm0
$LN57@FireRocket:

; 3846 : 			if(((approxRange > flyout * NM_TO_FT) && (FabsF(selfAlt) > self->GetA2GGunRocketAlt())))

	movss	xmm0, DWORD PTR _flyout$10[ebp]
	mulss	xmm0, DWORD PTR __real@45bde1b0
	movss	xmm1, DWORD PTR _approxRange$[ebp]
	comiss	xmm1, xmm0
	jbe	$LN56@FireRocket
	push	ecx
	movss	xmm0, DWORD PTR _selfAlt$26[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FabsF@@YAMM@Z				; FabsF
	add	esp, 4
	fstp	DWORD PTR tv1262[ebp]
	movss	xmm0, DWORD PTR tv1262[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv1492[ebp], xmm0
	call	?GetA2GGunRocketAlt@AircraftClass@@QAEMXZ ; AircraftClass::GetA2GGunRocketAlt
	fstp	DWORD PTR tv1267[ebp]
	movss	xmm0, DWORD PTR tv1492[ebp]
	comiss	xmm0, DWORD PTR tv1267[ebp]
	jbe	SHORT $LN56@FireRocket

; 3847 : 			{
; 3848 : 		    SetGroundTarget( NULL ); // Cobra - Get another target

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget

; 3849 : 				if (!isWing)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jne	SHORT $LN55@FireRocket

; 3850 : 					SelectGroundTarget(TARGET_ANYTHING);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectGroundTarget@DigitalBrain@@IAEXH@Z ; DigitalBrain::SelectGroundTarget

; 3851 : 				else

	jmp	SHORT $LN54@FireRocket
$LN55@FireRocket:

; 3852 : 					AiRunTargetSelection();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiRunTargetSelection@DigitalBrain@@AAEXXZ ; DigitalBrain::AiRunTargetSelection
$LN54@FireRocket:

; 3853 : 				//else
; 3854 : 					//SelectGroundTarget(TARGET_ANYTHING);
; 3855 : 				rocketMnvr = RocketFlyToTgt;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], 0

; 3856 : 				rocketTimer = 60; // 1 minute for something to happen

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42700000
	movss	DWORD PTR [eax+48], xmm0

; 3857 : 				waitingForShot = SimLibElapsedTime + 1;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+496], ecx
$LN56@FireRocket:

; 3858 : 			}
; 3859 : 			return 1;

	mov	eax, 1
	jmp	$LN81@FireRocket

; 3860 : 			break;

	jmp	$LN72@FireRocket
$LN53@FireRocket:

; 3861 : 			
; 3862 : 		case  RocketFlyToTgt:
; 3863 : 			rocketTimer -= SimLibMajorFrameTime;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+48]
	subss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+48], xmm0

; 3864 : 			if(rocketTimer < 0 )

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [edx+48]
	jbe	SHORT $LN49@FireRocket

; 3865 : 			{
; 3866 : 				if( fabs(taz) > 4 * DTR || approxRange < 6000.0f) 

	push	ecx
	movss	xmm0, DWORD PTR _taz$27[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1285[ebp]
	movss	xmm0, DWORD PTR tv1285[ebp]
	comiss	xmm0, DWORD PTR __real@3d8efa34
	ja	SHORT $LN50@FireRocket
	movss	xmm0, DWORD PTR __real@45bb8000
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	SHORT $LN51@FireRocket
$LN50@FireRocket:

; 3867 : 				{
; 3868 : 					rocketMnvr = RocketFlyout;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 3

; 3869 : 					rocketTimer = 60; 

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42700000
	movss	DWORD PTR [ecx+48], xmm0

; 3870 : 				}
; 3871 : 				else

	jmp	SHORT $LN49@FireRocket
$LN51@FireRocket:

; 3872 : 				{
; 3873 : 					rocketTimer = 5;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR [edx+48], xmm0
$LN49@FireRocket:
$LN72@FireRocket:

; 3874 : 				}
; 3875 : 			}
; 3876 : 			break;
; 3877 : 		}
; 3878 : 
; 3879 : 
; 3880 : 		MonoPrint("noSolution = %d",self->FCC->noSolution);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+936]
	movsx	eax, BYTE PTR [edx+193]
	push	eax
	push	OFFSET ??_C@_0BA@NAONBMMI@noSolution?5?$DN?5?$CFd?$AA@
	call	_MonoPrint

; 3881 : 
; 3882 : 		if( fabs(taz) > azRough ) // 10 degrees

	add	esp, 4
	movss	xmm0, DWORD PTR _taz$27[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1298[ebp]
	movss	xmm0, DWORD PTR tv1298[ebp]
	comiss	xmm0, DWORD PTR ?azRough@?7??FireRocket@DigitalBrain@@IAEHMM@Z@4MA
	jbe	SHORT $LN48@FireRocket

; 3883 : 		{
; 3884 : 		}
; 3885 : 		else

	jmp	SHORT $LN44@FireRocket
$LN48@FireRocket:

; 3886 : 		{
; 3887 : 			rmode = 1; // align pipper

	mov	DWORD PTR _rmode$20[ebp], 1

; 3888 : 
; 3889 : 			if( approxRange < 34000 ) // Cobra - was 15000

	movss	xmm0, DWORD PTR __real@4704d000
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	SHORT $LN46@FireRocket

; 3890 : 			{
; 3891 : 				pmode = 1; // align pipper

	mov	DWORD PTR _pmode$24[ebp], 1

; 3892 : 			}
; 3893 : 			else

	jmp	SHORT $LN44@FireRocket
$LN46@FireRocket:

; 3894 : 			if( approxRange < 75000 )

	movss	xmm0, DWORD PTR __real@47927c00
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	SHORT $LN44@FireRocket

; 3895 : 			{
; 3896 : 				pmode = 0; // basic guidance

	mov	DWORD PTR _pmode$24[ebp], 0
$LN44@FireRocket:

; 3897 : 			}
; 3898 : 		}
; 3899 : 
; 3900 : 		if(pmode == 0 || rocketMnvr == RocketFlyout)

	cmp	DWORD PTR _pmode$24[ebp], 0
	je	SHORT $LN42@FireRocket
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+44], 3
	jne	$LN43@FireRocket
$LN42@FireRocket:

; 3901 : 		{
; 3902 : 				if (fp && self->IsPlayer())

	cmp	DWORD PTR ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A, 0
	je	SHORT $LN41@FireRocket
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN41@FireRocket

; 3903 : 					fprintf(fp,"Pitch: To Attack Alt %f\n", -selfAlt);

	movss	xmm0, DWORD PTR _selfAlt$26[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BJ@BJNDFIH@Pitch?3?5To?5Attack?5Alt?5?$CFf?6?$AA@
	mov	eax, DWORD PTR ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H
$LN41@FireRocket:

; 3904 : 			// move to attack alt
; 3905 : 			float stick = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _stick$28[ebp], xmm0

; 3906 : 			float diff = (-selfAlt) - self->GetA2GGunRocketAlt();

	movss	xmm0, DWORD PTR _selfAlt$26[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movss	DWORD PTR tv1494[ebp], xmm0
	call	?GetA2GGunRocketAlt@AircraftClass@@QAEMXZ ; AircraftClass::GetA2GGunRocketAlt
	fstp	DWORD PTR tv1313[ebp]
	movss	xmm0, DWORD PTR tv1494[ebp]
	subss	xmm0, DWORD PTR tv1313[ebp]
	movss	DWORD PTR _diff$29[ebp], xmm0

; 3907 : 
; 3908 : 			if (fabs(selfAlt) >  self->GetA2GGunRocketAlt())

	push	ecx
	movss	xmm0, DWORD PTR _selfAlt$26[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1319[ebp]
	movss	xmm0, DWORD PTR tv1319[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	movss	DWORD PTR tv1496[ebp], xmm0
	call	?GetA2GGunRocketAlt@AircraftClass@@QAEMXZ ; AircraftClass::GetA2GGunRocketAlt
	fstp	DWORD PTR tv1324[ebp]
	movss	xmm0, DWORD PTR tv1496[ebp]
	comiss	xmm0, DWORD PTR tv1324[ebp]
	jbe	SHORT $LN40@FireRocket

; 3909 : 				stick = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _stick$28[ebp], xmm0
	jmp	$LN26@FireRocket
$LN40@FireRocket:

; 3910 : 			else if(diff < -250.0f) // too low

	movss	xmm0, DWORD PTR __real@c37a0000
	comiss	xmm0, DWORD PTR _diff$29[ebp]
	jbe	SHORT $LN38@FireRocket

; 3911 : 				stick = 35 * DTR; // Cobra - was 10

	movss	xmm0, DWORD PTR __real@3f1c61a9
	movss	DWORD PTR _stick$28[ebp], xmm0

; 3912 : 			else

	jmp	$LN26@FireRocket
$LN38@FireRocket:

; 3913 : 			if(diff < -150.0f) // too low

	movss	xmm0, DWORD PTR __real@c3160000
	comiss	xmm0, DWORD PTR _diff$29[ebp]
	jbe	SHORT $LN36@FireRocket

; 3914 : 				stick = 5 * DTR;

	movss	xmm0, DWORD PTR __real@3db2b8c1
	movss	DWORD PTR _stick$28[ebp], xmm0

; 3915 : 			else

	jmp	$LN26@FireRocket
$LN36@FireRocket:

; 3916 : 				if(diff > 1500.0f)

	movss	xmm0, DWORD PTR _diff$29[ebp]
	comiss	xmm0, DWORD PTR __real@44bb8000
	jbe	SHORT $LN34@FireRocket

; 3917 : 					stick = -30 * DTR; // Cobra - 45

	movss	xmm0, DWORD PTR __real@bf060a91
	movss	DWORD PTR _stick$28[ebp], xmm0

; 3918 : 				else

	jmp	SHORT $LN26@FireRocket
$LN34@FireRocket:

; 3919 : 					if(diff > 250.0f) // to high

	movss	xmm0, DWORD PTR _diff$29[ebp]
	comiss	xmm0, DWORD PTR __real@437a0000
	jbe	SHORT $LN32@FireRocket

; 3920 : 						stick = -10 * DTR;

	movss	xmm0, DWORD PTR __real@be32b8c1
	movss	DWORD PTR _stick$28[ebp], xmm0

; 3921 : 				else

	jmp	SHORT $LN26@FireRocket
$LN32@FireRocket:

; 3922 : 					if(diff > 150.0f) // to high

	movss	xmm0, DWORD PTR _diff$29[ebp]
	comiss	xmm0, DWORD PTR __real@43160000
	jbe	SHORT $LN30@FireRocket

; 3923 : 						stick = -5 * DTR;

	movss	xmm0, DWORD PTR __real@bdb2b8c1
	movss	DWORD PTR _stick$28[ebp], xmm0

; 3924 : 				else

	jmp	SHORT $LN26@FireRocket
$LN30@FireRocket:

; 3925 : 					if(diff > 0.0f) // close

	movss	xmm0, DWORD PTR _diff$29[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN28@FireRocket

; 3926 : 						stick = -1 * DTR;

	movss	xmm0, DWORD PTR __real@bc8efa34
	movss	DWORD PTR _stick$28[ebp], xmm0

; 3927 : 				else

	jmp	SHORT $LN26@FireRocket
$LN28@FireRocket:

; 3928 : 					if(diff < 0.0f) // close

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _diff$29[ebp]
	jbe	SHORT $LN26@FireRocket

; 3929 : 						stick = 1 * DTR;

	movss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR _stick$28[ebp], xmm0
$LN26@FireRocket:

; 3930 : 
; 3931 : 			diff = fabsf(diff) - 250.0f;

	push	ecx
	movss	xmm0, DWORD PTR _diff$29[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR tv1345[ebp]
	movss	xmm0, DWORD PTR tv1345[ebp]
	subss	xmm0, DWORD PTR __real@437a0000
	movss	DWORD PTR _diff$29[ebp], xmm0

; 3932 : 			diff = min(diff, 1000.0f) / 1000.0f;

	movss	xmm0, DWORD PTR __real@447a0000
	comiss	xmm0, DWORD PTR _diff$29[ebp]
	jbe	SHORT $LN83@FireRocket
	movss	xmm0, DWORD PTR _diff$29[ebp]
	movss	DWORD PTR tv656[ebp], xmm0
	jmp	SHORT $LN84@FireRocket
$LN83@FireRocket:
	movss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR tv656[ebp], xmm0
$LN84@FireRocket:
	movss	xmm0, DWORD PTR tv656[ebp]
	divss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR _diff$29[ebp], xmm0

; 3933 : 
; 3934 : 			stick *= diff;

	movss	xmm0, DWORD PTR _stick$28[ebp]
	mulss	xmm0, DWORD PTR _diff$29[ebp]
	movss	DWORD PTR _stick$28[ebp], xmm0

; 3935 : 
; 3936 : 			MoveStick(pStick, stick, 20 * DTR); // Cobra - was 20

	push	ecx
	movss	xmm0, DWORD PTR __real@3eb2b8c1
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _stick$28[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	?MoveStick@@YAXAAMMM@Z			; MoveStick
	add	esp, 12					; 0000000cH
$LN43@FireRocket:

; 3937 : 		}
; 3938 : 
; 3939 : 		if(pmode == 1)

	cmp	DWORD PTR _pmode$24[ebp], 1
	jne	$LN16@FireRocket

; 3940 : 		{
; 3941 : 			//fprintf(fp,"Pitch: Pipper To Tgt\n");
; 3942 : 
; 3943 : 			if (fp)

	cmp	DWORD PTR ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A, 0
	je	$LN24@FireRocket

; 3944 : 			{
; 3945 : 				if (self->IsPlayer())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	$LN23@FireRocket

; 3946 : 				fprintf(fp,"**ME** hdg %f atel %f pitch %f tel %f  taz %f  dtaz %f  iel %f  iaz %f  diaz %f  ang %f  Rng %f  rStk %f  pStk %f \n",
; 3947 : 							self->Yaw()*RTD, atel*RTD, self->Pitch()*RTD, tel*RTD, taz*RTD, dtaz, iel*RTD, iaz*RTD, diaz, angle*RTD, approxRange / NM_TO_FT, rStick*RTD, pStick*RTD );

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+28]
	mulss	xmm0, DWORD PTR __real@42652ee1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR __real@42652ee1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _approxRange$[ebp]
	divss	xmm0, DWORD PTR __real@45bde1b0
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _angle$18[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _diaz$14[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _iaz$2[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _iel$1[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _dtaz$21[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _taz$27[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _tel$8[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	fstp	DWORD PTR tv1372[ebp]
	movss	xmm0, DWORD PTR tv1372[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _atel$25[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv1378[ebp]
	movss	xmm0, DWORD PTR tv1378[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0HE@BDJBNFGF@?$CK?$CKME?$CK?$CK?5hdg?5?$CFf?5atel?5?$CFf?5pitch?5?$CFf?5t@
	mov	eax, DWORD PTR ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A
	push	eax
	call	_fprintf
	add	esp, 112				; 00000070H
$LN23@FireRocket:

; 3948 : 				//else
; 3949 : 				//fprintf(fp,"*WING* hdg %f ata %f pitch %f tel %f  taz %f  dtaz %f  iel %f  iaz %f  diaz %f  ang %f  Rng %f  rStk %f  pStk %f \n",
; 3950 : 					//		self->Yaw()*RTD, ata*RTD, self->Pitch()*RTD, tel*RTD, taz*RTD, dtaz, iel*RTD, iaz*RTD, diaz, angle*RTD, approxRange / NM_TO_FT, rStick*RTD, pStick*RTD );
; 3951 : 				fflush(fp);

	mov	ecx, DWORD PTR ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A
	push	ecx
	call	_fflush
	add	esp, 4
$LN24@FireRocket:

; 3952 : 			}
; 3953 : 
; 3954 : 			if (FabsF(selfAlt) < 1500.0f && rocketMnvr == RocketFlyToTgt) // Cobra - was 1500

	push	ecx
	movss	xmm0, DWORD PTR _selfAlt$26[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FabsF@@YAMM@Z				; FabsF
	add	esp, 4
	fstp	DWORD PTR tv1399[ebp]
	movss	xmm0, DWORD PTR __real@44bb8000
	comiss	xmm0, DWORD PTR tv1399[ebp]
	jbe	SHORT $LN22@FireRocket
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+44], 0
	jne	SHORT $LN22@FireRocket

; 3955 : 			{
; 3956 : 				if (fp && self->IsPlayer())

	cmp	DWORD PTR ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A, 0
	je	SHORT $LN21@FireRocket
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN21@FireRocket

; 3957 : 					fprintf(fp,"Too Close\n");

	push	OFFSET ??_C@_0L@NKJBDNAB@Too?5Close?6?$AA@
	mov	ecx, DWORD PTR ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A
	push	ecx
	call	_fprintf
	add	esp, 8
$LN21@FireRocket:

; 3958 : 				rocketMnvr = RocketFlyout;		

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], 3

; 3959 : 				rocketTimer = 60; // Cobra - was 10 sec.

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42700000
	movss	DWORD PTR [eax+48], xmm0

; 3960 : 				rmode = 0;

	mov	DWORD PTR _rmode$20[ebp], 0

; 3961 : 				pmode = 0;

	mov	DWORD PTR _pmode$24[ebp], 0

; 3962 : 			}
; 3963 : 			else

	jmp	$LN16@FireRocket
$LN22@FireRocket:

; 3964 : 			{
; 3965 : 				if (atel < 0.0f)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _atel$25[ebp]
	jbe	SHORT $LN19@FireRocket

; 3966 : 					MoveStick(pStick, atel-(g_fRocketPitchCorr * DTR), 20 * DTR); // g_fRocketPitchCorr was 1.7

	push	ecx
	movss	xmm0, DWORD PTR __real@3eb2b8c1
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?g_fRocketPitchCorr@@3MA
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	xmm1, DWORD PTR _atel$25[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	call	?MoveStick@@YAXAAMMM@Z			; MoveStick
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN16@FireRocket
$LN19@FireRocket:

; 3967 : 				else if (atel > 0.0f)

	movss	xmm0, DWORD PTR _atel$25[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN17@FireRocket

; 3968 : 					MoveStick(pStick, atel+(g_fRocketPitchCorr * DTR), 20 * DTR);

	push	ecx
	movss	xmm0, DWORD PTR __real@3eb2b8c1
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?g_fRocketPitchCorr@@3MA
	mulss	xmm0, DWORD PTR __real@3c8efa34
	addss	xmm0, DWORD PTR _atel$25[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	call	?MoveStick@@YAXAAMMM@Z			; MoveStick
	add	esp, 12					; 0000000cH

; 3969 : 				else

	jmp	SHORT $LN16@FireRocket
$LN17@FireRocket:

; 3970 : 					MoveStick(pStick, atel, 20 * DTR);

	push	ecx
	movss	xmm0, DWORD PTR __real@3eb2b8c1
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _atel$25[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	?MoveStick@@YAXAAMMM@Z			; MoveStick
	add	esp, 12					; 0000000cH
$LN16@FireRocket:

; 3971 : 			}
; 3972 : 		}
; 3973 : 
; 3974 : 		if(rmode == 0  && rocketMnvr == RocketFlyToTgt )

	cmp	DWORD PTR _rmode$20[ebp], 0
	jne	$LN11@FireRocket
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	jne	$LN11@FireRocket

; 3975 : 		{
; 3976 : 			if (fp && self->IsPlayer())

	cmp	DWORD PTR ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A, 0
	je	SHORT $LN14@FireRocket
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN14@FireRocket

; 3977 : 				fprintf(fp,"Roll: To Tgt Direction\n");

	push	OFFSET ??_C@_0BI@PGBJGCL@Roll?3?5To?5Tgt?5Direction?6?$AA@
	mov	eax, DWORD PTR ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A
	push	eax
	call	_fprintf
	add	esp, 8
$LN14@FireRocket:

; 3978 : 			if(taz > azRough)

	movss	xmm0, DWORD PTR _taz$27[ebp]
	comiss	xmm0, DWORD PTR ?azRough@?7??FireRocket@DigitalBrain@@IAEHMM@Z@4MA
	jbe	SHORT $LN13@FireRocket

; 3979 : 			{
; 3980 : 				MoveStick(rStick, 60 * DTR, 45 * DTR); 

	push	ecx
	movss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f860a91
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	call	?MoveStick@@YAXAAMMM@Z			; MoveStick
	add	esp, 12					; 0000000cH

; 3981 : 			}
; 3982 : 			else

	jmp	SHORT $LN11@FireRocket
$LN13@FireRocket:

; 3983 : 			if(taz < -azRough)

	movss	xmm0, DWORD PTR ?azRough@?7??FireRocket@DigitalBrain@@IAEHMM@Z@4MA
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, DWORD PTR _taz$27[ebp]
	jbe	SHORT $LN11@FireRocket

; 3984 : 			{
; 3985 : 				MoveStick(rStick, -60 * DTR, 45 * DTR); 

	push	ecx
	movss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf860a91
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	call	?MoveStick@@YAXAAMMM@Z			; MoveStick
	add	esp, 12					; 0000000cH
$LN11@FireRocket:

; 3986 : 			}
; 3987 : 		}
; 3988 : 
; 3989 : 		if(rmode == 1)

	cmp	DWORD PTR _rmode$20[ebp], 1
	jne	$LN6@FireRocket

; 3990 : 		{
; 3991 : 			// Yaw pipper to tgt
; 3992 : 			if (fp && self->IsPlayer())

	cmp	DWORD PTR ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A, 0
	je	SHORT $LN9@FireRocket
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN9@FireRocket

; 3993 : 				fprintf(fp,"Roll: Pipper To Tgt taz: %f\n", taz * RTD);

	movss	xmm0, DWORD PTR _taz$27[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BN@OEJMGLIO@Roll?3?5Pipper?5To?5Tgt?5taz?3?5?$CFf?6?$AA@
	mov	ecx, DWORD PTR ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A
	push	ecx
	call	_fprintf
	add	esp, 16					; 00000010H
$LN9@FireRocket:

; 3994 : 			if (taz < 0.0f)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _taz$27[ebp]
	jbe	SHORT $LN8@FireRocket

; 3995 : 				MoveStick(rStick, taz-(0.5f * DTR), 90 * DTR);

	push	ecx
	movss	xmm0, DWORD PTR __real@3fc90fd9
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _taz$27[ebp]
	subss	xmm0, DWORD PTR __real@3c0efa34
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	call	?MoveStick@@YAXAAMMM@Z			; MoveStick
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN6@FireRocket
$LN8@FireRocket:

; 3996 : 			else if (taz > 0.0f)

	movss	xmm0, DWORD PTR _taz$27[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN6@FireRocket

; 3997 : 				MoveStick(rStick, taz+(0.5f * DTR), 90 * DTR);

	push	ecx
	movss	xmm0, DWORD PTR __real@3fc90fd9
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _taz$27[ebp]
	addss	xmm0, DWORD PTR __real@3c0efa34
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	call	?MoveStick@@YAXAAMMM@Z			; MoveStick
	add	esp, 12					; 0000000cH
$LN6@FireRocket:

; 3998 : 		}
; 3999 : 
; 4000 : 		// only fire or a bad pass can occur in FlyToTgt mode
; 4001 : 		if(rocketMnvr == RocketFlyToTgt)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	jne	$LN2@FireRocket

; 4002 : 		{
; 4003 : 			if( angle < 5.0f * DTR &&
; 4004 : 				waitingForShot <= SimLibElapsedTime && 
; 4005 : 				approxRange < 2.5f * NM_TO_FT ) // Cobra - was 2

	movss	xmm0, DWORD PTR __real@3db2b8c1
	comiss	xmm0, DWORD PTR _angle$18[ebp]
	jbe	$LN4@FireRocket
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+496]
	cmp	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	ja	$LN4@FireRocket
	movss	xmm0, DWORD PTR __real@466d5a1c
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	$LN4@FireRocket

; 4006 : 			{
; 4007 : 				MonoPrint("Firing");

	push	OFFSET ??_C@_06MHHKCODM@Firing?$AA@
	call	_MonoPrint
	add	esp, 4

; 4008 : 				SetFlag (MslFireFlag);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@BaseBrain@@QAEXH@Z		; BaseBrain::SetFlag

; 4009 : 				rocketMnvr = RocketFiring;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], 1

; 4010 : 				rocketTimer = 6;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40c00000
	movss	DWORD PTR [edx+48], xmm0

; 4011 : 				waitingForShot = SimLibElapsedTime + 60000;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 60000				; 0000ea60H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+496], eax

; 4012 : 				if (fp)

	cmp	DWORD PTR ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A, 0
	je	SHORT $LN3@FireRocket

; 4013 : 					fprintf(fp,"**** Fire Missiles **** Angle %f\n", angle*RTD);

	movss	xmm0, DWORD PTR _angle$18[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0CC@OEAEGKEN@?$CK?$CK?$CK?$CK?5Fire?5Missiles?5?$CK?$CK?$CK?$CK?5Angle?5?$CFf@
	mov	edx, DWORD PTR ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A
	push	edx
	call	_fprintf
	add	esp, 16					; 00000010H
$LN3@FireRocket:

; 4014 : 
; 4015 : 				return 1;

	mov	eax, 1
	jmp	SHORT $LN81@FireRocket
$LN4@FireRocket:

; 4016 : 			}
; 4017 : 
; 4018 : 			// bad pass, flyout and re-lineup 
; 4019 : 			if(	approxRange < 1500 && rocketMnvr == RocketFlyToTgt) //&& 

	movss	xmm0, DWORD PTR __real@44bb8000
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	SHORT $LN2@FireRocket
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN2@FireRocket

; 4020 : 				//fabs(taz)	> 45 * DTR	)
; 4021 : 			{
; 4022 : 				if (fp && self->IsPlayer())

	cmp	DWORD PTR ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A, 0
	je	SHORT $LN1@FireRocket
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN1@FireRocket

; 4023 : 					fprintf(fp,"Too Close\n");

	push	OFFSET ??_C@_0L@NKJBDNAB@Too?5Close?6?$AA@
	mov	edx, DWORD PTR ?fp@?1??FireRocket@DigitalBrain@@IAEHMM@Z@4PAU_iobuf@@A
	push	edx
	call	_fprintf
	add	esp, 8
$LN1@FireRocket:

; 4024 : 				rocketMnvr = RocketFlyout;		

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 3

; 4025 : 				rocketTimer = 60; // Cobra - was 10 sec.

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42700000
	movss	DWORD PTR [ecx+48], xmm0
$LN2@FireRocket:

; 4026 : 			}
; 4027 : 		}
; 4028 : 
; 4029 : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN81@FireRocket
$LN79@FireRocket:

; 4030 : 	}
; 4031 : 	MonoPrint("Rocket-Fail");

	push	OFFSET ??_C@_0M@JCNJJKHD@Rocket?9Fail?$AA@
	call	_MonoPrint
	add	esp, 4

; 4032 : 	return 0;	

	xor	eax, eax
$LN81@FireRocket:

; 4033 : 	
; 4034 : }

	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN85@FireRocket:
	DD	$LN53@FireRocket
	DD	$LN71@FireRocket
	DD	$LN67@FireRocket
	DD	$LN62@FireRocket
?FireRocket@DigitalBrain@@IAEHMM@Z ENDP			; DigitalBrain::FireRocket
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gndattck.cpp
_TEXT	SEGMENT
tv369 = -68						; size = 4
tv361 = -64						; size = 4
tv353 = -60						; size = 4
tv345 = -56						; size = 4
tv337 = -52						; size = 4
tv330 = -48						; size = 4
tv382 = -44						; size = 4
tv325 = -40						; size = 4
tv319 = -36						; size = 4
tv380 = -32						; size = 4
tv314 = -28						; size = 4
tv282 = -24						; size = 4
_Sms$ = -20						; size = 4
_range$1 = -16						; size = 4
_dy$2 = -12						; size = 4
_dx$3 = -8						; size = 4
_this$ = -4						; size = 4
_approxRange$ = 8					; size = 4
_ata$ = 12						; size = 4
?FireAGMissile@DigitalBrain@@IAEXMM@Z PROC		; DigitalBrain::FireAGMissile
; _this$ = ecx

; 3582 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 3583 : 		SMSClass* Sms = self->Sms;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+940]
	mov	DWORD PTR _Sms$[ebp], edx

; 3584 : 
; 3585 : 		//F4Assert (!Sms->curWeapon || Sms->curWeapon->IsMissile());
; 3586 : 
; 3587 : 		// Check Timer
; 3588 : 		// 2001-07-12 MODIFIED BY S.G. DON'T LAUNCH UNTIL CLOSE TO OUR ATTACK ALTITUDE
; 3589 : 		//	if ( SimLibElapsedTime >= waitingForShot )
; 3590 : 		if ( SimLibElapsedTime >= waitingForShot && self->ZPos() - trackZ >= -500.0f )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	ecx, DWORD PTR [eax+496]
	jb	$LN15@FireAGMiss
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv282[ebp]
	movss	xmm0, DWORD PTR tv282[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+156]
	comiss	xmm0, DWORD PTR __real@c3fa0000
	jb	$LN15@FireAGMiss

; 3591 : 		{
; 3592 : 			SetFlag (MslFireFlag);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@BaseBrain@@QAEXH@Z		; BaseBrain::SetFlag

; 3593 : 			if (hasHARM)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+188], 0
	je	SHORT $LN14@FireAGMiss

; 3594 : 			{
; 3595 : 				if (approxRange * FT_TO_NM > g_fAIHarmMaxRange) // Cobra - was 20.0f nm

	movss	xmm0, DWORD PTR _approxRange$[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	comiss	xmm0, DWORD PTR ?g_fAIHarmMaxRange@@3MA
	jbe	SHORT $LN13@FireAGMiss

; 3596 : 				{
; 3597 : 					waitingForShot = SimLibElapsedTime + 180000;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 180000				; 0002bf20H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+496], edx

; 3598 : 				}
; 3599 : 				else

	jmp	SHORT $LN12@FireAGMiss
$LN13@FireAGMiss:

; 3600 : 				{
; 3601 : 					waitingForShot = SimLibElapsedTime + 60000;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 60000				; 0000ea60H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+496], ecx
$LN12@FireAGMiss:

; 3602 : 				}

	jmp	SHORT $LN7@FireAGMiss
$LN14@FireAGMiss:

; 3603 : 			}
; 3604 : 			else if (hasBomb == TRUE+4) // Cobra - JSOW

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+180], 5
	jne	SHORT $LN10@FireAGMiss

; 3605 : 			{
; 3606 : 				if (approxRange * FT_TO_NM > g_fAIJSOWMaxRange) // Cobra - was 20.0f nm

	movss	xmm0, DWORD PTR _approxRange$[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	comiss	xmm0, DWORD PTR ?g_fAIJSOWMaxRange@@3MA
	jbe	SHORT $LN9@FireAGMiss

; 3607 : 				{
; 3608 : 					waitingForShot = SimLibElapsedTime + 60000;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 60000				; 0000ea60H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+496], ecx

; 3609 : 				}
; 3610 : 				else

	jmp	SHORT $LN8@FireAGMiss
$LN9@FireAGMiss:

; 3611 : 				{
; 3612 : 					waitingForShot = SimLibElapsedTime + 2000;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 2000				; 000007d0H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+496], eax
$LN8@FireAGMiss:

; 3613 : 				}
; 3614 : 			}
; 3615 : 			else//AGMs

	jmp	SHORT $LN7@FireAGMiss
$LN10@FireAGMiss:

; 3616 : 			{
; 3617 : 				waitingForShot = SimLibElapsedTime + 5000;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 5000				; 00001388H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+496], edx
$LN7@FireAGMiss:

; 3618 : 			}
; 3619 : 
; 3620 : 			// if we're out of missiles and bombs and our
; 3621 : 			// doctrine is look shoot look, we don't want to
; 3622 : 			// continue with guns/rockets only -- reset
; 3623 : 			// agDoctrine if this is the case
; 3624 : 			// 2001-05-03 MODIFIED BY S.G. WE STOP FIRING WHEN WE HAVE AN ODD NUMBER OF MISSILE LEFT (MEANT WE FIRED ONE ALREADY) THIS WILL LIMIT IT TO 2 MISSILES PER TARGET
; 3625 : 			//		if (Sms->NumCurrentWpn() == 1 )
; 3626 : 
; 3627 : 			if ((hasBomb != TRUE+4) && Sms->NumCurrentWpn() & 1 )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+180], 5
	je	$LN3@FireAGMiss
	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?NumCurrentWpn@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumCurrentWpn
	and	eax, 1
	je	$LN3@FireAGMiss

; 3628 : 			{	
; 3629 : 				hasRocket = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], 0

; 3630 : 				hasGun = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+196], 0

; 3631 : 				hasHARM = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+188], 0

; 3632 : 				hasAGMissile = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+184], 0

; 3633 : 
; 3634 : 				// Force a weapon/target selection
; 3635 : 				madeAGPass = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+260], 1

; 3636 : 				onStation = NotThereYet;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+132], 0

; 3637 : 
; 3638 : 				// 2001-06-01 ADDED BY S.G. THAT WAY, AI WILL KEEP GOING STRAIGHT FOR A SECOND BEFORE PULLING
; 3639 : 				missileShotTimer = SimLibElapsedTime + 1000;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 1000				; 000003e8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+472], edx

; 3640 : 				// END OF ADDED SECTION
; 3641 : 				// 2001-06-16 ADDED BY S.G. THAT WAY, AI WILL NOT RETURN TO THEIR IP 
; 3642 : 				// ONCE THEY FIRED BUT WILL GO "PERPENDICULAR FOR 2 NM"...
; 3643 : 				// 2001-07-16 MODIFIED BY S.G. DEPENDING IF WE HAVE WEAPONS LEFT, PULL MORE OR LESS
; 3644 : 				if (groundTargetPtr) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+224], 0
	je	$LN3@FireAGMiss

; 3645 : 					float dx = groundTargetPtr->BaseData()->XPos() - self->XPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv314[ebp]
	movss	xmm0, DWORD PTR tv314[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv380[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv319[ebp]
	movss	xmm0, DWORD PTR tv380[ebp]
	subss	xmm0, DWORD PTR tv319[ebp]
	movss	DWORD PTR _dx$3[ebp], xmm0

; 3646 : 					float dy = groundTargetPtr->BaseData()->YPos() - self->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv325[ebp]
	movss	xmm0, DWORD PTR tv325[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	movss	DWORD PTR tv382[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv330[ebp]
	movss	xmm0, DWORD PTR tv382[ebp]
	subss	xmm0, DWORD PTR tv330[ebp]
	movss	DWORD PTR _dy$2[ebp], xmm0

; 3647 : 
; 3648 : 					// x-y get range
; 3649 : 					float range = (float)sqrt( dx * dx + dy * dy ) + 0.1f;

	movss	xmm0, DWORD PTR _dx$3[ebp]
	mulss	xmm0, DWORD PTR _dx$3[ebp]
	movss	xmm1, DWORD PTR _dy$2[ebp]
	mulss	xmm1, DWORD PTR _dy$2[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv337[ebp]
	movss	xmm0, DWORD PTR tv337[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _range$1[ebp], xmm0

; 3650 : 
; 3651 : 					// normalize the x and y vector
; 3652 : 					dx /= range;

	movss	xmm0, DWORD PTR _dx$3[ebp]
	divss	xmm0, DWORD PTR _range$1[ebp]
	movss	DWORD PTR _dx$3[ebp], xmm0

; 3653 : 					dy /= range;

	movss	xmm0, DWORD PTR _dy$2[ebp]
	divss	xmm0, DWORD PTR _range$1[ebp]
	movss	DWORD PTR _dy$2[ebp], xmm0

; 3654 : 
; 3655 : 					if (Sms->NumCurrentWpn() == 1) {

	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?NumCurrentWpn@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumCurrentWpn
	cmp	eax, 1
	jne	$LN4@FireAGMiss

; 3656 : 						ipX = self->XPos() + dy * 5.0f * NM_TO_FT - dx * 1.5f * NM_TO_FT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv345[ebp]
	movss	xmm0, DWORD PTR tv345[ebp]
	movss	xmm1, DWORD PTR _dy$2[ebp]
	mulss	xmm1, DWORD PTR __real@40a00000
	mulss	xmm1, DWORD PTR __real@45bde1b0
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dx$3[ebp]
	mulss	xmm1, DWORD PTR __real@3fc00000
	mulss	xmm1, DWORD PTR __real@45bde1b0
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+268], xmm0

; 3657 : 						ipY = self->YPos() - dx * 5.0f * NM_TO_FT - dy * 1.5f * NM_TO_FT;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv353[ebp]
	movss	xmm0, DWORD PTR tv353[ebp]
	movss	xmm1, DWORD PTR _dx$3[ebp]
	mulss	xmm1, DWORD PTR __real@40a00000
	mulss	xmm1, DWORD PTR __real@45bde1b0
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dy$2[ebp]
	mulss	xmm1, DWORD PTR __real@3fc00000
	mulss	xmm1, DWORD PTR __real@45bde1b0
	subss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+272], xmm0

; 3658 : 					}
; 3659 : 					else {

	jmp	$LN3@FireAGMiss
$LN4@FireAGMiss:

; 3660 : 						ipX = self->XPos() + dy * 3.0f * NM_TO_FT - dx * 1.5f * NM_TO_FT;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv361[ebp]
	movss	xmm0, DWORD PTR tv361[ebp]
	movss	xmm1, DWORD PTR _dy$2[ebp]
	mulss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR __real@45bde1b0
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dx$3[ebp]
	mulss	xmm1, DWORD PTR __real@3fc00000
	mulss	xmm1, DWORD PTR __real@45bde1b0
	subss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+268], xmm0

; 3661 : 						ipY = self->YPos() - dx * 3.0f * NM_TO_FT - dy * 1.5f * NM_TO_FT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv369[ebp]
	movss	xmm0, DWORD PTR tv369[ebp]
	movss	xmm1, DWORD PTR _dx$3[ebp]
	mulss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR __real@45bde1b0
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dy$2[ebp]
	mulss	xmm1, DWORD PTR __real@3fc00000
	mulss	xmm1, DWORD PTR __real@45bde1b0
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+272], xmm0
$LN3@FireAGMiss:

; 3662 : 					}
; 3663 : 				}
; 3664 : 				// END OF ADDED SECTION
; 3665 : 			}
; 3666 : 
; 3667 : 			// determine if we shoot and run or not
; 3668 : 			//waitingForShot = SimLibElapsedTime + 5000; //Cobra
; 3669 : 		}

	jmp	SHORT $LN1@FireAGMiss
$LN15@FireAGMiss:

; 3670 : 		// too close or already fired, try again
; 3671 : 		// we're within a certain range and our ATA is not good
; 3672 : 		else if ( approxRange < 1.2f * NM_TO_FT && ata > 75.0f * DTR)

	movss	xmm0, DWORD PTR __real@45e3dba1
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	SHORT $LN1@FireAGMiss
	movss	xmm0, DWORD PTR _ata$[ebp]
	comiss	xmm0, DWORD PTR __real@3fa78d35
	jbe	SHORT $LN1@FireAGMiss

; 3673 : 		{
; 3674 : 			waitingForShot = SimLibElapsedTime + 5000;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 5000				; 00001388H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+496], edx

; 3675 : 			onStation = Final1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+132], 16			; 00000010H
$LN1@FireAGMiss:

; 3676 : 		}
; 3677 : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?FireAGMissile@DigitalBrain@@IAEXMM@Z ENDP		; DigitalBrain::FireAGMissile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gndattck.cpp
_TEXT	SEGMENT
tv830 = -104						; size = 8
_trig$ = -96						; size = 8
_angle$ = -88						; size = 4
tv822 = -84						; size = 4
tv815 = -80						; size = 4
tv738 = -76						; size = 4
tv732 = -72						; size = 4
tv658 = -68						; size = 4
tv652 = -64						; size = 4
tv633 = -60						; size = 4
tv549 = -56						; size = 4
tv540 = -52						; size = 4
tv445 = -48						; size = 4
tv332 = -44						; size = 4
tv197 = -40						; size = 4
tv154 = -36						; size = 4
tv128 = -32						; size = 4
_targetingPod$ = -28					; size = 4
_Sms$ = -24						; size = 4
_dy$ = -20						; size = 4
_dx$ = -16						; size = 4
_FCC$ = -12						; size = 4
_dir$ = -8						; size = 4
_this$ = -4						; size = 4
_approxRange$ = 8					; size = 4
_ata$ = 12						; size = 4
_theRadar$ = 16						; size = 4
?DropGBU@DigitalBrain@@IAEXMMPAVRadarClass@@@Z PROC	; DigitalBrain::DropGBU
; _this$ = ecx

; 3343 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	mov	DWORD PTR _this$[ebp], ecx

; 3344 : 		LaserPodClass* targetingPod = NULL;

	mov	DWORD PTR _targetingPod$[ebp], 0

; 3345 : 		FireControlComputer* FCC = self->FCC;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+936]
	mov	DWORD PTR _FCC$[ebp], edx

; 3346 : 		SMSClass* Sms = self->Sms;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+940]
	mov	DWORD PTR _Sms$[ebp], edx

; 3347 : 		float dir, dx, dy, angle;
; 3348 : 		mlTrig trig;
; 3349 : 
; 3350 : 		F4Assert (!Sms->curWeapon || Sms->curWeapon->IsBomb());
; 3351 : 
; 3352 : 		// Don't stop in the middle
; 3353 : 		droppingBombs = wcGbuWpn;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+236], 9

; 3354 : 
; 3355 : 		// Make sure the FCC is in the right mode/sub mode
; 3356 : 		if ( FCC->GetMasterMode() != FireControlComputer::AirGroundLaser ||
; 3357 : 				FCC->GetSubMode() != FireControlComputer::SLAVE)

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ ; FireControlComputer::GetMasterMode
	cmp	eax, 8
	jne	SHORT $LN53@DropGBU
	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetSubMode
	cmp	eax, 15					; 0000000fH
	je	SHORT $LN54@DropGBU
$LN53@DropGBU:

; 3358 : 		{
; 3359 : 			//Cobra test
; 3360 : 			self->FCC->SetMasterMode (FireControlComputer::AirGroundLaser);

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+936]
	call	?SetMasterMode@FireControlComputer@@QAEXW4FCCMasterMode@1@@Z ; FireControlComputer::SetMasterMode

; 3361 : 			self->FCC->SetSubMode (FireControlComputer::SLAVE);

	push	15					; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [ecx+936]
	call	?SetSubMode@FireControlComputer@@QAEXW4FCCSubMode@1@@Z ; FireControlComputer::SetSubMode
$LN54@DropGBU:

; 3362 : 		}
; 3363 : 
; 3364 : 		if (!Sms->curWeapon || !Sms->curWeapon->IsBomb())

	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??7?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator!
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN51@DropGBU
	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	DWORD PTR tv128[ebp], eax
	mov	eax, DWORD PTR tv128[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv128[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax
	test	eax, eax
	jne	SHORT $LN49@DropGBU
$LN51@DropGBU:

; 3365 : 		{
; 3366 : 			if (Sms->FindWeaponClass (wcGbuWpn, FALSE))

	push	0
	push	9
	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?FindWeaponClass@SMSClass@@QAEHW4WeaponClass@@H@Z ; SMSClass::FindWeaponClass
	test	eax, eax
	je	SHORT $LN50@DropGBU

; 3367 : 			{
; 3368 : 				Sms->SetWeaponType(Sms->hardPoint[Sms->CurHardpoint()]->GetWeaponType());

	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?CurHardpoint@SMSBaseClass@@QAEHXZ	; SMSBaseClass::CurHardpoint
	mov	ecx, DWORD PTR _Sms$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv154[ebp], eax
	mov	ecx, DWORD PTR tv154[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv154[ebp]
	mov	eax, DWORD PTR [edx+156]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?SetWeaponType@SMSClass@@QAEXW4WeaponType@@@Z ; SMSClass::SetWeaponType

; 3369 : 			}
; 3370 : 			else

	jmp	SHORT $LN49@DropGBU
$LN50@DropGBU:

; 3371 : 			{
; 3372 : 				Sms->SetWeaponType (wtNone);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?SetWeaponType@SMSClass@@QAEXW4WeaponType@@@Z ; SMSClass::SetWeaponType
$LN49@DropGBU:

; 3373 : 			}
; 3374 : 		}
; 3375 : 
; 3376 : 
; 3377 : 		// Get the targeting pod locked on to the target
; 3378 : 		targetingPod = (LaserPodClass*) FindLaserPod (self);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	?FindLaserPod@@YAPAVSensorClass@@PAVSimMoverClass@@@Z ; FindLaserPod
	add	esp, 4
	mov	DWORD PTR _targetingPod$[ebp], eax

; 3379 : 		if (targetingPod && targetingPod->CurrentTarget())

	cmp	DWORD PTR _targetingPod$[ebp], 0
	je	SHORT $LN48@DropGBU
	mov	ecx, DWORD PTR _targetingPod$[ebp]
	call	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
	test	eax, eax
	je	SHORT $LN48@DropGBU

; 3380 : 		{
; 3381 : 			if (!targetingPod->IsLocked())

	mov	ecx, DWORD PTR _targetingPod$[ebp]
	call	?IsLocked@LaserPodClass@@QAEHXZ		; LaserPodClass::IsLocked
	test	eax, eax
	jne	SHORT $LN47@DropGBU

; 3382 : 			{
; 3383 : 				// Designate needs to go down then up then down to make it work
; 3384 : 				if (FCC->designateCmd)

	mov	eax, DWORD PTR _FCC$[ebp]
	movsx	ecx, BYTE PTR [eax+184]
	test	ecx, ecx
	je	SHORT $LN46@DropGBU

; 3385 : 					FCC->designateCmd = FALSE;

	mov	edx, DWORD PTR _FCC$[ebp]
	mov	BYTE PTR [edx+184], 0

; 3386 : 				else

	jmp	SHORT $LN45@DropGBU
$LN46@DropGBU:

; 3387 : 					FCC->designateCmd = TRUE;

	mov	eax, DWORD PTR _FCC$[ebp]
	mov	BYTE PTR [eax+184], 1
$LN45@DropGBU:

; 3388 : 			}
; 3389 : 			else

	jmp	SHORT $LN44@DropGBU
$LN47@DropGBU:

; 3390 : 			{
; 3391 : 				FCC->designateCmd = FALSE;

	mov	ecx, DWORD PTR _FCC$[ebp]
	mov	BYTE PTR [ecx+184], 0
$LN44@DropGBU:

; 3392 : 			}
; 3393 : 
; 3394 : 			FCC->preDesignate = FALSE;

	mov	edx, DWORD PTR _FCC$[ebp]
	mov	BYTE PTR [edx+182], 0
$LN48@DropGBU:

; 3395 : 		}
; 3396 : 
; 3397 : 		// Point the radar at the target
; 3398 : 		if (theRadar) 

	cmp	DWORD PTR _theRadar$[ebp], 0
	je	$LN43@DropGBU

; 3399 : 		{
; 3400 : 			if (groundTargetPtr && groundTargetPtr->BaseData()->IsMover())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+224], 0
	je	SHORT $LN42@DropGBU
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv197[ebp], eax
	mov	edx, DWORD PTR tv197[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv197[ebp]
	mov	edx, DWORD PTR [eax+172]
	call	edx
	test	eax, eax
	je	SHORT $LN42@DropGBU

; 3401 : 				theRadar->SetMode(RadarClass::GMT);

	push	16					; 00000010H
	mov	eax, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax

; 3402 : 			else

	jmp	SHORT $LN41@DropGBU
$LN42@DropGBU:

; 3403 : 				theRadar->SetMode(RadarClass::GM);

	push	14					; 0000000eH
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax
$LN41@DropGBU:

; 3404 : 			theRadar->SetDesiredTarget(groundTargetPtr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+224]
	push	edx
	mov	eax, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 3405 : 			theRadar->SetAGSnowPlow(TRUE);

	push	1
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+176]
	call	eax
$LN43@DropGBU:

; 3406 : 		}
; 3407 : 
; 3408 : 		// Mode the SMS
; 3409 : 		//Sms->SetPair(FALSE);
; 3410 : 		Sms->SetAGBPair(FALSE);

	push	0
	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?SetAGBPair@SMSClass@@QAEX_N@Z		; SMSClass::SetAGBPair

; 3411 : 		//Sms->SetRippleCount(0);
; 3412 : 		Sms->SetAGBRippleCount(0);

	push	0
	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?SetAGBRippleCount@SMSClass@@QAEXH@Z	; SMSClass::SetAGBRippleCount

; 3413 : 
; 3414 : 		// Adjust for wind/etc
; 3415 : 		if (fabs(FCC->airGroundBearing) < 10.0F * DTR){

	mov	ecx, DWORD PTR _FCC$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+336]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv633[ebp]
	movss	xmm0, DWORD PTR __real@3e32b8c1
	comiss	xmm0, DWORD PTR tv633[ebp]
	jbe	SHORT $LN40@DropGBU

; 3416 : 			SetTrackPoint(
; 3417 : 				2.0F * FCC->groundDesignateX - FCC->groundImpactX,
; 3418 : 				2.0F * FCC->groundDesignateY - FCC->groundImpactY
; 3419 : 			);

	mov	edx, DWORD PTR _FCC$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+380]
	mov	eax, DWORD PTR _FCC$[ebp]
	subss	xmm0, DWORD PTR [eax+352]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _FCC$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx+376]
	mov	edx, DWORD PTR _FCC$[ebp]
	subss	xmm0, DWORD PTR [edx+348]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPoint@DigitalBrain@@QAEXMM@Z	; DigitalBrain::SetTrackPoint
$LN40@DropGBU:

; 3420 : 		}
; 3421 : 
; 3422 : 		// Give the FCC permission to release if in parameters
; 3423 : 		if (onStation == Final)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+132], 15			; 0000000fH
	jne	$LN21@DropGBU

; 3424 : 		{
; 3425 : 			if(SimLibElapsedTime > waitingForShot)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	edx, DWORD PTR [ecx+496]
	jbe	$LN38@DropGBU

; 3426 : 			{
; 3427 : 				// 2001-08-31 REMOVED BY S.G. NOT USED ANYWAY AND I NEED THE FLAG FOR SOMETHING ELSE
; 3428 : 				//			if (approxRange < 1.2F * FCC->airGroundRange)
; 3429 : 				//				SetATCFlag(InhibitDefensive);
; 3430 : 
; 3431 : 				// Check for too close
; 3432 : 				if (approxRange < 0.5F * FCC->airGroundRange)

	mov	eax, DWORD PTR _FCC$[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR [eax+332]
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	$LN37@DropGBU

; 3433 : 				{
; 3434 : 					// Bail and try again
; 3435 : 					dx = ( self->XPos() - trackX );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv652[ebp]
	movss	xmm0, DWORD PTR tv652[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+148]
	movss	DWORD PTR _dx$[ebp], xmm0

; 3436 : 					dy = ( self->YPos() - trackY );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv658[ebp]
	movss	xmm0, DWORD PTR tv658[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+152]
	movss	DWORD PTR _dy$[ebp], xmm0

; 3437 : 					approxRange = (float)sqrt( dx * dx + dy * dy );

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _approxRange$[ebp]

; 3438 : 					dir = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _dir$[ebp], xmm0

; 3439 : 					if (rand()%2)

	call	_rand
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN57@DropGBU
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN57@DropGBU:
	test	eax, eax
	je	SHORT $LN36@DropGBU

; 3440 : 						dir *= -1.0f;

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _dir$[ebp], xmm0
$LN36@DropGBU:

; 3441 : 					// Cobra - Slow-movers don't need to flyout too far
; 3442 : 					if (slowMover)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+560], 0
	je	$LN35@DropGBU

; 3443 : 					{
; 3444 : 						if (dy < 0.0f)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _dy$[ebp]
	jbe	SHORT $LN34@DropGBU

; 3445 : 							ipX = trackX - dir*g_fAGSlowFlyoutRange * NM_TO_FT;// Cobra - added g_fAGFlyoutRange static range

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGSlowFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+148]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+268], xmm1

; 3446 : 						else

	jmp	SHORT $LN33@DropGBU
$LN34@DropGBU:

; 3447 : 							ipX = trackX - dir*g_fAGSlowFlyoutRange * NM_TO_FT;// Cobra - added g_fAGFlyoutRange static range

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGSlowFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+148]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+268], xmm1
$LN33@DropGBU:

; 3448 : 						if (dx < 0.0f)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _dx$[ebp]
	jbe	SHORT $LN32@DropGBU

; 3449 : 							ipY = trackY - dir*g_fAGSlowFlyoutRange * NM_TO_FT;// Cobra - added g_fAGFlyoutRange static range

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGSlowFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+152]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+272], xmm1

; 3450 : 						else

	jmp	SHORT $LN31@DropGBU
$LN32@DropGBU:

; 3451 : 							ipY = trackY + dir*g_fAGSlowFlyoutRange * NM_TO_FT;

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGSlowFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+152]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+272], xmm0
$LN31@DropGBU:

; 3452 : 					}
; 3453 : 					else

	jmp	$LN26@DropGBU
$LN35@DropGBU:

; 3454 : 					{
; 3455 : 						if (dy < 0.0f)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _dy$[ebp]
	jbe	SHORT $LN29@DropGBU

; 3456 : 							ipX = trackX - dir*g_fAGFlyoutRange * NM_TO_FT;// Cobra - added g_fAGFlyoutRange static range

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+148]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+268], xmm1

; 3457 : 						else

	jmp	SHORT $LN28@DropGBU
$LN29@DropGBU:

; 3458 : 							ipX = trackX + dir*g_fAGFlyoutRange * NM_TO_FT;

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+148]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+268], xmm0
$LN28@DropGBU:

; 3459 : 						if (dx < 0.0f)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _dx$[ebp]
	jbe	SHORT $LN27@DropGBU

; 3460 : 							ipY = trackY - dir*g_fAGFlyoutRange * NM_TO_FT;// Cobra - added g_fAGFlyoutRange static range

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+152]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+272], xmm1

; 3461 : 						else

	jmp	SHORT $LN26@DropGBU
$LN27@DropGBU:

; 3462 : 							ipY = trackY + dir*g_fAGFlyoutRange * NM_TO_FT;

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+152]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+272], xmm0
$LN26@DropGBU:

; 3463 : 					}
; 3464 : 					ipZ = trackZ = self->ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv332[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv332[ebp]
	movss	DWORD PTR [edx+156], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv332[ebp]
	movss	DWORD PTR [eax+276], xmm0

; 3465 : 					ShiAssert (ipX > 0.0F);
; 3466 : 
; 3467 : 					// Start again
; 3468 : 					onStation = Crosswind;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+132], 12			; 0000000cH
$LN37@DropGBU:

; 3469 : 					//MonoPrint ("Too close to GBU, head to IP and try again\n");
; 3470 : 				}
; 3471 : 
; 3472 : 				SetFlag (MslFireFlag);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@BaseBrain@@QAEXH@Z		; BaseBrain::SetFlag

; 3473 : 
; 3474 : 				if (FCC->postDrop)

	mov	edx, DWORD PTR _FCC$[ebp]
	movsx	eax, BYTE PTR [edx+183]
	test	eax, eax
	je	SHORT $LN23@DropGBU

; 3475 : 				{
; 3476 : 					// 1/2 second between bombs, 10 seconds after last bomb - Cobra - 1/4 second to get the pair closer to target
; 3477 : 					if (Sms->NumCurrentWpn() % 2 != 0)

	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?NumCurrentWpn@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumCurrentWpn
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN58@DropGBU
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN58@DropGBU:
	test	eax, eax
	je	SHORT $LN24@DropGBU

; 3478 : 					{
; 3479 : 						waitingForShot = SimLibElapsedTime + (SEC_TO_MSEC/4);

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 250				; 000000faH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+496], ecx

; 3480 : 					}
; 3481 : 					else

	jmp	SHORT $LN23@DropGBU
$LN24@DropGBU:

; 3482 : 					{
; 3483 : 						// Keep Lasing
; 3484 : 						madeAGPass = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+260], 1

; 3485 : 						onStation = Final1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+132], 16			; 00000010H

; 3486 : 						waitingForShot = SimLibElapsedTime;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [edx+496], eax
$LN23@DropGBU:

; 3487 : 					}
; 3488 : 				}
; 3489 : 			}
; 3490 : 			else // Are we too close?

	jmp	$LN21@DropGBU
$LN38@DropGBU:

; 3491 : 			{     
; 3492 : 				if (onStation == Final && approxRange < 0.7F * FCC->airGroundRange || ata > 60.0F * DTR)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+132], 15			; 0000000fH
	jne	SHORT $LN19@DropGBU
	mov	edx, DWORD PTR _FCC$[ebp]
	movss	xmm0, DWORD PTR __real@3f333333
	mulss	xmm0, DWORD PTR [edx+332]
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	ja	SHORT $LN20@DropGBU
$LN19@DropGBU:
	movss	xmm0, DWORD PTR _ata$[ebp]
	comiss	xmm0, DWORD PTR __real@3f860a91
	jbe	$LN21@DropGBU
$LN20@DropGBU:

; 3493 : 				{
; 3494 : 					// Bail and try again
; 3495 : 					dx = ( self->XPos() - trackX );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv732[ebp]
	movss	xmm0, DWORD PTR tv732[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+148]
	movss	DWORD PTR _dx$[ebp], xmm0

; 3496 : 					dy = ( self->YPos() - trackY );

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv738[ebp]
	movss	xmm0, DWORD PTR tv738[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+152]
	movss	DWORD PTR _dy$[ebp], xmm0

; 3497 : 					approxRange = (float)sqrt( dx * dx + dy * dy );

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _approxRange$[ebp]

; 3498 : 					dir = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _dir$[ebp], xmm0

; 3499 : 					if (rand()%2)

	call	_rand
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN59@DropGBU
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN59@DropGBU:
	test	eax, eax
	je	SHORT $LN18@DropGBU

; 3500 : 						dir *= -1.0f;

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _dir$[ebp], xmm0
$LN18@DropGBU:

; 3501 : 					// Cobra - Slow-movers don't need to flyout too far
; 3502 : 					if (slowMover)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+560], 0
	je	$LN17@DropGBU

; 3503 : 					{
; 3504 : 						if (dy < 0.0f)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _dy$[ebp]
	jbe	SHORT $LN16@DropGBU

; 3505 : 							ipX = trackX - dir*g_fAGSlowFlyoutRange * NM_TO_FT;// Cobra - added g_fAGFlyoutRange static range

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGSlowFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+148]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+268], xmm1

; 3506 : 						else

	jmp	SHORT $LN15@DropGBU
$LN16@DropGBU:

; 3507 : 							ipX = trackX - dir*g_fAGSlowFlyoutRange * NM_TO_FT;// Cobra - added g_fAGFlyoutRange static range

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGSlowFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+148]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+268], xmm1
$LN15@DropGBU:

; 3508 : 						if (dx < 0.0f)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _dx$[ebp]
	jbe	SHORT $LN14@DropGBU

; 3509 : 							ipY = trackY - dir*g_fAGSlowFlyoutRange * NM_TO_FT;// Cobra - added g_fAGFlyoutRange static range

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGSlowFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+152]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+272], xmm1

; 3510 : 						else

	jmp	SHORT $LN13@DropGBU
$LN14@DropGBU:

; 3511 : 							ipY = trackY + dir*g_fAGSlowFlyoutRange * NM_TO_FT;

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGSlowFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+152]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+272], xmm0
$LN13@DropGBU:

; 3512 : 					}
; 3513 : 					else

	jmp	$LN8@DropGBU
$LN17@DropGBU:

; 3514 : 					{
; 3515 : 						if (dy < 0.0f)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _dy$[ebp]
	jbe	SHORT $LN11@DropGBU

; 3516 : 							ipX = trackX - dir*g_fAGFlyoutRange * NM_TO_FT;// Cobra - added g_fAGFlyoutRange static range

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+148]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+268], xmm1

; 3517 : 						else

	jmp	SHORT $LN10@DropGBU
$LN11@DropGBU:

; 3518 : 							ipX = trackX + dir*g_fAGFlyoutRange * NM_TO_FT;

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+148]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+268], xmm0
$LN10@DropGBU:

; 3519 : 						if (dx < 0.0f)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _dx$[ebp]
	jbe	SHORT $LN9@DropGBU

; 3520 : 							ipY = trackY - dir*g_fAGFlyoutRange * NM_TO_FT;// Cobra - added g_fAGFlyoutRange static range

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+152]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+272], xmm1

; 3521 : 						else

	jmp	SHORT $LN8@DropGBU
$LN9@DropGBU:

; 3522 : 							ipY = trackY + dir*g_fAGFlyoutRange * NM_TO_FT;

	movss	xmm0, DWORD PTR _dir$[ebp]
	mulss	xmm0, DWORD PTR ?g_fAGFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+152]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+272], xmm0
$LN8@DropGBU:

; 3523 : 					}
; 3524 : 					ipZ = trackZ = self->ZPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv445[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv445[ebp]
	movss	DWORD PTR [ecx+156], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv445[ebp]
	movss	DWORD PTR [edx+276], xmm0

; 3525 : 					ShiAssert (ipX > 0.0F);
; 3526 : 
; 3527 : 					// Start again
; 3528 : 					onStation = Crosswind;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+132], 12			; 0000000cH
$LN21@DropGBU:

; 3529 : 					//MonoPrint ("Too close to bomb, head to IP and try again\n");
; 3530 : 				}
; 3531 : 			}
; 3532 : 		}
; 3533 : 
; 3534 : 		// Out of this weapon, find another/get out of dodge
; 3535 : 		if (onStation == Final1)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+132], 16			; 00000010H
	jne	$LN3@DropGBU

; 3536 : 		{
; 3537 : 			if (SimLibElapsedTime > waitingForShot) // Bomb has had time to fall.

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	eax, DWORD PTR [edx+496]
	jbe	$LN6@DropGBU

; 3538 : 			{
; 3539 : 				agDoctrine = AGD_LOOK_SHOOT_LOOK;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+244], 2

; 3540 : 				hasRocket = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], 0

; 3541 : 				hasGun = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+196], 0

; 3542 : 				hasBomb = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+180], 0

; 3543 : 				hasGBU = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+204], 0

; 3544 : 				droppingBombs = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+236], 0

; 3545 : 
; 3546 : 				// Force a weapon/target selection
; 3547 : 				madeAGPass = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 1

; 3548 : 				onStation = NotThereYet;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+132], 0

; 3549 : 				moreFlags &= ~KeepLasing; // 2002-03-08 ADDED BY S.G. Not lasing anymore

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+968]
	and	ecx, -5					; fffffffbH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+968], ecx
	jmp	$LN3@DropGBU
$LN6@DropGBU:

; 3550 : 			}
; 3551 : 			else if (SimLibElapsedTime == waitingForShot) // Turn but keep designating

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	ecx, DWORD PTR [eax+496]
	jne	$LN4@DropGBU

; 3552 : 			{
; 3553 : 				dx = ( trackX - self->XPos() );

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv815[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+148]
	subss	xmm0, DWORD PTR tv815[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 3554 : 				dy = ( trackY - self->YPos() );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv822[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+152]
	subss	xmm0, DWORD PTR tv822[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 3555 : 				angle = 45.0F * DTR + (float)atan2(dy, dx);

	cvtss2sd xmm0, DWORD PTR _dx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _dy$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv830[ebp]
	movsd	xmm0, QWORD PTR tv830[ebp]
	cvtsd2ss xmm0, xmm0
	addss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR _angle$[ebp], xmm0

; 3556 : 				mlSinCos (&trig, angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 3557 : 				ipX = trackX + trig.cos * 7.5f * NM_TO_FT;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	mulss	xmm0, DWORD PTR __real@40f00000
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+148]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+268], xmm0

; 3558 : 				ipY = trackY + trig.sin * 7.5f * NM_TO_FT;

	movss	xmm0, DWORD PTR _trig$[ebp]
	mulss	xmm0, DWORD PTR __real@40f00000
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+152]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+272], xmm0

; 3559 : 				SetTrackPoint(ipX, ipY);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+272]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+268]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPoint@DigitalBrain@@QAEXMM@Z	; DigitalBrain::SetTrackPoint

; 3560 : 				ipZ = self->ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+276]

; 3561 : 				waitingForShot = SimLibElapsedTime + 27 * SEC_TO_MSEC;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 27000				; 00006978H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+496], eax

; 3562 : 				ShiAssert (ipX > 0.0F);
; 3563 : 				moreFlags |= KeepLasing; // 2002-03-08 ADDED BY S.G. Flag this AI as lasing so he sticks to it

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+968]
	or	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+968], eax

; 3564 : 			}
; 3565 : 			else

	jmp	SHORT $LN3@DropGBU
$LN4@DropGBU:

; 3566 : 			{
; 3567 : 				SetTrackPoint(ipX, ipY, ipZ);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+276]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+272]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+268]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPoint@DigitalBrain@@QAEXMMM@Z	; DigitalBrain::SetTrackPoint
$LN3@DropGBU:

; 3568 : 			}
; 3569 : 		}
; 3570 : 		//MI NULL out our Target
; 3571 : 		if ( groundTargetPtr &&
; 3572 : 				groundTargetPtr->BaseData()->IsSim() &&
; 3573 : 				( groundTargetPtr->BaseData()->IsDead() ||
; 3574 : 				  groundTargetPtr->BaseData()->IsExploding() ) )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+224], 0
	je	SHORT $LN2@DropGBU
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN2@DropGBU
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv540[ebp], eax
	mov	edx, DWORD PTR tv540[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv540[ebp]
	mov	edx, DWORD PTR [eax+212]
	call	edx
	test	eax, eax
	jne	SHORT $LN1@DropGBU
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv549[ebp], eax
	mov	ecx, DWORD PTR tv549[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv549[ebp]
	mov	eax, DWORD PTR [edx+208]
	call	eax
	test	eax, eax
	je	SHORT $LN2@DropGBU
$LN1@DropGBU:

; 3575 : 		{
; 3576 : 			SetGroundTarget( NULL );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget
$LN2@DropGBU:

; 3577 : 		}
; 3578 : 
; 3579 : 	}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?DropGBU@DigitalBrain@@IAEXMMPAVRadarClass@@@Z ENDP	; DigitalBrain::DropGBU
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gndattck.cpp
_TEXT	SEGMENT
_wt$ = -48						; size = 4
tv568 = -44						; size = 4
tv401 = -40						; size = 4
tv228 = -36						; size = 4
tv203 = -32						; size = 4
tv177 = -28						; size = 4
_rcount$1 = -24						; size = 4
_rcount$2 = -20						; size = 4
_TheBomb$ = -16						; size = 4
_FCC$ = -12						; size = 4
_Sms$ = -8						; size = 4
_this$ = -4						; size = 4
_approxRange$ = 8					; size = 4
_ata$ = 12						; size = 4
_theRadar$ = 16						; size = 4
?DropBomb@DigitalBrain@@IAEXMMPAVRadarClass@@@Z PROC	; DigitalBrain::DropBomb
; _this$ = ecx

; 3104 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 3105 : 		FireControlComputer* FCC = self->FCC;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+936]
	mov	DWORD PTR _FCC$[ebp], edx

; 3106 : 		SMSClass* Sms = self->Sms;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+940]
	mov	DWORD PTR _Sms$[ebp], edx

; 3107 : 		int wt;
; 3108 : 
; 3109 : 		F4Assert (!Sms->curWeapon || Sms->curWeapon->IsBomb());
; 3110 : 
; 3111 : 		// COBRA - RED - FIXING POSSIBLE CTDs
; 3112 : 		BombClass *TheBomb=FCC->GetTheBomb();

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetTheBomb@FireControlComputer@@QAEPAVBombClass@@XZ ; FireControlComputer::GetTheBomb
	mov	DWORD PTR _TheBomb$[ebp], eax

; 3113 : 
; 3114 : 		if (TheBomb && TheBomb->GetWeaponId() /*Sms->CurHardpoint() && Sms->hardPoint*/)

	cmp	DWORD PTR _TheBomb$[ebp], 0
	je	SHORT $LN38@DropBomb
	mov	ecx, DWORD PTR _TheBomb$[ebp]
	call	?GetWeaponId@SimWeaponClass@@QAEFXZ	; SimWeaponClass::GetWeaponId
	cwde
	test	eax, eax
	je	SHORT $LN38@DropBomb

; 3115 : 			//wt = (WeaponDataTable[Sms->hardPoint[Sms->CurHardpoint()]->weaponId].Weight);
; 3116 : 			wt = (WeaponDataTable[TheBomb->GetWeaponId()].Weight);

	mov	ecx, DWORD PTR _TheBomb$[ebp]
	call	?GetWeaponId@SimWeaponClass@@QAEFXZ	; SimWeaponClass::GetWeaponId
	movsx	ecx, ax
	imul	ecx, 60					; 0000003cH
	mov	edx, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movzx	eax, WORD PTR [edx+ecx+48]
	mov	DWORD PTR _wt$[ebp], eax
$LN38@DropBomb:

; 3117 : 
; 3118 : 
; 3119 : 		// Check for JDAM/JSOW ready-to-drop
; 3120 : 		/*	if ((self->IsPlayer() && self->AutopilotType() != AircraftClass::CombatAP) && (Sms->GetCurrentHardpoint() > 0) && 
; 3121 : 			((Sms->hardPoint[Sms->GetCurrentHardpoint()]->GetWeaponType()==wtGPS) ||
; 3122 : 			(((BombClass *)Sms->hardPoint[Sms->CurHardpoint()]->weaponPointer) &&
; 3123 : 			((BombClass *)Sms->hardPoint[Sms->CurHardpoint()]->weaponPointer)->IsSetBombFlag(BombClass::IsJSOW))) &&
; 3124 : 			(!Sms->JDAMPowered))
; 3125 : 			return;*/
; 3126 : 
; 3127 : 		if ((self->IsPlayer() && self->AutopilotType() != AircraftClass::CombatAP) && TheBomb &&
; 3128 : 				( TheBomb->IsSetBombFlag(BombClass::IsGPS) || TheBomb->IsSetBombFlag(BombClass::IsJSOW)) &&	(!Sms->JDAMPowered))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN37@DropBomb
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
	cmp	eax, 2
	je	SHORT $LN37@DropBomb
	cmp	DWORD PTR _TheBomb$[ebp], 0
	je	SHORT $LN37@DropBomb
	push	256					; 00000100H
	mov	ecx, DWORD PTR _TheBomb$[ebp]
	call	?IsSetBombFlag@BombClass@@QAEHH@Z	; BombClass::IsSetBombFlag
	test	eax, eax
	jne	SHORT $LN36@DropBomb
	push	512					; 00000200H
	mov	ecx, DWORD PTR _TheBomb$[ebp]
	call	?IsSetBombFlag@BombClass@@QAEHH@Z	; BombClass::IsSetBombFlag
	test	eax, eax
	je	SHORT $LN37@DropBomb
$LN36@DropBomb:
	mov	eax, DWORD PTR _Sms$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	test	ecx, ecx
	jne	SHORT $LN37@DropBomb

; 3129 : 			return;

	jmp	$LN39@DropBomb
$LN37@DropBomb:

; 3130 : 
; 3131 : 
; 3132 : 		// Make sure the FCC is in the right mode/sub mode
; 3133 : 		if ( FCC->GetMasterMode() != FireControlComputer::AirGroundBomb ||
; 3134 : 				FCC->GetSubMode() != FireControlComputer::CCRP)

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ ; FireControlComputer::GetMasterMode
	cmp	eax, 5
	jne	SHORT $LN34@DropBomb
	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetSubMode
	cmp	eax, 8
	je	SHORT $LN35@DropBomb
$LN34@DropBomb:

; 3135 : 		{
; 3136 : 			//Cobra test
; 3137 : 			self->FCC->SetMasterMode (FireControlComputer::AirGroundBomb);

	push	5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+936]
	call	?SetMasterMode@FireControlComputer@@QAEXW4FCCMasterMode@1@@Z ; FireControlComputer::SetMasterMode

; 3138 : 			self->FCC->SetSubMode (FireControlComputer::CCRP);

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+936]
	call	?SetSubMode@FireControlComputer@@QAEXW4FCCSubMode@1@@Z ; FireControlComputer::SetSubMode
$LN35@DropBomb:

; 3139 : 		}
; 3140 : 
; 3141 : 
; 3142 : 		if (!Sms->curWeapon || !Sms->curWeapon->IsBomb())

	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??7?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator!
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN32@DropBomb
	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	DWORD PTR tv177[ebp], eax
	mov	ecx, DWORD PTR tv177[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv177[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax
	test	eax, eax
	jne	SHORT $LN30@DropBomb
$LN32@DropBomb:

; 3143 : 		{
; 3144 : 			if (Sms->FindWeaponClass (wcBombWpn)){

	push	1
	push	2
	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?FindWeaponClass@SMSClass@@QAEHW4WeaponClass@@H@Z ; SMSClass::FindWeaponClass
	test	eax, eax
	je	SHORT $LN31@DropBomb

; 3145 : 				Sms->SetWeaponType(Sms->hardPoint[Sms->CurHardpoint()]->GetWeaponType());

	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?CurHardpoint@SMSBaseClass@@QAEHXZ	; SMSBaseClass::CurHardpoint
	mov	ecx, DWORD PTR _Sms$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv203[ebp]
	mov	eax, DWORD PTR [edx+156]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?SetWeaponType@SMSClass@@QAEXW4WeaponType@@@Z ; SMSClass::SetWeaponType

; 3146 : 				// COBRA - RED - FIXING POSSIBLE CTDs
; 3147 : 				TheBomb=FCC->GetTheBomb();

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetTheBomb@FireControlComputer@@QAEPAVBombClass@@XZ ; FireControlComputer::GetTheBomb
	mov	DWORD PTR _TheBomb$[ebp], eax

; 3148 : 			} else {

	jmp	SHORT $LN30@DropBomb
$LN31@DropBomb:

; 3149 : 				Sms->SetWeaponType (wtNone);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?SetWeaponType@SMSClass@@QAEXW4WeaponType@@@Z ; SMSClass::SetWeaponType

; 3150 : 				TheBomb=NULL;

	mov	DWORD PTR _TheBomb$[ebp], 0
$LN30@DropBomb:

; 3151 : 			}
; 3152 : 		}
; 3153 : 
; 3154 : 		// Cobra - Set JSOW to MANual submode
; 3155 : 		if (TheBomb && TheBomb->IsSetBombFlag(BombClass::IsJSOW)) self->FCC->SetSubMode (FireControlComputer::MAN);

	cmp	DWORD PTR _TheBomb$[ebp], 0
	je	SHORT $LN29@DropBomb
	push	512					; 00000200H
	mov	ecx, DWORD PTR _TheBomb$[ebp]
	call	?IsSetBombFlag@BombClass@@QAEHH@Z	; BombClass::IsSetBombFlag
	test	eax, eax
	je	SHORT $LN29@DropBomb
	push	21					; 00000015H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+936]
	call	?SetSubMode@FireControlComputer@@QAEXW4FCCSubMode@1@@Z ; FireControlComputer::SetSubMode
$LN29@DropBomb:

; 3156 : 
; 3157 : 		// Point the radar at the target
; 3158 : 		if (theRadar) 

	cmp	DWORD PTR _theRadar$[ebp], 0
	je	$LN28@DropBomb

; 3159 : 		{
; 3160 : 			if (groundTargetPtr && groundTargetPtr->BaseData()->IsMover())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+224], 0
	je	SHORT $LN27@DropBomb
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv228[ebp], eax
	mov	edx, DWORD PTR tv228[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv228[ebp]
	mov	edx, DWORD PTR [eax+172]
	call	edx
	test	eax, eax
	je	SHORT $LN27@DropBomb

; 3161 : 				theRadar->SetMode(RadarClass::GMT);

	push	16					; 00000010H
	mov	eax, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax

; 3162 : 			else

	jmp	SHORT $LN26@DropBomb
$LN27@DropBomb:

; 3163 : 				theRadar->SetMode(RadarClass::GM);

	push	14					; 0000000eH
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax
$LN26@DropBomb:

; 3164 : 			theRadar->SetDesiredTarget(groundTargetPtr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+224]
	push	edx
	mov	eax, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 3165 : 			theRadar->SetAGSnowPlow(TRUE);

	push	1
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+176]
	call	eax
$LN28@DropBomb:

; 3166 : 		}
; 3167 : 
; 3168 : 		// Mode the SMS
; 3169 : 		//Sms->SetPair(TRUE); // MLR 4/3/2004 - 
; 3170 : 
; 3171 : 		// Give the FCC permission to release if in parameters
; 3172 : 		SetFlag (MslFireFlag);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@BaseBrain@@QAEXH@Z		; BaseBrain::SetFlag

; 3173 : 
; 3174 : 		// Adjust for wind/etc
; 3175 : 		if (fabs(FCC->airGroundBearing) < 5.0F * DTR){

	mov	ecx, DWORD PTR _FCC$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+336]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv568[ebp]
	movss	xmm0, DWORD PTR __real@3db2b8c1
	comiss	xmm0, DWORD PTR tv568[ebp]
	jbe	SHORT $LN25@DropBomb

; 3176 : 			SetTrackPoint(
; 3177 : 				2.0F * FCC->groundDesignateX - FCC->groundImpactX,
; 3178 : 				2.0F * FCC->groundDesignateY - FCC->groundImpactY
; 3179 : 			);

	mov	edx, DWORD PTR _FCC$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+380]
	mov	eax, DWORD PTR _FCC$[ebp]
	subss	xmm0, DWORD PTR [eax+352]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _FCC$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [ecx+376]
	mov	edx, DWORD PTR _FCC$[ebp]
	subss	xmm0, DWORD PTR [edx+348]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPoint@DigitalBrain@@QAEXMM@Z	; DigitalBrain::SetTrackPoint
$LN25@DropBomb:

; 3180 : 		}
; 3181 : 
; 3182 : 		if (agApproach == AGA_BOMBER)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+248], 4
	jne	$LN24@DropBomb

; 3183 : 		{
; 3184 : 			if (!droppingBombs)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+236], 0
	jne	$LN23@DropBomb

; 3185 : 			{
; 3186 : 				// Try to put the middle drop on target
; 3187 : 				//Sms->SetRippleCount (int(Sms->NumCurrentWpn() / 2.0F + 0.5F) - 1);
; 3188 : 				Sms->SetAGBRippleCount (int(Sms->NumCurrentWpn() / 2.0F + 0.5F) - 1);

	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?NumCurrentWpn@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumCurrentWpn
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si edx, xmm0
	sub	edx, 1
	push	edx
	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?SetAGBRippleCount@SMSClass@@QAEXH@Z	; SMSClass::SetAGBRippleCount

; 3189 : 
; 3190 : 				//int rcount = Sms->RippleCount() + 1;
; 3191 : 				int rcount = Sms->GetAGBRippleCount() + 1;

	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?GetAGBRippleCount@SMSClass@@QAEHXZ	; SMSClass::GetAGBRippleCount
	add	eax, 1
	mov	DWORD PTR _rcount$2[ebp], eax

; 3192 : 				if (!(rcount & 1)) // If not odd

	mov	eax, DWORD PTR _rcount$2[ebp]
	and	eax, 1
	jne	SHORT $LN22@DropBomb

; 3193 : 					rcount--;

	mov	ecx, DWORD PTR _rcount$2[ebp]
	sub	ecx, 1
	mov	DWORD PTR _rcount$2[ebp], ecx
$LN22@DropBomb:

; 3194 : 
; 3195 : 				//if (FCC->airGroundRange < Sms->NumCurrentWpn() * 2.0F * Sms->RippleInterval())
; 3196 : 				//if (FCC->airGroundRange < (rcount * Sms->RippleInterval()) / 2) // JB 010408 010708 Space the ripples correctly over the target
; 3197 : 				if (FCC->airGroundRange < (rcount * Sms->GetAGBRippleInterval()) / 2) // JB 010408 010708 Space the ripples correctly over the target

	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?GetAGBRippleInterval@SMSClass@@QAEHXZ	; SMSClass::GetAGBRippleInterval
	imul	eax, DWORD PTR _rcount$2[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	cvtsi2ss xmm0, eax
	mov	edx, DWORD PTR _FCC$[ebp]
	comiss	xmm0, DWORD PTR [edx+332]
	jbe	SHORT $LN21@DropBomb

; 3198 : 				{
; 3199 : 					droppingBombs = wcBombWpn;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+236], 2

; 3200 : 					FCC->SetBombReleaseOverride(TRUE);

	push	1
	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?SetBombReleaseOverride@FireControlComputer@@QAEXH@Z ; FireControlComputer::SetBombReleaseOverride

; 3201 : 					onStation = Final1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+132], 16			; 00000010H
$LN21@DropBomb:

; 3202 : 				}
; 3203 : 			}
; 3204 : 			else

	jmp	$LN17@DropBomb
$LN23@DropBomb:

; 3205 : 			{
; 3206 : 
; 3207 : 				if (Sms->NumCurrentWpn() == 0)

	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?NumCurrentWpn@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumCurrentWpn
	test	eax, eax
	jne	SHORT $LN19@DropBomb

; 3208 : 				{
; 3209 : 					FCC->SetBombReleaseOverride(FALSE);

	push	0
	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?SetBombReleaseOverride@FireControlComputer@@QAEXH@Z ; FireControlComputer::SetBombReleaseOverride

; 3210 : 					// Out of this weapon, find another/get out of dodge
; 3211 : 					agDoctrine = AGD_LOOK_SHOOT_LOOK;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+244], 2

; 3212 : 					hasRocket = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+192], 0

; 3213 : 					hasGun = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+196], 0

; 3214 : 					hasBomb = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], 0

; 3215 : 					hasGBU = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+204], 0

; 3216 : 
; 3217 : 					// Start over again
; 3218 : 					madeAGPass = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 1

; 3219 : 					onStation = NotThereYet;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+132], 0

; 3220 : 					return;

	jmp	$LN39@DropBomb
	jmp	SHORT $LN17@DropBomb
$LN19@DropBomb:

; 3221 : 				}
; 3222 : 				// too close ?
; 3223 : 				// we're within a certain range and our ATA is not good
; 3224 : 				else if ( approxRange < 1.2f * NM_TO_FT && ata > 75.0f * DTR)

	movss	xmm0, DWORD PTR __real@45e3dba1
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	SHORT $LN17@DropBomb
	movss	xmm0, DWORD PTR _ata$[ebp]
	comiss	xmm0, DWORD PTR __real@3fa78d35
	jbe	SHORT $LN17@DropBomb

; 3225 : 				{
; 3226 : 					waitingForShot = SimLibElapsedTime + 5000;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 5000				; 00001388H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+496], eax

; 3227 : 					AGflyOut();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AGflyOut@DigitalBrain@@IAEXXZ		; DigitalBrain::AGflyOut

; 3228 : 					onStation = Downwind;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+132], 13			; 0000000dH

; 3229 : 					//onStation = Final1;
; 3230 : 					return;

	jmp	$LN39@DropBomb
$LN17@DropBomb:

; 3231 : 				}
; 3232 : 			}
; 3233 : 
; 3234 : 		}
; 3235 : 		else

	jmp	$LN1@DropBomb
$LN24@DropBomb:

; 3236 : 		{
; 3237 : 			// JB 010708 start Drop all your dumb bombs of the current type or if 
; 3238 : 			// the lead is a player (not in autopilot) use the lead's ripple setting.
; 3239 : 			if (!droppingBombs)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+236], 0
	jne	$LN15@DropBomb

; 3240 : 			{
; 3241 : 				//if (flightLead && ((AircraftClass*)flightLead)->AutopilotType() != AircraftClass::CombatAP && ((AircraftClass*)flightLead)->Sms)
; 3242 : 				// FRB
; 3243 : 				if (flightLead && flightLead == self && self->IsPlayer() && self->AutopilotType() != AircraftClass::CombatAP && ((AircraftClass*)flightLead)->Sms)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+708], 0
	je	$LN14@DropBomb
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+708]
	cmp	ecx, DWORD PTR [eax+56]
	jne	$LN14@DropBomb
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	$LN14@DropBomb
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
	cmp	eax, 2
	je	$LN14@DropBomb
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+708]
	cmp	DWORD PTR [edx+940], 0
	je	$LN14@DropBomb

; 3244 : 				{
; 3245 : 					Sms->SetAGBRippleCount (min(((AircraftClass*)flightLead)->Sms->GetAGBRippleCount(), int(Sms->NumCurrentWpn() / 2.0F + 0.5F) - 1));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	mov	ecx, DWORD PTR [ecx+940]
	call	?GetAGBRippleCount@SMSClass@@QAEHXZ	; SMSClass::GetAGBRippleCount
	mov	esi, eax
	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?NumCurrentWpn@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumCurrentWpn
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si edx, xmm0
	sub	edx, 1
	cmp	esi, edx
	jge	SHORT $LN41@DropBomb
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	mov	ecx, DWORD PTR [ecx+940]
	call	?GetAGBRippleCount@SMSClass@@QAEHXZ	; SMSClass::GetAGBRippleCount
	mov	DWORD PTR tv401[ebp], eax
	jmp	SHORT $LN42@DropBomb
$LN41@DropBomb:
	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?NumCurrentWpn@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumCurrentWpn
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si edx, xmm0
	sub	edx, 1
	mov	DWORD PTR tv401[ebp], edx
$LN42@DropBomb:
	mov	eax, DWORD PTR tv401[ebp]
	push	eax
	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?SetAGBRippleCount@SMSClass@@QAEXH@Z	; SMSClass::SetAGBRippleCount

; 3246 : 					// Cobra - set AI CBU Burst Height to the human leader's
; 3247 : 					if (hasBomb == TRUE + 2)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+180], 3
	jne	SHORT $LN13@DropBomb

; 3248 : 						Sms->SetAGBBurstAlt((((AircraftClass*)flightLead)->Sms->GetAGBBurstAlt()));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+708]
	mov	ecx, DWORD PTR [eax+940]
	call	?GetAGBBurstAlt@SMSClass@@QAEHXZ	; SMSClass::GetAGBBurstAlt
	push	eax
	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?SetAGBBurstAlt@SMSClass@@QAEXH@Z	; SMSClass::SetAGBBurstAlt
$LN13@DropBomb:

; 3249 : 				}
; 3250 : 				else

	jmp	SHORT $LN7@DropBomb
$LN14@DropBomb:

; 3251 : 				{
; 3252 : 					// COBRA - RED - FIXING POSSIBLE CTDs
; 3253 : 					// Cobra - rippling pair only for GPS JDAM/JSOW
; 3254 : 					/*				if ((Sms->GetCurrentHardpoint() > 0) && ((Sms->hardPoint[Sms->GetCurrentHardpoint()]->GetWeaponType()==wtGPS) ||
; 3255 : 									(((BombClass *)Sms->hardPoint[Sms->CurHardpoint()]->weaponPointer) &&
; 3256 : 									((BombClass *)Sms->hardPoint[Sms->CurHardpoint()]->weaponPointer)->IsSetBombFlag(BombClass::IsJSOW))))*/
; 3257 : 					if(TheBomb && ( TheBomb->IsSetBombFlag(BombClass::IsJSOW) || TheBomb->IsSetBombFlag(BombClass::IsGPS)))

	cmp	DWORD PTR _TheBomb$[ebp], 0
	je	SHORT $LN11@DropBomb
	push	512					; 00000200H
	mov	ecx, DWORD PTR _TheBomb$[ebp]
	call	?IsSetBombFlag@BombClass@@QAEHH@Z	; BombClass::IsSetBombFlag
	test	eax, eax
	jne	SHORT $LN10@DropBomb
	push	256					; 00000100H
	mov	ecx, DWORD PTR _TheBomb$[ebp]
	call	?IsSetBombFlag@BombClass@@QAEHH@Z	; BombClass::IsSetBombFlag
	test	eax, eax
	je	SHORT $LN11@DropBomb
$LN10@DropBomb:

; 3258 : 						Sms->SetAGBRippleCount (2);

	push	2
	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?SetAGBRippleCount@SMSClass@@QAEXH@Z	; SMSClass::SetAGBRippleCount
	jmp	SHORT $LN7@DropBomb
$LN11@DropBomb:

; 3259 : 					else if (wt >= 1900) // 2000 lb'ers one at a time

	cmp	DWORD PTR _wt$[ebp], 1900		; 0000076cH
	jl	SHORT $LN8@DropBomb

; 3260 : 							Sms->SetAGBRippleCount (1);

	push	1
	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?SetAGBRippleCount@SMSClass@@QAEXH@Z	; SMSClass::SetAGBRippleCount

; 3261 : 					else

	jmp	SHORT $LN7@DropBomb
$LN8@DropBomb:

; 3262 : 						Sms->SetAGBRippleCount (int(Sms->NumCurrentWpn() / 2.0F + 0.5F) - 1);

	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?NumCurrentWpn@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumCurrentWpn
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si ecx, xmm0
	sub	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?SetAGBRippleCount@SMSClass@@QAEXH@Z	; SMSClass::SetAGBRippleCount
$LN7@DropBomb:

; 3263 : 				}
; 3264 : 
; 3265 : 				int rcount = Sms->GetAGBRippleCount() + 1;

	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?GetAGBRippleCount@SMSClass@@QAEHXZ	; SMSClass::GetAGBRippleCount
	add	eax, 1
	mov	DWORD PTR _rcount$1[ebp], eax

; 3266 : 				if (!(rcount & 1)) // If not odd

	mov	edx, DWORD PTR _rcount$1[ebp]
	and	edx, 1
	jne	SHORT $LN6@DropBomb

; 3267 : 					rcount--;

	mov	eax, DWORD PTR _rcount$1[ebp]
	sub	eax, 1
	mov	DWORD PTR _rcount$1[ebp], eax
$LN6@DropBomb:

; 3268 : 
; 3269 : 				if (Sms->GetAGBRippleCount() > 0 && FCC->airGroundRange < (rcount * Sms->GetAGBRippleInterval()) / 2)

	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?GetAGBRippleCount@SMSClass@@QAEHXZ	; SMSClass::GetAGBRippleCount
	test	eax, eax
	jle	SHORT $LN5@DropBomb
	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?GetAGBRippleInterval@SMSClass@@QAEHXZ	; SMSClass::GetAGBRippleInterval
	imul	eax, DWORD PTR _rcount$1[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _FCC$[ebp]
	comiss	xmm0, DWORD PTR [ecx+332]
	jbe	SHORT $LN5@DropBomb

; 3270 : 				{
; 3271 : 					droppingBombs = wcBombWpn;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+236], 2

; 3272 : 					FCC->SetBombReleaseOverride(TRUE);

	push	1
	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?SetBombReleaseOverride@FireControlComputer@@QAEXH@Z ; FireControlComputer::SetBombReleaseOverride

; 3273 : 					onStation = Final1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+132], 16			; 00000010H
$LN5@DropBomb:

; 3274 : 				}
; 3275 : 
; 3276 : 				// 2001-10-24 ADDED BY M.N. Planes can start to circle around their target if we don't do
; 3277 : 				// a range & ata check to the target here.
; 3278 : 
; 3279 : 				if (approxRange < 1.2f * NM_TO_FT && ata > 75.0f * DTR)

	movss	xmm0, DWORD PTR __real@45e3dba1
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	SHORT $LN4@DropBomb
	movss	xmm0, DWORD PTR _ata$[ebp]
	comiss	xmm0, DWORD PTR __real@3fa78d35
	jbe	SHORT $LN4@DropBomb

; 3280 : 				{
; 3281 : 					// Bail and try again
; 3282 : 					AGflyOut();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AGflyOut@DigitalBrain@@IAEXXZ		; DigitalBrain::AGflyOut

; 3283 : 					onStation = Downwind;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+132], 13			; 0000000dH
$LN4@DropBomb:

; 3284 : 
; 3285 : 					//dx = ( self->XPos() - trackX );
; 3286 : 					//dy = ( self->YPos() - trackY );
; 3287 : 					//approxRange = (float)sqrt( dx * dx + dy * dy );
; 3288 : 					//dx /= approxRange;
; 3289 : 					//dy /= approxRange;
; 3290 : 					//ipX = trackX + dy * 5.5f * NM_TO_FT;
; 3291 : 					//ipY = trackY - dx * 5.5f * NM_TO_FT;
; 3292 : 					//ShiAssert (ipX > 0.0F);
; 3293 : 
; 3294 : 					//// Try bombing run again
; 3295 : 					//onStation = Crosswind;
; 3296 : 				}
; 3297 : 				// End of added section
; 3298 : 			}
; 3299 : 			// JB 010708 end
; 3300 : 			else

	jmp	$LN1@DropBomb
$LN15@DropBomb:

; 3301 : 			{
; 3302 : 				// if ( FCC->postDrop)
; 3303 : 				if ( FCC->postDrop && Sms->CurRippleCount() == 0) // JB 010708

	mov	edx, DWORD PTR _FCC$[ebp]
	movsx	eax, BYTE PTR [edx+183]
	test	eax, eax
	je	$LN2@DropBomb
	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?CurRippleCount@SMSClass@@QAEHXZ	; SMSClass::CurRippleCount
	test	eax, eax
	jne	$LN2@DropBomb

; 3304 : 				{
; 3305 : 					FCC->SetBombReleaseOverride(FALSE); // JB 010708

	push	0
	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?SetBombReleaseOverride@FireControlComputer@@QAEXH@Z ; FireControlComputer::SetBombReleaseOverride

; 3306 : 					droppingBombs = wcBombWpn;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+236], 2

; 3307 : 
; 3308 : 					// Out of this weapon, find another/get out of dodge
; 3309 : 					agDoctrine = AGD_LOOK_SHOOT_LOOK;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+244], 2

; 3310 : 					hasRocket = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+192], 0

; 3311 : 					hasGun = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+196], 0

; 3312 : 					hasBomb = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], 0

; 3313 : 					hasGBU = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+204], 0

; 3314 : 
; 3315 : 					// Start over again
; 3316 : 					//madeAGPass = TRUE;
; 3317 : 					//onStation = NotThereYet;
; 3318 : 					madeAGPass = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 1

; 3319 : 					AGflyOut();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AGflyOut@DigitalBrain@@IAEXXZ		; DigitalBrain::AGflyOut

; 3320 : 					// Release current target and target history
; 3321 : 					SetGroundTarget( NULL );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget

; 3322 : 					gndTargetHistory[0] = NULL;

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+452], 0

; 3323 : 					onStation = Downwind;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+132], 13			; 0000000dH
$LN2@DropBomb:

; 3324 : 				}
; 3325 : 				// too close ?
; 3326 : 				// we're within a certain range and our ATA is not good
; 3327 : 				if ( approxRange < 1.2f * NM_TO_FT && ata > 75.0f * DTR)

	movss	xmm0, DWORD PTR __real@45e3dba1
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	SHORT $LN1@DropBomb
	movss	xmm0, DWORD PTR _ata$[ebp]
	comiss	xmm0, DWORD PTR __real@3fa78d35
	jbe	SHORT $LN1@DropBomb

; 3328 : 				{
; 3329 : 					waitingForShot = SimLibElapsedTime + 5000;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 5000				; 00001388H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+496], edx

; 3330 : 					// Bail and try again
; 3331 : 					AGflyOut();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AGflyOut@DigitalBrain@@IAEXXZ		; DigitalBrain::AGflyOut

; 3332 : 					// Release current target and target history
; 3333 : 					//SetGroundTarget( NULL );
; 3334 : 					//gndTargetHistory[0] = NULL;
; 3335 : 					onStation = Downwind;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+132], 13			; 0000000dH
$LN1@DropBomb:
$LN39@DropBomb:

; 3336 : 					//onStation = Final1;
; 3337 : 				}
; 3338 : 			}
; 3339 : 		}
; 3340 : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?DropBomb@DigitalBrain@@IAEXMMPAVRadarClass@@@Z ENDP	; DigitalBrain::DropBomb
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gndattck.cpp
_TEXT	SEGMENT
_FCC$ = -8						; size = 4
_this$ = -4						; size = 4
_approxRange$ = 8					; size = 4
_ata$ = 12						; size = 4
?TakePicture@DigitalBrain@@IAEXMM@Z PROC		; DigitalBrain::TakePicture
; _this$ = ecx

; 3080 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3081 : 		FireControlComputer* FCC = self->FCC;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+936]
	mov	DWORD PTR _FCC$[ebp], edx

; 3082 : 
; 3083 : 		// Go to camera mode
; 3084 : 		if (FCC->GetMasterMode() != FireControlComputer::AirGroundCamera)

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ ; FireControlComputer::GetMasterMode
	cmp	eax, 11					; 0000000bH
	je	SHORT $LN4@TakePictur

; 3085 : 		{
; 3086 : 			//Cobra test
; 3087 : 			self->FCC->SetMasterMode (FireControlComputer::AirGroundCamera);

	push	11					; 0000000bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [ecx+936]
	call	?SetMasterMode@FireControlComputer@@QAEXW4FCCMasterMode@1@@Z ; FireControlComputer::SetMasterMode
$LN4@TakePictur:

; 3088 : 		}
; 3089 : 
; 3090 : 		if ( groundTargetPtr == NULL )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+224], 0
	jne	SHORT $LN3@TakePictur

; 3091 : 		{
; 3092 : 			onStation = Final1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+132], 16			; 00000010H
	jmp	SHORT $LN1@TakePictur
$LN3@TakePictur:

; 3093 : 		}
; 3094 : 		else if ( approxRange < 3.0f * NM_TO_FT && ata < 10.0f * DTR)

	movss	xmm0, DWORD PTR __real@468e6944
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	SHORT $LN1@TakePictur
	movss	xmm0, DWORD PTR __real@3e32b8c1
	comiss	xmm0, DWORD PTR _ata$[ebp]
	jbe	SHORT $LN1@TakePictur

; 3095 : 		{
; 3096 : 			// take picture
; 3097 : 			waitingForShot = SimLibElapsedTime;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [ecx+496], edx

; 3098 : 			onStation = Final1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+132], 16			; 00000010H

; 3099 : 			SetFlag (MslFireFlag);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@BaseBrain@@QAEXH@Z		; BaseBrain::SetFlag
$LN1@TakePictur:

; 3100 : 		}
; 3101 : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?TakePicture@DigitalBrain@@IAEXMM@Z ENDP		; DigitalBrain::TakePicture
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gndattck.cpp
_TEXT	SEGMENT
_simTarg$ = -44						; size = 4
_ret$ = -40						; size = 4
_targetNum$1 = -36					; size = 4
_twp$2 = -32						; size = 4
tv136 = -28						; size = 4
tv95 = -24						; size = 4
_wpTarget$3 = -20					; size = 4
_dwp$ = -16						; size = 4
_campUnit$ = -12					; size = 4
_target$ = -8						; size = 4
_this$ = -4						; size = 4
?SelectCampGroundTarget@DigitalBrain@@IAEXXZ PROC	; DigitalBrain::SelectCampGroundTarget
; _this$ = ecx

; 2331 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 2332 : 		UnitClass *campUnit = (UnitClass *)self->GetCampaignObject();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _campUnit$[ebp], eax

; 2333 : 		FalconEntity *target = NULL;

	mov	DWORD PTR _target$[ebp], 0

; 2334 : 		// int i, numComponents;
; 2335 : 		SimBaseClass *simTarg;
; 2336 : 		WayPointClass *dwp;
; 2337 : 
; 2338 : 		// 2001-07-15 REMOVED BY S.G. THIS IS CLEARED IN THE 'Final' STAGE ONLY
; 2339 : 		//	madeAGPass = FALSE;
; 2340 : 
; 2341 : 		agImprovise = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+240], 0

; 2342 : 
; 2343 : 		// sanity check
; 2344 : 		if ( !campUnit )

	cmp	DWORD PTR _campUnit$[ebp], 0
	jne	SHORT $LN25@SelectCamp

; 2345 : 			return;

	jmp	$LN26@SelectCamp
$LN25@SelectCamp:

; 2346 : 
; 2347 : 		// divert waypoint overrides everything else
; 2348 : 		dwp = ((FlightClass *)campUnit)->GetOverrideWP();

	mov	ecx, DWORD PTR _campUnit$[ebp]
	call	?GetOverrideWP@FlightClass@@QAEPAVWayPointClass@@XZ ; FlightClass::GetOverrideWP
	mov	DWORD PTR _dwp$[ebp], eax

; 2349 : 
; 2350 : 		// check to see if our current ground target is a sim and exploding or
; 2351 : 		// dead, if so let's get a new target from the campaign
; 2352 : 		if ( 
; 2353 : 			groundTargetPtr &&
; 2354 : 			groundTargetPtr->BaseData()->IsSim() &&
; 2355 : 			( 
; 2356 : 				groundTargetPtr->BaseData()->IsExploding() ||
; 2357 : 				groundTargetPtr->BaseData()->IsDead() ||
; 2358 : 				!((SimBaseClass *)groundTargetPtr->BaseData())->IsAwake() 
; 2359 : 			)
; 2360 : 		){

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+224], 0
	je	$LN24@SelectCamp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN24@SelectCamp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv95[ebp], eax
	mov	edx, DWORD PTR tv95[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv95[ebp]
	mov	edx, DWORD PTR [eax+208]
	call	edx
	test	eax, eax
	jne	SHORT $LN23@SelectCamp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv136[ebp], eax
	mov	ecx, DWORD PTR tv136[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv136[ebp]
	mov	eax, DWORD PTR [edx+212]
	call	eax
	test	eax, eax
	jne	SHORT $LN23@SelectCamp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsAwake@SimBaseClass@@QBEHXZ		; SimBaseClass::IsAwake
	test	eax, eax
	jne	SHORT $LN24@SelectCamp
$LN23@SelectCamp:

; 2361 : 			SetGroundTarget( NULL );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget
$LN24@SelectCamp:

; 2362 : 		}
; 2363 : 
; 2364 : 		// see if we've already got a target
; 2365 : 		if ( groundTargetPtr )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+224], 0
	je	$LN22@SelectCamp

; 2366 : 		{
; 2367 : 			target = groundTargetPtr->BaseData();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR _target$[ebp], eax

; 2368 : 
; 2369 : 			// is it a campaign object? if not we can return....
; 2370 : 			if (target->IsSim() )

	mov	ecx, DWORD PTR _target$[ebp]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN21@SelectCamp

; 2371 : 			{
; 2372 : 				return;

	jmp	$LN26@SelectCamp
$LN21@SelectCamp:

; 2373 : 			}
; 2374 : 
; 2375 : 			// itsa campaign object.  Check to see if its deagg'd
; 2376 : 			if (((CampBaseClass*)target)->IsAggregate() )

	mov	ecx, DWORD PTR _target$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	je	SHORT $LN20@SelectCamp

; 2377 : 			{
; 2378 : 				// still aggregated, return
; 2379 : 				return;

	jmp	$LN26@SelectCamp
$LN20@SelectCamp:

; 2380 : 			}
; 2381 : 
; 2382 : 			// the campaign object is now deaggregated, choose a sim entity
; 2383 : 			// to target on it
; 2384 : 			// 2001-04-11 MODIFIED BY S.G. SO LEAD USES THE ASSIGNED TARGET IF IT'S AN OBJECTIVE AND MAKES A BETTER SELECTION ON MOVERS
; 2385 : 			/*		numComponents = ((CampBaseClass*)target)->NumberOfComponents();
; 2386 : 
; 2387 : 					for ( i = 0; i < numComponents; i++ )
; 2388 : 					{
; 2389 : 					simTarg = ((CampBaseClass*)target)->GetComponentEntity( rand() % numComponents );
; 2390 : 					if ( !simTarg ) //sanity check
; 2391 : 					continue;
; 2392 : 
; 2393 : 			// don't target runways (yet)
; 2394 : 			if ( // !simTarg->IsSetCampaignFlag (FEAT_FLAT_CONTAINER) &&
; 2395 : 			!simTarg->IsExploding() &&
; 2396 : 			!simTarg->IsDead() &&
; 2397 : 			simTarg->pctStrength > 0.0f )
; 2398 : 			{
; 2399 : 			SetGroundTarget( simTarg );
; 2400 : 			break;
; 2401 : 			}
; 2402 : 			} // end for # components
; 2403 : 			*/
; 2404 : 
; 2405 : 			// RV - RED - Wrong Building Fix - Default to Assigned Building
; 2406 : 			int targetNum = self->curWaypoint->GetWPTargetBuilding();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+728]
	call	?GetWPTargetBuilding@WayPointClass@@QAEEXZ ; WayPointClass::GetWPTargetBuilding
	movzx	eax, al
	mov	DWORD PTR _targetNum$1[ebp], eax

; 2407 : 			// int targetNum = 0;
; 2408 : 
; 2409 : 			// First, the lead will go for the assigned target, if any...
; 2410 : 			if (!isWing && target->IsObjective()) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jne	$LN19@SelectCamp
	mov	edx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax+236]
	call	edx
	test	eax, eax
	je	SHORT $LN19@SelectCamp

; 2411 : 				FalconEntity *wpTarget = NULL;		

	mov	DWORD PTR _wpTarget$3[ebp], 0

; 2412 : 				WayPointClass *twp = self->curWaypoint;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+728]
	mov	DWORD PTR _twp$2[ebp], edx

; 2413 : 
; 2414 : 				// First prioritize the divert waypoint target
; 2415 : 				if (dwp)

	cmp	DWORD PTR _dwp$[ebp], 0
	je	SHORT $LN18@SelectCamp

; 2416 : 					wpTarget = dwp->GetWPTarget();

	mov	ecx, DWORD PTR _dwp$[ebp]
	call	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
	mov	DWORD PTR _wpTarget$3[ebp], eax
$LN18@SelectCamp:

; 2417 : 
; 2418 : 				// If wpTarget is not NULL, our waypoint will be the divert waypoint
; 2419 : 				if (wpTarget)

	cmp	DWORD PTR _wpTarget$3[ebp], 0
	je	SHORT $LN17@SelectCamp

; 2420 : 					twp = dwp;

	mov	eax, DWORD PTR _dwp$[ebp]
	mov	DWORD PTR _twp$2[ebp], eax

; 2421 : 				else {

	jmp	SHORT $LN16@SelectCamp
$LN17@SelectCamp:

; 2422 : 					// Our target will be the current waypoint target if any
; 2423 : 					if (self->curWaypoint)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	cmp	DWORD PTR [edx+728], 0
	je	SHORT $LN16@SelectCamp

; 2424 : 						wpTarget = self->curWaypoint->GetWPTarget();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [ecx+728]
	call	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
	mov	DWORD PTR _wpTarget$3[ebp], eax
$LN16@SelectCamp:

; 2425 : 				}
; 2426 : 
; 2427 : 				// If we have a waypoint target and it is our current target
; 2428 : 				if (wpTarget && wpTarget == target)

	cmp	DWORD PTR _wpTarget$3[ebp], 0
	je	SHORT $LN19@SelectCamp
	mov	edx, DWORD PTR _wpTarget$3[ebp]
	cmp	edx, DWORD PTR _target$[ebp]
	jne	SHORT $LN19@SelectCamp

; 2429 : 					// Our feature is the one assigned to us by the mission planner
; 2430 : 					targetNum = twp->GetWPTargetBuilding();

	mov	ecx, DWORD PTR _twp$2[ebp]
	call	?GetWPTargetBuilding@WayPointClass@@QAEEXZ ; WayPointClass::GetWPTargetBuilding
	movzx	eax, al
	mov	DWORD PTR _targetNum$1[ebp], eax
$LN19@SelectCamp:

; 2431 : 			}
; 2432 : 
; 2433 : 			// Use our helper function
; 2434 : 			simTarg = FindSimGroundTarget((CampBaseClass*)target, ((CampBaseClass*)target)->NumberOfComponents(), targetNum);

	mov	ecx, DWORD PTR _targetNum$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _target$[ebp]
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	push	eax
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindSimGroundTarget@DigitalBrain@@AAEPAVSimBaseClass@@PAVCampBaseClass@@HH@Z ; DigitalBrain::FindSimGroundTarget
	mov	DWORD PTR _simTarg$[ebp], eax

; 2435 : 
; 2436 : 			// Hopefully, we have one...
; 2437 : 			SetGroundTarget(simTarg);

	mov	eax, DWORD PTR _simTarg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget

; 2438 : 			// END OF ADDED SECTION
; 2439 : 
; 2440 : 			return;

	jmp	$LN26@SelectCamp
$LN22@SelectCamp:

; 2441 : 
; 2442 : 		} // end if already targetPtr
; 2443 : 
; 2444 : 		// priority goes to the waypoint target
; 2445 : 		if ( dwp )

	cmp	DWORD PTR _dwp$[ebp], 0
	je	SHORT $LN13@SelectCamp

; 2446 : 		{
; 2447 : 			target = dwp->GetWPTarget();

	mov	ecx, DWORD PTR _dwp$[ebp]
	call	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
	mov	DWORD PTR _target$[ebp], eax

; 2448 : 			if ( !target )

	cmp	DWORD PTR _target$[ebp], 0
	jne	SHORT $LN12@SelectCamp

; 2449 : 			{
; 2450 : 				dwp = NULL;

	mov	DWORD PTR _dwp$[ebp], 0

; 2451 : 				if ( self->curWaypoint )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	cmp	DWORD PTR [edx+728], 0
	je	SHORT $LN12@SelectCamp

; 2452 : 				{
; 2453 : 					target = self->curWaypoint->GetWPTarget();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [ecx+728]
	call	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
	mov	DWORD PTR _target$[ebp], eax
$LN12@SelectCamp:

; 2454 : 				}
; 2455 : 			}
; 2456 : 		}

	jmp	SHORT $LN10@SelectCamp
$LN13@SelectCamp:

; 2457 : 		else if ( self->curWaypoint )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	cmp	DWORD PTR [eax+728], 0
	je	SHORT $LN10@SelectCamp

; 2458 : 		{
; 2459 : 			target = self->curWaypoint->GetWPTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+728]
	call	?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ; WayPointClass::GetWPTarget
	mov	DWORD PTR _target$[ebp], eax
$LN10@SelectCamp:

; 2460 : 		}
; 2461 : 
; 2462 : 		if ( target && target->OnGround() )

	cmp	DWORD PTR _target$[ebp], 0
	je	SHORT $LN8@SelectCamp
	mov	eax, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	je	SHORT $LN8@SelectCamp

; 2463 : 		{
; 2464 : 			SetGroundTarget( target );

	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget

; 2465 : 			return;

	jmp	$LN26@SelectCamp
$LN8@SelectCamp:

; 2466 : 		}
; 2467 : 
; 2468 : 
; 2469 : 		// at this point we have no target, we're going to ask the campaign
; 2470 : 		// to find out what we're supposed to hit
; 2471 : 
; 2472 : 		// tell unit we haven't done any checking on it yet
; 2473 : 		campUnit->UnsetChecked();

	mov	ecx, DWORD PTR _campUnit$[ebp]
	call	?UnsetChecked@CampBaseClass@@QAEXXZ	; CampBaseClass::UnsetChecked

; 2474 : 
; 2475 : 		// choose target.  I assume if this returns 0, no target....
; 2476 : 		// 2001-06-09 MODIFIED BY S.G. NEED TO SEE IF WE ARE CHANGING CAMPAIGN TARGET AND ON A SEAD ESCORT MISSION. IF SO, DEAL WITH IT
; 2477 : 		/*	if ( !campUnit->ChooseTarget() )
; 2478 : 			{
; 2479 : 		// alternately try and choose the waypoint's target
; 2480 : 		// SetGroundTarget( self->curWaypoint->GetWPTarget() );
; 2481 : 		return;
; 2482 : 		}
; 2483 : 
; 2484 : 		// get the target
; 2485 : 		target = campUnit->GetTarget();
; 2486 : 		*/
; 2487 : 		// Choose and get this target
; 2488 : 		int ret;
; 2489 : 		ret = campUnit->ChooseTarget();

	mov	edx, DWORD PTR _campUnit$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _campUnit$[ebp]
	mov	edx, DWORD PTR [eax+524]
	call	edx
	mov	DWORD PTR _ret$[ebp], eax

; 2490 : 		target = campUnit->GetTarget();

	mov	ecx, DWORD PTR _campUnit$[ebp]
	call	?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ ; UnitClass::GetTarget
	mov	DWORD PTR _target$[ebp], eax

; 2491 : 
; 2492 : 		// If ChooseTarget returned FALSE or we changed campaign target and we're the lead  (but we must had a previous campaign target first)
; 2493 : 		if (!isWing && lastGndCampTarget && (!ret || target != lastGndCampTarget)) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	$LN7@SelectCamp
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+460], 0
	je	$LN7@SelectCamp
	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN6@SelectCamp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR [edx+460]
	je	$LN7@SelectCamp
$LN6@SelectCamp:

; 2494 : 			agDoctrine = AGD_NONE;														// Need to setup our next ground attack

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+244], 0

; 2495 : 			onStation = NotThereYet;													// Need to do a new pass next time

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+132], 0

; 2496 : 			sentWingAGAttack = AG_ORDER_NONE;											// Next time, direct wingmen on target

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+232], 0

; 2497 : 			lastGndCampTarget = NULL;													// No previous campaign target

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+460], 0

; 2498 : 			if (self->GetCampaignObject()->NumberOfComponents() > 1)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	cmp	eax, 1
	jle	SHORT $LN5@SelectCamp

; 2499 : 			{
; 2500 : 				AiSendCommand (self, FalconWingmanMsg::WMWedge, AiFlight, FalconNullId);	// Ask wingmen to resume a wedge formation

	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	ecx
	push	2
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	?AiSendCommand@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z ; AiSendCommand
	add	esp, 20					; 00000014H

; 2501 : 				AiSendCommand (self, FalconWingmanMsg::WMRejoin, AiFlight, FalconNullId);	// Ask wingmen to rejoin

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	23					; 00000017H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	?AiSendCommand@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z ; AiSendCommand
	add	esp, 20					; 00000014H

; 2502 : 				AiSendCommand (self, FalconWingmanMsg::WMCoverMode, AiFlight, FalconNullId);// And stop what they were doing

	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	eax
	push	2
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	?AiSendCommand@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z ; AiSendCommand
	add	esp, 20					; 00000014H
$LN5@SelectCamp:

; 2503 : 			}
; 2504 : 		}
; 2505 : 		else

	jmp	SHORT $LN4@SelectCamp
$LN7@SelectCamp:

; 2506 : 			// Keep track of this campaign target
; 2507 : 			lastGndCampTarget = (CampBaseClass *)target;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+460], ecx
$LN4@SelectCamp:

; 2508 : 
; 2509 : 		if (!ret)

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN3@SelectCamp

; 2510 : 			return;

	jmp	SHORT $LN26@SelectCamp
$LN3@SelectCamp:

; 2511 : 
; 2512 : 		// END OF MODIFIED SECTION
; 2513 : 
; 2514 : 		// get tactic -- not doing anything with it now
; 2515 : 		campUnit->ChooseTactic();

	mov	edx, DWORD PTR _campUnit$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _campUnit$[ebp]
	mov	edx, DWORD PTR [eax+496]
	call	edx

; 2516 : 		campTactic = campUnit->GetUnitTactic();

	mov	ecx, DWORD PTR _campUnit$[ebp]
	call	?GetUnitTactic@UnitClass@@QBEHXZ	; UnitClass::GetUnitTactic
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], eax

; 2517 : 
; 2518 : 		// sanity check and make sure its on ground, what to do if not?!...
; 2519 : 		if ( !target ||
; 2520 : 				!target->OnGround() ||
; 2521 : 				(campTactic != ATACTIC_ENGAGE_STRIKE &&
; 2522 : 				 campTactic != ATACTIC_ENGAGE_SURFACE &&
; 2523 : 				 campTactic != ATACTIC_ENGAGE_DEF &&
; 2524 : 				 campTactic != ATACTIC_ENGAGE_NAVAL ) )

	cmp	DWORD PTR _target$[ebp], 0
	je	SHORT $LN1@SelectCamp
	mov	edx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR [eax+148]
	call	edx
	test	eax, eax
	je	SHORT $LN1@SelectCamp
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+52], 4
	je	SHORT $LN2@SelectCamp
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+52], 5
	je	SHORT $LN2@SelectCamp
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+52], 8
	je	SHORT $LN2@SelectCamp
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+52], 6
	je	SHORT $LN2@SelectCamp
$LN1@SelectCamp:

; 2525 : 			return;

	jmp	SHORT $LN26@SelectCamp
$LN2@SelectCamp:

; 2526 : 
; 2527 : 
; 2528 : 		// set it as our target
; 2529 : 		SetGroundTarget( target );

	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget
$LN26@SelectCamp:

; 2530 : 
; 2531 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?SelectCampGroundTarget@DigitalBrain@@IAEXXZ ENDP	; DigitalBrain::SelectCampGroundTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gndattck.cpp
_TEXT	SEGMENT
$T2 = -80						; size = 4
tv227 = -76						; size = 4
$T3 = -72						; size = 4
$T4 = -68						; size = 4
_dwp$ = -64						; size = 4
_campUnit$ = -60					; size = 4
tv143 = -56						; size = 4
_relation$ = -52					; size = 4
_cwp$ = -48						; size = 4
$T5 = -44						; size = 4
_gridIt$ = -40						; size = 4
_this$ = -36						; size = 4
_campTarg$ = -32					; size = 4
_pos$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_targetFilter$ = 8					; size = 4
?SelectGroundTarget@DigitalBrain@@IAEXH@Z PROC		; DigitalBrain::SelectGroundTarget
; _this$ = ecx

; 2002 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SelectGroundTarget@DigitalBrain@@IAEXH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2003 : 	CampBaseClass* campTarg;
; 2004 : 	Tpoint pos;
; 2005 : 	VuGridIterator* gridIt = NULL;

	mov	DWORD PTR _gridIt$[ebp], 0

; 2006 : 	UnitClass *campUnit = (UnitClass *)self->GetCampaignObject();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _campUnit$[ebp], eax

; 2007 : 	WayPointClass *dwp, *cwp;
; 2008 : 	int relation;
; 2009 : 
; 2010 : 	// No targeting when RTB
; 2011 : 	if (curMode == RTBMode)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+136], 19			; 00000013H
	jne	SHORT $LN12@SelectGrou

; 2012 : 	{
; 2013 : 		SetGroundTarget( NULL );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget

; 2014 : 		return;

	jmp	$LN13@SelectGrou
$LN12@SelectGrou:

; 2015 : 	}
; 2016 : 
; 2017 : 	// 1st let camp select target
; 2018 : 	SelectCampGroundTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectCampGroundTarget@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectCampGroundTarget

; 2019 : 
; 2020 : 
; 2021 : 	// if we've got one we're done
; 2022 : 	if ( groundTargetPtr )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+224], 0
	je	SHORT $LN11@SelectGrou

; 2023 : 		return;

	jmp	$LN13@SelectGrou
$LN11@SelectGrou:

; 2024 : 
; 2025 : 	// if we're not on interdiction type mission, return....
; 2026 : 	//Cobra: We want to let the AI target as necessary when weapons free
; 2027 : 	/*if ( missionType != AMIS_SAD && missionType != AMIS_INT && missionType != AMIS_BAI )
; 2028 : 	  return;*/
; 2029 : 
; 2030 : 	if ( !campUnit )

	cmp	DWORD PTR _campUnit$[ebp], 0
	jne	SHORT $LN10@SelectGrou

; 2031 : 		return;

	jmp	$LN13@SelectGrou
$LN10@SelectGrou:

; 2032 : 
; 2033 : 	// divert waypoint overrides everything else
; 2034 : 	dwp = ((FlightClass *)campUnit)->GetOverrideWP();

	mov	ecx, DWORD PTR _campUnit$[ebp]
	call	?GetOverrideWP@FlightClass@@QAEPAVWayPointClass@@XZ ; FlightClass::GetOverrideWP
	mov	DWORD PTR _dwp$[ebp], eax

; 2035 : 	if ( !dwp )

	cmp	DWORD PTR _dwp$[ebp], 0
	jne	SHORT $LN9@SelectGrou

; 2036 : 		cwp = self->curWaypoint;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+728]
	mov	DWORD PTR _cwp$[ebp], edx

; 2037 : 	else

	jmp	SHORT $LN8@SelectGrou
$LN9@SelectGrou:

; 2038 : 		cwp = dwp;

	mov	eax, DWORD PTR _dwp$[ebp]
	mov	DWORD PTR _cwp$[ebp], eax
$LN8@SelectGrou:

; 2039 : 
; 2040 : 	/*if ( !cwp || cwp->GetWPAction() != WP_SAD )
; 2041 : 	  return;*/ //Cobra, remove this so that we can attack regardless 
; 2042 : 
; 2043 : 
; 2044 : 	// choose how we are going to attack and whom....
; 2045 : 	cwp->GetLocation ( &pos.x, &pos.y, &pos.z );

	lea	ecx, DWORD PTR _pos$[ebp+8]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp+4]
	push	edx
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cwp$[ebp]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation

; 2046 : 
; 2047 : #ifdef VU_GRID_TREE_Y_MAJOR
; 2048 : 	gridIt = new VuGridIterator(RealUnitProxList, pos.y, pos.x, 5.0F * NM_TO_FT);

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN15@SelectGrou
	push	ecx
	movss	xmm0, DWORD PTR __real@46ed5a1c
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?RealUnitProxList@@3PAVVuGridTree@@A ; RealUnitProxList
	push	ecx
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z ; VuGridIterator::VuGridIterator
	mov	DWORD PTR tv143[ebp], eax
	jmp	SHORT $LN16@SelectGrou
$LN15@SelectGrou:
	mov	DWORD PTR tv143[ebp], 0
$LN16@SelectGrou:
	mov	edx, DWORD PTR tv143[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _gridIt$[ebp], eax

; 2049 : #else
; 2050 : 	gridIt = new VuGridIterator(RealUnitProxList, pos.x, pos.y, 5.0F * NM_TO_FT);
; 2051 : #endif
; 2052 : 
; 2053 : 
; 2054 : 	// get the 1st objective that contains the bomb
; 2055 : 	campTarg = (CampBaseClass*)gridIt->GetFirst();

	mov	ecx, DWORD PTR _gridIt$[ebp]
	call	?GetFirst@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetFirst
	mov	DWORD PTR _campTarg$[ebp], eax
$LN20@SelectGrou:

; 2056 : 	while ( campTarg != NULL )

	cmp	DWORD PTR _campTarg$[ebp], 0
	je	$LN6@SelectGrou

; 2057 : 	{
; 2058 : 		if (campTarg->IsAirplane()||campTarg->IsFlight())//Cobra

	mov	ecx, DWORD PTR _campTarg$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _campTarg$[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	jne	SHORT $LN4@SelectGrou
	mov	ecx, DWORD PTR _campTarg$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _campTarg$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN5@SelectGrou
$LN4@SelectGrou:

; 2059 : 		{
; 2060 : 			campTarg = (CampBaseClass*)gridIt->GetNext();

	mov	ecx, DWORD PTR _gridIt$[ebp]
	call	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetNext
	mov	DWORD PTR _campTarg$[ebp], eax

; 2061 : 			continue;

	jmp	SHORT $LN20@SelectGrou
$LN5@SelectGrou:

; 2062 : 		}
; 2063 : 		relation = TeamInfo[self->GetTeam()]->TStance(campTarg->GetTeam());

	mov	ecx, DWORD PTR _campTarg$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _campTarg$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	call	?TStance@TeamClass@@QAEHE@Z		; TeamClass::TStance
	mov	DWORD PTR _relation$[ebp], eax

; 2064 : 		if ( relation == Hostile || relation == War)

	cmp	DWORD PTR _relation$[ebp], 4
	je	SHORT $LN2@SelectGrou
	cmp	DWORD PTR _relation$[ebp], 5
	jne	SHORT $LN3@SelectGrou
$LN2@SelectGrou:

; 2065 : 		{
; 2066 : 			break;

	jmp	SHORT $LN6@SelectGrou
$LN3@SelectGrou:

; 2067 : 		}
; 2068 : 		campTarg = (CampBaseClass*)gridIt->GetNext();

	mov	ecx, DWORD PTR _gridIt$[ebp]
	call	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetNext
	mov	DWORD PTR _campTarg$[ebp], eax

; 2069 : 	}

	jmp	$LN20@SelectGrou
$LN6@SelectGrou:

; 2070 : 
; 2071 : 	SetGroundTarget( campTarg );

	mov	edx, DWORD PTR _campTarg$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget

; 2072 : 
; 2073 : 	if (gridIt)

	cmp	DWORD PTR _gridIt$[ebp], 0
	je	SHORT $LN18@SelectGrou

; 2074 : 		delete gridIt;

	mov	eax, DWORD PTR _gridIt$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T5[ebp], ecx
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN17@SelectGrou
	push	1
	mov	edx, DWORD PTR $T5[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T5[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	mov	DWORD PTR tv227[ebp], eax
	jmp	SHORT $LN18@SelectGrou
$LN17@SelectGrou:
	mov	DWORD PTR tv227[ebp], 0
$LN18@SelectGrou:
$LN13@SelectGrou:

; 2075 : 	return;
; 2076 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SelectGroundTarget@DigitalBrain@@IAEXH@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SelectGroundTarget@DigitalBrain@@IAEXH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SelectGroundTarget@DigitalBrain@@IAEXH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SelectGroundTarget@DigitalBrain@@IAEXH@Z ENDP		; DigitalBrain::SelectGroundTarget
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gndattck.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
?SetGroundTargetPtr@DigitalBrain@@IAEXPAVSimObjectType@@@Z PROC ; DigitalBrain::SetGroundTargetPtr
; _this$ = ecx

; 1963 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1964 : 	if ( obj != NULL )

	cmp	DWORD PTR _obj$[ebp], 0
	je	SHORT $LN6@SetGroundT

; 1965 : 	{
; 1966 : 		if ( groundTargetPtr != NULL )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+224], 0
	je	SHORT $LN5@SetGroundT

; 1967 : 		{
; 1968 : 			// release existing target data if different object
; 1969 : 			if ( groundTargetPtr != obj )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+224]
	cmp	edx, DWORD PTR _obj$[ebp]
	je	SHORT $LN4@SetGroundT

; 1970 : 			{
; 1971 : 				groundTargetPtr->Release(  );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?Release@SimObjectType@@QAEXXZ		; SimObjectType::Release

; 1972 : 				groundTargetPtr = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+224], 0

; 1973 : 			}
; 1974 : 			else

	jmp	SHORT $LN5@SetGroundT
$LN4@SetGroundT:

; 1975 : 			{
; 1976 : 				// already targeting this object
; 1977 : 				return;

	jmp	SHORT $LN7@SetGroundT
$LN5@SetGroundT:

; 1978 : 			}
; 1979 : 		}
; 1980 : 
; 1981 : 
; 1982 : 		// set and reference
; 1983 : 		groundTargetPtr = obj;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+224], eax

; 1984 : 		groundTargetPtr->Reference(  );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?Reference@SimObjectType@@QAEXXZ	; SimObjectType::Reference

; 1985 : 		// SetTarget( groundTargetPtr );
; 1986 : 	}
; 1987 : 	else // obj is null

	jmp	SHORT $LN7@SetGroundT
$LN6@SetGroundT:

; 1988 : 	{
; 1989 : 		if ( groundTargetPtr != NULL )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+224], 0
	je	SHORT $LN7@SetGroundT

; 1990 : 		{
; 1991 : 			groundTargetPtr->Release(  );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?Release@SimObjectType@@QAEXXZ		; SimObjectType::Release

; 1992 : 			groundTargetPtr = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+224], 0
$LN7@SetGroundT:

; 1993 : 		}
; 1994 : 	}
; 1995 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetGroundTargetPtr@DigitalBrain@@IAEXPAVSimObjectType@@@Z ENDP ; DigitalBrain::SetGroundTargetPtr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gndattck.cpp
_TEXT	SEGMENT
$T2 = -28						; size = 4
tv83 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_obj$ = 8						; size = 4
?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z PROC ; DigitalBrain::SetGroundTarget
; _this$ = ecx

; 1930 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1931 : 	if (obj != NULL){

	cmp	DWORD PTR _obj$[ebp], 0
	je	$LN6@SetGroundT

; 1932 : 		if (groundTargetPtr != NULL){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+224], 0
	je	SHORT $LN5@SetGroundT

; 1933 : 			// release existing target data if different object
; 1934 : 			if (groundTargetPtr->BaseData() != obj){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	eax, DWORD PTR _obj$[ebp]
	je	SHORT $LN4@SetGroundT

; 1935 : 				groundTargetPtr->Release();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?Release@SimObjectType@@QAEXXZ		; SimObjectType::Release

; 1936 : 				groundTargetPtr = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+224], 0

; 1937 : 			}
; 1938 : 			else {

	jmp	SHORT $LN5@SetGroundT
$LN4@SetGroundT:

; 1939 : 				// already targeting this object
; 1940 : 				return;

	jmp	$LN7@SetGroundT
$LN5@SetGroundT:

; 1941 : 			}
; 1942 : 		}
; 1943 : 
; 1944 : 		// create new target data and reference it
; 1945 : 		groundTargetPtr = new SimObjectType(obj);

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN9@SetGroundT
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0SimObjectType@@QAE@PAVFalconEntity@@@Z ; SimObjectType::SimObjectType
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN10@SetGroundT
$LN9@SetGroundT:
	mov	DWORD PTR tv83[ebp], 0
$LN10@SetGroundT:
	mov	edx, DWORD PTR tv83[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax+224], ecx

; 1946 : 		groundTargetPtr->Reference();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?Reference@SimObjectType@@QAEXXZ	; SimObjectType::Reference

; 1947 : 		// SetTarget( groundTargetPtr );
; 1948 : 	}
; 1949 : 	else {// obj is null

	jmp	SHORT $LN7@SetGroundT
$LN6@SetGroundT:

; 1950 : 		if (groundTargetPtr != NULL){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+224], 0
	je	SHORT $LN7@SetGroundT

; 1951 : 			groundTargetPtr->Release();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?Release@SimObjectType@@QAEXXZ		; SimObjectType::Release

; 1952 : 			groundTargetPtr = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+224], 0
$LN7@SetGroundT:

; 1953 : 		}
; 1954 : 	}
; 1955 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ENDP ; DigitalBrain::SetGroundTarget
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\digi\gndattck.cpp
_TEXT	SEGMENT
$T1 = -1080						; size = 8
$T2 = -1072						; size = 8
$T3 = -1064						; size = 8
$T4 = -1056						; size = 8
$T5 = -1048						; size = 8
$T6 = -1040						; size = 8
_approxRange$7 = -1032					; size = 4
_z$8 = -1028						; size = 4
_tempWeapon$9 = -1024					; size = 4
tv6378 = -1020						; size = 4
tv4118 = -1016						; size = 4
tv5123 = -1012						; size = 4
tv4872 = -1008						; size = 4
tv6370 = -1004						; size = 4
tv4808 = -1000						; size = 4
tv5079 = -996						; size = 4
tv6294 = -992						; size = 4
tv6374 = -988						; size = 4
_myAlt$10 = -984					; size = 4
_usComponents$11 = -980					; size = 4
tv5237 = -976						; size = 4
tv4649 = -972						; size = 4
tv6251 = -968						; size = 4
tv4535 = -964						; size = 4
tv6242 = -960						; size = 4
tv4440 = -956						; size = 4
tv6153 = -952						; size = 4
tv6388 = -948						; size = 4
tv6138 = -944						; size = 4
tv5103 = -940						; size = 4
tv6129 = -936						; size = 4
tv5054 = -932						; size = 4
tv6430 = -928						; size = 4
tv6376 = -924						; size = 4
tv6117 = -920						; size = 4
tv4948 = -916						; size = 4
tv6109 = -912						; size = 4
tv6368 = -908						; size = 4
tv6099 = -904						; size = 4
tv4826 = -900						; size = 4
tv6428 = -896						; size = 4
tv4736 = -892						; size = 4
tv6094 = -888						; size = 4
tv4597 = -884						; size = 4
tv6089 = -880						; size = 4
tv4556 = -876						; size = 4
tv6426 = -872						; size = 4
tv4520 = -868						; size = 4
tv6084 = -864						; size = 4
tv4469 = -860						; size = 4
tv6079 = -856						; size = 4
tv5251 = -852						; size = 4
tv6424 = -848						; size = 4
tv5231 = -844						; size = 4
tv6038 = -840						; size = 4
tv6386 = -836						; size = 4
tv6030 = -832						; size = 4
tv6384 = -828						; size = 4
tv6020 = -824						; size = 4
tv5098 = -820						; size = 4
tv6422 = -816						; size = 4
tv5067 = -812						; size = 4
tv6015 = -808						; size = 4
tv5049 = -804						; size = 4
tv6010 = -800						; size = 4
tv5024 = -796						; size = 4
tv6420 = -792						; size = 4
tv4973 = -788						; size = 4
tv6005 = -784						; size = 4
tv4953 = -780						; size = 4
tv6000 = -776						; size = 4
tv4929 = -772						; size = 4
tv5989 = -768						; size = 4
tv4897 = -764						; size = 4
tv5983 = -760						; size = 4
tv4877 = -756						; size = 4
tv5977 = -752						; size = 4
tv4838 = -748						; size = 4
tv5967 = -744						; size = 4
tv4813 = -740						; size = 4
tv6418 = -736						; size = 4
tv6298 = -732						; size = 4
tv5962 = -728						; size = 4
tv4683 = -724						; size = 4
tv5957 = -720						; size = 4
tv4613 = -716						; size = 4
tv6416 = -712						; size = 4
tv4592 = -708						; size = 4
tv5952 = -704						; size = 4
tv4577 = -700						; size = 4
tv5925 = -696						; size = 4
tv4540 = -692						; size = 4
tv5899 = -688						; size = 4
tv6290 = -684						; size = 4
tv5890 = -680						; size = 4
tv4498 = -676						; size = 4
tv5739 = -672						; size = 4
tv6288 = -668						; size = 4
tv5732 = -664						; size = 4
tv4464 = -660						; size = 4
tv5725 = -656						; size = 4
tv5261 = -652						; size = 4
tv6414 = -648						; size = 4
tv5246 = -644						; size = 4
tv5704 = -640						; size = 4
tv6390 = -636						; size = 4
tv5696 = -632						; size = 4
tv5226 = -628						; size = 4
tv5686 = -624						; size = 4
tv5220 = -620						; size = 4
tv6412 = -616						; size = 4
tv5131 = -612						; size = 4
tv5681 = -608						; size = 4
tv5113 = -604						; size = 4
tv5676 = -600						; size = 4
tv5108 = -596						; size = 4
tv6410 = -592						; size = 4
tv6382 = -588						; size = 4
tv5671 = -584						; size = 4
tv5093 = -580						; size = 4
tv5666 = -576						; size = 4
tv5073 = -572						; size = 4
tv6408 = -568						; size = 4
_myAlt$12 = -564					; size = 4
tv5613 = -560						; size = 4
tv6380 = -556						; size = 4
tv5605 = -552						; size = 4
tv5044 = -548						; size = 4
tv5595 = -544						; size = 4
tv4112 = -540						; size = 4
tv6406 = -536						; size = 4
tv5015 = -532						; size = 4
tv5590 = -528						; size = 4
tv4981 = -524						; size = 4
tv5585 = -520						; size = 4
tv4963 = -516						; size = 4
tv6404 = -512						; size = 4
tv4958 = -508						; size = 4
tv5580 = -504						; size = 4
tv6372 = -500						; size = 4
tv5575 = -496						; size = 4
tv4943 = -492						; size = 4
tv5555 = -488						; size = 4
tv4923 = -484						; size = 4
tv5549 = -480						; size = 4
tv4905 = -476						; size = 4
tv5543 = -472						; size = 4
tv4887 = -468						; size = 4
_myAlt$13 = -464					; size = 4
tv4882 = -460						; size = 4
tv5530 = -456						; size = 4
tv6302 = -452						; size = 4
tv6402 = -448						; size = 4
tv4867 = -444						; size = 4
tv5525 = -440						; size = 4
tv4832 = -436						; size = 4
tv5520 = -432						; size = 4
_myAlt$14 = -428					; size = 4
tv6400 = -424						; size = 4
tv6300 = -420						; size = 4
tv5515 = -416						; size = 4
tv4803 = -412						; size = 4
tv5509 = -408						; size = 4
tv4798 = -404						; size = 4
tv5499 = -400						; size = 4
tv4690 = -396						; size = 4
tv5493 = -392						; size = 4
tv4676 = -388						; size = 4
tv5487 = -384						; size = 4
tv4640 = -380						; size = 4
_myAlt$15 = -376					; size = 4
tv4607 = -372						; size = 4
tv5474 = -368						; size = 4
tv6296 = -364						; size = 4
tv6398 = -360						; size = 4
tv4587 = -356						; size = 4
tv5469 = -352						; size = 4
tv4582 = -348						; size = 4
tv5464 = -344						; size = 4
tv4569 = -340						; size = 4
tv6396 = -336						; size = 4
tv4550 = -332						; size = 4
tv5459 = -328						; size = 4
tv6292 = -324						; size = 4
tv5454 = -320						; size = 4
tv4530 = -316						; size = 4
tv5309 = -312						; size = 4
tv4525 = -308						; size = 4
tv6394 = -304						; size = 4
tv4504 = -300						; size = 4
tv5304 = -296						; size = 4
tv4492 = -292						; size = 4
tv5299 = -288						; size = 4
tv4479 = -284						; size = 4
tv6392 = -280						; size = 4
tv4474 = -276						; size = 4
tv5294 = -272						; size = 4
tv6286 = -268						; size = 4
tv5289 = -264						; size = 4
tv4449 = -260						; size = 4
tv5281 = -256						; size = 4
tv5268 = -252						; size = 4
tv5039 = -248						; size = 4
tv406 = -244						; size = 4
tv1290 = -240						; size = 4
tv397 = -236						; size = 4
tv2383 = -232						; size = 4
_theBomb$ = -228					; size = 4
tv604 = -224						; size = 4
tv3598 = -220						; size = 4
tv1474 = -216						; size = 4
tv3579 = -212						; size = 4
_sendAttack$16 = -208					; size = 4
tv3432 = -204						; size = 4
tv434 = -200						; size = 4
tv3419 = -196						; size = 4
tv2372 = -192						; size = 4
tv3246 = -188						; size = 4
tv192 = -184						; size = 4
tv3227 = -180						; size = 4
tv796 = -176						; size = 4
tv2791 = -172						; size = 4
tv755 = -168						; size = 4
tv2778 = -164						; size = 4
tv466 = -160						; size = 4
tv2527 = -156						; size = 4
tv2514 = -152						; size = 4
tv1459 = -148						; size = 4
_wc$17 = -144						; size = 4
_y$18 = -140						; size = 4
_classPtr$19 = -136					; size = 4
_reSetup$ = -132					; size = 4
_x$20 = -128						; size = 4
_approxTargetRange$21 = -124				; size = 4
_FCC$ = -120						; size = 4
_ry$ = -116						; size = 4
_targetId$22 = -112					; size = 8
_rx$ = -104						; size = 4
_i$23 = -100						; size = 4
_targetId$24 = -96					; size = 8
_targetId$25 = -88					; size = 8
_flightMember$26 = -80					; size = 4
_approxTargetRange$27 = -76				; size = 4
_campUnit$28 = -72					; size = 4
_diveOK$ = -68						; size = 4
_zft$ = -64						; size = 4
_shootMissile$ = -60					; size = 4
_approxSlantRange$ = -56				; size = 4
_xft$ = -52						; size = 4
_yft$ = -48						; size = 4
_pitchDesired$ = -44					; size = 4
_hasJSOW$ = -40						; size = 4
_ata$ = -36						; size = 4
_curGroundAlt$ = -32					; size = 4
_theRadar$ = -28					; size = 4
_Sms$ = -24						; size = 4
_approxRange$ = -20					; size = 4
_dy$ = -16						; size = 4
_dx$ = -12						; size = 4
_desSpeed$ = -8						; size = 4
_this$ = -4						; size = 4
?GroundAttackMode@DigitalBrain@@IAEXXZ PROC		; DigitalBrain::GroundAttackMode
; _this$ = ecx

; 97   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1080				; 00000438H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 	FireControlComputer* FCC = self->FCC;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+936]
	mov	DWORD PTR _FCC$[ebp], edx

; 99   : 	SMSClass* Sms = self->Sms;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+940]
	mov	DWORD PTR _Sms$[ebp], edx

; 100  : 	RadarClass* theRadar = (RadarClass*) FindSensor (self, SensorClass::Radar);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRadar$[ebp], eax

; 101  : 	BombClass* theBomb;
; 102  : 	float approxRange, approxSlantRange, dx, dy;
; 103  : 	approxSlantRange = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _approxSlantRange$[ebp], xmm0

; 104  : 	float pitchDesired;
; 105  : 	float  desSpeed;
; 106  : 	float xft, yft, zft;
; 107  : 	float rx, ata, ry;
; 108  : 	BOOL shootMissile;
; 109  : 	BOOL diveOK;
; 110  : 	float curGroundAlt;
; 111  : 
; 112  : 	// COBRA - RED - FIXING CTDs, u CAN NOT CAST what may not be a Bomb, more, u can not cast IF NO HP SELECTED..!!!
; 113  : 	// theBomb = (BombClass*)Sms->hardPoint[Sms->GetCurrentHardpoint()]->weaponPointer;
; 114  : 	theBomb=FCC->GetTheBomb();

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetTheBomb@FireControlComputer@@QAEPAVBombClass@@XZ ; FireControlComputer::GetTheBomb
	mov	DWORD PTR _theBomb$[ebp], eax

; 115  : 
; 116  : 	if(groundTargetPtr){

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+224], 0
	je	SHORT $LN310@GroundAtta

; 117  : 		TP = &groundTargetPtr;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 224				; 000000e0H
	mov	DWORD PTR ?TP@@3PAPAVSimObjectType@@A, eax ; TP
$LN310@GroundAtta:

; 118  : 		REPORT_VALUE("TARGET ID", groundTargetPtr->BaseData()->GetCampID());
; 119  : 	}
; 120  : 
; 121  : 	// 2001-06-01 ADDED BY S.G. I'LL USE missileShotTimer TO PREVENT THIS ROUTINE FROM DOING ANYTHING. 
; 122  : 	// THE SIDE EFFECT IS WEAPONS HOLD SHOULD DO SOMETHING AS WELL
; 123  : 	if (SimLibElapsedTime < missileShotTimer){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	edx, DWORD PTR [ecx+472]
	jae	SHORT $LN309@GroundAtta

; 124  : 		return;

	jmp	$LN311@GroundAtta
$LN309@GroundAtta:

; 125  : 	}
; 126  : 
; 127  : 	if ((agmergeTimer != 0 && SimLibElapsedTime > agmergeTimer) || 
; 128  : 			( missionComplete && (!groundTargetPtr || !(IsSetATC(HasAGWeapon)))) )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+556], 0
	je	SHORT $LN306@GroundAtta
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	edx, DWORD PTR [ecx+556]
	ja	SHORT $LN305@GroundAtta
$LN306@GroundAtta:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+292], 0
	je	$LN308@GroundAtta
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+224], 0
	je	SHORT $LN305@GroundAtta
	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetATC@DigitalBrain@@QAEHH@Z		; DigitalBrain::IsSetATC
	test	eax, eax
	jne	$LN308@GroundAtta
$LN305@GroundAtta:

; 129  : 	{
; 130  : 		if (groundTargetPtr)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+224], 0
	je	SHORT $LN304@GroundAtta

; 131  : 			SetGroundTargetPtr(NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTargetPtr@DigitalBrain@@IAEXPAVSimObjectType@@@Z ; DigitalBrain::SetGroundTargetPtr
$LN304@GroundAtta:

; 132  : 		ClearATCFlag(HasCanUseAGWeapon);

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 133  : 		ClearATCFlag(HasAGWeapon);

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 134  : 		agmergeTimer = SimLibElapsedTime + 1;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+556], eax

; 135  : 		// Cobra - finsih up and go to next WP
; 136  : 		// go back to initial AG state
; 137  : 		agDoctrine = AGD_NONE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+244], 0

; 138  : 		missionComplete = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+292], 1

; 139  : 		if (GetWaypointIndex() == GetTargetWPIndex())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWaypointIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetWaypointIndex
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTargetWPIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetTargetWPIndex
	cmp	esi, eax
	jne	SHORT $LN303@GroundAtta

; 140  : 			SelectNextWaypoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectNextWaypoint@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectNextWaypoint
$LN303@GroundAtta:

; 141  : 		// if we're a wingie, rejoin the lead
; 142  : 		if ( isWing )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN302@GroundAtta

; 143  : 		{
; 144  : 			mFormation = FalconWingmanMsg::WMWedge;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+808], 1

; 145  : 			AiRejoin( NULL, AI_REJOIN ); // Cobra - Try this hint

	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiRejoin@DigitalBrain@@AAEXPAVFalconWingmanMsg@@W4AiHint@1@@Z ; DigitalBrain::AiRejoin

; 146  : 			// make sure wing's designated target is NULL'd out
; 147  : 			mDesignatedObject = FalconNullId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax+800], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+804], edx
$LN302@GroundAtta:

; 148  : 		}
; 149  : 		//agmergeTimer = 0; // Cobra - reinitialize
; 150  : 		return;

	jmp	$LN311@GroundAtta
$LN308@GroundAtta:

; 151  : 	}
; 152  : 
; 153  :   curGroundAlt = OTWDriver.GetGroundLevel( self->XPos(), self->YPos() );

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	fstp	DWORD PTR _curGroundAlt$[ebp]

; 154  : 
; 155  : //================================================
; 156  : // Cobra - bypass attack profile stuff while attacking with rockets
; 157  : //================================================
; 158  : 	if((Sms->curWeapon && Sms->curWeapon->IsLauncher() && hasRocket && onStation == Final)|| 
; 159  : 		rocketMnvr == RocketFiring || (self->Sms->IsFiringRockets() && (rocketTimer < 0)))

	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN299@GroundAtta
	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	DWORD PTR tv192[ebp], eax
	mov	eax, DWORD PTR tv192[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv192[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
	test	eax, eax
	je	SHORT $LN299@GroundAtta
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+192], 0
	je	SHORT $LN299@GroundAtta
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+132], 15			; 0000000fH
	je	SHORT $LN300@GroundAtta
$LN299@GroundAtta:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 1
	je	SHORT $LN300@GroundAtta
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+940]
	call	?IsFiringRockets@SMSClass@@QAEHXZ	; SMSClass::IsFiringRockets
	test	eax, eax
	je	$LN301@GroundAtta
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+48]
	jbe	$LN301@GroundAtta
$LN300@GroundAtta:

; 160  : 	{
; 161  : 		if (groundTargetPtr)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+224], 0
	je	SHORT $LN298@GroundAtta

; 162  : 		{
; 163  : 			trackX = groundTargetPtr->BaseData()->XPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+148]

; 164  : 			trackY = groundTargetPtr->BaseData()->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+152]
$LN298@GroundAtta:

; 165  : 		}
; 166  : 		dx = ( self->XPos() - trackX );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv4112[ebp]
	movss	xmm0, DWORD PTR tv4112[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+148]
	movss	DWORD PTR _dx$[ebp], xmm0

; 167  : 		dy = ( self->YPos() - trackY );

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv4118[ebp]
	movss	xmm0, DWORD PTR tv4118[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+152]
	movss	DWORD PTR _dy$[ebp], xmm0

; 168  : 		approxRange = (float)sqrt( dx * dx + dy * dy );

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _approxRange$[ebp]

; 169  : 		FireRocket(approxRange, 0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _approxRange$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FireRocket@DigitalBrain@@IAEHMM@Z	; DigitalBrain::FireRocket

; 170  : 		return;

	jmp	$LN311@GroundAtta
$LN301@GroundAtta:

; 171  : 	}
; 172  : //================================================
; 173  : 
; 174  : //================================================
; 175  : // Cobra - bypass targeting stuff while flying out
; 176  : //================================================
; 177  : 	if (onStation == Downwind)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+132], 13			; 0000000dH
	jne	SHORT $LN297@GroundAtta

; 178  : 		goto DownwindBypass;

	jmp	$LN296@GroundAtta
	jmp	$DownwindBypass$327
$LN297@GroundAtta:

; 179  : 
; 180  : 
; 181  : 	// Cobra - Having problems ID'ing JSOWs on HPs
; 182  : 	int hasJSOW = FALSE;

	mov	DWORD PTR _hasJSOW$[ebp], 0

; 183  : 	if (
; 184  : 		(hasBomb == TRUE+4) || 
; 185  : 		( theBomb && (theBomb->IsSetBombFlag(BombClass::IsJSOW))) 
; 186  : 	){

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+180], 5
	je	SHORT $LN294@GroundAtta
	cmp	DWORD PTR _theBomb$[ebp], 0
	je	SHORT $LN295@GroundAtta
	push	512					; 00000200H
	mov	ecx, DWORD PTR _theBomb$[ebp]
	call	?IsSetBombFlag@BombClass@@QAEHH@Z	; BombClass::IsSetBombFlag
	test	eax, eax
	je	SHORT $LN295@GroundAtta
$LN294@GroundAtta:

; 187  : 		hasJSOW = TRUE;

	mov	DWORD PTR _hasJSOW$[ebp], 1
$LN295@GroundAtta:

; 188  : 	}
; 189  : 
; 190  : 
; 191  : 
; 192  : 	// 2002-03-08 ADDED BY S.G. Turn off the lasing flag we were lasing (fail safe)
; 193  : 	if (SimLibElapsedTime > waitingForShot && (moreFlags & KeepLasing)){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	ecx, DWORD PTR [eax+496]
	jbe	SHORT $LN293@GroundAtta
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+968]
	and	eax, 4
	je	SHORT $LN293@GroundAtta

; 194  : 		moreFlags &= ~KeepLasing;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+968]
	and	edx, -5					; fffffffbH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+968], edx
$LN293@GroundAtta:

; 195  : 	}
; 196  : 
; 197  : 	// 2001-06-18 ADDED BY S.G. AI NEED TO RE-EVALUATE ITS TARGET FROM TIME TO TIME, UNLESS THE LEAD IS THE PLAYER
; 198  : 	// 2001-06-18 ADDED BY S.G. NOPE, AI NEED TO RE-EVALUATE THEIR WEAPONS ONLY
; 199  : 	// 2001-07-10 ADDED BY S.G. IF OUR TARGET IS A RADAR AND WE ARE NOT CARRYING HARMS, SEE IF SOMEBODY ELSE COULD DO THE JOB FOR US
; 200  : 	// 2001-07-15 S.G. This was required when an non emitting radar could be targeted. Now check every 5 seconds if the campaign target has changed if we're the lead
; 201  : 	// JB 011017 Only reevaluate when we've dropped our ripple.
; 202  : 	if ((SimLibElapsedTime > nextAGTargetTime) && (Sms->CurRippleCount() == 0)) 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	edx, DWORD PTR [ecx+252]
	jbe	$LN292@GroundAtta
	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?CurRippleCount@SMSClass@@QAEHXZ	; SMSClass::CurRippleCount
	test	eax, eax
	jne	$LN292@GroundAtta

; 203  : 	{
; 204  : 		// 2001-07-20 S.G. ONLY CHANGE 'onStation' IF OUR WEAPON STATUS CHANGED...
; 205  : 		int tempWeapon = (hasHARM << 24) | (hasAGMissile << 16) | (hasGBU << 8) | hasBomb;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+184]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+204]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _this$[ebp]
	or	ecx, DWORD PTR [edx+180]
	mov	DWORD PTR _tempWeapon$9[ebp], ecx

; 206  : 
; 207  : 		SelectGroundWeapon();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectGroundWeapon@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectGroundWeapon

; 208  : 
; 209  : 		if ( !groundTargetPtr || (!IsSetATC(HasCanUseAGWeapon)) && (!IsSetATC(HasAGWeapon)))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+224], 0
	je	SHORT $LN290@GroundAtta
	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetATC@DigitalBrain@@QAEHH@Z		; DigitalBrain::IsSetATC
	test	eax, eax
	jne	$LN291@GroundAtta
	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetATC@DigitalBrain@@QAEHH@Z		; DigitalBrain::IsSetATC
	test	eax, eax
	jne	$LN291@GroundAtta
$LN290@GroundAtta:

; 210  : 		{
; 211  : 				ClearATCFlag(HasCanUseAGWeapon);

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 212  : 				ClearATCFlag(HasAGWeapon);

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 213  : 				// Go to next WP
; 214  : 				if (GetWaypointIndex() == GetTargetWPIndex())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWaypointIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetWaypointIndex
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTargetWPIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetTargetWPIndex
	cmp	esi, eax
	jne	SHORT $LN289@GroundAtta

; 215  : 					SelectNextWaypoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectNextWaypoint@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectNextWaypoint
$LN289@GroundAtta:

; 216  : 				// go back to initial AG state
; 217  : 				agDoctrine = AGD_NONE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+244], 0

; 218  : 				missionComplete = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+292], 1

; 219  : 				agmergeTimer = SimLibElapsedTime + 1;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+556], eax

; 220  : 				// if we're a wingie, rejoin the lead
; 221  : 				if ( isWing )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN288@GroundAtta

; 222  : 				{
; 223  : 					mFormation = FalconWingmanMsg::WMWedge;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+808], 1

; 224  : 					AiRejoin( NULL );

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiRejoin@DigitalBrain@@AAEXPAVFalconWingmanMsg@@W4AiHint@1@@Z ; DigitalBrain::AiRejoin

; 225  : 					// make sure wing's designated target is NULL'd out
; 226  : 					mDesignatedObject = FalconNullId;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [ecx+800], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [ecx+804], eax
$LN288@GroundAtta:

; 227  : 				}
; 228  : 				onStation = NotThereYet;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+132], 0

; 229  : 				return;

	jmp	$LN311@GroundAtta
$LN291@GroundAtta:

; 230  : 		}
; 231  : 
; 232  : 		// So if we choose a different weapon, we'll set our FCC
; 233  : 		if (((hasHARM << 24) | (hasAGMissile << 16) | (hasGBU << 8) | hasBomb) != tempWeapon){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+188]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+184]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _this$[ebp]
	or	eax, DWORD PTR [ecx+180]
	cmp	eax, DWORD PTR _tempWeapon$9[ebp]
	je	SHORT $LN286@GroundAtta

; 234  : 			if (onStation == Final){

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+132], 15			; 0000000fH
	jne	SHORT $LN286@GroundAtta

; 235  : 				onStation = HoldInPlace;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+132], 7
$LN286@GroundAtta:

; 236  : 			}
; 237  : 		}
; 238  : 
; 239  : 		// 2001-07-12 S.G. Moved below the above code
; 240  : 		// 2001-07-12 S.G. Simply clear the target. Code below will do the selection (and a new attack profile for us)
; 241  : 		// See if we should change target if we're the lead of the flight (but first we must already got a target)
; 242  : 		if (!isWing && lastGndCampTarget) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jne	SHORT $LN282@GroundAtta
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+460], 0
	je	SHORT $LN282@GroundAtta

; 243  : 			UnitClass *campUnit = (UnitClass *)self->GetCampaignObject();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _campUnit$28[ebp], eax

; 244  : 			if (campUnit) {

	cmp	DWORD PTR _campUnit$28[ebp], 0
	je	SHORT $LN282@GroundAtta

; 245  : 				campUnit->UnsetChecked();

	mov	ecx, DWORD PTR _campUnit$28[ebp]
	call	?UnsetChecked@CampBaseClass@@QAEXXZ	; CampBaseClass::UnsetChecked

; 246  : 				if (campUnit->ChooseTarget()) {

	mov	ecx, DWORD PTR _campUnit$28[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _campUnit$28[ebp]
	mov	eax, DWORD PTR [edx+524]
	call	eax
	test	eax, eax
	je	SHORT $LN282@GroundAtta

; 247  : 					if (lastGndCampTarget != campUnit->GetTarget())

	mov	ecx, DWORD PTR _campUnit$28[ebp]
	call	?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ ; UnitClass::GetTarget
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+460], eax
	je	SHORT $LN282@GroundAtta

; 248  : 						SetGroundTargetPtr(NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTargetPtr@DigitalBrain@@IAEXPAVSimObjectType@@@Z ; DigitalBrain::SetGroundTargetPtr
$LN282@GroundAtta:

; 249  : 				}
; 250  : 			}
; 251  : 
; 252  : 		}
; 253  : 
; 254  : 		// 2001-07-15 S.G. This was required when an non emitting radar could be targeted. This is not the case anymore so skip the whole thing
; 255  : 		// Try again in 5 seconds.
; 256  : 		nextAGTargetTime = SimLibElapsedTime + 5000;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 5000				; 00001388H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+252], edx
$LN292@GroundAtta:

; 257  : 	}
; 258  : 
; 259  : 	// 2001-07-12 S.G. Need to force a target reselection under some conditions. If we're in GroundAttackMode, it's because we are already in agDoctrine != AGD_NONE which mean we already got a target originally
; 260  : 	// This was done is some 'onStation' modes but I moved it here instead so all modes runs it
; 261  : 	if ( 
; 262  : 		groundTargetPtr && 
; 263  : 		( 
; 264  : 			( 
; 265  : 				groundTargetPtr->BaseData()->IsSim() && // For a SIM entity
; 266  : 				( 
; 267  : 					groundTargetPtr->BaseData()->IsDead() || 
; 268  : 					groundTargetPtr->BaseData()->IsExploding() ||
; 269  : 					( 
; 270  : 						!isWing && IsNotMainTargetSEAD() &&
; 271  : 						!((SimBaseClass *)groundTargetPtr->BaseData())->GetCampaignObject()->IsEmitting() 
; 272  : 					)
; 273  : 				)
; 274  : 			) || 
; 275  : 			( 
; 276  : 				groundTargetPtr->BaseData()->IsCampaign() && // For a CAMPAIGN entity
; 277  : 				( 
; 278  : 					!isWing && IsNotMainTargetSEAD() &&
; 279  : 					!((CampBaseClass *)groundTargetPtr->BaseData())->IsEmitting() 
; 280  : 				)
; 281  : 			) 
; 282  : 		) 
; 283  : 	){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+224], 0
	je	$LN281@GroundAtta
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	$LN278@GroundAtta
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv397[ebp], eax
	mov	ecx, DWORD PTR tv397[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv397[ebp]
	mov	eax, DWORD PTR [edx+212]
	call	eax
	test	eax, eax
	jne	$LN280@GroundAtta
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv406[ebp], eax
	mov	edx, DWORD PTR tv406[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv406[ebp]
	mov	edx, DWORD PTR [eax+208]
	call	edx
	test	eax, eax
	jne	$LN280@GroundAtta
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN278@GroundAtta
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsNotMainTargetSEAD@DigitalBrain@@AAEHXZ ; DigitalBrain::IsNotMainTargetSEAD
	test	eax, eax
	je	SHORT $LN278@GroundAtta
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR tv434[ebp], eax
	mov	edx, DWORD PTR tv434[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv434[ebp]
	mov	edx, DWORD PTR [eax+216]
	call	edx
	test	eax, eax
	je	SHORT $LN280@GroundAtta
$LN278@GroundAtta:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsCampaign@FalconEntity@@QAEHXZ	; FalconEntity::IsCampaign
	test	eax, eax
	je	SHORT $LN281@GroundAtta
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jne	SHORT $LN281@GroundAtta
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsNotMainTargetSEAD@DigitalBrain@@AAEHXZ ; DigitalBrain::IsNotMainTargetSEAD
	test	eax, eax
	je	SHORT $LN281@GroundAtta
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv466[ebp], eax
	mov	eax, DWORD PTR tv466[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv466[ebp]
	mov	eax, DWORD PTR [edx+216]
	call	eax
	test	eax, eax
	jne	SHORT $LN281@GroundAtta
$LN280@GroundAtta:

; 284  : 		SetGroundTarget( NULL );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget
$LN281@GroundAtta:

; 285  : 	}
; 286  : 
; 287  : 	int reSetup = FALSE;

	mov	DWORD PTR _reSetup$[ebp], 0

; 288  : 	if (!groundTargetPtr) 

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+224], 0
	jne	$LN268@GroundAtta

; 289  : 	{
; 290  : 		// Wings run a limited version of the target selection (so they don't switch campaign target)
; 291  : 		if (isWing)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN276@GroundAtta

; 292  : 			AiRunTargetSelection();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiRunTargetSelection@DigitalBrain@@AAEXXZ ; DigitalBrain::AiRunTargetSelection

; 293  : 		else

	jmp	SHORT $LN275@GroundAtta
$LN276@GroundAtta:

; 294  : 			SelectGroundTarget(TARGET_ANYTHING);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectGroundTarget@DigitalBrain@@IAEXH@Z ; DigitalBrain::SelectGroundTarget
$LN275@GroundAtta:

; 295  : 
; 296  : 		// Force a run of SetupAGMode if we finally got a target
; 297  : 		if (groundTargetPtr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+224], 0
	je	$LN274@GroundAtta

; 298  : 		{
; 299  : 			if ((missionType == AMIS_SEADSTRIKE) && !hasHARM)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+284], 11			; 0000000bH
	jne	$LN273@GroundAtta
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+188], 0
	jne	SHORT $LN273@GroundAtta

; 300  : 			{
; 301  : 				SetGroundTarget( NULL );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget

; 302  : 				agDoctrine = AGD_NONE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+244], 0

; 303  : 				missionComplete = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+292], 1

; 304  : 				if (GetWaypointIndex() == GetTargetWPIndex())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWaypointIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetWaypointIndex
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTargetWPIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetTargetWPIndex
	cmp	esi, eax
	jne	SHORT $LN272@GroundAtta

; 305  : 					SelectNextWaypoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectNextWaypoint@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectNextWaypoint
$LN272@GroundAtta:

; 306  : 				// Cobra -  reset radar mode and Master Mode
; 307  : 				if (theRadar)

	cmp	DWORD PTR _theRadar$[ebp], 0
	je	SHORT $LN271@GroundAtta

; 308  : 					theRadar->SetMode(RadarClass::RWS);

	push	2
	mov	edx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [eax+164]
	call	edx
$LN271@GroundAtta:

; 309  : 				self->FCC->SetMasterMode (FireControlComputer::Nav);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [ecx+936]
	call	?SetMasterMode@FireControlComputer@@QAEXW4FCCMasterMode@1@@Z ; FireControlComputer::SetMasterMode

; 310  : 				return;

	jmp	$LN311@GroundAtta

; 311  : 			}
; 312  : 			else

	jmp	SHORT $LN270@GroundAtta
$LN273@GroundAtta:

; 313  : 				reSetup = TRUE;

	mov	DWORD PTR _reSetup$[ebp], 1
$LN270@GroundAtta:
	jmp	$LN268@GroundAtta
$LN274@GroundAtta:

; 314  : 		}
; 315  : 		else if (!isWing) // If leader and no more target, move on

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], 0
	jne	$LN268@GroundAtta

; 316  : 		{
; 317  : 			// Cobra - No more target.  Do something else
; 318  : 			ClearATCFlag(HasCanUseAGWeapon);

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 319  : 			ClearATCFlag(HasAGWeapon);

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 320  : 			agmergeTimer = SimLibElapsedTime + 1;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+556], eax

; 321  : 			// go back to initial AG state
; 322  : 			agDoctrine = AGD_NONE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+244], 0

; 323  : 			missionComplete = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+292], 1

; 324  : 			if (GetWaypointIndex() == GetTargetWPIndex())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWaypointIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetWaypointIndex
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTargetWPIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetTargetWPIndex
	cmp	esi, eax
	jne	SHORT $LN267@GroundAtta

; 325  : 				SelectNextWaypoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectNextWaypoint@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectNextWaypoint
$LN267@GroundAtta:

; 326  : 			// Cobra -  reset radar mode and Master Mode
; 327  : 			if (theRadar)

	cmp	DWORD PTR _theRadar$[ebp], 0
	je	SHORT $LN266@GroundAtta

; 328  : 				theRadar->SetMode(RadarClass::RWS);

	push	2
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax
$LN266@GroundAtta:

; 329  : 			self->FCC->SetMasterMode (FireControlComputer::Nav);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+936]
	call	?SetMasterMode@FireControlComputer@@QAEXW4FCCMasterMode@1@@Z ; FireControlComputer::SetMasterMode

; 330  : 			// wingies rejoin the lead
; 331  : 			mFormation = FalconWingmanMsg::WMWedge;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+808], 1

; 332  : 			if (self->GetCampaignObject()->NumberOfComponents()>1 && !isWing)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	cmp	eax, 1
	jle	SHORT $LN265@GroundAtta
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], 0
	jne	SHORT $LN265@GroundAtta

; 333  : 				// RED - FIXED CTD - AI should not use this function
; 334  : 				// AiSendPlayerCommand( FalconWingmanMsg::WMRejoin, AiFlight );
; 335  : 				AiSendCommand( self, FalconWingmanMsg::WMRejoin, AiFlight, FalconNullId );

	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	ecx
	push	2
	push	23					; 00000017H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	?AiSendCommand@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z ; AiSendCommand
	add	esp, 20					; 00000014H
$LN265@GroundAtta:

; 336  : 			agmergeTimer = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+556], 0

; 337  : 			onStation = NotThereYet;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+132], 0

; 338  : 			return; // Cobra

	jmp	$LN311@GroundAtta
$LN268@GroundAtta:

; 339  : 		}
; 340  : 	}
; 341  : 
; 342  : 	// If we got a deaggregated campaign object, find a sim object within
; 343  : 	if (
; 344  : 		groundTargetPtr && 
; 345  : 		groundTargetPtr->BaseData()->IsCampaign() && 
; 346  : 		!((CampBaseClass *)groundTargetPtr->BaseData())->IsAggregate()
; 347  : 	){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+224], 0
	je	SHORT $LN264@GroundAtta
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsCampaign@FalconEntity@@QAEHXZ	; FalconEntity::IsCampaign
	test	eax, eax
	je	SHORT $LN264@GroundAtta
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	jne	SHORT $LN264@GroundAtta

; 348  : 		SelectGroundTarget( TARGET_ANYTHING );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectGroundTarget@DigitalBrain@@IAEXH@Z ; DigitalBrain::SelectGroundTarget

; 349  : 		reSetup = TRUE;

	mov	DWORD PTR _reSetup$[ebp], 1
$LN264@GroundAtta:

; 350  : 	}
; 351  : 
; 352  : 	if (reSetup) {

	cmp	DWORD PTR _reSetup$[ebp], 0
	je	$LN261@GroundAtta

; 353  : 		nextAGTargetTime = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+252], 0

; 354  : 		SetupAGMode(NULL, NULL);

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetupAGMode@DigitalBrain@@IAEXPAVWayPointClass@@0@Z ; DigitalBrain::SetupAGMode

; 355  : 		if(Sms->curWeapon && Sms->curWeapon->IsLauncher() && hasRocket && onStation == Final){

	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN262@GroundAtta
	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	DWORD PTR tv604[ebp], eax
	mov	edx, DWORD PTR tv604[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv604[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
	test	eax, eax
	je	SHORT $LN262@GroundAtta
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+192], 0
	je	SHORT $LN262@GroundAtta
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+132], 15			; 0000000fH
	jne	SHORT $LN262@GroundAtta

; 356  : 			// leave onStation alone
; 357  : 		}
; 358  : 		else{

	jmp	SHORT $LN261@GroundAtta
$LN262@GroundAtta:

; 359  : 			onStation = NotThereYet;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+132], 0
$LN261@GroundAtta:

; 360  : 		}
; 361  : 	}
; 362  : 	// END OF ADDED SECTION
; 363  : 
; 364  : 	// NOTES ON MODES (in approximate order):
; 365  : 	// 1) NotThereYet: Initial setup for ground run.  Track to IP.
; 366  : 	//	  Also determine if another run is to be made, or end ground run.
; 367  : 	// 2) CrossWind: head to IP
; 368  : 	// 3) HoldInPlace: Track Towards target
; 369  : 	// 4) Final: ready weapons and fire when within parms.
; 370  : 	// 5) Final1: release more weapoons if appropriate then go back to OnStation
; 371  : 
; 372  : 	curGroundAlt = OTWDriver.GetGroundLevel( self->XPos(), self->YPos() );

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	fstp	DWORD PTR _curGroundAlt$[ebp]

; 373  : 
; 374  : 	if (agDoctrine == AGD_NEED_SETUP)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+244], 3
	jne	SHORT $LN260@GroundAtta

; 375  : 	{
; 376  : 		SetupAGMode( NULL, NULL );

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetupAGMode@DigitalBrain@@IAEXPAVWayPointClass@@0@Z ; DigitalBrain::SetupAGMode
$LN260@GroundAtta:

; 377  : 	}
; 378  : 
; 379  : 	// 2001-07-18 ADDED BY S.G. IF ON A LOOK_SHOOT_LOOK MODE WITH A TARGET, SEND AN ATTACK RIGHT AWAY AND DON'T WAIT TO BE CLOSE TO/ON FINAL TO DO IT BECAUSE YOU'LL MAKE SEVERAL PASS ANYWAY...
; 380  : 
; 381  : 	if (groundTargetPtr && agDoctrine == AGD_LOOK_SHOOT_LOOK) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+224], 0
	je	$LN251@GroundAtta
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+244], 2
	jne	$LN251@GroundAtta

; 382  : 	{
; 383  : 		if (self->GetCampaignObject()->NumberOfComponents()>1 && !isWing) 

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	cmp	eax, 1
	jle	$LN251@GroundAtta
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	$LN251@GroundAtta

; 384  : 		{
; 385  : 			if (sentWingAGAttack == AG_ORDER_NONE ) 

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+232], 0
	jne	SHORT $LN257@GroundAtta

; 386  : 			{
; 387  : 				AiSendCommand (self, FalconWingmanMsg::WMTrail, AiFlight, FalconNullId);

	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	eax
	push	2
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	?AiSendCommand@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z ; AiSendCommand
	add	esp, 20					; 00000014H

; 388  : 				sentWingAGAttack = AG_ORDER_FORMUP;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+232], 1

; 389  : 				// 2002-01-20 ADDED BY S.G. Added the new nextAttackCommandToSend variable check to force the lead to reissue an attack in case wings went back into formation (can we say HACK?)
; 390  : 				nextAttackCommandToSend = SimLibElapsedTime + g_nAIshootLookShootTime * SEC_TO_MSEC;

	mov	ecx, DWORD PTR ?g_nAIshootLookShootTime@@3HA ; g_nAIshootLookShootTime
	imul	ecx, 1000				; 000003e8H
	add	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+256], ecx
	jmp	$LN251@GroundAtta
$LN257@GroundAtta:

; 391  : 			}
; 392  : 			// 2002-01-20 ADDED BY S.G. Either we haven't sent the attack order or we sent it a while ago, check if we should send it again
; 393  : 			else if  (sentWingAGAttack != AG_ORDER_ATTACK || SimLibElapsedTime > nextAttackCommandToSend) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+232], 2
	jne	SHORT $LN254@GroundAtta
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	edx, DWORD PTR [ecx+256]
	jbe	$LN251@GroundAtta
$LN254@GroundAtta:

; 394  : 			{
; 395  : 				VU_ID targetId;

	lea	ecx, DWORD PTR _targetId$22[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 396  : 
; 397  : 				if (groundTargetPtr->BaseData()->IsSim())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN253@GroundAtta

; 398  : 				{
; 399  : 					targetId = ((SimBaseClass*)groundTargetPtr->BaseData())->GetCampaignObject()->Id();

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _targetId$22[ebp], ecx
	mov	DWORD PTR _targetId$22[ebp+4], edx

; 400  : 				}
; 401  : 				else

	jmp	SHORT $LN252@GroundAtta
$LN253@GroundAtta:

; 402  : 					targetId = groundTargetPtr->BaseData()->Id();

	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _targetId$22[ebp], edx
	mov	DWORD PTR _targetId$22[ebp+4], eax
$LN252@GroundAtta:

; 403  : 
; 404  : 				if (targetId != FalconNullId)

	push	OFFSET ?FalconNullId@@3VVU_ID@@A	; FalconNullId
	lea	ecx, DWORD PTR _targetId$22[ebp]
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	$LN251@GroundAtta

; 405  : 				{
; 406  : 					// 2002-01-20 ADDED BY S.G. Check the wing's AI to see if they have weapon but in formation
; 407  : 					int sendAttack = FALSE;

	mov	DWORD PTR _sendAttack$16[ebp], 0

; 408  : 					if (SimLibElapsedTime > nextAttackCommandToSend) 

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	eax, DWORD PTR [edx+256]
	jbe	$LN247@GroundAtta

; 409  : 					{ // timed out
; 410  : 						int i;
; 411  : 						int usComponents = self->GetCampaignObject()->NumberOfComponents();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	mov	DWORD PTR _usComponents$11[ebp], eax

; 412  : 						for (i = 0; i < usComponents; i++) {

	mov	DWORD PTR _i$23[ebp], 0
	jmp	SHORT $LN249@GroundAtta
$LN248@GroundAtta:
	mov	edx, DWORD PTR _i$23[ebp]
	add	edx, 1
	mov	DWORD PTR _i$23[ebp], edx
$LN249@GroundAtta:
	mov	eax, DWORD PTR _i$23[ebp]
	cmp	eax, DWORD PTR _usComponents$11[ebp]
	jge	$LN247@GroundAtta

; 413  : 							AircraftClass *flightMember = (AircraftClass *)self->GetCampaignObject()->GetComponentEntity(i);

	mov	ecx, DWORD PTR _i$23[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentEntity@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentEntity
	mov	DWORD PTR _flightMember$26[ebp], eax

; 414  : 							// This code is assuming the lead and the AI are on the same PC... Should be no problem unless another player is in Combat AP...
; 415  : 							if (flightMember && flightMember->DBrain() && flightMember->DBrain()->IsSetATC(IsNotMainTargetSEAD() ? HasAGWeapon : HasCanUseAGWeapon) && flightMember->DBrain()->agDoctrine == AGD_NONE) {

	cmp	DWORD PTR _flightMember$26[ebp], 0
	je	SHORT $LN246@GroundAtta
	mov	ecx, DWORD PTR _flightMember$26[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	test	eax, eax
	je	SHORT $LN246@GroundAtta
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsNotMainTargetSEAD@DigitalBrain@@AAEHXZ ; DigitalBrain::IsNotMainTargetSEAD
	test	eax, eax
	je	SHORT $LN313@GroundAtta
	mov	DWORD PTR tv755[ebp], 4194304		; 00400000H
	jmp	SHORT $LN314@GroundAtta
$LN313@GroundAtta:
	mov	DWORD PTR tv755[ebp], 536870912		; 20000000H
$LN314@GroundAtta:
	mov	eax, DWORD PTR tv755[ebp]
	push	eax
	mov	ecx, DWORD PTR _flightMember$26[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	mov	ecx, eax
	call	?IsSetATC@DigitalBrain@@QAEHH@Z		; DigitalBrain::IsSetATC
	test	eax, eax
	je	SHORT $LN246@GroundAtta
	mov	ecx, DWORD PTR _flightMember$26[ebp]
	call	?DBrain@AircraftClass@@QAEPAVDigitalBrain@@XZ ; AircraftClass::DBrain
	cmp	DWORD PTR [eax+244], 0
	jne	SHORT $LN246@GroundAtta

; 416  : 								sendAttack = TRUE;

	mov	DWORD PTR _sendAttack$16[ebp], 1

; 417  : 								break;

	jmp	SHORT $LN247@GroundAtta
$LN246@GroundAtta:

; 418  : 							}
; 419  : 						}

	jmp	$LN248@GroundAtta
$LN247@GroundAtta:

; 420  : 					}
; 421  : 					// Cobra - Removed.  It make sendAttack always TRUE when SimLibElapsedTime <= nextAttackCommandToSend
; 422  : 					//else
; 423  : 						//sendAttack = TRUE;
; 424  : 
; 425  : 					if (self->GetCampaignObject()->NumberOfComponents()>1 && sendAttack) 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	cmp	eax, 1
	jle	SHORT $LN245@GroundAtta
	cmp	DWORD PTR _sendAttack$16[ebp], 0
	je	SHORT $LN245@GroundAtta

; 426  : 					{
; 427  : 						AiSendCommand (self, FalconWingmanMsg::WMAssignTarget, AiFlight, targetId);

	mov	edx, DWORD PTR _targetId$22[ebp+4]
	push	edx
	mov	eax, DWORD PTR _targetId$22[ebp]
	push	eax
	push	2
	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	?AiSendCommand@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z ; AiSendCommand
	add	esp, 20					; 00000014H

; 428  : 						AiSendCommand (self, FalconWingmanMsg::WMShooterMode, AiFlight, targetId);

	mov	eax, DWORD PTR _targetId$22[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _targetId$22[ebp]
	push	ecx
	push	2
	push	11					; 0000000bH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	?AiSendCommand@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z ; AiSendCommand
	add	esp, 20					; 00000014H

; 429  : 						sentWingAGAttack = AG_ORDER_ATTACK;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+232], 2
$LN245@GroundAtta:

; 430  : 					}
; 431  : 					// 2002-01-20 ADDED BY S.G. Added the new nextAttackCommandToSend variable check to force the lead to reissue an attack in case wings went back into formation (can we say HACK?)
; 432  : 					nextAttackCommandToSend = SimLibElapsedTime + g_nAIshootLookShootTime * SEC_TO_MSEC;

	mov	edx, DWORD PTR ?g_nAIshootLookShootTime@@3HA ; g_nAIshootLookShootTime
	imul	edx, 1000				; 000003e8H
	add	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+256], edx
$LN251@GroundAtta:
$LN296@GroundAtta:
$DownwindBypass$327:

; 433  : 				}
; 434  : 			}
; 435  : 		}
; 436  : 	}
; 437  : 
; 438  : // Cobra - bypass targeting stuff while flying out
; 439  : DownwindBypass:
; 440  : 
; 441  : 	// modes for ground attack
; 442  : 	switch (onStation)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR tv796[ebp], edx
	cmp	DWORD PTR tv796[ebp], 16		; 00000010H
	ja	SHORT $LN242@GroundAtta
	mov	eax, DWORD PTR tv796[ebp]
	movzx	ecx, BYTE PTR $LN325@GroundAtta[eax]
	jmp	DWORD PTR $LN326@GroundAtta[ecx*4]
$LN242@GroundAtta:

; 443  : 	{
; 444  : 		// protect against invalid state by going to our start condition
; 445  : 		// then fall thru
; 446  : 		default:
; 447  : 			onStation = NotThereYet;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+132], 0
$LN241@GroundAtta:

; 448  : 			// #1 setup....
; 449  : 			// We Should have an insertion point set up at ipX,Y and Z.....
; 450  : 			//==================================================
; 451  : 		case NotThereYet:
; 452  : 
; 453  : 			AI_MESSAGE(0, "AI - NOT YET THERE");
; 454  : 			// have we already made an AG Attack run?
; 455  : 			if ( madeAGPass )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+260], 0
	je	$LN230@GroundAtta

; 456  : 			{
; 457  : 				// 2001-05-13 ADDED BY S.G. SO AI DROPS SOME COUNTER MEASURE AFTER A PASS
; 458  : 				//self->DropProgramed();
; 459  : 
; 460  : 				// clear weapons and target
; 461  : 				//Cobra tset
; 462  : 				// RV - Biker - Should fix wingmen to employ all Mavs          
; 463  : 				//SetGroundTarget( NULL );
; 464  : 				self->FCC->preDesignate = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+936]
	mov	BYTE PTR [eax+182], 1

; 465  : 
; 466  : 				// if we've already made 1 pass and the doctrine is
; 467  : 				// shoot_run, then we're done with this waypoint go to
; 468  : 				// next.  Otherwise we're in look_shoot_look.   We'll remain
; 469  : 				// at the current waypoint and allow the campaign to retarget
; 470  : 				// for us
; 471  : 				if ( agDoctrine == AGD_SHOOT_RUN || (agmergeTimer != 0 && SimLibElapsedTime > agmergeTimer)) // Cobra - Get out of Dodge

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+244], 1
	je	SHORT $LN238@GroundAtta
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+556], 0
	je	$LN239@GroundAtta
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	ecx, DWORD PTR [eax+556]
	jbe	$LN239@GroundAtta
$LN238@GroundAtta:

; 472  : 				{
; 473  : 					if ( agImprovise == FALSE || (SimLibElapsedTime > agmergeTimer))

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+240], 0
	je	SHORT $LN236@GroundAtta
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	ecx, DWORD PTR [eax+556]
	jbe	SHORT $LN235@GroundAtta
$LN236@GroundAtta:

; 474  : 					{
; 475  : 						if (GetWaypointIndex() == GetTargetWPIndex())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWaypointIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetWaypointIndex
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTargetWPIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetTargetWPIndex
	cmp	esi, eax
	jne	SHORT $LN235@GroundAtta

; 476  : 							SelectNextWaypoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectNextWaypoint@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectNextWaypoint
$LN235@GroundAtta:

; 477  : 					}
; 478  : 					ClearATCFlag(HasCanUseAGWeapon);

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 479  : 					ClearATCFlag(HasAGWeapon);

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 480  : 					// go back to initial AG state
; 481  : 					self->FCC->SetMasterMode (FireControlComputer::Nav);

	push	4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+936]
	call	?SetMasterMode@FireControlComputer@@QAEXW4FCCMasterMode@1@@Z ; FireControlComputer::SetMasterMode

; 482  : 					agDoctrine = AGD_NONE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+244], 0

; 483  : 					missionComplete = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+292], 1

; 484  : 					agmergeTimer = SimLibElapsedTime + 1;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+556], eax

; 485  : 					// if we're a wingie, rejoin the lead
; 486  : 					if ( isWing )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN234@GroundAtta

; 487  : 					{
; 488  : 						// 2001-05-03 ADDED BY S.G. WE WANT WEDGE AFTER GROUND PASS!
; 489  : 						mFormation = FalconWingmanMsg::WMWedge;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+808], 1

; 490  : 						// END OF ADDED SECTION
; 491  : 						AiRejoin( NULL, AI_REJOIN); // Cobra - Try this hint

	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiRejoin@DigitalBrain@@AAEXPAVFalconWingmanMsg@@W4AiHint@1@@Z ; DigitalBrain::AiRejoin

; 492  : 						// make sure wing's designated target is NULL'd out
; 493  : 						mDesignatedObject = FalconNullId;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [ecx+800], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [ecx+804], eax
$LN234@GroundAtta:

; 494  : 					}
; 495  : 					onStation = NotThereYet;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+132], 0

; 496  : 					return;

	jmp	$LN311@GroundAtta
$LN239@GroundAtta:

; 497  : 				}
; 498  : 
; 499  : 				// 2001-06-18 MODIFIED BY S.G. I'LL USE THIS TO HAVE THE AI FORCE A RETARGET AND 15 SECONDS IS TOO HIGH
; 500  : 				//				nextAGTargetTime = SimLibElapsedTime + 15000;
; 501  : 				nextAGTargetTime = SimLibElapsedTime + 5000;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 5000				; 00001388H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+252], edx

; 502  : 
; 503  : 				// 2001-07-12 ADDED BY S.G. SINCE WE'RE GOING AFTER SOMETHING NEW, GET A NEW TARGET RIGHT NOW SO agDoctrine DOESN'T GET SET TO AGD_NONE WHICH WILL END UP SetupAGMode BEING CALLED BEFORE THE AI HAS A CHANCE TO REACH ITS TURN POINT
; 504  : 				if (isWing)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN233@GroundAtta

; 505  : 					AiRunTargetSelection();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiRunTargetSelection@DigitalBrain@@AAEXXZ ; DigitalBrain::AiRunTargetSelection

; 506  : 				else

	jmp	SHORT $LN232@GroundAtta
$LN233@GroundAtta:

; 507  : 					SelectGroundTarget(TARGET_ANYTHING);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectGroundTarget@DigitalBrain@@IAEXH@Z ; DigitalBrain::SelectGroundTarget
$LN232@GroundAtta:

; 508  : 
; 509  : 				// If we got a deaggregated campaign object, find a sim object within
; 510  : 				if (groundTargetPtr && groundTargetPtr->BaseData()->IsCampaign() && !((CampBaseClass *)groundTargetPtr->BaseData())->IsAggregate())

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+224], 0
	je	SHORT $LN231@GroundAtta
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsCampaign@FalconEntity@@QAEHXZ	; FalconEntity::IsCampaign
	test	eax, eax
	je	SHORT $LN231@GroundAtta
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	jne	SHORT $LN231@GroundAtta

; 511  : 					SelectGroundTarget( TARGET_ANYTHING );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectGroundTarget@DigitalBrain@@IAEXH@Z ; DigitalBrain::SelectGroundTarget
$LN231@GroundAtta:

; 512  : 
; 513  : 				// Cobra - No more radar targets?  Mission complete?  Added: or no more weapons
; 514  : 				// Cobra - Isn't this true for all missionTypes? ... no more targets, move on.
; 515  : 				// if ( !groundTargetPtr && missionType == AMIS_SEADSTRIKE)
; 516  : 				if ( !groundTargetPtr || (!IsSetATC(HasCanUseAGWeapon)) || (!IsSetATC(HasAGWeapon)))

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+224], 0
	je	SHORT $LN229@GroundAtta
	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetATC@DigitalBrain@@QAEHH@Z		; DigitalBrain::IsSetATC
	test	eax, eax
	je	SHORT $LN229@GroundAtta
	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetATC@DigitalBrain@@QAEHH@Z		; DigitalBrain::IsSetATC
	test	eax, eax
	jne	$LN230@GroundAtta
$LN229@GroundAtta:

; 517  : 				{
; 518  : 					ClearATCFlag(HasCanUseAGWeapon);

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 519  : 					ClearATCFlag(HasAGWeapon);

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 520  : 					// Go to next WP
; 521  : 					if (GetWaypointIndex() == GetTargetWPIndex())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWaypointIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetWaypointIndex
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTargetWPIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetTargetWPIndex
	cmp	esi, eax
	jne	SHORT $LN228@GroundAtta

; 522  : 						SelectNextWaypoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectNextWaypoint@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectNextWaypoint
$LN228@GroundAtta:

; 523  : 					// go back to initial AG state
; 524  : 					agDoctrine = AGD_NONE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+244], 0

; 525  : 					missionComplete = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+292], 1

; 526  : 					agmergeTimer = SimLibElapsedTime + 1;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+556], edx

; 527  : 					// if we're a wingie, rejoin the lead
; 528  : 					if ( isWing )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN227@GroundAtta

; 529  : 					{
; 530  : 						mFormation = FalconWingmanMsg::WMWedge;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+808], 1

; 531  : 						AiRejoin( NULL );

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiRejoin@DigitalBrain@@AAEXPAVFalconWingmanMsg@@W4AiHint@1@@Z ; DigitalBrain::AiRejoin

; 532  : 						// make sure wing's designated target is NULL'd out
; 533  : 						mDesignatedObject = FalconNullId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax+800], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+804], edx
$LN227@GroundAtta:

; 534  : 					}
; 535  : 					onStation = NotThereYet;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+132], 0

; 536  : 					return;

	jmp	$LN311@GroundAtta
$LN230@GroundAtta:

; 537  : 				}
; 538  : 
; 539  : 			} // end madeAGPass
; 540  : 
; 541  : 			if (self->GetCampaignObject()->NumberOfComponents()>1 &&  !isWing && sentWingAGAttack == AG_ORDER_NONE )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	cmp	eax, 1
	jle	SHORT $LN226@GroundAtta
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], 0
	jne	SHORT $LN226@GroundAtta
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+232], 0
	jne	SHORT $LN226@GroundAtta

; 542  : 			{
; 543  : 				AiSendCommand (self, FalconWingmanMsg::WMTrail, AiFlight, FalconNullId);

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	push	ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	push	edx
	push	2
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	?AiSendCommand@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z ; AiSendCommand
	add	esp, 20					; 00000014H

; 544  : 				sentWingAGAttack = AG_ORDER_FORMUP;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+232], 1

; 545  : 				// 2002-01-20 ADDED BY S.G. Added the new nextAttackCommandToSend variable check to force the lead to reissue an attack in case wings went back into formation (can we say HACK?)
; 546  : 				nextAttackCommandToSend = SimLibElapsedTime + g_nAIshootLookShootTime * SEC_TO_MSEC;

	mov	eax, DWORD PTR ?g_nAIshootLookShootTime@@3HA ; g_nAIshootLookShootTime
	imul	eax, 1000				; 000003e8H
	add	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+256], eax
$LN226@GroundAtta:

; 547  : 			}
; 548  : 
; 549  : 			// check to see if we're too close to target (if we've got one)
; 550  : 			// if so set up new IP
; 551  : 			if ( groundTargetPtr && madeAGPass)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+224], 0
	je	SHORT $LN225@GroundAtta
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+260], 0
	je	SHORT $LN225@GroundAtta

; 552  : 			{
; 553  : 				// Bail and try again
; 554  : 				AGflyOut();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AGflyOut@DigitalBrain@@IAEXXZ		; DigitalBrain::AGflyOut

; 555  : 				// Release current target and target history
; 556  : 				//SetGroundTarget( NULL );
; 557  : 				//gndTargetHistory[0] = NULL;
; 558  : 				onStation = Downwind;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+132], 13			; 0000000dH

; 559  : 				break;

	jmp	$LN243@GroundAtta
$LN225@GroundAtta:

; 560  : 			}
; 561  : 
; 562  : 			// track to insertion point
; 563  : 			SetTrackPoint(ipX, ipY, AGattackAlt);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+264]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+272]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+268]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPoint@DigitalBrain@@QAEXMMM@Z	; DigitalBrain::SetTrackPoint

; 564  : 
; 565  : 			dx = (float)fabs( self->XPos() - trackX );

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv4440[ebp]
	movss	xmm0, DWORD PTR tv4440[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+148]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _dx$[ebp]

; 566  : 			dy = (float)fabs( self->YPos() - trackY );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv4449[ebp]
	movss	xmm0, DWORD PTR tv4449[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+152]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _dy$[ebp]

; 567  : 			approxRange = (float)sqrt( dx * dx + dy * dy );

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _approxRange$[ebp]

; 568  : 
; 569  : 			//  Cobra - SEAD attack mode is high to get the SAM radar to turn on
; 570  : 			//			if ( agApproach == AGA_LOW || missionType == AMIS_SEADESCORT || missionType == AMIS_SEADSTRIKE)
; 571  : 			if ( agApproach == AGA_LOW)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+248], 0
	jne	$LN224@GroundAtta

; 572  : 			{
; 573  : 				// see if we're too close to set up the ground run
; 574  : 				// if so, we're going to head to a new point perpendicular to
; 575  : 				// our current direction and make a run from there
; 576  : 				// this is kind of a sanity check
; 577  : 				trackZ = OTWDriver.GetGroundLevel( self->XPos() + self->XDelta(),
; 578  : 						self->YPos() + self->YDelta() );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv4464[ebp]
	movss	xmm0, DWORD PTR tv4464[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	movss	DWORD PTR tv6286[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv4469[ebp]
	movss	xmm0, DWORD PTR tv6286[ebp]
	addss	xmm0, DWORD PTR tv4469[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv4474[ebp]
	movss	xmm0, DWORD PTR tv4474[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movss	DWORD PTR tv6288[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv4479[ebp]
	movss	xmm0, DWORD PTR tv6288[ebp]
	addss	xmm0, DWORD PTR tv4479[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+156]

; 579  : 				// if we're below track alt, kick us up a bit harder so we don't plow
; 580  : 				// into steeper slopes
; 581  : 				//Cobra we are going to try and do a sanity check on alt now
; 582  : 				float myAlt = self->ZPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _myAlt$10[ebp]

; 583  : 				if (fabsf(myAlt - self->GetA2GGunRocketAlt()) < 2000.0f){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetA2GGunRocketAlt@AircraftClass@@QAEMXZ ; AircraftClass::GetA2GGunRocketAlt
	fstp	DWORD PTR tv4492[ebp]
	movss	xmm0, DWORD PTR _myAlt$10[ebp]
	subss	xmm0, DWORD PTR tv4492[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR tv4498[ebp]
	movss	xmm0, DWORD PTR __real@44fa0000
	comiss	xmm0, DWORD PTR tv4498[ebp]
	jbe	SHORT $LN223@GroundAtta

; 584  : 					trackZ = -self->GetA2GGunRocketAlt();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetA2GGunRocketAlt@AircraftClass@@QAEMXZ ; AircraftClass::GetA2GGunRocketAlt
	fstp	DWORD PTR tv4504[ebp]
	movss	xmm0, DWORD PTR tv4504[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+156], xmm0

; 585  : 				}
; 586  : 				else{

	jmp	SHORT $LN222@GroundAtta
$LN223@GroundAtta:

; 587  : 					trackZ = self->ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+156]
$LN222@GroundAtta:

; 588  : 				}
; 589  : 				//TJL 11/09/03 Changed to Corner speed to allow for variety of AI
; 590  : 				desSpeed = cornerSpeed * 1.3f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+100]
	mulss	xmm0, DWORD PTR __real@3fa66666
	movss	DWORD PTR _desSpeed$[ebp], xmm0
	jmp	$LN208@GroundAtta
$LN224@GroundAtta:

; 591  : 			}
; 592  : 			else if (missionType == AMIS_SEADESCORT || missionType == AMIS_SEADSTRIKE)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+284], 12			; 0000000cH
	je	SHORT $LN219@GroundAtta
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+284], 11			; 0000000bH
	jne	$LN220@GroundAtta
$LN219@GroundAtta:

; 593  : 			{
; 594  : 				// see if we're too close to set up the ground run
; 595  : 				// if so, we're going to head to a new point perpendicular to
; 596  : 				// our current direction and make a run from there
; 597  : 				// this is kind of a sanity check
; 598  : 				//TJL 11/09/03 Changed to Corner speed to allow for variety of AI
; 599  : 				desSpeed = cornerSpeed * 1.3f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+100]
	mulss	xmm0, DWORD PTR __real@3fa66666
	movss	DWORD PTR _desSpeed$[ebp], xmm0

; 600  : 				if ( self->ZPos() - curGroundAlt > -500.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4520[ebp]
	movss	xmm0, DWORD PTR tv4520[ebp]
	subss	xmm0, DWORD PTR _curGroundAlt$[ebp]
	comiss	xmm0, DWORD PTR __real@c3fa0000
	jbe	$LN214@GroundAtta

; 601  : 				{
; 602  : 					trackZ = OTWDriver.GetGroundLevel( self->XPos() + self->XDelta(),
; 603  : 							self->YPos() + self->YDelta() );

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv4525[ebp]
	movss	xmm0, DWORD PTR tv4525[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv6290[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv4530[ebp]
	movss	xmm0, DWORD PTR tv6290[ebp]
	addss	xmm0, DWORD PTR tv4530[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv4535[ebp]
	movss	xmm0, DWORD PTR tv4535[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	movss	DWORD PTR tv6292[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv4540[ebp]
	movss	xmm0, DWORD PTR tv6292[ebp]
	addss	xmm0, DWORD PTR tv4540[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+156]

; 604  : 					if ( self->ZPos() - trackZ > -500.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4550[ebp]
	movss	xmm0, DWORD PTR tv4550[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+156]
	comiss	xmm0, DWORD PTR __real@c3fa0000
	jbe	SHORT $LN217@GroundAtta

; 605  : 						//trackZ = trackZ - 500.0f - ( self->ZPos() - trackZ + 500.0f ) * 2.0f;
; 606  : 						trackZ = -self->GetA2GHarmAlt();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetA2GHarmAlt@AircraftClass@@QAEMXZ	; AircraftClass::GetA2GHarmAlt
	fstp	DWORD PTR tv4556[ebp]
	movss	xmm0, DWORD PTR tv4556[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+156], xmm0
	jmp	SHORT $LN214@GroundAtta
$LN217@GroundAtta:

; 607  : 
; 608  : 					else if (agApproach == AGA_HIGH && trackZ > AGattackAlt) 

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+248], 2
	jne	SHORT $LN215@GroundAtta
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+156]
	comiss	xmm0, DWORD PTR [ecx+264]
	jbe	SHORT $LN215@GroundAtta

; 609  : 						trackZ = AGattackAlt;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+264]
	mov	DWORD PTR [edx+156], ecx

; 610  : 					else

	jmp	SHORT $LN214@GroundAtta
$LN215@GroundAtta:

; 611  : 						trackZ = -self->GetA2GHarmAlt();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetA2GHarmAlt@AircraftClass@@QAEMXZ	; AircraftClass::GetA2GHarmAlt
	fstp	DWORD PTR tv4569[ebp]
	movss	xmm0, DWORD PTR tv4569[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+156], xmm0
$LN214@GroundAtta:

; 612  : 				}
; 613  : 			}
; 614  : 			else

	jmp	$LN208@GroundAtta
$LN220@GroundAtta:

; 615  : 			{
; 616  : 				// see if we're too close to set up the ground run
; 617  : 				// if so, we're going to head to a new point perpendicular to
; 618  : 				// our current direction and make a run from there
; 619  : 				// this is kind of a sanity check
; 620  : 				//TJL 11/09/03 Changed to Corner speed to allow for variety of AI
; 621  : 				desSpeed = cornerSpeed * 1.3f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+100]
	mulss	xmm0, DWORD PTR __real@3fa66666
	movss	DWORD PTR _desSpeed$[ebp], xmm0

; 622  : 				if ( self->ZPos() - curGroundAlt > -500.0f )

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4577[ebp]
	movss	xmm0, DWORD PTR tv4577[ebp]
	subss	xmm0, DWORD PTR _curGroundAlt$[ebp]
	comiss	xmm0, DWORD PTR __real@c3fa0000
	jbe	$LN208@GroundAtta

; 623  : 				{
; 624  : 					trackZ = OTWDriver.GetGroundLevel( self->XPos() + self->XDelta(),
; 625  : 							self->YPos() + self->YDelta() );

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv4582[ebp]
	movss	xmm0, DWORD PTR tv4582[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movss	DWORD PTR tv6294[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv4587[ebp]
	movss	xmm0, DWORD PTR tv6294[ebp]
	addss	xmm0, DWORD PTR tv4587[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv4592[ebp]
	movss	xmm0, DWORD PTR tv4592[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv6296[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv4597[ebp]
	movss	xmm0, DWORD PTR tv6296[ebp]
	addss	xmm0, DWORD PTR tv4597[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+156]

; 626  : 					if ( self->ZPos() - trackZ > -500.0f )

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4607[ebp]
	movss	xmm0, DWORD PTR tv4607[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+156]
	comiss	xmm0, DWORD PTR __real@c3fa0000
	jbe	SHORT $LN211@GroundAtta

; 627  : 						//trackZ = trackZ - 500.0f - ( self->ZPos() - trackZ + 500.0f ) * 2.0f;
; 628  : 						trackZ = -self->GetA2GDumbLDAlt();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetA2GDumbLDAlt@AircraftClass@@QAEMXZ	; AircraftClass::GetA2GDumbLDAlt
	fstp	DWORD PTR tv4613[ebp]
	movss	xmm0, DWORD PTR tv4613[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+156], xmm0
	jmp	SHORT $LN208@GroundAtta
$LN211@GroundAtta:

; 629  : 
; 630  : 					else if (agApproach == AGA_HIGH && trackZ > AGattackAlt) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+248], 2
	jne	SHORT $LN209@GroundAtta
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+156]
	comiss	xmm0, DWORD PTR [edx+264]
	jbe	SHORT $LN209@GroundAtta

; 631  : 						trackZ = AGattackAlt;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+264]
	mov	DWORD PTR [eax+156], edx

; 632  : 					else

	jmp	SHORT $LN208@GroundAtta
$LN209@GroundAtta:

; 633  : 						trackZ = AGattackAlt;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+264]
	mov	DWORD PTR [eax+156], edx
$LN208@GroundAtta:

; 634  : 				}
; 635  : 			}
; 636  : 			// Cobra - one missile/harm at a time
; 637  : 			if ((agDoctrine == AGD_LOOK_SHOOT_LOOK) && 
; 638  : 					(missionType == AMIS_SEADESCORT || missionType == AMIS_SEADSTRIKE))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+244], 2
	jne	SHORT $LN207@GroundAtta
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+284], 12			; 0000000cH
	je	SHORT $LN206@GroundAtta
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+284], 11			; 0000000bH
	jne	SHORT $LN207@GroundAtta
$LN206@GroundAtta:

; 639  : 			{
; 640  : 				Sms->SetAGBPair(FALSE);//Cobra

	push	0
	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?SetAGBPair@SMSClass@@QAEX_N@Z		; SMSClass::SetAGBPair

; 641  : 			}
; 642  : 			else	// bombs dropped in pairs

	jmp	SHORT $LN205@GroundAtta
$LN207@GroundAtta:

; 643  : 			{
; 644  : 				Sms->SetAGBPair(TRUE);

	push	1
	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?SetAGBPair@SMSClass@@QAEX_N@Z		; SMSClass::SetAGBPair
$LN205@GroundAtta:

; 645  : 			}
; 646  : 
; 647  : 			// 2001-05-13 ADDED BY S.G. WITHOUT THIS, I WOULD GO BACK REDO THE CROSSWIND AFTER THE MISSION IS OVER! WAYPOINTS WILL OVERIDE trackXYZ SO DON'T WORRY ABOUT THEM
; 648  : 			//if (!missionComplete && madeAGPass)
; 649  : 			if (!missionComplete)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+292], 0
	jne	SHORT $LN204@GroundAtta

; 650  : 			{
; 651  : 				// head to IP
; 652  : 				onStation = Crosswind;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+132], 12			; 0000000cH
$LN204@GroundAtta:

; 653  : 			}
; 654  : 
; 655  : 			//TJL 11/09/03 Changed to Corner speed to allow for variety of AI
; 656  : 			desSpeed = cornerSpeed * 1.3f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+100]
	mulss	xmm0, DWORD PTR __real@3fa66666
	movss	DWORD PTR _desSpeed$[ebp], xmm0

; 657  : 			//desSpeed = max(200.0F, min (desSpeed, 700.0F));	// Knots
; 658  : 			TrackPoint(0.0F, desSpeed);

	push	ecx
	movss	xmm0, DWORD PTR _desSpeed$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TrackPoint@DigitalBrain@@IAEMMM@Z	; DigitalBrain::TrackPoint
	fstp	ST(0)

; 659  : 
; 660  : 			break;

	jmp	$LN243@GroundAtta
$FinalSG$328:

; 661  : 			//======= End NotThereYet ===========================================
; 662  : 
; 663  : 			// #2 heading towards target -- we've reached the IP and are heading in
; 664  : 			// set up our available weapons (pref to missiles) and head in
; 665  : 			// also set up our final approach tracking
; 666  : 			//==================================================
; 667  : 		case HoldInPlace:
; 668  : 			AI_MESSAGE(0, "AI - HOLD IN PLACE");
; 669  : 
; 670  : 			// 2001-07-12 S.G. Moved so a retargeting is not done
; 671  : FinalSG: // 2001-06-24 ADDED BY S.G. JUMPS BACK HERE IF TOO CLOSE FOR JSOWs or HARMS AND TARGET NOT EMITTING
; 672  : 			dx = (float)fabs( self->XPos() - trackX );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv4640[ebp]
	movss	xmm0, DWORD PTR tv4640[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+148]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _dx$[ebp]

; 673  : 			dy = (float)fabs( self->YPos() - trackY );

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv4649[ebp]
	movss	xmm0, DWORD PTR tv4649[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+152]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _dy$[ebp]

; 674  : 			approxRange = (float)sqrt(dx*dx + dy*dy);

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _approxRange$[ebp]

; 675  : 
; 676  : 			if ( groundTargetPtr ){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+224], 0
	je	SHORT $LN202@GroundAtta

; 677  : 				SetTrackPoint(groundTargetPtr);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+224]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPoint@DigitalBrain@@QAEXPAVSimObjectType@@@Z ; DigitalBrain::SetTrackPoint
$LN202@GroundAtta:

; 678  : 			}
; 679  : 			trackZ = OTWDriver.GetGroundLevel( trackX, trackY );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+152]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+148]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+156]

; 680  : 
; 681  : 			// 2001-10-31 ADDED by M.N. hope this fixes the SEAD circling bug
; 682  : 			if (groundTargetPtr)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+224], 0
	je	$LN201@GroundAtta

; 683  : 			{
; 684  : 				float approxTargetRange;
; 685  : 				xft = trackX - self->XPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv4676[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+148]
	subss	xmm0, DWORD PTR tv4676[ebp]
	movss	DWORD PTR _xft$[ebp], xmm0

; 686  : 				yft = trackY - self->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv4683[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+152]
	subss	xmm0, DWORD PTR tv4683[ebp]
	movss	DWORD PTR _yft$[ebp], xmm0

; 687  : 				zft = trackZ - self->ZPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4690[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+156]
	subss	xmm0, DWORD PTR tv4690[ebp]
	movss	DWORD PTR _zft$[ebp], xmm0

; 688  : 				//zft = trackZ - self->ZPos();
; 689  : 				//approxTargetRange = (float)sqrt(xft*xft + yft*yft + zft*zft);
; 690  : 				approxTargetRange = (float)sqrt(xft*xft + yft*yft);

	movss	xmm0, DWORD PTR _xft$[ebp]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	movss	xmm1, DWORD PTR _yft$[ebp]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _approxTargetRange$27[ebp]

; 691  : 				approxTargetRange = max (approxTargetRange, 1.0F);

	movss	xmm0, DWORD PTR _approxTargetRange$27[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN315@GroundAtta
	movss	xmm0, DWORD PTR _approxTargetRange$27[ebp]
	movss	DWORD PTR tv1290[ebp], xmm0
	jmp	SHORT $LN316@GroundAtta
$LN315@GroundAtta:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv1290[ebp], xmm0
$LN316@GroundAtta:
	movss	xmm0, DWORD PTR tv1290[ebp]
	movss	DWORD PTR _approxTargetRange$27[ebp], xmm0

; 692  : 
; 693  : 				dx = self->dmx[0][0]*xft + self->dmx[0][1]*yft + self->dmx[0][2]*zft;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _dx$[ebp], xmm0

; 694  : 				dy = self->dmx[1][0]*xft + self->dmx[1][1]*yft + self->dmx[1][2]*zft;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _dy$[ebp], xmm0

; 695  : 				ata =  (float)acos(dx/approxTargetRange);

	movss	xmm0, DWORD PTR _dx$[ebp]
	divss	xmm0, DWORD PTR _approxTargetRange$27[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?acos@@YAMM@Z				; acos
	add	esp, 4
	fstp	DWORD PTR _ata$[ebp]

; 696  : 
; 697  : 
; 698  : 					//Cobra - pullout and away from target
; 699  : 				if ((approxTargetRange < 3.5f * NM_TO_FT) && (FabsF(ata) < 20.0f * DTR))//3.0 Cobra - was 6

	movss	xmm0, DWORD PTR __real@46a6257a
	comiss	xmm0, DWORD PTR _approxTargetRange$27[ebp]
	jbe	SHORT $LN200@GroundAtta
	push	ecx
	movss	xmm0, DWORD PTR _ata$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FabsF@@YAMM@Z				; FabsF
	add	esp, 4
	fstp	DWORD PTR tv4736[ebp]
	movss	xmm0, DWORD PTR __real@3eb2b8c1
	comiss	xmm0, DWORD PTR tv4736[ebp]
	jbe	SHORT $LN200@GroundAtta

; 700  : 				{
; 701  : 					// Bail and try again
; 702  : 					AGflyOut();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AGflyOut@DigitalBrain@@IAEXXZ		; DigitalBrain::AGflyOut

; 703  : 					// Release current target and target history
; 704  : 					//SetGroundTarget( NULL );
; 705  : 					//gndTargetHistory[0] = NULL;
; 706  : 					onStation = Downwind;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+132], 13			; 0000000dH

; 707  : 					break;

	jmp	$LN243@GroundAtta
$LN200@GroundAtta:

; 708  : 				}
; 709  : 			}
; 710  : 			else // No target, so flyout and try again

	jmp	SHORT $LN199@GroundAtta
$LN201@GroundAtta:

; 711  : 			{
; 712  : 				// Bail and try again
; 713  : 				AGflyOut();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AGflyOut@DigitalBrain@@IAEXXZ		; DigitalBrain::AGflyOut

; 714  : 				// Release current target and target history
; 715  : 				//SetGroundTarget( NULL );
; 716  : 				//gndTargetHistory[0] = NULL;
; 717  : 				onStation = Downwind;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+132], 13			; 0000000dH

; 718  : 				break;

	jmp	$LN243@GroundAtta
$LN199@GroundAtta:

; 719  : 			}
; 720  : 			if ( hasAGMissile)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+184], 0
	je	SHORT $LN198@GroundAtta

; 721  : 			{
; 722  : 				self->FCC->SetMasterMode (FireControlComputer::AirGroundMissile);

	push	6
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+936]
	call	?SetMasterMode@FireControlComputer@@QAEXW4FCCMasterMode@1@@Z ; FireControlComputer::SetMasterMode

; 723  : 				self->FCC->SetSubMode (FireControlComputer::SLAVE);

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+936]
	call	?SetSubMode@FireControlComputer@@QAEXW4FCCSubMode@1@@Z ; FireControlComputer::SetSubMode

; 724  : 				//Cobra test
; 725  : 				//	self->FCC->SetMasterMode (FireControlComputer::AirGroundMissile);
; 726  : 				//	self->FCC->SetSubMode (FireControlComputer::SLAVE);
; 727  : 				FCC->preDesignate = TRUE;

	mov	eax, DWORD PTR _FCC$[ebp]
	mov	BYTE PTR [eax+182], 1
	jmp	$LN192@GroundAtta
$LN198@GroundAtta:

; 728  : 				//MonoPrint ("Setup For Maverick\n");
; 729  : 			}
; 730  : 			else if ( hasHARM)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+188], 0
	je	SHORT $LN196@GroundAtta

; 731  : 			{
; 732  : 				//Cobra test
; 733  : 				self->FCC->SetMasterMode (FireControlComputer::AirGroundHARM);

	push	7
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+936]
	call	?SetMasterMode@FireControlComputer@@QAEXW4FCCMasterMode@1@@Z ; FireControlComputer::SetMasterMode

; 734  : 				self->FCC->SetSubMode (FireControlComputer::HARM); // RV- I-Hawk

	push	23					; 00000017H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+936]
	call	?SetSubMode@FireControlComputer@@QAEXW4FCCSubMode@1@@Z ; FireControlComputer::SetSubMode
	jmp	$LN192@GroundAtta
$LN196@GroundAtta:

; 735  : 				//MonoPrint ("Setup For HARM\n");
; 736  : 			}
; 737  : 			else if (hasGBU)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+204], 0
	je	SHORT $LN194@GroundAtta

; 738  : 			{
; 739  : 				//Cobra test
; 740  : 				self->FCC->SetMasterMode (FireControlComputer::AirGroundLaser);

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+936]
	call	?SetMasterMode@FireControlComputer@@QAEXW4FCCMasterMode@1@@Z ; FireControlComputer::SetMasterMode

; 741  : 				self->FCC->SetSubMode (FireControlComputer::SLAVE);

	push	15					; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [ecx+936]
	call	?SetSubMode@FireControlComputer@@QAEXW4FCCSubMode@1@@Z ; FireControlComputer::SetSubMode

; 742  : 				self->FCC->preDesignate = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+936]
	mov	BYTE PTR [ecx+182], 1

; 743  : 				self->FCC->designateCmd = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+936]
	mov	BYTE PTR [ecx+184], 1
	jmp	$LN192@GroundAtta
$LN194@GroundAtta:

; 744  : 				//MonoPrint ("Setup For GBU\n");
; 745  : 			}
; 746  : 			else if (hasBomb)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+180], 0
	je	$LN192@GroundAtta

; 747  : 			{
; 748  : 				//Cobra JSOW use MANual submode
; 749  : 				self->FCC->SetMasterMode (FireControlComputer::AirGroundBomb);

	push	5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [ecx+936]
	call	?SetMasterMode@FireControlComputer@@QAEXW4FCCMasterMode@1@@Z ; FireControlComputer::SetMasterMode

; 750  : 				if (hasJSOW)

	cmp	DWORD PTR _hasJSOW$[ebp], 0
	je	SHORT $LN191@GroundAtta

; 751  : 					self->FCC->SetSubMode (FireControlComputer::MAN);

	push	21					; 00000015H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+936]
	call	?SetSubMode@FireControlComputer@@QAEXW4FCCSubMode@1@@Z ; FireControlComputer::SetSubMode

; 752  : 				else

	jmp	SHORT $LN190@GroundAtta
$LN191@GroundAtta:

; 753  : 					self->FCC->SetSubMode (FireControlComputer::CCRP);

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [edx+936]
	call	?SetSubMode@FireControlComputer@@QAEXW4FCCSubMode@1@@Z ; FireControlComputer::SetSubMode
$LN190@GroundAtta:

; 754  : 
; 755  : 				self->FCC->groundDesignateX = trackX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+936]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	mov	DWORD PTR [edx+376], ecx

; 756  : 				self->FCC->groundDesignateY = trackY; // Cobra - was: groundDesignateY = trackX

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+936]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+152]
	mov	DWORD PTR [ecx+380], eax

; 757  : 				self->FCC->groundDesignateZ = trackZ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+936]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	DWORD PTR [eax+384], edx
$LN192@GroundAtta:

; 758  : 				//MonoPrint ("Setup For Iron Bomb\n");
; 759  : 			}
; 760  : 
; 761  : 			// Point the radar at the target
; 762  : 			if (theRadar) 

	cmp	DWORD PTR _theRadar$[ebp], 0
	je	$LN189@GroundAtta

; 763  : 			{
; 764  : 				// 2001-07-23 MODIFIED BY S.G. MOVERS ARE ONLY 3D ENTITIES WHILE BATTALIONS WILL INCLUDE 2D AND 3D VEHICLES...
; 765  : 				//          if (groundTargetPtr && groundTargetPtr->BaseData()->IsMover())
; 766  : 				if (groundTargetPtr && ((groundTargetPtr->BaseData()->IsSim() && ((SimBaseClass *)groundTargetPtr->BaseData())->GetCampaignObject()->IsBattalion()) || (groundTargetPtr->BaseData()->IsCampaign() && groundTargetPtr->BaseData()->IsBattalion())))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+224], 0
	je	$LN188@GroundAtta
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN186@GroundAtta
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR tv1459[ebp], eax
	mov	eax, DWORD PTR tv1459[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv1459[ebp]
	mov	eax, DWORD PTR [edx+240]
	call	eax
	test	eax, eax
	jne	SHORT $LN187@GroundAtta
$LN186@GroundAtta:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsCampaign@FalconEntity@@QAEHXZ	; FalconEntity::IsCampaign
	test	eax, eax
	je	SHORT $LN188@GroundAtta
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv1474[ebp], eax
	mov	eax, DWORD PTR tv1474[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv1474[ebp]
	mov	eax, DWORD PTR [edx+240]
	call	eax
	test	eax, eax
	je	SHORT $LN188@GroundAtta
$LN187@GroundAtta:

; 767  : 					theRadar->SetMode(RadarClass::GMT);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax

; 768  : 				else

	jmp	SHORT $LN185@GroundAtta
$LN188@GroundAtta:

; 769  : 					theRadar->SetMode(RadarClass::GM);

	push	14					; 0000000eH
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax
$LN185@GroundAtta:

; 770  : 				theRadar->SetDesiredTarget(groundTargetPtr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+224]
	push	edx
	mov	eax, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 771  : 				theRadar->SetAGSnowPlow(TRUE);

	push	1
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+176]
	call	eax
$LN189@GroundAtta:

; 772  : 			}
; 773  : 
; 774  : 			//  Cobra - SEAD attack mode is high to get the SAM radar to turn on
; 775  : 			//			if ( agApproach == AGA_LOW || missionType == AMIS_SEADESCORT || missionType == AMIS_SEADSTRIKE)
; 776  : 			if ( agApproach == AGA_LOW)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+248], 0
	jne	$LN184@GroundAtta

; 777  : 			{
; 778  : 				trackZ = OTWDriver.GetGroundLevel( self->XPos() + self->XDelta(),
; 779  : 						self->YPos() + self->YDelta() );

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv4798[ebp]
	movss	xmm0, DWORD PTR tv4798[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv6298[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv4803[ebp]
	movss	xmm0, DWORD PTR tv6298[ebp]
	addss	xmm0, DWORD PTR tv4803[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv4808[ebp]
	movss	xmm0, DWORD PTR tv4808[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	movss	DWORD PTR tv6300[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv4813[ebp]
	movss	xmm0, DWORD PTR tv6300[ebp]
	addss	xmm0, DWORD PTR tv4813[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+156]

; 780  : 				// if we're below track alt, kick us up a bit harder so we don't plow
; 781  : 				// into steeper slopes
; 782  : 				//Cobra we are going to try and do a sanity check on alt now
; 783  : 				float myAlt = self->ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _myAlt$14[ebp]

; 784  : 				if (fabsf(myAlt - self->GetA2GGunRocketAlt()) < 2000.0f)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetA2GGunRocketAlt@AircraftClass@@QAEMXZ ; AircraftClass::GetA2GGunRocketAlt
	fstp	DWORD PTR tv4826[ebp]
	movss	xmm0, DWORD PTR _myAlt$14[ebp]
	subss	xmm0, DWORD PTR tv4826[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR tv4832[ebp]
	movss	xmm0, DWORD PTR __real@44fa0000
	comiss	xmm0, DWORD PTR tv4832[ebp]
	jbe	SHORT $LN183@GroundAtta

; 785  : 					trackZ = -self->GetA2GGunRocketAlt();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetA2GGunRocketAlt@AircraftClass@@QAEMXZ ; AircraftClass::GetA2GGunRocketAlt
	fstp	DWORD PTR tv4838[ebp]
	movss	xmm0, DWORD PTR tv4838[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+156], xmm0

; 786  : 				else

	jmp	SHORT $LN182@GroundAtta
$LN183@GroundAtta:

; 787  : 					trackZ = self->ZPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+156]
$LN182@GroundAtta:

; 788  : 				//TJL 11/09/03 Changed to Corner speed to allow for variety of AI
; 789  : 				desSpeed = cornerSpeed * 1.3f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+100]
	mulss	xmm0, DWORD PTR __real@3fa66666
	movss	DWORD PTR _desSpeed$[ebp], xmm0
	jmp	$LN165@GroundAtta
$LN184@GroundAtta:

; 790  : 				//desSpeed = 650.0f;
; 791  : 
; 792  : 			}
; 793  : 			else if ( agApproach == AGA_DIVE )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+248], 3
	jne	$LN180@GroundAtta

; 794  : 			{
; 795  : 				trackZ = OTWDriver.GetGroundLevel( trackX, trackY );

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+152]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+148]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+156]

; 796  : 				if ( Sms->curWeapon )

	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN179@GroundAtta

; 797  : 					trackZ -= 100.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+156]
	subss	xmm0, DWORD PTR __real@42c80000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+156], xmm0
$LN179@GroundAtta:

; 798  : 				//TJL 11/09/03 Changed to Corner speed to allow for variety of AI
; 799  : 				desSpeed = cornerSpeed * 1.3f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+100]
	mulss	xmm0, DWORD PTR __real@3fa66666
	movss	DWORD PTR _desSpeed$[ebp], xmm0

; 800  : 				//desSpeed = 450.0f;
; 801  : 				if ( self->ZPos() - curGroundAlt > -1000.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4867[ebp]
	movss	xmm0, DWORD PTR tv4867[ebp]
	subss	xmm0, DWORD PTR _curGroundAlt$[ebp]
	comiss	xmm0, DWORD PTR __real@c47a0000
	jbe	$LN176@GroundAtta

; 802  : 				{
; 803  : 					trackZ = OTWDriver.GetGroundLevel( self->XPos() + self->XDelta(),
; 804  : 							self->YPos() + self->YDelta() );

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv4872[ebp]
	movss	xmm0, DWORD PTR tv4872[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv6302[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv4877[ebp]
	movss	xmm0, DWORD PTR tv6302[ebp]
	addss	xmm0, DWORD PTR tv4877[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv4882[ebp]
	movss	xmm0, DWORD PTR tv4882[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	movss	DWORD PTR tv6368[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv4887[ebp]
	movss	xmm0, DWORD PTR tv6368[ebp]
	addss	xmm0, DWORD PTR tv4887[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+156]

; 805  : 					if ( self->ZPos() - trackZ > -500.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4897[ebp]
	movss	xmm0, DWORD PTR tv4897[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+156]
	comiss	xmm0, DWORD PTR __real@c3fa0000
	jbe	SHORT $LN177@GroundAtta

; 806  : 						trackZ = trackZ - 500.0f - ( self->ZPos() - trackZ + 500.0f ) * 2.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+156]
	subss	xmm0, DWORD PTR __real@43fa0000
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movss	DWORD PTR tv6370[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4905[ebp]
	movss	xmm0, DWORD PTR tv4905[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+156]
	addss	xmm0, DWORD PTR __real@43fa0000
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv6370[ebp]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+156], xmm1

; 807  : 					else

	jmp	SHORT $LN176@GroundAtta
$LN177@GroundAtta:

; 808  : 						trackZ -= 500.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+156]
	subss	xmm0, DWORD PTR __real@43fa0000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+156], xmm0
$LN176@GroundAtta:

; 809  : 				}
; 810  : 			}
; 811  : 			else

	jmp	$LN165@GroundAtta
$LN180@GroundAtta:

; 812  : 			{
; 813  : 				// 2002-03-28 MN fix for AI handling of JSOW/JDAM missiles - fire from defined altitude instead of 4000ft like Mavericks
; 814  : 				if (Sms && Sms->curWeapon)

	cmp	DWORD PTR _Sms$[ebp], 0
	je	$LN170@GroundAtta
	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	eax, al
	test	eax, eax
	je	$LN170@GroundAtta

; 815  : 				{
; 816  : 					Falcon4EntityClassType* classPtr = NULL;

	mov	DWORD PTR _classPtr$19[ebp], 0

; 817  : 					WeaponClassDataType *wc = NULL;

	mov	DWORD PTR _wc$17[ebp], 0

; 818  : 
; 819  : 					classPtr = (Falcon4EntityClassType*)Sms->curWeapon->EntityType();

	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	ecx, eax
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	DWORD PTR _classPtr$19[ebp], eax

; 820  : 					if (classPtr)

	cmp	DWORD PTR _classPtr$19[ebp], 0
	je	$LN170@GroundAtta

; 821  : 					{
; 822  : 						wc = (WeaponClassDataType*)classPtr->dataPtr;

	mov	ecx, DWORD PTR _classPtr$19[ebp]
	mov	edx, DWORD PTR [ecx+77]
	mov	DWORD PTR _wc$17[ebp], edx

; 823  : 						// Cobra - GPS weapons
; 824  : 						if (wc && (wc->Flags & WEAP_BOMBGPS))

	cmp	DWORD PTR _wc$17[ebp], 0
	je	SHORT $LN170@GroundAtta
	mov	eax, DWORD PTR _wc$17[ebp]
	movzx	ecx, WORD PTR [eax+10]
	and	ecx, 2048				; 00000800H
	je	SHORT $LN170@GroundAtta

; 825  : 						{
; 826  : 							//if (wc->Flags & WEAP_CLUSTER) // Cobra - JSOW
; 827  : 							if (hasJSOW)

	cmp	DWORD PTR _hasJSOW$[ebp], 0
	je	SHORT $LN171@GroundAtta

; 828  : 								ipZ = -self->GetA2GJSOWAlt();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetA2GJSOWAlt@AircraftClass@@QAEMXZ	; AircraftClass::GetA2GJSOWAlt
	fstp	DWORD PTR tv4923[ebp]
	movss	xmm0, DWORD PTR tv4923[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+276], xmm0

; 829  : 							else

	jmp	SHORT $LN170@GroundAtta
$LN171@GroundAtta:

; 830  : 								ipZ = -self->GetA2GJDAMAlt(); // Cobra - JDAM

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetA2GJDAMAlt@AircraftClass@@QAEMXZ	; AircraftClass::GetA2GJDAMAlt
	fstp	DWORD PTR tv4929[ebp]
	movss	xmm0, DWORD PTR tv4929[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+276], xmm0
$LN170@GroundAtta:

; 831  : 						}
; 832  : 					}
; 833  : 				}
; 834  : 				ipZ = trackZ = AGattackAlt;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+264]
	mov	DWORD PTR [eax+156], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	DWORD PTR [eax+276], edx

; 835  : 				//TJL 11/09/03 Changed to Corner speed to allow for variety of AI
; 836  : 				desSpeed = cornerSpeed * 1.3f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+100]
	mulss	xmm0, DWORD PTR __real@3fa66666
	movss	DWORD PTR _desSpeed$[ebp], xmm0

; 837  : 				//desSpeed = 450.0f;
; 838  : 				if ( self->ZPos() - curGroundAlt > -500.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4943[ebp]
	movss	xmm0, DWORD PTR tv4943[ebp]
	subss	xmm0, DWORD PTR _curGroundAlt$[ebp]
	comiss	xmm0, DWORD PTR __real@c3fa0000
	jbe	$LN165@GroundAtta

; 839  : 				{
; 840  : 					trackZ = OTWDriver.GetGroundLevel( self->XPos() + self->XDelta(),
; 841  : 							self->YPos() + self->YDelta() );

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv4948[ebp]
	movss	xmm0, DWORD PTR tv4948[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv6372[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv4953[ebp]
	movss	xmm0, DWORD PTR tv6372[ebp]
	addss	xmm0, DWORD PTR tv4953[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv4958[ebp]
	movss	xmm0, DWORD PTR tv4958[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	movss	DWORD PTR tv6374[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv4963[ebp]
	movss	xmm0, DWORD PTR tv6374[ebp]
	addss	xmm0, DWORD PTR tv4963[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+156]

; 842  : 					if ( self->ZPos() - trackZ > -500.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4973[ebp]
	movss	xmm0, DWORD PTR tv4973[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+156]
	comiss	xmm0, DWORD PTR __real@c3fa0000
	jbe	SHORT $LN168@GroundAtta

; 843  : 						trackZ = trackZ - 500.0f - ( self->ZPos() - trackZ + 500.0f ) * 2.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+156]
	subss	xmm0, DWORD PTR __real@43fa0000
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movss	DWORD PTR tv6376[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4981[ebp]
	movss	xmm0, DWORD PTR tv4981[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+156]
	addss	xmm0, DWORD PTR __real@43fa0000
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv6376[ebp]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+156], xmm1
	jmp	SHORT $LN165@GroundAtta
$LN168@GroundAtta:

; 844  : 					// 2001-06-18 ADDED S.G. WHY DO THIS IF WE'RE GOING UP ALREADY?
; 845  : 					else if (trackZ > AGattackAlt) // Are we going up? (don't forget negative is UP)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+156]
	comiss	xmm0, DWORD PTR [edx+264]
	jbe	SHORT $LN166@GroundAtta

; 846  : 						trackZ = AGattackAlt;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+264]
	mov	DWORD PTR [eax+156], edx

; 847  : 					// END OF ADDED SECTION
; 848  : 					else

	jmp	SHORT $LN165@GroundAtta
$LN166@GroundAtta:

; 849  : 						trackZ -= 500.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+156]
	subss	xmm0, DWORD PTR __real@43fa0000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+156], xmm0
$LN165@GroundAtta:

; 850  : 				}
; 851  : 			}
; 852  : 
; 853  : 			onStation = Final;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+132], 15			; 0000000fH

; 854  : 			// 2001-05-21 ADDED BY S.G. ONLY DO THIS IF NOT WITHIN TIMEOUT PERIOD. TO BE SAFE, I'LL SET waitingForShot TO 0 IN digimain SO IT IS INITIALIZED
; 855  : 			if (waitingForShot < SimLibElapsedTime - 5000)

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	eax, 5000				; 00001388H
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+496], eax
	jae	SHORT $LN164@GroundAtta

; 856  : 				// Say you can fire when ready
; 857  : 				// END OF ADDED SECTION
; 858  : 				waitingForShot = SimLibElapsedTime - 1;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+496], edx
$LN164@GroundAtta:

; 859  : 
; 860  : 			TrackPoint(0.0F, desSpeed/* KNOTS_TO_FTPSEC*/); // Cobra - aerial TrackPoint speed is in knots

	push	ecx
	movss	xmm0, DWORD PTR _desSpeed$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TrackPoint@DigitalBrain@@IAEMMM@Z	; DigitalBrain::TrackPoint
	fstp	ST(0)

; 861  : 			// SimpleTrack(SimpleTrackSpd, desSpeed * KNOTS_TO_FTPSEC);
; 862  : 			break;

	jmp	$LN243@GroundAtta
$LN163@GroundAtta:

; 863  : 			//======= End HoldInPlace ===========================================
; 864  : 
; 865  : 			// case 1a: head to good start location (IP)
; 866  : 			//==================================================
; 867  : 		case Crosswind:
; 868  : 			AI_MESSAGE(0, "AI - CROSSWINDING");
; 869  : 
; 870  : 			SetTrackPoint(ipX, ipY, AGattackAlt);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+264]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+272]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+268]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPoint@DigitalBrain@@QAEXMMM@Z	; DigitalBrain::SetTrackPoint

; 871  : 
; 872  : 			dx = (float)fabs( self->XPos() - trackX );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv5015[ebp]
	movss	xmm0, DWORD PTR tv5015[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+148]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _dx$[ebp]

; 873  : 			dy = (float)fabs( self->YPos() - trackY );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv5024[ebp]
	movss	xmm0, DWORD PTR tv5024[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+152]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _dy$[ebp]

; 874  : 			approxRange = (float)sqrt( dx * dx + dy * dy );

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _approxRange$[ebp]

; 875  : 
; 876  : 			// Terrain follow around 1000 ft
; 877  : 			// 2001-07-12 MODIFIED BY S.G. SO SEAD STAY LOW UNTIL READY TO ATTACK
; 878  : 			//  Cobra - SEAD attack mode is high to get the SAM radar to turn on
; 879  : 			//			if ( agApproach == AGA_LOW || missionType == AMIS_SEADESCORT || missionType == AMIS_SEADSTRIKE)
; 880  : 			if ( agApproach == AGA_DIVE )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+248], 3
	jne	$LN162@GroundAtta

; 881  : 			{
; 882  : 				trackZ = OTWDriver.GetGroundLevel( self->XPos() + self->XDelta(),
; 883  : 						self->YPos() + self->YDelta() );

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv5039[ebp]
	movss	xmm0, DWORD PTR tv5039[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movss	DWORD PTR tv6378[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv5044[ebp]
	movss	xmm0, DWORD PTR tv6378[ebp]
	addss	xmm0, DWORD PTR tv5044[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv5049[ebp]
	movss	xmm0, DWORD PTR tv5049[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv6380[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv5054[ebp]
	movss	xmm0, DWORD PTR tv6380[ebp]
	addss	xmm0, DWORD PTR tv5054[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+156]

; 884  : 				// if we're below track alt, kick us up a bit harder so we don't plow
; 885  : 				// into steeper slopes
; 886  : 				//
; 887  : 				//Cobra we are going to try and do a sanity check on alt now
; 888  : 				float myAlt = self->ZPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _myAlt$12[ebp]

; 889  : 				if (fabsf(myAlt - self->GetA2GGunRocketAlt()) < 2000.0f)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetA2GGunRocketAlt@AircraftClass@@QAEMXZ ; AircraftClass::GetA2GGunRocketAlt
	fstp	DWORD PTR tv5067[ebp]
	movss	xmm0, DWORD PTR _myAlt$12[ebp]
	subss	xmm0, DWORD PTR tv5067[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR tv5073[ebp]
	movss	xmm0, DWORD PTR __real@44fa0000
	comiss	xmm0, DWORD PTR tv5073[ebp]
	jbe	SHORT $LN161@GroundAtta

; 890  : 					trackZ = -self->GetA2GGunRocketAlt();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetA2GGunRocketAlt@AircraftClass@@QAEMXZ ; AircraftClass::GetA2GGunRocketAlt
	fstp	DWORD PTR tv5079[ebp]
	movss	xmm0, DWORD PTR tv5079[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+156], xmm0

; 891  : 				else

	jmp	SHORT $LN160@GroundAtta
$LN161@GroundAtta:

; 892  : 					trackZ = self->ZPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+156]
$LN160@GroundAtta:

; 893  : 				//TJL 11/09/03 Changed to Corner speed to allow for variety of AI
; 894  : 				desSpeed = cornerSpeed * 1.3f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+100]
	mulss	xmm0, DWORD PTR __real@3fa66666
	movss	DWORD PTR _desSpeed$[ebp], xmm0

; 895  : 
; 896  : 			}
; 897  : 			else

	jmp	$LN154@GroundAtta
$LN162@GroundAtta:

; 898  : 			{
; 899  : 				//TJL 11/09/03 Changed to Corner speed to allow for variety of AI
; 900  : 				desSpeed = cornerSpeed * 1.3f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+100]
	mulss	xmm0, DWORD PTR __real@3fa66666
	movss	DWORD PTR _desSpeed$[ebp], xmm0

; 901  : 				//desSpeed = 450.0f;
; 902  : 				if ( self->ZPos() - curGroundAlt > -500.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv5093[ebp]
	movss	xmm0, DWORD PTR tv5093[ebp]
	subss	xmm0, DWORD PTR _curGroundAlt$[ebp]
	comiss	xmm0, DWORD PTR __real@c3fa0000
	jbe	$LN154@GroundAtta

; 903  : 				{
; 904  : 					trackZ = OTWDriver.GetGroundLevel( self->XPos() + self->XDelta(),
; 905  : 							self->YPos() + self->YDelta() );

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv5098[ebp]
	movss	xmm0, DWORD PTR tv5098[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv6382[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv5103[ebp]
	movss	xmm0, DWORD PTR tv6382[ebp]
	addss	xmm0, DWORD PTR tv5103[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv5108[ebp]
	movss	xmm0, DWORD PTR tv5108[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	movss	DWORD PTR tv6384[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv5113[ebp]
	movss	xmm0, DWORD PTR tv6384[ebp]
	addss	xmm0, DWORD PTR tv5113[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+156]

; 906  : 					if ( self->ZPos() - trackZ > -500.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv5123[ebp]
	movss	xmm0, DWORD PTR tv5123[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+156]
	comiss	xmm0, DWORD PTR __real@c3fa0000
	jbe	SHORT $LN157@GroundAtta

; 907  : 						trackZ = trackZ - 500.0f - ( self->ZPos() - trackZ + 500.0f ) * 2.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+156]
	subss	xmm0, DWORD PTR __real@43fa0000
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movss	DWORD PTR tv6386[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv5131[ebp]
	movss	xmm0, DWORD PTR tv5131[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+156]
	addss	xmm0, DWORD PTR __real@43fa0000
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv6386[ebp]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+156], xmm1
	jmp	SHORT $LN154@GroundAtta
$LN157@GroundAtta:

; 908  : 					// 2001-06-18 ADDED S.G. WHY DO THIS IF WE'RE GOING UP ALREADY?
; 909  : 					else if (agApproach == AGA_HIGH && trackZ > AGattackAlt) // Are we going up? (don't forget negative is UP)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+248], 2
	jne	SHORT $LN155@GroundAtta
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+156]
	comiss	xmm0, DWORD PTR [eax+264]
	jbe	SHORT $LN155@GroundAtta

; 910  : 						trackZ = AGattackAlt;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+264]
	mov	DWORD PTR [ecx+156], eax

; 911  : 					// END OF ADDED SECTION
; 912  : 					else

	jmp	SHORT $LN154@GroundAtta
$LN155@GroundAtta:

; 913  : 						trackZ -= 500.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+156]
	subss	xmm0, DWORD PTR __real@43fa0000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+156], xmm0
$LN154@GroundAtta:

; 914  : 				}
; 915  : 			}
; 916  : 			//Cobra trackpoint uses knots only
; 917  : 			TrackPoint(0.0F, desSpeed /* KNOTS_TO_FTPSEC*/); // Cobra - aerial TrackPoint speed is in knots

	push	ecx
	movss	xmm0, DWORD PTR _desSpeed$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TrackPoint@DigitalBrain@@IAEMMM@Z	; DigitalBrain::TrackPoint
	fstp	ST(0)

; 918  : 
; 919  : 			// 2001-05-05 ADDED BY S.G. THIS IS TO MAKE THE AI PULL AGGRESIVELY AFTER A PASS. I WOULD HAVE LIKE TESTING madeAGPass BUT IT IS CLEARED BEFORE :-(
; 920  : 			// Increase the gains on crosswind turn
; 921  : 			rStick *= 3.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR __real@40400000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+32], xmm0

; 922  : 			if ( rStick > 1.0f )

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+32]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN153@GroundAtta

; 923  : 				rStick = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+32], xmm0
	jmp	SHORT $LN151@GroundAtta
$LN153@GroundAtta:

; 924  : 			else if ( rStick < -1.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	comiss	xmm0, DWORD PTR [ecx+32]
	jbe	SHORT $LN151@GroundAtta

; 925  : 				rStick = -1.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [edx+32], xmm0
$LN151@GroundAtta:

; 926  : 			// END OF ADDED SECTION
; 927  : 
; 928  : 			// 2001-07-12 ADDED BY S.G. IF CLOSE TO THE FINAL POINT, SEND AN ATTACK COMMAND TO THE WINGS
; 929  : 			// tell our wing to attack
; 930  : 			if (groundTargetPtr && ((hasJSOW && approxRange < g_fAIJSOWMaxRange * NM_TO_FT) || (approxRange < 8.0f * NM_TO_FT))) // was 5.0

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+224], 0
	je	$LN144@GroundAtta
	cmp	DWORD PTR _hasJSOW$[ebp], 0
	je	SHORT $LN148@GroundAtta
	movss	xmm0, DWORD PTR ?g_fAIJSOWMaxRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	ja	SHORT $LN149@GroundAtta
$LN148@GroundAtta:
	movss	xmm0, DWORD PTR __real@473de1b0
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	$LN144@GroundAtta
$LN149@GroundAtta:

; 931  : 			{
; 932  : 				if ( self->GetCampaignObject()->NumberOfComponents()>1 && !isWing && sentWingAGAttack != AG_ORDER_ATTACK)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	cmp	eax, 1
	jle	$LN144@GroundAtta
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], 0
	jne	$LN144@GroundAtta
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+232], 2
	je	$LN144@GroundAtta

; 933  : 				{
; 934  : 					VU_ID targetId;

	lea	ecx, DWORD PTR _targetId$24[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 935  : 
; 936  : 					if (groundTargetPtr->BaseData()->IsSim())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN146@GroundAtta

; 937  : 					{
; 938  : 						targetId = ((SimBaseClass*)groundTargetPtr->BaseData())->GetCampaignObject()->Id();

	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _targetId$24[ebp], ecx
	mov	DWORD PTR _targetId$24[ebp+4], edx

; 939  : 					}
; 940  : 					else

	jmp	SHORT $LN145@GroundAtta
$LN146@GroundAtta:

; 941  : 						targetId = groundTargetPtr->BaseData()->Id();

	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _targetId$24[ebp], edx
	mov	DWORD PTR _targetId$24[ebp+4], eax
$LN145@GroundAtta:

; 942  : 
; 943  : 					if (targetId != FalconNullId)

	push	OFFSET ?FalconNullId@@3VVU_ID@@A	; FalconNullId
	lea	ecx, DWORD PTR _targetId$24[ebp]
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN144@GroundAtta

; 944  : 					{
; 945  : 						AiSendCommand (self, FalconWingmanMsg::WMAssignTarget, AiFlight, targetId);

	mov	edx, DWORD PTR _targetId$24[ebp+4]
	push	edx
	mov	eax, DWORD PTR _targetId$24[ebp]
	push	eax
	push	2
	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	?AiSendCommand@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z ; AiSendCommand
	add	esp, 20					; 00000014H

; 946  : 						AiSendCommand (self, FalconWingmanMsg::WMShooterMode, AiFlight, targetId);

	mov	eax, DWORD PTR _targetId$24[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _targetId$24[ebp]
	push	ecx
	push	2
	push	11					; 0000000bH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	?AiSendCommand@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z ; AiSendCommand
	add	esp, 20					; 00000014H

; 947  : 						sentWingAGAttack = AG_ORDER_ATTACK;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+232], 2

; 948  : 						// 2002-01-20 ADDED BY S.G. Added the new nextAttackCommandToSend variable check to force the lead to reissue an attack in case wings went back into formation (can we say HACK?)
; 949  : 						nextAttackCommandToSend = SimLibElapsedTime + g_nAIshootLookShootTime * SEC_TO_MSEC;

	mov	edx, DWORD PTR ?g_nAIshootLookShootTime@@3HA ; g_nAIshootLookShootTime
	imul	edx, 1000				; 000003e8H
	add	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+256], edx
$LN144@GroundAtta:

; 950  : 					}
; 951  : 				}
; 952  : 			}
; 953  : // END OF ADDED SECTION
; 954  : 
; 955  : 				// are we about at our IP?
; 956  : 				// 2001-07-23 MODIFIED BY S.G. IF NO WEAPON AVAIL FOR TARGET, SWITCH TO FINAL RIGHT AWAY
; 957  : 				//			if ( approxRange < 1.3f * NM_TO_FT)
; 958  : 				//cobra removed because SEAD was looping around target
; 959  : 				//if ( approxRange < 1.3f * NM_TO_FT /*|| !IsSetATC(HasCanUseAGWeapon)*/)
; 960  : 				// Cobra - Added JSOW stand-off weapon launching
; 961  : 				//if ((hasJSOW && approxRange < g_fAIJSOWMaxRange * NM_TO_FT) || (approxRange < g_fAGFlyoutRange * NM_TO_FT)) // Cobra - was 5 NM
; 962  : 				if ((hasJSOW && approxRange < g_fAIJSOWMaxRange * NM_TO_FT) ||
; 963  : 						(hasHARM && approxRange < g_fAIHarmMaxRange * NM_TO_FT) ||
; 964  : 						(approxRange < 8.0f * NM_TO_FT /* && FabsF(ata) < 20.0f * DTR */)) // Cobra - was 5 NM

	cmp	DWORD PTR _hasJSOW$[ebp], 0
	je	SHORT $LN141@GroundAtta
	movss	xmm0, DWORD PTR ?g_fAIJSOWMaxRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	ja	SHORT $LN142@GroundAtta
$LN141@GroundAtta:
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+188], 0
	je	SHORT $LN140@GroundAtta
	movss	xmm0, DWORD PTR ?g_fAIHarmMaxRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	ja	SHORT $LN142@GroundAtta
$LN140@GroundAtta:
	movss	xmm0, DWORD PTR __real@473de1b0
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	SHORT $LN138@GroundAtta
$LN142@GroundAtta:

; 965  : 				{
; 966  : 					// 2001-07-15 ADDED BY S.G. IF madeAGPass IS TRUE, WE MADE AN A2G PASS AND WAS TURNING AWAY. REDO AN ATTACK PROFILE FOR A NEW PASS
; 967  : 					if (madeAGPass && (!hasJSOW)) 

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+260], 0
	je	SHORT $LN139@GroundAtta
	cmp	DWORD PTR _hasJSOW$[ebp], 0
	jne	SHORT $LN139@GroundAtta

; 968  : 					{
; 969  : 						AGflyOut();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AGflyOut@DigitalBrain@@IAEXXZ		; DigitalBrain::AGflyOut

; 970  : 						// Release current target and target history
; 971  : 						//SetGroundTarget( NULL );
; 972  : 						//gndTargetHistory[0] = NULL;
; 973  : 						onStation = Downwind;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+132], 13			; 0000000dH

; 974  : 					}
; 975  : 					else

	jmp	SHORT $LN138@GroundAtta
$LN139@GroundAtta:

; 976  : 					{
; 977  : 						onStation = HoldInPlace;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+132], 7
$LN138@GroundAtta:

; 978  : 					}
; 979  : 				}
; 980  : 				break;

	jmp	$LN243@GroundAtta
$LN137@GroundAtta:

; 981  : 			//======= End CrossWind ===========================================
; 982  : 
; 983  : //==================================================
; 984  : //  Flyout for next pass
; 985  : //==================================================
; 986  :      case Downwind:
; 987  : 			{
; 988  : 					float x,y,z;
; 989  : 					float approxTargetRange, approxRange;
; 990  : 
; 991  : 				agDoctrine = AGD_LOOK_SHOOT_LOOK;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+244], 2

; 992  : 				ipZ = trackZ = AGattackAlt;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+264]
	mov	DWORD PTR [eax+156], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	DWORD PTR [eax+276], edx

; 993  : 
; 994  : 				if (groundTargetPtr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+224], 0
	je	$LN136@GroundAtta

; 995  : 				{
; 996  : 					dx = self->XPos() - groundTargetPtr->BaseData()->XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv5220[ebp]
	movss	xmm0, DWORD PTR tv5220[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	movss	DWORD PTR tv6388[ebp], xmm0
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv5226[ebp]
	movss	xmm0, DWORD PTR tv6388[ebp]
	subss	xmm0, DWORD PTR tv5226[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 997  : 					dy = self->YPos() - groundTargetPtr->BaseData()->YPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv5231[ebp]
	movss	xmm0, DWORD PTR tv5231[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	movss	DWORD PTR tv6390[ebp], xmm0
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv5237[ebp]
	movss	xmm0, DWORD PTR tv6390[ebp]
	subss	xmm0, DWORD PTR tv5237[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 998  : 				}
; 999  : 				else

	jmp	SHORT $LN135@GroundAtta
$LN136@GroundAtta:

; 1000 : 				{
; 1001 : 					self->curWaypoint->GetLocation(&x, &y, &z);

	lea	edx, DWORD PTR _z$8[ebp]
	push	edx
	lea	eax, DWORD PTR _y$18[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+728]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation

; 1002 : 					dx = self->XPos() - x;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv5246[ebp]
	movss	xmm0, DWORD PTR tv5246[ebp]
	subss	xmm0, DWORD PTR _x$20[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 1003 : 					dy = self->YPos() - y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv5251[ebp]
	movss	xmm0, DWORD PTR tv5251[ebp]
	subss	xmm0, DWORD PTR _y$18[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0
$LN135@GroundAtta:

; 1004 : 				}
; 1005 : 				approxTargetRange = (float)sqrt( dx * dx + dy * dy );

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _approxTargetRange$21[ebp]

; 1006 : 
; 1007 : 				dx = trackX - self->XPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv5261[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+148]
	subss	xmm0, DWORD PTR tv5261[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 1008 : 				dy = trackY - self->YPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv5268[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+152]
	subss	xmm0, DWORD PTR tv5268[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 1009 : 				approxRange = (float)sqrt( dx * dx + dy * dy );

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _approxRange$7[ebp]

; 1010 : 
; 1011 : 				// Flying toward target??....Wrong!!
; 1012 : 				if (FabsF(approxTargetRange) < 0.2f * NM_TO_FT)

	push	ecx
	movss	xmm0, DWORD PTR _approxTargetRange$21[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FabsF@@YAMM@Z				; FabsF
	add	esp, 4
	fstp	DWORD PTR tv5281[ebp]
	movss	xmm0, DWORD PTR __real@4497e7c0
	comiss	xmm0, DWORD PTR tv5281[ebp]
	jbe	SHORT $LN134@GroundAtta

; 1013 : 				{
; 1014 : 					AGflyOut();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AGflyOut@DigitalBrain@@IAEXXZ		; DigitalBrain::AGflyOut
$LN134@GroundAtta:

; 1015 : 				}
; 1016 : 
; 1017 : 			   desSpeed = cornerSpeed * 1.3f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+100]
	mulss	xmm0, DWORD PTR __real@3fa66666
	movss	DWORD PTR _desSpeed$[ebp], xmm0

; 1018 : 			   if ( self->ZPos() - curGroundAlt > -500.0f )

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv5289[ebp]
	movss	xmm0, DWORD PTR tv5289[ebp]
	subss	xmm0, DWORD PTR _curGroundAlt$[ebp]
	comiss	xmm0, DWORD PTR __real@c3fa0000
	jbe	$LN133@GroundAtta

; 1019 : 			   {
; 1020 : 			   	   trackZ = OTWDriver.GetGroundLevel( self->XPos() + self->XDelta(),
; 1021 : 												  self->YPos() + self->YDelta() );

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv5294[ebp]
	movss	xmm0, DWORD PTR tv5294[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movss	DWORD PTR tv6392[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv5299[ebp]
	movss	xmm0, DWORD PTR tv6392[ebp]
	addss	xmm0, DWORD PTR tv5299[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv5304[ebp]
	movss	xmm0, DWORD PTR tv5304[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv6394[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv5309[ebp]
	movss	xmm0, DWORD PTR tv6394[ebp]
	addss	xmm0, DWORD PTR tv5309[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+156]
$LN133@GroundAtta:

; 1022 : 				  // if ( self->ZPos() - trackZ > -500.0f )
; 1023 : 						//trackZ = AGattackAlt;
; 1024 : 				  // else if (agApproach == AGA_HIGH && trackZ > AGattackAlt) 
; 1025 : 					 //   trackZ = AGattackAlt;
; 1026 : 				  // else
; 1027 : 						//trackZ = AGattackAlt;
; 1028 : 			   }
; 1029 : 				TrackPoint(0.0F, desSpeed);

	push	ecx
	movss	xmm0, DWORD PTR _desSpeed$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TrackPoint@DigitalBrain@@IAEMMM@Z	; DigitalBrain::TrackPoint
	fstp	ST(0)

; 1030 : 
; 1031 : 				// Cobra - get out far enough to make another pass
; 1032 : 				if ((((slowMover) && (approxTargetRange > g_fAGSlowFlyoutRange * NM_TO_FT)) || 
; 1033 : 							(approxTargetRange > g_fAGFlyoutRange * NM_TO_FT))) // || 

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+560], 0
	je	SHORT $LN130@GroundAtta
	movss	xmm0, DWORD PTR ?g_fAGSlowFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	movss	xmm1, DWORD PTR _approxTargetRange$21[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN131@GroundAtta
$LN130@GroundAtta:
	movss	xmm0, DWORD PTR ?g_fAGFlyoutRange@@3MA
	mulss	xmm0, DWORD PTR __real@45bde1b0
	movss	xmm1, DWORD PTR _approxTargetRange$21[ebp]
	comiss	xmm1, xmm0
	jbe	$LN122@GroundAtta
$LN131@GroundAtta:

; 1034 : 								//(approxRange < 2.0f  * NM_TO_FT)) 
; 1035 : 				{
; 1036 : 					// Check for remaining AB weapons
; 1037 : 					SelectGroundWeapon();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectGroundWeapon@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectGroundWeapon

; 1038 : 					if (!(IsSetATC(HasCanUseAGWeapon)) && !(IsSetATC(HasAGWeapon)))

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetATC@DigitalBrain@@QAEHH@Z		; DigitalBrain::IsSetATC
	test	eax, eax
	jne	$LN129@GroundAtta
	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetATC@DigitalBrain@@QAEHH@Z		; DigitalBrain::IsSetATC
	test	eax, eax
	jne	$LN129@GroundAtta

; 1039 : 					{
; 1040 : 						ClearATCFlag(HasCanUseAGWeapon);

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 1041 : 						ClearATCFlag(HasAGWeapon);

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 1042 : 						// Go to next WP
; 1043 : 						if (GetWaypointIndex() == GetTargetWPIndex())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWaypointIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetWaypointIndex
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTargetWPIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetTargetWPIndex
	cmp	esi, eax
	jne	SHORT $LN128@GroundAtta

; 1044 : 							SelectNextWaypoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectNextWaypoint@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectNextWaypoint
$LN128@GroundAtta:

; 1045 : 						// go back to initial AG state
; 1046 : 						agDoctrine = AGD_NONE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+244], 0

; 1047 : 						missionComplete = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+292], 1

; 1048 : 						agmergeTimer = SimLibElapsedTime + 1;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+556], edx

; 1049 : 						// if we're a wingie, rejoin the lead
; 1050 : 						if ( isWing )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN127@GroundAtta

; 1051 : 						{
; 1052 : 							mFormation = FalconWingmanMsg::WMWedge;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+808], 1

; 1053 : 							AiRejoin( NULL );

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiRejoin@DigitalBrain@@AAEXPAVFalconWingmanMsg@@W4AiHint@1@@Z ; DigitalBrain::AiRejoin

; 1054 : 							// make sure wing's designated target is NULL'd out
; 1055 : 							mDesignatedObject = FalconNullId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax+800], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+804], edx
$LN127@GroundAtta:

; 1056 : 						}
; 1057 : 						onStation = NotThereYet;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+132], 0

; 1058 : 						return;

	jmp	$LN311@GroundAtta
$LN129@GroundAtta:

; 1059 : 					}
; 1060 : 					// Increase the gains on downwind turn
; 1061 : 					rStick *= 3.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+32]
	mulss	xmm0, DWORD PTR __real@40400000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+32], xmm0

; 1062 : 					if ( rStick > 1.0f )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN126@GroundAtta

; 1063 : 						rStick = 1.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+32], xmm0
	jmp	SHORT $LN124@GroundAtta
$LN126@GroundAtta:

; 1064 : 					else if ( rStick < -1.0f )

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	comiss	xmm0, DWORD PTR [edx+32]
	jbe	SHORT $LN124@GroundAtta

; 1065 : 						rStick = -1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax+32], xmm0
$LN124@GroundAtta:

; 1066 : 
; 1067 : 					if (!groundTargetPtr)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+224], 0
	jne	SHORT $LN123@GroundAtta

; 1068 : 					{
; 1069 : 						ipX = trackX = x;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$20[ebp]
	movss	DWORD PTR [edx+148], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$20[ebp]
	movss	DWORD PTR [eax+268], xmm0

; 1070 : 						ipY = trackY = y;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$18[ebp]
	movss	DWORD PTR [ecx+152], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$18[ebp]
	movss	DWORD PTR [edx+272], xmm0

; 1071 : 						onStation = NotThereYet;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+132], 0

; 1072 : 					}
; 1073 : 					else

	jmp	$LN122@GroundAtta
$LN123@GroundAtta:

; 1074 : 					{
; 1075 : 						ipX = trackX = groundTargetPtr->BaseData()->XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv2372[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv2372[ebp]
	movss	DWORD PTR [edx+148], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv2372[ebp]
	movss	DWORD PTR [eax+268], xmm0

; 1076 : 						ipY = trackY = groundTargetPtr->BaseData()->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv2383[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv2383[ebp]
	movss	DWORD PTR [edx+152], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv2383[ebp]
	movss	DWORD PTR [eax+272], xmm0

; 1077 : 						onStation = HoldInPlace;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+132], 7
$LN122@GroundAtta:

; 1078 : 					}
; 1079 : 				}
; 1080 : 			}
; 1081 :      		break;

	jmp	$LN243@GroundAtta
$LN121@GroundAtta:

; 1082 : //======= End Downwind ===========================================
; 1083 : 
; 1084 : 			//==================================================
; 1085 : 		case Base:
; 1086 : 			//TJL 11/09/03 Changed to Corner speed to allow for variety of AI
; 1087 : 			desSpeed = cornerSpeed * 1.3f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+100]
	mulss	xmm0, DWORD PTR __real@3fa66666
	movss	DWORD PTR _desSpeed$[ebp], xmm0

; 1088 : 			//Cobra trackpoint uses knots only
; 1089 : 			TrackPoint(0.0F, desSpeed /* KNOTS_TO_FTPSEC*/); // Cobra - aerial TrackPoint speed is in knots

	push	ecx
	movss	xmm0, DWORD PTR _desSpeed$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TrackPoint@DigitalBrain@@IAEMMM@Z	; DigitalBrain::TrackPoint
	fstp	ST(0)

; 1090 : 			break;

	jmp	$LN243@GroundAtta
$LN120@GroundAtta:

; 1091 : 			//======= End Base ===========================================
; 1092 : 
; 1093 : 			// #3 -- final attack approach
; 1094 : 			//==================================================
; 1095 : 		case Final:
; 1096 : 			AI_MESSAGE(0, "AI - ON ATTACK FINAL");
; 1097 : 
; 1098 : 			ClearFlag( GunFireFlag );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@BaseBrain@@QAEXH@Z		; BaseBrain::ClearFlag

; 1099 : 
; 1100 : 			if ( groundTargetPtr )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+224], 0
	je	$LN115@GroundAtta

; 1101 : 			{
; 1102 : 				SetTrackPoint(groundTargetPtr->BaseData()->XPos(), groundTargetPtr->BaseData()->YPos());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPoint@DigitalBrain@@QAEXMM@Z	; DigitalBrain::SetTrackPoint

; 1103 : 
; 1104 : 				// tell our wing to attack
; 1105 : 				if ( 
; 1106 : 					self->GetCampaignObject()->NumberOfComponents()>1 && 
; 1107 : 					!isWing && sentWingAGAttack != AG_ORDER_ATTACK
; 1108 : 				){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?NumberOfComponents@CampBaseClass@@QAEHXZ ; CampBaseClass::NumberOfComponents
	cmp	eax, 1
	jle	$LN115@GroundAtta
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jne	$LN115@GroundAtta
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+232], 2
	je	$LN115@GroundAtta

; 1109 : 					VU_ID targetId;

	lea	ecx, DWORD PTR _targetId$25[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 1110 : 					if (groundTargetPtr->BaseData()->IsSim()){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN117@GroundAtta

; 1111 : 						targetId = ((SimBaseClass*)groundTargetPtr->BaseData())->GetCampaignObject()->Id();

	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _targetId$25[ebp], ecx
	mov	DWORD PTR _targetId$25[ebp+4], edx

; 1112 : 					}
; 1113 : 					else{

	jmp	SHORT $LN116@GroundAtta
$LN117@GroundAtta:

; 1114 : 						targetId = groundTargetPtr->BaseData()->Id();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _targetId$25[ebp], edx
	mov	DWORD PTR _targetId$25[ebp+4], eax
$LN116@GroundAtta:

; 1115 : 					}
; 1116 : 
; 1117 : 					if (targetId != FalconNullId)

	push	OFFSET ?FalconNullId@@3VVU_ID@@A	; FalconNullId
	lea	ecx, DWORD PTR _targetId$25[ebp]
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN115@GroundAtta

; 1118 : 					{
; 1119 : 						AiSendCommand (self, FalconWingmanMsg::WMAssignTarget, AiFlight, targetId);

	mov	edx, DWORD PTR _targetId$25[ebp+4]
	push	edx
	mov	eax, DWORD PTR _targetId$25[ebp]
	push	eax
	push	2
	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	?AiSendCommand@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z ; AiSendCommand
	add	esp, 20					; 00000014H

; 1120 : 						AiSendCommand (self, FalconWingmanMsg::WMShooterMode, AiFlight, targetId);

	mov	eax, DWORD PTR _targetId$25[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _targetId$25[ebp]
	push	ecx
	push	2
	push	11					; 0000000bH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	?AiSendCommand@@YAXPAVSimBaseClass@@HHVVU_ID@@@Z ; AiSendCommand
	add	esp, 20					; 00000014H

; 1121 : 						sentWingAGAttack = AG_ORDER_ATTACK;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+232], 2

; 1122 : 						// 2002-01-20 ADDED BY S.G. Added the new nextAttackCommandToSend 
; 1123 : 						// variable check to force the lead to reissue an attack in case wings 
; 1124 : 						// went back into formation (can we say HACK?)
; 1125 : 						nextAttackCommandToSend = SimLibElapsedTime + g_nAIshootLookShootTime * SEC_TO_MSEC;

	mov	edx, DWORD PTR ?g_nAIshootLookShootTime@@3HA ; g_nAIshootLookShootTime
	imul	edx, 1000				; 000003e8H
	add	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+256], edx
$LN115@GroundAtta:

; 1126 : 					}
; 1127 : 				}
; 1128 : 			}
; 1129 : 
; 1130 : 			diveOK = FALSE;

	mov	DWORD PTR _diveOK$[ebp], 0

; 1131 : 
; 1132 : 			// Terrain follow around 1000 ft
; 1133 : 			if ( agApproach == AGA_LOW )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+248], 0
	jne	$LN114@GroundAtta

; 1134 : 			{
; 1135 : 				// if we're below track alt, kick us up a bit harder so we don't plow
; 1136 : 				// into steeper slopes
; 1137 : 				if (Sms->curWeapon && !Sms->curWeapon->IsMissile() && Sms->curWeapon->IsBomb())

	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	edx, al
	test	edx, edx
	je	$LN113@GroundAtta
	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	DWORD PTR tv2514[ebp], eax
	mov	eax, DWORD PTR tv2514[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv2514[ebp]
	mov	eax, DWORD PTR [edx+156]
	call	eax
	test	eax, eax
	jne	$LN113@GroundAtta
	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	DWORD PTR tv2527[ebp], eax
	mov	ecx, DWORD PTR tv2527[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv2527[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax
	test	eax, eax
	je	$LN113@GroundAtta

; 1138 : 				{
; 1139 : 					//TJL 10/28/03 Harm Altitude
; 1140 : 					if ( self->ZPos() - curGroundAlt > -1000.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv5454[ebp]
	movss	xmm0, DWORD PTR tv5454[ebp]
	subss	xmm0, DWORD PTR _curGroundAlt$[ebp]
	comiss	xmm0, DWORD PTR __real@c47a0000
	jbe	$LN112@GroundAtta

; 1141 : 					{
; 1142 : 						trackZ = OTWDriver.GetGroundLevel( self->XPos() + self->XDelta(),
; 1143 : 								self->YPos() + self->YDelta() );

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv5459[ebp]
	movss	xmm0, DWORD PTR tv5459[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv6396[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv5464[ebp]
	movss	xmm0, DWORD PTR tv6396[ebp]
	addss	xmm0, DWORD PTR tv5464[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv5469[ebp]
	movss	xmm0, DWORD PTR tv5469[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	movss	DWORD PTR tv6398[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv5474[ebp]
	movss	xmm0, DWORD PTR tv6398[ebp]
	addss	xmm0, DWORD PTR tv5474[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+156]

; 1144 : 						//Cobra we are going to try and do a sanity check on alt now
; 1145 : 						float myAlt = self->ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _myAlt$15[ebp]

; 1146 : 						if (fabsf(myAlt - self->GetA2GHarmAlt()) < 2000.0f)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetA2GHarmAlt@AircraftClass@@QAEMXZ	; AircraftClass::GetA2GHarmAlt
	fstp	DWORD PTR tv5487[ebp]
	movss	xmm0, DWORD PTR _myAlt$15[ebp]
	subss	xmm0, DWORD PTR tv5487[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR tv5493[ebp]
	movss	xmm0, DWORD PTR __real@44fa0000
	comiss	xmm0, DWORD PTR tv5493[ebp]
	jbe	SHORT $LN111@GroundAtta

; 1147 : 							trackZ = -self->GetA2GHarmAlt();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetA2GHarmAlt@AircraftClass@@QAEMXZ	; AircraftClass::GetA2GHarmAlt
	fstp	DWORD PTR tv5499[ebp]
	movss	xmm0, DWORD PTR tv5499[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+156], xmm0

; 1148 : 						else

	jmp	SHORT $LN110@GroundAtta
$LN111@GroundAtta:

; 1149 : 							trackZ = self->ZPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+156]
$LN110@GroundAtta:

; 1150 : 					}
; 1151 : 					else

	jmp	SHORT $LN109@GroundAtta
$LN112@GroundAtta:

; 1152 : 					{
; 1153 : 						//trackZ = OTWDriver.GetGroundLevel( trackX, trackY ) - 4000.0f;
; 1154 : 						trackZ = -self->GetA2GHarmAlt();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetA2GHarmAlt@AircraftClass@@QAEMXZ	; AircraftClass::GetA2GHarmAlt
	fstp	DWORD PTR tv5509[ebp]
	movss	xmm0, DWORD PTR tv5509[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+156], xmm0
$LN109@GroundAtta:

; 1155 : 					}
; 1156 : 				}
; 1157 : 				else

	jmp	$LN106@GroundAtta
$LN113@GroundAtta:

; 1158 : 				{
; 1159 : 					trackZ = OTWDriver.GetGroundLevel( self->XPos() + self->XDelta(),
; 1160 : 							self->YPos() + self->YDelta() );

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv5515[ebp]
	movss	xmm0, DWORD PTR tv5515[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movss	DWORD PTR tv6400[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv5520[ebp]
	movss	xmm0, DWORD PTR tv6400[ebp]
	addss	xmm0, DWORD PTR tv5520[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv5525[ebp]
	movss	xmm0, DWORD PTR tv5525[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv6402[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv5530[ebp]
	movss	xmm0, DWORD PTR tv6402[ebp]
	addss	xmm0, DWORD PTR tv5530[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+156]

; 1161 : 					//TJL 10/28/03
; 1162 : 
; 1163 : 					//Cobra we are going to try and do a sanity check on alt now
; 1164 : 					float myAlt = self->ZPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _myAlt$13[ebp]

; 1165 : 					if (fabsf(myAlt - self->GetA2GHarmAlt()) < 2000.0f)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetA2GHarmAlt@AircraftClass@@QAEMXZ	; AircraftClass::GetA2GHarmAlt
	fstp	DWORD PTR tv5543[ebp]
	movss	xmm0, DWORD PTR _myAlt$13[ebp]
	subss	xmm0, DWORD PTR tv5543[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR tv5549[ebp]
	movss	xmm0, DWORD PTR __real@44fa0000
	comiss	xmm0, DWORD PTR tv5549[ebp]
	jbe	SHORT $LN107@GroundAtta

; 1166 : 						trackZ = -self->GetA2GHarmAlt();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetA2GHarmAlt@AircraftClass@@QAEMXZ	; AircraftClass::GetA2GHarmAlt
	fstp	DWORD PTR tv5555[ebp]
	movss	xmm0, DWORD PTR tv5555[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+156], xmm0

; 1167 : 					else

	jmp	SHORT $LN106@GroundAtta
$LN107@GroundAtta:

; 1168 : 						trackZ = self->ZPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+156]
$LN106@GroundAtta:

; 1169 : 				}
; 1170 : 				if ( madeAGPass )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+260], 0
	je	SHORT $LN105@GroundAtta

; 1171 : 					//TJL 11/09/03 Changed to Corner speed to allow for variety of AI
; 1172 : 					desSpeed = cornerSpeed * 1.3f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+100]
	mulss	xmm0, DWORD PTR __real@3fa66666
	movss	DWORD PTR _desSpeed$[ebp], xmm0

; 1173 : 				//desSpeed = 450.0f;
; 1174 : 				else

	jmp	SHORT $LN104@GroundAtta
$LN105@GroundAtta:

; 1175 : 					//TJL 11/09/03 Changed to Corner speed to allow for variety of AI
; 1176 : 					desSpeed = cornerSpeed * 1.3f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+100]
	mulss	xmm0, DWORD PTR __real@3fa66666
	movss	DWORD PTR _desSpeed$[ebp], xmm0
$LN104@GroundAtta:

; 1177 : 				//desSpeed = 650.0f;
; 1178 : 					TrackPoint(0.0F, desSpeed);

	push	ecx
	movss	xmm0, DWORD PTR _desSpeed$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TrackPoint@DigitalBrain@@IAEMMM@Z	; DigitalBrain::TrackPoint
	fstp	ST(0)
	jmp	$LN94@GroundAtta
$LN114@GroundAtta:

; 1179 : 			}
; 1180 : 			else if ( agApproach == AGA_DIVE )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+248], 3
	jne	$LN102@GroundAtta

; 1181 : 			{
; 1182 : 				if ( self->ZPos() - curGroundAlt > -1000.0f )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv5575[ebp]
	movss	xmm0, DWORD PTR tv5575[ebp]
	subss	xmm0, DWORD PTR _curGroundAlt$[ebp]
	comiss	xmm0, DWORD PTR __real@c47a0000
	jbe	$LN101@GroundAtta

; 1183 : 				{
; 1184 : 					trackZ = OTWDriver.GetGroundLevel( self->XPos() + self->XDelta(),
; 1185 : 							self->YPos() + self->YDelta() );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv5580[ebp]
	movss	xmm0, DWORD PTR tv5580[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	movss	DWORD PTR tv6404[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv5585[ebp]
	movss	xmm0, DWORD PTR tv6404[ebp]
	addss	xmm0, DWORD PTR tv5585[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv5590[ebp]
	movss	xmm0, DWORD PTR tv5590[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movss	DWORD PTR tv6406[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv5595[ebp]
	movss	xmm0, DWORD PTR tv6406[ebp]
	addss	xmm0, DWORD PTR tv5595[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+156]

; 1186 : 					if ( self->ZPos() - trackZ > -500.0f )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv5605[ebp]
	movss	xmm0, DWORD PTR tv5605[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+156]
	comiss	xmm0, DWORD PTR __real@c3fa0000
	jbe	SHORT $LN100@GroundAtta

; 1187 : 						trackZ = trackZ - 500.0f - ( self->ZPos() - trackZ + 500.0f ) * 2.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+156]
	subss	xmm0, DWORD PTR __real@43fa0000
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv6408[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv5613[ebp]
	movss	xmm0, DWORD PTR tv5613[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+156]
	addss	xmm0, DWORD PTR __real@43fa0000
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv6408[ebp]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+156], xmm1

; 1188 : 					else

	jmp	SHORT $LN99@GroundAtta
$LN100@GroundAtta:

; 1189 : 						trackZ -= 500.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+156]
	subss	xmm0, DWORD PTR __real@43fa0000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+156], xmm0
$LN99@GroundAtta:

; 1190 : 				}
; 1191 : 				else

	jmp	$LN95@GroundAtta
$LN101@GroundAtta:

; 1192 : 				{
; 1193 : 					trackZ = OTWDriver.GetGroundLevel( trackX, trackY );

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+152]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+148]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+156]

; 1194 : 					diveOK = TRUE;

	mov	DWORD PTR _diveOK$[ebp], 1

; 1195 : 					if (Sms->curWeapon && !Sms->curWeapon->IsMissile() && Sms->curWeapon->IsBomb())

	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN97@GroundAtta
	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	DWORD PTR tv2778[ebp], eax
	mov	eax, DWORD PTR tv2778[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv2778[ebp]
	mov	eax, DWORD PTR [edx+156]
	call	eax
	test	eax, eax
	jne	SHORT $LN97@GroundAtta
	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	DWORD PTR tv2791[ebp], eax
	mov	ecx, DWORD PTR tv2791[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv2791[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax
	test	eax, eax
	je	SHORT $LN97@GroundAtta

; 1196 : 						trackZ -= 2000.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+156]
	subss	xmm0, DWORD PTR __real@44fa0000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+156], xmm0
	jmp	SHORT $LN95@GroundAtta
$LN97@GroundAtta:

; 1197 : 					else if ( Sms->curWeapon)

	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN95@GroundAtta

; 1198 : 						trackZ -= 50.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+156]
	subss	xmm0, DWORD PTR __real@42480000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+156], xmm0
$LN95@GroundAtta:

; 1199 : 				}
; 1200 : 				//TJL 11/09/03 Changed to Corner speed to allow for variety of AI
; 1201 : 				desSpeed = cornerSpeed * 1.3f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+100]
	mulss	xmm0, DWORD PTR __real@3fa66666
	movss	DWORD PTR _desSpeed$[ebp], xmm0

; 1202 : 					TrackPoint(0.0F, desSpeed);

	push	ecx
	movss	xmm0, DWORD PTR _desSpeed$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TrackPoint@DigitalBrain@@IAEMMM@Z	; DigitalBrain::TrackPoint
	fstp	ST(0)

; 1203 : 			}
; 1204 : 			else

	jmp	$LN94@GroundAtta
$LN102@GroundAtta:

; 1205 : 			{
; 1206 : 				trackZ = ipZ = AGattackAlt;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+264]
	mov	DWORD PTR [ecx+276], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+276]
	mov	DWORD PTR [ecx+156], eax

; 1207 : 				//TJL 11/09/03 Changed to Corner speed to allow for variety of AI
; 1208 : 				desSpeed = cornerSpeed * 1.3f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+100]
	mulss	xmm0, DWORD PTR __real@3fa66666
	movss	DWORD PTR _desSpeed$[ebp], xmm0

; 1209 : 				if ( self->ZPos() - curGroundAlt > -1000.0f )

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv5666[ebp]
	movss	xmm0, DWORD PTR tv5666[ebp]
	subss	xmm0, DWORD PTR _curGroundAlt$[ebp]
	comiss	xmm0, DWORD PTR __real@c47a0000
	jbe	$LN89@GroundAtta

; 1210 : 				{
; 1211 : 					trackZ = OTWDriver.GetGroundLevel( self->XPos() + self->XDelta(),
; 1212 : 							self->YPos() + self->YDelta() );

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv5671[ebp]
	movss	xmm0, DWORD PTR tv5671[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movss	DWORD PTR tv6410[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv5676[ebp]
	movss	xmm0, DWORD PTR tv6410[ebp]
	addss	xmm0, DWORD PTR tv5676[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv5681[ebp]
	movss	xmm0, DWORD PTR tv5681[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv6412[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv5686[ebp]
	movss	xmm0, DWORD PTR tv6412[ebp]
	addss	xmm0, DWORD PTR tv5686[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+156]

; 1213 : 					if ( self->ZPos() - trackZ > -500.0f )

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv5696[ebp]
	movss	xmm0, DWORD PTR tv5696[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+156]
	comiss	xmm0, DWORD PTR __real@c3fa0000
	jbe	SHORT $LN92@GroundAtta

; 1214 : 						trackZ = trackZ - 500.0f - ( self->ZPos() - trackZ + 500.0f ) * 2.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+156]
	subss	xmm0, DWORD PTR __real@43fa0000
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	movss	DWORD PTR tv6414[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv5704[ebp]
	movss	xmm0, DWORD PTR tv5704[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+156]
	addss	xmm0, DWORD PTR __real@43fa0000
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv6414[ebp]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+156], xmm1
	jmp	SHORT $LN89@GroundAtta
$LN92@GroundAtta:

; 1215 : 					// 2001-06-18 ADDED S.G. WHY DO THIS IF WE'RE GOING UP ALREADY?
; 1216 : 					else if (trackZ > AGattackAlt) // Are we going up? (don't forget negative is UP)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+156]
	comiss	xmm0, DWORD PTR [eax+264]
	jbe	SHORT $LN90@GroundAtta

; 1217 : 						trackZ = AGattackAlt;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+264]
	mov	DWORD PTR [ecx+156], eax

; 1218 : 					// END OF ADDED SECTION
; 1219 : 					else

	jmp	SHORT $LN89@GroundAtta
$LN90@GroundAtta:

; 1220 : 						trackZ -= 500.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+156]
	subss	xmm0, DWORD PTR __real@43fa0000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+156], xmm0
$LN89@GroundAtta:

; 1221 : 				}
; 1222 : 				TrackPoint(0.0F, desSpeed);

	push	ecx
	movss	xmm0, DWORD PTR _desSpeed$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TrackPoint@DigitalBrain@@IAEMMM@Z	; DigitalBrain::TrackPoint
	fstp	ST(0)
$LN94@GroundAtta:

; 1223 : 			}
; 1224 : 
; 1225 : 			// if we've got a missile get r mmax and min (which should be
; 1226 : 			// fairly accurate now.
; 1227 : 			// also we're going to predetermine if we'll take a missile shot
; 1228 : 			// or not (mostly for harms).
; 1229 : 			shootMissile = FALSE;

	mov	DWORD PTR _shootMissile$[ebp], 0

; 1230 : 			droppingBombs = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+236], 0

; 1231 : 
; 1232 : 			// get accurate range and ata to target
; 1233 : 			xft = trackX - self->XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv5725[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+148]
	subss	xmm0, DWORD PTR tv5725[ebp]
	movss	DWORD PTR _xft$[ebp], xmm0

; 1234 : 			yft = trackY - self->YPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv5732[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+152]
	subss	xmm0, DWORD PTR tv5732[ebp]
	movss	DWORD PTR _yft$[ebp], xmm0

; 1235 : 			zft = trackZ - self->ZPos(); // Cobra - Ground range better 

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv5739[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+156]
	subss	xmm0, DWORD PTR tv5739[ebp]
	movss	DWORD PTR _zft$[ebp], xmm0

; 1236 : 			approxRange = (float)sqrt(xft*xft + yft*yft);

	movss	xmm0, DWORD PTR _xft$[ebp]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	movss	xmm1, DWORD PTR _yft$[ebp]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _approxRange$[ebp]

; 1237 : 			//approxSlantRange = (float)sqrt(xft*xft + yft*yft + zft*zft);
; 1238 : 			//approxRange = max (approxRange, 1.0F);
; 1239 : 			approxSlantRange = approxRange;

	movss	xmm0, DWORD PTR _approxRange$[ebp]
	movss	DWORD PTR _approxSlantRange$[ebp], xmm0

; 1240 : 
; 1241 : 			// check for target
; 1242 : 			if ( groundTargetPtr == NULL )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+224], 0
	jne	SHORT $LN88@GroundAtta

; 1243 : 			{
; 1244 : 				if ( approxRange < 1000.0f )

	movss	xmm0, DWORD PTR __real@447a0000
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	SHORT $LN87@GroundAtta

; 1245 : 					onStation = NotThereYet;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+132], 0
$LN87@GroundAtta:

; 1246 : 				break;

	jmp	$LN243@GroundAtta
$LN88@GroundAtta:

; 1247 : 			}
; 1248 : 
; 1249 : 			rx = self->dmx[0][0]*xft + self->dmx[0][1]*yft + self->dmx[0][2]*zft;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 1250 : 			ry = self->dmx[1][0]*xft + self->dmx[1][1]*yft + self->dmx[1][2]*zft;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 1251 : 			ata =  (float)acos(rx/approxRange);

	movss	xmm0, DWORD PTR _rx$[ebp]
	divss	xmm0, DWORD PTR _approxRange$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?acos@@YAMM@Z				; acos
	add	esp, 4
	fstp	DWORD PTR _ata$[ebp]

; 1252 : 
; 1253 : 			// check for a photo mission
; 1254 : 			if ((missionType == AMIS_BDA || missionType == AMIS_RECON) && hasCamera )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+284], 30			; 0000001eH
	je	SHORT $LN85@GroundAtta
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+284], 29			; 0000001dH
	jne	SHORT $LN86@GroundAtta
$LN85@GroundAtta:
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+200], 0
	je	SHORT $LN86@GroundAtta

; 1255 : 			{
; 1256 : 				TakePicture(approxRange, ata);

	push	ecx
	movss	xmm0, DWORD PTR _ata$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _approxRange$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TakePicture@DigitalBrain@@IAEXMM@Z	; DigitalBrain::TakePicture

; 1257 : 			}
; 1258 : 			// Might shoot a missile
; 1259 : 			else

	jmp	$LN58@GroundAtta
$LN86@GroundAtta:

; 1260 : 			{
; 1261 : 				// preference given to stand-off missiles unless our
; 1262 : 				// approach is high alt (bombing run)
; 1263 : 				// 2001-07-18 ADDED BY S.G. DON'T GO TO THE TARGET BUT DO ANOTHER PASS FROM IP IF YOU HAVE NO WEAPONS LEFT!
; 1264 : #if 0
; 1265 : 				if (!IsSetATC(HasCanUseAGWeapon)) 
; 1266 : 				{
; 1267 : 					onStation = NotThereYet;
; 1268 : 					break;
; 1269 : 				}
; 1270 : #else		// FRB
; 1271 : 				// Check for remaining AG weapons
; 1272 : 				SelectGroundWeapon();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectGroundWeapon@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectGroundWeapon

; 1273 : 				if (!(IsSetATC(HasCanUseAGWeapon)) && !(IsSetATC(HasAGWeapon)))

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetATC@DigitalBrain@@QAEHH@Z		; DigitalBrain::IsSetATC
	test	eax, eax
	jne	$LN83@GroundAtta
	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetATC@DigitalBrain@@QAEHH@Z		; DigitalBrain::IsSetATC
	test	eax, eax
	jne	$LN83@GroundAtta

; 1274 : 				{
; 1275 : 					ClearATCFlag(HasCanUseAGWeapon);

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 1276 : 					ClearATCFlag(HasAGWeapon);

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 1277 : 					// Go to next WP
; 1278 : 					if (GetWaypointIndex() == GetTargetWPIndex())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWaypointIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetWaypointIndex
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTargetWPIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetTargetWPIndex
	cmp	esi, eax
	jne	SHORT $LN82@GroundAtta

; 1279 : 						SelectNextWaypoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectNextWaypoint@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectNextWaypoint
$LN82@GroundAtta:

; 1280 : 					// go back to initial AG state
; 1281 : 					agDoctrine = AGD_NONE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+244], 0

; 1282 : 					missionComplete = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+292], 1

; 1283 : 					agmergeTimer = SimLibElapsedTime + 1;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+556], edx

; 1284 : 					// if we're a wingie, rejoin the lead
; 1285 : 					if ( isWing )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN81@GroundAtta

; 1286 : 					{
; 1287 : 						mFormation = FalconWingmanMsg::WMWedge;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+808], 1

; 1288 : 						AiRejoin( NULL );

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiRejoin@DigitalBrain@@AAEXPAVFalconWingmanMsg@@W4AiHint@1@@Z ; DigitalBrain::AiRejoin

; 1289 : 						// make sure wing's designated target is NULL'd out
; 1290 : 						mDesignatedObject = FalconNullId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax+800], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+804], edx
$LN81@GroundAtta:

; 1291 : 					}
; 1292 : 					onStation = NotThereYet;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+132], 0

; 1293 : 					break;

	jmp	$LN243@GroundAtta
$LN83@GroundAtta:

; 1294 : 				}
; 1295 : #endif
; 1296 : 				// END OF ADDED SECTION
; 1297 : 				// Cobra - added JSOWs
; 1298 : 				if ((hasAGMissile || hasHARM || (hasJSOW)) && groundTargetPtr )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+184], 0
	jne	SHORT $LN79@GroundAtta
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+188], 0
	jne	SHORT $LN79@GroundAtta
	cmp	DWORD PTR _hasJSOW$[ebp], 0
	je	$LN80@GroundAtta
$LN79@GroundAtta:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+224], 0
	je	$LN80@GroundAtta

; 1299 : 				{
; 1300 : 					if (hasHARM)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+188], 0
	je	SHORT $LN78@GroundAtta

; 1301 : 						shootMissile = HARMSetup(rx, ry, ata, approxRange);

	push	ecx
	movss	xmm0, DWORD PTR _approxRange$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ata$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ry$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HARMSetup@DigitalBrain@@IAEHMMMM@Z	; DigitalBrain::HARMSetup
	mov	DWORD PTR _shootMissile$[ebp], eax
	jmp	SHORT $LN75@GroundAtta
$LN78@GroundAtta:

; 1302 : 					else if (hasJSOW) // JSOW

	cmp	DWORD PTR _hasJSOW$[ebp], 0
	je	SHORT $LN76@GroundAtta

; 1303 : 						shootMissile = JSOWSetup(rx, ry, ata, approxRange);

	push	ecx
	movss	xmm0, DWORD PTR _approxRange$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ata$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ry$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?JSOWSetup@DigitalBrain@@IAEHMMMM@Z	; DigitalBrain::JSOWSetup
	mov	DWORD PTR _shootMissile$[ebp], eax

; 1304 : 					else

	jmp	SHORT $LN75@GroundAtta
$LN76@GroundAtta:

; 1305 : 						shootMissile = MaverickSetup(rx, ry, ata, approxRange, theRadar);

	mov	edx, DWORD PTR _theRadar$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _approxRange$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ata$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ry$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MaverickSetup@DigitalBrain@@IAEHMMMMPAVRadarClass@@@Z ; DigitalBrain::MaverickSetup
	mov	DWORD PTR _shootMissile$[ebp], eax
$LN75@GroundAtta:

; 1306 : 
; 1307 : 					if ( shootMissile == TRUE)

	cmp	DWORD PTR _shootMissile$[ebp], 1
	jne	SHORT $LN74@GroundAtta

; 1308 : 					{
; 1309 : 						FireAGMissile(approxSlantRange, ata);

	push	ecx
	movss	xmm0, DWORD PTR _ata$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _approxSlantRange$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FireAGMissile@DigitalBrain@@IAEXMM@Z	; DigitalBrain::FireAGMissile
	jmp	$LN72@GroundAtta
$LN74@GroundAtta:

; 1310 : 					}
; 1311 : 					// 2001-06-24 ADDED BY S.G. IF shootMissile IS NOT FALSE (AND ALSO NOT TRUE), IF WE'RE CLOSE AND CAN'T LAUNCH HARM, SAY 'NO HARMS' or 'no JSOWs' AND TRY AGAIN RIGHT AWAY
; 1312 : 					else if ( shootMissile != FALSE) 

	cmp	DWORD PTR _shootMissile$[ebp], 0
	je	$LN72@GroundAtta

; 1313 : 					{
; 1314 : 						// FRB
; 1315 : 						if (shootMissile == FALSE-2) // Maverick - break away from target

	cmp	DWORD PTR _shootMissile$[ebp], -2	; fffffffeH
	jne	SHORT $LN71@GroundAtta

; 1316 : 						{
; 1317 : 							// mark that we've completed an AG pass
; 1318 : 							madeAGPass = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+260], 1

; 1319 : 							AGflyOut();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AGflyOut@DigitalBrain@@IAEXXZ		; DigitalBrain::AGflyOut

; 1320 : 							onStation = Downwind;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+132], 13			; 0000000dH

; 1321 : 							break;

	jmp	$LN243@GroundAtta
$LN71@GroundAtta:

; 1322 : 						}
; 1323 : 						// FRB - end
; 1324 : 						if (hasHARM)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+188], 0
	je	SHORT $LN70@GroundAtta

; 1325 : 							hasHARM = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+188], 0
	jmp	SHORT $LN68@GroundAtta
$LN70@GroundAtta:

; 1326 : 						else if (hasJSOW) // JSOW

	cmp	DWORD PTR _hasJSOW$[ebp], 0
	je	SHORT $LN68@GroundAtta

; 1327 : 							hasBomb = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+180], 0
$LN68@GroundAtta:

; 1328 : 						// Cobra - get out of a possible forever loop
; 1329 : 						if (agmergeTimer != 0 && SimLibElapsedTime > agmergeTimer)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+556], 0
	je	SHORT $LN67@GroundAtta
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	ecx, DWORD PTR [eax+556]
	jbe	SHORT $LN67@GroundAtta

; 1330 : 							break;

	jmp	$LN243@GroundAtta
$LN67@GroundAtta:

; 1331 : 						goto FinalSG;

	jmp	$FinalSG$328
$LN72@GroundAtta:

; 1332 : 					}
; 1333 : 					// END OF ADDED SECTION
; 1334 : 				}

	jmp	$LN58@GroundAtta
$LN80@GroundAtta:

; 1335 : 				else if (hasGBU)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+204], 0
	je	SHORT $LN65@GroundAtta

; 1336 : 				{
; 1337 : 					DropGBU(approxSlantRange, ata, theRadar);

	mov	eax, DWORD PTR _theRadar$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _ata$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _approxSlantRange$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DropGBU@DigitalBrain@@IAEXMMPAVRadarClass@@@Z ; DigitalBrain::DropGBU
	jmp	$LN58@GroundAtta
$LN65@GroundAtta:

; 1338 : 				}
; 1339 : 				else if (hasBomb)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+180], 0
	je	SHORT $LN63@GroundAtta

; 1340 : 				{
; 1341 : 					DropBomb(approxSlantRange, ata, theRadar);  // AI bombing setup.  Bomb(s) dropped in Sms->DropBomb(int) in Doweapon.cpp

	mov	edx, DWORD PTR _theRadar$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _ata$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _approxSlantRange$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DropBomb@DigitalBrain@@IAEXMMPAVRadarClass@@@Z ; DigitalBrain::DropBomb
	jmp	SHORT $LN58@GroundAtta
$LN63@GroundAtta:

; 1342 : 				}
; 1343 : 				// rocket strafe attack
; 1344 : 				else if (hasRocket)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+192], 0
	je	SHORT $LN61@GroundAtta

; 1345 : 				{
; 1346 : 					if(FireRocket(approxSlantRange, ata))

	push	ecx
	movss	xmm0, DWORD PTR _ata$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _approxSlantRange$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FireRocket@DigitalBrain@@IAEHMM@Z	; DigitalBrain::FireRocket
	test	eax, eax
	je	SHORT $LN60@GroundAtta

; 1347 : 					{  // fire rocket code is flying a/c
; 1348 : 						break;

	jmp	$LN243@GroundAtta
$LN60@GroundAtta:

; 1349 : 					}
; 1350 : 				}

	jmp	SHORT $LN58@GroundAtta
$LN61@GroundAtta:

; 1351 : 				// gun strafe attack
; 1352 : 				else if (hasGun && agApproach == AGA_DIVE )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+196], 0
	je	SHORT $LN58@GroundAtta
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+248], 3
	jne	SHORT $LN58@GroundAtta

; 1353 : 				{
; 1354 : 					GunStrafe(approxSlantRange, ata);

	push	ecx
	movss	xmm0, DWORD PTR _ata$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _approxSlantRange$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GunStrafe@DigitalBrain@@IAEHMM@Z	; DigitalBrain::GunStrafe
$LN58@GroundAtta:

; 1355 : 				}
; 1356 : 			}
; 1357 : 			// too close ?
; 1358 : 			// we're within a certain range and our ATA is not good
; 1359 : 			//dx = self->GetKias();
; 1360 : 			//if (slowMover)
; 1361 : 			//{
; 1362 : 			//	if (approxRange < 1.0f * NM_TO_FT) 
; 1363 : 			//	{
; 1364 : 			//		waitingForShot = SimLibElapsedTime + 5000;
; 1365 : 			//		onStation = Final1;
; 1366 : 			//	}
; 1367 : 			//}
; 1368 : 			// FRB
; 1369 : 			if (slowMover || agApproach == AGA_LOW ) // HD bombs

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+560], 0
	jne	SHORT $LN56@GroundAtta
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+248], 0
	jne	SHORT $LN57@GroundAtta
$LN56@GroundAtta:

; 1370 : 			{
; 1371 : 				if (agApproach == AGA_LOW )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+248], 0
	jne	SHORT $LN55@GroundAtta

; 1372 : 				{
; 1373 : 					if (approxRange < 0.0f * NM_TO_FT) // HD bombs

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	SHORT $LN54@GroundAtta

; 1374 : 					{
; 1375 : 						waitingForShot = SimLibElapsedTime + 5000;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 5000				; 00001388H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+496], eax

; 1376 : 						onStation = Final1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+132], 16			; 00000010H
$LN54@GroundAtta:

; 1377 : 					}
; 1378 : 				}

	jmp	SHORT $LN52@GroundAtta
$LN55@GroundAtta:

; 1379 : 				else if (approxRange < 1.0f * NM_TO_FT) 

	movss	xmm0, DWORD PTR __real@45bde1b0
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	SHORT $LN52@GroundAtta

; 1380 : 				{
; 1381 : 					waitingForShot = SimLibElapsedTime + 5000;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 5000				; 00001388H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+496], eax

; 1382 : 					onStation = Final1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+132], 16			; 00000010H
$LN52@GroundAtta:

; 1383 : 				}
; 1384 : 			}

	jmp	SHORT $LN50@GroundAtta
$LN57@GroundAtta:

; 1385 : 			// FRB - end
; 1386 : 			// COBRA - RED - FIXED WITH '0.1f' THE HD BOMBS UNDROPPED BUG... PROBLEM WAS GOING INTO FINAL1 TOO FAR FROM TARGET
; 1387 : 			// IT WAS 2.5f
; 1388 : 			else if (approxRange < 0.1f * NM_TO_FT) // was 1.5 & 75.0

	movss	xmm0, DWORD PTR __real@4417e7c0
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	SHORT $LN50@GroundAtta

; 1389 : 			{
; 1390 : 				//waitingForShot = SimLibElapsedTime + 5000;  // FRB
; 1391 : 				onStation = Final1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+132], 16			; 00000010H
$LN50@GroundAtta:

; 1392 : 			}
; 1393 : 
; 1394 : 			TrackPoint(0.0F, desSpeed/* KNOTS_TO_FTPSEC*/); // Cobra - aerial TrackPoint speed is in knots

	push	ecx
	movss	xmm0, DWORD PTR _desSpeed$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TrackPoint@DigitalBrain@@IAEMMM@Z	; DigitalBrain::TrackPoint
	fstp	ST(0)

; 1395 : 
; 1396 : 			dx = (float)fabs( self->XPos() - trackX );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv5890[ebp]
	movss	xmm0, DWORD PTR tv5890[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+148]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _dx$[ebp]

; 1397 : 			dy = (float)fabs( self->YPos() - trackY );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv5899[ebp]
	movss	xmm0, DWORD PTR tv5899[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+152]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _dy$[ebp]

; 1398 : 			approxRange = (float)sqrt( dx * dx + dy * dy );

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _approxRange$[ebp]

; 1399 : 
; 1400 : 			// Increase the gains on final approach
; 1401 : 			rStick *= 3.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+32]
	mulss	xmm0, DWORD PTR __real@40400000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+32], xmm0

; 1402 : 			if ( rStick > 1.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+32]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN49@GroundAtta

; 1403 : 				rStick = 1.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+32], xmm0
	jmp	SHORT $LN47@GroundAtta
$LN49@GroundAtta:

; 1404 : 			else if ( rStick < -1.0f )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	comiss	xmm0, DWORD PTR [eax+32]
	jbe	SHORT $LN47@GroundAtta

; 1405 : 				rStick = -1.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [ecx+32], xmm0
$LN47@GroundAtta:

; 1406 : 
; 1407 : 			// pitch stick setting is based on our desired angle normalized to
; 1408 : 			// 90 deg when in a dive
; 1409 : 			if ( agApproach == AGA_DIVE && diveOK )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+248], 3
	jne	$LN46@GroundAtta
	cmp	DWORD PTR _diveOK$[ebp], 0
	je	$LN46@GroundAtta

; 1410 : 			{
; 1411 : 				// check hitting the ground and pull out of dive
; 1412 : 				pitchDesired = (float)atan2( self->ZPos() - trackZ, approxRange );

	cvtss2sd xmm0, DWORD PTR _approxRange$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv5925[ebp]
	movss	xmm0, DWORD PTR tv5925[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+156]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _pitchDesired$[ebp]

; 1413 : 				pitchDesired /= (90.0f * DTR);

	movss	xmm0, DWORD PTR _pitchDesired$[ebp]
	divss	xmm0, DWORD PTR __real@3fc90fd9
	movss	DWORD PTR _pitchDesired$[ebp], xmm0

; 1414 : 
; 1415 : 				// keep stick at reasonable values.
; 1416 : 				pStick = max( -0.7f, pitchDesired );

	movss	xmm0, DWORD PTR __real@bf333333
	comiss	xmm0, DWORD PTR _pitchDesired$[ebp]
	jbe	SHORT $LN317@GroundAtta
	movss	xmm0, DWORD PTR __real@bf333333
	movss	DWORD PTR tv3227[ebp], xmm0
	jmp	SHORT $LN318@GroundAtta
$LN317@GroundAtta:
	movss	xmm0, DWORD PTR _pitchDesired$[ebp]
	movss	DWORD PTR tv3227[ebp], xmm0
$LN318@GroundAtta:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv3227[ebp]
	movss	DWORD PTR [edx+28], xmm0

; 1417 : 				pStick = min( 0.7f, pStick );

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	comiss	xmm0, DWORD PTR __real@3f333333
	jbe	SHORT $LN319@GroundAtta
	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR tv3246[ebp], xmm0
	jmp	SHORT $LN320@GroundAtta
$LN319@GroundAtta:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR tv3246[ebp], xmm0
$LN320@GroundAtta:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv3246[ebp]
	movss	DWORD PTR [edx+28], xmm0
$LN46@GroundAtta:

; 1418 : 			}
; 1419 : 			break;

	jmp	$LN243@GroundAtta
$LN45@GroundAtta:

; 1420 : 			//======= End Final ===========================================
; 1421 : 
; 1422 : 			// #4 -- final attack approach hold for a sec and then head to next
; 1423 : 			//==================================================
; 1424 : #if 1
; 1425 : 		//==================================================
; 1426 : 		// Cobra version
; 1427 :     case Final1:
; 1428 : 		 {
; 1429 : 				if (Sms->CurRippleCount() > 0) // JB 011013

	mov	ecx, DWORD PTR _Sms$[ebp]
	call	?CurRippleCount@SMSClass@@QAEHXZ	; SMSClass::CurRippleCount
	test	eax, eax
	jle	SHORT $LN44@GroundAtta

; 1430 : 					break;

	jmp	$LN243@GroundAtta
$LN44@GroundAtta:

; 1431 : 
; 1432 : 				ClearFlag( GunFireFlag );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlag@BaseBrain@@QAEXH@Z		; BaseBrain::ClearFlag

; 1433 : 				diveOK = FALSE;

	mov	DWORD PTR _diveOK$[ebp], 0

; 1434 : 
; 1435 : 				FCC->releaseConsent = PilotInputs::Off;

	mov	eax, DWORD PTR _FCC$[ebp]
	mov	BYTE PTR [eax+181], 0

; 1436 : 
; 1437 : 				// 2001-05-13 ADDED BY S.G. SO AI DROPS SOME COUNTER MEASURE AFTER A PASS
; 1438 : 				self->DropProgramed();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?DropProgramed@AircraftClass@@QAEXXZ	; AircraftClass::DropProgramed

; 1439 : 
; 1440 : 				// mark that we've completed an AG pass
; 1441 : 				madeAGPass = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+260], 1

; 1442 : 
; 1443 : 				// Terrain follow around 1000 ft
; 1444 : 				if ( agApproach == AGA_LOW )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+248], 0
	jne	$LN43@GroundAtta

; 1445 : 				{
; 1446 : 					trackZ = OTWDriver.GetGroundLevel( self->XPos() + self->XDelta(),
; 1447 : 														self->YPos() + self->YDelta() );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv5952[ebp]
	movss	xmm0, DWORD PTR tv5952[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	movss	DWORD PTR tv6416[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv5957[ebp]
	movss	xmm0, DWORD PTR tv6416[ebp]
	addss	xmm0, DWORD PTR tv5957[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv5962[ebp]
	movss	xmm0, DWORD PTR tv5962[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movss	DWORD PTR tv6418[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv5967[ebp]
	movss	xmm0, DWORD PTR tv6418[ebp]
	addss	xmm0, DWORD PTR tv5967[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+156]

; 1448 : 					// if we're below track alt, kick us up a bit harder so we don't plow
; 1449 : 					// into steeper slopes
; 1450 : 					//TJL 10/28/03 Harm Alt
; 1451 : 					if ( self->ZPos() - trackZ > -1000.0f )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv5977[ebp]
	movss	xmm0, DWORD PTR tv5977[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+156]
	comiss	xmm0, DWORD PTR __real@c47a0000
	jbe	SHORT $LN42@GroundAtta

; 1452 : 						trackZ = -self->GetA2GGunRocketAlt();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetA2GGunRocketAlt@AircraftClass@@QAEMXZ ; AircraftClass::GetA2GGunRocketAlt
	fstp	DWORD PTR tv5983[ebp]
	movss	xmm0, DWORD PTR tv5983[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+156], xmm0

; 1453 : 					else

	jmp	SHORT $LN41@GroundAtta
$LN42@GroundAtta:

; 1454 : 						trackZ = -self->GetA2GGunRocketAlt();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetA2GGunRocketAlt@AircraftClass@@QAEMXZ ; AircraftClass::GetA2GGunRocketAlt
	fstp	DWORD PTR tv5989[ebp]
	movss	xmm0, DWORD PTR tv5989[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+156], xmm0
$LN41@GroundAtta:

; 1455 : 					//TJL 11/09/03 Changed to Corner speed to allow for variety of AI
; 1456 : 					desSpeed = cornerSpeed * 1.3f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+100]
	mulss	xmm0, DWORD PTR __real@3fa66666
	movss	DWORD PTR _desSpeed$[ebp], xmm0
	jmp	$LN28@GroundAtta
$LN43@GroundAtta:

; 1457 : 				}
; 1458 : 				else if ( agApproach == AGA_DIVE )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+248], 3
	jne	$LN39@GroundAtta

; 1459 : 				{
; 1460 : 					//TJL 11/09/03 Changed to Corner speed to allow for variety of AI
; 1461 : 					desSpeed = cornerSpeed * 1.3f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+100]
	mulss	xmm0, DWORD PTR __real@3fa66666
	movss	DWORD PTR _desSpeed$[ebp], xmm0

; 1462 : 					if ( self->ZPos() - curGroundAlt > -1000.0f )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv6000[ebp]
	movss	xmm0, DWORD PTR tv6000[ebp]
	subss	xmm0, DWORD PTR _curGroundAlt$[ebp]
	comiss	xmm0, DWORD PTR __real@c47a0000
	jbe	$LN38@GroundAtta

; 1463 : 					{
; 1464 : 			   			trackZ = OTWDriver.GetGroundLevel( self->XPos() + self->XDelta(),
; 1465 : 														self->YPos() + self->YDelta() );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv6005[ebp]
	movss	xmm0, DWORD PTR tv6005[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	movss	DWORD PTR tv6420[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv6010[ebp]
	movss	xmm0, DWORD PTR tv6420[ebp]
	addss	xmm0, DWORD PTR tv6010[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv6015[ebp]
	movss	xmm0, DWORD PTR tv6015[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movss	DWORD PTR tv6422[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv6020[ebp]
	movss	xmm0, DWORD PTR tv6422[ebp]
	addss	xmm0, DWORD PTR tv6020[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+156]

; 1466 : 						if ( self->ZPos() - trackZ > -500.0f )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv6030[ebp]
	movss	xmm0, DWORD PTR tv6030[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+156]
	comiss	xmm0, DWORD PTR __real@c3fa0000
	jbe	SHORT $LN37@GroundAtta

; 1467 : 							trackZ = trackZ - 500.0f - ( self->ZPos() - trackZ + 500.0f ) * 2.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+156]
	subss	xmm0, DWORD PTR __real@43fa0000
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv6424[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv6038[ebp]
	movss	xmm0, DWORD PTR tv6038[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+156]
	addss	xmm0, DWORD PTR __real@43fa0000
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv6424[ebp]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+156], xmm1

; 1468 : 						else

	jmp	SHORT $LN36@GroundAtta
$LN37@GroundAtta:

; 1469 : 							trackZ -= 500.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+156]
	subss	xmm0, DWORD PTR __real@43fa0000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+156], xmm0
$LN36@GroundAtta:

; 1470 : 					}
; 1471 : 					else

	jmp	$LN32@GroundAtta
$LN38@GroundAtta:

; 1472 : 					{
; 1473 : 			   			trackZ = OTWDriver.GetGroundLevel( trackX, trackY );

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+152]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+148]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+156]

; 1474 : 						diveOK = TRUE;

	mov	DWORD PTR _diveOK$[ebp], 1

; 1475 : 						if (Sms->curWeapon && !Sms->curWeapon->IsMissile() && Sms->curWeapon->IsBomb())

	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN34@GroundAtta
	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	DWORD PTR tv3419[ebp], eax
	mov	eax, DWORD PTR tv3419[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv3419[ebp]
	mov	eax, DWORD PTR [edx+156]
	call	eax
	test	eax, eax
	jne	SHORT $LN34@GroundAtta
	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	DWORD PTR tv3432[ebp], eax
	mov	ecx, DWORD PTR tv3432[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv3432[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax
	test	eax, eax
	je	SHORT $LN34@GroundAtta

; 1476 : 							trackZ -= 2000.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+156]
	subss	xmm0, DWORD PTR __real@44fa0000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+156], xmm0
	jmp	SHORT $LN32@GroundAtta
$LN34@GroundAtta:

; 1477 : 						else if (Sms->curWeapon)

	mov	ecx, DWORD PTR _Sms$[ebp]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN32@GroundAtta

; 1478 : 							trackZ -= 50.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+156]
	subss	xmm0, DWORD PTR __real@42480000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+156], xmm0
$LN32@GroundAtta:

; 1479 : 					}
; 1480 : 				}
; 1481 : 				else

	jmp	$LN28@GroundAtta
$LN39@GroundAtta:

; 1482 : 				{
; 1483 : 					//TJL 11/09/03 Changed to Corner speed to allow for variety of AI
; 1484 : 					desSpeed = cornerSpeed * 1.3f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+100]
	mulss	xmm0, DWORD PTR __real@3fa66666
	movss	DWORD PTR _desSpeed$[ebp], xmm0

; 1485 : 					if ( self->ZPos() - curGroundAlt > -500.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv6079[ebp]
	movss	xmm0, DWORD PTR tv6079[ebp]
	subss	xmm0, DWORD PTR _curGroundAlt$[ebp]
	comiss	xmm0, DWORD PTR __real@c3fa0000
	jbe	$LN28@GroundAtta

; 1486 : 					{
; 1487 : 			   			trackZ = OTWDriver.GetGroundLevel( self->XPos() + self->XDelta(),
; 1488 : 														self->YPos() + self->YDelta() );

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv6084[ebp]
	movss	xmm0, DWORD PTR tv6084[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	movss	DWORD PTR tv6426[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv6089[ebp]
	movss	xmm0, DWORD PTR tv6426[ebp]
	addss	xmm0, DWORD PTR tv6089[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv6094[ebp]
	movss	xmm0, DWORD PTR tv6094[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	movss	DWORD PTR tv6428[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv6099[ebp]
	movss	xmm0, DWORD PTR tv6428[ebp]
	addss	xmm0, DWORD PTR tv6099[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+156]

; 1489 : 						if ( self->ZPos() - trackZ > -500.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv6109[ebp]
	movss	xmm0, DWORD PTR tv6109[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+156]
	comiss	xmm0, DWORD PTR __real@c3fa0000
	jbe	SHORT $LN29@GroundAtta

; 1490 : 							trackZ = trackZ - 500.0f - ( self->ZPos() - trackZ + 500.0f ) * 2.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+156]
	subss	xmm0, DWORD PTR __real@43fa0000
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	movss	DWORD PTR tv6430[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv6117[ebp]
	movss	xmm0, DWORD PTR tv6117[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+156]
	addss	xmm0, DWORD PTR __real@43fa0000
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv6430[ebp]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+156], xmm1

; 1491 : 						else

	jmp	SHORT $LN28@GroundAtta
$LN29@GroundAtta:

; 1492 : 							trackZ -= 500.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+156]
	subss	xmm0, DWORD PTR __real@43fa0000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+156], xmm0
$LN28@GroundAtta:

; 1493 : 					}
; 1494 : 				}
; 1495 : 
; 1496 : 				SimpleTrackSpeed( desSpeed * KNOTS_TO_FTPSEC );

	movss	xmm0, DWORD PTR _desSpeed$[ebp]
	mulss	xmm0, DWORD PTR __real@3fd80b03
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SimpleTrackSpeed@DigitalBrain@@IAEMM@Z	; DigitalBrain::SimpleTrackSpeed
	fstp	ST(0)

; 1497 : 
; 1498 : 				dx = (float)fabs( self->XPos() - trackX );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv6129[ebp]
	movss	xmm0, DWORD PTR tv6129[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+148]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _dx$[ebp]

; 1499 : 				dy = (float)fabs( self->YPos() - trackY );

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv6138[ebp]
	movss	xmm0, DWORD PTR tv6138[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+152]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _dy$[ebp]

; 1500 : 				approxRange = (float)sqrt( dx * dx + dy * dy );

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _approxRange$[ebp]

; 1501 : 
; 1502 : 
; 1503 : 
; 1504 : 				// pitch stick setting is based on our desired angle normalized to
; 1505 : 				// 90 deg
; 1506 : 				if ( agApproach == AGA_DIVE && diveOK )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+248], 3
	jne	$LN27@GroundAtta
	cmp	DWORD PTR _diveOK$[ebp], 0
	je	$LN27@GroundAtta

; 1507 : 				{
; 1508 : 					pitchDesired = (float)atan2( self->ZPos() - trackZ, approxRange );

	cvtss2sd xmm0, DWORD PTR _approxRange$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv6153[ebp]
	movss	xmm0, DWORD PTR tv6153[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+156]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _pitchDesired$[ebp]

; 1509 : 					pitchDesired /= (90.0f * DTR);

	movss	xmm0, DWORD PTR _pitchDesired$[ebp]
	divss	xmm0, DWORD PTR __real@3fc90fd9
	movss	DWORD PTR _pitchDesired$[ebp], xmm0

; 1510 : 		
; 1511 : 					// keep stick at reasonable values.
; 1512 : 					pStick = max( -0.7f, pitchDesired );

	movss	xmm0, DWORD PTR __real@bf333333
	comiss	xmm0, DWORD PTR _pitchDesired$[ebp]
	jbe	SHORT $LN321@GroundAtta
	movss	xmm0, DWORD PTR __real@bf333333
	movss	DWORD PTR tv3579[ebp], xmm0
	jmp	SHORT $LN322@GroundAtta
$LN321@GroundAtta:
	movss	xmm0, DWORD PTR _pitchDesired$[ebp]
	movss	DWORD PTR tv3579[ebp], xmm0
$LN322@GroundAtta:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv3579[ebp]
	movss	DWORD PTR [ecx+28], xmm0

; 1513 : 					pStick = min( 0.7f, pStick );

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+28]
	comiss	xmm0, DWORD PTR __real@3f333333
	jbe	SHORT $LN323@GroundAtta
	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR tv3598[ebp], xmm0
	jmp	SHORT $LN324@GroundAtta
$LN323@GroundAtta:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR tv3598[ebp], xmm0
$LN324@GroundAtta:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv3598[ebp]
	movss	DWORD PTR [ecx+28], xmm0
$LN27@GroundAtta:

; 1514 : 				}
; 1515 : 
; 1516 : 				if ( missionType == AMIS_BDA || missionType == AMIS_RECON)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+284], 30			; 0000001eH
	je	SHORT $LN25@GroundAtta
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+284], 29			; 0000001dH
	jne	SHORT $LN26@GroundAtta
$LN25@GroundAtta:

; 1517 : 				{
; 1518 : 					// clear and get new target next pass
; 1519 : 					madeAGPass = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 1

; 1520 : 					onStation = NotThereYet;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+132], 0
	jmp	$LN10@GroundAtta
$LN26@GroundAtta:

; 1521 : 				}
; 1522 : 				// Cobra - added JSOW
; 1523 : 				else if ( (hasAGMissile || hasHARM || (hasJSOW)) && !droppingBombs )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+184], 0
	jne	SHORT $LN22@GroundAtta
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+188], 0
	jne	SHORT $LN22@GroundAtta
	cmp	DWORD PTR _hasJSOW$[ebp], 0
	je	$LN23@GroundAtta
$LN22@GroundAtta:
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+236], 0
	jne	$LN23@GroundAtta

; 1524 : 				{
; 1525 : 					if ( SimLibElapsedTime > waitingForShot )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	ecx, DWORD PTR [eax+496]
	jbe	$LN21@GroundAtta

; 1526 : 					{
; 1527 : 						if ( agDoctrine == AGD_SHOOT_RUN && groundTargetPtr )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+244], 1
	jne	SHORT $LN20@GroundAtta
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+224], 0
	je	SHORT $LN20@GroundAtta

; 1528 : 						{
; 1529 : 							// clear and get new target next pass
; 1530 : 							SetGroundTarget(NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget

; 1531 : 
; 1532 : 							// this takes us back to missile fire
; 1533 : 							onStation = NotThereYet;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+132], 0

; 1534 : 							break;

	jmp	$LN243@GroundAtta
	jmp	SHORT $LN18@GroundAtta
$LN20@GroundAtta:

; 1535 : 						}
; 1536 : 						//else if (hasAGMissile) // Mavericks
; 1537 : 						else if (hasAGMissile || hasHARM) // Mavericks & Harms

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+184], 0
	jne	SHORT $LN17@GroundAtta
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+188], 0
	je	SHORT $LN18@GroundAtta
$LN17@GroundAtta:

; 1538 : 						{
; 1539 : 							// Cobra - pull away from target
; 1540 : 							AGflyOut();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AGflyOut@DigitalBrain@@IAEXXZ		; DigitalBrain::AGflyOut

; 1541 : 							// Release current target and target history
; 1542 : 							SetGroundTarget( NULL );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget

; 1543 : 							gndTargetHistory[0] = NULL;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+452], 0

; 1544 : 							onStation = Downwind;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+132], 13			; 0000000dH

; 1545 : 							break;

	jmp	$LN243@GroundAtta
$LN18@GroundAtta:

; 1546 : 						}
; 1547 : 
; 1548 : 						// Check for remaining AG weapons
; 1549 : 						SelectGroundWeapon();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectGroundWeapon@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectGroundWeapon

; 1550 : 						if (!(IsSetATC(HasCanUseAGWeapon)) && !(IsSetATC(HasAGWeapon)))

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetATC@DigitalBrain@@QAEHH@Z		; DigitalBrain::IsSetATC
	test	eax, eax
	jne	$LN16@GroundAtta
	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetATC@DigitalBrain@@QAEHH@Z		; DigitalBrain::IsSetATC
	test	eax, eax
	jne	$LN16@GroundAtta

; 1551 : 						{
; 1552 : 							ClearATCFlag(HasCanUseAGWeapon);

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 1553 : 							ClearATCFlag(HasAGWeapon);

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 1554 : 							// Go to next WP
; 1555 : 							if (GetWaypointIndex() == GetTargetWPIndex())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWaypointIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetWaypointIndex
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTargetWPIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetTargetWPIndex
	cmp	esi, eax
	jne	SHORT $LN15@GroundAtta

; 1556 : 								SelectNextWaypoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectNextWaypoint@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectNextWaypoint
$LN15@GroundAtta:

; 1557 : 							// go back to initial AG state
; 1558 : 							agDoctrine = AGD_NONE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+244], 0

; 1559 : 							missionComplete = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+292], 1

; 1560 : 							agmergeTimer = SimLibElapsedTime + 1;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+556], eax

; 1561 : 							// if we're a wingie, rejoin the lead
; 1562 : 							if ( isWing )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN14@GroundAtta

; 1563 : 							{
; 1564 : 								mFormation = FalconWingmanMsg::WMWedge;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+808], 1

; 1565 : 								AiRejoin( NULL );

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiRejoin@DigitalBrain@@AAEXPAVFalconWingmanMsg@@W4AiHint@1@@Z ; DigitalBrain::AiRejoin

; 1566 : 								// make sure wing's designated target is NULL'd out
; 1567 : 								mDesignatedObject = FalconNullId;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [ecx+800], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [ecx+804], eax
$LN14@GroundAtta:

; 1568 : 							}
; 1569 : 							onStation = NotThereYet;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+132], 0

; 1570 : 							return;

	jmp	$LN311@GroundAtta
$LN16@GroundAtta:

; 1571 : 						}
; 1572 : 
; 1573 : 						// this takes us back to 1st state
; 1574 : 						SetGroundTarget( NULL );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget

; 1575 : 						onStation = NotThereYet;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+132], 0

; 1576 : 						break;

	jmp	$LN243@GroundAtta
$LN21@GroundAtta:

; 1577 : 					}
; 1578 : 				}

	jmp	SHORT $LN10@GroundAtta
$LN23@GroundAtta:

; 1579 : 				else if (droppingBombs == wcBombWpn)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+236], 2
	jne	SHORT $LN12@GroundAtta

; 1580 : 				{
; 1581 : 					DropBomb(approxSlantRange, 0.0F, theRadar);

	mov	ecx, DWORD PTR _theRadar$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _approxSlantRange$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DropBomb@DigitalBrain@@IAEXMMPAVRadarClass@@@Z ; DigitalBrain::DropBomb
	jmp	SHORT $LN10@GroundAtta
$LN12@GroundAtta:

; 1582 : 				}
; 1583 : 				else if (droppingBombs == wcGbuWpn)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+236], 9
	jne	SHORT $LN10@GroundAtta

; 1584 : 				{
; 1585 : 					DropGBU(approxSlantRange, 0.0F, theRadar);

	mov	eax, DWORD PTR _theRadar$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _approxSlantRange$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DropGBU@DigitalBrain@@IAEXMMPAVRadarClass@@@Z ; DigitalBrain::DropGBU
$LN10@GroundAtta:

; 1586 : 				}
; 1587 : /*				else if (SimLibElapsedTime > waitingForShot || !hasWeapons)
; 1588 :    			{
; 1589 : 					// this takes us back to 1st state
; 1590 : 					SetGroundTarget( NULL );
; 1591 : 					onStation = NotThereYet;
; 1592 : 					break;
; 1593 :    			} */
; 1594 : 
; 1595 : 				TrackPoint(0.0F, desSpeed/* KNOTS_TO_FTPSEC*/); // Cobra - aerial TrackPoint speed is in knots

	push	ecx
	movss	xmm0, DWORD PTR _desSpeed$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TrackPoint@DigitalBrain@@IAEMMM@Z	; DigitalBrain::TrackPoint
	fstp	ST(0)

; 1596 : 
; 1597 : 				AGflyOut();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AGflyOut@DigitalBrain@@IAEXXZ		; DigitalBrain::AGflyOut

; 1598 : 				// Release current target and target history
; 1599 : 				SetGroundTarget( NULL );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget

; 1600 : 				gndTargetHistory[0] = NULL;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+452], 0

; 1601 : 				onStation = Downwind;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+132], 13			; 0000000dH

; 1602 : 
; 1603 : 				// Check for remaining AB weapons
; 1604 : 				SelectGroundWeapon();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectGroundWeapon@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectGroundWeapon

; 1605 : 				if (!(IsSetATC(HasCanUseAGWeapon)) && !(IsSetATC(HasAGWeapon)))

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetATC@DigitalBrain@@QAEHH@Z		; DigitalBrain::IsSetATC
	test	eax, eax
	jne	$LN9@GroundAtta
	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetATC@DigitalBrain@@QAEHH@Z		; DigitalBrain::IsSetATC
	test	eax, eax
	jne	$LN9@GroundAtta

; 1606 : 				{
; 1607 : 					ClearATCFlag(HasCanUseAGWeapon);

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 1608 : 					ClearATCFlag(HasAGWeapon);

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 1609 : 					// Go to next WP
; 1610 : 					if (GetWaypointIndex() == GetTargetWPIndex())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWaypointIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetWaypointIndex
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTargetWPIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetTargetWPIndex
	cmp	esi, eax
	jne	SHORT $LN8@GroundAtta

; 1611 : 						SelectNextWaypoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectNextWaypoint@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectNextWaypoint
$LN8@GroundAtta:

; 1612 : 					// go back to initial AG state
; 1613 : 					agDoctrine = AGD_NONE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+244], 0

; 1614 : 					missionComplete = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+292], 1

; 1615 : 					agmergeTimer = SimLibElapsedTime + 1;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+556], eax

; 1616 : 					// if we're a wingie, rejoin the lead
; 1617 : 					if ( isWing )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN7@GroundAtta

; 1618 : 					{
; 1619 : 						mFormation = FalconWingmanMsg::WMWedge;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+808], 1

; 1620 : 						AiRejoin( NULL );

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiRejoin@DigitalBrain@@AAEXPAVFalconWingmanMsg@@W4AiHint@1@@Z ; DigitalBrain::AiRejoin

; 1621 : 						// make sure wing's designated target is NULL'd out
; 1622 : 						mDesignatedObject = FalconNullId;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [ecx+800], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [ecx+804], eax
$LN7@GroundAtta:

; 1623 : 					}
; 1624 : 					onStation = NotThereYet;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+132], 0

; 1625 : 					return;

	jmp	$LN311@GroundAtta
$LN9@GroundAtta:

; 1626 : 				}
; 1627 :      		break;

	jmp	$LN243@GroundAtta
$LN6@GroundAtta:

; 1628 : 		 }
; 1629 : 		//======= End Final1 ===========================================
; 1630 : #else
; 1631 : 		//==================================================
; 1632 : 		// RV version
; 1633 : 		case Final1:
; 1634 : 			AI_MESSAGE(0, "AI - FINAL END");
; 1635 : 			if (Sms->CurRippleCount() > 0) // JB 011013
; 1636 : 				break;
; 1637 : 
; 1638 : 			ClearFlag( GunFireFlag );
; 1639 : 			diveOK = FALSE;
; 1640 : 
; 1641 : 			FCC->releaseConsent = PilotInputs::Off;
; 1642 : 
; 1643 : 			// 2001-05-13 ADDED BY S.G. SO AI DROPS SOME COUNTER MEASURE AFTER A PASS
; 1644 : 			self->DropProgramed();
; 1645 : 
; 1646 : 			// Cobra - pull away from target
; 1647 : 			if (groundTargetPtr)
; 1648 : 			{
; 1649 : 				SetTrackPoint(groundTargetPtr->BaseData()->XPos(), groundTargetPtr->BaseData()->YPos());
; 1650 : 			}
; 1651 : 			dx = trackX - self->XPos();
; 1652 : 			dy = trackY - self->YPos();
; 1653 : 			approxRange = (float)sqrt( dx * dx + dy * dy );
; 1654 : 			dir = 1.0f;
; 1655 : 			if (rand()%2)
; 1656 : 				dir *= -1.0f;
; 1657 : 			// Cobra - Slow-movers don't need to flyout too far
; 1658 : 			if (slowMover)
; 1659 : 			{
; 1660 : 				if (dy < 0.0f)
; 1661 : 					ipX = trackX - dir*g_fAGSlowFlyoutRange * NM_TO_FT;// Cobra - added g_fAGFlyoutRange static range
; 1662 : 				else
; 1663 : 					ipX = trackX - dir*g_fAGSlowFlyoutRange * NM_TO_FT;// Cobra - added g_fAGFlyoutRange static range
; 1664 : 				if (dx < 0.0f)
; 1665 : 					ipY = trackY - dir*g_fAGSlowFlyoutRange * NM_TO_FT;// Cobra - added g_fAGFlyoutRange static range
; 1666 : 				else
; 1667 : 					ipY = trackY + dir*g_fAGSlowFlyoutRange * NM_TO_FT;
; 1668 : 			}
; 1669 : 			else
; 1670 : 			{
; 1671 : 				if (dy < 0.0f)
; 1672 : 					ipX = trackX - dir*g_fAGFlyoutRange * NM_TO_FT;// Cobra - added g_fAGFlyoutRange static range
; 1673 : 				else
; 1674 : 					ipX = trackX + dir*g_fAGFlyoutRange * NM_TO_FT;
; 1675 : 				if (dx < 0.0f)
; 1676 : 					ipY = trackY - dir*g_fAGFlyoutRange * NM_TO_FT;// Cobra - added g_fAGFlyoutRange static range
; 1677 : 				else
; 1678 : 					ipY = trackY + dir*g_fAGFlyoutRange * NM_TO_FT;
; 1679 : 			}
; 1680 : 			ipZ = trackZ = AGattackAlt;
; 1681 : 
; 1682 : 			SetTrackPoint(ipX, ipY, AGattackAlt);
; 1683 : 
; 1684 : 			// mark that we've completed an AG pass
; 1685 : 			madeAGPass = TRUE;
; 1686 : 
; 1687 : 			// Terrain follow around 1000 ft
; 1688 : 			if ( agApproach == AGA_LOW )
; 1689 : 			{
; 1690 : 				trackZ = OTWDriver.GetGroundLevel( self->XPos() + self->XDelta(),
; 1691 : 						self->YPos() + self->YDelta() );
; 1692 : 				// if we're below track alt, kick us up a bit harder so we don't plow
; 1693 : 				// into steeper slopes
; 1694 : 				//TJL 10/28/03 Harm Alt
; 1695 : 				if ( self->ZPos() - trackZ > -1000.0f )
; 1696 : 					trackZ = -self->GetA2GHarmAlt();
; 1697 : 				else
; 1698 : 					trackZ = -self->GetA2GHarmAlt();
; 1699 : 				//TJL 11/09/03 Changed to Corner speed to allow for variety of AI
; 1700 : 				desSpeed = cornerSpeed * 1.3f;
; 1701 : 			}
; 1702 : 			else if ( agApproach == AGA_DIVE )
; 1703 : 			{
; 1704 : 				//TJL 11/09/03 Changed to Corner speed to allow for variety of AI
; 1705 : 				desSpeed = cornerSpeed * 1.3f;
; 1706 : 				if ( self->ZPos() - curGroundAlt > -1000.0f )
; 1707 : 				{
; 1708 : 					trackZ = OTWDriver.GetGroundLevel( self->XPos() + self->XDelta(),
; 1709 : 							self->YPos() + self->YDelta() );
; 1710 : 					if ( self->ZPos() - trackZ > -500.0f )
; 1711 : 						trackZ = trackZ - 500.0f - ( self->ZPos() - trackZ + 500.0f ) * 2.0f;
; 1712 : 					else
; 1713 : 						trackZ -= 500.0f;
; 1714 : 				}
; 1715 : 				else
; 1716 : 				{
; 1717 : 					trackZ = OTWDriver.GetGroundLevel( trackX, trackY );
; 1718 : 					diveOK = TRUE;
; 1719 : 					if (Sms->curWeapon && !Sms->curWeapon->IsMissile() && Sms->curWeapon->IsBomb())
; 1720 : 						trackZ -= 2000.0f;
; 1721 : 					else if (Sms->curWeapon)
; 1722 : 						trackZ -= 50.0f;
; 1723 : 				}
; 1724 : 			}
; 1725 : 			else
; 1726 : 			{
; 1727 : 				//TJL 11/09/03 Changed to Corner speed to allow for variety of AI
; 1728 : 				desSpeed = cornerSpeed * 1.3f;
; 1729 : 				if ( self->ZPos() - curGroundAlt > -500.0f )
; 1730 : 				{
; 1731 : 					trackZ = OTWDriver.GetGroundLevel( self->XPos() + self->XDelta(),
; 1732 : 							self->YPos() + self->YDelta() );
; 1733 : 					if ( self->ZPos() - trackZ > -500.0f )
; 1734 : 						trackZ = trackZ - 500.0f - ( self->ZPos() - trackZ + 500.0f ) * 2.0f;
; 1735 : 					else
; 1736 : 						trackZ -= 500.0f;
; 1737 : 				}
; 1738 : 			}
; 1739 : 
; 1740 : 			SimpleTrackSpeed( desSpeed * KNOTS_TO_FTPSEC );
; 1741 : 
; 1742 : 			dx = (float)fabs( self->XPos() - trackX );
; 1743 : 			dy = (float)fabs( self->YPos() - trackY );
; 1744 : 			approxRange = (float)sqrt( dx * dx + dy * dy );
; 1745 : 
; 1746 : 
; 1747 : 
; 1748 : 			// pitch stick setting is based on our desired angle normalized to
; 1749 : 			// 90 deg
; 1750 : 			if ( agApproach == AGA_DIVE && diveOK )
; 1751 : 			{
; 1752 : 				pitchDesired = (float)atan2( self->ZPos() - trackZ, approxRange );
; 1753 : 				pitchDesired /= (90.0f * DTR);
; 1754 : 
; 1755 : 				// keep stick at reasonable values.
; 1756 : 				pStick = max( -0.7f, pitchDesired );
; 1757 : 				pStick = min( 0.7f, pStick );
; 1758 : 			}
; 1759 : 
; 1760 : 				if ( missionType == AMIS_BDA || missionType == AMIS_RECON)
; 1761 : 				{
; 1762 : 					// clear and get new target next pass
; 1763 : 					madeAGPass = TRUE;
; 1764 : 					onStation = NotThereYet;
; 1765 : 				}
; 1766 : 				// Cobra - added JSOW
; 1767 : 				else if ( (hasAGMissile || hasHARM || (hasJSOW)) && !droppingBombs )
; 1768 : 				{
; 1769 : 					if ( SimLibElapsedTime > waitingForShot )
; 1770 : 					{
; 1771 : 						if ( agDoctrine == AGD_SHOOT_RUN && groundTargetPtr )
; 1772 : 						{
; 1773 : 							// clear and get new target next pass
; 1774 : 							SetGroundTarget(NULL);
; 1775 : 
; 1776 : 							// this takes us back to missile fire
; 1777 : 							onStation = NotThereYet;
; 1778 : 							break;
; 1779 : 						}
; 1780 : 						//else if (hasAGMissile) // Mavericks
; 1781 : 						else if (hasAGMissile || hasHARM) // Mavericks & Harms
; 1782 : 						{
; 1783 : 							// Cobra - pull away from target
; 1784 : 							AGflyOut();
; 1785 : 							// Release current target and target history
; 1786 : 							SetGroundTarget( NULL );
; 1787 : 							gndTargetHistory[0] = NULL;
; 1788 : 							onStation = Downwind;
; 1789 : 							break;
; 1790 : 						}
; 1791 : 
; 1792 : 						// Check for remaining AG weapons
; 1793 : 						SelectGroundWeapon();
; 1794 : 						if (!(IsSetATC(HasCanUseAGWeapon)) && !(IsSetATC(HasAGWeapon)))
; 1795 : 						{
; 1796 : 							ClearATCFlag(HasCanUseAGWeapon);
; 1797 : 							ClearATCFlag(HasAGWeapon);
; 1798 : 							// Go to next WP
; 1799 : 							if (GetWaypointIndex() == GetTargetWPIndex())
; 1800 : 								SelectNextWaypoint();
; 1801 : 							// go back to initial AG state
; 1802 : 							agDoctrine = AGD_NONE;
; 1803 : 							missionComplete = TRUE;
; 1804 : 							agmergeTimer = SimLibElapsedTime + 1;
; 1805 : 							// if we're a wingie, rejoin the lead
; 1806 : 							if ( isWing )
; 1807 : 							{
; 1808 : 								mFormation = FalconWingmanMsg::WMWedge;
; 1809 : 								AiRejoin( NULL );
; 1810 : 								// make sure wing's designated target is NULL'd out
; 1811 : 								mDesignatedObject = FalconNullId;
; 1812 : 							}
; 1813 : 							onStation = NotThereYet;
; 1814 : 							return;
; 1815 : 						}
; 1816 : 
; 1817 : 						// this takes us back to 1st state
; 1818 : 						SetGroundTarget( NULL );
; 1819 : 						onStation = NotThereYet;
; 1820 : 						break;
; 1821 : 					}
; 1822 : 			}
; 1823 : 			else if (droppingBombs == wcBombWpn)
; 1824 : 			{
; 1825 : 				DropBomb(approxRange, 0.0F, theRadar);
; 1826 : 			}
; 1827 : 			else if (droppingBombs == wcGbuWpn)
; 1828 : 			{
; 1829 : 				DropGBU(approxRange, 0.0F, theRadar);
; 1830 : 			}
; 1831 : 			else if (SimLibElapsedTime > waitingForShot || !hasWeapons)
; 1832 : 			{
; 1833 : 				// this takes us back to 1st state
; 1834 : 				SetGroundTarget( NULL );
; 1835 : 				onStation = NotThereYet;
; 1836 : 			}
; 1837 : 
; 1838 : 				AGflyOut();
; 1839 : 				// Release current target and target history
; 1840 : 				SetGroundTarget( NULL );
; 1841 : 				gndTargetHistory[0] = NULL;
; 1842 : 				onStation = Downwind;
; 1843 : 
; 1844 : 				// Check for remaining AB weapons
; 1845 : 				SelectGroundWeapon();
; 1846 : 				if (!(IsSetATC(HasCanUseAGWeapon)) && !(IsSetATC(HasAGWeapon)))
; 1847 : 				{
; 1848 : 					ClearATCFlag(HasCanUseAGWeapon);
; 1849 : 					ClearATCFlag(HasAGWeapon);
; 1850 : 					// Go to next WP
; 1851 : 					if (GetWaypointIndex() == GetTargetWPIndex())
; 1852 : 						SelectNextWaypoint();
; 1853 : 					// go back to initial AG state
; 1854 : 					agDoctrine = AGD_NONE;
; 1855 : 					missionComplete = TRUE;
; 1856 : 					agmergeTimer = SimLibElapsedTime + 1;
; 1857 : 					// if we're a wingie, rejoin the lead
; 1858 : 					if ( isWing )
; 1859 : 					{
; 1860 : 						mFormation = FalconWingmanMsg::WMWedge;
; 1861 : 						AiRejoin( NULL );
; 1862 : 						// make sure wing's designated target is NULL'd out
; 1863 : 						mDesignatedObject = FalconNullId;
; 1864 : 					}
; 1865 : 					onStation = NotThereYet;
; 1866 : 					return;
; 1867 : 				}
; 1868 :      		break;
; 1869 : //======= End Final1 ===========================================
; 1870 : #endif
; 1871 : 
; 1872 : 		// after bombing run, we come here to pull up
; 1873 : 		//==================================================
; 1874 : 		case Stabalizing:
; 1875 : 		{
; 1876 : 			dx = (float)fabs( self->XPos() - trackX );

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv6242[ebp]
	movss	xmm0, DWORD PTR tv6242[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+148]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _dx$[ebp]

; 1877 : 			dy = (float)fabs( self->YPos() - trackY );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv6251[ebp]
	movss	xmm0, DWORD PTR tv6251[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+152]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _dy$[ebp]

; 1878 : 			approxRange = (float)sqrt( dx * dx + dy * dy );

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _approxRange$[ebp]

; 1879 : 
; 1880 : 			if ( approxRange < 2.0f * NM_TO_FT )

	movss	xmm0, DWORD PTR __real@463de1b0
	comiss	xmm0, DWORD PTR _approxRange$[ebp]
	jbe	SHORT $LN5@GroundAtta

; 1881 : 				onStation = NotThereYet;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+132], 0
$LN5@GroundAtta:

; 1882 : 
; 1883 : 			SetGroundTarget( NULL );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@DigitalBrain@@IAEXPAVFalconEntity@@@Z ; DigitalBrain::SetGroundTarget

; 1884 : 
; 1885 : 			//TJL 11/09/03 Changed to Corner speed to allow for variety of AI
; 1886 : 			desSpeed = cornerSpeed * 1.3f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+100]
	mulss	xmm0, DWORD PTR __real@3fa66666
	movss	DWORD PTR _desSpeed$[ebp], xmm0

; 1887 : 			TrackPoint(0.0F, desSpeed/* KNOTS_TO_FTPSEC*/); // Cobra - aerial TrackPoint speed is in knots

	push	ecx
	movss	xmm0, DWORD PTR _desSpeed$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TrackPoint@DigitalBrain@@IAEMMM@Z	; DigitalBrain::TrackPoint
	fstp	ST(0)
$LN4@GroundAtta:
$LN243@GroundAtta:

; 1888 : 
; 1889 : 			break;
; 1890 : 		}
; 1891 : 		//======= End Stabalizing ===========================================
; 1892 : 
; 1893 : 		case Taxi:
; 1894 : 			break;
; 1895 : 	} // end switch (onStation)
; 1896 : 	//======= End End End ===========================================
; 1897 : 
; 1898 : 	// Been doing this long enough, go to the next waypoint
; 1899 : 	//    if (groundTargetPtr && SimLibElapsedTime > agmergeTimer)
; 1900 : 	if (agmergeTimer != 0 && SimLibElapsedTime > agmergeTimer)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+556], 0
	je	$LN3@GroundAtta
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	ecx, DWORD PTR [eax+556]
	jbe	$LN3@GroundAtta

; 1901 : 	{
; 1902 : 		ClearATCFlag(HasCanUseAGWeapon);

	push	536870912				; 20000000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 1903 : 		ClearATCFlag(HasAGWeapon);

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearATCFlag@DigitalBrain@@QAEXH@Z	; DigitalBrain::ClearATCFlag

; 1904 : 		if (GetWaypointIndex() == GetTargetWPIndex())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWaypointIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetWaypointIndex
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTargetWPIndex@DigitalBrain@@IAEHXZ	; DigitalBrain::GetTargetWPIndex
	cmp	esi, eax
	jne	SHORT $LN2@GroundAtta

; 1905 : 			SelectNextWaypoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectNextWaypoint@DigitalBrain@@IAEXXZ ; DigitalBrain::SelectNextWaypoint
$LN2@GroundAtta:

; 1906 : 		// Cobra - finsih up and go to next WP
; 1907 : 		// go back to initial AG state
; 1908 : 		agDoctrine = AGD_NONE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+244], 0

; 1909 : 		missionComplete = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+292], 1

; 1910 : 		// if we're a wingie, rejoin the lead
; 1911 : 		if ( isWing )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN1@GroundAtta

; 1912 : 		{
; 1913 : 			mFormation = FalconWingmanMsg::WMWedge;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+808], 1

; 1914 : 			AiRejoin( NULL, AI_REJOIN ); // Cobra - Try this hint

	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AiRejoin@DigitalBrain@@AAEXPAVFalconWingmanMsg@@W4AiHint@1@@Z ; DigitalBrain::AiRejoin

; 1915 : 			// make sure wing's designated target is NULL'd out
; 1916 : 			mDesignatedObject = FalconNullId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax+800], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+804], edx
$LN1@GroundAtta:

; 1917 : 		}
; 1918 : 		agmergeTimer = SimLibElapsedTime + 1;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+556], eax
$LN3@GroundAtta:
$LN311@GroundAtta:

; 1919 : 		//agmergeTimer = 0; // Cobra - reinitialize
; 1920 : 	}
; 1921 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN326@GroundAtta:
	DD	$LN241@GroundAtta
	DD	$LN6@GroundAtta
	DD	$FinalSG$328
	DD	$LN4@GroundAtta
	DD	$LN163@GroundAtta
	DD	$LN137@GroundAtta
	DD	$LN121@GroundAtta
	DD	$LN120@GroundAtta
	DD	$LN45@GroundAtta
	DD	$LN242@GroundAtta
$LN325@GroundAtta:
	DB	0
	DB	9
	DB	1
	DB	9
	DB	9
	DB	9
	DB	9
	DB	2
	DB	9
	DB	9
	DB	3
	DB	9
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
?GroundAttackMode@DigitalBrain@@IAEXXZ ENDP		; DigitalBrain::GroundAttackMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetPrevWP@WayPointClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPrevWP@WayPointClass@@QAEPAV1@XZ PROC		; WayPointClass::GetPrevWP, COMDAT
; _this$ = ecx

; 176  : 	WayPoint GetPrevWP (void)						{ return PrevWP; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPrevWP@WayPointClass@@QAEPAV1@XZ ENDP		; WayPointClass::GetPrevWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetNextWP@WayPointClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNextWP@WayPointClass@@QAEPAV1@XZ PROC		; WayPointClass::GetNextWP, COMDAT
; _this$ = ecx

; 175  : 	WayPoint GetNextWP (void)						{ return NextWP; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextWP@WayPointClass@@QAEPAV1@XZ ENDP		; WayPointClass::GetNextWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPFlags@WayPointClass@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPFlags@WayPointClass@@QAEKXZ PROC			; WayPointClass::GetWPFlags, COMDAT
; _this$ = ecx

; 173  : 	ulong GetWPFlags (void)							{ return (ulong)Flags; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPFlags@WayPointClass@@QAEKXZ ENDP			; WayPointClass::GetWPFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPRouteAction@WayPointClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPRouteAction@WayPointClass@@QAEHXZ PROC		; WayPointClass::GetWPRouteAction, COMDAT
; _this$ = ecx

; 171  : 	int GetWPRouteAction(void)						{ return (int)RouteAction; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+25]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPRouteAction@WayPointClass@@QAEHXZ ENDP		; WayPointClass::GetWPRouteAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPAction@WayPointClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPAction@WayPointClass@@QAEHXZ PROC			; WayPointClass::GetWPAction, COMDAT
; _this$ = ecx

; 170  : 	int GetWPAction(void)							{ return (int)Action; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPAction@WayPointClass@@QAEHXZ ENDP			; WayPointClass::GetWPAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPTargetBuilding@WayPointClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPTargetBuilding@WayPointClass@@QAEEXZ PROC		; WayPointClass::GetWPTargetBuilding, COMDAT
; _this$ = ecx

; 169  : 	uchar GetWPTargetBuilding (void)				{ return TargetBuilding; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+27]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPTargetBuilding@WayPointClass@@QAEEXZ ENDP		; WayPointClass::GetWPTargetBuilding
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ PROC ; WayPointClass::GetWPTarget, COMDAT
; _this$ = ecx

; 168  : 	CampEntity GetWPTarget (void)					{ return (CampEntity)vuDatabase->Find(TargetID); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPTarget@WayPointClass@@QAEPAVCampBaseClass@@XZ ENDP ; WayPointClass::GetWPTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbrain.h
;	COMDAT ?ClearFlag@BaseBrain@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_val$ = 8						; size = 4
?ClearFlag@BaseBrain@@QAEXH@Z PROC			; BaseBrain::ClearFlag, COMDAT
; _this$ = ecx

; 38   :       void ClearFlag (int val) {flags &= ~val;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _val$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearFlag@BaseBrain@@QAEXH@Z ENDP			; BaseBrain::ClearFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbrain.h
;	COMDAT ?SetFlag@BaseBrain@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_val$ = 8						; size = 4
?SetFlag@BaseBrain@@QAEXH@Z PROC			; BaseBrain::SetFlag, COMDAT
; _this$ = ecx

; 37   :       void SetFlag (int val) {flags |= val;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	or	ecx, DWORD PTR _val$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFlag@BaseBrain@@QAEXH@Z ENDP			; BaseBrain::SetFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?checked_atan2@@YANNN@Z
_TEXT	SEGMENT
_z$ = -8						; size = 8
_y$ = 8							; size = 8
_x$ = 16						; size = 8
?checked_atan2@@YANNN@Z PROC				; checked_atan2, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 47   : 	double z;
; 48   : 	
; 49   : 	if (x == -0.0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@8000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@checked_at

; 50   : 		x = 0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _x$[ebp], xmm0
$LN8@checked_at:

; 51   : 	
; 52   : 	if (x != 0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@checked_at

; 53   : 		z = atan(y / x);

	movsd	xmm0, QWORD PTR _y$[ebp]
	divsd	xmm0, QWORD PTR _x$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR _z$[ebp]
	jmp	SHORT $LN4@checked_at
$LN7@checked_at:

; 54   : 	else if (y > 0)

	movsd	xmm0, QWORD PTR _y$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@checked_at

; 55   : 		z = HALF_DPI;

	movsd	xmm0, QWORD PTR __real@3ff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 56   : 	else

	jmp	SHORT $LN4@checked_at
$LN5@checked_at:

; 57   : 		z = -HALF_DPI;

	movsd	xmm0, QWORD PTR __real@bff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN4@checked_at:

; 58   : 
; 59   : 	if (x < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _x$[ebp]
	jbe	SHORT $LN1@checked_at

; 60   : 	{
; 61   : 		if (y < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _y$[ebp]
	jbe	SHORT $LN2@checked_at

; 62   : 			z -= DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	subsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 63   : 		else

	jmp	SHORT $LN1@checked_at
$LN2@checked_at:

; 64   : 			z += DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	addsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN1@checked_at:

; 65   : 	}
; 66   : 
; 67   : 	return z;

	fld	QWORD PTR _z$[ebp]

; 68   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?checked_atan2@@YANNN@Z ENDP				; checked_atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?mlSinCos@@YAXPAUmlTrig@@M@Z
_TEXT	SEGMENT
_trig$ = 8						; size = 4
_angle$ = 12						; size = 4
?mlSinCos@@YAXPAUmlTrig@@M@Z PROC			; mlSinCos, COMDAT

; 12   : {

	push	ebp
	mov	ebp, esp

; 13   : #if defined(_MSC_VER)
; 14   : 	__asm 
; 15   : 	{
; 16   : 		__asm	mov     ecx, trig;

	mov	ecx, DWORD PTR _trig$[ebp]

; 17   : 		__asm	fld     dword ptr [angle];

	fld	DWORD PTR _angle$[ebp]

; 18   : 		__asm	fsincos;

	fsincos

; 19   : 		__asm	fstp    dword ptr [ecx]trig.cos;

	fstp	DWORD PTR [ecx+4]

; 20   : 		__asm	fstp    dword ptr [ecx]trig.sin;

	fstp	DWORD PTR [ecx]

; 21   : 	}
; 22   : #else
; 23   : 	trig->sin = (Float32)sin(angle);
; 24   : 	trig->cos = (Float32)cos(angle);
; 25   : #endif
; 26   : }

	pop	ebp
	ret	0
?mlSinCos@@YAXPAUmlTrig@@M@Z ENDP			; mlSinCos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsPlayer@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPlayer@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsPlayer, COMDAT
; _this$ = ecx

; 113  : 	int IsPlayer (void)							{ return IsSetFalcFlag(FEC_HASPLAYERS); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetFalcFlag@FalconEntity@@QAEHH@Z	; FalconEntity::IsSetFalcFlag
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPlayer@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsPlayer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSetFalcFlag@FalconEntity@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z PROC		; FalconEntity::IsSetFalcFlag, COMDAT
; _this$ = ecx

; 112  : 	int IsSetFalcFlag (int flag)				{ return falconFlags & flag; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+136]
	and	eax, DWORD PTR _flag$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z ENDP		; FalconEntity::IsSetFalcFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSim@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsSim@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsSim, COMDAT
; _this$ = ecx

; 103  : 		{return (falconType & FalconSimEntity) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	and	ecx, 2
	je	SHORT $LN3@IsSim
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSim
$LN3@IsSim:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSim:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSim@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsCampaign@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsCampaign@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsCampaign, COMDAT
; _this$ = ecx

; 101  : 		{return (falconType & FalconCampaignEntity) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	and	ecx, 1
	je	SHORT $LN3@IsCampaign
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsCampaign
$LN3@IsCampaign:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsCampaign:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsCampaign@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsCampaign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Pitch@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Pitch@VuEntity@@QBEMXZ PROC				; VuEntity::Pitch, COMDAT
; _this$ = ecx

; 165  : 	SM_SCALAR Pitch() const { return orient_.pitch_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+64]
	mov	esp, ebp
	pop	ebp
	ret	0
?Pitch@VuEntity@@QBEMXZ ENDP				; VuEntity::Pitch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Yaw@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Yaw@VuEntity@@QBEMXZ PROC				; VuEntity::Yaw, COMDAT
; _this$ = ecx

; 164  : 	SM_SCALAR Yaw() const { return orient_.yaw_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?Yaw@VuEntity@@QBEMXZ ENDP				; VuEntity::Yaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YDelta@VuEntity@@QBEMXZ PROC				; VuEntity::YDelta, COMDAT
; _this$ = ecx

; 162  : 	SM_SCALAR YDelta() const { return pos_.dy_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?YDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::YDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XDelta@VuEntity@@QBEMXZ PROC				; VuEntity::XDelta, COMDAT
; _this$ = ecx

; 161  : 	SM_SCALAR XDelta() const { return pos_.dx_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?XDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::XDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Type@VuEntity@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@VuEntity@@QBEGXZ PROC				; VuEntity::Type, COMDAT
; _this$ = ecx

; 154  : 	ushort Type() const       { return share_.entityType_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@VuEntity@@QBEGXZ ENDP				; VuEntity::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??9VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??9VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator!=, COMDAT
; _this$ = ecx

; 111  : 	bool operator != (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 		return (
; 113  : 			num_ == rhs.num_ ? 
; 114  : 			(creator_ == rhs.creator_ ? false : true) : 
; 115  : 			true
; 116  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 1
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 1
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 117  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??9VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_ID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VU_ID@@QAE@XZ PROC					; VU_ID::VU_ID, COMDAT
; _this$ = ecx

; 100  : 	VU_ID() : num_(0), creator_(0){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0VU_SESSION_ID@@QAE@K@Z		; VU_SESSION_ID::VU_SESSION_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0VU_ID@@QAE@XZ ENDP					; VU_ID::VU_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_SESSION_ID@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??0VU_SESSION_ID@@QAE@K@Z PROC				; VU_SESSION_ID::VU_SESSION_ID, COMDAT
; _this$ = ecx

; 53   : 	VU_SESSION_ID(unsigned long value) : value_((unsigned long)value) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0VU_SESSION_ID@@QAE@K@Z ENDP				; VU_SESSION_ID::VU_SESSION_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?acos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?acos@@YAMM@Z PROC					; acos, COMDAT

; 501  :         {return (acosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_acosf
	add	esp, 4
	pop	ebp
	ret	0
?acos@@YAMM@Z ENDP					; acos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _acosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 400  :         {return ((float)acos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_acos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_acosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
