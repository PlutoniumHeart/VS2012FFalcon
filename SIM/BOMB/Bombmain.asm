; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\BOMB\Bombmain.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?dragConstant@BombClass@@2MA			; BombClass::dragConstant
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
_NEAR_CLIP DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
_DATA	SEGMENT
?dragConstant@BombClass@@2MA DD 0430c0000r	; 140	; BombClass::dragConstant
	ORG $+4
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_DATA	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	_acosf
PUBLIC	_asinf
PUBLIC	_cosf
PUBLIC	?asin@@YAMM@Z					; asin
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	??$Abs@M@@YAMM@Z				; Abs<float>
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0logic_error@std@@QAE@PBD@Z			; std::logic_error::logic_error
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
PUBLIC	??1out_of_range@std@@UAE@XZ			; std::out_of_range::~out_of_range
PUBLIC	??0out_of_range@std@@QAE@ABV01@@Z		; std::out_of_range::out_of_range
PUBLIC	??_Gout_of_range@std@@UAEPAXI@Z			; std::out_of_range::`scalar deleting destructor'
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?GetNumSwitches@DrawableBSP@@QAEHXZ		; DrawableBSP::GetNumSwitches
PUBLIC	?SetYPR@VuEntity@@QAEXMMM@Z			; VuEntity::SetYPR
PUBLIC	?SetYPRDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetYPRDelta
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?Type@VuEntity@@QBEGXZ				; VuEntity::Type
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?XDelta@VuEntity@@QBEMXZ			; VuEntity::XDelta
PUBLIC	?YDelta@VuEntity@@QBEMXZ			; VuEntity::YDelta
PUBLIC	?ZDelta@VuEntity@@QBEMXZ			; VuEntity::ZDelta
PUBLIC	?Yaw@VuEntity@@QBEMXZ				; VuEntity::Yaw
PUBLIC	?Pitch@VuEntity@@QBEMXZ				; VuEntity::Pitch
PUBLIC	?Roll@VuEntity@@QBEMXZ				; VuEntity::Roll
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?RequestReliableTransmit@VuMessage@@QAEXXZ	; VuMessage::RequestReliableTransmit
PUBLIC	?RequestOutOfBandTransmit@VuMessage@@QAEXXZ	; VuMessage::RequestOutOfBandTransmit
PUBLIC	?IsCampBase@FalconEntity@@UAE_NXZ		; FalconEntity::IsCampBase
PUBLIC	?IsSim@FalconEntity@@QAEHXZ			; FalconEntity::IsSim
PUBLIC	?IsSetFalcFlag@FalconEntity@@QAEHH@Z		; FalconEntity::IsSetFalcFlag
PUBLIC	?IsPlayer@FalconEntity@@QAEHXZ			; FalconEntity::IsPlayer
PUBLIC	?GetRadarMode@FalconEntity@@UAEHXZ		; FalconEntity::GetRadarMode
PUBLIC	?SetRadarMode@FalconEntity@@UAEXE@Z		; FalconEntity::SetRadarMode
PUBLIC	?ReturnToSearch@FalconEntity@@UAEXXZ		; FalconEntity::ReturnToSearch
PUBLIC	?SetSearchMode@FalconEntity@@UAEXE@Z		; FalconEntity::SetSearchMode
PUBLIC	?CombatClass@FalconEntity@@UAEHXZ		; FalconEntity::CombatClass
PUBLIC	?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z	; FalconEntity::HasEntity
PUBLIC	?IsMissile@FalconEntity@@UAEHXZ			; FalconEntity::IsMissile
PUBLIC	?IsGun@FalconEntity@@UAEHXZ			; FalconEntity::IsGun
PUBLIC	?IsVehicle@FalconEntity@@UAEHXZ			; FalconEntity::IsVehicle
PUBLIC	?IsStatic@FalconEntity@@UAEHXZ			; FalconEntity::IsStatic
PUBLIC	?IsHelicopter@FalconEntity@@UAEHXZ		; FalconEntity::IsHelicopter
PUBLIC	?IsEject@FalconEntity@@UAEHXZ			; FalconEntity::IsEject
PUBLIC	?IsAirplane@FalconEntity@@UAEHXZ		; FalconEntity::IsAirplane
PUBLIC	?IsGroundVehicle@FalconEntity@@UAEHXZ		; FalconEntity::IsGroundVehicle
PUBLIC	?IsShip@FalconEntity@@UAEHXZ			; FalconEntity::IsShip
PUBLIC	?IsDead@FalconEntity@@UAEHXZ			; FalconEntity::IsDead
PUBLIC	?IsEmitting@FalconEntity@@UAEHXZ		; FalconEntity::IsEmitting
PUBLIC	?IsUnit@FalconEntity@@UAEHXZ			; FalconEntity::IsUnit
PUBLIC	?IsObjective@FalconEntity@@UAEHXZ		; FalconEntity::IsObjective
PUBLIC	?IsBattalion@FalconEntity@@UAEHXZ		; FalconEntity::IsBattalion
PUBLIC	?IsBrigade@FalconEntity@@UAEHXZ			; FalconEntity::IsBrigade
PUBLIC	?IsFlight@FalconEntity@@UBEHXZ			; FalconEntity::IsFlight
PUBLIC	?IsSquadron@FalconEntity@@UAEHXZ		; FalconEntity::IsSquadron
PUBLIC	?IsPackage@FalconEntity@@UAEHXZ			; FalconEntity::IsPackage
PUBLIC	?IsTeam@FalconEntity@@UAEHXZ			; FalconEntity::IsTeam
PUBLIC	?IsTaskForce@FalconEntity@@UAEHXZ		; FalconEntity::IsTaskForce
PUBLIC	?GetRCSFactor@FalconEntity@@UAEMXZ		; FalconEntity::GetRCSFactor
PUBLIC	?GetIRFactor@FalconEntity@@UAEMXZ		; FalconEntity::GetIRFactor
PUBLIC	?SetAQUIREtimer@FalconEntity@@UAEXK@Z		; FalconEntity::SetAQUIREtimer
PUBLIC	?SetSEARCHtimer@FalconEntity@@UAEXK@Z		; FalconEntity::SetSEARCHtimer
PUBLIC	?SetStepSearchMode@FalconEntity@@UAEXE@Z	; FalconEntity::SetStepSearchMode
PUBLIC	?GetAQUIREtimer@FalconEntity@@UAEKXZ		; FalconEntity::GetAQUIREtimer
PUBLIC	?GetSEARCHtimer@FalconEntity@@UAEKXZ		; FalconEntity::GetSEARCHtimer
PUBLIC	?mlSinCos@@YAXPAUmlTrig@@M@Z			; mlSinCos
PUBLIC	?checked_atan2@@YANNN@Z				; checked_atan2
PUBLIC	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
PUBLIC	?JoinFlight@SimBaseClass@@UAEXXZ		; SimBaseClass::JoinFlight
PUBLIC	?IsSimBase@SimBaseClass@@UAE_NXZ		; SimBaseClass::IsSimBase
PUBLIC	?GetCountry@SimBaseClass@@UAEEXZ		; SimBaseClass::GetCountry
PUBLIC	?OnGround@SimBaseClass@@UAEHXZ			; SimBaseClass::OnGround
PUBLIC	?IsExploding@SimBaseClass@@UAEHXZ		; SimBaseClass::IsExploding
PUBLIC	?IsDead@SimBaseClass@@UBEHXZ			; SimBaseClass::IsDead
PUBLIC	?IsAwake@SimBaseClass@@QBEHXZ			; SimBaseClass::IsAwake
PUBLIC	?IsSetFlag@SimBaseClass@@QBEHH@Z		; SimBaseClass::IsSetFlag
PUBLIC	?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetCampaignFlag
PUBLIC	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
PUBLIC	?MakePlayerVehicle@SimBaseClass@@UAEXXZ		; SimBaseClass::MakePlayerVehicle
PUBLIC	?MakeNonPlayerVehicle@SimBaseClass@@UAEXXZ	; SimBaseClass::MakeNonPlayerVehicle
PUBLIC	?ConfigurePlayerAvionics@SimBaseClass@@UAEXXZ	; SimBaseClass::ConfigurePlayerAvionics
PUBLIC	?Regenerate@SimBaseClass@@UAEXMMMM@Z		; SimBaseClass::Regenerate
PUBLIC	?Mass@SimBaseClass@@UAEMXZ			; SimBaseClass::Mass
PUBLIC	??7?$VuBin@VFalconEntity@@@@QBE_NXZ		; VuBin<FalconEntity>::operator!
PUBLIC	??B?$VuBin@VFalconEntity@@@@QBE_NXZ		; VuBin<FalconEntity>::operator bool
PUBLIC	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	?SetLead@SimMoverClass@@UAEXH@Z			; SimMoverClass::SetLead
PUBLIC	?WeaponKeepAlive@SimMoverClass@@UAEXXZ		; SimMoverClass::WeaponKeepAlive
PUBLIC	?IsMover@SimMoverClass@@UAEHXZ			; SimMoverClass::IsMover
PUBLIC	?IsWeapon@SimWeaponClass@@UAEHXZ		; SimWeaponClass::IsWeapon
PUBLIC	?LaunchDelayTime@SimWeaponClass@@UAEHXZ		; SimWeaponClass::LaunchDelayTime
PUBLIC	?UpdateTrail@BombClass@@MAEXXZ			; BombClass::UpdateTrail
PUBLIC	?RemoveTrail@BombClass@@MAEXXZ			; BombClass::RemoveTrail
PUBLIC	?InitTrail@BombClass@@MAEXXZ			; BombClass::InitTrail
PUBLIC	?DoExplosion@BombClass@@MAEXXZ			; BombClass::DoExplosion
PUBLIC	?ApplyProximityDamage@BombClass@@IAEXMM@Z	; BombClass::ApplyProximityDamage
PUBLIC	?ExtraGraphics@BombClass@@MAEXXZ		; BombClass::ExtraGraphics
PUBLIC	?SpecialGraphics@BombClass@@MAEXXZ		; BombClass::SpecialGraphics
PUBLIC	??0BombClass@@QAE@PAPAEPAJ@Z			; BombClass::BombClass
PUBLIC	??0BombClass@@QAE@PAU_iobuf@@@Z			; BombClass::BombClass
PUBLIC	??0BombClass@@QAE@HW4BombType@0@@Z		; BombClass::BombClass
PUBLIC	??1BombClass@@UAE@XZ				; BombClass::~BombClass
PUBLIC	?InitData@BombClass@@UAEXXZ			; BombClass::InitData
PUBLIC	?CleanupData@BombClass@@UAEXXZ			; BombClass::CleanupData
PUBLIC	?InitLocalData@BombClass@@AAEXW4BombType@1@@Z	; BombClass::InitLocalData
PUBLIC	?CleanupLocalData@BombClass@@AAEXXZ		; BombClass::CleanupLocalData
PUBLIC	?SaveSize@BombClass@@UAEHXZ			; BombClass::SaveSize
PUBLIC	?Save@BombClass@@UAEHPAPAE@Z			; BombClass::Save
PUBLIC	?Save@BombClass@@UAEHPAU_iobuf@@@Z		; BombClass::Save
PUBLIC	?Wake@BombClass@@UAEHXZ				; BombClass::Wake
PUBLIC	?Sleep@BombClass@@UAEHXZ			; BombClass::Sleep
PUBLIC	?Start@BombClass@@UAEXPAUvector@@0MPAVSimObjectType@@@Z ; BombClass::Start
PUBLIC	?Init@BombClass@@UAEXXZ				; BombClass::Init
PUBLIC	?Init@BombClass@@UAEXPAVSimInitDataClass@@@Z	; BombClass::Init
PUBLIC	?Exec@BombClass@@UAEHXZ				; BombClass::Exec
PUBLIC	?GetTransform@BombClass@@UAEXQAY02M@Z		; BombClass::GetTransform
PUBLIC	?SetTarget@BombClass@@QAEXPAVSimObjectType@@@Z	; BombClass::SetTarget
PUBLIC	?SetVuPosition@BombClass@@UAEXXZ		; BombClass::SetVuPosition
PUBLIC	?IsBomb@BombClass@@UAEHXZ			; BombClass::IsBomb
PUBLIC	?IsUseable@BombClass@@UAEHXZ			; BombClass::IsUseable
PUBLIC	?CreateGfx@BombClass@@UAEXXZ			; BombClass::CreateGfx
PUBLIC	?DestroyGfx@BombClass@@UAEXXZ			; BombClass::DestroyGfx
PUBLIC	?GetJDAMLift@BombClass@@QAEMXZ			; BombClass::GetJDAMLift
PUBLIC	?GetJSOWmaxRange@BombClass@@QAEMXZ		; BombClass::GetJSOWmaxRange
PUBLIC	??_GBombClass@@UAEPAXI@Z			; BombClass::`scalar deleting destructor'
PUBLIC	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ	; SimObjectType::BaseData
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
PUBLIC	?IsDigital@AircraftClass@@QAEHXZ		; AircraftClass::IsDigital
PUBLIC	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
PUBLIC	??1InvalidBufferException@@UAE@XZ		; InvalidBufferException::~InvalidBufferException
PUBLIC	??0InvalidBufferException@@QAE@ABV0@@Z		; InvalidBufferException::InvalidBufferException
PUBLIC	??_GInvalidBufferException@@UAEPAXI@Z		; InvalidBufferException::`scalar deleting destructor'
PUBLIC	?memcpychk@@YAXPAXPAPAEIPAJ@Z			; memcpychk
PUBLIC	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
PUBLIC	?IsAggregate@CampBaseClass@@QAEHXZ		; CampBaseClass::IsAggregate
PUBLIC	?MotionOn@SimulationDriver@@QAEHXZ		; SimulationDriver::MotionOn
PUBLIC	?IsRecording@ACMIRecorder@@QAEHXZ		; ACMIRecorder::IsRecording
PUBLIC	?GetColor@TeamClass@@QAEHXZ			; TeamClass::GetColor
PUBLIC	??$?8VFalconEntity@@@@YA_NPBXABV?$VuBin@VFalconEntity@@@@@Z ; operator==<FalconEntity>
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_7out_of_range@std@@6B@			; std::out_of_range::`vftable'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_7BombClass@@6B@				; BombClass::`vftable'
PUBLIC	??_7InvalidBufferException@@6B@			; InvalidBufferException::`vftable'
PUBLIC	??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ ; `string'
PUBLIC	__TI4?AVInvalidBufferException@@
PUBLIC	__CTA4?AVInvalidBufferException@@
PUBLIC	??_R0?AVInvalidBufferException@@@8		; InvalidBufferException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BN@LNGNKG@JSOWtgtID?3?5?$CFd?5?5X?$DN?5?$CFf?5?5Y?$DN?5?$CFf?6?$AA@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4out_of_range@std@@6B@			; std::out_of_range::`RTTI Complete Object Locator'
PUBLIC	??_R3out_of_range@std@@8			; std::out_of_range::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2out_of_range@std@@8			; std::out_of_range::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@out_of_range@std@@8		; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4BombClass@@6B@				; BombClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBombClass@@@8				; BombClass `RTTI Type Descriptor'
PUBLIC	??_R3BombClass@@8				; BombClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BombClass@@8				; BombClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BombClass@@8			; BombClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@SimWeaponClass@@8			; SimWeaponClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSimWeaponClass@@@8			; SimWeaponClass `RTTI Type Descriptor'
PUBLIC	??_R3SimWeaponClass@@8				; SimWeaponClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SimWeaponClass@@8				; SimWeaponClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SimMoverClass@@8			; SimMoverClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSimMoverClass@@@8			; SimMoverClass `RTTI Type Descriptor'
PUBLIC	??_R3SimMoverClass@@8				; SimMoverClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SimMoverClass@@8				; SimMoverClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SimBaseClass@@8			; SimBaseClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSimBaseClass@@@8			; SimBaseClass `RTTI Type Descriptor'
PUBLIC	??_R3SimBaseClass@@8				; SimBaseClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SimBaseClass@@8				; SimBaseClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FalconEntity@@8			; FalconEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVFalconEntity@@@8			; FalconEntity `RTTI Type Descriptor'
PUBLIC	??_R3FalconEntity@@8				; FalconEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FalconEntity@@8				; FalconEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VuEntity@@8			; VuEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVVuEntity@@@8				; VuEntity `RTTI Type Descriptor'
PUBLIC	??_R3VuEntity@@8				; VuEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VuEntity@@8				; VuEntity::`RTTI Base Class Array'
PUBLIC	??_R4InvalidBufferException@@6B@		; InvalidBufferException::`RTTI Complete Object Locator'
PUBLIC	??_R3InvalidBufferException@@8			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InvalidBufferException@@8			; InvalidBufferException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InvalidBufferException@@8		; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3a83126f
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3ea0d97a
PUBLIC	__real@3f490fd9
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3f866666
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@40000000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@40600000
PUBLIC	__real@40a00000
PUBLIC	__real@41200000
PUBLIC	__real@41a75205
PUBLIC	__real@4200b53f
PUBLIC	__real@4280b53f
PUBLIC	__real@43340000
PUBLIC	__real@437a0000
PUBLIC	__real@43fa0000
PUBLIC	__real@447a0000
PUBLIC	__real@44fa0000
PUBLIC	__real@451c4000
PUBLIC	__real@453b8000
PUBLIC	__real@45bde1b0
PUBLIC	__real@46fffe00
PUBLIC	__real@476d5a1c
PUBLIC	__real@8000000000000000
PUBLIC	__real@bf666666
PUBLIC	__real@bff921fb54442d18
PUBLIC	__real@c4480000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_acos:PROC
EXTRN	_asin:PROC
EXTRN	_atan:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_rand:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_fflush:PROC
EXTRN	_fprintf:PROC
EXTRN	_fread:PROC
EXTRN	_fwrite:PROC
EXTRN	_sprintf:PROC
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Eout_of_range@std@@UAEPAXI@Z:PROC		; std::out_of_range::`vector deleting destructor'
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?SetSwitchMask@DrawableBSP@@QAEXHK@Z:PROC	; DrawableBSP::SetSwitchMask
EXTRN	?F4IsBadReadPtr@@YA_NPBXI@Z:PROC		; F4IsBadReadPtr
EXTRN	?SetPosition@VuEntity@@QAEXMMM@Z:PROC		; VuEntity::SetPosition
EXTRN	?SetDelta@VuEntity@@QAEXMMM@Z:PROC		; VuEntity::SetDelta
EXTRN	?IsLocal@VuEntity@@QBEEXZ:PROC			; VuEntity::IsLocal
EXTRN	?CustomCollisionCheck@VuEntity@@UAEEPAV1@M@Z:PROC ; VuEntity::CustomCollisionCheck
EXTRN	?TerrainCollisionCheck@VuEntity@@UAEEXZ:PROC	; VuEntity::TerrainCollisionCheck
EXTRN	?IsTarget@VuEntity@@UAEEXZ:PROC			; VuEntity::IsTarget
EXTRN	?IsSession@VuEntity@@UAEEXZ:PROC		; VuEntity::IsSession
EXTRN	?IsGroup@VuEntity@@UAEEXZ:PROC			; VuEntity::IsGroup
EXTRN	?IsGame@VuEntity@@UAEEXZ:PROC			; VuEntity::IsGame
EXTRN	?IsCamera@VuEntity@@UBEEXZ:PROC			; VuEntity::IsCamera
EXTRN	?Handle@VuEntity@@UAEHPAVVuErrorMessage@@@Z:PROC ; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuPushRequest@@@Z:PROC	; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuPullRequest@@@Z:PROC	; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuEvent@@@Z:PROC	; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuEntityCollisionEvent@@@Z:PROC ; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuSessionEvent@@@Z:PROC ; VuEntity::Handle
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetFirst
EXTRN	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetNext
EXTRN	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z:PROC ; VuGridIterator::VuGridIterator
EXTRN	??1VuGridIterator@@UAE@XZ:PROC			; VuGridIterator::~VuGridIterator
EXTRN	?GetFirst@VuGridIterator@@QAEPAVVuEntity@@XZ:PROC ; VuGridIterator::GetFirst
EXTRN	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ:PROC ; VuGridIterator::GetNext
EXTRN	?GetDomain@FalconEntity@@UAEEXZ:PROC		; FalconEntity::GetDomain
EXTRN	?GetDamageModifiers@FalconEntity@@UAEPAEXZ:PROC	; FalconEntity::GetDamageModifiers
EXTRN	?UpdatePos@F4SoundPos@@QAEXPAVSimBaseClass@@@Z:PROC ; F4SoundPos::UpdatePos
EXTRN	?GetTeam@SimBaseClass@@UAEEXZ:PROC		; SimBaseClass::GetTeam
EXTRN	?GetCampID@SimBaseClass@@UAEFXZ:PROC		; SimBaseClass::GetCampID
EXTRN	?GetMovementType@SimBaseClass@@UAE?AW4MoveType@@XZ:PROC ; SimBaseClass::GetMovementType
EXTRN	?SetExploding@SimBaseClass@@QAEXH@Z:PROC	; SimBaseClass::SetExploding
EXTRN	?IsSPJamming@SimBaseClass@@UAEHXZ:PROC		; SimBaseClass::IsSPJamming
EXTRN	?IsAreaJamming@SimBaseClass@@UAEHXZ:PROC	; SimBaseClass::IsAreaJamming
EXTRN	?HasSPJamming@SimBaseClass@@UAEHXZ:PROC		; SimBaseClass::HasSPJamming
EXTRN	?HasAreaJamming@SimBaseClass@@UAEHXZ:PROC	; SimBaseClass::HasAreaJamming
EXTRN	?SetFlag@SimBaseClass@@QAEXH@Z:PROC		; SimBaseClass::SetFlag
EXTRN	?ApplyDamage@SimBaseClass@@UAEXPAVFalconDamageMessage@@@Z:PROC ; SimBaseClass::ApplyDamage
EXTRN	?ApplyDeathMessage@SimBaseClass@@UAEXPAVFalconDeathMessage@@@Z:PROC ; SimBaseClass::ApplyDeathMessage
EXTRN	?GetFocusPoint@SimBaseClass@@UAEXAAM00@Z:PROC	; SimBaseClass::GetFocusPoint
EXTRN	?GetP@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetP
EXTRN	?GetQ@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetQ
EXTRN	?GetR@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetR
EXTRN	?GetAlpha@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetAlpha
EXTRN	?GetBeta@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetBeta
EXTRN	?GetNx@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetNx
EXTRN	?GetNy@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetNy
EXTRN	?GetNz@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetNz
EXTRN	?GetGamma@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetGamma
EXTRN	?GetSigma@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetSigma
EXTRN	?GetMu@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetMu
EXTRN	?GetVt@SimMoverClass@@UBEMXZ:PROC		; SimMoverClass::GetVt
EXTRN	?GetKias@SimMoverClass@@UBEMXZ:PROC		; SimMoverClass::GetKias
EXTRN	?MakeLocal@SimMoverClass@@UAEXXZ:PROC		; SimMoverClass::MakeLocal
EXTRN	?MakeRemote@SimMoverClass@@UAEXXZ:PROC		; SimMoverClass::MakeRemote
EXTRN	?ChangeOwner@SimMoverClass@@UAEXVVU_ID@@@Z:PROC	; SimMoverClass::ChangeOwner
EXTRN	?FeatureCollision@SimMoverClass@@UAEPAVSimBaseClass@@M@Z:PROC ; SimMoverClass::FeatureCollision
EXTRN	?CheckLOS@SimMoverClass@@UAEHPAVSimObjectType@@@Z:PROC ; SimMoverClass::CheckLOS
EXTRN	?CheckCompositeLOS@SimMoverClass@@UAEHPAVSimObjectType@@@Z:PROC ; SimMoverClass::CheckCompositeLOS
EXTRN	?InsertionCallback@SimMoverClass@@UAEHXZ:PROC	; SimMoverClass::InsertionCallback
EXTRN	?RemovalCallback@SimMoverClass@@UAEHXZ:PROC	; SimMoverClass::RemovalCallback
EXTRN	?Camp_GetCurrentTime@@YAKXZ:PROC		; Camp_GetCurrentTime
EXTRN	?MapVisId@@YAKK@Z:PROC				; MapVisId
EXTRN	??0SimWeaponClass@@QAE@H@Z:PROC			; SimWeaponClass::SimWeaponClass
EXTRN	??0SimWeaponClass@@QAE@PAPAEPAJ@Z:PROC		; SimWeaponClass::SimWeaponClass
EXTRN	??0SimWeaponClass@@QAE@PAU_iobuf@@@Z:PROC	; SimWeaponClass::SimWeaponClass
EXTRN	??1SimWeaponClass@@UAE@XZ:PROC			; SimWeaponClass::~SimWeaponClass
EXTRN	?InitData@SimWeaponClass@@UAEXXZ:PROC		; SimWeaponClass::InitData
EXTRN	?CleanupData@SimWeaponClass@@UAEXXZ:PROC	; SimWeaponClass::CleanupData
EXTRN	?Sleep@SimWeaponClass@@UAEHXZ:PROC		; SimWeaponClass::Sleep
EXTRN	?Wake@SimWeaponClass@@UAEHXZ:PROC		; SimWeaponClass::Wake
EXTRN	?Init@SimWeaponClass@@UAEXXZ:PROC		; SimWeaponClass::Init
EXTRN	?SetDead@SimWeaponClass@@UAEXH@Z:PROC		; SimWeaponClass::SetDead
EXTRN	?SaveSize@SimWeaponClass@@UAEHXZ:PROC		; SimWeaponClass::SaveSize
EXTRN	?Save@SimWeaponClass@@UAEHPAPAE@Z:PROC		; SimWeaponClass::Save
EXTRN	?Save@SimWeaponClass@@UAEHPAU_iobuf@@@Z:PROC	; SimWeaponClass::Save
EXTRN	?Handle@SimWeaponClass@@UAEHPAVVuFullUpdateEvent@@@Z:PROC ; SimWeaponClass::Handle
EXTRN	?Handle@SimWeaponClass@@UAEHPAVVuPositionUpdateEvent@@@Z:PROC ; SimWeaponClass::Handle
EXTRN	?Handle@SimWeaponClass@@UAEHPAVVuTransferEvent@@@Z:PROC ; SimWeaponClass::Handle
EXTRN	?SendDamageMessage@SimWeaponClass@@QAEXPAVFalconEntity@@MH@Z:PROC ; SimWeaponClass::SendDamageMessage
EXTRN	?GetRadarType@SimWeaponClass@@UAEHXZ:PROC	; SimWeaponClass::GetRadarType
EXTRN	?ReadInput@BombClass@@QAEXH@Z:PROC		; BombClass::ReadInput
EXTRN	?IsLauncher@BombClass@@UAEHXZ:PROC		; BombClass::IsLauncher
EXTRN	?LauInit@BombClass@@QAEXXZ:PROC			; BombClass::LauInit
EXTRN	??_EBombClass@@UAEPAXI@Z:PROC			; BombClass::`vector deleting destructor'
EXTRN	?FalconSendMessage@@YAXPAVVuMessage@@H@Z:PROC	; FalconSendMessage
EXTRN	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z:PROC ; OTWDriverClass::GetGroundLevel
EXTRN	?GetGroundType@OTWDriverClass@@QAEHMM@Z:PROC	; OTWDriverClass::GetGroundType
EXTRN	?Reference@SimObjectType@@QAEXXZ:PROC		; SimObjectType::Reference
EXTRN	?Release@SimObjectType@@QAEXXZ:PROC		; SimObjectType::Release
EXTRN	??_EInvalidBufferException@@UAEPAXI@Z:PROC	; InvalidBufferException::`vector deleting destructor'
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	??0FalconMissileEndMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconMissileEndMessage::FalconMissileEndMessage
EXTRN	?SetParticleEffectName@FalconMissileEndMessage@@QAEXPAD@Z:PROC ; FalconMissileEndMessage::SetParticleEffectName
EXTRN	?Add@ACMI_Hash@@QAEJVVU_ID@@PADJ@Z:PROC		; ACMI_Hash::Add
EXTRN	?GenPositionRecord@ACMIRecorder@@QAEXPAUACMIGenPositionRecord@@@Z:PROC ; ACMIRecorder::GenPositionRecord
EXTRN	?ChaffPositionRecord@ACMIRecorder@@QAEXPAUACMIChaffPositionRecord@@@Z:PROC ; ACMIRecorder::ChaffPositionRecord
EXTRN	?FlarePositionRecord@ACMIRecorder@@QAEXPAUACMIFlarePositionRecord@@@Z:PROC ; ACMIRecorder::FlarePositionRecord
EXTRN	?StationarySfxRecord@ACMIRecorder@@QAEXPAUACMIStationarySfxRecord@@@Z:PROC ; ACMIRecorder::StationarySfxRecord
EXTRN	?AddToTimedPersistantList@@YAXHKMM@Z:PROC	; AddToTimedPersistantList
EXTRN	?WindSpeedInFeetPerSecond@WeatherClass@@QAEMPBUTpoint@@@Z:PROC ; WeatherClass::WindSpeedInFeetPerSecond
EXTRN	?WindHeadingAt@WeatherClass@@QAEMPBUTpoint@@@Z:PROC ; WeatherClass::WindHeadingAt
EXTRN	?CalcTransformMatrix@@YAXPAVSimBaseClass@@@Z:PROC ; CalcTransformMatrix
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	?SimLibMajorFrameTime@@3MA:DWORD		; SimLibMajorFrameTime
EXTRN	?SimLibElapsedTime@@3KA:DWORD			; SimLibElapsedTime
EXTRN	?SimLibFrameCount@@3IA:DWORD			; SimLibFrameCount
EXTRN	?SimWeaponDataTable@@3PAUSimWeaponDataType@@A:DWORD ; SimWeaponDataTable
EXTRN	?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A:DWORD ; Falcon4ClassTable
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?g_bRealisticAvionics@@3_NA:BYTE		; g_bRealisticAvionics
EXTRN	?ObjProxList@@3PAVVuGridTree@@A:DWORD		; ObjProxList
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?gACMIRec@@3VACMIRecorder@@A:BYTE		; gACMIRec
EXTRN	?ACMIIDTable@@3PAVACMI_Hash@@A:DWORD		; ACMIIDTable
EXTRN	?realWeather@@3PAVRealWeather@@A:DWORD		; realWeather
EXTRN	?TeamInfo@@3PAPAVTeamClass@@A:BYTE		; TeamInfo
EXTRN	?g_bRP5Comp@@3_NA:BYTE				; g_bRP5Comp
EXTRN	?g_bEnableWindsAloft@@3_NA:BYTE			; g_bEnableWindsAloft
EXTRN	?g_fNukeStrengthFactor@@3MA:DWORD		; g_fNukeStrengthFactor
EXTRN	?g_fNukeDamageMod@@3MA:DWORD			; g_fNukeDamageMod
EXTRN	?g_fNukeDamageRadius@@3MA:DWORD			; g_fNukeDamageRadius
EXTRN	?g_fJDAMLift@@3MA:DWORD				; g_fJDAMLift
EXTRN	?g_fAIJSOWmaxRange@@3MA:DWORD			; g_fAIJSOWmaxRange
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?fp@?1??Exec@BombClass@@UAEHXZ@4PAU_iobuf@@A
_BSS	SEGMENT
?fp@?1??Exec@BombClass@@UAEHXZ@4PAU_iobuf@@A DD 01H DUP (?) ; `BombClass::Exec'::`2'::fp
_BSS	ENDS
;	COMDAT ?maxenergy@?JL@??Exec@BombClass@@UAEHXZ@4MA
_BSS	SEGMENT
?maxenergy@?JL@??Exec@BombClass@@UAEHXZ@4MA DD 01H DUP (?) ; `BombClass::Exec'::`155'::maxenergy
_BSS	ENDS
;	COMDAT ?$S1@?JL@??Exec@BombClass@@UAEHXZ@4IA
_BSS	SEGMENT
?$S1@?JL@??Exec@BombClass@@UAEHXZ@4IA DD 01H DUP (?)	; `BombClass::Exec'::`155'::$S1
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@c4480000
CONST	SEGMENT
__real@c4480000 DD 0c4480000r			; -800
CONST	ENDS
;	COMDAT __real@bff921fb54442d18
CONST	SEGMENT
__real@bff921fb54442d18 DQ 0bff921fb54442d18r	; -1.5708
CONST	ENDS
;	COMDAT __real@bf666666
CONST	SEGMENT
__real@bf666666 DD 0bf666666r			; -0.9
CONST	ENDS
;	COMDAT __real@8000000000000000
CONST	SEGMENT
__real@8000000000000000 DQ 08000000000000000r	; -0
CONST	ENDS
;	COMDAT __real@476d5a1c
CONST	SEGMENT
__real@476d5a1c DD 0476d5a1cr			; 60762.1
CONST	ENDS
;	COMDAT __real@46fffe00
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
CONST	ENDS
;	COMDAT __real@45bde1b0
CONST	SEGMENT
__real@45bde1b0 DD 045bde1b0r			; 6076.21
CONST	ENDS
;	COMDAT __real@453b8000
CONST	SEGMENT
__real@453b8000 DD 0453b8000r			; 3000
CONST	ENDS
;	COMDAT __real@451c4000
CONST	SEGMENT
__real@451c4000 DD 0451c4000r			; 2500
CONST	ENDS
;	COMDAT __real@44fa0000
CONST	SEGMENT
__real@44fa0000 DD 044fa0000r			; 2000
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@437a0000
CONST	SEGMENT
__real@437a0000 DD 0437a0000r			; 250
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@4280b53f
CONST	SEGMENT
__real@4280b53f DD 04280b53fr			; 64.354
CONST	ENDS
;	COMDAT __real@4200b53f
CONST	SEGMENT
__real@4200b53f DD 04200b53fr			; 32.177
CONST	ENDS
;	COMDAT __real@41a75205
CONST	SEGMENT
__real@41a75205 DD 041a75205r			; 20.915
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40600000
CONST	SEGMENT
__real@40600000 DD 040600000r			; 3.5
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3f866666
CONST	SEGMENT
__real@3f866666 DD 03f866666r			; 1.05
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f490fd9
CONST	SEGMENT
__real@3f490fd9 DD 03f490fd9r			; 0.785398
CONST	ENDS
;	COMDAT __real@3ea0d97a
CONST	SEGMENT
__real@3ea0d97a DD 03ea0d97ar			; 0.314159
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@InvalidBufferException@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InvalidBufferException@@8 DD FLAT:??_R0?AVInvalidBufferException@@@8 ; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R2InvalidBufferException@@8
rdata$r	SEGMENT
??_R2InvalidBufferException@@8 DD FLAT:??_R1A@?0A@EA@InvalidBufferException@@8 ; InvalidBufferException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@out_of_range@std@@8
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InvalidBufferException@@8
rdata$r	SEGMENT
??_R3InvalidBufferException@@8 DD 00H			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R4InvalidBufferException@@6B@
rdata$r	SEGMENT
??_R4InvalidBufferException@@6B@ DD 00H			; InvalidBufferException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R2VuEntity@@8
rdata$r	SEGMENT
??_R2VuEntity@@8 DD FLAT:??_R1A@?0A@EA@VuEntity@@8	; VuEntity::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3VuEntity@@8
rdata$r	SEGMENT
??_R3VuEntity@@8 DD 00H					; VuEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVuEntity@@@8
_DATA	SEGMENT
??_R0?AVVuEntity@@@8 DD FLAT:??_7type_info@@6B@		; VuEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVuEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@VuEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VuEntity@@8 DD FLAT:??_R0?AVVuEntity@@@8	; VuEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2FalconEntity@@8
rdata$r	SEGMENT
??_R2FalconEntity@@8 DD FLAT:??_R1A@?0A@EA@FalconEntity@@8 ; FalconEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3FalconEntity@@8
rdata$r	SEGMENT
??_R3FalconEntity@@8 DD 00H				; FalconEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FalconEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFalconEntity@@@8
_DATA	SEGMENT
??_R0?AVFalconEntity@@@8 DD FLAT:??_7type_info@@6B@	; FalconEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFalconEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@FalconEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FalconEntity@@8 DD FLAT:??_R0?AVFalconEntity@@@8 ; FalconEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FalconEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2SimBaseClass@@8
rdata$r	SEGMENT
??_R2SimBaseClass@@8 DD FLAT:??_R1A@?0A@EA@SimBaseClass@@8 ; SimBaseClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3SimBaseClass@@8
rdata$r	SEGMENT
??_R3SimBaseClass@@8 DD 00H				; SimBaseClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2SimBaseClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSimBaseClass@@@8
_DATA	SEGMENT
??_R0?AVSimBaseClass@@@8 DD FLAT:??_7type_info@@6B@	; SimBaseClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSimBaseClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@SimBaseClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SimBaseClass@@8 DD FLAT:??_R0?AVSimBaseClass@@@8 ; SimBaseClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SimBaseClass@@8
rdata$r	ENDS
;	COMDAT ??_R2SimMoverClass@@8
rdata$r	SEGMENT
??_R2SimMoverClass@@8 DD FLAT:??_R1A@?0A@EA@SimMoverClass@@8 ; SimMoverClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SimBaseClass@@8
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3SimMoverClass@@8
rdata$r	SEGMENT
??_R3SimMoverClass@@8 DD 00H				; SimMoverClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2SimMoverClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSimMoverClass@@@8
_DATA	SEGMENT
??_R0?AVSimMoverClass@@@8 DD FLAT:??_7type_info@@6B@	; SimMoverClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSimMoverClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@SimMoverClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SimMoverClass@@8 DD FLAT:??_R0?AVSimMoverClass@@@8 ; SimMoverClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SimMoverClass@@8
rdata$r	ENDS
;	COMDAT ??_R2SimWeaponClass@@8
rdata$r	SEGMENT
??_R2SimWeaponClass@@8 DD FLAT:??_R1A@?0A@EA@SimWeaponClass@@8 ; SimWeaponClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SimMoverClass@@8
	DD	FLAT:??_R1A@?0A@EA@SimBaseClass@@8
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3SimWeaponClass@@8
rdata$r	SEGMENT
??_R3SimWeaponClass@@8 DD 00H				; SimWeaponClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2SimWeaponClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSimWeaponClass@@@8
_DATA	SEGMENT
??_R0?AVSimWeaponClass@@@8 DD FLAT:??_7type_info@@6B@	; SimWeaponClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSimWeaponClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@SimWeaponClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SimWeaponClass@@8 DD FLAT:??_R0?AVSimWeaponClass@@@8 ; SimWeaponClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SimWeaponClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BombClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BombClass@@8 DD FLAT:??_R0?AVBombClass@@@8 ; BombClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BombClass@@8
rdata$r	ENDS
;	COMDAT ??_R2BombClass@@8
rdata$r	SEGMENT
??_R2BombClass@@8 DD FLAT:??_R1A@?0A@EA@BombClass@@8	; BombClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SimWeaponClass@@8
	DD	FLAT:??_R1A@?0A@EA@SimMoverClass@@8
	DD	FLAT:??_R1A@?0A@EA@SimBaseClass@@8
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3BombClass@@8
rdata$r	SEGMENT
??_R3BombClass@@8 DD 00H				; BombClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	06H
	DD	FLAT:??_R2BombClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBombClass@@@8
_DATA	SEGMENT
??_R0?AVBombClass@@@8 DD FLAT:??_7type_info@@6B@	; BombClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBombClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BombClass@@6B@
rdata$r	SEGMENT
??_R4BombClass@@6B@ DD 00H				; BombClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBombClass@@@8
	DD	FLAT:??_R3BombClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@out_of_range@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@out_of_range@std@@8 DD FLAT:??_R0?AVout_of_range@std@@@8 ; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R2out_of_range@std@@8
rdata$r	SEGMENT
??_R2out_of_range@std@@8 DD FLAT:??_R1A@?0A@EA@out_of_range@std@@8 ; std::out_of_range::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3out_of_range@std@@8
rdata$r	SEGMENT
??_R3out_of_range@std@@8 DD 00H				; std::out_of_range::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R4out_of_range@std@@6B@
rdata$r	SEGMENT
??_R4out_of_range@std@@6B@ DD 00H			; std::out_of_range::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LNGNKG@JSOWtgtID?3?5?$CFd?5?5X?$DN?5?$CFf?5?5Y?$DN?5?$CFf?6?$AA@
CONST	SEGMENT
??_C@_0BN@LNGNKG@JSOWtgtID?3?5?$CFd?5?5X?$DN?5?$CFf?5?5Y?$DN?5?$CFf?6?$AA@ DB 'J'
	DB	'SOWtgtID: %d  X= %f  Y= %f', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0InvalidBufferException@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInvalidBufferException@@@8
_DATA	SEGMENT
??_R0?AVInvalidBufferException@@@8 DD FLAT:??_7type_info@@6B@ ; InvalidBufferException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInvalidBufferException@@', 00H
_DATA	ENDS
;	COMDAT __CTA4?AVInvalidBufferException@@
xdata$x	SEGMENT
__CTA4?AVInvalidBufferException@@ DD 04H
	DD	FLAT:__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI4?AVInvalidBufferException@@
xdata$x	SEGMENT
__TI4?AVInvalidBufferException@@ DD 00H
	DD	FLAT:??1InvalidBufferException@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AVInvalidBufferException@@
xdata$x	ENDS
;	COMDAT ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
CONST	SEGMENT
??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ DB 'Tryi'
	DB	'ng to write %lu bytes to %ld buffer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7InvalidBufferException@@6B@
CONST	SEGMENT
??_7InvalidBufferException@@6B@ DD FLAT:??_R4InvalidBufferException@@6B@ ; InvalidBufferException::`vftable'
	DD	FLAT:??_EInvalidBufferException@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7BombClass@@6B@
CONST	SEGMENT
??_7BombClass@@6B@ DD FLAT:??_R4BombClass@@6B@		; BombClass::`vftable'
	DD	FLAT:?CustomCollisionCheck@VuEntity@@UAEEPAV1@M@Z
	DD	FLAT:?TerrainCollisionCheck@VuEntity@@UAEEXZ
	DD	FLAT:?IsTarget@VuEntity@@UAEEXZ
	DD	FLAT:?IsSession@VuEntity@@UAEEXZ
	DD	FLAT:?IsGroup@VuEntity@@UAEEXZ
	DD	FLAT:?IsGame@VuEntity@@UAEEXZ
	DD	FLAT:?IsCamera@VuEntity@@UBEEXZ
	DD	FLAT:?SaveSize@BombClass@@UAEHXZ
	DD	FLAT:?Save@BombClass@@UAEHPAU_iobuf@@@Z
	DD	FLAT:?Save@BombClass@@UAEHPAPAE@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuSessionEvent@@@Z
	DD	FLAT:?Handle@SimWeaponClass@@UAEHPAVVuTransferEvent@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuEntityCollisionEvent@@@Z
	DD	FLAT:?Handle@SimWeaponClass@@UAEHPAVVuPositionUpdateEvent@@@Z
	DD	FLAT:?Handle@SimWeaponClass@@UAEHPAVVuFullUpdateEvent@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuEvent@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuPullRequest@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuPushRequest@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuErrorMessage@@@Z
	DD	FLAT:??_EBombClass@@UAEPAXI@Z
	DD	FLAT:?InsertionCallback@SimMoverClass@@UAEHXZ
	DD	FLAT:?RemovalCallback@SimMoverClass@@UAEHXZ
	DD	FLAT:?InitData@BombClass@@UAEXXZ
	DD	FLAT:?CleanupData@BombClass@@UAEXXZ
	DD	FLAT:?IsSimBase@SimBaseClass@@UAE_NXZ
	DD	FLAT:?IsCampBase@FalconEntity@@UAE_NXZ
	DD	FLAT:?Wake@BombClass@@UAEHXZ
	DD	FLAT:?Sleep@BombClass@@UAEHXZ
	DD	FLAT:?GetCampID@SimBaseClass@@UAEFXZ
	DD	FLAT:?GetTeam@SimBaseClass@@UAEEXZ
	DD	FLAT:?GetCountry@SimBaseClass@@UAEEXZ
	DD	FLAT:?GetDomain@FalconEntity@@UAEEXZ
	DD	FLAT:?GetRadarMode@FalconEntity@@UAEHXZ
	DD	FLAT:?SetRadarMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?ReturnToSearch@FalconEntity@@UAEXXZ
	DD	FLAT:?SetSearchMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?CombatClass@FalconEntity@@UAEHXZ
	DD	FLAT:?OnGround@SimBaseClass@@UAEHXZ
	DD	FLAT:?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z
	DD	FLAT:?IsMissile@FalconEntity@@UAEHXZ
	DD	FLAT:?IsLauncher@BombClass@@UAEHXZ
	DD	FLAT:?IsBomb@BombClass@@UAEHXZ
	DD	FLAT:?IsGun@FalconEntity@@UAEHXZ
	DD	FLAT:?IsMover@SimMoverClass@@UAEHXZ
	DD	FLAT:?IsVehicle@FalconEntity@@UAEHXZ
	DD	FLAT:?IsStatic@FalconEntity@@UAEHXZ
	DD	FLAT:?IsHelicopter@FalconEntity@@UAEHXZ
	DD	FLAT:?IsEject@FalconEntity@@UAEHXZ
	DD	FLAT:?IsAirplane@FalconEntity@@UAEHXZ
	DD	FLAT:?IsGroundVehicle@FalconEntity@@UAEHXZ
	DD	FLAT:?IsShip@FalconEntity@@UAEHXZ
	DD	FLAT:?IsWeapon@SimWeaponClass@@UAEHXZ
	DD	FLAT:?IsExploding@SimBaseClass@@UAEHXZ
	DD	FLAT:?IsDead@FalconEntity@@UAEHXZ
	DD	FLAT:?IsEmitting@FalconEntity@@UAEHXZ
	DD	FLAT:?GetVt@SimMoverClass@@UBEMXZ
	DD	FLAT:?GetKias@SimMoverClass@@UBEMXZ
	DD	FLAT:?GetMovementType@SimBaseClass@@UAE?AW4MoveType@@XZ
	DD	FLAT:?IsUnit@FalconEntity@@UAEHXZ
	DD	FLAT:?IsObjective@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBattalion@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBrigade@FalconEntity@@UAEHXZ
	DD	FLAT:?IsFlight@FalconEntity@@UBEHXZ
	DD	FLAT:?IsSquadron@FalconEntity@@UAEHXZ
	DD	FLAT:?IsPackage@FalconEntity@@UAEHXZ
	DD	FLAT:?IsTeam@FalconEntity@@UAEHXZ
	DD	FLAT:?IsTaskForce@FalconEntity@@UAEHXZ
	DD	FLAT:?IsSPJamming@SimBaseClass@@UAEHXZ
	DD	FLAT:?IsAreaJamming@SimBaseClass@@UAEHXZ
	DD	FLAT:?HasSPJamming@SimBaseClass@@UAEHXZ
	DD	FLAT:?HasAreaJamming@SimBaseClass@@UAEHXZ
	DD	FLAT:?GetRCSFactor@FalconEntity@@UAEMXZ
	DD	FLAT:?GetIRFactor@FalconEntity@@UAEMXZ
	DD	FLAT:?GetRadarType@SimWeaponClass@@UAEHXZ
	DD	FLAT:?GetDamageModifiers@FalconEntity@@UAEPAEXZ
	DD	FLAT:?SetAQUIREtimer@FalconEntity@@UAEXK@Z
	DD	FLAT:?SetSEARCHtimer@FalconEntity@@UAEXK@Z
	DD	FLAT:?SetStepSearchMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?GetAQUIREtimer@FalconEntity@@UAEKXZ
	DD	FLAT:?GetSEARCHtimer@FalconEntity@@UAEKXZ
	DD	FLAT:?WeaponKeepAlive@SimMoverClass@@UAEXXZ
	DD	FLAT:?JoinFlight@SimBaseClass@@UAEXXZ
	DD	FLAT:?ChangeOwner@SimMoverClass@@UAEXVVU_ID@@@Z
	DD	FLAT:?MakeLocal@SimMoverClass@@UAEXXZ
	DD	FLAT:?MakeRemote@SimMoverClass@@UAEXXZ
	DD	FLAT:?IsDead@SimBaseClass@@UBEHXZ
	DD	FLAT:?Init@BombClass@@UAEXPAVSimInitDataClass@@@Z
	DD	FLAT:?Exec@BombClass@@UAEHXZ
	DD	FLAT:?GetTransform@BombClass@@UAEXQAY02M@Z
	DD	FLAT:?ApplyDamage@SimBaseClass@@UAEXPAVFalconDamageMessage@@@Z
	DD	FLAT:?ApplyDeathMessage@SimBaseClass@@UAEXPAVFalconDeathMessage@@@Z
	DD	FLAT:?SetDead@SimWeaponClass@@UAEXH@Z
	DD	FLAT:?MakePlayerVehicle@SimBaseClass@@UAEXXZ
	DD	FLAT:?MakeNonPlayerVehicle@SimBaseClass@@UAEXXZ
	DD	FLAT:?ConfigurePlayerAvionics@SimBaseClass@@UAEXXZ
	DD	FLAT:?SetVuPosition@BombClass@@UAEXXZ
	DD	FLAT:?Regenerate@SimBaseClass@@UAEXMMMM@Z
	DD	FLAT:?Mass@SimBaseClass@@UAEMXZ
	DD	FLAT:?GetFocusPoint@SimBaseClass@@UAEXAAM00@Z
	DD	FLAT:?GetP@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetQ@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetR@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetAlpha@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetBeta@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetNx@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetNy@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetNz@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetGamma@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetSigma@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetMu@SimMoverClass@@UAEMXZ
	DD	FLAT:?SetLead@SimMoverClass@@UAEXH@Z
	DD	FLAT:?FeatureCollision@SimMoverClass@@UAEPAVSimBaseClass@@M@Z
	DD	FLAT:?CheckLOS@SimMoverClass@@UAEHPAVSimObjectType@@@Z
	DD	FLAT:?CheckCompositeLOS@SimMoverClass@@UAEHPAVSimObjectType@@@Z
	DD	FLAT:?Init@BombClass@@UAEXXZ
	DD	FLAT:?IsUseable@BombClass@@UAEHXZ
	DD	FLAT:?LaunchDelayTime@SimWeaponClass@@UAEHXZ
	DD	FLAT:?UpdateTrail@BombClass@@MAEXXZ
	DD	FLAT:?RemoveTrail@BombClass@@MAEXXZ
	DD	FLAT:?InitTrail@BombClass@@MAEXXZ
	DD	FLAT:?DoExplosion@BombClass@@MAEXXZ
	DD	FLAT:?ExtraGraphics@BombClass@@MAEXXZ
	DD	FLAT:?SpecialGraphics@BombClass@@MAEXXZ
	DD	FLAT:?Start@BombClass@@UAEXPAUvector@@0MPAVSimObjectType@@@Z
	DD	FLAT:?CreateGfx@BombClass@@UAEXXZ
	DD	FLAT:?DestroyGfx@BombClass@@UAEXXZ
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT
??_7out_of_range@std@@6B@ DD FLAT:??_R4out_of_range@std@@6B@ ; std::out_of_range::`vftable'
	DD	FLAT:??_Eout_of_range@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0
__ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$??1BombClass@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1BombClass@@UAE@XZ$0
__unwindtable$??0BombClass@@QAE@HW4BombType@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BombClass@@QAE@HW4BombType@0@@Z$0
__unwindtable$??0BombClass@@QAE@PAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BombClass@@QAE@PAU_iobuf@@@Z$0
__unwindtable$??0BombClass@@QAE@PAPAEPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BombClass@@QAE@PAPAEPAJ@Z$0
__unwindtable$?DoExplosion@BombClass@@MAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DoExplosion@BombClass@@MAEXXZ$0
__unwindtable$?Exec@BombClass@@UAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Exec@BombClass@@UAEHXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Exec@BombClass@@UAEHXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Exec@BombClass@@UAEHXZ$2
__unwindtable$?ApplyProximityDamage@BombClass@@IAEXMM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ApplyProximityDamage@BombClass@@IAEXMM@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ApplyProximityDamage@BombClass@@IAEXMM@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?ApplyProximityDamage@BombClass@@IAEXMM@Z$2
__ehfuncinfo$?Exec@BombClass@@UAEHXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Exec@BombClass@@UAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??1BombClass@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1BombClass@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0BombClass@@QAE@HW4BombType@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0BombClass@@QAE@HW4BombType@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0BombClass@@QAE@PAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0BombClass@@QAE@PAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0BombClass@@QAE@PAPAEPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0BombClass@@QAE@PAPAEPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ApplyProximityDamage@BombClass@@IAEXMM@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?ApplyProximityDamage@BombClass@@IAEXMM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?DoExplosion@BombClass@@MAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DoExplosion@BombClass@@MAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??$?8VFalconEntity@@@@YA_NPBXABV?$VuBin@VFalconEntity@@@@@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_le$ = 8						; size = 4
_re$ = 12						; size = 4
??$?8VFalconEntity@@@@YA_NPBXABV?$VuBin@VFalconEntity@@@@@Z PROC ; operator==<FalconEntity>, COMDAT

; 72   : template <class E> bool operator==(const void* le, const VuBin<E> &re){ return ((void*)re.get()) == le; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	ecx, DWORD PTR _re$[ebp]
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	cmp	eax, DWORD PTR _le$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??$?8VFalconEntity@@@@YA_NPBXABV?$VuBin@VFalconEntity@@@@@Z ENDP ; operator==<FalconEntity>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\team.h
;	COMDAT ?GetColor@TeamClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetColor@TeamClass@@QAEHXZ PROC			; TeamClass::GetColor, COMDAT
; _this$ = ecx

; 329  : 	int GetColor (void)							{ return (int) teamColor; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+889]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetColor@TeamClass@@QAEHXZ ENDP			; TeamClass::GetColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmirec.h
;	COMDAT ?IsRecording@ACMIRecorder@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsRecording@ACMIRecorder@@QAEHXZ PROC			; ACMIRecorder::IsRecording, COMDAT
; _this$ = ecx

; 319  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 320  : 		return _recording;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 321  : 	};

	mov	esp, ebp
	pop	ebp
	ret	0
?IsRecording@ACMIRecorder@@QAEHXZ ENDP			; ACMIRecorder::IsRecording
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?MotionOn@SimulationDriver@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MotionOn@SimulationDriver@@QAEHXZ PROC			; SimulationDriver::MotionOn, COMDAT
; _this$ = ecx

; 98   : 	int MotionOn(void) {return motionOn;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+352]
	mov	esp, ebp
	pop	ebp
	ret	0
?MotionOn@SimulationDriver@@QAEHXZ ENDP			; SimulationDriver::MotionOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?IsAggregate@CampBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAggregate@CampBaseClass@@QAEHXZ PROC			; CampBaseClass::IsAggregate, COMDAT
; _this$ = ecx

; 278  : 	int IsAggregate (void)						{	return local_flags & CBC_AGGREGATE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+156]
	and	eax, 128				; 00000080H
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAggregate@CampBaseClass@@QAEHXZ ENDP			; CampBaseClass::IsAggregate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ PROC ; CampBaseClass::GetComponents, COMDAT
; _this$ = ecx

; 141  : 	TailInsertList *GetComponents() const		{	return components; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+160]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ENDP ; CampBaseClass::GetComponents
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ?memcpychk@@YAXPAXPAPAEIPAJ@Z
_TEXT	SEGMENT
$T2 = -152						; size = 12
_s$3 = -140						; size = 24
_err$4 = -116						; size = 100
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_size$ = 16						; size = 4
_rem$ = 20						; size = 4
?memcpychk@@YAXPAXPAPAEIPAJ@Z PROC			; memcpychk, COMDAT

; 25   : inline void memcpychk(void *dst, VU_BYTE **src, size_t size, long *rem){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 26   : 	if ((size_t)*rem < size){

	mov	eax, DWORD PTR _rem$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@memcpychk

; 27   : 		char err[100];
; 28   : 		sprintf(err, "Trying to write %lu bytes to %ld buffer", static_cast<unsigned long>(size), *rem);

	mov	edx, DWORD PTR _rem$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
	lea	edx, DWORD PTR _err$4[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 29   : 		std::string s(err);

	lea	eax, DWORD PTR _err$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 30   : 		throw InvalidBufferException(s);

	lea	ecx, DWORD PTR _s$3[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
	push	OFFSET __TI4?AVInvalidBufferException@@
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	__CxxThrowException@8

; 31   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@memcpychk:

; 32   : 	memcpy(dst, *src, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 33   : 	*rem -= size;

	mov	ecx, DWORD PTR _rem$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _rem$[ebp]
	mov	DWORD PTR [eax], edx

; 34   : 	*src += size;

	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR [eax], edx
$LN3@memcpychk:

; 35   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0:
	lea	ecx, DWORD PTR _s$3[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?memcpychk@@YAXPAXPAPAEIPAJ@Z ENDP			; memcpychk
; Function compile flags: /Odtp
;	COMDAT ??_GInvalidBufferException@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInvalidBufferException@@UAEPAXI@Z PROC		; InvalidBufferException::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1InvalidBufferException@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GInvalidBufferException@@UAEPAXI@Z ENDP		; InvalidBufferException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0InvalidBufferException@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV0@@Z PROC		; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV0@@Z ENDP		; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1InvalidBufferException@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1InvalidBufferException@@UAE@XZ PROC			; InvalidBufferException::~InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1InvalidBufferException@@UAE@XZ ENDP			; InvalidBufferException::~InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_msg$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx

; 19   : 	InvalidBufferException(const std::string &msg) : out_of_range(msg){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?IsDigital@AircraftClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDigital@AircraftClass@@QAEHXZ PROC			; AircraftClass::IsDigital, COMDAT
; _this$ = ecx

; 385  : 	int IsDigital() { return isDigital; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+948]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDigital@AircraftClass@@QAEHXZ ENDP			; AircraftClass::IsDigital
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ PROC ; AircraftClass::AutopilotType, COMDAT
; _this$ = ecx

; 329  : 	AutoPilotType	AutopilotType (void) {return autopilotType;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+968]
	mov	esp, ebp
	pop	ebp
	ret	0
?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ENDP ; AircraftClass::AutopilotType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\object.h
;	COMDAT ?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ PROC	; SimObjectType::BaseData, COMDAT
; _this$ = ecx

; 92   : 	FalconEntity* BaseData(void) { return baseData.get(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ENDP	; SimObjectType::BaseData
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GBombClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBombClass@@UAEPAXI@Z PROC				; BombClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BombClass@@UAE@XZ			; BombClass::~BombClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBombClass@@UAEPAXI@Z ENDP				; BombClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetJSOWmaxRange@BombClass@@QAEMXZ PROC			; BombClass::GetJSOWmaxRange
; _this$ = ecx

; 1367 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1368 : 	if(auxData)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+832], 0
	je	SHORT $LN2@GetJSOWmax

; 1369 : 		return auxData->JSOWmaxRange;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+832]
	fld	DWORD PTR [edx+52]
	jmp	SHORT $LN1@GetJSOWmax

; 1370 : 	else

	jmp	SHORT $LN1@GetJSOWmax
$LN2@GetJSOWmax:

; 1371 : 		return g_fAIJSOWmaxRange;

	fld	DWORD PTR ?g_fAIJSOWmaxRange@@3MA	; g_fAIJSOWmaxRange
$LN1@GetJSOWmax:

; 1372 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetJSOWmaxRange@BombClass@@QAEMXZ ENDP			; BombClass::GetJSOWmaxRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetJDAMLift@BombClass@@QAEMXZ PROC			; BombClass::GetJDAMLift
; _this$ = ecx

; 1359 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1360 : 	if(auxData)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+832], 0
	je	SHORT $LN2@GetJDAMLif

; 1361 : 		return auxData->JDAMLift;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+832]
	fld	DWORD PTR [edx+48]
	jmp	SHORT $LN1@GetJDAMLif

; 1362 : 	else

	jmp	SHORT $LN1@GetJDAMLif
$LN2@GetJDAMLif:

; 1363 : 		return g_fJDAMLift;

	fld	DWORD PTR ?g_fJDAMLift@@3MA		; g_fJDAMLift
$LN1@GetJDAMLif:

; 1364 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetJDAMLift@BombClass@@QAEMXZ ENDP			; BombClass::GetJDAMLift
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DestroyGfx@BombClass@@UAEXXZ PROC			; BombClass::DestroyGfx
; _this$ = ecx

; 1380 : void BombClass::DestroyGfx(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1381 : 	//SimWeaponClass::DestroyGfx();
; 1382 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DestroyGfx@BombClass@@UAEXXZ ENDP			; BombClass::DestroyGfx
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CreateGfx@BombClass@@UAEXXZ PROC			; BombClass::CreateGfx
; _this$ = ecx

; 1374 : void BombClass::CreateGfx(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1375 : 	//SimWeaponClass::CreateGfx();
; 1376 : 	InitTrail();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+476]
	call	eax

; 1377 : 	ExtraGraphics();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+484]
	call	eax

; 1378 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CreateGfx@BombClass@@UAEXXZ ENDP			; BombClass::CreateGfx
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?IsUseable@BombClass@@UAEHXZ PROC			; BombClass::IsUseable
; _this$ = ecx

; 1349 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1350 : 	if(lauWeaponId)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+812], 0
	je	SHORT $LN2@IsUseable

; 1351 : 	{
; 1352 : 		return ((lauRounds - lauFireCount) > 0); // could be bool'ize

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+804]
	sub	eax, DWORD PTR [edx+820]
	test	eax, eax
	jle	SHORT $LN5@IsUseable
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN6@IsUseable
$LN5@IsUseable:
	mov	DWORD PTR tv70[ebp], 0
$LN6@IsUseable:
	mov	eax, DWORD PTR tv70[ebp]
	jmp	SHORT $LN3@IsUseable

; 1353 : 	}
; 1354 : 	else

	jmp	SHORT $LN3@IsUseable
$LN2@IsUseable:

; 1355 : 		return 1;

	mov	eax, 1
$LN3@IsUseable:

; 1356 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsUseable@BombClass@@UAEHXZ ENDP			; BombClass::IsUseable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\bomb.h
;	COMDAT ?IsBomb@BombClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBomb@BombClass@@UAEHXZ PROC				; BombClass::IsBomb, COMDAT
; _this$ = ecx

; 99   : 	virtual int IsBomb (void) { return TRUE; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBomb@BombClass@@UAEHXZ ENDP				; BombClass::IsBomb
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetVuPosition@BombClass@@UAEXXZ PROC			; BombClass::SetVuPosition
; _this$ = ecx

; 1064 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1065 : 	SetPosition (x, y, z);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+744]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+740]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+736]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPosition@VuEntity@@QAEXMMM@Z	; VuEntity::SetPosition

; 1066 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetVuPosition@BombClass@@UAEXXZ ENDP			; BombClass::SetVuPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newTarget$ = 8						; size = 4
?SetTarget@BombClass@@QAEXPAVSimObjectType@@@Z PROC	; BombClass::SetTarget
; _this$ = ecx

; 1012 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1013 : 	if (F4IsBadReadPtr(this, sizeof(BombClass))) // JB 010317 CTD

	push	836					; 00000344H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@SetTarget

; 1014 : 		return;

	jmp	SHORT $LN5@SetTarget
$LN4@SetTarget:

; 1015 : 
; 1016 : 	if (newTarget == targetPtr)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newTarget$[ebp]
	cmp	eax, DWORD PTR [edx+656]
	jne	SHORT $LN3@SetTarget

; 1017 : 		return;

	jmp	SHORT $LN5@SetTarget
$LN3@SetTarget:

; 1018 : 
; 1019 : 	if ( targetPtr )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+656], 0
	je	SHORT $LN2@SetTarget

; 1020 : 	{
; 1021 : 		targetPtr->Release(  );

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+656]
	call	?Release@SimObjectType@@QAEXXZ		; SimObjectType::Release

; 1022 : 		targetPtr = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+656], 0
$LN2@SetTarget:

; 1023 : 	}
; 1024 : 
; 1025 : 	if (newTarget)

	cmp	DWORD PTR _newTarget$[ebp], 0
	je	SHORT $LN5@SetTarget

; 1026 : 	{
; 1027 : 		ShiAssert( newTarget->BaseData() != (FalconEntity*)0xDDDDDDDD );
; 1028 : 
; 1029 : //#ifdef DEBUG
; 1030 : //		targetPtr = newTarget->Copy(OBJ_TAG, this);
; 1031 : //#else
; 1032 : //		targetPtr = newTarget->Copy();
; 1033 : //#endif
; 1034 : 		targetPtr->Reference(  );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+656]
	call	?Reference@SimObjectType@@QAEXXZ	; SimObjectType::Reference
$LN5@SetTarget:

; 1035 : 	}
; 1036 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetTarget@BombClass@@QAEXPAVSimObjectType@@@Z ENDP	; BombClass::SetTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_trig$ = -72						; size = 8
tv246 = -64						; size = 4
tv228 = -60						; size = 4
tv282 = -56						; size = 4
tv224 = -52						; size = 4
tv278 = -48						; size = 4
tv220 = -44						; size = 4
tv280 = -40						; size = 4
tv216 = -36						; size = 4
tv212 = -32						; size = 4
tv276 = -28						; size = 4
tv208 = -24						; size = 4
_vt$ = -20						; size = 4
_costha$ = -16						; size = 4
_sintha$ = -12						; size = 4
_xyDelta$ = -8						; size = 4
_this$ = -4						; size = 4
_vmat$ = 8						; size = 4
?GetTransform@BombClass@@UAEXQAY02M@Z PROC		; BombClass::GetTransform
; _this$ = ecx

; 1039 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	mov	DWORD PTR _this$[ebp], ecx

; 1040 : 	mlTrig trig;
; 1041 : 	float xyDelta = XDelta()*XDelta() + YDelta()*YDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv208[ebp]
	movss	xmm0, DWORD PTR tv208[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv276[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv212[ebp]
	movss	xmm0, DWORD PTR tv276[ebp]
	mulss	xmm0, DWORD PTR tv212[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv278[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv216[ebp]
	movss	xmm0, DWORD PTR tv216[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv280[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv220[ebp]
	movss	xmm0, DWORD PTR tv280[ebp]
	mulss	xmm0, DWORD PTR tv220[ebp]
	movss	xmm1, DWORD PTR tv278[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _xyDelta$[ebp], xmm1

; 1042 : 	float vt = (float)sqrt(xyDelta + ZDelta()*ZDelta());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv224[ebp]
	movss	xmm0, DWORD PTR tv224[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv282[ebp], xmm0
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv228[ebp]
	movss	xmm0, DWORD PTR tv282[ebp]
	mulss	xmm0, DWORD PTR tv228[ebp]
	addss	xmm0, DWORD PTR _xyDelta$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _vt$[ebp]

; 1043 : 	float costha, sintha;
; 1044 : 
; 1045 : 	xyDelta = (float)sqrt(xyDelta);

	push	ecx
	movss	xmm0, DWORD PTR _xyDelta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _xyDelta$[ebp]

; 1046 : 	mlSinCos (&trig, Yaw());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _trig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 1047 : 	costha = xyDelta / vt;

	movss	xmm0, DWORD PTR _xyDelta$[ebp]
	divss	xmm0, DWORD PTR _vt$[ebp]
	movss	DWORD PTR _costha$[ebp], xmm0

; 1048 : 	sintha = ZDelta() / vt;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv246[ebp]
	movss	xmm0, DWORD PTR tv246[ebp]
	divss	xmm0, DWORD PTR _vt$[ebp]
	movss	DWORD PTR _sintha$[ebp], xmm0

; 1049 : 
; 1050 : 	vmat[0][0] = trig.cos * costha;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	mulss	xmm0, DWORD PTR _costha$[ebp]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	add	ecx, DWORD PTR _vmat$[ebp]
	mov	edx, 4
	imul	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0

; 1051 : 	vmat[0][1] = trig.sin * costha;

	movss	xmm0, DWORD PTR _trig$[ebp]
	mulss	xmm0, DWORD PTR _costha$[ebp]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _vmat$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 1052 : 	vmat[0][2] = -sintha;

	movss	xmm0, DWORD PTR _sintha$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	add	edx, DWORD PTR _vmat$[ebp]
	mov	eax, 4
	shl	eax, 1
	movss	DWORD PTR [edx+eax], xmm0

; 1053 : 
; 1054 : 	vmat[1][0] = -trig.sin;

	movss	xmm0, DWORD PTR _trig$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _vmat$[ebp]
	mov	edx, 4
	imul	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0

; 1055 : 	vmat[1][1] = trig.cos;

	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _vmat$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR [eax+ecx], xmm0

; 1056 : 	vmat[1][2] = 0.0F;

	mov	edx, 12					; 0000000cH
	shl	edx, 0
	add	edx, DWORD PTR _vmat$[ebp]
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+eax], xmm0

; 1057 : 
; 1058 : 	vmat[2][0] = trig.cos * sintha;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	mulss	xmm0, DWORD PTR _sintha$[ebp]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _vmat$[ebp]
	mov	edx, 4
	imul	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0

; 1059 : 	vmat[2][1] = trig.sin * sintha;

	movss	xmm0, DWORD PTR _trig$[ebp]
	mulss	xmm0, DWORD PTR _sintha$[ebp]
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _vmat$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 1060 : 	vmat[2][2] = costha;

	mov	edx, 12					; 0000000cH
	shl	edx, 1
	add	edx, DWORD PTR _vmat$[ebp]
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR _costha$[ebp]
	movss	DWORD PTR [edx+eax], xmm0

; 1061 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetTransform@BombClass@@UAEXQAY02M@Z ENDP		; BombClass::GetTransform
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
$T2 = -1152						; size = 8
$T3 = -1144						; size = 8
$T4 = -1136						; size = 8
$T5 = -1128						; size = 8
$T6 = -1120						; size = 8
$T7 = -1112						; size = 8
$T8 = -1104						; size = 8
_tgg$9 = -1096						; size = 4
tv3641 = -1092						; size = 8
tv3851 = -1084						; size = 8
tv4197 = -1076						; size = 8
tv5124 = -1068						; size = 8
tv4456 = -1060						; size = 8
tv5051 = -1052						; size = 8
tv3876 = -1044						; size = 8
tv4890 = -1036						; size = 8
tv4679 = -1028						; size = 8
_target$10 = -1020					; size = 4
tv3704 = -1016						; size = 4
tv4216 = -1012						; size = 4
tv3700 = -1008						; size = 4
tv3859 = -1004						; size = 4
tv5340 = -1000						; size = 4
tv3942 = -996						; size = 4
tv3695 = -992						; size = 4
tv4243 = -988						; size = 4
_winddx$11 = -984					; size = 4
tv4149 = -980						; size = 4
tv3796 = -976						; size = 4
tv3920 = -972						; size = 4
tv5380 = -968						; size = 4
tv4260 = -964						; size = 4
tv3713 = -960						; size = 4
tv5406 = -956						; size = 4
tv4482 = -952						; size = 4
tv5398 = -948						; size = 4
tv4440 = -944						; size = 4
tv4136 = -940						; size = 4
_wc$12 = -936						; size = 4
tv3928 = -932						; size = 4
tv4371 = -928						; size = 4
tv5384 = -924						; size = 4
tv4348 = -920						; size = 4
tv5342 = -916						; size = 4
tv5412 = -912						; size = 4
tv3772 = -908						; size = 4
tv5452 = -904						; size = 4
tv3722 = -900						; size = 4
tv5304 = -896						; size = 4
tv5416 = -892						; size = 4
tv5300 = -888						; size = 4
tv4478 = -884						; size = 4
tv5450 = -880						; size = 4
tv4420 = -876						; size = 4
tv5295 = -872						; size = 4
tv4391 = -868						; size = 4
tv5291 = -864						; size = 4
_wc$13 = -860						; size = 4
tv5448 = -856						; size = 4
tv4329 = -852						; size = 4
tv5286 = -848						; size = 4
tv4264 = -844						; size = 4
tv5282 = -840						; size = 4
tv3691 = -836						; size = 4
$T14 = -832						; size = 4
tv5404 = -828						; size = 4
tv5446 = -824						; size = 4
tv4220 = -820						; size = 4
tv5180 = -816						; size = 4
tv4211 = -812						; size = 4
tv5155 = -808						; size = 4
tv4154 = -804						; size = 4
tv5145 = -800						; size = 4
tv5394 = -796						; size = 4
tv5444 = -792						; size = 4
tv4031 = -788						; size = 4
tv5139 = -784						; size = 4
tv3937 = -780						; size = 4
tv5015 = -776						; size = 4
tv3924 = -772						; size = 4
tv5009 = -768						; size = 4
tv3916 = -764						; size = 4
tv4956 = -760						; size = 4
tv3898 = -756						; size = 4
tv5442 = -752						; size = 4
_winddy$15 = -748					; size = 4
tv4952 = -744						; size = 4
tv3805 = -740						; size = 4
tv4946 = -736						; size = 4
tv3781 = -732						; size = 4
tv5440 = -728						; size = 4
tv3749 = -724						; size = 4
tv4942 = -720						; size = 4
tv5382 = -716						; size = 4
tv4936 = -712						; size = 4
tv3718 = -708						; size = 4
tv5438 = -704						; size = 4
tv4496 = -700						; size = 4
tv4932 = -696						; size = 4
tv4487 = -692						; size = 4
tv4925 = -688						; size = 4
tv5414 = -684						; size = 4
tv4920 = -680						; size = 4
tv4473 = -676						; size = 4
tv5434 = -672						; size = 4
tv4433 = -668						; size = 4
tv4912 = -664						; size = 4
tv4413 = -660						; size = 4
tv5436 = -656						; size = 4
_classPtr$16 = -652					; size = 4
tv4908 = -648						; size = 4
tv4384 = -644						; size = 4
tv4902 = -640						; size = 4
tv4364 = -636						; size = 4
tv5432 = -632						; size = 4
_classPtr$17 = -628					; size = 4
tv4898 = -624						; size = 4
tv4342 = -620						; size = 4
_newzdelta$18 = -616					; size = 4
tv4274 = -612						; size = 4
tv5428 = -608						; size = 4
tv4270 = -604						; size = 4
tv4867 = -600						; size = 4
tv5410 = -596						; size = 4
tv5430 = -592						; size = 4
tv4254 = -588						; size = 4
tv4857 = -584						; size = 4
tv4250 = -580						; size = 4
tv4851 = -576						; size = 4
tv4238 = -572						; size = 4
tv4845 = -568						; size = 4
tv4230 = -564						; size = 4
tv5424 = -560						; size = 4
tv4226 = -556						; size = 4
tv4838 = -552						; size = 4
tv5402 = -548						; size = 4
tv5426 = -544						; size = 4
tv5400 = -540						; size = 4
tv4834 = -536						; size = 4
tv4207 = -532						; size = 4
tv4830 = -528						; size = 4
tv4158 = -524						; size = 4
tv5422 = -520						; size = 4
tv5396 = -516						; size = 4
tv4826 = -512						; size = 4
tv4145 = -508						; size = 4
tv4770 = -504						; size = 4
tv4140 = -500						; size = 4
tv4764 = -496						; size = 4
$T19 = -492						; size = 4
tv4758 = -488						; size = 4
tv3956 = -484						; size = 4
tv4753 = -480						; size = 4
_vt$ = -476						; size = 4
tv4748 = -472						; size = 4
tv5390 = -468						; size = 4
tv5420 = -464						; size = 4
tv5392 = -460						; size = 4
tv4738 = -456						; size = 4
tv5386 = -452						; size = 4
tv4734 = -448						; size = 4
tv5388 = -444						; size = 4
tv5418 = -440						; size = 4
tv3912 = -436						; size = 4
tv4730 = -432						; size = 4
tv3908 = -428						; size = 4
tv4698 = -424						; size = 4
tv3884 = -420						; size = 4
tv4692 = -416						; size = 4
_lastwinddy$20 = -412					; size = 4
tv4652 = -408						; size = 4
_lastwinddx$21 = -404					; size = 4
tv4645 = -400						; size = 4
tv3827 = -396						; size = 4
tv4632 = -392						; size = 4
tv3800 = -388						; size = 4
tv4625 = -384						; size = 4
tv3790 = -380						; size = 4
_wc$22 = -376						; size = 4
tv3776 = -372						; size = 4
_classPtr$23 = -368					; size = 4
tv3766 = -364						; size = 4
tv4597 = -360						; size = 4
tv3741 = -356						; size = 4
tv4591 = -352						; size = 4
tv3730 = -348						; size = 4
tv4575 = -344						; size = 4
tv3726 = -340						; size = 4
tv4519 = -336						; size = 4
tv5378 = -332						; size = 4
tv4513 = -328						; size = 4
tv5376 = -324						; size = 4
tv4507 = -320						; size = 4
tv3709 = -316						; size = 4
tv4501 = -312						; size = 4
tv5408 = -308						; size = 4
_grav$ = -304						; size = 4
tv1708 = -300						; size = 4
_trigWind$24 = -296					; size = 8
tv5048 = -288						; size = 4
tv3873 = -284						; size = 4
tv925 = -280						; size = 4
tv3848 = -276						; size = 4
tv4676 = -272						; size = 4
_horiz$25 = -268					; size = 4
tv4194 = -264						; size = 4
tv3382 = -260						; size = 4
$T26 = -256						; size = 4
tv3231 = -252						; size = 4
tv4887 = -248						; size = 4
tv3217 = -244						; size = 4
tv1724 = -240						; size = 4
tv3180 = -236						; size = 4
tv4453 = -232						; size = 4
$T27 = -228						; size = 4
tv939 = -224						; size = 4
tv3169 = -220						; size = 4
tv888 = -216						; size = 4
_delta$ = -212						; size = 4
tv877 = -208						; size = 4
tv5121 = -204						; size = 4
tv3637 = -200						; size = 4
_trigPitch$ = -196					; size = 8
_trigYaw$ = -188					; size = 8
_armingdelay$ = -180					; size = 4
_bheight$ = -176					; size = 4
_playerAC$ = -172					; size = 4
_newenergy$28 = -168					; size = 4
_ratx$29 = -164						; size = 4
_raty$30 = -160						; size = 4
_campBaseObj$31 = -156					; size = 4
_wind$32 = -152						; size = 4
_newydelta$33 = -148					; size = 4
_newxdelta$34 = -144					; size = 4
_range$ = -140						; size = 4
_vdrag$35 = -136					; size = 4
_dx$36 = -132						; size = 4
_dy$37 = -128						; size = 4
_desDx$ = -124						; size = 4
_desDy$ = -120						; size = 4
_rz$ = -116						; size = 4
_terrainHeight$ = -112					; size = 4
_parentAC$38 = -108					; size = 4
_ry$ = -104						; size = 4
_radical$ = -100					; size = 4
_deltaZ$ = -96						; size = 4
_rx$ = -92						; size = 4
_deltaY$ = -88						; size = 4
_deltaX$ = -84						; size = 4
_tFall$ = -80						; size = 4
_endMessage$ = -76					; size = 4
_this$ = -72						; size = 4
_genPos$ = -68						; size = 37
_pos$39 = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?Exec@BombClass@@UAEHXZ PROC				; BombClass::Exec
; _this$ = ecx

; 299  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Exec@BombClass@@UAEHXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1140				; 00000474H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 300  : 	// FalconDamageMessage* message;
; 301  : 	float terrainHeight;
; 302  : 	float delta;
; 303  : 	ACMIGenPositionRecord genPos;
; 304  : 	FalconMissileEndMessage* endMessage;
; 305  : 	float radical, tFall, desDx, desDy;
; 306  : 	float deltaX, deltaY, deltaZ, vt;
; 307  : 	float rx, ry, rz, range;
; 308  : 	mlTrig trigYaw, trigPitch;
; 309  : 	float bheight;
; 310  : 	float grav;
; 311  : 	float armingdelay = 0.0f;//me123 done this way to awoid a crash when player dies in matchplay

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _armingdelay$[ebp], xmm0

; 312  : 
; 313  : 	// Debub ==========================
; 314  : 	static FILE *fp = NULL;
; 315  : 	//if (!fp)
; 316  : 	//fp = fopen("g:\\JSOWtrgtFinal.txt", "w");
; 317  : 	//=================================
; 318  : 
; 319  : 
; 320  : 	SoundPos.UpdatePos(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?UpdatePos@F4SoundPos@@QAEXPAVSimBaseClass@@@Z ; F4SoundPos::UpdatePos

; 321  : 
; 322  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 323  : 	if (playerAC && playerAC->IsSetFlag(MOTION_OWNSHIP)){

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	SHORT $LN100@Exec
	push	65536					; 00010000H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN100@Exec

; 324  : 		armingdelay = playerAC->Sms->armingdelay;//me123

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [ecx+940]
	movss	xmm0, DWORD PTR [edx+172]
	movss	DWORD PTR _armingdelay$[ebp], xmm0
$LN100@Exec:

; 325  : 	}
; 326  : 
; 327  : 
; 328  : 	if (IsDead() || (flags & FirstFrame))

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+340]
	call	eax
	test	eax, eax
	jne	SHORT $LN98@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+732]
	and	edx, 1
	je	SHORT $LN99@Exec
$LN98@Exec:

; 329  : 	{
; 330  : 		flags &= ~FirstFrame;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+732]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+732], ecx

; 331  : 		return TRUE;

	mov	eax, 1
	jmp	$LN101@Exec
$LN99@Exec:

; 332  : 	}
; 333  : 
; 334  : 	UpdateTrail();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+468]
	call	eax

; 335  : 
; 336  : 	// ACMI Output
; 337  : 	if (gACMIRec.IsRecording() && (SimLibFrameCount & 0x07 ) == 0)

	mov	ecx, OFFSET ?gACMIRec@@3VACMIRecorder@@A ; gACMIRec
	call	?IsRecording@ACMIRecorder@@QAEHXZ	; ACMIRecorder::IsRecording
	test	eax, eax
	je	$LN93@Exec
	mov	ecx, DWORD PTR ?SimLibFrameCount@@3IA	; SimLibFrameCount
	and	ecx, 7
	jne	$LN93@Exec

; 338  : 	{
; 339  : 		genPos.hdr.time = SimLibElapsedTime * MSEC_TO_SEC + OTWDriver.todOffset;

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR tv3637[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv3637[ebp]
	mov	eax, DWORD PTR tv3637[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv3641[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv3641[ebp]
	mulss	xmm0, DWORD PTR __real@3a83126f
	addss	xmm0, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+32052
	movss	DWORD PTR _genPos$[ebp+1], xmm0

; 340  : 		genPos.data.type = Type();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	ecx, ax
	mov	DWORD PTR _genPos$[ebp+5], ecx

; 341  : 		genPos.data.uniqueID = ACMIIDTable->Add(Id(),NULL,TeamInfo[GetTeam()]->GetColor());//.num_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[eax*4]
	call	?GetColor@TeamClass@@QAEHXZ		; TeamClass::GetColor
	push	eax
	push	0
	lea	ecx, DWORD PTR $T8[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ?ACMIIDTable@@3PAVACMI_Hash@@A ; ACMIIDTable
	call	?Add@ACMI_Hash@@QAEJVVU_ID@@PADJ@Z	; ACMI_Hash::Add
	mov	DWORD PTR _genPos$[ebp+9], eax

; 342  : 		genPos.data.x = XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _genPos$[ebp+13]

; 343  : 		genPos.data.y = YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _genPos$[ebp+17]

; 344  : 		genPos.data.z = ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _genPos$[ebp+21]

; 345  : 		genPos.data.roll = Roll();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR _genPos$[ebp+33]

; 346  : 		genPos.data.pitch = Pitch();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	fstp	DWORD PTR _genPos$[ebp+29]

; 347  : 		genPos.data.yaw = Yaw();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR _genPos$[ebp+25]

; 348  : 
; 349  : 		if ( flags & IsFlare )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+732]
	and	edx, 16					; 00000010H
	je	SHORT $LN96@Exec

; 350  : 			gACMIRec.FlarePositionRecord( (ACMIFlarePositionRecord *)&genPos );

	lea	eax, DWORD PTR _genPos$[ebp]
	push	eax
	mov	ecx, OFFSET ?gACMIRec@@3VACMIRecorder@@A ; gACMIRec
	call	?FlarePositionRecord@ACMIRecorder@@QAEXPAUACMIFlarePositionRecord@@@Z ; ACMIRecorder::FlarePositionRecord
	jmp	SHORT $LN93@Exec
$LN96@Exec:

; 351  : 		else if ( flags & IsChaff )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+732]
	and	edx, 4
	je	SHORT $LN94@Exec

; 352  : 			gACMIRec.ChaffPositionRecord( (ACMIChaffPositionRecord *)&genPos );

	lea	eax, DWORD PTR _genPos$[ebp]
	push	eax
	mov	ecx, OFFSET ?gACMIRec@@3VACMIRecorder@@A ; gACMIRec
	call	?ChaffPositionRecord@ACMIRecorder@@QAEXPAUACMIChaffPositionRecord@@@Z ; ACMIRecorder::ChaffPositionRecord

; 353  : 		else

	jmp	SHORT $LN93@Exec
$LN94@Exec:

; 354  : 			gACMIRec.GenPositionRecord( &genPos );

	lea	ecx, DWORD PTR _genPos$[ebp]
	push	ecx
	mov	ecx, OFFSET ?gACMIRec@@3VACMIRecorder@@A ; gACMIRec
	call	?GenPositionRecord@ACMIRecorder@@QAEXPAUACMIGenPositionRecord@@@Z ; ACMIRecorder::GenPositionRecord
$LN93@Exec:

; 355  : 	}
; 356  : 
; 357  : 	if (!IsLocal())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN92@Exec

; 358  : 	{
; 359  : 		return FALSE;

	xor	eax, eax
	jmp	$LN101@Exec
$LN92@Exec:

; 360  : 	}
; 361  : 
; 362  : 	if(IsExploding())

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+208]
	call	eax
	test	eax, eax
	je	SHORT $LN91@Exec

; 363  : 	{
; 364  : 		DoExplosion();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+480]
	call	eax

; 365  : 		return TRUE;

	mov	eax, 1
	jmp	$LN101@Exec
	jmp	$LN89@Exec
$LN91@Exec:

; 366  : 	}
; 367  : 
; 368  : 	else if (SimDriver.MotionOn())

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?MotionOn@SimulationDriver@@QAEHXZ	; SimulationDriver::MotionOn
	test	eax, eax
	je	$LN89@Exec

; 369  : 	{
; 370  : 		SpecialGraphics();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+488]
	call	eax

; 371  : 
; 372  : 		x = XPos() + XDelta() * SimLibMajorFrameTime;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv3691[ebp]
	movss	xmm0, DWORD PTR tv3691[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5340[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv3695[ebp]
	movss	xmm0, DWORD PTR tv3695[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	movss	xmm1, DWORD PTR tv5340[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+736], xmm1

; 373  : 		y = YPos() + YDelta() * SimLibMajorFrameTime;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv3700[ebp]
	movss	xmm0, DWORD PTR tv3700[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5342[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv3704[ebp]
	movss	xmm0, DWORD PTR tv3704[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	movss	xmm1, DWORD PTR tv5342[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+740], xmm1

; 374  : 		z = ZPos() + ZDelta() * SimLibMajorFrameTime;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv3709[ebp]
	movss	xmm0, DWORD PTR tv3709[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5376[ebp], xmm0
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv3713[ebp]
	movss	xmm0, DWORD PTR tv3713[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	movss	xmm1, DWORD PTR tv5376[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+744], xmm1

; 375  : 
; 376  : 		float dx, dy, ratx, raty, vdrag, horiz;
; 377  : 		//dumb bomb algorithm
; 378  : 		/*y = Tan(theta) * x - (g * x^2)/(2(*v*cos(theta)^2)*/
; 379  : 
; 380  : 		horiz = (float)sqrt( XDelta() * XDelta() + YDelta() * YDelta() + 0.1f);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv3718[ebp]
	movss	xmm0, DWORD PTR tv3718[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5378[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv3722[ebp]
	movss	xmm0, DWORD PTR tv5378[ebp]
	mulss	xmm0, DWORD PTR tv3722[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5380[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv3726[ebp]
	movss	xmm0, DWORD PTR tv3726[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5382[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv3730[ebp]
	movss	xmm0, DWORD PTR tv5382[ebp]
	mulss	xmm0, DWORD PTR tv3730[ebp]
	movss	xmm1, DWORD PTR tv5380[ebp]
	addss	xmm1, xmm0
	addss	xmm1, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _horiz$25[ebp]

; 381  : 		ratx = (float)fabs(XDelta())/horiz;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	push	ecx
	fstp	DWORD PTR [esp]
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv3741[ebp]
	movss	xmm0, DWORD PTR tv3741[ebp]
	divss	xmm0, DWORD PTR _horiz$25[ebp]
	movss	DWORD PTR _ratx$29[ebp], xmm0

; 382  : 		raty = (float)fabs(YDelta())/horiz;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	push	ecx
	fstp	DWORD PTR [esp]
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv3749[ebp]
	movss	xmm0, DWORD PTR tv3749[ebp]
	divss	xmm0, DWORD PTR _horiz$25[ebp]
	movss	DWORD PTR _raty$30[ebp], xmm0

; 383  : 
; 384  : 		// for the 1st sec don't apply drag
; 385  : 		grav = GRAVITY;

	movss	xmm0, DWORD PTR __real@4200b53f
	movss	DWORD PTR _grav$[ebp], xmm0

; 386  : 		if (SimLibElapsedTime - timeOfDeath > 1 * SEC_TO_MSEC )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	edx, DWORD PTR [ecx+288]
	cmp	edx, 1000				; 000003e8H
	jbe	SHORT $LN88@Exec

; 387  : 		{
; 388  : 			vdrag = dragCoeff * dragConstant * SimLibMajorFrameTime;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+724]
	mulss	xmm0, DWORD PTR ?dragConstant@BombClass@@2MA
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	movss	DWORD PTR _vdrag$35[ebp], xmm0

; 389  : 			// super high drag will mean also reduced gravity due to
; 390  : 			// air friction....
; 391  : 			if ( dragCoeff >= 1.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+724]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN87@Exec

; 392  : 				grav = GRAVITY * 0.65F;

	movss	xmm0, DWORD PTR __real@41a75205
	movss	DWORD PTR _grav$[ebp], xmm0
$LN87@Exec:

; 393  : 		}
; 394  : 		else

	jmp	SHORT $LN86@Exec
$LN88@Exec:

; 395  : 		{
; 396  : 			vdrag = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vdrag$35[ebp], xmm0
$LN86@Exec:

; 397  : 		}
; 398  : 
; 399  : 		if ( fabs( XDelta() ) < vdrag * ratx)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	push	ecx
	fstp	DWORD PTR [esp]
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv3766[ebp]
	movss	xmm0, DWORD PTR _vdrag$35[ebp]
	mulss	xmm0, DWORD PTR _ratx$29[ebp]
	comiss	xmm0, DWORD PTR tv3766[ebp]
	jbe	SHORT $LN85@Exec

; 400  : 		{
; 401  : 			dx = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dx$36[ebp], xmm0

; 402  : 		}
; 403  : 		else

	jmp	$LN82@Exec
$LN85@Exec:

; 404  : 		{
; 405  : 			if ( XDelta() > 0.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv3772[ebp]
	movss	xmm0, DWORD PTR tv3772[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN83@Exec

; 406  : 				dx = XDelta() - vdrag * ratx;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv3776[ebp]
	movss	xmm0, DWORD PTR tv3776[ebp]
	movss	xmm1, DWORD PTR _vdrag$35[ebp]
	mulss	xmm1, DWORD PTR _ratx$29[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _dx$36[ebp], xmm0

; 407  : 			else

	jmp	SHORT $LN82@Exec
$LN83@Exec:

; 408  : 				dx = XDelta() + vdrag * ratx;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv3781[ebp]
	movss	xmm0, DWORD PTR tv3781[ebp]
	movss	xmm1, DWORD PTR _vdrag$35[ebp]
	mulss	xmm1, DWORD PTR _ratx$29[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _dx$36[ebp], xmm0
$LN82@Exec:

; 409  : 		}
; 410  : 		if ( fabs( YDelta() ) < vdrag * raty)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	push	ecx
	fstp	DWORD PTR [esp]
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv3790[ebp]
	movss	xmm0, DWORD PTR _vdrag$35[ebp]
	mulss	xmm0, DWORD PTR _raty$30[ebp]
	comiss	xmm0, DWORD PTR tv3790[ebp]
	jbe	SHORT $LN81@Exec

; 411  : 		{
; 412  : 			dy = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dy$37[ebp], xmm0

; 413  : 		}
; 414  : 		else

	jmp	SHORT $LN78@Exec
$LN81@Exec:

; 415  : 		{
; 416  : 			if ( YDelta() > 0.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv3796[ebp]
	movss	xmm0, DWORD PTR tv3796[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN79@Exec

; 417  : 				dy = YDelta() - vdrag * raty;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv3800[ebp]
	movss	xmm0, DWORD PTR tv3800[ebp]
	movss	xmm1, DWORD PTR _vdrag$35[ebp]
	mulss	xmm1, DWORD PTR _raty$30[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _dy$37[ebp], xmm0

; 418  : 			else

	jmp	SHORT $LN78@Exec
$LN79@Exec:

; 419  : 				dy = YDelta() + vdrag * raty;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv3805[ebp]
	movss	xmm0, DWORD PTR tv3805[ebp]
	movss	xmm1, DWORD PTR _vdrag$35[ebp]
	mulss	xmm1, DWORD PTR _raty$30[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _dy$37[ebp], xmm0
$LN78@Exec:

; 420  : 		}
; 421  : 		//me123 lets add the wind change effect to the bomb fall
; 422  : 		//MI.... check for our variable...
; 423  : 		if(g_bEnableWindsAloft)

	movzx	edx, BYTE PTR ?g_bEnableWindsAloft@@3_NA ; g_bEnableWindsAloft
	test	edx, edx
	je	$LN77@Exec

; 424  : 		{
; 425  : 			mlTrig trigWind;
; 426  : 			float wind;
; 427  : 			Tpoint			pos;
; 428  : 			pos.x = x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+736]
	movss	DWORD PTR _pos$39[ebp], xmm0

; 429  : 			pos.y =y;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+740]
	movss	DWORD PTR _pos$39[ebp+4], xmm0

; 430  : 			pos.z = z;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+744]
	movss	DWORD PTR _pos$39[ebp+8], xmm0

; 431  : 
; 432  : 			// current wind
; 433  : 			mlSinCos(&trigWind, ((WeatherClass*)realWeather)->WindHeadingAt(&pos));

	lea	eax, DWORD PTR _pos$39[ebp]
	push	eax
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?WindHeadingAt@WeatherClass@@QAEMPBUTpoint@@@Z ; WeatherClass::WindHeadingAt
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _trigWind$24[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 434  : 			wind =  ((WeatherClass*)realWeather)->WindSpeedInFeetPerSecond(&pos);

	lea	edx, DWORD PTR _pos$39[ebp]
	push	edx
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?WindSpeedInFeetPerSecond@WeatherClass@@QAEMPBUTpoint@@@Z ; WeatherClass::WindSpeedInFeetPerSecond
	fstp	DWORD PTR _wind$32[ebp]

; 435  : 			float winddx = trigWind.cos * wind;

	movss	xmm0, DWORD PTR _trigWind$24[ebp+4]
	mulss	xmm0, DWORD PTR _wind$32[ebp]
	movss	DWORD PTR _winddx$11[ebp], xmm0

; 436  : 			float winddy = trigWind.sin * wind;

	movss	xmm0, DWORD PTR _trigWind$24[ebp]
	mulss	xmm0, DWORD PTR _wind$32[ebp]
	movss	DWORD PTR _winddy$15[ebp], xmm0

; 437  : 
; 438  : 			//the wind last time we checked
; 439  : 			pos.z = z -ZDelta() * SimLibMajorFrameTime;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv3827[ebp]
	movss	xmm0, DWORD PTR tv3827[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+744]
	subss	xmm1, xmm0
	movss	DWORD PTR _pos$39[ebp+8], xmm1

; 440  : 			mlSinCos(&trigWind, ((WeatherClass*)realWeather)->WindHeadingAt(&pos));

	lea	ecx, DWORD PTR _pos$39[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?WindHeadingAt@WeatherClass@@QAEMPBUTpoint@@@Z ; WeatherClass::WindHeadingAt
	push	ecx
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _trigWind$24[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 441  : 			wind =  ((WeatherClass*)realWeather)->WindSpeedInFeetPerSecond(&pos);

	lea	eax, DWORD PTR _pos$39[ebp]
	push	eax
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?WindSpeedInFeetPerSecond@WeatherClass@@QAEMPBUTpoint@@@Z ; WeatherClass::WindSpeedInFeetPerSecond
	fstp	DWORD PTR _wind$32[ebp]

; 442  : 			float lastwinddx = trigWind.cos * wind;

	movss	xmm0, DWORD PTR _trigWind$24[ebp+4]
	mulss	xmm0, DWORD PTR _wind$32[ebp]
	movss	DWORD PTR _lastwinddx$21[ebp], xmm0

; 443  : 			float lastwinddy = trigWind.sin * wind;

	movss	xmm0, DWORD PTR _trigWind$24[ebp]
	mulss	xmm0, DWORD PTR _wind$32[ebp]
	movss	DWORD PTR _lastwinddy$20[ebp], xmm0

; 444  : 
; 445  : 			//factor in the change
; 446  : 			dx += (winddx-lastwinddx)*0.9f;//not all the wind since no inertie is factored in

	movss	xmm0, DWORD PTR _winddx$11[ebp]
	subss	xmm0, DWORD PTR _lastwinddx$21[ebp]
	mulss	xmm0, DWORD PTR __real@3f666666
	addss	xmm0, DWORD PTR _dx$36[ebp]
	movss	DWORD PTR _dx$36[ebp], xmm0

; 447  : 			dy += (winddy-lastwinddy)*0.9f;//not all the wind since no inertie is factored in

	movss	xmm0, DWORD PTR _winddy$15[ebp]
	subss	xmm0, DWORD PTR _lastwinddy$20[ebp]
	mulss	xmm0, DWORD PTR __real@3f666666
	addss	xmm0, DWORD PTR _dy$37[ebp]
	movss	DWORD PTR _dy$37[ebp], xmm0
$LN77@Exec:

; 448  : 		}
; 449  : 
; 450  : 
; 451  : 		// SetDelta (XDelta(), YDelta(), ZDelta() + GRAVITY * SimLibMajorFrameTime);
; 452  : 
; 453  : 		// RV - Biker - Give some extra high gravity for the first ms
; 454  : 		//SetDelta (dx, dy, ZDelta() + grav * SimLibMajorFrameTime);
; 455  : 		if ((SimLibElapsedTime - timeOfDeath) <= (0.25f * SEC_TO_MSEC))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	edx, DWORD PTR [ecx+288]
	mov	DWORD PTR tv3848[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv3848[ebp]
	mov	eax, DWORD PTR tv3848[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv3851[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv3851[ebp]
	movss	xmm1, DWORD PTR __real@437a0000
	comiss	xmm1, xmm0
	jb	SHORT $LN76@Exec

; 456  : 			SetDelta (XDelta(), YDelta(), ZDelta() + GRAVITY * SimLibMajorFrameTime * 2.0f);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv3859[ebp]
	movss	xmm0, DWORD PTR tv3859[ebp]
	movss	xmm1, DWORD PTR __real@4200b53f
	mulss	xmm1, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta
	jmp	$LN73@Exec
$LN76@Exec:

; 457  : 		else if((SimLibElapsedTime - timeOfDeath) <= (2.0f * SEC_TO_MSEC))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	edx, DWORD PTR [ecx+288]
	mov	DWORD PTR tv3873[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv3873[ebp]
	mov	eax, DWORD PTR tv3873[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv3876[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv3876[ebp]
	movss	xmm1, DWORD PTR __real@44fa0000
	comiss	xmm1, xmm0
	jb	SHORT $LN74@Exec

; 458  : 			SetDelta (XDelta(), YDelta(), ZDelta() + GRAVITY * SimLibMajorFrameTime);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv3884[ebp]
	movss	xmm0, DWORD PTR tv3884[ebp]
	movss	xmm1, DWORD PTR __real@4200b53f
	mulss	xmm1, DWORD PTR ?SimLibMajorFrameTime@@3MA
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta

; 459  : 		else

	jmp	SHORT $LN73@Exec
$LN74@Exec:

; 460  : 			SetDelta (dx, dy, ZDelta() + grav * SimLibMajorFrameTime);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv3898[ebp]
	movss	xmm0, DWORD PTR tv3898[ebp]
	movss	xmm1, DWORD PTR _grav$[ebp]
	mulss	xmm1, DWORD PTR ?SimLibMajorFrameTime@@3MA
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dy$37[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dx$36[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta
$LN73@Exec:

; 461  : 		vt = (float)sqrt(XDelta()*XDelta() + YDelta()*YDelta() + ZDelta()*ZDelta());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv3908[ebp]
	movss	xmm0, DWORD PTR tv3908[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5384[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv3912[ebp]
	movss	xmm0, DWORD PTR tv5384[ebp]
	mulss	xmm0, DWORD PTR tv3912[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5386[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv3916[ebp]
	movss	xmm0, DWORD PTR tv3916[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5388[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv3920[ebp]
	movss	xmm0, DWORD PTR tv5388[ebp]
	mulss	xmm0, DWORD PTR tv3920[ebp]
	movss	xmm1, DWORD PTR tv5386[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5390[ebp], xmm1
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv3924[ebp]
	movss	xmm0, DWORD PTR tv3924[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5392[ebp], xmm0
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv3928[ebp]
	movss	xmm0, DWORD PTR tv5392[ebp]
	mulss	xmm0, DWORD PTR tv3928[ebp]
	movss	xmm1, DWORD PTR tv5390[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _vt$[ebp]

; 462  : 		SetYPR ((float)atan2 (YDelta(), XDelta()), -(float)asin(ZDelta() / vt), Roll());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv3937[ebp]
	movss	xmm0, DWORD PTR tv3937[ebp]
	divss	xmm0, DWORD PTR _vt$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?asin@@YAMM@Z				; asin
	add	esp, 4
	fstp	DWORD PTR tv3942[ebp]
	movss	xmm0, DWORD PTR tv3942[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv3956[ebp]
	fld	DWORD PTR tv3956[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetYPR@VuEntity@@QAEXMMM@Z		; VuEntity::SetYPR

; 463  : 
; 464  : 		// NOTE:  Yaw never changes, so we could avoid much of this...
; 465  : 		mlSinCos (&trigYaw, Yaw());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _trigYaw$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 466  : 		mlSinCos (&trigPitch, Pitch());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	push	ecx
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _trigPitch$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 467  : 
; 468  : 		dmx[0][0] = trigYaw.cos * trigPitch.cos;

	movss	xmm0, DWORD PTR _trigYaw$[ebp+4]
	mulss	xmm0, DWORD PTR _trigPitch$[ebp+4]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	DWORD PTR [edx+eax], xmm0

; 469  : 		dmx[0][1] = trigYaw.sin * trigPitch.cos;

	movss	xmm0, DWORD PTR _trigYaw$[ebp]
	mulss	xmm0, DWORD PTR _trigPitch$[ebp+4]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 470  : 		dmx[0][2] = -trigPitch.sin;

	movss	xmm0, DWORD PTR _trigPitch$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR [ecx+edx], xmm0

; 471  : 
; 472  : 		dmx[1][0] = -trigYaw.sin;

	movss	xmm0, DWORD PTR _trigYaw$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	DWORD PTR [edx+eax], xmm0

; 473  : 		dmx[1][1] = trigYaw.cos;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR _trigYaw$[ebp+4]
	movss	DWORD PTR [eax+ecx], xmm0

; 474  : 		dmx[1][2] = 0.0F;

	mov	edx, 12					; 0000000cH
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0

; 475  : 
; 476  : 		dmx[2][0] = trigYaw.cos * trigPitch.sin;

	movss	xmm0, DWORD PTR _trigYaw$[ebp+4]
	mulss	xmm0, DWORD PTR _trigPitch$[ebp]
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	DWORD PTR [edx+eax], xmm0

; 477  : 		dmx[2][1] = trigYaw.sin * trigPitch.sin;

	movss	xmm0, DWORD PTR _trigYaw$[ebp]
	mulss	xmm0, DWORD PTR _trigPitch$[ebp]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 478  : 		dmx[2][2] = trigPitch.cos;

	mov	edx, 12					; 0000000cH
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR _trigPitch$[ebp+4]
	movss	DWORD PTR [ecx+edx], xmm0

; 479  : 
; 480  : 		// special case durandal -- when fired remove chute
; 481  : 		if ( (flags & IsDurandal) &&
; 482  : 				(flags & FireDurandal) &&
; 483  : 				drawPointer &&
; 484  : 				((DrawableBSP*)drawPointer)->GetNumSwitches() > 0 )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+732]
	and	ecx, 64					; 00000040H
	je	SHORT $LN72@Exec
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+732]
	and	eax, 128				; 00000080H
	je	SHORT $LN72@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+332], 0
	je	SHORT $LN72@Exec
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+332]
	call	?GetNumSwitches@DrawableBSP@@QAEHXZ	; DrawableBSP::GetNumSwitches
	test	eax, eax
	jle	SHORT $LN72@Exec

; 485  : 		{
; 486  : 			((DrawableBSP *)drawPointer)->SetSwitchMask( 0, 0 );

	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask
$LN72@Exec:

; 487  : 		}
; 488  : 
; 489  : 		// special case durandal.  If x and y vel reaches 0 we fire it
; 490  : 		// by starting the special effect
; 491  : 		if ( (flags & IsDurandal) &&
; 492  : 				!(flags & FireDurandal) &&
; 493  : 				dx == 0.0f &&
; 494  : 				dy == 0.0f )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+732]
	and	edx, 64					; 00000040H
	je	$LN71@Exec
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+732]
	and	ecx, 128				; 00000080H
	jne	$LN71@Exec
	movss	xmm0, DWORD PTR _dx$36[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	$LN71@Exec
	movss	xmm0, DWORD PTR _dy$37[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	$LN71@Exec

; 495  : 		{
; 496  : 			flags |= FireDurandal;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+732]
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+732], eax

; 497  : 
; 498  : 			// accelerate towards ground
; 499  : 			SetDelta (dx, dy, ZDelta() + 500.0f);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv4031[ebp]
	movss	xmm0, DWORD PTR tv4031[ebp]
	addss	xmm0, DWORD PTR __real@43fa0000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dy$37[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dx$36[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta

; 500  : 			endMessage = new FalconMissileEndMessage (Id(), FalconLocalGame);

	push	285					; 0000011dH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T26[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T26[ebp], 0
	je	SHORT $LN105@Exec
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN103@Exec
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv877[ebp], eax
	jmp	SHORT $LN104@Exec
$LN103@Exec:
	mov	DWORD PTR tv877[ebp], 0
$LN104@Exec:
	push	1
	mov	eax, DWORD PTR tv877[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR $T26[ebp]
	call	??0FalconMissileEndMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconMissileEndMessage::FalconMissileEndMessage
	mov	DWORD PTR tv888[ebp], eax
	jmp	SHORT $LN106@Exec
$LN105@Exec:
	mov	DWORD PTR tv888[ebp], 0
$LN106@Exec:
	mov	ecx, DWORD PTR tv888[ebp]
	mov	DWORD PTR $T19[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T19[ebp]
	mov	DWORD PTR _endMessage$[ebp], edx

; 501  : 			endMessage->RequestReliableTransmit ();

	mov	ecx, DWORD PTR _endMessage$[ebp]
	call	?RequestReliableTransmit@VuMessage@@QAEXXZ ; VuMessage::RequestReliableTransmit

; 502  : 			endMessage->RequestOutOfBandTransmit ();

	mov	ecx, DWORD PTR _endMessage$[ebp]
	call	?RequestOutOfBandTransmit@VuMessage@@QAEXXZ ; VuMessage::RequestOutOfBandTransmit

; 503  : 			endMessage->dataBlock.fEntityID  = parent->Id();

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	DWORD PTR [eax+63], ecx
	mov	DWORD PTR [eax+67], edx

; 504  : 			endMessage->dataBlock.fCampID    = parent->GetCampID();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	DWORD PTR tv925[ebp], eax
	mov	ecx, DWORD PTR tv925[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv925[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	WORD PTR [ecx+71], ax

; 505  : 			endMessage->dataBlock.fSide      = parent->GetCountry();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	DWORD PTR tv939[ebp], eax
	mov	edx, DWORD PTR tv939[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv939[ebp]
	mov	edx, DWORD PTR [eax+120]
	call	edx
	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [ecx+77], al

; 506  : 			endMessage->dataBlock.fPilotID   = (uchar)shooterPilotSlot;

	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+680]
	mov	BYTE PTR [edx+73], cl

; 507  : 			endMessage->dataBlock.fIndex     = parent->Type();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	WORD PTR [edx+75], ax

; 508  : 			endMessage->dataBlock.dEntityID  = FalconNullId;

	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax+48], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+52], edx

; 509  : 			endMessage->dataBlock.dCampID    = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	WORD PTR [ecx+56], ax

; 510  : 			endMessage->dataBlock.dSide      = 0;

	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [edx+62], 0

; 511  : 			endMessage->dataBlock.dPilotID   = 0;

	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [eax+58], 0

; 512  : 			endMessage->dataBlock.dIndex     = 0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	WORD PTR [edx+60], cx

; 513  : 			endMessage->dataBlock.fWeaponUID = Id();

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	DWORD PTR [eax+82], ecx
	mov	DWORD PTR [eax+86], edx

; 514  : 			endMessage->dataBlock.wIndex 	 = Type();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	WORD PTR [ecx+115], ax

; 515  : 			endMessage->dataBlock.x    = XPos() + XDelta() * SimLibMajorFrameTime * 2.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv4136[ebp]
	movss	xmm0, DWORD PTR tv4136[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5394[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv4140[ebp]
	movss	xmm0, DWORD PTR tv4140[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv5394[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _endMessage$[ebp]
	movss	DWORD PTR [edx+90], xmm1

; 516  : 			endMessage->dataBlock.y    = YPos() + YDelta() * SimLibMajorFrameTime * 2.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv4145[ebp]
	movss	xmm0, DWORD PTR tv4145[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5396[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv4149[ebp]
	movss	xmm0, DWORD PTR tv4149[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv5396[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _endMessage$[ebp]
	movss	DWORD PTR [eax+94], xmm1

; 517  : 			endMessage->dataBlock.z    = ZPos() + ZDelta() * SimLibMajorFrameTime * 2.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4154[ebp]
	movss	xmm0, DWORD PTR tv4154[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5398[ebp], xmm0
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv4158[ebp]
	movss	xmm0, DWORD PTR tv4158[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv5398[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _endMessage$[ebp]
	movss	DWORD PTR [ecx+98], xmm1

; 518  : 			endMessage->dataBlock.xDelta    = XDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	mov	edx, DWORD PTR _endMessage$[ebp]
	fstp	DWORD PTR [edx+102]

; 519  : 			endMessage->dataBlock.yDelta    = YDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	mov	eax, DWORD PTR _endMessage$[ebp]
	fstp	DWORD PTR [eax+106]

; 520  : 			endMessage->dataBlock.zDelta    = ZDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	mov	ecx, DWORD PTR _endMessage$[ebp]
	fstp	DWORD PTR [ecx+110]

; 521  : 			endMessage->dataBlock.groundType    = -1;

	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [edx+114], -1

; 522  : 			endMessage->dataBlock.endCode    = FalconMissileEndMessage::BombImpact;

	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	DWORD PTR [eax+78], 11			; 0000000bH

; 523  : 
; 524  : 			endMessage->SetParticleEffectName(auxData->psBombImpact); // MLR 6/26/2004 - 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+832]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _endMessage$[ebp]
	call	?SetParticleEffectName@FalconMissileEndMessage@@QAEXPAD@Z ; FalconMissileEndMessage::SetParticleEffectName

; 525  : 
; 526  : 			FalconSendMessage (endMessage,FALSE);

	push	0
	mov	ecx, DWORD PTR _endMessage$[ebp]
	push	ecx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN71@Exec:

; 527  : 		}
; 528  : 
; 529  : 		/////////////  - RED - ************* 
; 530  : 		//MI for refined LGB stuff
; 531  : 		// 2002-01-06 MODIFIED BY S.G. 
; 532  : 		// In the odd chance that there is no parent, neither this or the 
; 533  : 		// realistic section would be ran. If no parent, run this
; 534  : 		// There is no danger of a CTD if parent is NULL because the 
; 535  : 		// OR will have it enter the if statement without running the 'IsPlayer'.
; 536  : 		//	  if(!g_bRealisticAvionics || ( parent && !((AircraftClass *)parent)->IsPlayer()))
; 537  : 		// Cobra - Forcing all non-Player (AI) into this section causes their bombs 
; 538  : 		// to not be guided, thus randon hit pattern
; 539  : 		//	  if(!g_bRealisticAvionics || !parent)
; 540  : 		/////////////////////////////////////////////////////
; 541  : 
; 542  : 		// RED -  enough enter when it's not a guided Bomb or LGB for AI 
; 543  : 		// ( the targeting sysem would CTD if AI managed by player code,
; 544  : 		// As the PlayerEntity is not the one to use )
; 545  : 		if (
; 546  : 			!g_bRealisticAvionics || !parent || !(flags & GUIDED_BOMB) 
; 547  : 					|| ((((!((AircraftClass *)parent.get())->IsPlayer())
; 548  : 					|| (((AircraftClass *)parent.get())->IsPlayer()) 
; 549  : 					&& ((AircraftClass *)parent.get())->AutopilotType() == AircraftClass::CombatAP)) 
; 550  : 					&& (flags & IsLGB))
; 551  : 		){

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	$LN69@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??7?$VuBin@VFalconEntity@@@@QBE_NXZ	; VuBin<FalconEntity>::operator!
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN69@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+732]
	and	edx, 800				; 00000320H
	je	SHORT $LN69@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	ecx, eax
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN68@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	ecx, eax
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	$LN70@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	ecx, eax
	call	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
	cmp	eax, 2
	jne	$LN70@Exec
$LN68@Exec:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+732]
	and	ecx, 32					; 00000020H
	je	$LN70@Exec
$LN69@Exec:

; 552  : 			// RV - Biker - Add 2.0 sec delay for guidance
; 553  : 			if (flags & IsLGB && (SimLibElapsedTime - timeOfDeath) > (2.0f * SEC_TO_MSEC)){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+732]
	and	eax, 32					; 00000020H
	je	$LN53@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	edx, DWORD PTR [ecx+288]
	mov	DWORD PTR tv4194[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv4194[ebp]
	mov	eax, DWORD PTR tv4194[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv4197[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv4197[ebp]
	comiss	xmm0, DWORD PTR __real@44fa0000
	jbe	$LN53@Exec

; 554  : 				if (targetPtr){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+656], 0
	je	$LN66@Exec

; 555  : 					// JPO - target might be higher than us...
; 556  : 					if (targetPtr->BaseData()->ZPos() <= ZPos()) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+656]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4207[ebp]
	movss	xmm0, DWORD PTR tv4207[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5400[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4211[ebp]
	movss	xmm0, DWORD PTR tv4211[ebp]
	movss	xmm1, DWORD PTR tv5400[ebp]
	comiss	xmm0, xmm1
	jb	SHORT $LN65@Exec

; 557  : 						radical = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _radical$[ebp], xmm0

; 558  : 					} 
; 559  : 					else {

	jmp	$LN64@Exec
$LN65@Exec:

; 560  : 						radical = (float)sqrt (ZDelta()*ZDelta() + 2.0F * GRAVITY * (targetPtr->BaseData()->ZPos() - ZPos()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv4216[ebp]
	movss	xmm0, DWORD PTR tv4216[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5402[ebp], xmm0
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv4220[ebp]
	movss	xmm0, DWORD PTR tv5402[ebp]
	mulss	xmm0, DWORD PTR tv4220[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	movss	DWORD PTR tv5404[ebp], xmm0
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4226[ebp]
	movss	xmm0, DWORD PTR tv4226[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5406[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4230[ebp]
	movss	xmm0, DWORD PTR tv5406[ebp]
	subss	xmm0, DWORD PTR tv4230[ebp]
	mulss	xmm0, DWORD PTR __real@4280b53f
	movss	xmm1, DWORD PTR tv5404[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _radical$[ebp]
$LN64@Exec:

; 561  : 					}
; 562  : 					tFall = -ZDelta() - radical;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv4238[ebp]
	movss	xmm0, DWORD PTR tv4238[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm0, DWORD PTR _radical$[ebp]
	movss	DWORD PTR _tFall$[ebp], xmm0

; 563  : 					if (tFall < 0.0F)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _tFall$[ebp]
	jbe	SHORT $LN63@Exec

; 564  : 						tFall = -ZDelta() + radical;			 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv4243[ebp]
	movss	xmm0, DWORD PTR tv4243[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	addss	xmm0, DWORD PTR _radical$[ebp]
	movss	DWORD PTR _tFall$[ebp], xmm0
$LN63@Exec:

; 565  : 					tFall /= GRAVITY;

	movss	xmm0, DWORD PTR _tFall$[ebp]
	divss	xmm0, DWORD PTR __real@4200b53f
	movss	DWORD PTR _tFall$[ebp], xmm0

; 566  : 
; 567  : 					deltaX = targetPtr->BaseData()->XPos() - XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+656]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv4250[ebp]
	movss	xmm0, DWORD PTR tv4250[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5408[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv4254[ebp]
	movss	xmm0, DWORD PTR tv5408[ebp]
	subss	xmm0, DWORD PTR tv4254[ebp]
	movss	DWORD PTR _deltaX$[ebp], xmm0

; 568  : 					deltaY = targetPtr->BaseData()->YPos() - YPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+656]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv4260[ebp]
	movss	xmm0, DWORD PTR tv4260[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5410[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv4264[ebp]
	movss	xmm0, DWORD PTR tv5410[ebp]
	subss	xmm0, DWORD PTR tv4264[ebp]
	movss	DWORD PTR _deltaY$[ebp], xmm0

; 569  : 					deltaZ = (float)fabs(targetPtr->BaseData()->ZPos() - ZPos());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4270[ebp]
	movss	xmm0, DWORD PTR tv4270[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5412[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4274[ebp]
	movss	xmm0, DWORD PTR tv5412[ebp]
	subss	xmm0, DWORD PTR tv4274[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _deltaZ$[ebp]

; 570  : 
; 571  : 					rx    = dmx[0][0] * deltaX + dmx[0][1] * deltaY + dmx[0][2] * deltaZ;

	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _deltaX$[ebp]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _deltaY$[ebp]
	addss	xmm0, xmm1
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _deltaZ$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 572  : 					ry    = dmx[1][0] * deltaX + dmx[1][1] * deltaY + dmx[1][2] * deltaZ;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _deltaX$[ebp]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _deltaY$[ebp]
	addss	xmm0, xmm1
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _deltaZ$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 573  : 					rz    = dmx[2][0] * deltaX + dmx[2][1] * deltaY + dmx[2][2] * deltaZ;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _deltaX$[ebp]
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _deltaY$[ebp]
	addss	xmm0, xmm1
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _deltaZ$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rz$[ebp], xmm0

; 574  : 					range = (float)sqrt(rx*rx + ry*ry + rz*rz);

	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR _rx$[ebp]
	movss	xmm1, DWORD PTR _ry$[ebp]
	mulss	xmm1, DWORD PTR _ry$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _rz$[ebp]
	mulss	xmm1, DWORD PTR _rz$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _range$[ebp]

; 575  : 
; 576  : 					// 45 degree limit on the seeker
; 577  : 					// 2001-04-17 MODIFIED BY S.G. AGAIN, THEY MIXE UP DEGREES AND RADIAN BUT THIS TIME, THE OTHER WAY AROUND...
; 578  : 					//            PLUS THEY FORGOT THAT atan2 RETURNS A SIGNED VALUE
; 579  : 					//            END THEN, range-rx * rx is range - rx*rx which is ALWAYS NEGATIVE. CAN'T TAKE A SQUARE ROOT OF A NEGATIVE NUMBER. I'VE CODED WHAT I *THINK* THEY WERE TRYING TO DO...
; 580  : 					//				  if (atan2(sqrt(range-rx * rx),rx) < 45.0F * RTD)
; 581  : 					//JAM 17Apr04 - This is what they were trying to do buddy :)
; 582  : 					if(Abs(acosf(rx/range)) <= 45.f*DTR)

	movss	xmm0, DWORD PTR _rx$[ebp]
	divss	xmm0, DWORD PTR _range$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_acosf
	fstp	DWORD PTR [esp]
	call	??$Abs@M@@YAMM@Z			; Abs<float>
	add	esp, 4
	fstp	DWORD PTR tv4329[ebp]
	movss	xmm0, DWORD PTR __real@3f490fd9
	comiss	xmm0, DWORD PTR tv4329[ebp]
	jb	$LN62@Exec

; 583  : 						//				  if (fabs(atan2(sqrt(range*range - rx*rx),rx)) < 45.0F * DTR)
; 584  : 					{
; 585  : 						desDx = (deltaX)/tFall;

	movss	xmm0, DWORD PTR _deltaX$[ebp]
	divss	xmm0, DWORD PTR _tFall$[ebp]
	movss	DWORD PTR _desDx$[ebp], xmm0

; 586  : 						desDy = (deltaY)/tFall;

	movss	xmm0, DWORD PTR _deltaY$[ebp]
	divss	xmm0, DWORD PTR _tFall$[ebp]
	movss	DWORD PTR _desDy$[ebp], xmm0

; 587  : 						// 2001-04-17 ADDED BY S.G. WE'LL KEEP OUR LAST desDx and desDy IN THE UNUSED tgtX and tgtY BombClass VARIABLE (RENAMED desDxPrev AND desDyPrev) TO IN CASE WE LOOSE LOCK LATER
; 588  : 						desDxPrev = desDx;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _desDx$[ebp]
	movss	DWORD PTR [ecx+704], xmm0

; 589  : 						desDyPrev = desDy;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _desDy$[ebp]
	movss	DWORD PTR [edx+708], xmm0

; 590  : 						// END OF ADDED SECTION
; 591  : 						SetDelta (0.8F*XDelta() + 0.2F*desDx, 0.8F*YDelta() + 0.2F*desDy, ZDelta());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv4342[ebp]
	movss	xmm0, DWORD PTR tv4342[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	movss	xmm1, DWORD PTR __real@3e4ccccd
	mulss	xmm1, DWORD PTR _desDy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv4348[ebp]
	movss	xmm0, DWORD PTR tv4348[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	movss	xmm1, DWORD PTR __real@3e4ccccd
	mulss	xmm1, DWORD PTR _desDx$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta
	jmp	$LN58@Exec
$LN62@Exec:

; 592  : 					}
; 593  : 					// 2002-01-05 ADDED BY S.G. Similarly to below. if the lgb cannot see the laser, it can't guide (forgot to do this).
; 594  : 					else if (g_bRP5Comp) 

	movzx	eax, BYTE PTR ?g_bRP5Comp@@3_NA		; g_bRP5Comp
	test	eax, eax
	je	$LN58@Exec

; 595  : 					{
; 596  : 						// 2001-04-17 ADDED BY S.G. WE'LL KEEP GOING WHERE WE WERE GOING...
; 597  : 						Falcon4EntityClassType *classPtr = &Falcon4ClassTable[Type() - VU_LAST_ENTITY_TYPE];

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	ecx, ax
	sub	ecx, 100				; 00000064H
	imul	ecx, 81					; 00000051H
	add	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	DWORD PTR _classPtr$17[ebp], ecx

; 598  : 						WeaponClassDataType *wc = (WeaponClassDataType *)classPtr->dataPtr;

	mov	edx, DWORD PTR _classPtr$17[ebp]
	mov	eax, DWORD PTR [edx+77]
	mov	DWORD PTR _wc$13[ebp], eax

; 599  : 
; 600  : 						// If a 3rg gen LGB, fins are more precised, even when no longer lased...
; 601  : 						//#define WEAP_LGB_3RD_GEN 0x40 moved to campwp.h and changed to 0x80
; 602  : 						if (wc->Flags & WEAP_LGB_3RD_GEN) 

	mov	ecx, DWORD PTR _wc$13[ebp]
	movzx	edx, WORD PTR [ecx+10]
	and	edx, 128				; 00000080H
	je	$LN59@Exec

; 603  : 							SetDelta (0.8F*XDelta() + 0.2f*desDxPrev, 0.8f*YDelta() + 0.2f*desDyPrev, ZDelta());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv4364[ebp]
	movss	xmm0, DWORD PTR tv4364[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3e4ccccd
	mulss	xmm1, DWORD PTR [eax+708]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv4371[ebp]
	movss	xmm0, DWORD PTR tv4371[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3e4ccccd
	mulss	xmm1, DWORD PTR [ecx+704]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta

; 604  : 						else // 2001-10-19 MODIFIED BY S.G. IT'S * 1.05f AND NOT * 2.0f!

	jmp	$LN58@Exec
$LN59@Exec:

; 605  : 							SetDelta ((0.8F*XDelta() + 0.2f*desDxPrev) * 1.05f, (0.8f*YDelta() + 0.2f*desDyPrev) * 1.05f, ZDelta());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv4384[ebp]
	movss	xmm0, DWORD PTR tv4384[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3e4ccccd
	mulss	xmm1, DWORD PTR [edx+708]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3f866666
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv4391[ebp]
	movss	xmm0, DWORD PTR tv4391[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3e4ccccd
	mulss	xmm1, DWORD PTR [eax+704]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3f866666
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta
$LN58@Exec:

; 606  : 					}
; 607  : 
; 608  : 					if (!((SimBaseClass*)(targetPtr->BaseData()))->IsSetFlag(IS_LASED))

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+656]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	jne	SHORT $LN57@Exec

; 609  : 					{
; 610  : 						targetPtr->Release();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+656]
	call	?Release@SimObjectType@@QAEXXZ		; SimObjectType::Release

; 611  : 						targetPtr = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+656], 0
$LN57@Exec:

; 612  : 					}
; 613  : 				}

	jmp	$LN53@Exec
$LN66@Exec:

; 614  : 				// 2001-04-17 ADDED BY S.G. WE'LL KEEP GOING WHERE WE WERE GOING...
; 615  : 				else if (g_bRP5Comp) 

	movzx	ecx, BYTE PTR ?g_bRP5Comp@@3_NA		; g_bRP5Comp
	test	ecx, ecx
	je	$LN53@Exec

; 616  : 				{
; 617  : 					// 2001-04-17 ADDED BY S.G. WE'LL KEEP GOING WHERE WE WERE GOING...
; 618  : 					Falcon4EntityClassType *classPtr = &Falcon4ClassTable[Type() - VU_LAST_ENTITY_TYPE];

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	edx, ax
	sub	edx, 100				; 00000064H
	imul	edx, 81					; 00000051H
	add	edx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	DWORD PTR _classPtr$16[ebp], edx

; 619  : 					WeaponClassDataType *wc = (WeaponClassDataType *)classPtr->dataPtr;

	mov	eax, DWORD PTR _classPtr$16[ebp]
	mov	ecx, DWORD PTR [eax+77]
	mov	DWORD PTR _wc$12[ebp], ecx

; 620  : 
; 621  : 					// If a 3rg gen LGB, fins are more precised, even when no longer lased...
; 622  : 					//#define WEAP_LGB_3RD_GEN 0x40 moved to campwp.h and changed to 0x80
; 623  : 					if (wc->Flags & WEAP_LGB_3RD_GEN) 

	mov	edx, DWORD PTR _wc$12[ebp]
	movzx	eax, WORD PTR [edx+10]
	and	eax, 128				; 00000080H
	je	$LN54@Exec

; 624  : 						SetDelta (0.8F*XDelta() + 0.2f*desDxPrev, 0.8f*YDelta() + 0.2f*desDyPrev, ZDelta());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv4413[ebp]
	movss	xmm0, DWORD PTR tv4413[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3e4ccccd
	mulss	xmm1, DWORD PTR [ecx+708]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv4420[ebp]
	movss	xmm0, DWORD PTR tv4420[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3e4ccccd
	mulss	xmm1, DWORD PTR [edx+704]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta

; 625  : 					else // 2001-10-19 MODIFIED BY S.G. IT'S * 1.05f AND NOT * 2.0f!

	jmp	$LN53@Exec
$LN54@Exec:

; 626  : 						SetDelta ((0.8F*XDelta() + 0.2f*desDxPrev) * 1.05f, (0.8f*YDelta() + 0.2f*desDyPrev) * 1.05f, ZDelta());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv4433[ebp]
	movss	xmm0, DWORD PTR tv4433[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3e4ccccd
	mulss	xmm1, DWORD PTR [eax+708]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3f866666
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv4440[ebp]
	movss	xmm0, DWORD PTR tv4440[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3e4ccccd
	mulss	xmm1, DWORD PTR [ecx+704]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3f866666
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta
$LN53@Exec:

; 627  : 				}
; 628  : 			}
; 629  : 		}

	jmp	$LN22@Exec
$LN70@Exec:

; 630  : 		// RV - Biker - Add 2 sec delay for guidance
; 631  : 		else if((flags & IsLGB) && g_bRealisticAvionics && (SimLibElapsedTime - timeOfDeath) > (2.0f * SEC_TO_MSEC))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+732]
	and	eax, 32					; 00000020H
	je	$LN51@Exec
	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	$LN51@Exec
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	eax, DWORD PTR [edx+288]
	mov	DWORD PTR tv4453[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv4453[ebp]
	mov	ecx, DWORD PTR tv4453[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv4456[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv4456[ebp]
	comiss	xmm0, DWORD PTR __real@44fa0000
	jbe	$LN51@Exec

; 632  : 		{
; 633  : 			AircraftClass *parentAC = parent->IsAirplane() ? static_cast<AircraftClass*>(parent.get()) : NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	DWORD PTR tv1708[ebp], eax
	mov	edx, DWORD PTR tv1708[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv1708[ebp]
	mov	edx, DWORD PTR [eax+192]
	call	edx
	test	eax, eax
	je	SHORT $LN107@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	DWORD PTR tv1724[ebp], eax
	jmp	SHORT $LN108@Exec
$LN107@Exec:
	mov	DWORD PTR tv1724[ebp], 0
$LN108@Exec:
	mov	eax, DWORD PTR tv1724[ebp]
	mov	DWORD PTR _parentAC$38[ebp], eax

; 634  : 			//AI's don't need to keep a lock until impact
; 635  : 			// sfr: since someone removed the player check here, im using the parent instead
; 636  : 			//if(parent /* && ((AircraftClass *)parent)->IsPlayer()*/ )
; 637  : 			if(parentAC)

	cmp	DWORD PTR _parentAC$38[ebp], 0
	je	$LN35@Exec

; 638  : 			{
; 639  : 				radical = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _radical$[ebp], xmm0

; 640  : 				//if (playerAC->FCC->groundDesignateZ <= ZPos())
; 641  : 				if (parentAC->FCC->groundDesignateZ <= ZPos()){

	mov	ecx, DWORD PTR _parentAC$38[ebp]
	mov	esi, DWORD PTR [ecx+936]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4473[ebp]
	movss	xmm0, DWORD PTR tv4473[ebp]
	comiss	xmm0, DWORD PTR [esi+384]
	jb	SHORT $LN49@Exec

; 642  : 					radical = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _radical$[ebp], xmm0

; 643  : 				}
; 644  : 				else { 

	jmp	$LN48@Exec
$LN49@Exec:

; 645  : 					//radical = (float)sqrt (ZDelta()*ZDelta() + 2.0F * 
; 646  : 					//GRAVITY * (playerAC->FCC->groundDesignateZ - ZPos()));
; 647  : 					radical = (float)sqrt (ZDelta()*ZDelta() + 2.0F * GRAVITY * 
; 648  : 						(parentAC->FCC->groundDesignateZ - ZPos()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv4478[ebp]
	movss	xmm0, DWORD PTR tv4478[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5414[ebp], xmm0
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv4482[ebp]
	movss	xmm0, DWORD PTR tv5414[ebp]
	mulss	xmm0, DWORD PTR tv4482[ebp]
	mov	edx, DWORD PTR _parentAC$38[ebp]
	mov	esi, DWORD PTR [edx+936]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5416[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4487[ebp]
	movss	xmm0, DWORD PTR [esi+384]
	subss	xmm0, DWORD PTR tv4487[ebp]
	mulss	xmm0, DWORD PTR __real@4280b53f
	movss	xmm1, DWORD PTR tv5416[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _radical$[ebp]
$LN48@Exec:

; 649  : 				}
; 650  : 
; 651  : 				tFall = -ZDelta() - radical;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv4496[ebp]
	movss	xmm0, DWORD PTR tv4496[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm0, DWORD PTR _radical$[ebp]
	movss	DWORD PTR _tFall$[ebp], xmm0

; 652  : 				if (tFall < 0.0F){ tFall = -ZDelta() + radical; }

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _tFall$[ebp]
	jbe	SHORT $LN47@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv4501[ebp]
	movss	xmm0, DWORD PTR tv4501[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	addss	xmm0, DWORD PTR _radical$[ebp]
	movss	DWORD PTR _tFall$[ebp], xmm0
$LN47@Exec:

; 653  : 				tFall /= GRAVITY;

	movss	xmm0, DWORD PTR _tFall$[ebp]
	divss	xmm0, DWORD PTR __real@4200b53f
	movss	DWORD PTR _tFall$[ebp], xmm0

; 654  : 
; 655  : 				//deltaX = playerAC->FCC->groundDesignateX - XPos();
; 656  : 				//deltaY = playerAC->FCC->groundDesignateY - YPos();
; 657  : 				//deltaZ = playerAC->FCC->groundDesignateZ - ZPos();
; 658  : 				deltaX = parentAC->FCC->groundDesignateX - XPos();

	mov	eax, DWORD PTR _parentAC$38[ebp]
	mov	esi, DWORD PTR [eax+936]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv4507[ebp]
	movss	xmm0, DWORD PTR [esi+376]
	subss	xmm0, DWORD PTR tv4507[ebp]
	movss	DWORD PTR _deltaX$[ebp], xmm0

; 659  : 				deltaY = parentAC->FCC->groundDesignateY - YPos();

	mov	ecx, DWORD PTR _parentAC$38[ebp]
	mov	esi, DWORD PTR [ecx+936]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv4513[ebp]
	movss	xmm0, DWORD PTR [esi+380]
	subss	xmm0, DWORD PTR tv4513[ebp]
	movss	DWORD PTR _deltaY$[ebp], xmm0

; 660  : 				deltaZ = parentAC->FCC->groundDesignateZ - ZPos();

	mov	edx, DWORD PTR _parentAC$38[ebp]
	mov	esi, DWORD PTR [edx+936]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4519[ebp]
	movss	xmm0, DWORD PTR [esi+384]
	subss	xmm0, DWORD PTR tv4519[ebp]
	movss	DWORD PTR _deltaZ$[ebp], xmm0

; 661  : 
; 662  : 
; 663  : 				rx    = dmx[0][0] * deltaX + dmx[0][1] * deltaY + dmx[0][2] * deltaZ;

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR _deltaX$[ebp]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _deltaY$[ebp]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _deltaZ$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 664  : 				ry    = dmx[1][0] * deltaX + dmx[1][1] * deltaY + dmx[1][2] * deltaZ;

	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR _deltaX$[ebp]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _deltaY$[ebp]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _deltaZ$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 665  : 				rz    = dmx[2][0] * deltaX + dmx[2][1] * deltaY + dmx[2][2] * deltaZ;

	mov	eax, 12					; 0000000cH
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR _deltaX$[ebp]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _deltaY$[ebp]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _deltaZ$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rz$[ebp], xmm0

; 666  : 				range = (float)sqrt(rx*rx + ry*ry + rz*rz);

	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR _rx$[ebp]
	movss	xmm1, DWORD PTR _ry$[ebp]
	mulss	xmm1, DWORD PTR _ry$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _rz$[ebp]
	mulss	xmm1, DWORD PTR _rz$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _range$[ebp]

; 667  : 				//float range1 = (float)sqrt(deltaX*deltaX + deltaY*deltaY+deltaZ*deltaZ);
; 668  : 				//float rate = (float)sqrt(XDelta()*XDelta()+YDelta()*YDelta()+ZDelta()*ZDelta());
; 669  : 
; 670  : 				//we need to find the time until impact
; 671  : 				if (parentAC->IsPlayer()){

	mov	ecx, DWORD PTR _parentAC$38[ebp]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN46@Exec

; 672  : 					parentAC->FCC->ImpactTime = tFall;

	mov	eax, DWORD PTR _parentAC$38[ebp]
	mov	ecx, DWORD PTR [eax+936]
	movss	xmm0, DWORD PTR _tFall$[ebp]
	movss	DWORD PTR [ecx+432], xmm0
$LN46@Exec:

; 673  : 				}
; 674  : 
; 675  : 				// 18 degree limit on the seeker	
; 676  : 				/* JAM 17Apr04 - (range-rx * rx) yields a negative number, you can't take the square
; 677  : 				 root of a negative number! In VC6, the seeker check always passes, but in VC >= 6 + PP,
; 678  : 				 the check always FAILS, due to differences in how the compilers treat sqrt(-). This is
; 679  : 				 why LGB's consistantly missed their targets in anything but vanilla VC6. 
; 680  : 				*/
; 681  : 				if (
; 682  : 					Abs(acosf(rx/range)) <= 18.f*DTR &&
; 683  : 					(parentAC->IsPlayer() && parentAC->FCC->LaserFire) || 
; 684  : 					!parentAC->IsPlayer()
; 685  : 				)

	movss	xmm0, DWORD PTR _rx$[ebp]
	divss	xmm0, DWORD PTR _range$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_acosf
	fstp	DWORD PTR [esp]
	call	??$Abs@M@@YAMM@Z			; Abs<float>
	add	esp, 4
	fstp	DWORD PTR tv4575[ebp]
	movss	xmm0, DWORD PTR __real@3ea0d97a
	comiss	xmm0, DWORD PTR tv4575[ebp]
	jb	SHORT $LN42@Exec
	mov	ecx, DWORD PTR _parentAC$38[ebp]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN42@Exec
	mov	edx, DWORD PTR _parentAC$38[ebp]
	mov	eax, DWORD PTR [edx+936]
	movzx	ecx, BYTE PTR [eax+423]
	test	ecx, ecx
	jne	SHORT $LN44@Exec
$LN42@Exec:
	mov	ecx, DWORD PTR _parentAC$38[ebp]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	jne	$LN45@Exec
$LN44@Exec:

; 686  : 				{
; 687  : 					desDx = (deltaX)/tFall;

	movss	xmm0, DWORD PTR _deltaX$[ebp]
	divss	xmm0, DWORD PTR _tFall$[ebp]
	movss	DWORD PTR _desDx$[ebp], xmm0

; 688  : 					desDy = (deltaY)/tFall;

	movss	xmm0, DWORD PTR _deltaY$[ebp]
	divss	xmm0, DWORD PTR _tFall$[ebp]
	movss	DWORD PTR _desDy$[ebp], xmm0

; 689  : 					// 2001-04-17 ADDED BY S.G. WE'LL KEEP OUR LAST desDx and desDy IN THE UNUSED
; 690  : 					// tgtX and tgtY BombClass VARIABLE (RENAMED desDxPrev AND desDyPrev) 
; 691  : 					// TO IN CASE WE LOOSE LOCK LATER
; 692  : 					desDxPrev = desDx;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _desDx$[ebp]
	movss	DWORD PTR [edx+704], xmm0

; 693  : 					desDyPrev = desDy;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _desDy$[ebp]
	movss	DWORD PTR [eax+708], xmm0

; 694  : 					// END OF ADDED SECTION
; 695  : 					SetDelta (0.8F*XDelta() + 0.2F*desDx, 0.8F*YDelta() + 0.2F*desDy, ZDelta());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv4591[ebp]
	movss	xmm0, DWORD PTR tv4591[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	movss	xmm1, DWORD PTR __real@3e4ccccd
	mulss	xmm1, DWORD PTR _desDy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv4597[ebp]
	movss	xmm0, DWORD PTR tv4597[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	movss	xmm1, DWORD PTR __real@3e4ccccd
	mulss	xmm1, DWORD PTR _desDx$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta

; 696  : 				}
; 697  : 				else

	jmp	$LN37@Exec
$LN45@Exec:

; 698  : 				{
; 699  : 					if(!(desDxPrev == 0.0f && desDyPrev == 0.0f && desDzPrev == 0.0f)) 

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+704]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN39@Exec
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+708]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN39@Exec
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+712]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN37@Exec
$LN39@Exec:

; 700  : 					{
; 701  : 						// 2001-04-17 ADDED BY S.G. WE'LL KEEP GOING WHERE WE WERE GOING...
; 702  : 						Falcon4EntityClassType *classPtr = &Falcon4ClassTable[Type() - VU_LAST_ENTITY_TYPE];

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	ecx, ax
	sub	ecx, 100				; 00000064H
	imul	ecx, 81					; 00000051H
	add	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	DWORD PTR _classPtr$23[ebp], ecx

; 703  : 						WeaponClassDataType *wc = (WeaponClassDataType *)classPtr->dataPtr;

	mov	edx, DWORD PTR _classPtr$23[ebp]
	mov	eax, DWORD PTR [edx+77]
	mov	DWORD PTR _wc$22[ebp], eax

; 704  : 						// If a 3rg gen LGB, fins are more precised, even when no longer lased...
; 705  : 						if(wc->Flags & WEAP_LGB_3RD_GEN) {

	mov	ecx, DWORD PTR _wc$22[ebp]
	movzx	edx, WORD PTR [ecx+10]
	and	edx, 128				; 00000080H
	je	$LN38@Exec

; 706  : 							SetDelta(0.8F*XDelta() + 0.2f*desDxPrev, 0.8f*YDelta() + 0.2f*desDyPrev, ZDelta());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv4625[ebp]
	movss	xmm0, DWORD PTR tv4625[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3e4ccccd
	mulss	xmm1, DWORD PTR [eax+708]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv4632[ebp]
	movss	xmm0, DWORD PTR tv4632[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3e4ccccd
	mulss	xmm1, DWORD PTR [ecx+704]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta

; 707  : 						}
; 708  : 						else {

	jmp	$LN37@Exec
$LN38@Exec:

; 709  : 							// 2001-10-19 MODIFIED BY S.G. IT'S * 1.05f AND NOT * 2.0f!
; 710  : 							SetDelta(
; 711  : 								(0.8F*XDelta() + 0.2f*desDxPrev) * 1.05f, 
; 712  : 								(0.8f*YDelta() + 0.2f*desDyPrev) * 1.05f, 
; 713  : 								ZDelta()
; 714  : 							);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv4645[ebp]
	movss	xmm0, DWORD PTR tv4645[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3e4ccccd
	mulss	xmm1, DWORD PTR [edx+708]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3f866666
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv4652[ebp]
	movss	xmm0, DWORD PTR tv4652[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3e4ccccd
	mulss	xmm1, DWORD PTR [eax+704]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3f866666
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta
$LN37@Exec:

; 715  : 						}
; 716  : 					}
; 717  : 				}
; 718  : 				if(targetPtr && targetPtr->BaseData() && parentAC->IsPlayer())

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+656], 0
	je	SHORT $LN35@Exec
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+656]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	test	eax, eax
	je	SHORT $LN35@Exec
	mov	ecx, DWORD PTR _parentAC$38[ebp]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN35@Exec

; 719  : 				{
; 720  : 					if (!((SimBaseClass*)(targetPtr->BaseData()))->IsSetFlag(IS_LASED))

	push	8192					; 00002000H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	jne	SHORT $LN35@Exec

; 721  : 					{
; 722  : 						targetPtr->Release(  );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+656]
	call	?Release@SimObjectType@@QAEXXZ		; SimObjectType::Release

; 723  : 						targetPtr = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+656], 0
$LN35@Exec:

; 724  : 					}
; 725  : 				}
; 726  : 			}
; 727  : 		}

	jmp	$LN22@Exec
$LN51@Exec:

; 728  : 		//Wombat778 3-09-04 If this is a GPS weapon, guide to the GPS coordinates. A ripoff from the LGB code above
; 729  : 		// RV - Biker - Add 2 sec delay for guidance
; 730  : 		else if (((flags & IsGPS) || (flags & IsJSOW)) && (SimLibElapsedTime - timeOfDeath) > (2.0f * SEC_TO_MSEC))  

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+732]
	and	ecx, 256				; 00000100H
	jne	SHORT $LN32@Exec
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+732]
	and	eax, 512				; 00000200H
	je	$LN33@Exec
$LN32@Exec:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	edx, DWORD PTR [ecx+288]
	mov	DWORD PTR tv4676[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv4676[ebp]
	mov	eax, DWORD PTR tv4676[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv4679[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv4679[ebp]
	comiss	xmm0, DWORD PTR __real@44fa0000
	jbe	$LN33@Exec

; 731  : 		{
; 732  : 			FalconEntity *target = NULL;

	mov	DWORD PTR _target$10[ebp], 0

; 733  : 			//				SimBaseClass *simTarg;
; 734  : 
; 735  : 			// Cobra - Check that we have a valid auxData->JDAMLift for JSOWs
; 736  : 			if (EntityType()->classInfo_[VU_STYPE] == STYPE_BOMB_JSOW && (auxData->JDAMLift <= 5.0f))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	movzx	edx, BYTE PTR [eax+ecx+8]
	cmp	edx, 5
	jne	SHORT $LN31@Exec
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+832]
	movss	xmm0, DWORD PTR __real@40a00000
	comiss	xmm0, DWORD PTR [ecx+48]
	jb	SHORT $LN31@Exec

; 737  : 				auxData->JDAMLift = g_fJDAMLift;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+832]
	movss	xmm0, DWORD PTR ?g_fJDAMLift@@3MA
	movss	DWORD PTR [eax+48], xmm0
$LN31@Exec:

; 738  : 
; 739  : 
; 740  : 			// Cobra - Skip target assigning until close to target
; 741  : 			rx = JSOWtgtPos.x - XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv4692[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+776]
	subss	xmm0, DWORD PTR tv4692[ebp]
	movss	DWORD PTR _rx$[ebp], xmm0

; 742  : 			ry = JSOWtgtPos.y - YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv4698[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+780]
	subss	xmm0, DWORD PTR tv4698[ebp]
	movss	DWORD PTR _ry$[ebp], xmm0

; 743  : 			range = (float)sqrt(rx*rx + ry*ry);

	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR _rx$[ebp]
	movss	xmm1, DWORD PTR _ry$[ebp]
	mulss	xmm1, DWORD PTR _ry$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _range$[ebp]

; 744  : 			
; 745  : 			// FRB - JSOW Test monitor
; 746  : 			if (range < 10.0f * NM_TO_FT)

	movss	xmm0, DWORD PTR __real@476d5a1c
	comiss	xmm0, DWORD PTR _range$[ebp]
	jbe	$LN29@Exec

; 747  : 			{
; 748  : 				if ((flags & IsJSOW) && targetPtr) 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+732]
	and	ecx, 512				; 00000200H
	je	$LN29@Exec
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+656], 0
	je	$LN29@Exec

; 749  : 				{
; 750  : 					// First get the campaign object if it's still a sim entity
; 751  : 					/*
; 752  : 					CampBaseClass *campBaseObj;
; 753  : 					if (targetPtr->BaseData()->IsSim()) // If we're a SIM object, get our campaign object
; 754  : 						campBaseObj = ((SimBaseClass*)targetPtr->BaseData())->GetCampaignObject();
; 755  : 					else
; 756  : 						campBaseObj = (CampBaseClass *)targetPtr->BaseData();
; 757  : 					// Now find out if our campaign object is aggregated
; 758  : 					if ((campBaseObj && !campBaseObj->IsAggregate())) 
; 759  : 					{
; 760  : 					target = targetPtr->BaseData();
; 761  : 					// Get the sim object associated to this entity number
; 762  : 					simTarg = campBaseObj->GetComponentEntity(JSOWtgtID);
; 763  : 			
; 764  : 					if (simTarg)
; 765  : 					{
; 766  : 					gpsx = simTarg->XPos();
; 767  : 					gpsy = simTarg->YPos();
; 768  : 					}
; 769  : 					else
; 770  : 					{
; 771  : 					gpsx = targetPtr->BaseData()->XPos();
; 772  : 					gpsy = targetPtr->BaseData()->YPos();
; 773  : 					}
; 774  : 					}
; 775  : 					else // Use feature cheat coordinates */
; 776  : 					{
; 777  : 						int tgg = JSOWtgtID; // debug

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+772]
	mov	DWORD PTR _tgg$9[ebp], ecx

; 778  : 						gpsx = JSOWtgtPos.x;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+776]
	mov	DWORD PTR [edx+760], ecx

; 779  : 						gpsy = JSOWtgtPos.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+780]
	mov	DWORD PTR [edx+764], ecx

; 780  : 					}
; 781  : 					if (fp)

	cmp	DWORD PTR ?fp@?1??Exec@BombClass@@UAEHXZ@4PAU_iobuf@@A, 0
	je	SHORT $LN28@Exec

; 782  : 						fprintf(fp, "JSOWtgtID: %d  X= %f  Y= %f\n", JSOWtgtID, gpsx, gpsy);

	mov	edx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+764]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+760]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+772]
	push	edx
	push	OFFSET ??_C@_0BN@LNGNKG@JSOWtgtID?3?5?$CFd?5?5X?$DN?5?$CFf?5?5Y?$DN?5?$CFf?6?$AA@
	mov	eax, DWORD PTR ?fp@?1??Exec@BombClass@@UAEHXZ@4PAU_iobuf@@A
	push	eax
	call	_fprintf
	add	esp, 28					; 0000001cH
$LN28@Exec:

; 783  : 					fflush(fp);

	mov	ecx, DWORD PTR ?fp@?1??Exec@BombClass@@UAEHXZ@4PAU_iobuf@@A
	push	ecx
	call	_fflush
	add	esp, 4
$LN29@Exec:

; 784  : 				}
; 785  : 			}
; 786  : 
; 787  : 			radical = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _radical$[ebp], xmm0

; 788  : 			//if(gpsz <= ZPos()) 
; 789  : 			//  radical = 0;
; 790  : 
; 791  : 			//radical = (float)sqrt (ZDelta()*ZDelta() + 2.0F * (GRAVITY - auxData->JDAMLift) * (gpsz - ZPos()));
; 792  : 			radical = (float)sqrt (ZDelta()*ZDelta() + 2.0F * GRAVITY * (gpsz - ZPos()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv4730[ebp]
	movss	xmm0, DWORD PTR tv4730[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5418[ebp], xmm0
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv4734[ebp]
	movss	xmm0, DWORD PTR tv5418[ebp]
	mulss	xmm0, DWORD PTR tv4734[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5420[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4738[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+768]
	subss	xmm0, DWORD PTR tv4738[ebp]
	mulss	xmm0, DWORD PTR __real@4280b53f
	movss	xmm1, DWORD PTR tv5420[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _radical$[ebp]

; 793  : 			tFall = -ZDelta() - radical;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv4748[ebp]
	movss	xmm0, DWORD PTR tv4748[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm0, DWORD PTR _radical$[ebp]
	movss	DWORD PTR _tFall$[ebp], xmm0

; 794  : 			if (tFall < 0.0F)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _tFall$[ebp]
	jbe	SHORT $LN27@Exec

; 795  : 				tFall = -ZDelta() + radical;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv4753[ebp]
	movss	xmm0, DWORD PTR tv4753[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	addss	xmm0, DWORD PTR _radical$[ebp]
	movss	DWORD PTR _tFall$[ebp], xmm0
$LN27@Exec:

; 796  : 			tFall /= GRAVITY;

	movss	xmm0, DWORD PTR _tFall$[ebp]
	divss	xmm0, DWORD PTR __real@4200b53f
	movss	DWORD PTR _tFall$[ebp], xmm0

; 797  : 
; 798  : 			deltaX = gpsx - XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv4758[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+760]
	subss	xmm0, DWORD PTR tv4758[ebp]
	movss	DWORD PTR _deltaX$[ebp], xmm0

; 799  : 			deltaY = gpsy - YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv4764[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+764]
	subss	xmm0, DWORD PTR tv4764[ebp]
	movss	DWORD PTR _deltaY$[ebp], xmm0

; 800  : 			deltaZ = gpsz - ZPos();			  

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4770[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+768]
	subss	xmm0, DWORD PTR tv4770[ebp]
	movss	DWORD PTR _deltaZ$[ebp], xmm0

; 801  : 
; 802  : 			rx    = dmx[0][0] * deltaX + dmx[0][1] * deltaY + dmx[0][2] * deltaZ;

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR _deltaX$[ebp]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _deltaY$[ebp]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _deltaZ$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 803  : 			ry    = dmx[1][0] * deltaX + dmx[1][1] * deltaY + dmx[1][2] * deltaZ;

	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR _deltaX$[ebp]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _deltaY$[ebp]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _deltaZ$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 804  : 			rz    = dmx[2][0] * deltaX + dmx[2][1] * deltaY + dmx[2][2] * deltaZ;

	mov	eax, 12					; 0000000cH
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR _deltaX$[ebp]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _deltaY$[ebp]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _deltaZ$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rz$[ebp], xmm0

; 805  : 			range = (float)sqrt(rx*rx + ry*ry + rz*rz);

	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR _rx$[ebp]
	movss	xmm1, DWORD PTR _ry$[ebp]
	mulss	xmm1, DWORD PTR _ry$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _rz$[ebp]
	mulss	xmm1, DWORD PTR _rz$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _range$[ebp]

; 806  : 			//float range1 = (float)sqrt(deltaX*deltaX + deltaY*deltaY+deltaZ*deltaZ);
; 807  : 			//float rate = (float)sqrt(XDelta()*XDelta()+YDelta()*YDelta()+ZDelta()*ZDelta());					  			  
; 808  : 
; 809  : 			desDx = (deltaX)/tFall;

	movss	xmm0, DWORD PTR _deltaX$[ebp]
	divss	xmm0, DWORD PTR _tFall$[ebp]
	movss	DWORD PTR _desDx$[ebp], xmm0

; 810  : 			desDy = (deltaY)/tFall;			  

	movss	xmm0, DWORD PTR _deltaY$[ebp]
	divss	xmm0, DWORD PTR _tFall$[ebp]
	movss	DWORD PTR _desDy$[ebp], xmm0

; 811  : 			desDxPrev = desDx;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _desDx$[ebp]
	movss	DWORD PTR [eax+704], xmm0

; 812  : 			desDyPrev = desDy;			  			  			  

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _desDy$[ebp]
	movss	DWORD PTR [ecx+708], xmm0

; 813  : 
; 814  : 			//Limit new deltaX and Y to the initial deltaX and Y.  This stops the stupid Zoom issue.
; 815  : 			//Basically this is a VERY basic 2d energy model
; 816  : 
; 817  : 			//Wombat778 3-12-04 Changed to a pythagorean theorem method			  			  
; 818  : 			static float maxenergy = sqrt((XDelta()*XDelta()) + (YDelta()*YDelta()));

	mov	edx, DWORD PTR ?$S1@?JL@??Exec@BombClass@@UAEHXZ@4IA
	and	edx, 1
	jne	$LN26@Exec
	mov	eax, DWORD PTR ?$S1@?JL@??Exec@BombClass@@UAEHXZ@4IA
	or	eax, 1
	mov	DWORD PTR ?$S1@?JL@??Exec@BombClass@@UAEHXZ@4IA, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv4826[ebp]
	movss	xmm0, DWORD PTR tv4826[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5422[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv4830[ebp]
	movss	xmm0, DWORD PTR tv5422[ebp]
	mulss	xmm0, DWORD PTR tv4830[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5424[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv4834[ebp]
	movss	xmm0, DWORD PTR tv4834[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5426[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv4838[ebp]
	movss	xmm0, DWORD PTR tv5426[ebp]
	mulss	xmm0, DWORD PTR tv4838[ebp]
	movss	xmm1, DWORD PTR tv5424[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR ?maxenergy@?JL@??Exec@BombClass@@UAEHXZ@4MA
	mov	DWORD PTR __$EHRec$[ebp+8], -1
$LN26@Exec:

; 819  : 
; 820  : 			float newxdelta = 0.8F*XDelta() + 0.2F*desDx;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv4845[ebp]
	movss	xmm0, DWORD PTR tv4845[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	movss	xmm1, DWORD PTR __real@3e4ccccd
	mulss	xmm1, DWORD PTR _desDx$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _newxdelta$34[ebp], xmm0

; 821  : 			float newydelta = 0.8F*YDelta() + 0.2F*desDy;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv4851[ebp]
	movss	xmm0, DWORD PTR tv4851[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	movss	xmm1, DWORD PTR __real@3e4ccccd
	mulss	xmm1, DWORD PTR _desDy$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _newydelta$33[ebp], xmm0

; 822  : 			//			  float newzdelta= ZDelta()-(g_fJDAMLift*SimLibMajorFrameTime*cos(Pitch()));			  //take the "lift" of the bomb into account
; 823  : 			float newzdelta= ZDelta()-(auxData->JDAMLift*SimLibMajorFrameTime*cos(Pitch()));		// Cobra - Use Bombdata JDAMLift			 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv4857[ebp]
	movss	xmm0, DWORD PTR tv4857[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+832]
	movss	xmm1, DWORD PTR [edx+48]
	mulss	xmm1, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5428[ebp], xmm0
	movss	DWORD PTR tv5430[ebp], xmm1
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	push	ecx
	fstp	DWORD PTR [esp]
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv4867[ebp]
	movss	xmm0, DWORD PTR tv5430[ebp]
	mulss	xmm0, DWORD PTR tv4867[ebp]
	movss	xmm1, DWORD PTR tv5428[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _newzdelta$18[ebp], xmm1

; 824  : 			float newenergy = sqrt((newxdelta*newxdelta) + (newydelta*newydelta));

	movss	xmm0, DWORD PTR _newxdelta$34[ebp]
	mulss	xmm0, DWORD PTR _newxdelta$34[ebp]
	movss	xmm1, DWORD PTR _newydelta$33[ebp]
	mulss	xmm1, DWORD PTR _newydelta$33[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _newenergy$28[ebp]

; 825  : 
; 826  : 			if (newenergy > maxenergy)

	movss	xmm0, DWORD PTR _newenergy$28[ebp]
	comiss	xmm0, DWORD PTR ?maxenergy@?JL@??Exec@BombClass@@UAEHXZ@4MA
	jbe	SHORT $LN25@Exec

; 827  : 			{
; 828  : 				newxdelta*=maxenergy/newenergy;

	movss	xmm0, DWORD PTR ?maxenergy@?JL@??Exec@BombClass@@UAEHXZ@4MA
	divss	xmm0, DWORD PTR _newenergy$28[ebp]
	mulss	xmm0, DWORD PTR _newxdelta$34[ebp]
	movss	DWORD PTR _newxdelta$34[ebp], xmm0

; 829  : 				newydelta*=maxenergy/newenergy;

	movss	xmm0, DWORD PTR ?maxenergy@?JL@??Exec@BombClass@@UAEHXZ@4MA
	divss	xmm0, DWORD PTR _newenergy$28[ebp]
	mulss	xmm0, DWORD PTR _newydelta$33[ebp]
	movss	DWORD PTR _newydelta$33[ebp], xmm0
$LN25@Exec:

; 830  : 			}
; 831  : 			SetDelta (newxdelta, newydelta, newzdelta);												//Wombat778 3-12-04 added newzdelta

	push	ecx
	movss	xmm0, DWORD PTR _newzdelta$18[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _newydelta$33[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _newxdelta$34[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta
	jmp	$LN22@Exec
$LN33@Exec:

; 832  : 		}
; 833  : 		else if ((SimLibElapsedTime - timeOfDeath) > (2.0f * SEC_TO_MSEC)) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	ecx, DWORD PTR [eax+288]
	mov	DWORD PTR tv4887[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv4887[ebp]
	mov	edx, DWORD PTR tv4887[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv4890[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv4890[ebp]
	comiss	xmm0, DWORD PTR __real@44fa0000
	jbe	$LN22@Exec

; 834  : 			if (targetPtr) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+656], 0
	je	$LN22@Exec

; 835  : 				radical = (float)sqrt (ZDelta()*ZDelta() + 2.0F * GRAVITY * (targetPtr->BaseData()->ZPos() - ZPos()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv4898[ebp]
	movss	xmm0, DWORD PTR tv4898[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5432[ebp], xmm0
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv4902[ebp]
	movss	xmm0, DWORD PTR tv5432[ebp]
	mulss	xmm0, DWORD PTR tv4902[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+656]
	movss	DWORD PTR tv5434[ebp], xmm0
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4908[ebp]
	movss	xmm0, DWORD PTR tv4908[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5436[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4912[ebp]
	movss	xmm0, DWORD PTR tv5436[ebp]
	subss	xmm0, DWORD PTR tv4912[ebp]
	mulss	xmm0, DWORD PTR __real@4280b53f
	movss	xmm1, DWORD PTR tv5434[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _radical$[ebp]

; 836  : 				tFall = -ZDelta() - radical;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv4920[ebp]
	movss	xmm0, DWORD PTR tv4920[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm0, DWORD PTR _radical$[ebp]
	movss	DWORD PTR _tFall$[ebp], xmm0

; 837  : 				if (tFall < 0.0F)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _tFall$[ebp]
	jbe	SHORT $LN21@Exec

; 838  : 					tFall = -ZDelta() + radical;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv4925[ebp]
	movss	xmm0, DWORD PTR tv4925[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	addss	xmm0, DWORD PTR _radical$[ebp]
	movss	DWORD PTR _tFall$[ebp], xmm0
$LN21@Exec:

; 839  : 				tFall /= GRAVITY;

	movss	xmm0, DWORD PTR _tFall$[ebp]
	divss	xmm0, DWORD PTR __real@4200b53f
	movss	DWORD PTR _tFall$[ebp], xmm0

; 840  : 				deltaX = targetPtr->BaseData()->XPos() - XPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+656]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv4932[ebp]
	movss	xmm0, DWORD PTR tv4932[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5438[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv4936[ebp]
	movss	xmm0, DWORD PTR tv5438[ebp]
	subss	xmm0, DWORD PTR tv4936[ebp]
	movss	DWORD PTR _deltaX$[ebp], xmm0

; 841  : 				deltaY = targetPtr->BaseData()->YPos() - YPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv4942[ebp]
	movss	xmm0, DWORD PTR tv4942[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5440[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv4946[ebp]
	movss	xmm0, DWORD PTR tv5440[ebp]
	subss	xmm0, DWORD PTR tv4946[ebp]
	movss	DWORD PTR _deltaY$[ebp], xmm0

; 842  : 				deltaZ = (float)fabs(targetPtr->BaseData()->ZPos() - ZPos());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+656]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4952[ebp]
	movss	xmm0, DWORD PTR tv4952[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5442[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv4956[ebp]
	movss	xmm0, DWORD PTR tv5442[ebp]
	subss	xmm0, DWORD PTR tv4956[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _deltaZ$[ebp]

; 843  : 
; 844  : 				rx    = dmx[0][0] * deltaX + dmx[0][1] * deltaY + dmx[0][2] * deltaZ;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _deltaX$[ebp]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _deltaY$[ebp]
	addss	xmm0, xmm1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _deltaZ$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 845  : 				ry    = dmx[1][0] * deltaX + dmx[1][1] * deltaY + dmx[1][2] * deltaZ;

	mov	edx, 12					; 0000000cH
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _deltaX$[ebp]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _deltaY$[ebp]
	addss	xmm0, xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _deltaZ$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 846  : 				rz    = dmx[2][0] * deltaX + dmx[2][1] * deltaY + dmx[2][2] * deltaZ;

	mov	edx, 12					; 0000000cH
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _deltaX$[ebp]
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _deltaY$[ebp]
	addss	xmm0, xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _deltaZ$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rz$[ebp], xmm0

; 847  : 				range = (float)sqrt(rx*rx + ry*ry + rz*rz);

	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR _rx$[ebp]
	movss	xmm1, DWORD PTR _ry$[ebp]
	mulss	xmm1, DWORD PTR _ry$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _rz$[ebp]
	mulss	xmm1, DWORD PTR _rz$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _range$[ebp]

; 848  : 
; 849  : 				desDx = (deltaX)/tFall;

	movss	xmm0, DWORD PTR _deltaX$[ebp]
	divss	xmm0, DWORD PTR _tFall$[ebp]
	movss	DWORD PTR _desDx$[ebp], xmm0

; 850  : 				desDy = (deltaY)/tFall;			  

	movss	xmm0, DWORD PTR _deltaY$[ebp]
	divss	xmm0, DWORD PTR _tFall$[ebp]
	movss	DWORD PTR _desDy$[ebp], xmm0

; 851  : 
; 852  : 				SetDelta (0.8F*XDelta() + 0.2F*desDx, 0.8F*YDelta() + 0.2F*desDy, ZDelta());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv5009[ebp]
	movss	xmm0, DWORD PTR tv5009[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	movss	xmm1, DWORD PTR __real@3e4ccccd
	mulss	xmm1, DWORD PTR _desDy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv5015[ebp]
	movss	xmm0, DWORD PTR tv5015[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	movss	xmm1, DWORD PTR __real@3e4ccccd
	mulss	xmm1, DWORD PTR _desDx$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta
$LN22@Exec:

; 853  : 			}
; 854  : 		}
; 855  : 
; 856  : 
; 857  : 		terrainHeight = OTWDriver.GetGroundLevel(x, y);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+740]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+736]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	fstp	DWORD PTR _terrainHeight$[ebp]

; 858  : 
; 859  : 		// 2 seconds from release until any alt detonation will fuse
; 860  : 		if (SimLibElapsedTime - timeOfDeath > 2 * SEC_TO_MSEC)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	edx, DWORD PTR [ecx+288]
	cmp	edx, 2000				; 000007d0H
	jbe	SHORT $LN20@Exec

; 861  : 		{	
; 862  : 			bheight = burstHeight; // CBUs

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+716]
	movss	DWORD PTR _bheight$[ebp], xmm0

; 863  : 		}
; 864  : 	  else

	jmp	SHORT $LN19@Exec
$LN20@Exec:

; 865  :   		bheight = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _bheight$[ebp], xmm0
$LN19@Exec:

; 866  : 	  // check for feature collision impact  
; 867  : 
; 868  : 	  if ( bombType == None &&  z - terrainHeight > -800.0f)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+700], 0
	jne	$LN6@Exec
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+744]
	subss	xmm0, DWORD PTR _terrainHeight$[ebp]
	comiss	xmm0, DWORD PTR __real@c4480000
	jbe	$LN6@Exec

; 869  : 	  {
; 870  : 		  hitObj = FeatureCollision( terrainHeight);

	push	ecx
	movss	xmm0, DWORD PTR _terrainHeight$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+444]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+728], eax

; 871  : 		  if (hitObj)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+728], 0
	je	$LN17@Exec

; 872  : 		  {
; 873  : 			  //me123 OWLOOK make your armingdelay switch here.  
; 874  : 			  //MI
; 875  : 			  //if (g_bArmingDelay && (SimLibElapsedTime - timeOfDeath > armingdelay *10  || ((AircraftClass *)parent)->isDigital))
; 876  : 			  if (
; 877  : 				  g_bRealisticAvionics && 
; 878  : 				  (SimLibElapsedTime - timeOfDeath > armingdelay *10  || 
; 879  : 				  (parent && ((AircraftClass *)parent.get())->IsDigital()))
; 880  : 			  )

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	$LN16@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	edx, DWORD PTR [ecx+288]
	mov	DWORD PTR tv5048[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv5048[ebp]
	mov	eax, DWORD PTR tv5048[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv5051[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv5051[ebp]
	movss	xmm1, DWORD PTR _armingdelay$[ebp]
	mulss	xmm1, DWORD PTR __real@41200000
	comiss	xmm0, xmm1
	ja	SHORT $LN15@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??B?$VuBin@VFalconEntity@@@@QBE_NXZ	; VuBin<FalconEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	$LN16@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	ecx, eax
	call	?IsDigital@AircraftClass@@QAEHXZ	; AircraftClass::IsDigital
	test	eax, eax
	je	$LN16@Exec
$LN15@Exec:

; 881  : 			  {
; 882  : 				  //me123 addet arming check, for now digi's dont's have arming delay, becourse they will fuck up the delivery
; 883  : 				  SendDamageMessage(hitObj,0,FalconDamageType::BombDamage);

	push	3
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+728]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendDamageMessage@SimWeaponClass@@QAEXPAVFalconEntity@@MH@Z ; SimWeaponClass::SendDamageMessage

; 884  : 				  // JB 000816 ApplyProximityDamage( terrainHeight, 0.0f ); // Cause of objects not blowing up on runways
; 885  : 				  ApplyProximityDamage( terrainHeight, detonateHeight );

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+720]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _terrainHeight$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyProximityDamage@BombClass@@IAEXMM@Z ; BombClass::ApplyProximityDamage

; 886  : 				  edeltaX = XDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+748]

; 887  : 				  edeltaY = YDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+752]

; 888  : 				  edeltaZ = ZDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+756]

; 889  : 				  SetDelta (0.0f, 0.0f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta

; 890  : 				  SetExploding(TRUE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetExploding@SimBaseClass@@QAEXH@Z	; SimBaseClass::SetExploding

; 891  : 
; 892  : 				  // if we've hit a flat container, NULL it out now so that this is
; 893  : 				  // treated as a ground hit later on
; 894  : 				  if (hitObj->IsSetCampaignFlag (FEAT_FLAT_CONTAINER))

	push	256					; 00000100H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+728]
	call	?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z ; SimBaseClass::IsSetCampaignFlag
	test	eax, eax
	je	SHORT $LN14@Exec

; 895  : 				  {
; 896  : 					  hitObj = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+728], 0
$LN14@Exec:

; 897  : 				  }
; 898  : 			  }

	jmp	$LN11@Exec
$LN16@Exec:

; 899  : 			  //else if (!g_bArmingDelay)	MI
; 900  : 			  else if(!g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	jne	$LN11@Exec

; 901  : 			  {
; 902  : 				  SendDamageMessage(hitObj,0,FalconDamageType::BombDamage);

	push	3
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+728]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendDamageMessage@SimWeaponClass@@QAEXPAVFalconEntity@@MH@Z ; SimWeaponClass::SendDamageMessage

; 903  : 				  // JB 000816 ApplyProximityDamage( terrainHeight, 0.0f ); // Cause of objects not blowing up on runways
; 904  : 				  ApplyProximityDamage( terrainHeight, detonateHeight );

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+720]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _terrainHeight$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyProximityDamage@BombClass@@IAEXMM@Z ; BombClass::ApplyProximityDamage

; 905  : 				  edeltaX = XDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+748]

; 906  : 				  edeltaY = YDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+752]

; 907  : 				  edeltaZ = ZDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+756]

; 908  : 				  SetDelta (0.0f, 0.0f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta

; 909  : 				  SetExploding(TRUE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetExploding@SimBaseClass@@QAEXH@Z	; SimBaseClass::SetExploding

; 910  : 
; 911  : 				  // if we've hit a flat container, NULL it out now so that this is
; 912  : 				  // treated as a ground hit later on
; 913  : 				  if (hitObj->IsSetCampaignFlag (FEAT_FLAT_CONTAINER))

	push	256					; 00000100H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+728]
	call	?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z ; SimBaseClass::IsSetCampaignFlag
	test	eax, eax
	je	SHORT $LN11@Exec

; 914  : 				  {
; 915  : 					  hitObj = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+728], 0
$LN11@Exec:

; 916  : 				  }
; 917  : 			  }
; 918  : 		  }

	jmp	$LN6@Exec
$LN17@Exec:

; 919  : 		  else if (z >= terrainHeight )

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+744]
	comiss	xmm0, DWORD PTR _terrainHeight$[ebp]
	jb	$LN6@Exec

; 920  : 		  {
; 921  : 			  if (bombType == None && (SimLibElapsedTime - timeOfDeath > armingdelay *10.0f || (parent && ((AircraftClass *)parent.get())->IsDigital())))//me123 addet arming check

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+700], 0
	jne	$LN8@Exec
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	ecx, DWORD PTR [eax+288]
	mov	DWORD PTR tv5121[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv5121[ebp]
	mov	edx, DWORD PTR tv5121[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv5124[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv5124[ebp]
	movss	xmm1, DWORD PTR _armingdelay$[ebp]
	mulss	xmm1, DWORD PTR __real@41200000
	comiss	xmm0, xmm1
	ja	SHORT $LN7@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??B?$VuBin@VFalconEntity@@@@QBE_NXZ	; VuBin<FalconEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	$LN8@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	ecx, eax
	call	?IsDigital@AircraftClass@@QAEHXZ	; AircraftClass::IsDigital
	test	eax, eax
	je	$LN8@Exec
$LN7@Exec:

; 922  : 			  {
; 923  : 				  // Interpolate
; 924  : 				  delta = (z - terrainHeight) / (z - ZPos());

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+744]
	subss	xmm0, DWORD PTR _terrainHeight$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5444[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv5139[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+744]
	subss	xmm0, DWORD PTR tv5139[ebp]
	movss	xmm1, DWORD PTR tv5444[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _delta$[ebp], xmm1

; 925  : 
; 926  : 				  x = x - delta * (x - XPos());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv5145[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+736]
	subss	xmm0, DWORD PTR tv5145[ebp]
	mulss	xmm0, DWORD PTR _delta$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+736]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+736], xmm1

; 927  : 				  y = y - delta * (y - YPos());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv5155[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+740]
	subss	xmm0, DWORD PTR tv5155[ebp]
	mulss	xmm0, DWORD PTR _delta$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+740]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+740], xmm1

; 928  : 
; 929  : 				  edeltaX = XDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+748]

; 930  : 				  edeltaY = YDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+752]

; 931  : 				  edeltaZ = ZDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+756]

; 932  : 				  SetDelta (0.0f, 0.0f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta

; 933  : 
; 934  : 				  SetYPR (Yaw() + (float)rand()/(float)RAND_MAX, 0.0F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv5180[ebp]
	movss	xmm0, DWORD PTR tv5180[ebp]
	movss	DWORD PTR tv5446[ebp], xmm0
	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	movss	xmm1, DWORD PTR tv5446[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetYPR@VuEntity@@QAEXMMM@Z		; VuEntity::SetYPR

; 935  : 
; 936  : 				  SetFlag (ON_GROUND);

	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetFlag

; 937  : 				  z = terrainHeight;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _terrainHeight$[ebp]
	movss	DWORD PTR [eax+744], xmm0

; 938  : 
; 939  : 				  SetExploding(TRUE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetExploding@SimBaseClass@@QAEXH@Z	; SimBaseClass::SetExploding

; 940  : 
; 941  : 				  ApplyProximityDamage( terrainHeight, detonateHeight);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+720]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _terrainHeight$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyProximityDamage@BombClass@@IAEXMM@Z ; BombClass::ApplyProximityDamage

; 942  : 			  }
; 943  : 			  else

	jmp	SHORT $LN6@Exec
$LN8@Exec:

; 944  : 			  {
; 945  : 				  SetDead (TRUE);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+364]
	call	edx
$LN6@Exec:

; 946  : 			  }
; 947  : 		  }
; 948  : 	  }
; 949  : 	  //MI this else is causing our CBU's to not burst with a BA < 900 because of the check above
; 950  : 	  //else
; 951  : 		if (bheight > 0 && z >= terrainHeight - bheight && !IsSetFlag( SHOW_EXPLOSION ) && bombType == BombClass::None )//me123 check addet to making flares stop exploding

	movss	xmm0, DWORD PTR _bheight$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN5@Exec
	movss	xmm0, DWORD PTR _terrainHeight$[ebp]
	subss	xmm0, DWORD PTR _bheight$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+744]
	comiss	xmm1, xmm0
	jb	$LN5@Exec
	push	256					; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	jne	$LN5@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+700], 0
	jne	$LN5@Exec

; 952  : 		{
; 953  : 			// for altitude detonations we start the effect here
; 954  : 			SetFlag( SHOW_EXPLOSION );

	push	256					; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetFlag

; 955  : 
; 956  : 
; 957  : 			// 2002-02-26 ADDED BY S.G. If our target is an aggregated entity, send a 'SendDamageMessage' message to the target and let the 2D engine sort out what gets destroyed...
; 958  : 			if (targetPtr) 

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+656], 0
	je	$LN1@Exec

; 959  : 			{
; 960  : 				// First get the campaign object if it's still a sim entity
; 961  : 				CampBaseClass *campBaseObj;
; 962  : 				if (targetPtr->BaseData()->IsSim()) // If we're a SIM object, get our campaign object

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN3@Exec

; 963  : 					campBaseObj = ((SimBaseClass*)targetPtr->BaseData())->GetCampaignObject();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+656]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _campBaseObj$31[ebp], eax

; 964  : 				else

	jmp	SHORT $LN2@Exec
$LN3@Exec:

; 965  : 					campBaseObj = (CampBaseClass *)targetPtr->BaseData();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+656]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR _campBaseObj$31[ebp], eax
$LN2@Exec:

; 966  : 				// Now find out if our campaign object is aggregated
; 967  : 				if (campBaseObj && campBaseObj->IsAggregate()) 

	cmp	DWORD PTR _campBaseObj$31[ebp], 0
	je	SHORT $LN1@Exec
	mov	ecx, DWORD PTR _campBaseObj$31[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	je	SHORT $LN1@Exec

; 968  : 				{
; 969  : 					// Yes, send a damage message right away otherwise the other code is not going to deal with it...
; 970  : 					SendDamageMessage(campBaseObj,0,FalconDamageType::BombDamage);

	push	3
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _campBaseObj$31[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendDamageMessage@SimWeaponClass@@QAEXPAVFalconEntity@@MH@Z ; SimWeaponClass::SendDamageMessage
$LN1@Exec:

; 971  : 				}
; 972  : 			}
; 973  : 
; 974  : 			endMessage = new FalconMissileEndMessage (Id(), FalconLocalGame);

	push	285					; 0000011dH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T27[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T27[ebp], 0
	je	SHORT $LN111@Exec
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN109@Exec
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv3169[ebp], eax
	jmp	SHORT $LN110@Exec
$LN109@Exec:
	mov	DWORD PTR tv3169[ebp], 0
$LN110@Exec:
	push	1
	mov	edx, DWORD PTR tv3169[ebp]
	push	edx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T27[ebp]
	call	??0FalconMissileEndMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconMissileEndMessage::FalconMissileEndMessage
	mov	DWORD PTR tv3180[ebp], eax
	jmp	SHORT $LN112@Exec
$LN111@Exec:
	mov	DWORD PTR tv3180[ebp], 0
$LN112@Exec:
	mov	eax, DWORD PTR tv3180[ebp]
	mov	DWORD PTR $T14[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T14[ebp]
	mov	DWORD PTR _endMessage$[ebp], ecx

; 975  : 			endMessage->RequestReliableTransmit ();

	mov	ecx, DWORD PTR _endMessage$[ebp]
	call	?RequestReliableTransmit@VuMessage@@QAEXXZ ; VuMessage::RequestReliableTransmit

; 976  : 			endMessage->RequestOutOfBandTransmit ();

	mov	ecx, DWORD PTR _endMessage$[ebp]
	call	?RequestOutOfBandTransmit@VuMessage@@QAEXXZ ; VuMessage::RequestOutOfBandTransmit

; 977  : 			endMessage->dataBlock.fEntityID		= parent->Id();

	lea	edx, DWORD PTR $T7[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	DWORD PTR [eax+63], ecx
	mov	DWORD PTR [eax+67], edx

; 978  : 			endMessage->dataBlock.fCampID		= parent->GetCampID();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	DWORD PTR tv3217[ebp], eax
	mov	ecx, DWORD PTR tv3217[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv3217[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	WORD PTR [ecx+71], ax

; 979  : 			endMessage->dataBlock.fSide			= (uchar)parent->GetCountry();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	DWORD PTR tv3231[ebp], eax
	mov	edx, DWORD PTR tv3231[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv3231[ebp]
	mov	edx, DWORD PTR [eax+120]
	call	edx
	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [ecx+77], al

; 980  : 			endMessage->dataBlock.fPilotID		= shooterPilotSlot;

	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+680]
	mov	BYTE PTR [edx+73], cl

; 981  : 			endMessage->dataBlock.fIndex		= parent->Type();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	WORD PTR [edx+75], ax

; 982  : 			endMessage->dataBlock.dEntityID		= FalconNullId;

	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax+48], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+52], edx

; 983  : 			endMessage->dataBlock.dCampID		= 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	WORD PTR [ecx+56], ax

; 984  : 			endMessage->dataBlock.dSide			= 0;

	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [edx+62], 0

; 985  : 			endMessage->dataBlock.dPilotID		= 0;

	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [eax+58], 0

; 986  : 			endMessage->dataBlock.dIndex		= 0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	WORD PTR [edx+60], cx

; 987  : 			endMessage->dataBlock.fWeaponUID	= Id();

	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	DWORD PTR [eax+82], ecx
	mov	DWORD PTR [eax+86], edx

; 988  : 			endMessage->dataBlock.wIndex 		= Type();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	WORD PTR [ecx+115], ax

; 989  : 			endMessage->dataBlock.x				= XPos() + XDelta() * SimLibMajorFrameTime * 2.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv5282[ebp]
	movss	xmm0, DWORD PTR tv5282[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5448[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv5286[ebp]
	movss	xmm0, DWORD PTR tv5286[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv5448[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _endMessage$[ebp]
	movss	DWORD PTR [edx+90], xmm1

; 990  : 			endMessage->dataBlock.y				= YPos() + YDelta() * SimLibMajorFrameTime * 2.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv5291[ebp]
	movss	xmm0, DWORD PTR tv5291[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5450[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv5295[ebp]
	movss	xmm0, DWORD PTR tv5295[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv5450[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _endMessage$[ebp]
	movss	DWORD PTR [eax+94], xmm1

; 991  : 			endMessage->dataBlock.z				= ZPos() + ZDelta() * SimLibMajorFrameTime * 2.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv5300[ebp]
	movss	xmm0, DWORD PTR tv5300[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv5452[ebp], xmm0
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv5304[ebp]
	movss	xmm0, DWORD PTR tv5304[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv5452[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _endMessage$[ebp]
	movss	DWORD PTR [ecx+98], xmm1

; 992  : 			endMessage->dataBlock.xDelta		= XDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	mov	edx, DWORD PTR _endMessage$[ebp]
	fstp	DWORD PTR [edx+102]

; 993  : 			endMessage->dataBlock.yDelta		= YDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	mov	eax, DWORD PTR _endMessage$[ebp]
	fstp	DWORD PTR [eax+106]

; 994  : 			endMessage->dataBlock.zDelta		= ZDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	mov	ecx, DWORD PTR _endMessage$[ebp]
	fstp	DWORD PTR [ecx+110]

; 995  : 			endMessage->dataBlock.groundType    = -1;

	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [edx+114], -1

; 996  : 			endMessage->dataBlock.endCode		= FalconMissileEndMessage::BombImpact;

	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	DWORD PTR [eax+78], 11			; 0000000bH

; 997  : 
; 998  : 			endMessage->SetParticleEffectName(auxData->psBombImpact); // MLR 6/26/2004 - 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+832]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _endMessage$[ebp]
	call	?SetParticleEffectName@FalconMissileEndMessage@@QAEXPAD@Z ; FalconMissileEndMessage::SetParticleEffectName

; 999  : 
; 1000 : 			FalconSendMessage (endMessage,FALSE);

	push	0
	mov	ecx, DWORD PTR _endMessage$[ebp]
	push	ecx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 1001 : 
; 1002 : 			// set height at which we detonated for applying
; 1003 : 			// proximity damage
; 1004 : 			detonateHeight = max( 0.0f, terrainHeight - z );

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _terrainHeight$[ebp]
	subss	xmm0, DWORD PTR [edx+744]
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN113@Exec
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv3382[ebp], xmm0
	jmp	SHORT $LN114@Exec
$LN113@Exec:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _terrainHeight$[ebp]
	subss	xmm0, DWORD PTR [eax+744]
	movss	DWORD PTR tv3382[ebp], xmm0
$LN114@Exec:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv3382[ebp]
	movss	DWORD PTR [ecx+720], xmm0
$LN5@Exec:

; 1005 : 		}
; 1006 : 		SetPosition (x, y, z);	  

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+744]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+740]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+736]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPosition@VuEntity@@QAEXMMM@Z	; VuEntity::SetPosition
$LN89@Exec:

; 1007 : 	}
; 1008 : 	return TRUE;

	mov	eax, 1
$LN101@Exec:

; 1009 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Exec@BombClass@@UAEHXZ$0:
	mov	eax, DWORD PTR $T26[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Exec@BombClass@@UAEHXZ$1:
	mov	eax, DWORD PTR ?$S1@?JL@??Exec@BombClass@@UAEHXZ@4IA
	and	eax, -2					; fffffffeH
	mov	DWORD PTR ?$S1@?JL@??Exec@BombClass@@UAEHXZ@4IA, eax
	ret	0
__unwindfunclet$?Exec@BombClass@@UAEHXZ$2:
	mov	eax, DWORD PTR $T27[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Exec@BombClass@@UAEHXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1148]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Exec@BombClass@@UAEHXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Exec@BombClass@@UAEHXZ ENDP				; BombClass::Exec
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_initData$ = 8						; size = 4
?Init@BombClass@@UAEXPAVSimInitDataClass@@@Z PROC	; BombClass::Init
; _this$ = ecx

; 156  : void BombClass::Init(SimInitDataClass* initData){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 157  : 	if (initData == NULL){

	cmp	DWORD PTR _initData$[ebp], 0
	jne	SHORT $LN2@Init

; 158  : 		Init();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+456]
	call	eax
$LN2@Init:

; 159  : 	}
; 160  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Init@BombClass@@UAEXPAVSimInitDataClass@@@Z ENDP	; BombClass::Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_wc$ = -36						; size = 4
_dataIdx$ = -32						; size = 4
_wpnDefinition$ = -28					; size = 4
tv91 = -24						; size = 4
$T1 = -20						; size = 4
_classPtr$ = -16					; size = 4
_tmpObject$ = -12					; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?Init@BombClass@@UAEXXZ PROC				; BombClass::Init
; _this$ = ecx

; 163  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 	DrawableObject* tmpObject;
; 165  : 
; 166  : 	tmpObject = drawPointer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	mov	DWORD PTR _tmpObject$[ebp], ecx

; 167  : 	drawPointer = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+332], 0

; 168  : 	SimWeaponClass::Init ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@SimWeaponClass@@UAEXXZ		; SimWeaponClass::Init

; 169  : 	if (tmpObject)

	cmp	DWORD PTR _tmpObject$[ebp], 0
	je	SHORT $LN4@Init

; 170  : 	{
; 171  : 		delete drawPointer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN7@Init
	push	1
	mov	eax, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv91[ebp], eax
	jmp	SHORT $LN8@Init
$LN7@Init:
	mov	DWORD PTR tv91[ebp], 0
$LN8@Init:

; 172  : 		drawPointer = tmpObject;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _tmpObject$[ebp]
	mov	DWORD PTR [ecx+332], edx
$LN4@Init:

; 173  : 	}
; 174  : 
; 175  : 	Falcon4EntityClassType* classPtr;
; 176  : 	WeaponClassDataType* wc;
; 177  : 	SimWeaponDataType* wpnDefinition;
; 178  : 	int dataIdx;
; 179  : 
; 180  : 	// MLR 2003-11-10 cut & paste from MissleClass
; 181  : 	auxData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+832], 0

; 182  : 	classPtr = (Falcon4EntityClassType*)EntityType();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	DWORD PTR _classPtr$[ebp], eax

; 183  : 	wc = (WeaponClassDataType*)classPtr->dataPtr;

	mov	ecx, DWORD PTR _classPtr$[ebp]
	mov	edx, DWORD PTR [ecx+77]
	mov	DWORD PTR _wc$[ebp], edx

; 184  : 	wpnDefinition = &SimWeaponDataTable[classPtr->vehicleDataIndex];

	mov	eax, DWORD PTR _classPtr$[ebp]
	movsx	ecx, WORD PTR [eax+74]
	imul	ecx, 52					; 00000034H
	add	ecx, DWORD PTR ?SimWeaponDataTable@@3PAUSimWeaponDataType@@A ; SimWeaponDataTable
	mov	DWORD PTR _wpnDefinition$[ebp], ecx

; 185  : 	dataIdx = wpnDefinition->dataIdx;

	mov	edx, DWORD PTR _wpnDefinition$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _dataIdx$[ebp], eax

; 186  : 	ReadInput(dataIdx);

	mov	ecx, DWORD PTR _dataIdx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadInput@BombClass@@QAEXH@Z		; BombClass::ReadInput

; 187  : 
; 188  : 	LauInit(); // MLR 3/5/2004 - 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LauInit@BombClass@@QAEXXZ		; BombClass::LauInit

; 189  : 
; 190  : 
; 191  : 	// Am I an LGB
; 192  : 	if (EntityType()->classInfo_[VU_STYPE] == STYPE_BOMB_GUIDED)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	edx, 1
	imul	edx, 3
	movzx	eax, BYTE PTR [eax+edx+8]
	cmp	eax, 2
	jne	SHORT $LN3@Init

; 193  : 		flags |= IsLGB;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+732]
	or	edx, 32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+732], edx
$LN3@Init:

; 194  : 
; 195  : 	//Wombat778 3-09-04 Is this a GPS bomb?
; 196  : 	if (EntityType()->classInfo_[VU_STYPE] == STYPE_BOMB_GPS)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	movzx	edx, BYTE PTR [eax+ecx+8]
	cmp	edx, 4
	jne	SHORT $LN2@Init

; 197  : 		flags |= IsGPS;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+732]
	or	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+732], ecx
$LN2@Init:

; 198  : 	// Cobra - GPS/JSOW
; 199  : 	if (EntityType()->classInfo_[VU_STYPE] == STYPE_BOMB_JSOW)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	movzx	edx, BYTE PTR [eax+ecx+8]
	cmp	edx, 5
	jne	SHORT $LN5@Init

; 200  : 		flags |= (IsGPS | IsJSOW);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+732]
	or	ecx, 768				; 00000300H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+732], ecx
$LN5@Init:

; 201  : 
; 202  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Init@BombClass@@UAEXXZ ENDP				; BombClass::Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_wc$ = -16						; size = 4
_classPtr$ = -12					; size = 4
tv275 = -8						; size = 4
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
_rate$ = 12						; size = 4
_cD$ = 16						; size = 4
_targetPtr$ = 20					; size = 4
?Start@BombClass@@UAEXPAUvector@@0MPAVSimObjectType@@@Z PROC ; BombClass::Start
; _this$ = ecx

; 227  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 228  : 	Falcon4EntityClassType *classPtr;
; 229  : 	WeaponClassDataType *wc;
; 230  : 
; 231  : 	// 2002-02-26 ADDED BY S.G. If we passed a targetPtr, 
; 232  : 	// keep note of it in case the AI target is aggregated. 
; 233  : 	// That way we can send a Damage message to the 2D engine to take care of the target
; 234  : 	if (targetPtr)

	cmp	DWORD PTR _targetPtr$[ebp], 0
	je	SHORT $LN6@Start

; 235  : 		SetTarget(targetPtr);

	mov	eax, DWORD PTR _targetPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTarget@BombClass@@QAEXPAVSimObjectType@@@Z ; BombClass::SetTarget
$LN6@Start:

; 236  : 	// END OF ADDED SECTION
; 237  : 
; 238  : 	if (parent)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??B?$VuBin@VFalconEntity@@@@QBE_NXZ	; VuBin<FalconEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@Start

; 239  : 	{
; 240  : 		flags |= FirstFrame;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+732]
	or	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+732], eax

; 241  : 		//VuReferenceEntity (parent);
; 242  : 		//parentReferenced = TRUE;
; 243  : 		SetYPR(parent->Yaw(), parent->Pitch(), parent->Roll());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetYPR@VuEntity@@QAEXMMM@Z		; VuEntity::SetYPR

; 244  : 	}
; 245  : 	else

	jmp	SHORT $LN4@Start
$LN5@Start:

; 246  : 	{
; 247  : 		SetYPR((float)atan2(rate->y, rate->x), 0.0F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _rate$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _rate$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+4]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv275[ebp]
	fld	DWORD PTR tv275[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetYPR@VuEntity@@QAEXMMM@Z		; VuEntity::SetYPR
$LN4@Start:

; 248  : 	}
; 249  : 
; 250  : 	x = pos->x;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+736], eax

; 251  : 	y = pos->y;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+740], eax

; 252  : 	z = pos->z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+744], eax

; 253  : 
; 254  : 	dragCoeff = cD;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _cD$[ebp]
	movss	DWORD PTR [ecx+724], xmm0

; 255  : 	// edg hack.  drag coeff of 1.0f we assume to be a durandal
; 256  : 	if ( cD >= 1.0f )

	movss	xmm0, DWORD PTR _cD$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN3@Start

; 257  : 		flags |= IsDurandal;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+732]
	or	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+732], eax
$LN3@Start:

; 258  : 
; 259  : 	SetPosition (x, y, z);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+744]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+740]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+736]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPosition@VuEntity@@QAEXMMM@Z	; VuEntity::SetPosition

; 260  : 	CalcTransformMatrix (this);

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?CalcTransformMatrix@@YAXPAVSimBaseClass@@@Z ; CalcTransformMatrix
	add	esp, 4

; 261  : 
; 262  : 	SetDelta (rate->x, rate->y, rate->z);

	mov	eax, DWORD PTR _rate$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _rate$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _rate$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta

; 263  : 	SetYPRDelta(0.0F, 0.0F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetYPRDelta@VuEntity@@QAEXMMM@Z	; VuEntity::SetYPRDelta

; 264  : 
; 265  : 	// sound effect
; 266  : 	//SoundPos.Sfx( SFX_BOMBDROP, 0, 1, 0); // MLR 6/4/2004 - This won't work here anymore
; 267  : 
; 268  : 	// if the bomb is altitude detonated (AGL), check to make sure we're
; 269  : 	// 2.0 sec above the detonation alt when dropped.  If not, we don't fuse and
; 270  : 	// do a ground impact....
; 271  : 
; 272  : 	// hack for testing
; 273  : 	// burstHeight *= 1.2f;
; 274  : 
; 275  : 	if ( burstHeight > 0.0f )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+716]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN1@Start

; 276  : 	{
; 277  : 		// get entity and weapon info
; 278  : 		classPtr = &Falcon4ClassTable[Type() - VU_LAST_ENTITY_TYPE];

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	ecx, ax
	sub	ecx, 100				; 00000064H
	imul	ecx, 81					; 00000051H
	add	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	DWORD PTR _classPtr$[ebp], ecx

; 279  : 		wc = (WeaponClassDataType *)classPtr->dataPtr;

	mov	edx, DWORD PTR _classPtr$[ebp]
	mov	eax, DWORD PTR [edx+77]
	mov	DWORD PTR _wc$[ebp], eax

; 280  : 
; 281  : 		// if we're not a cluster type, we should have no burst height
; 282  : 		if ( !(wc->Flags & WEAP_CLUSTER) )

	mov	ecx, DWORD PTR _wc$[ebp]
	movzx	edx, WORD PTR [ecx+10]
	and	edx, 16					; 00000010H
	jne	SHORT $LN1@Start

; 283  : 		{
; 284  : 			burstHeight = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+716], xmm0
$LN1@Start:

; 285  : 		}
; 286  : 	}
; 287  : 
; 288  : 	hitObj = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+728], 0

; 289  : 
; 290  : 	// for alt fuse
; 291  : 	timeOfDeath = SimLibElapsedTime;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [edx+288], eax

; 292  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Start@BombClass@@UAEXPAUvector@@0MPAVSimObjectType@@@Z ENDP ; BombClass::Start
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Sleep@BombClass@@UAEHXZ PROC				; BombClass::Sleep
; _this$ = ecx

; 222  : int BombClass::Sleep(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 223  : 	return SimWeaponClass::Sleep();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Sleep@SimWeaponClass@@UAEHXZ		; SimWeaponClass::Sleep

; 224  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Sleep@BombClass@@UAEHXZ ENDP				; BombClass::Sleep
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_retval$ = -8						; size = 4
_this$ = -4						; size = 4
?Wake@BombClass@@UAEHXZ PROC				; BombClass::Wake
; _this$ = ecx

; 204  : int BombClass::Wake(){

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 205  : 	int retval = 0;

	mov	DWORD PTR _retval$[ebp], 0

; 206  : 
; 207  : 	// KCK: Sets up this object to become sim aware
; 208  : 	if (IsAwake()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAwake@SimBaseClass@@QBEHXZ		; SimBaseClass::IsAwake
	test	eax, eax
	je	SHORT $LN1@Wake

; 209  : 		return retval;

	mov	eax, DWORD PTR _retval$[ebp]
	jmp	SHORT $LN2@Wake
$LN1@Wake:

; 210  : 	}
; 211  : 
; 212  : 	InitTrail();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+476]
	call	eax

; 213  : 	ExtraGraphics();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+484]
	call	eax

; 214  : 	SimWeaponClass::Wake();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Wake@SimWeaponClass@@UAEHXZ		; SimWeaponClass::Wake

; 215  : 
; 216  : 	// Change the last update time to force and exec next frame;
; 217  : 	// sfr: need to check if this has an effect
; 218  : 	//AlignTimeSubtract (1);
; 219  : 	return retval;

	mov	eax, DWORD PTR _retval$[ebp]
$LN2@Wake:

; 220  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Wake@BombClass@@UAEHXZ ENDP				; BombClass::Wake
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_saveSize$ = -8						; size = 4
_this$ = -4						; size = 4
_file$ = 8						; size = 4
?Save@BombClass@@UAEHPAU_iobuf@@@Z PROC			; BombClass::Save
; _this$ = ecx

; 114  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 115  : 	int saveSize = SimWeaponClass::Save (file);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Save@SimWeaponClass@@UAEHPAU_iobuf@@@Z	; SimWeaponClass::Save
	mov	DWORD PTR _saveSize$[ebp], eax

; 116  : 
; 117  : 	if (flags & IsChaff)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+732]
	and	edx, 4
	je	SHORT $LN3@Save

; 118  : 		bombType = Chaff;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+700], 1
	jmp	SHORT $LN2@Save
$LN3@Save:

; 119  : 	else if (flags & IsFlare)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+732]
	and	edx, 16					; 00000010H
	je	SHORT $LN2@Save

; 120  : 		bombType = Flare;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+700], 2
$LN2@Save:

; 121  : 
; 122  : 	fwrite (&bombType, sizeof (int), 1, file);

	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	push	1
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 700				; 000002bcH
	push	edx
	call	_fwrite
	add	esp, 16					; 00000010H

; 123  : 	return (saveSize + sizeof (int));

	mov	eax, DWORD PTR _saveSize$[ebp]
	add	eax, 4

; 124  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Save@BombClass@@UAEHPAU_iobuf@@@Z ENDP			; BombClass::Save
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_saveSize$ = -8						; size = 4
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?Save@BombClass@@UAEHPAPAE@Z PROC			; BombClass::Save
; _this$ = ecx

; 100  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 	int saveSize = SimWeaponClass::Save (stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Save@SimWeaponClass@@UAEHPAPAE@Z	; SimWeaponClass::Save
	mov	DWORD PTR _saveSize$[ebp], eax

; 102  : 
; 103  : 	if (flags & IsChaff)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+732]
	and	edx, 4
	je	SHORT $LN3@Save

; 104  : 		bombType = Chaff;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+700], 1
	jmp	SHORT $LN2@Save
$LN3@Save:

; 105  : 	else if (flags & IsFlare)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+732]
	and	edx, 16					; 00000010H
	je	SHORT $LN2@Save

; 106  : 		bombType = Flare;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+700], 2
$LN2@Save:

; 107  : 
; 108  : 	memcpy (*stream, &bombType, sizeof (int));

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 700				; 000002bcH
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 109  : 	*stream += sizeof (int);

	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx

; 110  : 	return (saveSize + sizeof (int));

	mov	eax, DWORD PTR _saveSize$[ebp]
	add	eax, 4

; 111  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Save@BombClass@@UAEHPAPAE@Z ENDP			; BombClass::Save
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SaveSize@BombClass@@UAEHXZ PROC			; BombClass::SaveSize
; _this$ = ecx

; 95   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 	return SimWeaponClass::SaveSize() + sizeof (BombType);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveSize@SimWeaponClass@@UAEHXZ	; SimWeaponClass::SaveSize
	add	eax, 4

; 97   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SaveSize@BombClass@@UAEHXZ ENDP			; BombClass::SaveSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CleanupLocalData@BombClass@@AAEXXZ PROC		; BombClass::CleanupLocalData
; _this$ = ecx

; 147  : void BombClass::CleanupLocalData(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 	// empty
; 149  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CleanupLocalData@BombClass@@AAEXXZ ENDP		; BombClass::CleanupLocalData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_btype$ = 8						; size = 4
?InitLocalData@BombClass@@AAEXW4BombType@1@@Z PROC	; BombClass::InitLocalData
; _this$ = ecx

; 131  : void BombClass::InitLocalData(BombType btype){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 132  : 	bombType = btype;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _btype$[ebp]
	mov	DWORD PTR [eax+700], ecx

; 133  : 	lauTimer = 0; // MLR 3/5/2004 - 

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+824], 0

; 134  : 	lauWeaponId = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+812], 0

; 135  : 	burstHeight = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+716], xmm0

; 136  : 	detonateHeight = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+720], xmm0

; 137  : 	timeOfDeath = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+288], 0

; 138  : 	specialData.flags |= MOTION_BMB_AI;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	or	edx, 1048576				; 00100000H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+172], edx

; 139  : 	flags = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+732], 0

; 140  : 	dragCoeff = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+724], xmm0

; 141  : 
; 142  : 	desDxPrev = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+704], xmm0

; 143  : 	desDyPrev = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+708], xmm0

; 144  : 	desDzPrev = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+712], xmm0

; 145  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?InitLocalData@BombClass@@AAEXW4BombType@1@@Z ENDP	; BombClass::InitLocalData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CleanupData@BombClass@@UAEXXZ PROC			; BombClass::CleanupData
; _this$ = ecx

; 151  : void BombClass::CleanupData(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 152  : 	CleanupLocalData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanupLocalData@BombClass@@AAEXXZ	; BombClass::CleanupLocalData

; 153  : 	SimWeaponClass::CleanupData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanupData@SimWeaponClass@@UAEXXZ	; SimWeaponClass::CleanupData

; 154  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CleanupData@BombClass@@UAEXXZ ENDP			; BombClass::CleanupData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InitData@BombClass@@UAEXXZ PROC			; BombClass::InitData
; _this$ = ecx

; 126  : void BombClass::InitData(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 127  : 	SimWeaponClass::InitData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitData@SimWeaponClass@@UAEXXZ	; SimWeaponClass::InitData

; 128  : 	InitLocalData(static_cast<BombType>(bombType));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+700]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitLocalData@BombClass@@AAEXW4BombType@1@@Z ; BombClass::InitLocalData

; 129  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InitData@BombClass@@UAEXXZ ENDP			; BombClass::InitData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1BombClass@@UAE@XZ PROC				; BombClass::~BombClass
; _this$ = ecx

; 90   : BombClass::~BombClass(){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1BombClass@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BombClass@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 91   : 	CleanupLocalData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanupLocalData@BombClass@@AAEXXZ	; BombClass::CleanupLocalData

; 92   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SimWeaponClass@@UAE@XZ		; SimWeaponClass::~SimWeaponClass
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1BombClass@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1SimWeaponClass@@UAE@XZ		; SimWeaponClass::~SimWeaponClass
__ehhandler$??1BombClass@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1BombClass@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1BombClass@@UAE@XZ ENDP				; BombClass::~BombClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 4
_btype$ = 12						; size = 4
??0BombClass@@QAE@HW4BombType@0@@Z PROC			; BombClass::BombClass
; _this$ = ecx

; 86   : BombClass::BombClass (int type, BombType btype) : SimWeaponClass(type){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0BombClass@@QAE@HW4BombType@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0SimWeaponClass@@QAE@H@Z		; SimWeaponClass::SimWeaponClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7BombClass@@6B@

; 87   : 	InitLocalData(btype);

	mov	edx, DWORD PTR _btype$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitLocalData@BombClass@@AAEXW4BombType@1@@Z ; BombClass::InitLocalData

; 88   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0BombClass@@QAE@HW4BombType@0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1SimWeaponClass@@UAE@XZ		; SimWeaponClass::~SimWeaponClass
__ehhandler$??0BombClass@@QAE@HW4BombType@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0BombClass@@QAE@HW4BombType@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0BombClass@@QAE@HW4BombType@0@@Z ENDP			; BombClass::BombClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_bt$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_filePtr$ = 8						; size = 4
??0BombClass@@QAE@PAU_iobuf@@@Z PROC			; BombClass::BombClass
; _this$ = ecx

; 80   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0BombClass@@QAE@PAU_iobuf@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _filePtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0SimWeaponClass@@QAE@PAU_iobuf@@@Z	; SimWeaponClass::SimWeaponClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7BombClass@@6B@

; 81   : 	BombType bt;
; 82   : 	fread(&bt, sizeof(bt), 1, filePtr);

	mov	edx, DWORD PTR _filePtr$[ebp]
	push	edx
	push	1
	push	4
	lea	eax, DWORD PTR _bt$[ebp]
	push	eax
	call	_fread
	add	esp, 16					; 00000010H

; 83   : 	InitLocalData(bt);

	mov	ecx, DWORD PTR _bt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitLocalData@BombClass@@AAEXW4BombType@1@@Z ; BombClass::InitLocalData

; 84   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0BombClass@@QAE@PAU_iobuf@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1SimWeaponClass@@UAE@XZ		; SimWeaponClass::~SimWeaponClass
__ehhandler$??0BombClass@@QAE@PAU_iobuf@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0BombClass@@QAE@PAU_iobuf@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0BombClass@@QAE@PAU_iobuf@@@Z ENDP			; BombClass::BombClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_bt$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_stream$ = 8						; size = 4
_rem$ = 12						; size = 4
??0BombClass@@QAE@PAPAEPAJ@Z PROC			; BombClass::BombClass
; _this$ = ecx

; 66   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0BombClass@@QAE@PAPAEPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0SimWeaponClass@@QAE@PAPAEPAJ@Z	; SimWeaponClass::SimWeaponClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7BombClass@@6B@

; 67   : 	BombType bt;
; 68   : 	memcpychk(&bt, stream, sizeof(bt), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	lea	edx, DWORD PTR _bt$[ebp]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 69   : 	InitLocalData(bt);

	mov	eax, DWORD PTR _bt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitLocalData@BombClass@@AAEXW4BombType@1@@Z ; BombClass::InitLocalData

; 70   : 
; 71   : 	if (parent && !IsLocal()) {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??B?$VuBin@VFalconEntity@@@@QBE_NXZ	; VuBin<FalconEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@BombClass
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@BombClass

; 72   : 		flags |= FirstFrame;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+732]
	or	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+732], ecx

; 73   : 		//VuReferenceEntity (parent);
; 74   : 		//parentReferenced = TRUE;
; 75   : 		SetYPR(parent->Yaw(), parent->Pitch(), parent->Roll());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetYPR@VuEntity@@QAEXMMM@Z		; VuEntity::SetYPR
$LN1@BombClass:

; 76   : 	}
; 77   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0BombClass@@QAE@PAPAEPAJ@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1SimWeaponClass@@UAE@XZ		; SimWeaponClass::~SimWeaponClass
__ehhandler$??0BombClass@@QAE@PAPAEPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0BombClass@@QAE@PAPAEPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0BombClass@@QAE@PAPAEPAJ@Z ENDP			; BombClass::BombClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SpecialGraphics@BombClass@@MAEXXZ PROC			; BombClass::SpecialGraphics
; _this$ = ecx

; 1326 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1327 : 	if(SimLibElapsedTime - timeOfDeath > 1 * SEC_TO_MSEC)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	ecx, DWORD PTR [eax+288]
	cmp	ecx, 1000				; 000003e8H
	jbe	SHORT $LN3@SpecialGra

; 1328 : 	{
; 1329 : 		if (((DrawableBSP*)drawPointer)->GetNumSwitches() > 0)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+332]
	call	?GetNumSwitches@DrawableBSP@@QAEHXZ	; DrawableBSP::GetNumSwitches
	test	eax, eax
	jle	SHORT $LN3@SpecialGra

; 1330 : 		{
; 1331 : 			((DrawableBSP *)drawPointer)->SetSwitchMask( 0, 1 );

	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask
$LN3@SpecialGra:

; 1332 : 		}
; 1333 : 	}
; 1334 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SpecialGraphics@BombClass@@MAEXXZ ENDP			; BombClass::SpecialGraphics
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ExtraGraphics@BombClass@@MAEXXZ PROC			; BombClass::ExtraGraphics
; _this$ = ecx

; 295  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 296  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ExtraGraphics@BombClass@@MAEXXZ ENDP			; BombClass::ExtraGraphics
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_gridIt$ = -248						; size = 60
_maxHeight$ = -188					; size = 4
_featureWalker$2 = -184					; size = 12
_objectWalker$3 = -172					; size = 12
tv759 = -160						; size = 4
tv666 = -156						; size = 4
tv693 = -152						; size = 4
tv681 = -148						; size = 4
tv743 = -144						; size = 4
tv662 = -140						; size = 4
tv769 = -136						; size = 4
tv703 = -132						; size = 4
tv739 = -128						; size = 4
tv763 = -124						; size = 4
tv735 = -120						; size = 4
tv670 = -116						; size = 4
tv767 = -112						; size = 4
tv761 = -108						; size = 4
tv731 = -104						; size = 4
tv654 = -100						; size = 4
tv709 = -96						; size = 4
tv765 = -92						; size = 4
tv658 = -88						; size = 4
_hat$ = -84						; size = 4
_modifier$ = -80					; size = 4
_tmpZ$ = -76						; size = 4
tv230 = -72						; size = 4
tv165 = -68						; size = 4
_damageMod$ = -64					; size = 4
_p$4 = -60						; size = 4
_objective$ = -56					; size = 4
tv183 = -52						; size = 4
_tmpY$ = -48						; size = 4
_tmpX$ = -44						; size = 4
_HaG$5 = -40						; size = 4
_damageRadiusSqrd$ = -36				; size = 4
_strength$ = -32					; size = 4
_rangeSquare$ = -28					; size = 4
_wc$ = -24						; size = 4
_testObject$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_groundZ$ = 8						; size = 4
_detonateHeight$ = 12					; size = 4
?ApplyProximityDamage@BombClass@@IAEXMM@Z PROC		; BombClass::ApplyProximityDamage
; _this$ = ecx

; 1078 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ApplyProximityDamage@BombClass@@IAEXMM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 236				; 000000ecH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1079 : 	float tmpX, tmpY, tmpZ;
; 1080 : 	float rangeSquare;
; 1081 : 	SimBaseClass* testObject;
; 1082 : 	CampBaseClass* objective;
; 1083 : 	float damageRadiusSqrd;
; 1084 : 	float strength, damageMod;
; 1085 : 	WeaponClassDataType* wc;
; 1086 : 	wc = (WeaponClassDataType *)(Falcon4ClassTable[Type() - VU_LAST_ENTITY_TYPE].dataPtr);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	eax, ax
	sub	eax, 100				; 00000064H
	imul	eax, 81					; 00000051H
	mov	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	edx, DWORD PTR [ecx+eax+77]
	mov	DWORD PTR _wc$[ebp], edx

; 1087 : 	float modifier = 1.0F;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _modifier$[ebp], xmm0

; 1088 : 	if (wc && wc->DamageType == NuclearDam)

	cmp	DWORD PTR _wc$[ebp], 0
	je	SHORT $LN34@ApplyProxi
	mov	eax, DWORD PTR _wc$[ebp]
	cmp	DWORD PTR [eax+4], 9
	jne	SHORT $LN34@ApplyProxi

; 1089 : 		modifier = g_fNukeDamageRadius;

	movss	xmm0, DWORD PTR ?g_fNukeDamageRadius@@3MA
	movss	DWORD PTR _modifier$[ebp], xmm0
$LN34@ApplyProxi:

; 1090 : #ifdef VU_GRID_TREE_Y_MAJOR
; 1091 : 	VuGridIterator gridIt(ObjProxList, YPos(), XPos(), NM_TO_FT * (3.5F * modifier));

	movss	xmm0, DWORD PTR __real@40600000
	mulss	xmm0, DWORD PTR _modifier$[ebp]
	mulss	xmm0, DWORD PTR __real@45bde1b0
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ?ObjProxList@@3PAVVuGridTree@@A ; ObjProxList
	push	ecx
	lea	ecx, DWORD PTR _gridIt$[ebp]
	call	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z ; VuGridIterator::VuGridIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1092 : #else
; 1093 : 	VuGridIterator gridIt(ObjProxList, XPos(), YPos(), NM_TO_FT * (3.5F * modifier));
; 1094 : #endif
; 1095 : 
; 1096 : 	//MI
; 1097 : 	float hat = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _hat$[ebp], xmm0

; 1098 : 	float maxHeight = 3000.0f;

	movss	xmm0, DWORD PTR __real@453b8000
	movss	DWORD PTR _maxHeight$[ebp], xmm0

; 1099 : 
; 1100 : 
; 1101 : 	// for altitude detonations (cluster bomb), the damage radius must
; 1102 : 	// be changed depending on the detonation height
; 1103 : 	if ( burstHeight > 0.0f )

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+716]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN33@ApplyProxi

; 1104 : 	{
; 1105 : 		// COBRA - RED - Fixed in a more RL way
; 1106 : 		// Height above Ground
; 1107 : 		float HaG=detonateHeight-groundZ;

	movss	xmm0, DWORD PTR _detonateHeight$[ebp]
	subss	xmm0, DWORD PTR _groundZ$[ebp]
	movss	DWORD PTR _HaG$5[ebp], xmm0

; 1108 : 		//damageRadiusSqrd = max( lethalRadiusSqrd / 20, lethalRadiusSqrd * detonateHeight/3000.0f ); 
; 1109 : 		damageRadiusSqrd = min( lethalRadiusSqrd, lethalRadiusSqrd * HaG/1000.0f ); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+684]
	mulss	xmm0, DWORD PTR _HaG$5[ebp]
	divss	xmm0, DWORD PTR __real@447a0000
	comiss	xmm0, DWORD PTR [eax+684]
	jbe	SHORT $LN37@ApplyProxi
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+684]
	movss	DWORD PTR tv165[ebp], xmm0
	jmp	SHORT $LN38@ApplyProxi
$LN37@ApplyProxi:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+684]
	mulss	xmm0, DWORD PTR _HaG$5[ebp]
	divss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR tv165[ebp], xmm0
$LN38@ApplyProxi:
	movss	xmm0, DWORD PTR tv165[ebp]
	movss	DWORD PTR _damageRadiusSqrd$[ebp], xmm0

; 1110 : 		// COBRA _ RED- Scale strenght to have it's Max at 500 Ft, then going down
; 1111 : 		if(HaG<1000)	strength = 1.0f * HaG/1000.0f;

	movss	xmm0, DWORD PTR __real@447a0000
	comiss	xmm0, DWORD PTR _HaG$5[ebp]
	jbe	SHORT $LN32@ApplyProxi
	movss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR _HaG$5[ebp]
	divss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR _strength$[ebp], xmm0
	jmp	SHORT $LN31@ApplyProxi
$LN32@ApplyProxi:

; 1112 : 		else strength = RESCALE(HaG,1000.0f,2000.0f,1.0f,0.1f);

	movss	xmm0, DWORD PTR _HaG$5[ebp]
	subss	xmm0, DWORD PTR __real@447a0000
	mulss	xmm0, DWORD PTR __real@bf666666
	divss	xmm0, DWORD PTR __real@447a0000
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _strength$[ebp], xmm0
$LN31@ApplyProxi:

; 1113 : 		// Bomblets drops, so, always some strengt
; 1114 : 		if(strength<.1f) strength=.1f;

	movss	xmm0, DWORD PTR __real@3dcccccd
	comiss	xmm0, DWORD PTR _strength$[ebp]
	jbe	SHORT $LN30@ApplyProxi
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _strength$[ebp], xmm0
$LN30@ApplyProxi:

; 1115 : 
; 1116 : 	} else	{

	jmp	SHORT $LN29@ApplyProxi
$LN33@ApplyProxi:

; 1117 : 		damageRadiusSqrd = lethalRadiusSqrd;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+684]
	movss	DWORD PTR _damageRadiusSqrd$[ebp], xmm0

; 1118 : 		strength = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _strength$[ebp], xmm0
$LN29@ApplyProxi:

; 1119 : 	}
; 1120 : 
; 1121 : 	if (/*parentReferenced && */SimDriver.objectList){		

	cmp	DWORD PTR ?SimDriver@@3VSimulationDriver@@A, 0
	je	$LN28@ApplyProxi

; 1122 : 		// Damage multiplier for damage type
; 1123 : 		switch (wc->DamageType){

	mov	edx, DWORD PTR _wc$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv183[ebp], eax
	mov	ecx, DWORD PTR tv183[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv183[ebp], ecx
	cmp	DWORD PTR tv183[ebp], 7
	ja	SHORT $LN24@ApplyProxi
	mov	edx, DWORD PTR tv183[ebp]
	movzx	eax, BYTE PTR $LN43@ApplyProxi[edx]
	jmp	DWORD PTR $LN45@ApplyProxi[eax*4]
$LN25@ApplyProxi:

; 1124 : 			case PenetrationDam:
; 1125 : 			case HeaveDam:
; 1126 : 			case KineticDam:
; 1127 : 			case IncendairyDam:
; 1128 : 			case ChemicalDam:
; 1129 : 				damageMod = 1.0F;  // Cobra - no penalties

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _damageMod$[ebp], xmm0

; 1130 : 				//damageMod = 0.25F;
; 1131 : 				break;

	jmp	SHORT $LN26@ApplyProxi
$LN24@ApplyProxi:

; 1132 : 			case HighExplosiveDam:
; 1133 : 			case ProximityDam:
; 1134 : 			case HydrostaticDam:
; 1135 : 			case OtherDam:
; 1136 : 			case NoDamage:
; 1137 : 			default:
; 1138 : 				damageMod = 1.0F;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _damageMod$[ebp], xmm0
$LN26@ApplyProxi:

; 1139 : 				break;
; 1140 : 		}
; 1141 : 
; 1142 : 		// Check vs vehicles
; 1143 : 		VuListIterator objectWalker(SimDriver.objectList);

	mov	ecx, DWORD PTR ?SimDriver@@3VSimulationDriver@@A
	push	ecx
	lea	ecx, DWORD PTR _objectWalker$3[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 1144 : 		testObject = (SimBaseClass*) objectWalker.GetFirst();

	lea	ecx, DWORD PTR _objectWalker$3[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _testObject$[ebp], eax
$LN42@ApplyProxi:

; 1145 : 		while (testObject){

	cmp	DWORD PTR _testObject$[ebp], 0
	je	$LN22@ApplyProxi

; 1146 : 			// until digi's are smarter about thier bombing, prevent them
; 1147 : 			// from dying in their own blast
; 1148 : 			// 2002-04-21 MN check for damage type and only skip if it is not a nuclear
; 1149 : 			if ( wc->DamageType != NuclearDam && (testObject == parent &&
; 1150 : 				 parent && parent->IsAirplane() &&
; 1151 : 				 ( ((AircraftClass *)parent.get())->IsDigital() ||
; 1152 : 				 ((AircraftClass *)parent.get())->AutopilotType() == AircraftClass::CombatAP  ) ))

	mov	edx, DWORD PTR _wc$[ebp]
	cmp	DWORD PTR [edx+4], 9
	je	$LN21@ApplyProxi
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 688				; 000002b0H
	push	eax
	mov	ecx, DWORD PTR _testObject$[ebp]
	push	ecx
	call	??$?8VFalconEntity@@@@YA_NPBXABV?$VuBin@VFalconEntity@@@@@Z ; operator==<FalconEntity>
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	$LN21@ApplyProxi
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??B?$VuBin@VFalconEntity@@@@QBE_NXZ	; VuBin<FalconEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@ApplyProxi
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	DWORD PTR tv230[ebp], eax
	mov	ecx, DWORD PTR tv230[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv230[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	je	SHORT $LN21@ApplyProxi
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	ecx, eax
	call	?IsDigital@AircraftClass@@QAEHXZ	; AircraftClass::IsDigital
	test	eax, eax
	jne	SHORT $LN20@ApplyProxi
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	ecx, eax
	call	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
	cmp	eax, 2
	jne	SHORT $LN21@ApplyProxi
$LN20@ApplyProxi:

; 1153 : 			{
; 1154 : 				testObject = (SimBaseClass*) objectWalker.GetNext();

	lea	ecx, DWORD PTR _objectWalker$3[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testObject$[ebp], eax

; 1155 : 				continue;

	jmp	$LN42@ApplyProxi
$LN21@ApplyProxi:

; 1156 : 			}
; 1157 : 
; 1158 : 			if (testObject != this)

	mov	ecx, DWORD PTR _testObject$[ebp]
	cmp	ecx, DWORD PTR _this$[ebp]
	je	$LN11@ApplyProxi

; 1159 : 			{
; 1160 : 				tmpX = testObject->XPos() - XPos();

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv654[ebp]
	movss	xmm0, DWORD PTR tv654[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv759[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv658[ebp]
	movss	xmm0, DWORD PTR tv759[ebp]
	subss	xmm0, DWORD PTR tv658[ebp]
	movss	DWORD PTR _tmpX$[ebp], xmm0

; 1161 : 				tmpY = testObject->YPos() - YPos();

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv662[ebp]
	movss	xmm0, DWORD PTR tv662[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv761[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv666[ebp]
	movss	xmm0, DWORD PTR tv761[ebp]
	subss	xmm0, DWORD PTR tv666[ebp]
	movss	DWORD PTR _tmpY$[ebp], xmm0

; 1162 : 				tmpZ = testObject->ZPos() - groundZ;

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv670[ebp]
	movss	xmm0, DWORD PTR tv670[ebp]
	subss	xmm0, DWORD PTR _groundZ$[ebp]
	movss	DWORD PTR _tmpZ$[ebp], xmm0

; 1163 : 
; 1164 : 				rangeSquare = tmpX*tmpX + tmpY*tmpY + tmpZ*tmpZ;

	movss	xmm0, DWORD PTR _tmpX$[ebp]
	mulss	xmm0, DWORD PTR _tmpX$[ebp]
	movss	xmm1, DWORD PTR _tmpY$[ebp]
	mulss	xmm1, DWORD PTR _tmpY$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _tmpZ$[ebp]
	mulss	xmm1, DWORD PTR _tmpZ$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rangeSquare$[ebp], xmm0

; 1165 : 
; 1166 : 				// Height Above Terrain
; 1167 : 				if(parent){

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??B?$VuBin@VFalconEntity@@@@QBE_NXZ	; VuBin<FalconEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN18@ApplyProxi

; 1168 : 					AircraftClass *p = static_cast<AircraftClass*>(parent.get());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	DWORD PTR _p$4[ebp], eax

; 1169 : 					hat = p->ZPos() - OTWDriver.GetGroundLevel(p->XPos(), p->YPos());

	mov	ecx, DWORD PTR _p$4[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv681[ebp]
	movss	xmm0, DWORD PTR tv681[ebp]
	push	0
	mov	ecx, DWORD PTR _p$4[ebp]
	movss	DWORD PTR tv763[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _p$4[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	fstp	DWORD PTR tv693[ebp]
	movss	xmm0, DWORD PTR tv763[ebp]
	subss	xmm0, DWORD PTR tv693[ebp]
	movss	DWORD PTR _hat$[ebp], xmm0
$LN18@ApplyProxi:

; 1170 : 				}
; 1171 : 				//MI special case for airplane. Use the "MaxAlt" field to determine if you blow up or not
; 1172 : 				if(testObject && testObject->IsAirplane() && wc && wc->DamageType == NuclearDam)

	cmp	DWORD PTR _testObject$[ebp], 0
	je	$LN17@ApplyProxi
	mov	eax, DWORD PTR _testObject$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _testObject$[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	je	$LN17@ApplyProxi
	cmp	DWORD PTR _wc$[ebp], 0
	je	$LN17@ApplyProxi
	mov	ecx, DWORD PTR _wc$[ebp]
	cmp	DWORD PTR [ecx+4], 9
	jne	SHORT $LN17@ApplyProxi

; 1173 : 				{
; 1174 : 					//if you're below the entered setting, you're screwed
; 1175 : 					if(fabsf((wc->MaxAlt)*1000.0f) >= fabs(hat)) //JAM 27Sep03 - Should be fabsf

	mov	edx, DWORD PTR _wc$[ebp]
	movsx	eax, BYTE PTR [edx+58]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@447a0000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR tv703[ebp]
	movss	xmm0, DWORD PTR tv703[ebp]
	push	ecx
	movss	xmm1, DWORD PTR _hat$[ebp]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv765[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv709[ebp]
	movss	xmm0, DWORD PTR tv765[ebp]
	comiss	xmm0, DWORD PTR tv709[ebp]
	jb	SHORT $LN16@ApplyProxi

; 1176 : 						// 2002-03-25 MN removed damageMod, as the higher this value, the less the chance to hit
; 1177 : 						SendDamageMessage(testObject,rangeSquare*strength * /*damageMod*/ g_fNukeStrengthFactor,FalconDamageType::ProximityDamage);

	push	9
	movss	xmm0, DWORD PTR _rangeSquare$[ebp]
	mulss	xmm0, DWORD PTR _strength$[ebp]
	mulss	xmm0, DWORD PTR ?g_fNukeStrengthFactor@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _testObject$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendDamageMessage@SimWeaponClass@@QAEXPAVFalconEntity@@MH@Z ; SimWeaponClass::SendDamageMessage
$LN16@ApplyProxi:

; 1178 : 				}

	jmp	SHORT $LN11@ApplyProxi
$LN17@ApplyProxi:

; 1179 : 				// 2002-03-25 MN some more fixes for nukes
; 1180 : 				else if (wc && wc->DamageType == NuclearDam)

	cmp	DWORD PTR _wc$[ebp], 0
	je	SHORT $LN14@ApplyProxi
	mov	edx, DWORD PTR _wc$[ebp]
	cmp	DWORD PTR [edx+4], 9
	jne	SHORT $LN14@ApplyProxi

; 1181 : 				{
; 1182 : 					if (rangeSquare < damageRadiusSqrd * g_fNukeDamageMod)

	movss	xmm0, DWORD PTR _damageRadiusSqrd$[ebp]
	mulss	xmm0, DWORD PTR ?g_fNukeDamageMod@@3MA
	comiss	xmm0, DWORD PTR _rangeSquare$[ebp]
	jbe	SHORT $LN13@ApplyProxi

; 1183 : 					{
; 1184 : 						SendDamageMessage(testObject,rangeSquare*strength*g_fNukeStrengthFactor,FalconDamageType::ProximityDamage);					

	push	9
	movss	xmm0, DWORD PTR _rangeSquare$[ebp]
	mulss	xmm0, DWORD PTR _strength$[ebp]
	mulss	xmm0, DWORD PTR ?g_fNukeStrengthFactor@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _testObject$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendDamageMessage@SimWeaponClass@@QAEXPAVFalconEntity@@MH@Z ; SimWeaponClass::SendDamageMessage
$LN13@ApplyProxi:

; 1185 : 					}
; 1186 : 				}

	jmp	SHORT $LN11@ApplyProxi
$LN14@ApplyProxi:

; 1187 : 				else if (rangeSquare < damageRadiusSqrd * damageMod)

	movss	xmm0, DWORD PTR _damageRadiusSqrd$[ebp]
	mulss	xmm0, DWORD PTR _damageMod$[ebp]
	comiss	xmm0, DWORD PTR _rangeSquare$[ebp]
	jbe	SHORT $LN11@ApplyProxi

; 1188 : 					SendDamageMessage(testObject,rangeSquare*strength,FalconDamageType::ProximityDamage);

	push	9
	movss	xmm0, DWORD PTR _rangeSquare$[ebp]
	mulss	xmm0, DWORD PTR _strength$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _testObject$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendDamageMessage@SimWeaponClass@@QAEXPAVFalconEntity@@MH@Z ; SimWeaponClass::SendDamageMessage
$LN11@ApplyProxi:

; 1189 : 			}
; 1190 : 			testObject = (SimBaseClass*) objectWalker.GetNext();

	lea	ecx, DWORD PTR _objectWalker$3[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testObject$[ebp], eax

; 1191 : 		}

	jmp	$LN42@ApplyProxi
$LN22@ApplyProxi:

; 1192 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _objectWalker$3[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
$LN28@ApplyProxi:

; 1193 : 
; 1194 : 	// get the 1st objective that contains the bomb
; 1195 : 	objective = (CampBaseClass*)gridIt.GetFirst();

	lea	ecx, DWORD PTR _gridIt$[ebp]
	call	?GetFirst@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetFirst
	mov	DWORD PTR _objective$[ebp], eax
$LN10@ApplyProxi:

; 1196 : 
; 1197 : 	// main loop through objectives
; 1198 : 	while ( objective )

	cmp	DWORD PTR _objective$[ebp], 0
	je	$LN9@ApplyProxi

; 1199 : 	{
; 1200 : 		if (objective->GetComponents())

	mov	ecx, DWORD PTR _objective$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	test	eax, eax
	je	$LN8@ApplyProxi

; 1201 : 		{
; 1202 : 			// loop thru each element in the objective
; 1203 : 			VuListIterator	featureWalker(objective->GetComponents());

	mov	ecx, DWORD PTR _objective$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	push	eax
	lea	ecx, DWORD PTR _featureWalker$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 1204 : 			testObject = (SimBaseClass*) featureWalker.GetFirst();

	lea	ecx, DWORD PTR _featureWalker$2[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _testObject$[ebp], eax
$LN7@ApplyProxi:

; 1205 : 			while (testObject)

	cmp	DWORD PTR _testObject$[ebp], 0
	je	$LN6@ApplyProxi

; 1206 : 			{
; 1207 : 				if (!testObject->IsSetCampaignFlag(FEAT_CONTAINER_TOP))

	push	16384					; 00004000H
	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z ; SimBaseClass::IsSetCampaignFlag
	test	eax, eax
	jne	$LN1@ApplyProxi

; 1208 : 				{
; 1209 : 					tmpX = testObject->XPos() - XPos();

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv731[ebp]
	movss	xmm0, DWORD PTR tv731[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv767[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv735[ebp]
	movss	xmm0, DWORD PTR tv767[ebp]
	subss	xmm0, DWORD PTR tv735[ebp]
	movss	DWORD PTR _tmpX$[ebp], xmm0

; 1210 : 					tmpY = testObject->YPos() - YPos();

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv739[ebp]
	movss	xmm0, DWORD PTR tv739[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv769[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv743[ebp]
	movss	xmm0, DWORD PTR tv769[ebp]
	subss	xmm0, DWORD PTR tv743[ebp]
	movss	DWORD PTR _tmpY$[ebp], xmm0

; 1211 : 					//					tmpZ = testObject->ZPos() - ZPos();		// Features are at ground level, and so is this bomb
; 1212 : 
; 1213 : 					rangeSquare = tmpX*tmpX + tmpY*tmpY;;	// + tmpZ*tmpZ;

	movss	xmm0, DWORD PTR _tmpX$[ebp]
	mulss	xmm0, DWORD PTR _tmpX$[ebp]
	movss	xmm1, DWORD PTR _tmpY$[ebp]
	mulss	xmm1, DWORD PTR _tmpY$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rangeSquare$[ebp], xmm0

; 1214 : 					if (wc && wc->DamageType == NuclearDam)

	cmp	DWORD PTR _wc$[ebp], 0
	je	SHORT $LN4@ApplyProxi
	mov	edx, DWORD PTR _wc$[ebp]
	cmp	DWORD PTR [edx+4], 9
	jne	SHORT $LN4@ApplyProxi

; 1215 : 					{
; 1216 : 						if (rangeSquare < damageRadiusSqrd * g_fNukeDamageMod)

	movss	xmm0, DWORD PTR _damageRadiusSqrd$[ebp]
	mulss	xmm0, DWORD PTR ?g_fNukeDamageMod@@3MA
	comiss	xmm0, DWORD PTR _rangeSquare$[ebp]
	jbe	SHORT $LN3@ApplyProxi

; 1217 : 						{
; 1218 : 							SendDamageMessage(testObject,rangeSquare*strength*g_fNukeStrengthFactor,FalconDamageType::ProximityDamage);					

	push	9
	movss	xmm0, DWORD PTR _rangeSquare$[ebp]
	mulss	xmm0, DWORD PTR _strength$[ebp]
	mulss	xmm0, DWORD PTR ?g_fNukeStrengthFactor@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _testObject$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendDamageMessage@SimWeaponClass@@QAEXPAVFalconEntity@@MH@Z ; SimWeaponClass::SendDamageMessage
$LN3@ApplyProxi:

; 1219 : 						}
; 1220 : 					}

	jmp	SHORT $LN1@ApplyProxi
$LN4@ApplyProxi:

; 1221 : 					else if (rangeSquare < damageRadiusSqrd * damageMod)	//MI added *damageMod

	movss	xmm0, DWORD PTR _damageRadiusSqrd$[ebp]
	mulss	xmm0, DWORD PTR _damageMod$[ebp]
	comiss	xmm0, DWORD PTR _rangeSquare$[ebp]
	jbe	SHORT $LN1@ApplyProxi

; 1222 : 					{
; 1223 : 						SendDamageMessage(testObject,rangeSquare * strength,FalconDamageType::ProximityDamage);

	push	9
	movss	xmm0, DWORD PTR _rangeSquare$[ebp]
	mulss	xmm0, DWORD PTR _strength$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _testObject$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendDamageMessage@SimWeaponClass@@QAEXPAVFalconEntity@@MH@Z ; SimWeaponClass::SendDamageMessage
$LN1@ApplyProxi:

; 1224 : 					} // end if within lethal radius
; 1225 : 				}
; 1226 : 				testObject = (SimBaseClass*) featureWalker.GetNext();

	lea	ecx, DWORD PTR _featureWalker$2[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testObject$[ebp], eax

; 1227 : 			}

	jmp	$LN7@ApplyProxi
$LN6@ApplyProxi:

; 1228 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _featureWalker$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
$LN8@ApplyProxi:

; 1229 : 
; 1230 : 		// get the next objective that contains the bomb
; 1231 : 		objective = (CampBaseClass*)gridIt.GetNext();

	lea	ecx, DWORD PTR _gridIt$[ebp]
	call	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetNext
	mov	DWORD PTR _objective$[ebp], eax

; 1232 : 	} // end objective loop

	jmp	$LN10@ApplyProxi
$LN9@ApplyProxi:

; 1233 : 
; 1234 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _gridIt$[ebp]
	call	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN45@ApplyProxi:
	DD	$LN25@ApplyProxi
	DD	$LN24@ApplyProxi
$LN43@ApplyProxi:
	DB	0
	DB	1
	DB	0
	DB	0
	DB	1
	DB	0
	DB	1
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ApplyProximityDamage@BombClass@@IAEXMM@Z$0:
	lea	ecx, DWORD PTR _gridIt$[ebp]
	jmp	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
__unwindfunclet$?ApplyProximityDamage@BombClass@@IAEXMM@Z$1:
	lea	ecx, DWORD PTR _objectWalker$3[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?ApplyProximityDamage@BombClass@@IAEXMM@Z$2:
	lea	ecx, DWORD PTR _featureWalker$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?ApplyProximityDamage@BombClass@@IAEXMM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-240]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ApplyProximityDamage@BombClass@@IAEXMM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ApplyProximityDamage@BombClass@@IAEXMM@Z ENDP		; BombClass::ApplyProximityDamage
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
$T2 = -148						; size = 8
$T3 = -140						; size = 8
$T4 = -132						; size = 8
$T5 = -124						; size = 8
_groundZ$ = -116					; size = 4
tv618 = -112						; size = 8
$T6 = -104						; size = 4
$T7 = -100						; size = 4
tv138 = -96						; size = 4
tv206 = -92						; size = 4
tv614 = -88						; size = 4
tv180 = -84						; size = 4
tv95 = -80						; size = 4
tv199 = -76						; size = 4
tv232 = -72						; size = 4
$T8 = -68						; size = 4
tv225 = -64						; size = 4
tv266 = -60						; size = 4
_endMessage$ = -56					; size = 4
_this$ = -52						; size = 4
_acmiStatSfx$ = -48					; size = 29
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?DoExplosion@BombClass@@MAEXXZ PROC			; BombClass::DoExplosion
; _this$ = ecx

; 1237 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DoExplosion@BombClass@@MAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 136				; 00000088H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1238 : 	ACMIStationarySfxRecord acmiStatSfx;
; 1239 : 	FalconMissileEndMessage* endMessage;
; 1240 : 	float groundZ;
; 1241 : 
; 1242 : 	if ( !IsSetFlag( SHOW_EXPLOSION ))

	push	256					; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	jne	$LN7@DoExplosio

; 1243 : 	{
; 1244 : 		// edg note: all special effects are now handled in the
; 1245 : 		// missile end message process method
; 1246 : 		endMessage = new FalconMissileEndMessage (Id(), FalconLocalGame);

	push	285					; 0000011dH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN12@DoExplosio
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN10@DoExplosio
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN11@DoExplosio
$LN10@DoExplosio:
	mov	DWORD PTR tv95[ebp], 0
$LN11@DoExplosio:
	push	1
	mov	ecx, DWORD PTR tv95[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0FalconMissileEndMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconMissileEndMessage::FalconMissileEndMessage
	mov	DWORD PTR tv138[ebp], eax
	jmp	SHORT $LN13@DoExplosio
$LN12@DoExplosio:
	mov	DWORD PTR tv138[ebp], 0
$LN13@DoExplosio:
	mov	eax, DWORD PTR tv138[ebp]
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR _endMessage$[ebp], ecx

; 1247 : 		endMessage->RequestReliableTransmit ();

	mov	ecx, DWORD PTR _endMessage$[ebp]
	call	?RequestReliableTransmit@VuMessage@@QAEXXZ ; VuMessage::RequestReliableTransmit

; 1248 : 		endMessage->RequestOutOfBandTransmit ();

	mov	ecx, DWORD PTR _endMessage$[ebp]
	call	?RequestOutOfBandTransmit@VuMessage@@QAEXXZ ; VuMessage::RequestOutOfBandTransmit

; 1249 : 		endMessage->dataBlock.fEntityID		= parent ? parent->Id() : Id();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??B?$VuBin@VFalconEntity@@@@QBE_NXZ	; VuBin<FalconEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN14@DoExplosio
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	DWORD PTR tv180[ebp], eax
	jmp	SHORT $LN15@DoExplosio
$LN14@DoExplosio:
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	DWORD PTR tv180[ebp], eax
$LN15@DoExplosio:
	mov	edx, DWORD PTR tv180[ebp]
	mov	DWORD PTR $T6[ebp], edx
	mov	eax, DWORD PTR $T6[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	DWORD PTR [eax+63], ecx
	mov	DWORD PTR [eax+67], edx

; 1250 : 		endMessage->dataBlock.fCampID		= parent ? parent->GetCampID() : 0;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??B?$VuBin@VFalconEntity@@@@QBE_NXZ	; VuBin<FalconEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN16@DoExplosio
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	DWORD PTR tv199[ebp], eax
	mov	edx, DWORD PTR tv199[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv199[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	cwde
	mov	DWORD PTR tv206[ebp], eax
	jmp	SHORT $LN17@DoExplosio
$LN16@DoExplosio:
	mov	DWORD PTR tv206[ebp], 0
$LN17@DoExplosio:
	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	dx, WORD PTR tv206[ebp]
	mov	WORD PTR [ecx+71], dx

; 1251 : 		endMessage->dataBlock.fSide			= parent ? (uchar)parent->GetCountry() : 0;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??B?$VuBin@VFalconEntity@@@@QBE_NXZ	; VuBin<FalconEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN18@DoExplosio
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	DWORD PTR tv225[ebp], eax
	mov	ecx, DWORD PTR tv225[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv225[ebp]
	mov	eax, DWORD PTR [edx+120]
	call	eax
	movzx	ecx, al
	mov	DWORD PTR tv232[ebp], ecx
	jmp	SHORT $LN19@DoExplosio
$LN18@DoExplosio:
	mov	DWORD PTR tv232[ebp], 0
$LN19@DoExplosio:
	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	al, BYTE PTR tv232[ebp]
	mov	BYTE PTR [edx+77], al

; 1252 : 		endMessage->dataBlock.fPilotID		= shooterPilotSlot;

	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+680]
	mov	BYTE PTR [ecx+73], al

; 1253 : 		endMessage->dataBlock.fIndex		= parent ? parent->Type() : 0;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??B?$VuBin@VFalconEntity@@@@QBE_NXZ	; VuBin<FalconEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN20@DoExplosio
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::operator->
	mov	ecx, eax
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	edx, ax
	mov	DWORD PTR tv266[ebp], edx
	jmp	SHORT $LN21@DoExplosio
$LN20@DoExplosio:
	mov	DWORD PTR tv266[ebp], 0
$LN21@DoExplosio:
	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	cx, WORD PTR tv266[ebp]
	mov	WORD PTR [eax+75], cx

; 1254 : 		endMessage->dataBlock.dEntityID		= FalconNullId;

	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [edx+48], eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [edx+52], ecx

; 1255 : 		endMessage->dataBlock.dCampID		= 0;

	xor	edx, edx
	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	WORD PTR [eax+56], dx

; 1256 : 		endMessage->dataBlock.dSide			= 0;

	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [ecx+62], 0

; 1257 : 		endMessage->dataBlock.dPilotID		= 0;

	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [edx+58], 0

; 1258 : 		endMessage->dataBlock.dIndex		= 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	WORD PTR [ecx+60], ax

; 1259 : 		endMessage->dataBlock.fWeaponUID	= Id();

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	DWORD PTR [eax+82], ecx
	mov	DWORD PTR [eax+86], edx

; 1260 : 		endMessage->dataBlock.wIndex 		= Type();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	WORD PTR [ecx+115], ax

; 1261 : 		endMessage->dataBlock.x				= XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	edx, DWORD PTR _endMessage$[ebp]
	fstp	DWORD PTR [edx+90]

; 1262 : 		endMessage->dataBlock.y				= YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	eax, DWORD PTR _endMessage$[ebp]
	fstp	DWORD PTR [eax+94]

; 1263 : 		endMessage->dataBlock.z				= ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	mov	ecx, DWORD PTR _endMessage$[ebp]
	fstp	DWORD PTR [ecx+98]

; 1264 : 		endMessage->dataBlock.xDelta		= edeltaX;

	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+748]
	mov	DWORD PTR [edx+102], ecx

; 1265 : 		endMessage->dataBlock.yDelta		= edeltaY;

	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+752]
	mov	DWORD PTR [edx+106], ecx

; 1266 : 		endMessage->dataBlock.zDelta		= edeltaZ;

	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+756]
	mov	DWORD PTR [edx+110], ecx

; 1267 : 
; 1268 : 		// add crater depending on ground type and closeness to ground
; 1269 : 		groundZ = OTWDriver.GetGroundLevel(XPos(), YPos());

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	fstp	DWORD PTR _groundZ$[ebp]

; 1270 : 
; 1271 : 		if ( hitObj )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+728], 0
	je	SHORT $LN6@DoExplosio

; 1272 : 		{
; 1273 : 			endMessage->dataBlock.endCode    = FalconMissileEndMessage::FeatureImpact;

	mov	eax, DWORD PTR _endMessage$[ebp]
	mov	DWORD PTR [eax+78], 10			; 0000000aH

; 1274 : 			endMessage->SetParticleEffectName(auxData->psFeatureImpact);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+832]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	mov	ecx, DWORD PTR _endMessage$[ebp]
	call	?SetParticleEffectName@FalconMissileEndMessage@@QAEXPAD@Z ; FalconMissileEndMessage::SetParticleEffectName

; 1275 : 		}
; 1276 : 		else

	jmp	SHORT $LN5@DoExplosio
$LN6@DoExplosio:

; 1277 : 		{
; 1278 : 			endMessage->dataBlock.endCode    = FalconMissileEndMessage::BombImpact;

	mov	ecx, DWORD PTR _endMessage$[ebp]
	mov	DWORD PTR [ecx+78], 11			; 0000000bH

; 1279 : 			endMessage->SetParticleEffectName(auxData->psBombImpact);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+832]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	ecx, DWORD PTR _endMessage$[ebp]
	call	?SetParticleEffectName@FalconMissileEndMessage@@QAEXPAD@Z ; FalconMissileEndMessage::SetParticleEffectName
$LN5@DoExplosio:

; 1280 : 		}
; 1281 : 
; 1282 : 		endMessage->dataBlock.groundType    =
; 1283 : 			(char)OTWDriver.GetGroundType ( XPos(), YPos() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundType@OTWDriverClass@@QAEHMM@Z	; OTWDriverClass::GetGroundType
	mov	edx, DWORD PTR _endMessage$[ebp]
	mov	BYTE PTR [edx+114], al

; 1284 : 
; 1285 : 		FalconSendMessage (endMessage,FALSE);

	push	0
	mov	eax, DWORD PTR _endMessage$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 1286 : 
; 1287 : 
; 1288 : 		if ( hitObj == NULL &&
; 1289 : 				!(endMessage->dataBlock.groundType == COVERAGE_WATER ||
; 1290 : 					endMessage->dataBlock.groundType == COVERAGE_RIVER )
; 1291 : 			 ) //&&( ZPos() - groundZ ) > -40.0f ) // JB 010710 craters weren't showing up

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+728], 0
	jne	$LN3@DoExplosio
	mov	edx, DWORD PTR _endMessage$[ebp]
	movsx	eax, BYTE PTR [edx+114]
	cmp	eax, 1
	je	$LN3@DoExplosio
	mov	ecx, DWORD PTR _endMessage$[ebp]
	movsx	edx, BYTE PTR [ecx+114]
	cmp	edx, 2
	je	$LN3@DoExplosio

; 1292 : 		{
; 1293 : 			//AddToTimedPersistantList(
; 1294 : 			//	VIS_CRATER2 + PRANDInt3(), Camp_GetCurrentTime() + CRATER_REMOVAL_TIME, XPos(), YPos()
; 1295 : 			//);
; 1296 : 			AddToTimedPersistantList(
; 1297 : 				MapVisId(VIS_CRATER2 + 2), Camp_GetCurrentTime() + CRATER_REMOVAL_TIME, XPos(), YPos()
; 1298 : 			);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	add	eax, 3600000				; 0036ee80H
	push	eax
	push	129					; 00000081H
	call	?MapVisId@@YAKK@Z			; MapVisId
	add	esp, 4
	push	eax
	call	?AddToTimedPersistantList@@YAXHKMM@Z	; AddToTimedPersistantList
	add	esp, 16					; 00000010H

; 1299 : 
; 1300 : 			// add crater to ACMI as special effect
; 1301 : 			if ( gACMIRec.IsRecording() )

	mov	ecx, OFFSET ?gACMIRec@@3VACMIRecorder@@A ; gACMIRec
	call	?IsRecording@ACMIRecorder@@QAEHXZ	; ACMIRecorder::IsRecording
	test	eax, eax
	je	$LN3@DoExplosio

; 1302 : 			{
; 1303 : 
; 1304 : 				acmiStatSfx.hdr.time = SimLibElapsedTime * MSEC_TO_SEC + OTWDriver.todOffset;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR tv614[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv614[ebp]
	mov	ecx, DWORD PTR tv614[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv618[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv618[ebp]
	mulss	xmm0, DWORD PTR __real@3a83126f
	addss	xmm0, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+32052
	movss	DWORD PTR _acmiStatSfx$[ebp+1], xmm0

; 1305 : 				acmiStatSfx.data.type = SFX_CRATER4;

	mov	DWORD PTR _acmiStatSfx$[ebp+5], 109	; 0000006dH

; 1306 : 				acmiStatSfx.data.x = XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _acmiStatSfx$[ebp+9]

; 1307 : 				acmiStatSfx.data.y = YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _acmiStatSfx$[ebp+13]

; 1308 : 				acmiStatSfx.data.z = ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _acmiStatSfx$[ebp+17]

; 1309 : 				acmiStatSfx.data.timeToLive = 180.0f;

	movss	xmm0, DWORD PTR __real@43340000
	movss	DWORD PTR _acmiStatSfx$[ebp+21], xmm0

; 1310 : 				acmiStatSfx.data.scale = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _acmiStatSfx$[ebp+25], xmm0

; 1311 : 				gACMIRec.StationarySfxRecord( &acmiStatSfx );

	lea	edx, DWORD PTR _acmiStatSfx$[ebp]
	push	edx
	mov	ecx, OFFSET ?gACMIRec@@3VACMIRecorder@@A ; gACMIRec
	call	?StationarySfxRecord@ACMIRecorder@@QAEXPAUACMIStationarySfxRecord@@@Z ; ACMIRecorder::StationarySfxRecord
$LN3@DoExplosio:

; 1312 : 			}
; 1313 : 		}
; 1314 : 
; 1315 : 		// make sure we don't do it again...
; 1316 : 		SetFlag( SHOW_EXPLOSION );

	push	256					; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetFlag
	jmp	SHORT $LN1@DoExplosio
$LN7@DoExplosio:

; 1317 : 	}
; 1318 : 	else if ( !IsDead() )

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+340]
	call	eax
	test	eax, eax
	jne	SHORT $LN1@DoExplosio

; 1319 : 	{
; 1320 : 		// we can now kill it immediately
; 1321 : 		SetDead(TRUE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+364]
	call	eax
$LN1@DoExplosio:

; 1322 : 	}
; 1323 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?DoExplosion@BombClass@@MAEXXZ$0:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?DoExplosion@BombClass@@MAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-140]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DoExplosion@BombClass@@MAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?DoExplosion@BombClass@@MAEXXZ ENDP			; BombClass::DoExplosion
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InitTrail@BombClass@@MAEXXZ PROC			; BombClass::InitTrail
; _this$ = ecx

; 1337 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1338 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InitTrail@BombClass@@MAEXXZ ENDP			; BombClass::InitTrail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RemoveTrail@BombClass@@MAEXXZ PROC			; BombClass::RemoveTrail
; _this$ = ecx

; 1345 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1346 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveTrail@BombClass@@MAEXXZ ENDP			; BombClass::RemoveTrail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\bomb\bombmain.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?UpdateTrail@BombClass@@MAEXXZ PROC			; BombClass::UpdateTrail
; _this$ = ecx

; 1341 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1342 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateTrail@BombClass@@MAEXXZ ENDP			; BombClass::UpdateTrail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simweapn.h
;	COMDAT ?LaunchDelayTime@SimWeaponClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LaunchDelayTime@SimWeaponClass@@UAEHXZ PROC		; SimWeaponClass::LaunchDelayTime, COMDAT
; _this$ = ecx

; 75   : 	virtual int LaunchDelayTime(void) { return 0; }  

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?LaunchDelayTime@SimWeaponClass@@UAEHXZ ENDP		; SimWeaponClass::LaunchDelayTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simweapn.h
;	COMDAT ?IsWeapon@SimWeaponClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsWeapon@SimWeaponClass@@UAEHXZ PROC			; SimWeaponClass::IsWeapon, COMDAT
; _this$ = ecx

; 61   : 	virtual int IsWeapon (void) {return TRUE;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsWeapon@SimWeaponClass@@UAEHXZ ENDP			; SimWeaponClass::IsWeapon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simmover.h
;	COMDAT ?IsMover@SimMoverClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMover@SimMoverClass@@UAEHXZ PROC			; SimMoverClass::IsMover, COMDAT
; _this$ = ecx

; 145  : 	virtual int IsMover (void) {return TRUE;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMover@SimMoverClass@@UAEHXZ ENDP			; SimMoverClass::IsMover
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simmover.h
;	COMDAT ?WeaponKeepAlive@SimMoverClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?WeaponKeepAlive@SimMoverClass@@UAEXXZ PROC		; SimMoverClass::WeaponKeepAlive, COMDAT
; _this$ = ecx

; 109  : 	virtual void WeaponKeepAlive() { return; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?WeaponKeepAlive@SimMoverClass@@UAEXXZ ENDP		; SimMoverClass::WeaponKeepAlive
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simmover.h
;	COMDAT ?SetLead@SimMoverClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetLead@SimMoverClass@@UAEXH@Z PROC			; SimMoverClass::SetLead, COMDAT
; _this$ = ecx

; 87   : 	virtual void SetLead (int) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLead@SimMoverClass@@UAEXH@Z ENDP			; SimMoverClass::SetLead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC	; VuBin<FalconEntity>::operator->, COMDAT
; _this$ = ecx

; 50   : 	E *operator->() const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 52   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??C?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP	; VuBin<FalconEntity>::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VFalconEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VFalconEntity@@@@QBE_NXZ PROC		; VuBin<FalconEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VFalconEntity@@@@QBE_NXZ ENDP		; VuBin<FalconEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??7?$VuBin@VFalconEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??7?$VuBin@VFalconEntity@@@@QBE_NXZ PROC		; VuBin<FalconEntity>::operator!, COMDAT
; _this$ = ecx

; 37   : 	bool operator!() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 		return e == NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 39   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??7?$VuBin@VFalconEntity@@@@QBE_NXZ ENDP		; VuBin<FalconEntity>::operator!
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?Mass@SimBaseClass@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Mass@SimBaseClass@@UAEMXZ PROC				; SimBaseClass::Mass, COMDAT
; _this$ = ecx

; 267  : 	virtual float Mass(void)		{return 2500.0F;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fld	DWORD PTR __real@451c4000
	mov	esp, ebp
	pop	ebp
	ret	0
?Mass@SimBaseClass@@UAEMXZ ENDP				; SimBaseClass::Mass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?Regenerate@SimBaseClass@@UAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?Regenerate@SimBaseClass@@UAEXMMMM@Z PROC		; SimBaseClass::Regenerate, COMDAT
; _this$ = ecx

; 261  : 	virtual void Regenerate(float, float, float, float) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Regenerate@SimBaseClass@@UAEXMMMM@Z ENDP		; SimBaseClass::Regenerate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?ConfigurePlayerAvionics@SimBaseClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ConfigurePlayerAvionics@SimBaseClass@@UAEXXZ PROC	; SimBaseClass::ConfigurePlayerAvionics, COMDAT
; _this$ = ecx

; 259  : 	virtual void ConfigurePlayerAvionics() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ConfigurePlayerAvionics@SimBaseClass@@UAEXXZ ENDP	; SimBaseClass::ConfigurePlayerAvionics
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?MakeNonPlayerVehicle@SimBaseClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MakeNonPlayerVehicle@SimBaseClass@@UAEXXZ PROC		; SimBaseClass::MakeNonPlayerVehicle, COMDAT
; _this$ = ecx

; 258  : 	virtual void MakeNonPlayerVehicle() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?MakeNonPlayerVehicle@SimBaseClass@@UAEXXZ ENDP		; SimBaseClass::MakeNonPlayerVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?MakePlayerVehicle@SimBaseClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MakePlayerVehicle@SimBaseClass@@UAEXXZ PROC		; SimBaseClass::MakePlayerVehicle, COMDAT
; _this$ = ecx

; 257  : 	virtual void MakePlayerVehicle() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?MakePlayerVehicle@SimBaseClass@@UAEXXZ ENDP		; SimBaseClass::MakePlayerVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ PROC ; SimBaseClass::GetCampaignObject, COMDAT
; _this$ = ecx

; 212  : 	CampBaseClass *GetCampaignObject (void) { return campaignObject.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ENDP ; SimBaseClass::GetCampaignObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z PROC		; SimBaseClass::IsSetCampaignFlag, COMDAT
; _this$ = ecx

; 182  : 	int  IsSetCampaignFlag(int flag) const { return ((campaignFlags & flag) ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsSetCampa
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSetCampa
$LN3@IsSetCampa:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSetCampa:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z ENDP		; SimBaseClass::IsSetCampaignFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsSetFlag@SimBaseClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFlag@SimBaseClass@@QBEHH@Z PROC			; SimBaseClass::IsSetFlag, COMDAT
; _this$ = ecx

; 178  : 	int  IsSetFlag(int flag) const { return ((specialData.flags & flag) ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsSetFlag
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSetFlag
$LN3@IsSetFlag:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSetFlag:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFlag@SimBaseClass@@QBEHH@Z ENDP			; SimBaseClass::IsSetFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsAwake@SimBaseClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAwake@SimBaseClass@@QBEHXZ PROC			; SimBaseClass::IsAwake, COMDAT
; _this$ = ecx

; 177  : 	int IsAwake() const { return localFlags & OBJ_AWAKE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+284]
	and	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAwake@SimBaseClass@@QBEHXZ ENDP			; SimBaseClass::IsAwake
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsDead@SimBaseClass@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -1						; size = 1
?IsDead@SimBaseClass@@UBEHXZ PROC			; SimBaseClass::IsDead, COMDAT
; _this$ = ecx

; 174  : 	virtual int IsDead() const { return (specialData.flags & OBJ_DEAD ? true : false); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, 32					; 00000020H
	je	SHORT $LN3@IsDead
	mov	BYTE PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsDead
$LN3@IsDead:
	mov	BYTE PTR tv68[ebp], 0
$LN4@IsDead:
	movzx	eax, BYTE PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDead@SimBaseClass@@UBEHXZ ENDP			; SimBaseClass::IsDead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsExploding@SimBaseClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsExploding@SimBaseClass@@UAEHXZ PROC			; SimBaseClass::IsExploding, COMDAT
; _this$ = ecx

; 173  : 	virtual int IsExploding () { return (specialData.flags & OBJ_EXPLODING ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, 16					; 00000010H
	je	SHORT $LN3@IsExplodin
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsExplodin
$LN3@IsExplodin:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsExplodin:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsExploding@SimBaseClass@@UAEHXZ ENDP			; SimBaseClass::IsExploding
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?OnGround@SimBaseClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?OnGround@SimBaseClass@@UAEHXZ PROC			; SimBaseClass::OnGround, COMDAT
; _this$ = ecx

; 172  : 	virtual int OnGround () { return (specialData.flags & ON_GROUND ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, 128				; 00000080H
	je	SHORT $LN3@OnGround
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@OnGround
$LN3@OnGround:
	mov	DWORD PTR tv68[ebp], 0
$LN4@OnGround:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?OnGround@SimBaseClass@@UAEHXZ ENDP			; SimBaseClass::OnGround
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCountry@SimBaseClass@@UAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCountry@SimBaseClass@@UAEEXZ PROC			; SimBaseClass::GetCountry, COMDAT
; _this$ = ecx

; 157  : 	virtual uchar GetCountry() { return (uchar)specialData.country; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+180]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCountry@SimBaseClass@@UAEEXZ ENDP			; SimBaseClass::GetCountry
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsSimBase@SimBaseClass@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSimBase@SimBaseClass@@UAE_NXZ PROC			; SimBaseClass::IsSimBase, COMDAT
; _this$ = ecx

; 152  : 	virtual bool IsSimBase() { return true; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSimBase@SimBaseClass@@UAE_NXZ ENDP			; SimBaseClass::IsSimBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?JoinFlight@SimBaseClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?JoinFlight@SimBaseClass@@UAEXXZ PROC			; SimBaseClass::JoinFlight, COMDAT
; _this$ = ecx

; 139  : 	virtual void JoinFlight (void) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?JoinFlight@SimBaseClass@@UAEXXZ ENDP			; SimBaseClass::JoinFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ PROC ; VuBin<CampBaseClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ENDP ; VuBin<CampBaseClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?checked_atan2@@YANNN@Z
_TEXT	SEGMENT
_z$ = -8						; size = 8
_y$ = 8							; size = 8
_x$ = 16						; size = 8
?checked_atan2@@YANNN@Z PROC				; checked_atan2, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 47   : 	double z;
; 48   : 	
; 49   : 	if (x == -0.0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@8000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@checked_at

; 50   : 		x = 0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _x$[ebp], xmm0
$LN8@checked_at:

; 51   : 	
; 52   : 	if (x != 0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@checked_at

; 53   : 		z = atan(y / x);

	movsd	xmm0, QWORD PTR _y$[ebp]
	divsd	xmm0, QWORD PTR _x$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR _z$[ebp]
	jmp	SHORT $LN4@checked_at
$LN7@checked_at:

; 54   : 	else if (y > 0)

	movsd	xmm0, QWORD PTR _y$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@checked_at

; 55   : 		z = HALF_DPI;

	movsd	xmm0, QWORD PTR __real@3ff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 56   : 	else

	jmp	SHORT $LN4@checked_at
$LN5@checked_at:

; 57   : 		z = -HALF_DPI;

	movsd	xmm0, QWORD PTR __real@bff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN4@checked_at:

; 58   : 
; 59   : 	if (x < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _x$[ebp]
	jbe	SHORT $LN1@checked_at

; 60   : 	{
; 61   : 		if (y < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _y$[ebp]
	jbe	SHORT $LN2@checked_at

; 62   : 			z -= DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	subsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 63   : 		else

	jmp	SHORT $LN1@checked_at
$LN2@checked_at:

; 64   : 			z += DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	addsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN1@checked_at:

; 65   : 	}
; 66   : 
; 67   : 	return z;

	fld	QWORD PTR _z$[ebp]

; 68   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?checked_atan2@@YANNN@Z ENDP				; checked_atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?mlSinCos@@YAXPAUmlTrig@@M@Z
_TEXT	SEGMENT
_trig$ = 8						; size = 4
_angle$ = 12						; size = 4
?mlSinCos@@YAXPAUmlTrig@@M@Z PROC			; mlSinCos, COMDAT

; 12   : {

	push	ebp
	mov	ebp, esp

; 13   : #if defined(_MSC_VER)
; 14   : 	__asm 
; 15   : 	{
; 16   : 		__asm	mov     ecx, trig;

	mov	ecx, DWORD PTR _trig$[ebp]

; 17   : 		__asm	fld     dword ptr [angle];

	fld	DWORD PTR _angle$[ebp]

; 18   : 		__asm	fsincos;

	fsincos

; 19   : 		__asm	fstp    dword ptr [ecx]trig.cos;

	fstp	DWORD PTR [ecx+4]

; 20   : 		__asm	fstp    dword ptr [ecx]trig.sin;

	fstp	DWORD PTR [ecx]

; 21   : 	}
; 22   : #else
; 23   : 	trig->sin = (Float32)sin(angle);
; 24   : 	trig->cos = (Float32)cos(angle);
; 25   : #endif
; 26   : }

	pop	ebp
	ret	0
?mlSinCos@@YAXPAUmlTrig@@M@Z ENDP			; mlSinCos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetSEARCHtimer@FalconEntity@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSEARCHtimer@FalconEntity@@UAEKXZ PROC		; FalconEntity::GetSEARCHtimer, COMDAT
; _this$ = ecx

; 198  : 	virtual VU_TIME GetSEARCHtimer(void)				{ return 0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSEARCHtimer@FalconEntity@@UAEKXZ ENDP		; FalconEntity::GetSEARCHtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetAQUIREtimer@FalconEntity@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAQUIREtimer@FalconEntity@@UAEKXZ PROC		; FalconEntity::GetAQUIREtimer, COMDAT
; _this$ = ecx

; 197  : 	virtual VU_TIME GetAQUIREtimer(void)				{ return 0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAQUIREtimer@FalconEntity@@UAEKXZ ENDP		; FalconEntity::GetAQUIREtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetStepSearchMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetStepSearchMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetStepSearchMode, COMDAT
; _this$ = ecx

; 196  : 	virtual void SetStepSearchMode(uchar)					{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStepSearchMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetStepSearchMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetSEARCHtimer@FalconEntity@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newTime$ = 8						; size = 4
?SetSEARCHtimer@FalconEntity@@UAEXK@Z PROC		; FalconEntity::SetSEARCHtimer, COMDAT
; _this$ = ecx

; 194  : 	virtual void SetSEARCHtimer(VU_TIME newTime)		{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSEARCHtimer@FalconEntity@@UAEXK@Z ENDP		; FalconEntity::SetSEARCHtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetAQUIREtimer@FalconEntity@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newTime$ = 8						; size = 4
?SetAQUIREtimer@FalconEntity@@UAEXK@Z PROC		; FalconEntity::SetAQUIREtimer, COMDAT
; _this$ = ecx

; 193  : 	virtual void SetAQUIREtimer(VU_TIME newTime)		{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAQUIREtimer@FalconEntity@@UAEXK@Z ENDP		; FalconEntity::SetAQUIREtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetIRFactor@FalconEntity@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetIRFactor@FalconEntity@@UAEMXZ PROC			; FalconEntity::GetIRFactor, COMDAT
; _this$ = ecx

; 164  : 	virtual float GetIRFactor (void)			{ return 0.0f; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?GetIRFactor@FalconEntity@@UAEMXZ ENDP			; FalconEntity::GetIRFactor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetRCSFactor@FalconEntity@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRCSFactor@FalconEntity@@UAEMXZ PROC			; FalconEntity::GetRCSFactor, COMDAT
; _this$ = ecx

; 163  : 	virtual float GetRCSFactor (void)			{ return 0.0f; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRCSFactor@FalconEntity@@UAEMXZ ENDP			; FalconEntity::GetRCSFactor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsTaskForce@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTaskForce@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsTaskForce, COMDAT
; _this$ = ecx

; 158  : 	virtual int IsTaskForce (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTaskForce@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsTaskForce
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsTeam@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTeam@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsTeam, COMDAT
; _this$ = ecx

; 157  : 	virtual int IsTeam (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTeam@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsTeam
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsPackage@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPackage@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsPackage, COMDAT
; _this$ = ecx

; 156  : 	virtual int IsPackage (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPackage@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsPackage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSquadron@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSquadron@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsSquadron, COMDAT
; _this$ = ecx

; 155  : 	virtual int IsSquadron (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSquadron@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsSquadron
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsFlight@FalconEntity@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsFlight@FalconEntity@@UBEHXZ PROC			; FalconEntity::IsFlight, COMDAT
; _this$ = ecx

; 154  : 	virtual int IsFlight() const				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsFlight@FalconEntity@@UBEHXZ ENDP			; FalconEntity::IsFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBrigade@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBrigade@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBrigade, COMDAT
; _this$ = ecx

; 153  : 	virtual int IsBrigade (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBrigade@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBrigade
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBattalion@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBattalion@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBattalion, COMDAT
; _this$ = ecx

; 152  : 	virtual int IsBattalion (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBattalion@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBattalion
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsObjective@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsObjective@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsObjective, COMDAT
; _this$ = ecx

; 151  : 	virtual int IsObjective (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsObjective@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsUnit@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsUnit@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsUnit, COMDAT
; _this$ = ecx

; 150  : 	virtual int IsUnit (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsUnit@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsEmitting@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmitting@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsEmitting, COMDAT
; _this$ = ecx

; 145  : 	virtual int IsEmitting (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmitting@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsEmitting
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsDead@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDead@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsDead, COMDAT
; _this$ = ecx

; 144  : 	virtual int IsDead (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDead@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsDead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsShip@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsShip@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsShip, COMDAT
; _this$ = ecx

; 141  : 	virtual int IsShip (void) 			        { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsShip@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsShip
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsGroundVehicle@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGroundVehicle@FalconEntity@@UAEHXZ PROC		; FalconEntity::IsGroundVehicle, COMDAT
; _this$ = ecx

; 140  : 	virtual int IsGroundVehicle (void) 			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGroundVehicle@FalconEntity@@UAEHXZ ENDP		; FalconEntity::IsGroundVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsAirplane@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAirplane@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsAirplane, COMDAT
; _this$ = ecx

; 139  : 	virtual int IsAirplane (void)	   			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAirplane@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsAirplane
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsEject@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEject@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsEject, COMDAT
; _this$ = ecx

; 138  : 	virtual int IsEject (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEject@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsEject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsHelicopter@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsHelicopter@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsHelicopter, COMDAT
; _this$ = ecx

; 137  : 	virtual int IsHelicopter (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsHelicopter@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsHelicopter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsStatic@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsStatic@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsStatic, COMDAT
; _this$ = ecx

; 136  : 	virtual int IsStatic (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsStatic@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsStatic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsVehicle@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsVehicle@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsVehicle, COMDAT
; _this$ = ecx

; 135  : 	virtual int IsVehicle (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsVehicle@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsGun@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGun@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsGun, COMDAT
; _this$ = ecx

; 133  : 	virtual int IsGun (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGun@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsGun
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsMissile@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMissile@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsMissile, COMDAT
; _this$ = ecx

; 130  : 	virtual int IsMissile (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMissile@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsMissile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv69 = -4						; size = 4
_e$ = 8							; size = 4
?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z PROC	; FalconEntity::HasEntity, COMDAT
; _this$ = ecx

; 129  : 	virtual int HasEntity(VuEntity *e) const    { return this == e; } // sfr: added for new driver

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _e$[ebp]
	jne	SHORT $LN3@HasEntity
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@HasEntity
$LN3@HasEntity:
	mov	DWORD PTR tv69[ebp], 0
$LN4@HasEntity:
	mov	eax, DWORD PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z ENDP	; FalconEntity::HasEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?CombatClass@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CombatClass@FalconEntity@@UAEHXZ PROC			; FalconEntity::CombatClass, COMDAT
; _this$ = ecx

; 127  : 	virtual int CombatClass (void)				{ return 999; } // 2002-02-25 ADDED BY S.G. No combat class for non flight or non aircraft class

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 999				; 000003e7H
	mov	esp, ebp
	pop	ebp
	ret	0
?CombatClass@FalconEntity@@UAEHXZ ENDP			; FalconEntity::CombatClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetSearchMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetSearchMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetSearchMode, COMDAT
; _this$ = ecx

; 126  : 	virtual void SetSearchMode (uchar)		{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSearchMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetSearchMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?ReturnToSearch@FalconEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReturnToSearch@FalconEntity@@UAEXXZ PROC		; FalconEntity::ReturnToSearch, COMDAT
; _this$ = ecx

; 124  : 	virtual void ReturnToSearch (void)			{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ReturnToSearch@FalconEntity@@UAEXXZ ENDP		; FalconEntity::ReturnToSearch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetRadarMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetRadarMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetRadarMode, COMDAT
; _this$ = ecx

; 123  : 	virtual void SetRadarMode (uchar)		{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRadarMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetRadarMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetRadarMode@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRadarMode@FalconEntity@@UAEHXZ PROC			; FalconEntity::GetRadarMode, COMDAT
; _this$ = ecx

; 121  : 	virtual int GetRadarMode (void)				{ return FEC_RADAR_OFF; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRadarMode@FalconEntity@@UAEHXZ ENDP			; FalconEntity::GetRadarMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsPlayer@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPlayer@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsPlayer, COMDAT
; _this$ = ecx

; 113  : 	int IsPlayer (void)							{ return IsSetFalcFlag(FEC_HASPLAYERS); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetFalcFlag@FalconEntity@@QAEHH@Z	; FalconEntity::IsSetFalcFlag
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPlayer@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsPlayer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSetFalcFlag@FalconEntity@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z PROC		; FalconEntity::IsSetFalcFlag, COMDAT
; _this$ = ecx

; 112  : 	int IsSetFalcFlag (int flag)				{ return falconFlags & flag; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+136]
	and	eax, DWORD PTR _flag$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z ENDP		; FalconEntity::IsSetFalcFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSim@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsSim@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsSim, COMDAT
; _this$ = ecx

; 103  : 		{return (falconType & FalconSimEntity) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	and	ecx, 2
	je	SHORT $LN3@IsSim
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSim
$LN3@IsSim:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSim:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSim@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsCampBase@FalconEntity@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsCampBase@FalconEntity@@UAE_NXZ PROC			; FalconEntity::IsCampBase, COMDAT
; _this$ = ecx

; 99   : 	virtual bool IsCampBase() { return false; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	al, al
	mov	esp, ebp
	pop	ebp
	ret	0
?IsCampBase@FalconEntity@@UAE_NXZ ENDP			; FalconEntity::IsCampBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuevent.h
;	COMDAT ?RequestOutOfBandTransmit@VuMessage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RequestOutOfBandTransmit@VuMessage@@QAEXXZ PROC	; VuMessage::RequestOutOfBandTransmit, COMDAT
; _this$ = ecx

; 181  : 	void RequestOutOfBandTransmit() { flags_ |= VU_OUT_OF_BAND_MSG_FLAG; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	or	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+6], cl
	mov	esp, ebp
	pop	ebp
	ret	0
?RequestOutOfBandTransmit@VuMessage@@QAEXXZ ENDP	; VuMessage::RequestOutOfBandTransmit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuevent.h
;	COMDAT ?RequestReliableTransmit@VuMessage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RequestReliableTransmit@VuMessage@@QAEXXZ PROC		; VuMessage::RequestReliableTransmit, COMDAT
; _this$ = ecx

; 180  : 	void RequestReliableTransmit() { flags_ |= VU_RELIABLE_MSG_FLAG; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	or	ecx, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+6], cl
	mov	esp, ebp
	pop	ebp
	ret	0
?RequestReliableTransmit@VuMessage@@QAEXXZ ENDP		; VuMessage::RequestReliableTransmit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Roll@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Roll@VuEntity@@QBEMXZ PROC				; VuEntity::Roll, COMDAT
; _this$ = ecx

; 166  : 	SM_SCALAR Roll() const { return orient_.roll_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+68]
	mov	esp, ebp
	pop	ebp
	ret	0
?Roll@VuEntity@@QBEMXZ ENDP				; VuEntity::Roll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Pitch@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Pitch@VuEntity@@QBEMXZ PROC				; VuEntity::Pitch, COMDAT
; _this$ = ecx

; 165  : 	SM_SCALAR Pitch() const { return orient_.pitch_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+64]
	mov	esp, ebp
	pop	ebp
	ret	0
?Pitch@VuEntity@@QBEMXZ ENDP				; VuEntity::Pitch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Yaw@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Yaw@VuEntity@@QBEMXZ PROC				; VuEntity::Yaw, COMDAT
; _this$ = ecx

; 164  : 	SM_SCALAR Yaw() const { return orient_.yaw_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?Yaw@VuEntity@@QBEMXZ ENDP				; VuEntity::Yaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZDelta@VuEntity@@QBEMXZ PROC				; VuEntity::ZDelta, COMDAT
; _this$ = ecx

; 163  : 	SM_SCALAR ZDelta() const { return pos_.dz_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::ZDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YDelta@VuEntity@@QBEMXZ PROC				; VuEntity::YDelta, COMDAT
; _this$ = ecx

; 162  : 	SM_SCALAR YDelta() const { return pos_.dy_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?YDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::YDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XDelta@VuEntity@@QBEMXZ PROC				; VuEntity::XDelta, COMDAT
; _this$ = ecx

; 161  : 	SM_SCALAR XDelta() const { return pos_.dx_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?XDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::XDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Type@VuEntity@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@VuEntity@@QBEGXZ PROC				; VuEntity::Type, COMDAT
; _this$ = ecx

; 154  : 	ushort Type() const       { return share_.entityType_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@VuEntity@@QBEGXZ ENDP				; VuEntity::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?SetYPRDelta@VuEntity@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dyaw$ = 8						; size = 4
_dpitch$ = 12						; size = 4
_droll$ = 16						; size = 4
?SetYPRDelta@VuEntity@@QAEXMMM@Z PROC			; VuEntity::SetYPRDelta, COMDAT
; _this$ = ecx

; 116  : 	void SetYPRDelta(SM_SCALAR dyaw, SM_SCALAR dpitch,SM_SCALAR droll){ 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 117  : 		orient_.dyaw_ = dyaw; orient_.dpitch_ = dpitch; orient_.droll_=droll; 

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _dyaw$[ebp]
	movss	DWORD PTR [eax+72], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _dpitch$[ebp]
	movss	DWORD PTR [ecx+76], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _droll$[ebp]
	movss	DWORD PTR [edx+80], xmm0

; 118  : 	}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetYPRDelta@VuEntity@@QAEXMMM@Z ENDP			; VuEntity::SetYPRDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?SetYPR@VuEntity@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_yaw$ = 8						; size = 4
_pitch$ = 12						; size = 4
_roll$ = 16						; size = 4
?SetYPR@VuEntity@@QAEXMMM@Z PROC			; VuEntity::SetYPR, COMDAT
; _this$ = ecx

; 113  : 	void SetYPR(SM_SCALAR yaw, SM_SCALAR pitch, SM_SCALAR roll){ 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 		orient_.yaw_ = yaw; orient_.pitch_ = pitch; orient_.roll_ = roll; 

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _yaw$[ebp]
	movss	DWORD PTR [eax+60], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _pitch$[ebp]
	movss	DWORD PTR [ecx+64], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _roll$[ebp]
	movss	DWORD PTR [edx+68], xmm0

; 115  : 	}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetYPR@VuEntity@@QAEXMMM@Z ENDP			; VuEntity::SetYPR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawbsp.h
;	COMDAT ?GetNumSwitches@DrawableBSP@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumSwitches@DrawableBSP@@QAEHXZ PROC		; DrawableBSP::GetNumSwitches, COMDAT
; _this$ = ecx

; 37   : 	int	GetNumSwitches( void )			{ return instance.ParentObject->nSwitches; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	movsx	eax, WORD PTR [ecx+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumSwitches@DrawableBSP@@QAEHXZ ENDP		; DrawableBSP::GetNumSwitches
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gout_of_range@std@@UAEPAXI@Z PROC			; std::out_of_range::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gout_of_range@std@@UAEPAXI@Z ENDP			; std::out_of_range::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV01@@Z PROC			; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7out_of_range@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV01@@Z ENDP			; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1out_of_range@std@@UAE@XZ PROC			; std::out_of_range::~out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1out_of_range@std@@UAE@XZ ENDP			; std::out_of_range::~out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR __Message$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@PBD@Z		; std::logic_error::logic_error
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7out_of_range@std@@6B@

; 146  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1717 : 		{	// return pointer to null-terminated nonmutable array

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1718 : 		return (this->_Myptr());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 1719 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 963  : 		{	// destroy the string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 964  : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 965  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	mov	esp, ebp
	pop	ebp
	ret	0
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0logic_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@PBD@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 38   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@

; 39   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@PBD@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
;	COMDAT ??$Abs@M@@YAMM@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
_A$ = 8							; size = 4
??$Abs@M@@YAMM@Z PROC					; Abs<float>, COMDAT

; 28   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 29   : 	return (A>=(T)0) ? A : -A;

	movss	xmm0, DWORD PTR _A$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN3@Abs
	movss	xmm0, DWORD PTR _A$[ebp]
	movss	DWORD PTR tv66[ebp], xmm0
	jmp	SHORT $LN4@Abs
$LN3@Abs:
	movss	xmm0, DWORD PTR _A$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[ebp], xmm0
$LN4@Abs:
	fld	DWORD PTR tv66[ebp]

; 30   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$Abs@M@@YAMM@Z ENDP					; Abs<float>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?asin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?asin@@YAMM@Z PROC					; asin, COMDAT

; 503  :         {return (asinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_asinf
	add	esp, 4
	pop	ebp
	ret	0
?asin@@YAMM@Z ENDP					; asin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _asinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_asinf	PROC						; COMDAT

; 402  :         {return ((float)asin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_asin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_asinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _acosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 400  :         {return ((float)acos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_acos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_acosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
