; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\OTWDRIVE\access.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
_BSS	SEGMENT
_sfxCtr	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
_DATA	SEGMENT
_sfxDist DD	046ea6000r			; 30000
_DATA	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
_NEAR_CLIP DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?GetNVGmode@CTimeOfDay@@QAEHXZ			; CTimeOfDay::GetNVGmode
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?SetHazeMode@RenderOTW@@QAEXH@Z			; RenderOTW::SetHazeMode
PUBLIC	?GetHazeMode@RenderOTW@@QAEHXZ			; RenderOTW::GetHazeMode
PUBLIC	?GetRoofMode@RenderOTW@@QAEHXZ			; RenderOTW::GetRoofMode
PUBLIC	?SetFilteringMode@RenderOTW@@QAEXH@Z		; RenderOTW::SetFilteringMode
PUBLIC	?GetFilteringMode@RenderOTW@@QAEHXZ		; RenderOTW::GetFilteringMode
PUBLIC	?SetGreenMode@RenderOTW@@QAEX_N@Z		; RenderOTW::SetGreenMode
PUBLIC	?GetGreenMode@RenderOTW@@QAE_NXZ		; RenderOTW::GetGreenMode
PUBLIC	?Radius@DrawableObject@@QBEMXZ			; DrawableObject::Radius
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?XDelta@VuEntity@@QBEMXZ			; VuEntity::XDelta
PUBLIC	?YDelta@VuEntity@@QBEMXZ			; VuEntity::YDelta
PUBLIC	?ZDelta@VuEntity@@QBEMXZ			; VuEntity::ZDelta
PUBLIC	?Yaw@VuEntity@@QBEMXZ				; VuEntity::Yaw
PUBLIC	?Pitch@VuEntity@@QBEMXZ				; VuEntity::Pitch
PUBLIC	?Roll@VuEntity@@QBEMXZ				; VuEntity::Roll
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?IsSim@FalconEntity@@QAEHXZ			; FalconEntity::IsSim
PUBLIC	?mlSinCos@@YAXPAUmlTrig@@M@Z			; mlSinCos
PUBLIC	?ObjectMagnification@RulesClass@@QAEMXZ		; RulesClass::ObjectMagnification
PUBLIC	?HazingOn@PlayerOptionsClass@@QAEHXZ		; PlayerOptionsClass::HazingOn
PUBLIC	?FilteringOn@PlayerOptionsClass@@QAEHXZ		; PlayerOptionsClass::FilteringOn
PUBLIC	?BuildingDeaggLevel@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::BuildingDeaggLevel
PUBLIC	?GetPadlockMode@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::GetPadlockMode
PUBLIC	?NameTagsOn@PlayerOptionsClass@@QAEHXZ		; PlayerOptionsClass::NameTagsOn
PUBLIC	?WeatherOn@PlayerOptionsClass@@QAEHXZ		; PlayerOptionsClass::WeatherOn
PUBLIC	?Get3dTrackIR@PlayerOptionsClass@@QBE_NXZ	; PlayerOptionsClass::Get3dTrackIR
PUBLIC	?GetMouseLook@PlayerOptionsClass@@QBE_NXZ	; PlayerOptionsClass::GetMouseLook
PUBLIC	?SetSimFlag@PlayerOptionsClass@@QAEXH@Z		; PlayerOptionsClass::SetSimFlag
PUBLIC	?ClearSimFlag@PlayerOptionsClass@@QAEXH@Z	; PlayerOptionsClass::ClearSimFlag
PUBLIC	?SetDispFlag@PlayerOptionsClass@@QAEXH@Z	; PlayerOptionsClass::SetDispFlag
PUBLIC	?ClearDispFlag@PlayerOptionsClass@@QAEXH@Z	; PlayerOptionsClass::ClearDispFlag
PUBLIC	?SetGenFlag@PlayerOptionsClass@@QAEXH@Z		; PlayerOptionsClass::SetGenFlag
PUBLIC	?ClearGenFlag@PlayerOptionsClass@@QAEXH@Z	; PlayerOptionsClass::ClearGenFlag
PUBLIC	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
PUBLIC	?IsSetFlag@SimBaseClass@@QBEHH@Z		; SimBaseClass::IsSetFlag
PUBLIC	?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetCampaignFlag
PUBLIC	?Status@SimBaseClass@@QBEHXZ			; SimBaseClass::Status
PUBLIC	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	?SetOTWDisplayMode@OTWDriverClass@@QAEXW4OTWDisplayMode@1@@Z ; OTWDriverClass::SetOTWDisplayMode
PUBLIC	?GetOTWDisplayMode@OTWDriverClass@@QAE?AW4OTWDisplayMode@1@XZ ; OTWDriverClass::GetOTWDisplayMode
PUBLIC	?CleanupDisplayMode@OTWDriverClass@@QAEXW4OTWDisplayMode@1@@Z ; OTWDriverClass::CleanupDisplayMode
PUBLIC	?SelectDisplayMode@OTWDriverClass@@QAEXW4OTWDisplayMode@1@0@Z ; OTWDriverClass::SelectDisplayMode
PUBLIC	?Select2DCockpitMode@OTWDriverClass@@QAEX_N@Z	; OTWDriverClass::Select2DCockpitMode
PUBLIC	?Select3DCockpitMode@OTWDriverClass@@QAEXXZ	; OTWDriverClass::Select3DCockpitMode
PUBLIC	?SelectF3PadlockMode@OTWDriverClass@@QAEXXZ	; OTWDriverClass::SelectF3PadlockMode
PUBLIC	?SelectExternal@OTWDriverClass@@QAEXXZ		; OTWDriverClass::SelectExternal
PUBLIC	?Cleanup2DCockpitMode@OTWDriverClass@@QAEXXZ	; OTWDriverClass::Cleanup2DCockpitMode
PUBLIC	?SetTrackPlatform@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetTrackPlatform
PUBLIC	?SetScale@OTWDriverClass@@QAEXM@Z		; OTWDriverClass::SetScale
PUBLIC	?SetDetail@OTWDriverClass@@QAEXH@Z		; OTWDriverClass::SetDetail
PUBLIC	?Scale@OTWDriverClass@@QAEMXZ			; OTWDriverClass::Scale
PUBLIC	?ViewTiltUp@OTWDriverClass@@QAEXXZ		; OTWDriverClass::ViewTiltUp
PUBLIC	?ViewTiltDown@OTWDriverClass@@QAEXXZ		; OTWDriverClass::ViewTiltDown
PUBLIC	?ViewTiltHold@OTWDriverClass@@QAEXXZ		; OTWDriverClass::ViewTiltHold
PUBLIC	?ViewSpinLeft@OTWDriverClass@@QAEXXZ		; OTWDriverClass::ViewSpinLeft
PUBLIC	?ViewSpinRight@OTWDriverClass@@QAEXXZ		; OTWDriverClass::ViewSpinRight
PUBLIC	?ViewSpinHold@OTWDriverClass@@QAEXXZ		; OTWDriverClass::ViewSpinHold
PUBLIC	?ViewReset@OTWDriverClass@@QAEXXZ		; OTWDriverClass::ViewReset
PUBLIC	?ViewZoomIn@OTWDriverClass@@QAEXXZ		; OTWDriverClass::ViewZoomIn
PUBLIC	?ViewZoomOut@OTWDriverClass@@QAEXXZ		; OTWDriverClass::ViewZoomOut
PUBLIC	?ViewRelativePanTilt@OTWDriverClass@@QAEHMM@Z	; OTWDriverClass::ViewRelativePanTilt
PUBLIC	?NVGToggle@OTWDriverClass@@QAEXXZ		; OTWDriverClass::NVGToggle
PUBLIC	?IDTagToggle@OTWDriverClass@@QAEXXZ		; OTWDriverClass::IDTagToggle
PUBLIC	?CampTagToggle@OTWDriverClass@@QAEXXZ		; OTWDriverClass::CampTagToggle
PUBLIC	?ViewStepNext@OTWDriverClass@@QAEXXZ		; OTWDriverClass::ViewStepNext
PUBLIC	?ViewStepPrev@OTWDriverClass@@QAEXXZ		; OTWDriverClass::ViewStepPrev
PUBLIC	?TargetStepNext@OTWDriverClass@@QAEXXZ		; OTWDriverClass::TargetStepNext
PUBLIC	?TargetStepPrev@OTWDriverClass@@QAEXXZ		; OTWDriverClass::TargetStepPrev
PUBLIC	?ToggleGLOC@OTWDriverClass@@QAEXXZ		; OTWDriverClass::ToggleGLOC
PUBLIC	?StepHeadingScale@OTWDriverClass@@QAEXXZ	; OTWDriverClass::StepHeadingScale
PUBLIC	?EndFlight@OTWDriverClass@@QAEXXZ		; OTWDriverClass::EndFlight
PUBLIC	?ToggleBilinearFilter@OTWDriverClass@@QAEXXZ	; OTWDriverClass::ToggleBilinearFilter
PUBLIC	?ToggleEyeFly@OTWDriverClass@@QAEXXZ		; OTWDriverClass::ToggleEyeFly
PUBLIC	?ToggleShading@OTWDriverClass@@QAEXXZ		; OTWDriverClass::ToggleShading
PUBLIC	?ToggleHaze@OTWDriverClass@@QAEXXZ		; OTWDriverClass::ToggleHaze
PUBLIC	?ToggleLocationDisplay@OTWDriverClass@@QAEXXZ	; OTWDriverClass::ToggleLocationDisplay
PUBLIC	?ToggleAeroDisplay@OTWDriverClass@@QAEXXZ	; OTWDriverClass::ToggleAeroDisplay
PUBLIC	?ToggleFlapDisplay@OTWDriverClass@@QAEXXZ	; OTWDriverClass::ToggleFlapDisplay
PUBLIC	?ToggleEngineDisplay@OTWDriverClass@@QAEXXZ	; OTWDriverClass::ToggleEngineDisplay
PUBLIC	?StartLocationEntry@OTWDriverClass@@QAEXXZ	; OTWDriverClass::StartLocationEntry
PUBLIC	?ToggleRoof@OTWDriverClass@@QAEXXZ		; OTWDriverClass::ToggleRoof
PUBLIC	?ScaleDown@OTWDriverClass@@QAEXXZ		; OTWDriverClass::ScaleDown
PUBLIC	?ScaleUp@OTWDriverClass@@QAEXXZ			; OTWDriverClass::ScaleUp
PUBLIC	?DetailDown@OTWDriverClass@@QAEXXZ		; OTWDriverClass::DetailDown
PUBLIC	?DetailUp@OTWDriverClass@@QAEXXZ		; OTWDriverClass::DetailUp
PUBLIC	?ToggleWeather@OTWDriverClass@@QAEXXZ		; OTWDriverClass::ToggleWeather
PUBLIC	?ToggleAutoScale@OTWDriverClass@@QAEXXZ		; OTWDriverClass::ToggleAutoScale
PUBLIC	?SetPopup@OTWDriverClass@@QAEXHH@Z		; OTWDriverClass::SetPopup
PUBLIC	?GlanceForward@OTWDriverClass@@QAEXXZ		; OTWDriverClass::GlanceForward
PUBLIC	?GlanceAft@OTWDriverClass@@QAEXXZ		; OTWDriverClass::GlanceAft
PUBLIC	?EyeFlyStateStep@OTWDriverClass@@QAEXXZ		; OTWDriverClass::EyeFlyStateStep
PUBLIC	?ToggleActionCamera@OTWDriverClass@@QAEXXZ	; OTWDriverClass::ToggleActionCamera
PUBLIC	?ToggleThrustReverseDisplay@OTWDriverClass@@QAEXXZ ; OTWDriverClass::ToggleThrustReverseDisplay
PUBLIC	??4?$VuBin@VSimBaseClass@@@@QAEABV0@ABV0@@Z	; VuBin<SimBaseClass>::operator=
PUBLIC	??7?$VuBin@VSimBaseClass@@@@QBE_NXZ		; VuBin<SimBaseClass>::operator!
PUBLIC	??B?$VuBin@VSimBaseClass@@@@QBE_NXZ		; VuBin<SimBaseClass>::operator bool
PUBLIC	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
PUBLIC	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
PUBLIC	?reset@?$VuBin@VSimBaseClass@@@@QAEXPAVSimBaseClass@@@Z ; VuBin<SimBaseClass>::reset
PUBLIC	?ToggleHybridPitMode@OTWDriverClass@@QAEXXZ	; OTWDriverClass::ToggleHybridPitMode
PUBLIC	?GetHybridPitMode@OTWDriverClass@@QAEHXZ	; OTWDriverClass::GetHybridPitMode
PUBLIC	?Padlock_SetPriority@OTWDriverClass@@QAEXW4PadlockPriority@1@@Z ; OTWDriverClass::Padlock_SetPriority
PUBLIC	?ToggleSidebar@OTWDriverClass@@QAEXXZ		; OTWDriverClass::ToggleSidebar
PUBLIC	?SetDefaultPanel@CockpitManager@@QAEXH@Z	; CockpitManager::SetDefaultPanel
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
PUBLIC	?Parent@SimWeaponClass@@QAEPAVFalconEntity@@XZ	; SimWeaponClass::Parent
PUBLIC	?GenerateFastRandom@@YAJXZ			; GenerateFastRandom
PUBLIC	?PRANDFloat@@YAMXZ				; PRANDFloat
PUBLIC	?PRANDFloatPos@@YAMXZ				; PRANDFloatPos
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA	; `GenerateFastRandom'::`2'::LastRandom
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3c8efa34
PUBLIC	__real@3e99999a
PUBLIC	__real@3eb33333
PUBLIC	__real@3f000000
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f800000
PUBLIC	__real@3fa00000
PUBLIC	__real@40000000
PUBLIC	__real@4004000000000000
PUBLIC	__real@40a00000
PUBLIC	__real@41200000
PUBLIC	__real@41400000
PUBLIC	__real@41a00000
PUBLIC	__real@42480000
PUBLIC	__real@42c80000
PUBLIC	__real@43480000
PUBLIC	__real@43c80000
PUBLIC	__real@442f0000
PUBLIC	__real@466a6000
PUBLIC	__real@477fff00
PUBLIC	__real@bf800000
PUBLIC	__real@bfc00000
PUBLIC	__real@c1a00000
PUBLIC	__real@c2480000
PUBLIC	__real@c2960000
PUBLIC	__real@c3fa0000
PUBLIC	__real@c4610000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_fabs:PROC
EXTRN	_rand:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?SetNVGmode@CTimeOfDay@@QAEXH@Z:PROC		; CTimeOfDay::SetNVGmode
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?SetNVGmode@ContextMPR@@QAEXH@Z:PROC		; ContextMPR::SetNVGmode
EXTRN	?SetRoofMode@RenderOTW@@QAEXH@Z:PROC		; RenderOTW::SetRoofMode
EXTRN	?SetupStates@RenderOTW@@IAEXXZ:PROC		; RenderOTW::SetupStates
EXTRN	?VuReferenceEntity@@YAHPAVVuEntity@@@Z:PROC	; VuReferenceEntity
EXTRN	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z:PROC	; VuDeReferenceEntity
EXTRN	?Remove@VuCollection@@QAEHPAVVuEntity@@@Z:PROC	; VuCollection::Remove
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	?AttachCamera@VuSessionEntity@@QAEHPAVVuEntity@@_N@Z:PROC ; VuSessionEntity::AttachCamera
EXTRN	?RemoveCamera@VuSessionEntity@@QAEHPAVVuEntity@@_N@Z:PROC ; VuSessionEntity::RemoveCamera
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetFirst
EXTRN	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetNext
EXTRN	?SetStatusBit@SimBaseClass@@QAEXH@Z:PROC	; SimBaseClass::SetStatusBit
EXTRN	?ClearStatusBit@SimBaseClass@@QAEXH@Z:PROC	; SimBaseClass::ClearStatusBit
EXTRN	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z:PROC ; OTWDriverClass::GetGroundLevel
EXTRN	?SetGraphicsOwnship@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z:PROC ; OTWDriverClass::SetGraphicsOwnship
EXTRN	?FindNextViewObject@OTWDriverClass@@QAEPAVSimBaseClass@@PAVFalconEntity@@PAV2@W4ViewFindMode@1@@Z:PROC ; OTWDriverClass::FindNextViewObject
EXTRN	?InsertObject@OTWDriverClass@@QAEXPAVDrawableObject@@@Z:PROC ; OTWDriverClass::InsertObject
EXTRN	?RemoveObject@OTWDriverClass@@QAEXPAVDrawableObject@@H@Z:PROC ; OTWDriverClass::RemoveObject
EXTRN	?SetFOV@OTWDriverClass@@QAEXM@Z:PROC		; OTWDriverClass::SetFOV
EXTRN	?RescaleAllObjects@OTWDriverClass@@QAEXXZ:PROC	; OTWDriverClass::RescaleAllObjects
EXTRN	?SetExitMenu@OTWDriverClass@@QAEXH@Z:PROC	; OTWDriverClass::SetExitMenu
EXTRN	?SetmpPadlockPriorityObject@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z:PROC ; OTWDriverClass::SetmpPadlockPriorityObject
EXTRN	?Padlock_FindNextPriority@OTWDriverClass@@AAEXH@Z:PROC ; OTWDriverClass::Padlock_FindNextPriority
EXTRN	?SetGreenMode@DrawableClass@@SAXH@Z:PROC	; DrawableClass::SetGreenMode
EXTRN	?SetImageBuffer@MFDClass@@QAEXPAVImageBuffer@@MMMM@Z:PROC ; MFDClass::SetImageBuffer
EXTRN	?SetActivePanel@CockpitManager@@QAE_NH@Z:PROC	; CockpitManager::SetActivePanel
EXTRN	?UpdatePalette@CockpitManager@@QAEXXZ:PROC	; CockpitManager::UpdatePalette
EXTRN	?Set2DPanelDirection@CockpitManager@@QAEHMM@Z:PROC ; CockpitManager::Set2DPanelDirection
EXTRN	?GetComponentLead@CampBaseClass@@QAEPAVSimBaseClass@@XZ:PROC ; CampBaseClass::GetComponentLead
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	?AddToFeatureList@SimulationDriver@@QAEXPAVVuEntity@@@Z:PROC ; SimulationDriver::AddToFeatureList
EXTRN	?POVKludgeFunction@SimulationDriver@@QAEXK@Z:PROC ; SimulationDriver::POVKludgeFunction
EXTRN	?BumpViewUp@MouseView@@QAEXM@Z:PROC		; MouseView::BumpViewUp
EXTRN	?BumpViewLeft@MouseView@@QAEXM@Z:PROC		; MouseView::BumpViewLeft
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?TheTimeOfDay@@3VCTimeOfDay@@A:BYTE		; TheTimeOfDay
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?drawLabels@DrawableBSP@@2HA:DWORD		; DrawableBSP::drawLabels
EXTRN	?drawLabels@DrawablePoint@@2HA:DWORD		; DrawablePoint::drawLabels
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?vuxRealTime@@3KA:DWORD				; vuxRealTime
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	?SimLibElapsedTime@@3KA:DWORD			; SimLibElapsedTime
EXTRN	?PlayerOptions@@3VPlayerOptionsClass@@A:BYTE	; PlayerOptions
EXTRN	?CommandsKeyCombo@@3HA:DWORD			; CommandsKeyCombo
EXTRN	?CommandsKeyComboMod@@3HA:DWORD			; CommandsKeyComboMod
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?TheHud@@3PAVHudClass@@A:DWORD			; TheHud
EXTRN	?MfdDisplay@@3PAPAVMFDClass@@A:BYTE		; MfdDisplay
EXTRN	?DisplayOptions@@3VDisplayOptionsClass@@A:BYTE	; DisplayOptions
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?chatterCount@@3IA:DWORD			; chatterCount
EXTRN	?chatterStr@@3PADA:BYTE				; chatterStr
EXTRN	?eyeFlyTgt@@3PAVSimBaseClass@@A:DWORD		; eyeFlyTgt
EXTRN	?eyeFlyEnabled@@3HA:DWORD			; eyeFlyEnabled
EXTRN	?bNVGmode@@3_NA:BYTE				; bNVGmode
EXTRN	?g_f3DHeadTilt@@3MA:DWORD			; g_f3DHeadTilt
EXTRN	?g_f3DPitFOV@@3MA:DWORD				; g_f3DPitFOV
EXTRN	?g_bSync2D3DPit@@3_NA:BYTE			; g_bSync2D3DPit
EXTRN	?g_bEnableTrackIR@@3_NA:BYTE			; g_bEnableTrackIR
EXTRN	?theMouseView@@3VMouseView@@A:BYTE		; theMouseView
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA
_BSS	SEGMENT
?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA DD 01H DUP (?) ; `GenerateFastRandom'::`2'::LastRandom
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c4610000
CONST	SEGMENT
__real@c4610000 DD 0c4610000r			; -900
CONST	ENDS
;	COMDAT __real@c3fa0000
CONST	SEGMENT
__real@c3fa0000 DD 0c3fa0000r			; -500
CONST	ENDS
;	COMDAT __real@c2960000
CONST	SEGMENT
__real@c2960000 DD 0c2960000r			; -75
CONST	ENDS
;	COMDAT __real@c2480000
CONST	SEGMENT
__real@c2480000 DD 0c2480000r			; -50
CONST	ENDS
;	COMDAT __real@c1a00000
CONST	SEGMENT
__real@c1a00000 DD 0c1a00000r			; -20
CONST	ENDS
;	COMDAT __real@bfc00000
CONST	SEGMENT
__real@bfc00000 DD 0bfc00000r			; -1.5
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@477fff00
CONST	SEGMENT
__real@477fff00 DD 0477fff00r			; 65535
CONST	ENDS
;	COMDAT __real@466a6000
CONST	SEGMENT
__real@466a6000 DD 0466a6000r			; 15000
CONST	ENDS
;	COMDAT __real@442f0000
CONST	SEGMENT
__real@442f0000 DD 0442f0000r			; 700
CONST	ENDS
;	COMDAT __real@43c80000
CONST	SEGMENT
__real@43c80000 DD 043c80000r			; 400
CONST	ENDS
;	COMDAT __real@43480000
CONST	SEGMENT
__real@43480000 DD 043480000r			; 200
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@41400000
CONST	SEGMENT
__real@41400000 DD 041400000r			; 12
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@4004000000000000
CONST	SEGMENT
__real@4004000000000000 DQ 04004000000000000r	; 2.5
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fa00000
CONST	SEGMENT
__real@3fa00000 DD 03fa00000r			; 1.25
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3eb33333
CONST	SEGMENT
__real@3eb33333 DD 03eb33333r			; 0.35
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?SetDetail@OTWDriverClass@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetDetail@OTWDriverClass@@QAEXH@Z$0
__ehfuncinfo$?SetDetail@OTWDriverClass@@QAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetDetail@OTWDriverClass@@QAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?PRANDFloatPos@@YAMXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_x$ = -4						; size = 4
?PRANDFloatPos@@YAMXZ PROC				; PRANDFloatPos, COMDAT

; 150  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 151  : //	return NRANDPOS;
; 152  : 	float	x=	(float)(GenerateFastRandom()&0xffff);

	call	?GenerateFastRandom@@YAJXZ		; GenerateFastRandom
	and	eax, 65535				; 0000ffffH
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _x$[ebp], xmm0

; 153  : 	return( x / 65535.0f);

	movss	xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv72[ebp], xmm0
	fld	DWORD PTR tv72[ebp]

; 154  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PRANDFloatPos@@YAMXZ ENDP				; PRANDFloatPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?PRANDFloat@@YAMXZ
_TEXT	SEGMENT
tv75 = -8						; size = 4
_x$ = -4						; size = 4
?PRANDFloat@@YAMXZ PROC					; PRANDFloat, COMDAT

; 143  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 144  : //	return NRAND;
; 145  : 	float	x=	(float)(GenerateFastRandom()&0xffff);

	call	?GenerateFastRandom@@YAJXZ		; GenerateFastRandom
	and	eax, 65535				; 0000ffffH
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _x$[ebp], xmm0

; 146  : 	return( 1 - 2 * x / 65535.0f);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR __real@477fff00
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR tv75[ebp], xmm1
	fld	DWORD PTR tv75[ebp]

; 147  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PRANDFloat@@YAMXZ ENDP					; PRANDFloat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?GenerateFastRandom@@YAJXZ
_TEXT	SEGMENT
_FastRandom$ = -4					; size = 4
?GenerateFastRandom@@YAJXZ PROC				; GenerateFastRandom, COMDAT

; 108  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 109  : 	static long LastRandom;
; 110  : 	long	FastRandom;														// The Random Variable
; 111  : 	_asm {	
; 112  : 			push	edx

	push	edx

; 113  : 			push	eax

	push	eax

; 114  : 			RDTSC

	rdtsc

; 115  : 			add	DWORD PTR FastRandom,edx

	add	DWORD PTR _FastRandom$[ebp], edx

; 116  : 			xor	DWORD PTR FastRandom,eax

	xor	DWORD PTR _FastRandom$[ebp], eax

; 117  : 			mov	eax, DWORD PTR LastRandom

	mov	eax, DWORD PTR ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA ; `GenerateFastRandom'::`2'::LastRandom

; 118  : 			add	DWORD PTR FastRandom,eax

	add	DWORD PTR _FastRandom$[ebp], eax

; 119  : 			add	DWORD PTR LastRandom,edx

	add	DWORD PTR ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA, edx ; `GenerateFastRandom'::`2'::LastRandom

; 120  : 			pop	eax

	pop	eax

; 121  : 			pop	edx

	pop	edx

; 122  : 	}
; 123  : 	return(FastRandom);

	mov	eax, DWORD PTR _FastRandom$[ebp]

; 124  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GenerateFastRandom@@YAJXZ ENDP				; GenerateFastRandom
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simweapn.h
;	COMDAT ?Parent@SimWeaponClass@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Parent@SimWeaponClass@@QAEPAVFalconEntity@@XZ PROC	; SimWeaponClass::Parent, COMDAT
; _this$ = ecx

; 45   : 	FalconEntity* Parent(void) { return parent.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 688				; 000002b0H
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?Parent@SimWeaponClass@@QAEPAVFalconEntity@@XZ ENDP	; SimWeaponClass::Parent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ PROC ; SimulationDriver::GetPlayerEntity, COMDAT
; _this$ = ecx

; 76   : 	SimMoverClass *GetPlayerEntity() const { return const_cast<SimMoverClass*>(playerEntity); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ENDP ; SimulationDriver::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\cpmanager.h
;	COMDAT ?SetDefaultPanel@CockpitManager@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_defaultPanel$ = 8					; size = 4
?SetDefaultPanel@CockpitManager@@QAEXH@Z PROC		; CockpitManager::SetDefaultPanel, COMDAT
; _this$ = ecx

; 571  : 	void		SetDefaultPanel(int defaultPanel) {SetActivePanel(defaultPanel);}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _defaultPanel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetActivePanel@CockpitManager@@QAE_NH@Z ; CockpitManager::SetActivePanel
	mov	esp, ebp
	pop	ebp
	ret	4
?SetDefaultPanel@CockpitManager@@QAEXH@Z ENDP		; CockpitManager::SetDefaultPanel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToggleSidebar@OTWDriverClass@@QAEXXZ PROC		; OTWDriverClass::ToggleSidebar
; _this$ = ecx

; 64   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 65   : 	if(mDoSidebar) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+33852], 0
	je	SHORT $LN3@ToggleSide

; 66   : 		mDoSidebar = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+33852], 0

; 67   : 	}
; 68   : 	else {

	jmp	SHORT $LN4@ToggleSide
$LN3@ToggleSide:

; 69   : 		mDoSidebar = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+33852], 1

; 70   : 		if(pPadlockCPManager)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+33688], 0
	je	SHORT $LN4@ToggleSide

; 71   : 			pPadlockCPManager->SetDefaultPanel(PADLOCK_DEFAULT_PANEL);

	push	100					; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+33688]
	call	?SetDefaultPanel@CockpitManager@@QAEXH@Z ; CockpitManager::SetDefaultPanel
$LN4@ToggleSide:

; 72   : 
; 73   : 	}
; 74   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleSidebar@OTWDriverClass@@QAEXXZ ENDP		; OTWDriverClass::ToggleSidebar
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newPriority$ = 8					; size = 4
?Padlock_SetPriority@OTWDriverClass@@QAEXW4PadlockPriority@1@@Z PROC ; OTWDriverClass::Padlock_SetPriority
; _this$ = ecx

; 1826 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1827 : //   if (padlockPriority == newPriority)
; 1828 : //   {
; 1829 : //      tgtStep = 1;
; 1830 : //   }
; 1831 : //   else
; 1832 : //   {
; 1833 :       padlockPriority = newPriority;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newPriority$[ebp]
	mov	DWORD PTR [eax+33832], ecx

; 1834 :       if (otwPlatform) {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??B?$VuBin@VSimBaseClass@@@@QBE_NXZ	; VuBin<SimBaseClass>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@Padlock_Se

; 1835 : 		  PadlockOccludedTime = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+33828], xmm0

; 1836 : 		  Padlock_FindNextPriority(FALSE);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Padlock_FindNextPriority@OTWDriverClass@@AAEXH@Z ; OTWDriverClass::Padlock_FindNextPriority
$LN1@Padlock_Se:

; 1837 : 		}
; 1838 : //   }
; 1839 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Padlock_SetPriority@OTWDriverClass@@QAEXW4PadlockPriority@1@@Z ENDP ; OTWDriverClass::Padlock_SetPriority
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHybridPitMode@OTWDriverClass@@QAEHXZ PROC		; OTWDriverClass::GetHybridPitMode
; _this$ = ecx

; 450  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 451  : 	return HybridPitModeEnabled;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+33564]

; 452  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetHybridPitMode@OTWDriverClass@@QAEHXZ ENDP		; OTWDriverClass::GetHybridPitMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToggleHybridPitMode@OTWDriverClass@@QAEXXZ PROC	; OTWDriverClass::ToggleHybridPitMode
; _this$ = ecx

; 435  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 436  : 
; 437  : 	if (!HybridPitModeEnabled)		

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+33564], 0
	jne	SHORT $LN5@ToggleHybr

; 438  : 	{
; 439  : 		if (g_bSync2D3DPit)	

	movzx	ecx, BYTE PTR ?g_bSync2D3DPit@@3_NA	; g_bSync2D3DPit
	test	ecx, ecx
	je	SHORT $LN4@ToggleHybr

; 440  : 			if (g_bEnableTrackIR && PlayerOptions.Get3dTrackIR() == true)	//added check for 3d TIR being enabled

	movzx	edx, BYTE PTR ?g_bEnableTrackIR@@3_NA	; g_bEnableTrackIR
	test	edx, edx
	je	SHORT $LN3@ToggleHybr
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?Get3dTrackIR@PlayerOptionsClass@@QBE_NXZ ; PlayerOptionsClass::Get3dTrackIR
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN3@ToggleHybr

; 441  : 				HybridPitModeEnabled = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+33564], 1

; 442  : 			else

	jmp	SHORT $LN4@ToggleHybr
$LN3@ToggleHybr:

; 443  : 				HybridPitModeEnabled = 2;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+33564], 2
$LN4@ToggleHybr:

; 444  : 	}
; 445  : 	else 

	jmp	SHORT $LN6@ToggleHybr
$LN5@ToggleHybr:

; 446  : 		HybridPitModeEnabled = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+33564], 0
$LN6@ToggleHybr:

; 447  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleHybridPitMode@OTWDriverClass@@QAEXXZ ENDP	; OTWDriverClass::ToggleHybridPitMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?reset@?$VuBin@VSimBaseClass@@@@QAEXPAVSimBaseClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newe$ = 8						; size = 4
?reset@?$VuBin@VSimBaseClass@@@@QAEXPAVSimBaseClass@@@Z PROC ; VuBin<SimBaseClass>::reset, COMDAT
; _this$ = ecx

; 60   : 	void reset(E *newe = NULL){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 61   : 		if (newe == e){ return; }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newe$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN1@reset
	jmp	SHORT $LN2@reset
$LN1@reset:

; 62   : 		VuReferenceEntity(newe); // ref new pointer

	mov	edx, DWORD PTR _newe$[ebp]
	push	edx
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4

; 63   : 		VuDeReferenceEntity(e);  // unref old pointer

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z ; VuDeReferenceEntity
	add	esp, 4

; 64   : 		e = newe;                // get new pointer

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newe$[ebp]
	mov	DWORD PTR [edx], eax
$LN2@reset:

; 65   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?reset@?$VuBin@VSimBaseClass@@@@QAEXPAVSimBaseClass@@@Z ENDP ; VuBin<SimBaseClass>::reset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ PROC ; VuBin<SimBaseClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ENDP ; VuBin<SimBaseClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ PROC	; VuBin<SimBaseClass>::operator->, COMDAT
; _this$ = ecx

; 50   : 	E *operator->() const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 52   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ENDP	; VuBin<SimBaseClass>::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VSimBaseClass@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VSimBaseClass@@@@QBE_NXZ PROC		; VuBin<SimBaseClass>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VSimBaseClass@@@@QBE_NXZ ENDP		; VuBin<SimBaseClass>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??7?$VuBin@VSimBaseClass@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??7?$VuBin@VSimBaseClass@@@@QBE_NXZ PROC		; VuBin<SimBaseClass>::operator!, COMDAT
; _this$ = ecx

; 37   : 	bool operator!() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 		return e == NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 39   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??7?$VuBin@VSimBaseClass@@@@QBE_NXZ ENDP		; VuBin<SimBaseClass>::operator!
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??4?$VuBin@VSimBaseClass@@@@QAEABV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??4?$VuBin@VSimBaseClass@@@@QAEABV0@ABV0@@Z PROC	; VuBin<SimBaseClass>::operator=, COMDAT
; _this$ = ecx

; 24   : 	const VuBin &operator=(const VuBin &rhs){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 25   : 		reset(rhs.e);

	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reset@?$VuBin@VSimBaseClass@@@@QAEXPAVSimBaseClass@@@Z ; VuBin<SimBaseClass>::reset

; 26   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 27   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??4?$VuBin@VSimBaseClass@@@@QAEABV0@ABV0@@Z ENDP	; VuBin<SimBaseClass>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?ToggleThrustReverseDisplay@OTWDriverClass@@QAEXXZ PROC	; OTWDriverClass::ToggleThrustReverseDisplay
; _this$ = ecx

; 1353 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1354 : 	showThrustReverse = !showThrustReverse;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32212], 0
	jne	SHORT $LN3@ToggleThru
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@ToggleThru
$LN3@ToggleThru:
	mov	DWORD PTR tv67[ebp], 0
$LN4@ToggleThru:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR [ecx+32212], edx

; 1355 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleThrustReverseDisplay@OTWDriverClass@@QAEXXZ ENDP	; OTWDriverClass::ToggleThrustReverseDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToggleActionCamera@OTWDriverClass@@QAEXXZ PROC		; OTWDriverClass::ToggleActionCamera
; _this$ = ecx

; 413  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 414  : 	if ( actionCameraMode == FALSE )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+33556], 0
	jne	SHORT $LN2@ToggleActi

; 415  : 	{
; 416  : 		// 1st go into chase mode
; 417  : 		SetOTWDisplayMode( ModeChase );

	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetOTWDisplayMode@OTWDriverClass@@QAEXW4OTWDisplayMode@1@@Z ; OTWDriverClass::SetOTWDisplayMode

; 418  : 
; 419  : 		// turn on
; 420  : 		actionCameraMode = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+33556], 1

; 421  : 
; 422  : 		// set the timer
; 423  : 		actionCameraTimer = vuxRealTime;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?vuxRealTime@@3KA	; vuxRealTime
	mov	DWORD PTR [edx+33560], eax

; 424  : 	}
; 425  : 	else

	jmp	SHORT $LN3@ToggleActi
$LN2@ToggleActi:

; 426  : 	{
; 427  : 		// turn off
; 428  : 		actionCameraMode = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+33556], 0
$LN3@ToggleActi:

; 429  : 	}
; 430  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleActionCamera@OTWDriverClass@@QAEXXZ ENDP		; OTWDriverClass::ToggleActionCamera
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_curStatus$ = -4					; size = 4
?EyeFlyStateStep@OTWDriverClass@@QAEXXZ PROC		; OTWDriverClass::EyeFlyStateStep
; _this$ = ecx

; 1842 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1843 : int curStatus;
; 1844 : 
; 1845 :    if (eyeFlyTgt)

	cmp	DWORD PTR ?eyeFlyTgt@@3PAVSimBaseClass@@A, 0 ; eyeFlyTgt
	je	SHORT $LN2@EyeFlyStat

; 1846 :    {
; 1847 :       curStatus = eyeFlyTgt->Status() & VIS_TYPE_MASK;

	mov	ecx, DWORD PTR ?eyeFlyTgt@@3PAVSimBaseClass@@A ; eyeFlyTgt
	call	?Status@SimBaseClass@@QBEHXZ		; SimBaseClass::Status
	and	eax, 7
	mov	DWORD PTR _curStatus$[ebp], eax

; 1848 :       curStatus ++;

	mov	eax, DWORD PTR _curStatus$[ebp]
	add	eax, 1
	mov	DWORD PTR _curStatus$[ebp], eax

; 1849 :       curStatus %= 4;

	mov	ecx, DWORD PTR _curStatus$[ebp]
	and	ecx, -2147483645			; 80000003H
	jns	SHORT $LN4@EyeFlyStat
	dec	ecx
	or	ecx, -4					; fffffffcH
	inc	ecx
$LN4@EyeFlyStat:
	mov	DWORD PTR _curStatus$[ebp], ecx

; 1850 :       eyeFlyTgt->ClearStatusBit (VIS_TYPE_MASK);

	push	7
	mov	ecx, DWORD PTR ?eyeFlyTgt@@3PAVSimBaseClass@@A ; eyeFlyTgt
	call	?ClearStatusBit@SimBaseClass@@QAEXH@Z	; SimBaseClass::ClearStatusBit

; 1851 : 		eyeFlyTgt->SetStatusBit(curStatus);

	mov	edx, DWORD PTR _curStatus$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?eyeFlyTgt@@3PAVSimBaseClass@@A ; eyeFlyTgt
	call	?SetStatusBit@SimBaseClass@@QAEXH@Z	; SimBaseClass::SetStatusBit
$LN2@EyeFlyStat:

; 1852 :    }
; 1853 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?EyeFlyStateStep@OTWDriverClass@@QAEXXZ ENDP		; OTWDriverClass::EyeFlyStateStep
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GlanceAft@OTWDriverClass@@QAEXXZ PROC			; OTWDriverClass::GlanceAft
; _this$ = ecx

; 1818 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1819 :    if (padlockGlance == GlanceTail)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+33856], 2
	jne	SHORT $LN2@GlanceAft

; 1820 :       padlockGlance = GlanceNone;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+33856], 0

; 1821 :    else

	jmp	SHORT $LN3@GlanceAft
$LN2@GlanceAft:

; 1822 :       padlockGlance = GlanceTail;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+33856], 2
$LN3@GlanceAft:

; 1823 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GlanceAft@OTWDriverClass@@QAEXXZ ENDP			; OTWDriverClass::GlanceAft
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GlanceForward@OTWDriverClass@@QAEXXZ PROC		; OTWDriverClass::GlanceForward
; _this$ = ecx

; 1810 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1811 :    if (padlockGlance == GlanceNose)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+33856], 1
	jne	SHORT $LN2@GlanceForw

; 1812 :       padlockGlance = GlanceNone;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+33856], 0

; 1813 :    else

	jmp	SHORT $LN3@GlanceForw
$LN2@GlanceForw:

; 1814 :       padlockGlance = GlanceNose;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+33856], 1
$LN3@GlanceForw:

; 1815 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GlanceForward@OTWDriverClass@@QAEXXZ ENDP		; OTWDriverClass::GlanceForward
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_popNum$ = 8						; size = 4
_flag$ = 12						; size = 4
?SetPopup@OTWDriverClass@@QAEXHH@Z PROC			; OTWDriverClass::SetPopup
; _this$ = ecx

; 1802 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1803 :    if (flag)

	cmp	DWORD PTR _flag$[ebp], 0
	je	SHORT $LN2@SetPopup

; 1804 :       popupHas[popNum] = popNum;

	mov	eax, DWORD PTR _popNum$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _popNum$[ebp]
	mov	DWORD PTR [ecx+eax*4+32088], edx

; 1805 :    else

	jmp	SHORT $LN3@SetPopup
$LN2@SetPopup:

; 1806 :       popupHas[popNum] = -1;

	mov	eax, DWORD PTR _popNum$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+32088], -1
$LN3@SetPopup:

; 1807 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetPopup@OTWDriverClass@@QAEXHH@Z ENDP			; OTWDriverClass::SetPopup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToggleAutoScale@OTWDriverClass@@QAEXXZ PROC		; OTWDriverClass::ToggleAutoScale
; _this$ = ecx

; 1548 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1549 :    autoScale = 1 - autoScale;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, 1
	sub	ecx, DWORD PTR [eax+32176]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32176], ecx

; 1550 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleAutoScale@OTWDriverClass@@QAEXXZ ENDP		; OTWDriverClass::ToggleAutoScale
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToggleWeather@OTWDriverClass@@QAEXXZ PROC		; OTWDriverClass::ToggleWeather
; _this$ = ecx

; 1458 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1459 : 	if(PlayerOptions.WeatherOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?WeatherOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::WeatherOn
	test	eax, eax
	je	SHORT $LN2@ToggleWeat

; 1460 : 		PlayerOptions.ClearGenFlag(GEN_NO_WEATHER);

	push	1
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?ClearGenFlag@PlayerOptionsClass@@QAEXH@Z ; PlayerOptionsClass::ClearGenFlag

; 1461 : 	else

	jmp	SHORT $LN1@ToggleWeat
$LN2@ToggleWeat:

; 1462 : 		PlayerOptions.SetGenFlag(GEN_NO_WEATHER);

	push	1
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?SetGenFlag@PlayerOptionsClass@@QAEXH@Z	; PlayerOptionsClass::SetGenFlag
$LN1@ToggleWeat:

; 1463 : 
; 1464 :    weatherCmd = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32204], 1

; 1465 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleWeather@OTWDriverClass@@QAEXXZ ENDP		; OTWDriverClass::ToggleWeather
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_oldlevel$ = -4						; size = 4
?DetailUp@OTWDriverClass@@QAEXXZ PROC			; OTWDriverClass::DetailUp
; _this$ = ecx

; 1433 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1434 : 	int oldlevel = PlayerOptions.BuildingDeaggLevel();

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?BuildingDeaggLevel@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::BuildingDeaggLevel
	mov	DWORD PTR _oldlevel$[ebp], eax

; 1435 : 	if (oldlevel < 5)

	cmp	DWORD PTR _oldlevel$[ebp], 5
	jge	SHORT $LN2@DetailUp

; 1436 : 		SetDetail(oldlevel + 1);

	mov	eax, DWORD PTR _oldlevel$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDetail@OTWDriverClass@@QAEXH@Z	; OTWDriverClass::SetDetail
$LN2@DetailUp:

; 1437 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DetailUp@OTWDriverClass@@QAEXXZ ENDP			; OTWDriverClass::DetailUp
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_oldlevel$ = -4						; size = 4
?DetailDown@OTWDriverClass@@QAEXXZ PROC			; OTWDriverClass::DetailDown
; _this$ = ecx

; 1426 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1427 : 	int oldlevel = PlayerOptions.BuildingDeaggLevel();

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?BuildingDeaggLevel@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::BuildingDeaggLevel
	mov	DWORD PTR _oldlevel$[ebp], eax

; 1428 : 	if (oldlevel > 0)

	cmp	DWORD PTR _oldlevel$[ebp], 0
	jle	SHORT $LN2@DetailDown

; 1429 : 		SetDetail(oldlevel - 1);

	mov	eax, DWORD PTR _oldlevel$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDetail@OTWDriverClass@@QAEXH@Z	; OTWDriverClass::SetDetail
$LN2@DetailDown:

; 1430 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DetailDown@OTWDriverClass@@QAEXXZ ENDP			; OTWDriverClass::DetailDown
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
tv192 = -44						; size = 4
tv205 = -40						; size = 4
tv187 = -36						; size = 4
tv179 = -32						; size = 4
tv173 = -28						; size = 4
tv203 = -24						; size = 4
tv168 = -20						; size = 4
tv152 = -16						; size = 4
tv134 = -12						; size = 4
tv78 = -8						; size = 4
_this$ = -4						; size = 4
?ScaleUp@OTWDriverClass@@QAEXXZ PROC			; OTWDriverClass::ScaleUp
; _this$ = ecx

; 1369 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1370 : 	if(Scale() == FalconLocalGame->rules.ObjectMagnification())

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@ScaleUp
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN6@ScaleUp
$LN5@ScaleUp:
	mov	DWORD PTR tv78[ebp], 0
$LN6@ScaleUp:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Scale@OTWDriverClass@@QAEMXZ		; OTWDriverClass::Scale
	fstp	DWORD PTR tv168[ebp]
	movss	xmm0, DWORD PTR tv168[ebp]
	mov	ecx, DWORD PTR tv78[ebp]
	add	ecx, 356				; 00000164H
	movss	DWORD PTR tv203[ebp], xmm0
	call	?ObjectMagnification@RulesClass@@QAEMXZ	; RulesClass::ObjectMagnification
	fstp	DWORD PTR tv173[ebp]
	movss	xmm0, DWORD PTR tv203[ebp]
	ucomiss	xmm0, DWORD PTR tv173[ebp]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@ScaleUp

; 1371 : 		return;

	jmp	$LN3@ScaleUp
$LN2@ScaleUp:

; 1372 : 
; 1373 :    SetScale (Scale() * 1.25F);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Scale@OTWDriverClass@@QAEMXZ		; OTWDriverClass::Scale
	fstp	DWORD PTR tv179[ebp]
	movss	xmm0, DWORD PTR tv179[ebp]
	mulss	xmm0, DWORD PTR __real@3fa00000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetScale@OTWDriverClass@@QAEXM@Z	; OTWDriverClass::SetScale

; 1374 :    if(Scale() > FalconLocalGame->rules.ObjectMagnification())

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN7@ScaleUp
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN8@ScaleUp
$LN7@ScaleUp:
	mov	DWORD PTR tv134[ebp], 0
$LN8@ScaleUp:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Scale@OTWDriverClass@@QAEMXZ		; OTWDriverClass::Scale
	fstp	DWORD PTR tv187[ebp]
	movss	xmm0, DWORD PTR tv187[ebp]
	mov	ecx, DWORD PTR tv134[ebp]
	add	ecx, 356				; 00000164H
	movss	DWORD PTR tv205[ebp], xmm0
	call	?ObjectMagnification@RulesClass@@QAEMXZ	; RulesClass::ObjectMagnification
	fstp	DWORD PTR tv192[ebp]
	movss	xmm0, DWORD PTR tv205[ebp]
	comiss	xmm0, DWORD PTR tv192[ebp]
	jbe	SHORT $LN1@ScaleUp

; 1375 : 		SetScale (FalconLocalGame->rules.ObjectMagnification());

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN9@ScaleUp
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv152[ebp], eax
	jmp	SHORT $LN10@ScaleUp
$LN9@ScaleUp:
	mov	DWORD PTR tv152[ebp], 0
$LN10@ScaleUp:
	mov	ecx, DWORD PTR tv152[ebp]
	add	ecx, 356				; 00000164H
	call	?ObjectMagnification@RulesClass@@QAEMXZ	; RulesClass::ObjectMagnification
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetScale@OTWDriverClass@@QAEXM@Z	; OTWDriverClass::SetScale
$LN1@ScaleUp:

; 1376 :    RescaleAllObjects();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RescaleAllObjects@OTWDriverClass@@QAEXXZ ; OTWDriverClass::RescaleAllObjects
$LN3@ScaleUp:

; 1377 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ScaleUp@OTWDriverClass@@QAEXXZ ENDP			; OTWDriverClass::ScaleUp
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
tv73 = -8						; size = 4
_this$ = -4						; size = 4
?ScaleDown@OTWDriverClass@@QAEXXZ PROC			; OTWDriverClass::ScaleDown
; _this$ = ecx

; 1363 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1364 :    SetScale (Scale() * 0.8F);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Scale@OTWDriverClass@@QAEMXZ		; OTWDriverClass::Scale
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR tv73[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetScale@OTWDriverClass@@QAEXM@Z	; OTWDriverClass::SetScale

; 1365 :    RescaleAllObjects();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RescaleAllObjects@OTWDriverClass@@QAEXXZ ; OTWDriverClass::RescaleAllObjects

; 1366 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ScaleDown@OTWDriverClass@@QAEXXZ ENDP			; OTWDriverClass::ScaleDown
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToggleRoof@OTWDriverClass@@QAEXXZ PROC			; OTWDriverClass::ToggleRoof
; _this$ = ecx

; 1358 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1359 :    renderer->SetRoofMode (1 - renderer->GetRoofMode());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+33576]
	call	?GetRoofMode@RenderOTW@@QAEHXZ		; RenderOTW::GetRoofMode
	mov	ecx, 1
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+33576]
	call	?SetRoofMode@RenderOTW@@QAEXH@Z		; RenderOTW::SetRoofMode

; 1360 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleRoof@OTWDriverClass@@QAEXXZ ENDP			; OTWDriverClass::ToggleRoof
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StartLocationEntry@OTWDriverClass@@QAEXXZ PROC		; OTWDriverClass::StartLocationEntry
; _this$ = ecx

; 1538 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1539 :    getNewCameraPos = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32196], 1

; 1540 :    insertMode = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32024], 1

; 1541 :    memset (chatterStr, 0, 256);

	push	256					; 00000100H
	push	0
	push	OFFSET ?chatterStr@@3PADA		; chatterStr
	call	_memset
	add	esp, 12					; 0000000cH

; 1542 :    chatterCount = 0;

	mov	DWORD PTR ?chatterCount@@3IA, 0		; chatterCount

; 1543 :    CommandsKeyCombo = -1;

	mov	DWORD PTR ?CommandsKeyCombo@@3HA, -1	; CommandsKeyCombo

; 1544 :    CommandsKeyComboMod = -1;

	mov	DWORD PTR ?CommandsKeyComboMod@@3HA, -1	; CommandsKeyComboMod

; 1545 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?StartLocationEntry@OTWDriverClass@@QAEXXZ ENDP		; OTWDriverClass::StartLocationEntry
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?ToggleEngineDisplay@OTWDriverClass@@QAEXXZ PROC	; OTWDriverClass::ToggleEngineDisplay
; _this$ = ecx

; 1347 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1348 : 	showEngine = !showEngine;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32192], 0
	jne	SHORT $LN3@ToggleEngi
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@ToggleEngi
$LN3@ToggleEngi:
	mov	DWORD PTR tv67[ebp], 0
$LN4@ToggleEngi:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR [ecx+32192], edx

; 1349 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleEngineDisplay@OTWDriverClass@@QAEXXZ ENDP	; OTWDriverClass::ToggleEngineDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?ToggleFlapDisplay@OTWDriverClass@@QAEXXZ PROC		; OTWDriverClass::ToggleFlapDisplay
; _this$ = ecx

; 1341 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1342 :    showFlaps = !showFlaps;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32188], 0
	jne	SHORT $LN3@ToggleFlap
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@ToggleFlap
$LN3@ToggleFlap:
	mov	DWORD PTR tv67[ebp], 0
$LN4@ToggleFlap:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR [ecx+32188], edx

; 1343 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleFlapDisplay@OTWDriverClass@@QAEXXZ ENDP		; OTWDriverClass::ToggleFlapDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?ToggleAeroDisplay@OTWDriverClass@@QAEXXZ PROC		; OTWDriverClass::ToggleAeroDisplay
; _this$ = ecx

; 1335 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1336 :    showAero = !showAero;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32184], 0
	jne	SHORT $LN3@ToggleAero
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@ToggleAero
$LN3@ToggleAero:
	mov	DWORD PTR tv67[ebp], 0
$LN4@ToggleAero:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR [ecx+32184], edx

; 1337 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleAeroDisplay@OTWDriverClass@@QAEXXZ ENDP		; OTWDriverClass::ToggleAeroDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?ToggleLocationDisplay@OTWDriverClass@@QAEXXZ PROC	; OTWDriverClass::ToggleLocationDisplay
; _this$ = ecx

; 1330 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1331 :    showPos = !showPos;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32180], 0
	jne	SHORT $LN3@ToggleLoca
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@ToggleLoca
$LN3@ToggleLoca:
	mov	DWORD PTR tv67[ebp], 0
$LN4@ToggleLoca:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR [ecx+32180], edx

; 1332 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleLocationDisplay@OTWDriverClass@@QAEXXZ ENDP	; OTWDriverClass::ToggleLocationDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToggleHaze@OTWDriverClass@@QAEXXZ PROC			; OTWDriverClass::ToggleHaze
; _this$ = ecx

; 1320 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1321 : 	if(PlayerOptions.HazingOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?HazingOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::HazingOn
	test	eax, eax
	je	SHORT $LN2@ToggleHaze

; 1322 : 		PlayerOptions.ClearDispFlag(DISP_HAZING);

	push	2
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?ClearDispFlag@PlayerOptionsClass@@QAEXH@Z ; PlayerOptionsClass::ClearDispFlag

; 1323 : 	else

	jmp	SHORT $LN1@ToggleHaze
$LN2@ToggleHaze:

; 1324 : 		PlayerOptions.SetDispFlag(DISP_HAZING);

	push	2
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?SetDispFlag@PlayerOptionsClass@@QAEXH@Z ; PlayerOptionsClass::SetDispFlag
$LN1@ToggleHaze:

; 1325 : 
; 1326 :    renderer->SetHazeMode( 1 - renderer->GetHazeMode() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+33576]
	call	?GetHazeMode@RenderOTW@@QAEHXZ		; RenderOTW::GetHazeMode
	mov	ecx, 1
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+33576]
	call	?SetHazeMode@RenderOTW@@QAEXH@Z		; RenderOTW::SetHazeMode

; 1327 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleHaze@OTWDriverClass@@QAEXXZ ENDP			; OTWDriverClass::ToggleHaze
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToggleShading@OTWDriverClass@@QAEXXZ PROC		; OTWDriverClass::ToggleShading
; _this$ = ecx

; 1312 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1313 : 	if(DisplayOptions.bSpecularLighting)

	movzx	eax, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+19
	test	eax, eax
	je	SHORT $LN2@ToggleShad

; 1314 : 		DisplayOptions.bSpecularLighting = FALSE;

	mov	BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+19, 0

; 1315 : 	else

	jmp	SHORT $LN3@ToggleShad
$LN2@ToggleShad:

; 1316 : 		DisplayOptions.bSpecularLighting = TRUE;

	mov	BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+19, 1
$LN3@ToggleShad:

; 1317 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleShading@OTWDriverClass@@QAEXXZ ENDP		; OTWDriverClass::ToggleShading
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_trigRoll$ = -44					; size = 8
_trigPitch$ = -36					; size = 8
_trigYaw$ = -28						; size = 8
tv340 = -20						; size = 4
tv332 = -16						; size = 4
tv324 = -12						; size = 4
tv86 = -8						; size = 4
_this$ = -4						; size = 4
?ToggleEyeFly@OTWDriverClass@@QAEXXZ PROC		; OTWDriverClass::ToggleEyeFly
; _this$ = ecx

; 1469 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1470 : 	mlTrig trigYaw, trigPitch, trigRoll;
; 1471 : 
; 1472 : 	if (!eyeFlyEnabled){

	cmp	DWORD PTR ?eyeFlyEnabled@@3HA, 0	; eyeFlyEnabled
	jne	SHORT $LN9@ToggleEyeF

; 1473 :       return;

	jmp	$LN10@ToggleEyeF
$LN9@ToggleEyeF:

; 1474 : 	}
; 1475 : 
; 1476 : 	if (eyeFly)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32200], 0
	je	$LN8@ToggleEyeF

; 1477 : 	{	   
; 1478 : 		if(SimDriver.GetPlayerEntity())

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	$LN7@ToggleEyeF

; 1479 : 		{
; 1480 : 			// Make sure we don't leave it hidden
; 1481 : 			if (otwPlatform && otwPlatform->drawPointer) {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??B?$VuBin@VSimBaseClass@@@@QBE_NXZ	; VuBin<SimBaseClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN6@ToggleEyeF
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	cmp	DWORD PTR [eax+332], 0
	je	SHORT $LN6@ToggleEyeF

; 1482 : 				otwPlatform->drawPointer->SetInhibitFlag( FALSE );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	edx, DWORD PTR [eax+332]
	mov	DWORD PTR tv86[ebp], edx
	push	0
	mov	eax, DWORD PTR tv86[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv86[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN6@ToggleEyeF:

; 1483 : 			}
; 1484 : 
; 1485 : 			FalconLocalSession->RemoveCamera(flyingEye);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32348]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?RemoveCamera@VuSessionEntity@@QAEHPAVVuEntity@@_N@Z ; VuSessionEntity::RemoveCamera

; 1486 : 			otwPlatform = lastotwPlatform;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32340				; 00007e54H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??4?$VuBin@VSimBaseClass@@@@QAEABV0@ABV0@@Z ; VuBin<SimBaseClass>::operator=

; 1487 : 			lastotwPlatform.reset(NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32340				; 00007e54H
	call	?reset@?$VuBin@VSimBaseClass@@@@QAEXPAVSimBaseClass@@@Z ; VuBin<SimBaseClass>::reset

; 1488 : 			FalconLocalSession->AttachCamera(SimDriver.GetPlayerEntity());

	push	0
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?AttachCamera@VuSessionEntity@@QAEHPAVVuEntity@@_N@Z ; VuSessionEntity::AttachCamera

; 1489 : 		}
; 1490 : 		else{

	jmp	SHORT $LN5@ToggleEyeF
$LN7@ToggleEyeF:

; 1491 : 		   eyeFly = 1 - eyeFly;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, 1
	sub	edx, DWORD PTR [ecx+32200]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32200], edx
$LN5@ToggleEyeF:

; 1492 : 		}
; 1493 :    }
; 1494 :    else

	jmp	$LN4@ToggleEyeF
$LN8@ToggleEyeF:

; 1495 :    {
; 1496 : 		// This will crash if it happens after the player has crashed and chosen "Resume"
; 1497 : 		// because at that point, the SimDriver.GetPlayerAircraft() is NULL.  Not sure
; 1498 : 		// what the right answer is, but for now we'll allow the bullet to be dodged (maybe).
; 1499 : 		if (SimDriver.GetPlayerEntity()) {

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	SHORT $LN3@ToggleEyeF

; 1500 : 			FalconLocalSession->RemoveCamera(SimDriver.GetPlayerEntity());

	push	0
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?RemoveCamera@VuSessionEntity@@QAEHPAVVuEntity@@_N@Z ; VuSessionEntity::RemoveCamera
$LN3@ToggleEyeF:

; 1501 : 		}
; 1502 : 		lastotwPlatform = otwPlatform;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32340				; 00007e54H
	call	??4?$VuBin@VSimBaseClass@@@@QAEABV0@ABV0@@Z ; VuBin<SimBaseClass>::operator=

; 1503 : 		otwPlatform.reset(NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	?reset@?$VuBin@VSimBaseClass@@@@QAEXPAVSimBaseClass@@@Z ; VuBin<SimBaseClass>::reset

; 1504 : 		FalconLocalSession->AttachCamera(flyingEye);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32348]
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?AttachCamera@VuSessionEntity@@QAEHPAVVuEntity@@_N@Z ; VuSessionEntity::AttachCamera

; 1505 : 
; 1506 : 		if(lastotwPlatform)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32340				; 00007e54H
	call	??B?$VuBin@VSimBaseClass@@@@QBE_NXZ	; VuBin<SimBaseClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	$LN2@ToggleEyeF

; 1507 : 		{
; 1508 : 			mlSinCos (&trigYaw,   lastotwPlatform->Yaw()*0.5F);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32340				; 00007e54H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv324[ebp]
	movss	xmm0, DWORD PTR tv324[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _trigYaw$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 1509 : 			mlSinCos (&trigPitch, lastotwPlatform->Pitch()*0.5F);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32340				; 00007e54H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	fstp	DWORD PTR tv332[ebp]
	movss	xmm0, DWORD PTR tv332[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trigPitch$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 1510 : 			mlSinCos (&trigRoll,  lastotwPlatform->Roll()*0.5F);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32340				; 00007e54H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv340[ebp]
	movss	xmm0, DWORD PTR tv340[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _trigRoll$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 1511 : 		}
; 1512 : 		else

	jmp	SHORT $LN1@ToggleEyeF
$LN2@ToggleEyeF:

; 1513 : 		{
; 1514 : 			trigYaw.cos = 1.0F;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _trigYaw$[ebp+4], xmm0

; 1515 : 			trigYaw.sin = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _trigYaw$[ebp], xmm0

; 1516 : 			trigPitch.cos = 1.0F;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _trigPitch$[ebp+4], xmm0

; 1517 : 			trigPitch.sin = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _trigPitch$[ebp], xmm0

; 1518 : 			trigRoll.cos = 1.0F;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _trigRoll$[ebp+4], xmm0

; 1519 : 			trigRoll.sin = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _trigRoll$[ebp], xmm0
$LN1@ToggleEyeF:

; 1520 : 		}
; 1521 : 
; 1522 : 		e1 = trigYaw.cos*trigPitch.cos*trigRoll.cos +
; 1523 : 			trigYaw.sin*trigPitch.sin*trigRoll.sin;

	movss	xmm0, DWORD PTR _trigYaw$[ebp+4]
	mulss	xmm0, DWORD PTR _trigPitch$[ebp+4]
	mulss	xmm0, DWORD PTR _trigRoll$[ebp+4]
	movss	xmm1, DWORD PTR _trigYaw$[ebp]
	mulss	xmm1, DWORD PTR _trigPitch$[ebp]
	mulss	xmm1, DWORD PTR _trigRoll$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+33396], xmm0

; 1524 : 
; 1525 : 		e2 = trigYaw.sin*trigPitch.cos*trigRoll.cos -
; 1526 : 			trigYaw.cos*trigPitch.sin*trigRoll.sin;

	movss	xmm0, DWORD PTR _trigYaw$[ebp]
	mulss	xmm0, DWORD PTR _trigPitch$[ebp+4]
	mulss	xmm0, DWORD PTR _trigRoll$[ebp+4]
	movss	xmm1, DWORD PTR _trigYaw$[ebp+4]
	mulss	xmm1, DWORD PTR _trigPitch$[ebp]
	mulss	xmm1, DWORD PTR _trigRoll$[ebp]
	subss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+33400], xmm0

; 1527 : 
; 1528 : 		e3 = trigYaw.cos*trigPitch.sin*trigRoll.cos +
; 1529 : 			trigYaw.sin*trigPitch.cos*trigRoll.sin;

	movss	xmm0, DWORD PTR _trigYaw$[ebp+4]
	mulss	xmm0, DWORD PTR _trigPitch$[ebp]
	mulss	xmm0, DWORD PTR _trigRoll$[ebp+4]
	movss	xmm1, DWORD PTR _trigYaw$[ebp]
	mulss	xmm1, DWORD PTR _trigPitch$[ebp+4]
	mulss	xmm1, DWORD PTR _trigRoll$[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+33404], xmm0

; 1530 : 
; 1531 : 		e4 = trigYaw.cos*trigPitch.cos*trigRoll.sin -
; 1532 : 			trigYaw.sin*trigPitch.sin*trigRoll.cos;

	movss	xmm0, DWORD PTR _trigYaw$[ebp+4]
	mulss	xmm0, DWORD PTR _trigPitch$[ebp+4]
	mulss	xmm0, DWORD PTR _trigRoll$[ebp]
	movss	xmm1, DWORD PTR _trigYaw$[ebp]
	mulss	xmm1, DWORD PTR _trigPitch$[ebp]
	mulss	xmm1, DWORD PTR _trigRoll$[ebp+4]
	subss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+33408], xmm0
$LN4@ToggleEyeF:

; 1533 :    }
; 1534 :    eyeFly = 1 - eyeFly;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, 1
	sub	ecx, DWORD PTR [eax+32200]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32200], ecx
$LN10@ToggleEyeF:

; 1535 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleEyeFly@OTWDriverClass@@QAEXXZ ENDP		; OTWDriverClass::ToggleEyeFly
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToggleBilinearFilter@OTWDriverClass@@QAEXXZ PROC	; OTWDriverClass::ToggleBilinearFilter
; _this$ = ecx

; 1301 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1302 : 
; 1303 : 	if(PlayerOptions.FilteringOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?FilteringOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::FilteringOn
	test	eax, eax
	je	SHORT $LN2@ToggleBili

; 1304 : 		PlayerOptions.ClearDispFlag(DISP_BILINEAR);

	push	16					; 00000010H
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?ClearDispFlag@PlayerOptionsClass@@QAEXH@Z ; PlayerOptionsClass::ClearDispFlag

; 1305 : 	else

	jmp	SHORT $LN1@ToggleBili
$LN2@ToggleBili:

; 1306 : 		PlayerOptions.SetDispFlag(DISP_BILINEAR);

	push	16					; 00000010H
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?SetDispFlag@PlayerOptionsClass@@QAEXH@Z ; PlayerOptionsClass::SetDispFlag
$LN1@ToggleBili:

; 1307 : 
; 1308 :    renderer->SetFilteringMode (1 - renderer->GetFilteringMode());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+33576]
	call	?GetFilteringMode@RenderOTW@@QAEHXZ	; RenderOTW::GetFilteringMode
	mov	ecx, 1
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+33576]
	call	?SetFilteringMode@RenderOTW@@QAEXH@Z	; RenderOTW::SetFilteringMode

; 1309 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleBilinearFilter@OTWDriverClass@@QAEXXZ ENDP	; OTWDriverClass::ToggleBilinearFilter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EndFlight@OTWDriverClass@@QAEXXZ PROC			; OTWDriverClass::EndFlight
; _this$ = ecx

; 1553 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1554 :    SetExitMenu( TRUE );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetExitMenu@OTWDriverClass@@QAEXH@Z	; OTWDriverClass::SetExitMenu

; 1555 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?EndFlight@OTWDriverClass@@QAEXXZ ENDP			; OTWDriverClass::EndFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StepHeadingScale@OTWDriverClass@@QAEXXZ PROC		; OTWDriverClass::StepHeadingScale
; _this$ = ecx

; 1278 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1279 :    if (TheHud->headingPos == HudClass::High)

	mov	eax, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	cmp	DWORD PTR [eax+4964], 0
	jne	SHORT $LN6@StepHeadin

; 1280 :       TheHud->headingPos = HudClass::Low;

	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	mov	DWORD PTR [ecx+4964], 1
	jmp	SHORT $LN7@StepHeadin
$LN6@StepHeadin:

; 1281 :    else if (TheHud->headingPos == HudClass::Low)

	mov	edx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	cmp	DWORD PTR [edx+4964], 1
	jne	SHORT $LN4@StepHeadin

; 1282 :       TheHud->headingPos = HudClass::Off;

	mov	eax, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	mov	DWORD PTR [eax+4964], 2
	jmp	SHORT $LN7@StepHeadin
$LN4@StepHeadin:

; 1283 :    else if (TheHud->headingPos == HudClass::Off)

	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	cmp	DWORD PTR [ecx+4964], 2
	jne	SHORT $LN2@StepHeadin

; 1284 :       TheHud->headingPos = HudClass::High;

	mov	edx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	mov	DWORD PTR [edx+4964], 0

; 1285 :    else

	jmp	SHORT $LN7@StepHeadin
$LN2@StepHeadin:

; 1286 :       TheHud->headingPos = HudClass::Off;

	mov	eax, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	mov	DWORD PTR [eax+4964], 2
$LN7@StepHeadin:

; 1287 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?StepHeadingScale@OTWDriverClass@@QAEXXZ ENDP		; OTWDriverClass::StepHeadingScale
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToggleGLOC@OTWDriverClass@@QAEXXZ PROC			; OTWDriverClass::ToggleGLOC
; _this$ = ecx

; 1291 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1292 :    doGLOC = 1 - doGLOC;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, 1
	sub	ecx, DWORD PTR [eax+32172]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32172], ecx

; 1293 :    if (doGLOC)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32172], 0
	je	SHORT $LN2@ToggleGLOC

; 1294 :       PlayerOptions.ClearSimFlag(SIM_NO_BLACKOUT);

	push	2
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?ClearSimFlag@PlayerOptionsClass@@QAEXH@Z ; PlayerOptionsClass::ClearSimFlag

; 1295 :    else

	jmp	SHORT $LN3@ToggleGLOC
$LN2@ToggleGLOC:

; 1296 :       PlayerOptions.SetSimFlag(SIM_NO_BLACKOUT);

	push	2
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?SetSimFlag@PlayerOptionsClass@@QAEXH@Z	; PlayerOptionsClass::SetSimFlag
$LN3@ToggleGLOC:

; 1297 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleGLOC@OTWDriverClass@@QAEXXZ ENDP			; OTWDriverClass::ToggleGLOC
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TargetStepPrev@OTWDriverClass@@QAEXXZ PROC		; OTWDriverClass::TargetStepPrev
; _this$ = ecx

; 97   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 98   :    tgtStep = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32168], -1

; 99   :    // these keys are now used for stepping targets in the views....
; 100  :    SetOTWDisplayMode( mOTWDisplayMode );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32328]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetOTWDisplayMode@OTWDriverClass@@QAEXW4OTWDisplayMode@1@@Z ; OTWDriverClass::SetOTWDisplayMode

; 101  :    // need to reset after the above call
; 102  :    tgtStep = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32168], -1

; 103  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TargetStepPrev@OTWDriverClass@@QAEXXZ ENDP		; OTWDriverClass::TargetStepPrev
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TargetStepNext@OTWDriverClass@@QAEXXZ PROC		; OTWDriverClass::TargetStepNext
; _this$ = ecx

; 88   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 89   :    tgtStep = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32168], 1

; 90   :    // these keys are now used for stepping targets in the views....
; 91   :    SetOTWDisplayMode( mOTWDisplayMode );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32328]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetOTWDisplayMode@OTWDriverClass@@QAEXW4OTWDisplayMode@1@@Z ; OTWDriverClass::SetOTWDisplayMode

; 92   :    // need to reset after the above call
; 93   :    tgtStep = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32168], 1

; 94   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TargetStepNext@OTWDriverClass@@QAEXXZ ENDP		; OTWDriverClass::TargetStepNext
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ViewStepPrev@OTWDriverClass@@QAEXXZ PROC		; OTWDriverClass::ViewStepPrev
; _this$ = ecx

; 83   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 84   :    viewStep = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32164], -1

; 85   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ViewStepPrev@OTWDriverClass@@QAEXXZ ENDP		; OTWDriverClass::ViewStepPrev
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ViewStepNext@OTWDriverClass@@QAEXXZ PROC		; OTWDriverClass::ViewStepNext
; _this$ = ecx

; 78   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 79   :    viewStep = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32164], 1

; 80   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ViewStepNext@OTWDriverClass@@QAEXXZ ENDP		; OTWDriverClass::ViewStepNext
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CampTagToggle@OTWDriverClass@@QAEXXZ PROC		; OTWDriverClass::CampTagToggle
; _this$ = ecx

; 174  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 175  : 	if(PlayerOptions.NameTagsOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?NameTagsOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::NameTagsOn
	test	eax, eax
	je	SHORT $LN4@CampTagTog

; 176  : 	{
; 177  : 		if (DrawablePoint::drawLabels) {

	cmp	DWORD PTR ?drawLabels@DrawablePoint@@2HA, 0 ; DrawablePoint::drawLabels
	je	SHORT $LN2@CampTagTog

; 178  : 			DrawablePoint::drawLabels = FALSE;

	mov	DWORD PTR ?drawLabels@DrawablePoint@@2HA, 0 ; DrawablePoint::drawLabels

; 179  : 		} else {

	jmp	SHORT $LN4@CampTagTog
$LN2@CampTagTog:

; 180  : 			DrawablePoint::drawLabels = TRUE;

	mov	DWORD PTR ?drawLabels@DrawablePoint@@2HA, 1 ; DrawablePoint::drawLabels
$LN4@CampTagTog:

; 181  : //			DrawableBSP::drawLabels = TRUE;
; 182  : 		}
; 183  : 	}
; 184  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CampTagToggle@OTWDriverClass@@QAEXXZ ENDP		; OTWDriverClass::CampTagToggle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IDTagToggle@OTWDriverClass@@QAEXXZ PROC		; OTWDriverClass::IDTagToggle
; _this$ = ecx

; 161  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 	if(PlayerOptions.NameTagsOn())

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?NameTagsOn@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::NameTagsOn
	test	eax, eax
	je	SHORT $LN4@IDTagToggl

; 163  : 	{
; 164  : 		if (DrawableBSP::drawLabels) {

	cmp	DWORD PTR ?drawLabels@DrawableBSP@@2HA, 0 ; DrawableBSP::drawLabels
	je	SHORT $LN2@IDTagToggl

; 165  : 			DrawableBSP::drawLabels = FALSE;

	mov	DWORD PTR ?drawLabels@DrawableBSP@@2HA, 0 ; DrawableBSP::drawLabels

; 166  : //			DrawablePoint::drawLabels = FALSE;
; 167  : 		} else {

	jmp	SHORT $LN4@IDTagToggl
$LN2@IDTagToggl:

; 168  : 			DrawableBSP::drawLabels = TRUE;

	mov	DWORD PTR ?drawLabels@DrawableBSP@@2HA, 1 ; DrawableBSP::drawLabels
$LN4@IDTagToggl:

; 169  : 		}
; 170  : 	}
; 171  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IDTagToggle@OTWDriverClass@@QAEXXZ ENDP		; OTWDriverClass::IDTagToggle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?NVGToggle@OTWDriverClass@@QAEXXZ PROC			; OTWDriverClass::NVGToggle
; _this$ = ecx

; 106  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 107  : //	RenderOTW	*newRenderer;
; 108  : 	ShiAssert(renderer);
; 109  : 
; 110  : 	TheTimeOfDay.SetNVGmode( !TheTimeOfDay.GetNVGmode() );

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetNVGmode@CTimeOfDay@@QAEHXZ		; CTimeOfDay::GetNVGmode
	test	eax, eax
	jne	SHORT $LN5@NVGToggle
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN6@NVGToggle
$LN5@NVGToggle:
	mov	DWORD PTR tv68[ebp], 0
$LN6@NVGToggle:
	mov	eax, DWORD PTR tv68[ebp]
	push	eax
	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?SetNVGmode@CTimeOfDay@@QAEXH@Z		; CTimeOfDay::SetNVGmode

; 111  : 
; 112  : 	// Construct a new renderer of the appropriate type
; 113  : 
; 114  : 	//JAM 12Oct03, sfr fixed stuff
; 115  : 	if( TheTimeOfDay.GetNVGmode() )

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetNVGmode@CTimeOfDay@@QAEHXZ		; CTimeOfDay::GetNVGmode
	test	eax, eax
	je	SHORT $LN2@NVGToggle

; 116  : 	{
; 117  : //		newRenderer = new RenderNVG;
; 118  : 		renderer->context.SetNVGmode(TRUE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+33576]
	add	ecx, 100				; 00000064H
	call	?SetNVGmode@ContextMPR@@QAEXH@Z		; ContextMPR::SetNVGmode

; 119  : 		//TheDXEngine.SetState(DX_NVG);
; 120  : 		renderer->SetGreenMode(true); //sfr

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+33576]
	call	?SetGreenMode@RenderOTW@@QAEX_N@Z	; RenderOTW::SetGreenMode

; 121  : 		bNVGmode = true;

	mov	BYTE PTR ?bNVGmode@@3_NA, 1		; bNVGmode

; 122  : 	}
; 123  : 	else

	jmp	SHORT $LN1@NVGToggle
$LN2@NVGToggle:

; 124  : 	{
; 125  : //		newRenderer = new RenderOTW;
; 126  : 		renderer->context.SetNVGmode(FALSE);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+33576]
	add	ecx, 100				; 00000064H
	call	?SetNVGmode@ContextMPR@@QAEXH@Z		; ContextMPR::SetNVGmode

; 127  : 		//TheDXEngine.SetState(DX_OTW);
; 128  : 		renderer->SetGreenMode(false); //sfr

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+33576]
	call	?SetGreenMode@RenderOTW@@QAEX_N@Z	; RenderOTW::SetGreenMode

; 129  : 		bNVGmode = false;

	mov	BYTE PTR ?bNVGmode@@3_NA, 0		; bNVGmode
$LN1@NVGToggle:

; 130  : 	}
; 131  : 	//JAM 12Oct03
; 132  : 
; 133  : 	//renderer->context.FinishFrame(NULL);
; 134  : 
; 135  : /*	ShiAssert( newRenderer );
; 136  : 
; 137  : 	// Setup the new renderer
; 138  : 	newRenderer->Setup( OTWImage, viewPoint );
; 139  : 
; 140  : 	// Copy the previous renderer's settings
; 141  : 	newRenderer->SetFOV( renderer->GetFOV() );
; 142  : //	newRenderer->SetTerrainTextureLevel( renderer->GetTerrainTextureLevel() );
; 143  : 	newRenderer->SetHazeMode( renderer->GetHazeMode() );
; 144  : //	newRenderer->SetAlphaMode( TRUE /*renderer->GetAlphaMode()*//* );
; 145  : //	newRenderer->SetRoofMode( renderer->GetRoofMode() );
; 146  : //	newRenderer->SetSmoothShadingMode( TRUE /*renderer->GetSmoothShadingMode()*//* );
; 147  : //	newRenderer->SetDitheringMode( renderer->GetDitheringMode() );
; 148  : //	newRenderer->SetFilteringMode( renderer->GetFilteringMode() );
; 149  : 	// Now swap in the new renderer
; 150  : /*	renderer->Cleanup();
; 151  : 	delete renderer;
; 152  : 	renderer = newRenderer;
; 153  : 	renderer->context.StartFrame();
; 154  : 	renderer->StartDraw();*/
; 155  : 	//sfr: update 2D cockpit
; 156  : 	pCockpitManager->UpdatePalette();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+33684]
	call	?UpdatePalette@CockpitManager@@QAEXXZ	; CockpitManager::UpdatePalette

; 157  : 	DrawableClass::SetGreenMode(renderer->GetGreenMode());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+33576]
	call	?GetGreenMode@RenderOTW@@QAE_NXZ	; RenderOTW::GetGreenMode
	movzx	ecx, al
	push	ecx
	call	?SetGreenMode@DrawableClass@@SAXH@Z	; DrawableClass::SetGreenMode
	add	esp, 4

; 158  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?NVGToggle@OTWDriverClass@@QAEXXZ ENDP			; OTWDriverClass::NVGToggle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Pan$ = 8						; size = 4
_Tilt$ = 12						; size = 4
?ViewRelativePanTilt@OTWDriverClass@@QAEHMM@Z PROC	; OTWDriverClass::ViewRelativePanTilt
; _this$ = ecx

; 1858 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1859 : 	if(SimDriver.GetPlayerAircraft() && SimDriver.GetPlayerAircraft()->IsSetFlag(MOTION_OWNSHIP) && mOTWDisplayMode == Mode3DCockpit) 

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ViewRelati
	push	65536					; 00010000H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN2@ViewRelati
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32328], 3
	jne	SHORT $LN2@ViewRelati

; 1860 : 	{
; 1861 : 		eyePan += Pan*DTR;

	movss	xmm0, DWORD PTR _Pan$[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+32272]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+32272], xmm0

; 1862 : 		eyeTilt += Tilt*DTR;

	movss	xmm0, DWORD PTR _Tilt$[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+32276]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+32276], xmm0

; 1863 : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN1@ViewRelati

; 1864 : 	}
; 1865 : 	else 

	jmp	SHORT $LN1@ViewRelati
$LN2@ViewRelati:

; 1866 : 		return 0;

	xor	eax, eax
$LN1@ViewRelati:

; 1867 : 	
; 1868 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ViewRelativePanTilt@OTWDriverClass@@QAEHMM@Z ENDP	; OTWDriverClass::ViewRelativePanTilt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?ViewZoomOut@OTWDriverClass@@QAEXXZ PROC		; OTWDriverClass::ViewZoomOut
; _this$ = ecx

; 1712 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1713 : #ifdef DAVE_DBG
; 1714 : 		if(MoveBoom)
; 1715 : 			boomExtTest -= 1.0F;
; 1716 : 		else
; 1717 : 			chaseRange = max (-900.0F, chaseRange - 50.0F);
; 1718 : #else
; 1719 : 		chaseRange = max (-900.0F, chaseRange - 50.0F);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+32292]
	subss	xmm0, DWORD PTR __real@42480000
	movss	xmm1, DWORD PTR __real@c4610000
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@ViewZoomOu
	movss	xmm0, DWORD PTR __real@c4610000
	movss	DWORD PTR tv72[ebp], xmm0
	jmp	SHORT $LN4@ViewZoomOu
$LN3@ViewZoomOu:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+32292]
	subss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR tv72[ebp], xmm0
$LN4@ViewZoomOu:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv72[ebp]
	movss	DWORD PTR [edx+32292], xmm0

; 1720 : #endif
; 1721 : 
; 1722 :    // just testing distance effects....
; 1723 :    /*
; 1724 :    Tpoint sfxpos,vec;
; 1725 :    float dist;
; 1726 :    if ( otwPlatform )
; 1727 :    {
; 1728 :    		vec.x = otwPlatform->dmx[0][0];
; 1729 :    		vec.y = otwPlatform->dmx[0][1];
; 1730 : 		dist = sqrt( vec.x * vec.x + vec.y * vec.y );
; 1731 : 		vec.x /= dist;
; 1732 : 		vec.y /= dist;
; 1733 : 		sfxpos.x = otwPlatform->XPos() + vec.x * sfxDist;
; 1734 : 		sfxpos.y = otwPlatform->YPos() + vec.y * sfxDist;
; 1735 : 		sfxpos.z = otwPlatform->ZPos();
; 1736 : 		if ( (sfxCtr)  == 0 )
; 1737 : 		{
; 1738 :    			vec.x = otwPlatform->dmx[2][0];
; 1739 :    			vec.y = otwPlatform->dmx[2][1];
; 1740 :    			vec.z = -fabs(otwPlatform->dmx[2][2]);
; 1741 : 			AddSfxRequest( new SfxClass( SFX_DIST_SAMLAUNCHES,
; 1742 : 							 &sfxpos,
; 1743 : 							 &vec,
; 1744 : 							 20,
; 1745 : 							 1.0f ) );
; 1746 : 		}
; 1747 : 		else if ( (sfxCtr ) == 1 )
; 1748 : 		{
; 1749 : 			AddSfxRequest( new SfxClass( SFX_DIST_GROUNDBURSTS,
; 1750 : 							 &sfxpos,
; 1751 : 							 20,
; 1752 : 							 1.0f ) );
; 1753 : 		}
; 1754 : 		else if ( (sfxCtr ) == 2 )
; 1755 : 		{
; 1756 :    			vec.x = otwPlatform->dmx[2][0];
; 1757 :    			vec.y = otwPlatform->dmx[2][1];
; 1758 :    			vec.z = -fabs(otwPlatform->dmx[2][2]);
; 1759 : 			AddSfxRequest( new SfxClass(SFX_DIST_ARMOR,
; 1760 : 							 &sfxpos,
; 1761 : 							 &vec,
; 1762 : 							 20,
; 1763 : 							 1.0f ) );
; 1764 : 		}
; 1765 : 		else if ( (sfxCtr) == 3 )
; 1766 : 		{
; 1767 :    			vec.x = otwPlatform->dmx[2][0];
; 1768 :    			vec.y = otwPlatform->dmx[2][1];
; 1769 :    			vec.z = -fabs(otwPlatform->dmx[2][2]);
; 1770 : 			AddSfxRequest( new SfxClass(SFX_DIST_INFANTRY,
; 1771 : 							 &sfxpos,
; 1772 : 							 &vec,
; 1773 : 							 20,
; 1774 : 							 1.0f ) );
; 1775 : 		}
; 1776 : 		else if ( (sfxCtr) == 4 )
; 1777 : 		{
; 1778 :    			vec.x = otwPlatform->dmx[1][0];
; 1779 :    			vec.y = otwPlatform->dmx[1][1];
; 1780 :    			vec.z = otwPlatform->dmx[1][2];
; 1781 : 			AddSfxRequest( new SfxClass(SFX_DIST_AALAUNCHES,
; 1782 : 							 &sfxpos,
; 1783 : 							 &vec,
; 1784 : 							 20,
; 1785 : 							 1.0f ) );
; 1786 : 		}
; 1787 : 		else if ( (sfxCtr) == 5 )
; 1788 : 		{
; 1789 : 			AddSfxRequest( new SfxClass(SFX_DIST_AIRBURSTS,
; 1790 : 							 &sfxpos,
; 1791 : 							 20,
; 1792 : 							 1.0f ) );
; 1793 : 		}
; 1794 : 
; 1795 : 		sfxCtr++;
; 1796 : 		if ( sfxCtr > 5 ) sfxCtr = 0;
; 1797 :    }
; 1798 :    */
; 1799 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ViewZoomOut@OTWDriverClass@@QAEXXZ ENDP		; OTWDriverClass::ViewZoomOut
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?ViewZoomIn@OTWDriverClass@@QAEXXZ PROC			; OTWDriverClass::ViewZoomIn
; _this$ = ecx

; 1692 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1693 : #ifdef DAVE_DBG
; 1694 : 		if(MoveBoom)
; 1695 : 			boomExtTest += 1.0F;
; 1696 : 		else
; 1697 : 			chaseRange = min (-50.0F, chaseRange + 50.0F);
; 1698 : #else
; 1699 : 		chaseRange = min (-50.0F, chaseRange + 50.0F);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+32292]
	addss	xmm0, DWORD PTR __real@42480000
	comiss	xmm0, DWORD PTR __real@c2480000
	jbe	SHORT $LN3@ViewZoomIn
	movss	xmm0, DWORD PTR __real@c2480000
	movss	DWORD PTR tv72[ebp], xmm0
	jmp	SHORT $LN4@ViewZoomIn
$LN3@ViewZoomIn:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+32292]
	addss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR tv72[ebp], xmm0
$LN4@ViewZoomIn:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv72[ebp]
	movss	DWORD PTR [edx+32292], xmm0

; 1700 : #endif
; 1701 :    
; 1702 :    // just testing distance effects....
; 1703 :       
; 1704 :    /*
; 1705 :    sfxDist += 10000.0f;
; 1706 :    if (sfxDist > 250000.0f )
; 1707 :    		sfxDist = 30000.0f;
; 1708 :    */
; 1709 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ViewZoomIn@OTWDriverClass@@QAEXXZ ENDP			; OTWDriverClass::ViewZoomIn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ViewReset@OTWDriverClass@@QAEXXZ PROC			; OTWDriverClass::ViewReset
; _this$ = ecx

; 1660 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1661 : 	if (!otwPlatform)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??7?$VuBin@VSimBaseClass@@@@QBE_NXZ	; VuBin<SimBaseClass>::operator!
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@ViewReset

; 1662 : 		return;

	jmp	$LN5@ViewReset
$LN4@ViewReset:

; 1663 : 
; 1664 : 	azDir			= 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+32296], xmm0

; 1665 : 	elDir			= 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+32300], xmm0

; 1666 : 
; 1667 : 	if (PlayerOptions.GetMouseLook())	// Retro 18Jan2004

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetMouseLook@PlayerOptionsClass@@QBE_NXZ ; PlayerOptionsClass::GetMouseLook
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@ViewReset

; 1668 : 	{
; 1669 : 		theMouseView.BumpViewUp(0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?theMouseView@@3VMouseView@@A ; theMouseView
	call	?BumpViewUp@MouseView@@QAEXM@Z		; MouseView::BumpViewUp

; 1670 : 		theMouseView.BumpViewLeft(0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?theMouseView@@3VMouseView@@A ; theMouseView
	call	?BumpViewLeft@MouseView@@QAEXM@Z	; MouseView::BumpViewLeft
$LN3@ViewReset:

; 1671 : 	}
; 1672 : 
; 1673 : 	chaseAz		= 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+32284], xmm0

; 1674 : 	chaseEl		= 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+32288], xmm0

; 1675 : 	chaseRange	= -75.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c2960000
	movss	DWORD PTR [eax+32292], xmm0

; 1676 : 
; 1677 : 	eyeHeadRoll = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+32280], xmm0

; 1678 : 
; 1679 : 	if (GetOTWDisplayMode() == Mode3DCockpit ||
; 1680 : 		GetOTWDisplayMode() == ModeHud ||
; 1681 : 		GetOTWDisplayMode() == ModePadlockF3)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOTWDisplayMode@OTWDriverClass@@QAE?AW4OTWDisplayMode@1@XZ ; OTWDriverClass::GetOTWDisplayMode
	cmp	eax, 3
	je	SHORT $LN1@ViewReset
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOTWDisplayMode@OTWDriverClass@@QAE?AW4OTWDisplayMode@1@XZ ; OTWDriverClass::GetOTWDisplayMode
	cmp	eax, 1
	je	SHORT $LN1@ViewReset
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOTWDisplayMode@OTWDriverClass@@QAE?AW4OTWDisplayMode@1@XZ ; OTWDriverClass::GetOTWDisplayMode
	cmp	eax, 4
	jne	SHORT $LN2@ViewReset
$LN1@ViewReset:

; 1682 : 	{
; 1683 : 		eyePan	= 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+32272], xmm0

; 1684 : 		eyeTilt	= 0.35F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3eb33333
	movss	DWORD PTR [eax+32276], xmm0
$LN2@ViewReset:
$LN5@ViewReset:

; 1685 : 	}
; 1686 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ViewReset@OTWDriverClass@@QAEXXZ ENDP			; OTWDriverClass::ViewReset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ViewSpinHold@OTWDriverClass@@QAEXXZ PROC		; OTWDriverClass::ViewSpinHold
; _this$ = ecx

; 1649 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1650 : 	if(!(SimDriver.GetPlayerAircraft() && SimDriver.GetPlayerAircraft()->IsSetFlag(MOTION_OWNSHIP) && mOTWDisplayMode == Mode2DCockpit)) {

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ViewSpinHo
	push	65536					; 00010000H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN2@ViewSpinHo
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32328], 2
	je	SHORT $LN1@ViewSpinHo
$LN2@ViewSpinHo:

; 1651 : 		{
; 1652 : 			azDir = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+32296], xmm0

; 1653 : 			if (PlayerOptions.GetMouseLook())	// Retro 18Jan2004

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetMouseLook@PlayerOptionsClass@@QBE_NXZ ; PlayerOptionsClass::GetMouseLook
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@ViewSpinHo

; 1654 : 				theMouseView.BumpViewLeft(0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?theMouseView@@3VMouseView@@A ; theMouseView
	call	?BumpViewLeft@MouseView@@QAEXM@Z	; MouseView::BumpViewLeft
$LN1@ViewSpinHo:

; 1655 : 		}
; 1656 : 	}
; 1657 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ViewSpinHold@OTWDriverClass@@QAEXXZ ENDP		; OTWDriverClass::ViewSpinHold
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ViewSpinRight@OTWDriverClass@@QAEXXZ PROC		; OTWDriverClass::ViewSpinRight
; _this$ = ecx

; 1630 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1631 : 	if(SimDriver.GetPlayerAircraft() && SimDriver.GetPlayerAircraft()->IsSetFlag(MOTION_OWNSHIP) && mOTWDisplayMode == Mode2DCockpit) {

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN3@ViewSpinRi
	push	65536					; 00010000H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN3@ViewSpinRi
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32328], 2
	jne	SHORT $LN3@ViewSpinRi

; 1632 : 		SimDriver.POVKludgeFunction(POV_E);

	push	9000					; 00002328H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?POVKludgeFunction@SimulationDriver@@QAEXK@Z ; SimulationDriver::POVKludgeFunction

; 1633 : 	}
; 1634 : 	else {

	jmp	SHORT $LN1@ViewSpinRi
$LN3@ViewSpinRi:

; 1635 : #ifdef DAVE_DBG
; 1636 : 		if(MoveBoom)
; 1637 : 			boomAzTest -= 3.0F * DTR;
; 1638 : 		else
; 1639 : 			azDir = -1.0F;
; 1640 : #else
; 1641 : 		azDir = -1.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [ecx+32296], xmm0

; 1642 : 		if (PlayerOptions.GetMouseLook())	// Retro 18Jan2004

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetMouseLook@PlayerOptionsClass@@QBE_NXZ ; PlayerOptionsClass::GetMouseLook
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@ViewSpinRi

; 1643 : 			theMouseView.BumpViewLeft(-1);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?theMouseView@@3VMouseView@@A ; theMouseView
	call	?BumpViewLeft@MouseView@@QAEXM@Z	; MouseView::BumpViewLeft
$LN1@ViewSpinRi:

; 1644 : #endif
; 1645 : 	}
; 1646 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ViewSpinRight@OTWDriverClass@@QAEXXZ ENDP		; OTWDriverClass::ViewSpinRight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ViewSpinLeft@OTWDriverClass@@QAEXXZ PROC		; OTWDriverClass::ViewSpinLeft
; _this$ = ecx

; 1611 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1612 : 	if(SimDriver.GetPlayerAircraft() && SimDriver.GetPlayerAircraft()->IsSetFlag(MOTION_OWNSHIP) && mOTWDisplayMode == Mode2DCockpit) {

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN3@ViewSpinLe
	push	65536					; 00010000H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN3@ViewSpinLe
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32328], 2
	jne	SHORT $LN3@ViewSpinLe

; 1613 : 		SimDriver.POVKludgeFunction(POV_W);

	push	27000					; 00006978H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?POVKludgeFunction@SimulationDriver@@QAEXK@Z ; SimulationDriver::POVKludgeFunction

; 1614 : 	}
; 1615 : 	else {

	jmp	SHORT $LN1@ViewSpinLe
$LN3@ViewSpinLe:

; 1616 : #ifdef DAVE_DBG
; 1617 : 		if(MoveBoom)
; 1618 : 			boomAzTest += 3.0F * DTR;
; 1619 : 		else
; 1620 : 			azDir = 1.0F;
; 1621 : #else
; 1622 : 		azDir = 1.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+32296], xmm0

; 1623 : 		if (PlayerOptions.GetMouseLook())	// Retro 18Jan2004

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetMouseLook@PlayerOptionsClass@@QBE_NXZ ; PlayerOptionsClass::GetMouseLook
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@ViewSpinLe

; 1624 : 			theMouseView.BumpViewLeft(1);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?theMouseView@@3VMouseView@@A ; theMouseView
	call	?BumpViewLeft@MouseView@@QAEXM@Z	; MouseView::BumpViewLeft
$LN1@ViewSpinLe:

; 1625 : #endif
; 1626 : 	}
; 1627 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ViewSpinLeft@OTWDriverClass@@QAEXXZ ENDP		; OTWDriverClass::ViewSpinLeft
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ViewTiltHold@OTWDriverClass@@QAEXXZ PROC		; OTWDriverClass::ViewTiltHold
; _this$ = ecx

; 1600 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1601 : 	if(!(SimDriver.GetPlayerAircraft() && SimDriver.GetPlayerAircraft()->IsSetFlag(MOTION_OWNSHIP) && mOTWDisplayMode == Mode2DCockpit)) {

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN2@ViewTiltHo
	push	65536					; 00010000H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN2@ViewTiltHo
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32328], 2
	je	SHORT $LN1@ViewTiltHo
$LN2@ViewTiltHo:

; 1602 : 		{
; 1603 : 			elDir = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+32300], xmm0

; 1604 : 			if (PlayerOptions.GetMouseLook())	// Retro 18Jan2004

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetMouseLook@PlayerOptionsClass@@QBE_NXZ ; PlayerOptionsClass::GetMouseLook
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@ViewTiltHo

; 1605 : 				theMouseView.BumpViewUp(0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?theMouseView@@3VMouseView@@A ; theMouseView
	call	?BumpViewUp@MouseView@@QAEXM@Z		; MouseView::BumpViewUp
$LN1@ViewTiltHo:

; 1606 : 		}
; 1607 : 	}
; 1608 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ViewTiltHold@OTWDriverClass@@QAEXXZ ENDP		; OTWDriverClass::ViewTiltHold
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ViewTiltDown@OTWDriverClass@@QAEXXZ PROC		; OTWDriverClass::ViewTiltDown
; _this$ = ecx

; 1581 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1582 :    if(SimDriver.GetPlayerAircraft() && SimDriver.GetPlayerAircraft()->IsSetFlag(MOTION_OWNSHIP) && mOTWDisplayMode == Mode2DCockpit) {	

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN3@ViewTiltDo
	push	65536					; 00010000H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN3@ViewTiltDo
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32328], 2
	jne	SHORT $LN3@ViewTiltDo

; 1583 : 		SimDriver.POVKludgeFunction(POV_S);

	push	18000					; 00004650H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?POVKludgeFunction@SimulationDriver@@QAEXK@Z ; SimulationDriver::POVKludgeFunction

; 1584 : 	}
; 1585 : 	else {

	jmp	SHORT $LN1@ViewTiltDo
$LN3@ViewTiltDo:

; 1586 : #ifdef DAVE_DBG
; 1587 : 		if(MoveBoom)
; 1588 : 			boomElTest += 3.0F * DTR;
; 1589 : 		else
; 1590 : 			elDir = 1.0F;
; 1591 : #else
; 1592 : 		elDir = 1.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+32300], xmm0

; 1593 : 		if (PlayerOptions.GetMouseLook())	// Retro 18Jan2004

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetMouseLook@PlayerOptionsClass@@QBE_NXZ ; PlayerOptionsClass::GetMouseLook
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@ViewTiltDo

; 1594 : 			theMouseView.BumpViewUp(1.);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?theMouseView@@3VMouseView@@A ; theMouseView
	call	?BumpViewUp@MouseView@@QAEXM@Z		; MouseView::BumpViewUp
$LN1@ViewTiltDo:

; 1595 : #endif
; 1596 : 	}
; 1597 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ViewTiltDown@OTWDriverClass@@QAEXXZ ENDP		; OTWDriverClass::ViewTiltDown
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ViewTiltUp@OTWDriverClass@@QAEXXZ PROC			; OTWDriverClass::ViewTiltUp
; _this$ = ecx

; 1560 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1561 : 	if(SimDriver.GetPlayerAircraft() && SimDriver.GetPlayerAircraft()->IsSetFlag(MOTION_OWNSHIP) && mOTWDisplayMode == Mode2DCockpit) {

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN3@ViewTiltUp
	push	65536					; 00010000H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN3@ViewTiltUp
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32328], 2
	jne	SHORT $LN3@ViewTiltUp

; 1562 : 		SimDriver.POVKludgeFunction(POV_N);

	push	0
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?POVKludgeFunction@SimulationDriver@@QAEXK@Z ; SimulationDriver::POVKludgeFunction

; 1563 : 	}
; 1564 : 	else {

	jmp	SHORT $LN1@ViewTiltUp
$LN3@ViewTiltUp:

; 1565 : #ifdef DAVE_DBG
; 1566 : 		if(MoveBoom)
; 1567 : 			boomElTest -= 3.0F * DTR;
; 1568 : 		else
; 1569 : 			elDir = -1.0F;
; 1570 : #else
; 1571 : 		
; 1572 : 		elDir = -1.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [ecx+32300], xmm0

; 1573 : 		if (PlayerOptions.GetMouseLook())	// Retro 18Jan2004

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetMouseLook@PlayerOptionsClass@@QBE_NXZ ; PlayerOptionsClass::GetMouseLook
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@ViewTiltUp

; 1574 : 			theMouseView.BumpViewUp(-1.);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?theMouseView@@3VMouseView@@A ; theMouseView
	call	?BumpViewUp@MouseView@@QAEXM@Z		; MouseView::BumpViewUp
$LN1@ViewTiltUp:

; 1575 : #endif
; 1576 :       
; 1577 : 	}
; 1578 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ViewTiltUp@OTWDriverClass@@QAEXXZ ENDP			; OTWDriverClass::ViewTiltUp
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\otwdrive.h
;	COMDAT ?Scale@OTWDriverClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Scale@OTWDriverClass@@QAEMXZ PROC			; OTWDriverClass::Scale, COMDAT
; _this$ = ecx

; 342  :       float Scale (void) { return objectScale;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+32124]
	mov	esp, ebp
	pop	ebp
	ret	0
?Scale@OTWDriverClass@@QAEMXZ ENDP			; OTWDriverClass::Scale
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_featureWalker$ = -44					; size = 12
_this$ = -32						; size = 4
_oldlevel$ = -28					; size = 4
_parentDrawable$ = -24					; size = 4
_parentObject$ = -20					; size = 4
_theObject$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_newlevel$ = 8						; size = 4
?SetDetail@OTWDriverClass@@QAEXH@Z PROC			; OTWDriverClass::SetDetail
; _this$ = ecx

; 1380 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetDetail@OTWDriverClass@@QAEXH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1381 :    SimFeatureClass* theObject,*parentObject;
; 1382 :    DrawableObject *parentDrawable;
; 1383 : 
; 1384 :    int oldlevel = PlayerOptions.BuildingDeaggLevel();

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?BuildingDeaggLevel@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::BuildingDeaggLevel
	mov	DWORD PTR _oldlevel$[ebp], eax

; 1385 : 
; 1386 :    if (oldlevel == newlevel)

	mov	eax, DWORD PTR _oldlevel$[ebp]
	cmp	eax, DWORD PTR _newlevel$[ebp]
	jne	SHORT $LN9@SetDetail

; 1387 : 	   return;

	jmp	$LN10@SetDetail
$LN9@SetDetail:

; 1388 : 
; 1389 :    VuListIterator featureWalker (SimDriver.featureList);

	mov	ecx, DWORD PTR ?SimDriver@@3VSimulationDriver@@A+4
	push	ecx
	lea	ecx, DWORD PTR _featureWalker$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1390 :    theObject = (SimFeatureClass*)featureWalker.GetFirst();

	lea	ecx, DWORD PTR _featureWalker$[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _theObject$[ebp], eax
$LN8@SetDetail:

; 1391 :    while (theObject)

	cmp	DWORD PTR _theObject$[ebp], 0
	je	$LN7@SetDetail

; 1392 :    {
; 1393 :       // Find any existing parent object
; 1394 :       parentObject = (SimFeatureClass*) theObject->GetCampaignObject()->GetComponentLead();

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentLead@CampBaseClass@@QAEPAVSimBaseClass@@XZ ; CampBaseClass::GetComponentLead
	mov	DWORD PTR _parentObject$[ebp], eax

; 1395 : 
; 1396 :       // Find any existing parent drawable
; 1397 : 	  parentDrawable = NULL;

	mov	DWORD PTR _parentDrawable$[ebp], 0

; 1398 :       if (parentObject && parentObject->IsSetCampaignFlag(FEAT_ELEV_CONTAINER))

	cmp	DWORD PTR _parentObject$[ebp], 0
	je	SHORT $LN6@SetDetail
	push	512					; 00000200H
	mov	ecx, DWORD PTR _parentObject$[ebp]
	call	?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z ; SimBaseClass::IsSetCampaignFlag
	test	eax, eax
	je	SHORT $LN6@SetDetail

; 1399 :          parentDrawable = parentObject->baseObject;

	mov	edx, DWORD PTR _parentObject$[ebp]
	mov	eax, DWORD PTR [edx+596]
	mov	DWORD PTR _parentDrawable$[ebp], eax
	jmp	SHORT $LN5@SetDetail
$LN6@SetDetail:

; 1400 :       else if (parentObject && parentObject->IsSetCampaignFlag(FEAT_FLAT_CONTAINER))

	cmp	DWORD PTR _parentObject$[ebp], 0
	je	SHORT $LN5@SetDetail
	push	256					; 00000100H
	mov	ecx, DWORD PTR _parentObject$[ebp]
	call	?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z ; SimBaseClass::IsSetCampaignFlag
	test	eax, eax
	je	SHORT $LN5@SetDetail

; 1401 :          parentDrawable = parentObject->drawPointer;

	mov	ecx, DWORD PTR _parentObject$[ebp]
	mov	edx, DWORD PTR [ecx+332]
	mov	DWORD PTR _parentDrawable$[ebp], edx
$LN5@SetDetail:

; 1402 : 
; 1403 : 	  // KCK: For now, if we've got a parent drawable object, don't fuck with it.
; 1404 : 	  if (!parentDrawable)

	cmp	DWORD PTR _parentDrawable$[ebp], 0
	jne	$LN3@SetDetail

; 1405 :       {
; 1406 :          if (theObject->drawPointer && theObject->displayPriority <= oldlevel && theObject->displayPriority > newlevel) 

	mov	eax, DWORD PTR _theObject$[ebp]
	cmp	DWORD PTR [eax+332], 0
	je	SHORT $LN2@SetDetail
	mov	ecx, DWORD PTR _theObject$[ebp]
	movsx	edx, BYTE PTR [ecx+336]
	cmp	edx, DWORD PTR _oldlevel$[ebp]
	jg	SHORT $LN2@SetDetail
	mov	eax, DWORD PTR _theObject$[ebp]
	movsx	ecx, BYTE PTR [eax+336]
	cmp	ecx, DWORD PTR _newlevel$[ebp]
	jle	SHORT $LN2@SetDetail

; 1407 :          {
; 1408 :             // We don't want to display this anymore
; 1409 : 	        OTWDriver.RemoveObject(theObject->drawPointer);

	push	0
	mov	edx, DWORD PTR _theObject$[ebp]
	mov	eax, DWORD PTR [edx+332]
	push	eax
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?RemoveObject@OTWDriverClass@@QAEXPAVDrawableObject@@H@Z ; OTWDriverClass::RemoveObject

; 1410 : 			SimDriver.featureList->Remove(theObject);

	mov	ecx, DWORD PTR _theObject$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?SimDriver@@3VSimulationDriver@@A+4
	call	?Remove@VuCollection@@QAEHPAVVuEntity@@@Z ; VuCollection::Remove
$LN2@SetDetail:

; 1411 :          }
; 1412 :          if (theObject->drawPointer && theObject->displayPriority > oldlevel && theObject->displayPriority <= newlevel) 

	mov	edx, DWORD PTR _theObject$[ebp]
	cmp	DWORD PTR [edx+332], 0
	je	SHORT $LN3@SetDetail
	mov	eax, DWORD PTR _theObject$[ebp]
	movsx	ecx, BYTE PTR [eax+336]
	cmp	ecx, DWORD PTR _oldlevel$[ebp]
	jle	SHORT $LN3@SetDetail
	mov	edx, DWORD PTR _theObject$[ebp]
	movsx	eax, BYTE PTR [edx+336]
	cmp	eax, DWORD PTR _newlevel$[ebp]
	jg	SHORT $LN3@SetDetail

; 1413 :          {
; 1414 :             // We want to display this now
; 1415 :             OTWDriver.InsertObject(theObject->drawPointer);

	mov	ecx, DWORD PTR _theObject$[ebp]
	mov	edx, DWORD PTR [ecx+332]
	push	edx
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?InsertObject@OTWDriverClass@@QAEXPAVDrawableObject@@@Z ; OTWDriverClass::InsertObject

; 1416 : 			SimDriver.AddToFeatureList(theObject);

	mov	eax, DWORD PTR _theObject$[ebp]
	push	eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?AddToFeatureList@SimulationDriver@@QAEXPAVVuEntity@@@Z ; SimulationDriver::AddToFeatureList
$LN3@SetDetail:

; 1417 :          }
; 1418 :       }
; 1419 :       theObject = (SimFeatureClass*)featureWalker.GetNext();

	lea	ecx, DWORD PTR _featureWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _theObject$[ebp], eax

; 1420 :    }

	jmp	$LN8@SetDetail
$LN7@SetDetail:

; 1421 :    PlayerOptions.BldDeaggLevel = newlevel;

	mov	ecx, DWORD PTR _newlevel$[ebp]
	mov	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+28, ecx

; 1422 :    PlayerOptions.ObjDeaggLevel = newlevel * 20;

	mov	edx, DWORD PTR _newlevel$[ebp]
	imul	edx, 20					; 00000014H
	mov	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+24, edx

; 1423 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _featureWalker$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
$LN10@SetDetail:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetDetail@OTWDriverClass@@QAEXH@Z$0:
	lea	ecx, DWORD PTR _featureWalker$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?SetDetail@OTWDriverClass@@QAEXH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetDetail@OTWDriverClass@@QAEXH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetDetail@OTWDriverClass@@QAEXH@Z ENDP			; OTWDriverClass::SetDetail
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\otwdrive.h
;	COMDAT ?SetScale@OTWDriverClass@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newScale$ = 8						; size = 4
?SetScale@OTWDriverClass@@QAEXM@Z PROC			; OTWDriverClass::SetScale, COMDAT
; _this$ = ecx

; 340  :       void SetScale (float newScale) {objectScale = newScale;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _newScale$[ebp]
	movss	DWORD PTR [eax+32124], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
?SetScale@OTWDriverClass@@QAEXM@Z ENDP			; OTWDriverClass::SetScale
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\otwdrive.h
;	COMDAT ?SetTrackPlatform@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sb$ = 8						; size = 4
?SetTrackPlatform@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z PROC ; OTWDriverClass::SetTrackPlatform, COMDAT
; _this$ = ecx

; 286  : 		void SetTrackPlatform(SimBaseClass *sb){ otwTrackPlatform.reset(sb); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _sb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32332				; 00007e4cH
	call	?reset@?$VuBin@VSimBaseClass@@@@QAEXPAVSimBaseClass@@@Z ; VuBin<SimBaseClass>::reset
	mov	esp, ebp
	pop	ebp
	ret	4
?SetTrackPlatform@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ENDP ; OTWDriverClass::SetTrackPlatform
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Cleanup2DCockpitMode@OTWDriverClass@@QAEXXZ PROC	; OTWDriverClass::Cleanup2DCockpitMode
; _this$ = ecx

; 213  : void OTWDriverClass::Cleanup2DCockpitMode() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 214  : 	if(pCockpitManager)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+33684], 0
	je	SHORT $LN1@Cleanup2DC

; 215  : 		pCockpitManager->SetActivePanel(PANELS_INACTIVE);

	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+33684]
	call	?SetActivePanel@CockpitManager@@QAE_NH@Z ; CockpitManager::SetActivePanel
$LN1@Cleanup2DC:

; 216  : //	MfdDisplay[0]->SetImageBuffer(NULL, -1.0F, 1.0F, 1.0F, -1.0F);
; 217  : //	MfdDisplay[1]->SetImageBuffer(NULL, -1.0F, 1.0F, 1.0F, -1.0F);
; 218  : 	MfdDisplay[0]->SetImageBuffer(OTWImage, 0.0F, 0.0F, 0.0F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32040]
	push	eax
	mov	ecx, 4
	imul	ecx, 0
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx]
	call	?SetImageBuffer@MFDClass@@QAEXPAVImageBuffer@@MMMM@Z ; MFDClass::SetImageBuffer

; 219  : 	MfdDisplay[1]->SetImageBuffer(OTWImage, 0.0F, 0.0F, 0.0F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32040]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx]
	call	?SetImageBuffer@MFDClass@@QAEXPAVImageBuffer@@MMMM@Z ; MFDClass::SetImageBuffer

; 220  : 
; 221  : 	//Wombat778 4-12-04 Cleanup 3 and 4 MFDs too
; 222  : 	MfdDisplay[2]->SetImageBuffer(OTWImage, 0.0F, 0.0F, 0.0F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32040]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx]
	call	?SetImageBuffer@MFDClass@@QAEXPAVImageBuffer@@MMMM@Z ; MFDClass::SetImageBuffer

; 223  : 	MfdDisplay[3]->SetImageBuffer(OTWImage, 0.0F, 0.0F, 0.0F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32040]
	push	eax
	mov	ecx, 4
	imul	ecx, 3
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx]
	call	?SetImageBuffer@MFDClass@@QAEXPAVImageBuffer@@MMMM@Z ; MFDClass::SetImageBuffer

; 224  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Cleanup2DCockpitMode@OTWDriverClass@@QAEXXZ ENDP	; OTWDriverClass::Cleanup2DCockpitMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
tv1115 = -220						; size = 4
tv1161 = -216						; size = 4
tv1108 = -212						; size = 4
tv1169 = -208						; size = 4
tv1101 = -204						; size = 4
tv1153 = -200						; size = 4
tv1094 = -196						; size = 4
tv1165 = -192						; size = 4
tv1082 = -188						; size = 4
tv1157 = -184						; size = 4
tv1076 = -180						; size = 4
tv1171 = -176						; size = 4
tv1063 = -172						; size = 4
tv725 = -168						; size = 4
tv1056 = -164						; size = 4
tv1163 = -160						; size = 4
tv1049 = -156						; size = 4
tv1159 = -152						; size = 4
tv1042 = -148						; size = 4
tv1155 = -144						; size = 4
tv944 = -140						; size = 4
tv737 = -136						; size = 4
tv934 = -132						; size = 4
tv817 = -128						; size = 4
tv905 = -124						; size = 4
tv813 = -120						; size = 4
tv885 = -116						; size = 4
tv802 = -112						; size = 4
tv878 = -108						; size = 4
tv798 = -104						; size = 4
tv871 = -100						; size = 4
tv787 = -96						; size = 4
tv850 = -92						; size = 4
tv783 = -88						; size = 4
tv844 = -84						; size = 4
tv772 = -80						; size = 4
tv838 = -76						; size = 4
tv768 = -72						; size = 4
tv1175 = -68						; size = 4
tv757 = -64						; size = 4
tv832 = -60						; size = 4
tv753 = -56						; size = 4
tv1173 = -52						; size = 4
tv731 = -48						; size = 4
tv828 = -44						; size = 4
tv1167 = -40						; size = 4
tv637 = -36						; size = 4
tv82 = -32						; size = 4
tv397 = -28						; size = 4
tv159 = -24						; size = 4
tv66 = -20						; size = 4
_dz$ = -16						; size = 4
_dy$ = -12						; size = 4
_dx$ = -8						; size = 4
_this$ = -4						; size = 4
?SelectExternal@OTWDriverClass@@QAEXXZ PROC		; OTWDriverClass::SelectExternal
; _this$ = ecx

; 244  : void OTWDriverClass::SelectExternal() {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	mov	DWORD PTR _this$[ebp], ecx

; 245  : 
; 246  :    float dx, dy, dz;
; 247  : 
; 248  :    // reset our chase ranges etc to default or zero out slew stuff
; 249  :    ViewReset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ViewReset@OTWDriverClass@@QAEXXZ	; OTWDriverClass::ViewReset

; 250  : 
; 251  : 	switch( mOTWDisplayMode )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32328]
	mov	DWORD PTR tv66[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 13			; 0000000dH
	je	$LN9@SelectExte
	cmp	DWORD PTR tv66[ebp], 14			; 0000000eH
	je	$LN12@SelectExte
	cmp	DWORD PTR tv66[ebp], 16			; 00000010H
	je	SHORT $LN26@SelectExte
	jmp	$LN6@SelectExte
$LN26@SelectExte:

; 252  : 	{
; 253  : 		case ModeFlyby:
; 254  : 			  // end in X seconds
; 255  : 			  //flybyTimer = SimLibElapsedTime + 3500;
; 256  : 			  flybyTimer = SimLibElapsedTime + 6000;  // MLR 12/3/2003 - Made fly by timer 6 seconds

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	edx, 6000				; 00001770H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+33544], edx

; 257  : 			  if ( otwPlatform )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??B?$VuBin@VSimBaseClass@@@@QBE_NXZ	; VuBin<SimBaseClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	$LN25@SelectExte

; 258  : 			  {
; 259  : 				  if( otwPlatform->IsEject() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	DWORD PTR tv82[ebp], eax
	mov	edx, DWORD PTR tv82[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv82[ebp]
	mov	edx, DWORD PTR [eax+188]
	call	edx
	test	eax, eax
	je	$LN24@SelectExte

; 260  : 				  {
; 261  : 						flybyTimer = SimLibElapsedTime + 3000;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	eax, 3000				; 00000bb8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+33544], eax

; 262  : 						dx = otwPlatform->XDelta() * 1.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv725[ebp]
	movss	xmm0, DWORD PTR tv725[ebp]
	mulss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _dx$[ebp], xmm0

; 263  : 						dy = otwPlatform->YDelta() * 1.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv731[ebp]
	movss	xmm0, DWORD PTR tv731[ebp]
	mulss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _dy$[ebp], xmm0

; 264  : 						dz = otwPlatform->ZDelta() * 1.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv737[ebp]
	movss	xmm0, DWORD PTR tv737[ebp]
	mulss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _dz$[ebp], xmm0
	jmp	$LN21@SelectExte
$LN24@SelectExte:

; 265  : 				  }
; 266  : 				  else if ( otwPlatform->OnGround() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	DWORD PTR tv159[ebp], eax
	mov	edx, DWORD PTR tv159[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv159[ebp]
	mov	edx, DWORD PTR [eax+148]
	call	edx
	test	eax, eax
	je	$LN22@SelectExte

; 267  : 				  {
; 268  : 						dx = otwPlatform->dmx[0][0] * 10.0f + otwPlatform->XDelta() * 2.0f + PRANDFloat() * 100.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR __real@41200000
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	movss	DWORD PTR tv1153[ebp], xmm0
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv753[ebp]
	movss	xmm0, DWORD PTR tv753[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv1153[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv1155[ebp], xmm1
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv757[ebp]
	movss	xmm0, DWORD PTR tv757[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	movss	xmm1, DWORD PTR tv1155[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _dx$[ebp], xmm1

; 269  : 						dy = otwPlatform->dmx[0][1] * 10.0f + otwPlatform->YDelta() * 2.0f + PRANDFloat() * 100.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR __real@41200000
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	movss	DWORD PTR tv1157[ebp], xmm0
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv768[ebp]
	movss	xmm0, DWORD PTR tv768[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv1157[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv1159[ebp], xmm1
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv772[ebp]
	movss	xmm0, DWORD PTR tv772[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	movss	xmm1, DWORD PTR tv1159[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _dy$[ebp], xmm1

; 270  : 						dz = otwPlatform->dmx[0][2] * 10.0f + otwPlatform->ZDelta() * 2.0f - PRANDFloatPos() * 200.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR __real@41200000
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	movss	DWORD PTR tv1161[ebp], xmm0
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv783[ebp]
	movss	xmm0, DWORD PTR tv783[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv1161[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv1163[ebp], xmm1
	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv787[ebp]
	movss	xmm0, DWORD PTR tv787[ebp]
	mulss	xmm0, DWORD PTR __real@43480000
	movss	xmm1, DWORD PTR tv1163[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _dz$[ebp], xmm1

; 271  : 				  }
; 272  : 				  else

	jmp	$LN21@SelectExte
$LN22@SelectExte:

; 273  : 				  {
; 274  : 						dx = otwPlatform->dmx[0][0] * 10.0f + otwPlatform->XDelta() * 2.0f + PRANDFloat() * 100.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR __real@41200000
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	movss	DWORD PTR tv1165[ebp], xmm0
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv798[ebp]
	movss	xmm0, DWORD PTR tv798[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv1165[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv1167[ebp], xmm1
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv802[ebp]
	movss	xmm0, DWORD PTR tv802[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	movss	xmm1, DWORD PTR tv1167[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _dx$[ebp], xmm1

; 275  : 						dy = otwPlatform->dmx[0][1] * 10.0f + otwPlatform->YDelta() * 2.0f + PRANDFloat() * 100.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR __real@41200000
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	movss	DWORD PTR tv1169[ebp], xmm0
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv813[ebp]
	movss	xmm0, DWORD PTR tv813[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv1169[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv1171[ebp], xmm1
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv817[ebp]
	movss	xmm0, DWORD PTR tv817[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	movss	xmm1, DWORD PTR tv1171[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _dy$[ebp], xmm1

; 276  : 						dz = otwPlatform->dmx[0][2] * 10.0f + otwPlatform->ZDelta() * 2.0f + PRANDFloat() * 100.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR __real@41200000
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	movss	DWORD PTR tv1173[ebp], xmm0
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv828[ebp]
	movss	xmm0, DWORD PTR tv828[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv1173[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR tv1175[ebp], xmm1
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv832[ebp]
	movss	xmm0, DWORD PTR tv832[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	movss	xmm1, DWORD PTR tv1175[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _dz$[ebp], xmm1
$LN21@SelectExte:

; 277  : 				  }
; 278  : 	
; 279  : 				  // edg: I think this may be where we're getting bad values
; 280  : 				  // for camera position
; 281  : 				  if ( fabs( dx ) > 15000.0f || fabs( dy ) > 15000.0f || fabs( dz ) > 15000.0f )

	push	ecx
	movss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv838[ebp]
	movss	xmm0, DWORD PTR tv838[ebp]
	comiss	xmm0, DWORD PTR __real@466a6000
	ja	SHORT $LN19@SelectExte
	push	ecx
	movss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv844[ebp]
	movss	xmm0, DWORD PTR tv844[ebp]
	comiss	xmm0, DWORD PTR __real@466a6000
	ja	SHORT $LN19@SelectExte
	push	ecx
	movss	xmm0, DWORD PTR _dz$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv850[ebp]
	movss	xmm0, DWORD PTR tv850[ebp]
	comiss	xmm0, DWORD PTR __real@466a6000
	jbe	SHORT $LN20@SelectExte
$LN19@SelectExte:

; 282  : 				  {
; 283  : 						endFlightPoint.x = otwPlatform->XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+33516]

; 284  : 						endFlightPoint.y = otwPlatform->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+33520]

; 285  : 						endFlightPoint.z = otwPlatform->ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+33524]

; 286  : 				  }
; 287  : 				  else

	jmp	$LN18@SelectExte
$LN20@SelectExte:

; 288  : 				  {
; 289  : 						endFlightPoint.x = otwPlatform->XPos() + dx;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv871[ebp]
	movss	xmm0, DWORD PTR tv871[ebp]
	addss	xmm0, DWORD PTR _dx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+33516], xmm0

; 290  : 						endFlightPoint.y = otwPlatform->YPos() + dy;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv878[ebp]
	movss	xmm0, DWORD PTR tv878[ebp]
	addss	xmm0, DWORD PTR _dy$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+33520], xmm0

; 291  : 						endFlightPoint.z = otwPlatform->ZPos() + dz;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv885[ebp]
	movss	xmm0, DWORD PTR tv885[ebp]
	addss	xmm0, DWORD PTR _dz$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+33524], xmm0
$LN18@SelectExte:

; 292  : 				  }
; 293  : 
; 294  : 				  if ( rand() & 1 )

	call	_rand
	and	eax, 1
	je	SHORT $LN17@SelectExte

; 295  : 				  {
; 296  : 						endFlightVec.x = PRANDFloat();

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+33528]

; 297  : 						endFlightVec.y = PRANDFloat();

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+33532]

; 298  : 						if ( otwPlatform->OnGround() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	DWORD PTR tv397[ebp], eax
	mov	eax, DWORD PTR tv397[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv397[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	je	SHORT $LN16@SelectExte

; 299  : 							endFlightVec.z = PRANDFloat();

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+33536]

; 300  : 						else

	jmp	SHORT $LN15@SelectExte
$LN16@SelectExte:

; 301  : 							endFlightVec.z = -PRANDFloatPos();

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv905[ebp]
	movss	xmm0, DWORD PTR tv905[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+33536], xmm0
$LN15@SelectExte:

; 302  : 				  }
; 303  : 				  else

	jmp	SHORT $LN14@SelectExte
$LN17@SelectExte:

; 304  : 				  {
; 305  : 						endFlightVec.x = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+33528], xmm0

; 306  : 						endFlightVec.y = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+33532], xmm0

; 307  : 						endFlightVec.z = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+33536], xmm0
$LN14@SelectExte:

; 308  : 				  }
; 309  : 			  }
; 310  : 			  else

	jmp	SHORT $LN13@SelectExte
$LN25@SelectExte:

; 311  : 			  {
; 312  : 				  endFlightPoint = focusPoint;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 33428				; 00008294H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 33516				; 000082ecH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 313  : 				  endFlightVec.x = PRANDFloat();

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+33528]

; 314  : 				  endFlightVec.y = PRANDFloat();

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+33532]

; 315  : 				  endFlightVec.z = -PRANDFloatPos();

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv934[ebp]
	movss	xmm0, DWORD PTR tv934[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+33536], xmm0
$LN13@SelectExte:

; 316  : 			  }
; 317  : 
; 318  : 			  mOTWDisplayMode = ModeChase;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32328], 7

; 319  : 			  break;

	jmp	$LN27@SelectExte
$LN12@SelectExte:

; 320  : 		case ModeSatellite:
; 321  : 			if(otwPlatform)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??B?$VuBin@VSimBaseClass@@@@QBE_NXZ	; VuBin<SimBaseClass>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN11@SelectExte

; 322  : 			{
; 323  : 				chaseCamPos.z = otwPlatform->ZPos() + chaseRange * 12.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv944[ebp]
	movss	xmm0, DWORD PTR tv944[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+32292]
	mulss	xmm1, DWORD PTR __real@41400000
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+32316], xmm0

; 324  : 			}
; 325  : 			else

	jmp	SHORT $LN10@SelectExte
$LN11@SelectExte:

; 326  : 			{
; 327  : 		
; 328  : 				chaseCamPos.z = chaseRange * 20.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+32292]
	mulss	xmm0, DWORD PTR __real@41a00000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+32316], xmm0
$LN10@SelectExte:

; 329  : 			}
; 330  : 			chaseCamPos.x = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+32308], xmm0

; 331  : 			chaseCamPos.y = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+32312], xmm0

; 332  : 			chaseCamRoll = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+32320], xmm0

; 333  : 			break;

	jmp	$LN27@SelectExte
$LN9@SelectExte:

; 334  : 
; 335  : 		case ModeWeapon:
; 336  : 
; 337  : 			if(otwPlatform)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??B?$VuBin@VSimBaseClass@@@@QBE_NXZ	; VuBin<SimBaseClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	$LN8@SelectExte

; 338  : 			{
; 339  : 		
; 340  : 				chaseCamRoll = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+32320], xmm0

; 341  : 				chaseCamPos.x = otwPlatform->dmx[0][0] * chaseRange * 0.5f;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [ecx+32292]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+32308], xmm0

; 342  : 				chaseCamPos.y = otwPlatform->dmx[0][1] * chaseRange * 0.5f;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [ecx+32292]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+32312], xmm0

; 343  : 				chaseCamPos.z = otwPlatform->dmx[0][2] * chaseRange * 0.5f - 5.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [ecx+32292]
	mulss	xmm0, DWORD PTR __real@3f000000
	subss	xmm0, DWORD PTR __real@40a00000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+32316], xmm0

; 344  : 			}
; 345  : 			else

	jmp	SHORT $LN7@SelectExte
$LN8@SelectExte:

; 346  : 			{
; 347  : 		
; 348  : 				chaseCamRoll = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+32320], xmm0

; 349  : 				chaseCamPos.x = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+32308], xmm0

; 350  : 				chaseCamPos.y = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+32312], xmm0

; 351  : 				chaseCamPos.z = -20.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c1a00000
	movss	DWORD PTR [eax+32316], xmm0
$LN7@SelectExte:

; 352  : 			}
; 353  : 			break;

	jmp	$LN27@SelectExte
$LN6@SelectExte:

; 354  : 
; 355  : 		default:
; 356  : 
; 357  : 			if(otwPlatform)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??B?$VuBin@VSimBaseClass@@@@QBE_NXZ	; VuBin<SimBaseClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	$LN5@SelectExte

; 358  : 			{
; 359  : 		
; 360  : 				chaseCamRoll = otwPlatform->Roll();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+32320]

; 361  : 				chaseCamPos.x = otwPlatform->dmx[0][0] * chaseRange;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [ecx+32292]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+32308], xmm0

; 362  : 				chaseCamPos.y = otwPlatform->dmx[0][1] * chaseRange;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [ecx+32292]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+32312], xmm0

; 363  : 				chaseCamPos.z = otwPlatform->dmx[0][2] * chaseRange - 5.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [ecx+32292]
	subss	xmm0, DWORD PTR __real@40a00000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+32316], xmm0

; 364  : 			}
; 365  : 			else

	jmp	SHORT $LN4@SelectExte
$LN5@SelectExte:

; 366  : 			{
; 367  : 		
; 368  : 				chaseCamRoll = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+32320], xmm0

; 369  : 				chaseCamPos.x = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+32308], xmm0

; 370  : 				chaseCamPos.y = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+32312], xmm0

; 371  : 				chaseCamPos.z = -500.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c3fa0000
	movss	DWORD PTR [eax+32316], xmm0
$LN4@SelectExte:
$LN27@SelectExte:

; 372  : 			}
; 373  : 			break;
; 374  : 	
; 375  : 	}
; 376  : 	cameraPos = chaseCamPos;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32308				; 00007e34H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 33440				; 000082a0H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx

; 377  : 
; 378  : 	// mix it up a bit for action camera
; 379  : 	if ( actionCameraMode == TRUE )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+33556], 1
	jne	$LN3@SelectExte

; 380  : 	{
; 381  : 		cameraPos.x += PRANDFloat() * 700.0f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv1042[ebp]
	movss	xmm0, DWORD PTR tv1042[ebp]
	mulss	xmm0, DWORD PTR __real@442f0000
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+33440]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+33440], xmm0

; 382  : 		cameraPos.y += PRANDFloat() * 700.0f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv1049[ebp]
	movss	xmm0, DWORD PTR tv1049[ebp]
	mulss	xmm0, DWORD PTR __real@442f0000
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+33444]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+33444], xmm0

; 383  : 		chaseCamPos.x += PRANDFloat() * 700.0f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv1056[ebp]
	movss	xmm0, DWORD PTR tv1056[ebp]
	mulss	xmm0, DWORD PTR __real@442f0000
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+32308]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+32308], xmm0

; 384  : 		chaseCamPos.y += PRANDFloat() * 700.0f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv1063[ebp]
	movss	xmm0, DWORD PTR tv1063[ebp]
	mulss	xmm0, DWORD PTR __real@442f0000
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+32312]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+32312], xmm0

; 385  : 		if ( otwPlatform && otwPlatform->drawPointer )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??B?$VuBin@VSimBaseClass@@@@QBE_NXZ	; VuBin<SimBaseClass>::operator bool
	movzx	edx, al
	test	edx, edx
	je	$LN1@SelectExte
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	cmp	DWORD PTR [eax+332], 0
	je	$LN1@SelectExte

; 386  : 		{
; 387  : 			chaseRange = -1.5F * otwPlatform->drawPointer->Radius();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, DWORD PTR [eax+332]
	call	?Radius@DrawableObject@@QBEMXZ		; DrawableObject::Radius
	fstp	DWORD PTR tv1076[ebp]
	movss	xmm0, DWORD PTR tv1076[ebp]
	mulss	xmm0, DWORD PTR __real@bfc00000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+32292], xmm0

; 388  : 			chaseRange += -PRANDFloatPos() * 400.0f;

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv1082[ebp]
	movss	xmm0, DWORD PTR tv1082[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@43c80000
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+32292]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+32292], xmm0

; 389  : 			if ( otwPlatform->OnGround() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	DWORD PTR tv637[ebp], eax
	mov	eax, DWORD PTR tv637[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv637[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	je	SHORT $LN1@SelectExte

; 390  : 			{
; 391  : 				cameraPos.z -= PRANDFloatPos() * 400.0f;

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv1094[ebp]
	movss	xmm0, DWORD PTR tv1094[ebp]
	mulss	xmm0, DWORD PTR __real@43c80000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+33448]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+33448], xmm1

; 392  : 				chaseCamPos.z -= PRANDFloatPos() * 400.0f;

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv1101[ebp]
	movss	xmm0, DWORD PTR tv1101[ebp]
	mulss	xmm0, DWORD PTR __real@43c80000
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+32316]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+32316], xmm1

; 393  : 				return;

	jmp	SHORT $LN29@SelectExte
$LN1@SelectExte:

; 394  : 			}
; 395  : 		}
; 396  : 
; 397  : 		cameraPos.z += PRANDFloat() * 700.0f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv1108[ebp]
	movss	xmm0, DWORD PTR tv1108[ebp]
	mulss	xmm0, DWORD PTR __real@442f0000
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+33448]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+33448], xmm0

; 398  : 		chaseCamPos.z += PRANDFloat() * 700.0f;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv1115[ebp]
	movss	xmm0, DWORD PTR tv1115[ebp]
	mulss	xmm0, DWORD PTR __real@442f0000
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+32316]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+32316], xmm0
$LN3@SelectExte:
$LN29@SelectExte:

; 399  : 
; 400  : 	}
; 401  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SelectExternal@OTWDriverClass@@QAEXXZ ENDP		; OTWDriverClass::SelectExternal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SelectF3PadlockMode@OTWDriverClass@@QAEXXZ PROC	; OTWDriverClass::SelectF3PadlockMode
; _this$ = ecx

; 189  : void OTWDriverClass::SelectF3PadlockMode() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 190  :    if(pPadlockCPManager)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+33688], 0
	je	SHORT $LN2@SelectF3Pa

; 191  : 		pPadlockCPManager->SetDefaultPanel(PADLOCK_DEFAULT_PANEL);

	push	100					; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+33688]
	call	?SetDefaultPanel@CockpitManager@@QAEXH@Z ; CockpitManager::SetDefaultPanel
$LN2@SelectF3Pa:

; 192  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SelectF3PadlockMode@OTWDriverClass@@QAEXXZ ENDP	; OTWDriverClass::SelectF3PadlockMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Select3DCockpitMode@OTWDriverClass@@QAEXXZ PROC	; OTWDriverClass::Select3DCockpitMode
; _this$ = ecx

; 230  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 231  : 	if (!g_bSync2D3DPit)

	movzx	eax, BYTE PTR ?g_bSync2D3DPit@@3_NA	; g_bSync2D3DPit
	test	eax, eax
	jne	SHORT $LN1@Select3DCo

; 232  : 	{
; 233  : 		ViewReset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ViewReset@OTWDriverClass@@QAEXXZ	; OTWDriverClass::ViewReset

; 234  : 		eyePan	= 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+32272], xmm0

; 235  : 		eyeTilt	= g_f3DHeadTilt * DTR; // Cobra

	movss	xmm0, DWORD PTR ?g_f3DHeadTilt@@3MA
	mulss	xmm0, DWORD PTR __real@3c8efa34
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+32276], xmm0
$LN1@Select3DCo:

; 236  : 	}
; 237  : 	SetFOV( g_f3DPitFOV * DTR ); // Cobra

	movss	xmm0, DWORD PTR ?g_f3DPitFOV@@3MA
	mulss	xmm0, DWORD PTR __real@3c8efa34
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFOV@OTWDriverClass@@QAEXM@Z		; OTWDriverClass::SetFOV

; 238  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Select3DCockpitMode@OTWDriverClass@@QAEXXZ ENDP	; OTWDriverClass::Select3DCockpitMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_viewreset$ = 8						; size = 1
?Select2DCockpitMode@OTWDriverClass@@QAEX_N@Z PROC	; OTWDriverClass::Select2DCockpitMode
; _this$ = ecx

; 198  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 199  :    if(pCockpitManager)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+33684], 0
	je	$LN1@Select2DCo

; 200  :    {
; 201  : 	   //MI
; 202  : 	   if(SimDriver.GetPlayerAircraft() && SimDriver.GetPlayerAircraft()->WideView)

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN3@Select2DCo
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	movzx	ecx, BYTE PTR [eax+1818]
	test	ecx, ecx
	je	SHORT $LN3@Select2DCo

; 203  : 		   pCockpitManager->SetDefaultPanel(COCKPIT_DEFAULT_PANEL + 90000);

	push	91100					; 000163dcH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+33684]
	call	?SetDefaultPanel@CockpitManager@@QAEXH@Z ; CockpitManager::SetDefaultPanel

; 204  : 	   else

	jmp	SHORT $LN2@Select2DCo
$LN3@Select2DCo:

; 205  : 		   pCockpitManager->SetDefaultPanel(COCKPIT_DEFAULT_PANEL);

	push	1100					; 0000044cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+33684]
	call	?SetDefaultPanel@CockpitManager@@QAEXH@Z ; CockpitManager::SetDefaultPanel
$LN2@Select2DCo:

; 206  : 
; 207  : 	   //Wombat778 11-17-04
; 208  : 	   if (g_bSync2D3DPit&&!viewreset)

	movzx	ecx, BYTE PTR ?g_bSync2D3DPit@@3_NA	; g_bSync2D3DPit
	test	ecx, ecx
	je	SHORT $LN1@Select2DCo
	movzx	edx, BYTE PTR _viewreset$[ebp]
	test	edx, edx
	jne	SHORT $LN1@Select2DCo

; 209  : 		   pCockpitManager->Set2DPanelDirection(eyePan, eyeTilt);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+32276]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+32272]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+33684]
	call	?Set2DPanelDirection@CockpitManager@@QAEHMM@Z ; CockpitManager::Set2DPanelDirection
$LN1@Select2DCo:

; 210  :    }
; 211  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Select2DCockpitMode@OTWDriverClass@@QAEX_N@Z ENDP	; OTWDriverClass::Select2DCockpitMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
tv271 = -12						; size = 4
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_mode$ = 8						; size = 4
_lastmode$ = 12						; size = 4
?SelectDisplayMode@OTWDriverClass@@QAEXW4OTWDisplayMode@1@0@Z PROC ; OTWDriverClass::SelectDisplayMode
; _this$ = ecx

; 1160 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1161 : 
; 1162 :    // since we're doing a new mode reset any view timers
; 1163 :    flybyTimer = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+33544], 0

; 1164 :    
; 1165 :    //Wombat778 12-03-04 Disable hybrid pit mode on a view change
; 1166 :    if (GetHybridPitMode())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetHybridPitMode@OTWDriverClass@@QAEHXZ ; OTWDriverClass::GetHybridPitMode
	test	eax, eax
	je	SHORT $LN27@SelectDisp

; 1167 : 	   ToggleHybridPitMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ToggleHybridPitMode@OTWDriverClass@@QAEXXZ ; OTWDriverClass::ToggleHybridPitMode
$LN27@SelectDisp:

; 1168 : 
; 1169 :    switch(mode) {

	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	cmp	DWORD PTR tv69[ebp], 18			; 00000012H
	ja	$LN1@SelectDisp
	mov	edx, DWORD PTR tv69[ebp]
	movzx	eax, BYTE PTR $LN30@SelectDisp[edx]
	jmp	DWORD PTR $LN31@SelectDisp[eax*4]
$LN24@SelectDisp:

; 1170 : 
; 1171 : //Wombat778 11-18-04 Move view resetting stuff here
; 1172 : 
; 1173 : 	case ModeNone:
; 1174 : 		ViewReset();		//Wombat778

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ViewReset@OTWDriverClass@@QAEXXZ	; OTWDriverClass::ViewReset

; 1175 : 		break;

	jmp	$LN25@SelectDisp
$LN23@SelectDisp:

; 1176 : 
; 1177 : 	case ModeHud:
; 1178 : 	case ModePadlockEFOV:
; 1179 : 		ViewReset();		//Wombat778

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ViewReset@OTWDriverClass@@QAEXXZ	; OTWDriverClass::ViewReset

; 1180 : 		if(PlayerOptions.GetPadlockMode() != PDDisabled) {

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetPadlockMode@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::GetPadlockMode
	cmp	eax, 2
	je	SHORT $LN21@SelectDisp

; 1181 : 			// this mode restores to player's f16
; 1182 : 			if ( otwPlatform.get() != SimDriver.GetPlayerAircraft() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	mov	esi, eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	cmp	esi, eax
	je	SHORT $LN21@SelectDisp

; 1183 : 				SetGraphicsOwnship( SimDriver.GetPlayerAircraft() );

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGraphicsOwnship@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetGraphicsOwnship
$LN21@SelectDisp:

; 1184 : 		}
; 1185 : 		break;

	jmp	$LN25@SelectDisp
$LN20@SelectDisp:

; 1186 : 
; 1187 : 	case ModeIncoming:
; 1188 : 	case ModeAirFriendly:
; 1189 : 	case ModeTarget:
; 1190 : 	case ModeTargetToSelf:
; 1191 : 	case ModeTargetToWeapon:
; 1192 : 	case ModeGroundFriendly:
; 1193 : 	case ModeAirEnemy:
; 1194 : 	case ModeGroundEnemy:
; 1195 : 	case ModeWeapon:
; 1196 : 		ViewReset();		//Wombat778

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ViewReset@OTWDriverClass@@QAEXXZ	; OTWDriverClass::ViewReset

; 1197 : 		SelectExternal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectExternal@OTWDriverClass@@QAEXXZ	; OTWDriverClass::SelectExternal

; 1198 : 		chaseRange *= 2.5;

	mov	ecx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+32292]
	mulsd	xmm0, QWORD PTR __real@4004000000000000
	cvtsd2ss xmm0, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+32292], xmm0

; 1199 : 		break;

	jmp	$LN25@SelectDisp
$LN19@SelectDisp:

; 1200 : 
; 1201 : 	case ModePadlockF3:
; 1202 : 		if(PlayerOptions.GetPadlockMode() != PDDisabled) {

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetPadlockMode@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::GetPadlockMode
	cmp	eax, 2
	je	SHORT $LN18@SelectDisp

; 1203 : 			if ( otwPlatform.get() != SimDriver.GetPlayerAircraft() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	mov	esi, eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	cmp	esi, eax
	je	SHORT $LN17@SelectDisp

; 1204 : 				SetGraphicsOwnship( SimDriver.GetPlayerAircraft() );

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGraphicsOwnship@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetGraphicsOwnship
$LN17@SelectDisp:

; 1205 : 			SelectF3PadlockMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectF3PadlockMode@OTWDriverClass@@QAEXXZ ; OTWDriverClass::SelectF3PadlockMode
$LN18@SelectDisp:

; 1206 : 		}
; 1207 : 		break;

	jmp	$LN25@SelectDisp
$LN16@SelectDisp:

; 1208 : 
; 1209 : 	case Mode2DCockpit:
; 1210 : 		// this mode restores to player's f16			
; 1211 : 
; 1212 : 		//Wombat778 11-18-04 added view reset code.  Only reset the view when not moving from 2d to 3d cockpit.
; 1213 : 		if ( otwPlatform.get() != SimDriver.GetPlayerAircraft() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	mov	esi, eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	cmp	esi, eax
	je	SHORT $LN15@SelectDisp

; 1214 : 			SetGraphicsOwnship( SimDriver.GetPlayerAircraft() );

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGraphicsOwnship@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetGraphicsOwnship
$LN15@SelectDisp:

; 1215 : 
; 1216 : 		if (g_bSync2D3DPit && lastmode == Mode3DCockpit)	//consider adding padlock modes									

	movzx	eax, BYTE PTR ?g_bSync2D3DPit@@3_NA	; g_bSync2D3DPit
	test	eax, eax
	je	SHORT $LN14@SelectDisp
	cmp	DWORD PTR _lastmode$[ebp], 3
	jne	SHORT $LN14@SelectDisp

; 1217 : 			Select2DCockpitMode(0);		

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Select2DCockpitMode@OTWDriverClass@@QAEX_N@Z ; OTWDriverClass::Select2DCockpitMode

; 1218 : 		else 

	jmp	SHORT $LN13@SelectDisp
$LN14@SelectDisp:

; 1219 : 		{
; 1220 : 			ViewReset();	

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ViewReset@OTWDriverClass@@QAEXXZ	; OTWDriverClass::ViewReset

; 1221 : 			Select2DCockpitMode(1);		

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Select2DCockpitMode@OTWDriverClass@@QAEX_N@Z ; OTWDriverClass::Select2DCockpitMode
$LN13@SelectDisp:

; 1222 : 		}
; 1223 : 		break;

	jmp	$LN25@SelectDisp
$LN12@SelectDisp:

; 1224 : 		
; 1225 : 	case Mode3DCockpit:
; 1226 : 		// this mode restores to player's f16
; 1227 : 
; 1228 : 		if (!g_bSync2D3DPit || lastmode != Mode2DCockpit)		//Wombat778 reset the view if not from 2d pit. COnsider adding padlock modes here

	movzx	ecx, BYTE PTR ?g_bSync2D3DPit@@3_NA	; g_bSync2D3DPit
	test	ecx, ecx
	je	SHORT $LN10@SelectDisp
	cmp	DWORD PTR _lastmode$[ebp], 2
	je	SHORT $LN11@SelectDisp
$LN10@SelectDisp:

; 1229 : 		{
; 1230 : 			ViewReset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ViewReset@OTWDriverClass@@QAEXXZ	; OTWDriverClass::ViewReset

; 1231 : 			eyePan = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+32272], xmm0

; 1232 : 			eyeTilt	= g_f3DHeadTilt * DTR; // Cobra

	movss	xmm0, DWORD PTR ?g_f3DHeadTilt@@3MA
	mulss	xmm0, DWORD PTR __real@3c8efa34
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+32276], xmm0

; 1233 : 			SetFOV( g_f3DPitFOV * DTR ); // Cobra

	movss	xmm0, DWORD PTR ?g_f3DPitFOV@@3MA
	mulss	xmm0, DWORD PTR __real@3c8efa34
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFOV@OTWDriverClass@@QAEXM@Z		; OTWDriverClass::SetFOV
	jmp	$LN7@SelectDisp
$LN11@SelectDisp:

; 1234 : 		}
; 1235 : 		else if (g_bSync2D3DPit && lastmode == Mode2DCockpit)

	movzx	ecx, BYTE PTR ?g_bSync2D3DPit@@3_NA	; g_bSync2D3DPit
	test	ecx, ecx
	je	$LN7@SelectDisp
	cmp	DWORD PTR _lastmode$[ebp], 2
	jne	$LN7@SelectDisp

; 1236 : 		{
; 1237 : 			if (eyePan == 0.0f && fabs(eyeTilt) < 0.3f ) // Cobra - Default 3D pit view when 2D pit view is straight forward view (panel 1100)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+32272]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN7@SelectDisp
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+32276]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv271[ebp]
	movss	xmm0, DWORD PTR __real@3e99999a
	comiss	xmm0, DWORD PTR tv271[ebp]
	jbe	SHORT $LN7@SelectDisp

; 1238 : 			{
; 1239 : 				eyePan = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+32272], xmm0

; 1240 : 				eyeTilt	= g_f3DHeadTilt * DTR; // Cobra

	movss	xmm0, DWORD PTR ?g_f3DHeadTilt@@3MA
	mulss	xmm0, DWORD PTR __real@3c8efa34
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+32276], xmm0

; 1241 : 				SetFOV( g_f3DPitFOV * DTR ); // Cobra

	movss	xmm0, DWORD PTR ?g_f3DPitFOV@@3MA
	mulss	xmm0, DWORD PTR __real@3c8efa34
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFOV@OTWDriverClass@@QAEXM@Z		; OTWDriverClass::SetFOV
$LN7@SelectDisp:

; 1242 : 			}
; 1243 : 		}
; 1244 : 
; 1245 : 		if ( otwPlatform.get() != SimDriver.GetPlayerAircraft() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	mov	esi, eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	cmp	esi, eax
	je	SHORT $LN6@SelectDisp

; 1246 : 			SetGraphicsOwnship( SimDriver.GetPlayerAircraft() );

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGraphicsOwnship@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetGraphicsOwnship
$LN6@SelectDisp:

; 1247 : 		Select3DCockpitMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Select3DCockpitMode@OTWDriverClass@@QAEXXZ ; OTWDriverClass::Select3DCockpitMode

; 1248 : 		break;

	jmp	SHORT $LN25@SelectDisp
$LN5@SelectDisp:

; 1249 : 		
; 1250 : 	case ModeChase:
; 1251 : 		ViewReset();		//Wombat778

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ViewReset@OTWDriverClass@@QAEXXZ	; OTWDriverClass::ViewReset

; 1252 : 		SelectExternal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectExternal@OTWDriverClass@@QAEXXZ	; OTWDriverClass::SelectExternal

; 1253 : 		break;

	jmp	SHORT $LN25@SelectDisp
$LN4@SelectDisp:

; 1254 : 
; 1255 : 	case ModeOrbit:
; 1256 : 		ViewReset();		//Wombat778

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ViewReset@OTWDriverClass@@QAEXXZ	; OTWDriverClass::ViewReset

; 1257 : 		SelectExternal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectExternal@OTWDriverClass@@QAEXXZ	; OTWDriverClass::SelectExternal

; 1258 : 		break;

	jmp	SHORT $LN25@SelectDisp
$LN3@SelectDisp:

; 1259 : 
; 1260 : 	case ModeSatellite:
; 1261 : 		ViewReset();		//Wombat778

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ViewReset@OTWDriverClass@@QAEXXZ	; OTWDriverClass::ViewReset

; 1262 : 		SelectExternal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectExternal@OTWDriverClass@@QAEXXZ	; OTWDriverClass::SelectExternal

; 1263 : 		break;

	jmp	SHORT $LN25@SelectDisp
$LN2@SelectDisp:

; 1264 : 
; 1265 : 	case ModeFlyby:
; 1266 : 		ViewReset();		//Wombat778

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ViewReset@OTWDriverClass@@QAEXXZ	; OTWDriverClass::ViewReset

; 1267 : 		SelectExternal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectExternal@OTWDriverClass@@QAEXXZ	; OTWDriverClass::SelectExternal

; 1268 : 		break;

	jmp	SHORT $LN25@SelectDisp
$LN1@SelectDisp:

; 1269 : 
; 1270 : 	default:
; 1271 : 		ViewReset();		//Wombat778

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ViewReset@OTWDriverClass@@QAEXXZ	; OTWDriverClass::ViewReset
$LN25@SelectDisp:

; 1272 : 		ShiWarning( "Bad Viewing mode" );
; 1273 : 	}
; 1274 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN31@SelectDisp:
	DD	$LN24@SelectDisp
	DD	$LN23@SelectDisp
	DD	$LN16@SelectDisp
	DD	$LN12@SelectDisp
	DD	$LN19@SelectDisp
	DD	$LN4@SelectDisp
	DD	$LN5@SelectDisp
	DD	$LN20@SelectDisp
	DD	$LN3@SelectDisp
	DD	$LN2@SelectDisp
$LN30@SelectDisp:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	1
	DB	5
	DB	6
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	8
	DB	7
	DB	9
	DB	7
	DB	7
?SelectDisplayMode@OTWDriverClass@@QAEXW4OTWDisplayMode@1@0@Z ENDP ; OTWDriverClass::SelectDisplayMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mode$ = 8						; size = 4
?CleanupDisplayMode@OTWDriverClass@@QAEXW4OTWDisplayMode@1@@Z PROC ; OTWDriverClass::CleanupDisplayMode
; _this$ = ecx

; 1151 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1152 : 	if(mode == Mode2DCockpit)

	cmp	DWORD PTR _mode$[ebp], 2
	jne	SHORT $LN2@CleanupDis

; 1153 : 	{
; 1154 : 		Cleanup2DCockpitMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Cleanup2DCockpitMode@OTWDriverClass@@QAEXXZ ; OTWDriverClass::Cleanup2DCockpitMode
$LN2@CleanupDis:

; 1155 : 	}
; 1156 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CleanupDisplayMode@OTWDriverClass@@QAEXW4OTWDisplayMode@1@@Z ENDP ; OTWDriverClass::CleanupDisplayMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOTWDisplayMode@OTWDriverClass@@QAE?AW4OTWDisplayMode@1@XZ PROC ; OTWDriverClass::GetOTWDisplayMode
; _this$ = ecx

; 404  : OTWDriverClass::OTWDisplayMode OTWDriverClass::GetOTWDisplayMode(void) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 405  : 	
; 406  : 	return mOTWDisplayMode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32328]

; 407  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetOTWDisplayMode@OTWDriverClass@@QAE?AW4OTWDisplayMode@1@XZ ENDP ; OTWDriverClass::GetOTWDisplayMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\otwdrive\access.cpp
_TEXT	SEGMENT
tv650 = -84						; size = 4
_lastmode$1 = -80					; size = 4
tv834 = -76						; size = 4
tv826 = -72						; size = 4
tv929 = -68						; size = 4
tv800 = -64						; size = 4
tv927 = -60						; size = 4
tv789 = -56						; size = 4
tv925 = -52						; size = 4
tv782 = -48						; size = 4
tv923 = -44						; size = 4
tv771 = -40						; size = 4
tv921 = -36						; size = 4
tv764 = -32						; size = 4
tv919 = -28						; size = 4
tv753 = -24						; size = 4
_groundZ$2 = -20					; size = 4
tv310 = -16						; size = 4
tv75 = -12						; size = 4
_newObject$ = -8					; size = 4
_this$ = -4						; size = 4
_mode$ = 8						; size = 4
?SetOTWDisplayMode@OTWDriverClass@@QAEXW4OTWDisplayMode@1@@Z PROC ; OTWDriverClass::SetOTWDisplayMode
; _this$ = ecx

; 457  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	mov	DWORD PTR _this$[ebp], ecx

; 458  : 	SimBaseClass *newObject;
; 459  : 	//SimObjectType *targetPtr;
; 460  : 
; 461  : 	// if in action camera mode shut it off
; 462  : 	if ( actionCameraMode )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+33556], 0
	je	SHORT $LN67@SetOTWDisp

; 463  : 	{
; 464  : 		actionCameraMode = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+33556], 0
$LN67@SetOTWDisp:

; 465  : 	}
; 466  : 
; 467  :    // reset our chase ranges etc to default or zero out slew stuff
; 468  : //	if(!(mode == mOTWDisplayMode && mode == ModePadlockF3)) {
; 469  : //		ViewReset();
; 470  : //	}
; 471  : 
; 472  : 	/*
; 473  : 	if((mode != ModePadlockF3) && 
; 474  : 	   (mode != ModePadlockEFOV) &&
; 475  : 	   (mode != ModeTarget) &&
; 476  : 	   (mode != ModeTargetToSelf) )
; 477  : 	{
; 478  : 		if(mpPadlockPriorityObject) {
; 479  : 			VuDeReferenceEntity(mpPadlockPriorityObject);
; 480  : 			mpPadlockPriorityObject = NULL;	
; 481  : 		}
; 482  : 		mpPadlockCandidate		= NULL;
; 483  : 	}
; 484  : 	*/
; 485  : 	if((mode != ModePadlockF3) && 
; 486  : 	   (mode != ModePadlockEFOV) )

	cmp	DWORD PTR _mode$[ebp], 4
	je	SHORT $LN66@SetOTWDisp
	cmp	DWORD PTR _mode$[ebp], 5
	je	SHORT $LN66@SetOTWDisp

; 487  : 	{
; 488  : /* 2001-01-29 MODIFIED BY S.G. FOR THE NEW mpPadlockPrioritySimObject
; 489  : 		if(mpPadlockPriorityObject) {
; 490  : 			VuDeReferenceEntity(mpPadlockPriorityObject);
; 491  : 			mpPadlockPriorityObject = NULL;	
; 492  : */		SetmpPadlockPriorityObject(NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetmpPadlockPriorityObject@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetmpPadlockPriorityObject

; 493  : //		}
; 494  : 		mpPadlockCandidate		= NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+33796], 0

; 495  :       mPadlockCandidateID  = FalconNullId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax+33812], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+33816], edx
$LN66@SetOTWDisp:

; 496  : 	}
; 497  : 
; 498  : 	if(mode == mOTWDisplayMode)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	cmp	ecx, DWORD PTR [eax+32328]
	jne	$LN65@SetOTWDisp

; 499  : 	{
; 500  : 		// we're in the same mode, some modes will require processing
; 501  : 		switch( mode )

	mov	edx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR tv75[ebp], edx
	mov	eax, DWORD PTR tv75[ebp]
	sub	eax, 8
	mov	DWORD PTR tv75[ebp], eax
	cmp	DWORD PTR tv75[ebp], 10			; 0000000aH
	ja	$LN39@SetOTWDisp
	mov	ecx, DWORD PTR tv75[ebp]
	jmp	DWORD PTR $LN70@SetOTWDisp[ecx*4]
$LN62@SetOTWDisp:

; 502  : 		{
; 503  : 			case ModeWeapon:
; 504  : 
; 505  : 				// try and find a flying weapon for the current otwPlatform's parent
; 506  : 				// since we assume the current otwplatform is a weapon
; 507  : 				ShiAssert( otwPlatform->IsWeapon() );
; 508  : 				newObject = FindNextViewObject(((SimWeaponClass*)otwPlatform.get())->Parent(), otwPlatform.get(), NEXT_WEAPON);

	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	mov	ecx, eax
	call	?Parent@SimWeaponClass@@QAEPAVFalconEntity@@XZ ; SimWeaponClass::Parent
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindNextViewObject@OTWDriverClass@@QAEPAVSimBaseClass@@PAVFalconEntity@@PAV2@W4ViewFindMode@1@@Z ; OTWDriverClass::FindNextViewObject
	mov	DWORD PTR _newObject$[ebp], eax

; 509  : 
; 510  : 				// At the moment, no weapons flying, no mode change
; 511  : 				if ( newObject == NULL )

	cmp	DWORD PTR _newObject$[ebp], 0
	jne	SHORT $LN61@SetOTWDisp

; 512  : 					return;

	jmp	$LN68@SetOTWDisp
$LN61@SetOTWDisp:

; 513  : 
; 514  : 				// set graphics focus to the weapon
; 515  : 				SetGraphicsOwnship( newObject );

	mov	edx, DWORD PTR _newObject$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGraphicsOwnship@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetGraphicsOwnship

; 516  : 
; 517  : 				break;

	jmp	$LN63@SetOTWDisp
$LN60@SetOTWDisp:

; 518  : 
; 519  : 			case ModeTargetToWeapon:
; 520  : 
; 521  : 				// SCR 12/3/98  Hmm.  How did this happen?  Lets just get on with life (and hope we live)
; 522  : 				if (otwTrackPlatform.get() == NULL){

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32332				; 00007e4cH
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	test	eax, eax
	jne	SHORT $LN59@SetOTWDisp

; 523  : 					return;

	jmp	$LN68@SetOTWDisp
$LN59@SetOTWDisp:

; 524  : 				}
; 525  : 
; 526  : 				// try and find a flying weapon for the current otwTrackPlatform's parent
; 527  : 				// since we assume the current otwTrackplatform is a weapon
; 528  : 				ShiAssert( otwTrackPlatform->IsWeapon() );
; 529  : 				newObject = FindNextViewObject(
; 530  : 					((SimWeaponClass*)otwTrackPlatform.get())->Parent(), otwTrackPlatform.get(), NEXT_WEAPON );

	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32332				; 00007e4cH
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32332				; 00007e4cH
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	mov	ecx, eax
	call	?Parent@SimWeaponClass@@QAEPAVFalconEntity@@XZ ; SimWeaponClass::Parent
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindNextViewObject@OTWDriverClass@@QAEPAVSimBaseClass@@PAVFalconEntity@@PAV2@W4ViewFindMode@1@@Z ; OTWDriverClass::FindNextViewObject
	mov	DWORD PTR _newObject$[ebp], eax

; 531  : 
; 532  : 				// At the moment, no weapons flying, no mode change
; 533  : 				if ( newObject == NULL )

	cmp	DWORD PTR _newObject$[ebp], 0
	jne	SHORT $LN58@SetOTWDisp

; 534  : 					return;

	jmp	$LN68@SetOTWDisp
$LN58@SetOTWDisp:

; 535  : 
; 536  : 				// set graphics focus to the target, tracking to the weapon
; 537  : 				SetGraphicsOwnship( otwTrackPlatform.get() );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32332				; 00007e4cH
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGraphicsOwnship@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetGraphicsOwnship

; 538  : 				SetTrackPlatform( newObject );

	mov	eax, DWORD PTR _newObject$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPlatform@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetTrackPlatform

; 539  : 
; 540  : 				break;

	jmp	$LN63@SetOTWDisp
$LN57@SetOTWDisp:

; 541  : 
; 542  : 			case ModeAirFriendly:
; 543  : 
; 544  : 				// try and find a flying weapon for the current otwPlatform
; 545  : 				newObject = FindNextViewObject( SimDriver.GetPlayerAircraft(), otwPlatform.get(), NEXT_AIR_FRIEND  );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	push	eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindNextViewObject@OTWDriverClass@@QAEPAVSimBaseClass@@PAVFalconEntity@@PAV2@W4ViewFindMode@1@@Z ; OTWDriverClass::FindNextViewObject
	mov	DWORD PTR _newObject$[ebp], eax

; 546  : 
; 547  : 				// At the moment, no weapons flying, no mode change
; 548  : 				if ( newObject == NULL )

	cmp	DWORD PTR _newObject$[ebp], 0
	jne	SHORT $LN56@SetOTWDisp

; 549  : 					return;

	jmp	$LN68@SetOTWDisp
$LN56@SetOTWDisp:

; 550  : 
; 551  : 				// set graphics focus to the object
; 552  : 				SetGraphicsOwnship( newObject );

	mov	ecx, DWORD PTR _newObject$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGraphicsOwnship@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetGraphicsOwnship

; 553  : 
; 554  : 				break;

	jmp	$LN63@SetOTWDisp
$LN55@SetOTWDisp:

; 555  : 
; 556  : 			case ModeAirEnemy:
; 557  : 
; 558  : 				// try and find a flying weapon for the current otwPlatform
; 559  : 				newObject = FindNextViewObject( SimDriver.GetPlayerAircraft(), otwPlatform.get(), NEXT_AIR_ENEMY  );

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	push	eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindNextViewObject@OTWDriverClass@@QAEPAVSimBaseClass@@PAVFalconEntity@@PAV2@W4ViewFindMode@1@@Z ; OTWDriverClass::FindNextViewObject
	mov	DWORD PTR _newObject$[ebp], eax

; 560  : 
; 561  : 				// At the moment, no weapons flying, no mode change
; 562  : 				if ( newObject == NULL )

	cmp	DWORD PTR _newObject$[ebp], 0
	jne	SHORT $LN54@SetOTWDisp

; 563  : 					return;

	jmp	$LN68@SetOTWDisp
$LN54@SetOTWDisp:

; 564  : 
; 565  : 				// set graphics focus to the object
; 566  : 				SetGraphicsOwnship( newObject );

	mov	edx, DWORD PTR _newObject$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGraphicsOwnship@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetGraphicsOwnship

; 567  : 
; 568  : 				break;

	jmp	$LN63@SetOTWDisp
$LN53@SetOTWDisp:

; 569  : 
; 570  : 			case ModeGroundFriendly:
; 571  : 
; 572  : 				// try and find a flying weapon for the current otwPlatform
; 573  : 				newObject = FindNextViewObject( SimDriver.GetPlayerAircraft(), otwPlatform.get(), NEXT_GROUND_FRIEND  );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	push	eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindNextViewObject@OTWDriverClass@@QAEPAVSimBaseClass@@PAVFalconEntity@@PAV2@W4ViewFindMode@1@@Z ; OTWDriverClass::FindNextViewObject
	mov	DWORD PTR _newObject$[ebp], eax

; 574  : 
; 575  : 				// At the moment, no weapons flying, no mode change
; 576  : 				if ( newObject == NULL )

	cmp	DWORD PTR _newObject$[ebp], 0
	jne	SHORT $LN52@SetOTWDisp

; 577  : 					return;

	jmp	$LN68@SetOTWDisp
$LN52@SetOTWDisp:

; 578  : 
; 579  : 				// set graphics focus to the object
; 580  : 				SetGraphicsOwnship( newObject );

	mov	eax, DWORD PTR _newObject$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGraphicsOwnship@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetGraphicsOwnship

; 581  : 
; 582  : 				break;

	jmp	$LN63@SetOTWDisp
$LN51@SetOTWDisp:

; 583  : 
; 584  : 			case ModeGroundEnemy:
; 585  : 
; 586  : 				// try and find a flying weapon for the current otwPlatform
; 587  : 				newObject = FindNextViewObject( SimDriver.GetPlayerAircraft(), otwPlatform.get(), NEXT_GROUND_ENEMY  );

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	push	eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindNextViewObject@OTWDriverClass@@QAEPAVSimBaseClass@@PAVFalconEntity@@PAV2@W4ViewFindMode@1@@Z ; OTWDriverClass::FindNextViewObject
	mov	DWORD PTR _newObject$[ebp], eax

; 588  : 
; 589  : 				// At the moment, no weapons flying, no mode change
; 590  : 				if ( newObject == NULL )

	cmp	DWORD PTR _newObject$[ebp], 0
	jne	SHORT $LN50@SetOTWDisp

; 591  : 					return;

	jmp	$LN68@SetOTWDisp
$LN50@SetOTWDisp:

; 592  : 
; 593  : 				// set graphics focus to the object
; 594  : 				SetGraphicsOwnship( newObject );

	mov	ecx, DWORD PTR _newObject$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGraphicsOwnship@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetGraphicsOwnship

; 595  : 
; 596  : 				break;

	jmp	$LN63@SetOTWDisp
$LN49@SetOTWDisp:

; 597  : 
; 598  : 			// edg note: this is now actually self to any enemny
; 599  : 			case ModeTarget:
; 600  : 
; 601  : 				if ( !SimDriver.GetPlayerAircraft() || otwTrackPlatform.get() == NULL )

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN47@SetOTWDisp
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32332				; 00007e4cH
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	test	eax, eax
	jne	SHORT $LN48@SetOTWDisp
$LN47@SetOTWDisp:

; 602  : 					return;

	jmp	$LN68@SetOTWDisp
$LN48@SetOTWDisp:

; 603  : 
; 604  : 				// try and find a flying weapon for the current otwPlatform
; 605  : 				newObject = FindNextViewObject( SimDriver.GetPlayerAircraft(), otwTrackPlatform.get(), NEXT_ENEMY  ); // 2002-02-16 MODIFIED BY S.G. Uses the new NEXT_ENEMY mode instead of NEXT_GROUND_ENEMY

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32332				; 00007e4cH
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	push	eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindNextViewObject@OTWDriverClass@@QAEPAVSimBaseClass@@PAVFalconEntity@@PAV2@W4ViewFindMode@1@@Z ; OTWDriverClass::FindNextViewObject
	mov	DWORD PTR _newObject$[ebp], eax

; 606  : 
; 607  : 				// At the moment, no bject, no mode change
; 608  : 				if ( newObject == NULL )

	cmp	DWORD PTR _newObject$[ebp], 0
	jne	SHORT $LN46@SetOTWDisp

; 609  : 					return;

	jmp	$LN68@SetOTWDisp
$LN46@SetOTWDisp:

; 610  : 
; 611  : 				// set graphics focus to the object
; 612  : 				SetGraphicsOwnship( SimDriver.GetPlayerAircraft() );

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGraphicsOwnship@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetGraphicsOwnship

; 613  : 				SetTrackPlatform( newObject );

	mov	edx, DWORD PTR _newObject$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPlatform@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetTrackPlatform

; 614  : 
; 615  : 				// we simply swap track with otw platform
; 616  : 				/*
; 617  : 
; 618  : 				// ownship is always the focus
; 619  : 				SetGraphicsOwnship( SimDriver.GetPlayerAircraft() );
; 620  : 
; 621  : 				// use the enhanced padlock priority to cycle thru appro-
; 622  : 				// priate objects
; 623  : 				Padlock_FindEnhancedPriority( TRUE );
; 624  : 
; 625  : 				// if we got a candidate we use that
; 626  : 				if ( mpPadlockCandidate )
; 627  : 				{
; 628  : 					if ( mpPadlockPriorityObject &&
; 629  : 						 mpPadlockPriorityObject != mpPadlockCandidate )
; 630  : 					{
; 631  : 						VuDeReferenceEntity(mpPadlockPriorityObject);
; 632  : 						mpPadlockPriorityObject = (SimBaseClass*) mpPadlockCandidate;
; 633  : 						VuReferenceEntity(mpPadlockPriorityObject);
; 634  : 					}
; 635  : 					else if ( !mpPadlockPriorityObject )
; 636  : 					{
; 637  : 						mpPadlockPriorityObject = (SimBaseClass*) mpPadlockCandidate;
; 638  : 						VuReferenceEntity(mpPadlockPriorityObject);
; 639  : 					}
; 640  : 					mpPadlockCandidate = NULL;
; 641  : 				}
; 642  : 
; 643  : 				if ( mpPadlockPriorityObject )
; 644  : 				{
; 645  : 					SetTrackPlatform( mpPadlockPriorityObject );
; 646  : 				}
; 647  : 				if ( tgtStep == 0 )
; 648  : 				{
; 649  : 					newObject = otwTrackPlatform;
; 650  : 
; 651  : 					SetTrackPlatform( otwPlatform );
; 652  : 					SetGraphicsOwnship( newObject );
; 653  : 
; 654  : 					chaseRange *= 2.5f;
; 655  : 				}
; 656  : 				else
; 657  : 				{
; 658  : 					newObject = FindNextViewObject( otwPlatform, otwTrackPlatform, NEXT_AIR_ENEMY  );
; 659  : 					if ( newObject )
; 660  : 					{
; 661  : 						SetTrackPlatform( newObject );
; 662  : 						chaseRange *= 2.5f;
; 663  : 					}
; 664  : 				}
; 665  : 				*/
; 666  : 
; 667  : 				
; 668  : 				/*
; 669  : 				// get the target (if any) of the current platform
; 670  : 				targetPtr = (( SimMoverClass * )otwPlatform)->targetPtr;
; 671  : 
; 672  : 				// any target?
; 673  : 				if ( targetPtr == NULL || targetPtr->BaseData() == NULL || !targetPtr->BaseData()->IsSim())
; 674  : 					return;
; 675  : 
; 676  : 				// set graphics focus to the target
; 677  : 				SetGraphicsOwnship( (SimBaseClass*)targetPtr->BaseData() );
; 678  : 				*/
; 679  : 
; 680  : 				break;

	jmp	$LN63@SetOTWDisp
$LN45@SetOTWDisp:

; 681  : 
; 682  : 			case ModeTargetToSelf:
; 683  : 
; 684  : 				if ( !SimDriver.GetPlayerAircraft() )

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	jne	SHORT $LN44@SetOTWDisp

; 685  : 					return;

	jmp	$LN68@SetOTWDisp
$LN44@SetOTWDisp:

; 686  : 
; 687  : 				// try and find a flying weapon for the current otwPlatform
; 688  : 				newObject = FindNextViewObject( SimDriver.GetPlayerAircraft(), otwPlatform.get(), NEXT_ENEMY  ); // 2002-02-16 MODIFIED BY S.G. Uses the new NEXT_ENEMY mode instead of NEXT_GROUND_ENEMY

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	push	eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindNextViewObject@OTWDriverClass@@QAEPAVSimBaseClass@@PAVFalconEntity@@PAV2@W4ViewFindMode@1@@Z ; OTWDriverClass::FindNextViewObject
	mov	DWORD PTR _newObject$[ebp], eax

; 689  : 
; 690  : 				// At the moment, no bject, no mode change
; 691  : 				if ( newObject == NULL )

	cmp	DWORD PTR _newObject$[ebp], 0
	jne	SHORT $LN43@SetOTWDisp

; 692  : 					return;

	jmp	$LN68@SetOTWDisp
$LN43@SetOTWDisp:

; 693  : 
; 694  : 				// set graphics focus to the object
; 695  : 				SetGraphicsOwnship( newObject );

	mov	eax, DWORD PTR _newObject$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGraphicsOwnship@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetGraphicsOwnship

; 696  : 				SetTrackPlatform( SimDriver.GetPlayerAircraft() );

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPlatform@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetTrackPlatform

; 697  : 
; 698  : 				/*
; 699  : 				** old stuff based on padlock
; 700  : 
; 701  : 				// we need to have the player be otwPlatform for
; 702  : 				// the Padlock_FindEnhancedPriority
; 703  : 				SetGraphicsOwnship( SimDriver.GetPlayerAircraft() );
; 704  : 
; 705  : 				// use the enhanced padlock priority to cycle thru appro-
; 706  : 				// priate objects
; 707  : 				Padlock_FindEnhancedPriority( TRUE );
; 708  : 
; 709  : 				// if we got a candidate we use that
; 710  : 				if ( mpPadlockCandidate && mpPadlockCandidate->IsSim() )
; 711  : 				{
; 712  : 					if ( mpPadlockPriorityObject &&
; 713  : 						 mpPadlockPriorityObject != mpPadlockCandidate )
; 714  : 					{
; 715  : 						VuDeReferenceEntity(mpPadlockPriorityObject);
; 716  : 						mpPadlockPriorityObject = (SimBaseClass*) mpPadlockCandidate;
; 717  : 						VuReferenceEntity(mpPadlockPriorityObject);
; 718  : 					}
; 719  : 					else if ( !mpPadlockPriorityObject )
; 720  : 					{
; 721  : 						mpPadlockPriorityObject = (SimBaseClass*) mpPadlockCandidate;
; 722  : 						VuReferenceEntity(mpPadlockPriorityObject);
; 723  : 					}
; 724  : 					mpPadlockCandidate = NULL;
; 725  : 				}
; 726  : 
; 727  : 				if ( mpPadlockPriorityObject && mpPadlockPriorityObject->IsSim() )
; 728  : 				{
; 729  : 					SetGraphicsOwnship( mpPadlockPriorityObject );
; 730  : 					SetTrackPlatform( SimDriver.GetPlayerAircraft() );
; 731  : 				}
; 732  : 				*/
; 733  : 
; 734  : 				break;

	jmp	SHORT $LN63@SetOTWDisp
$LN42@SetOTWDisp:

; 735  : 
; 736  : 			case ModeIncoming:
; 737  : 
; 738  : 				if ( !otwTrackPlatform )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32332				; 00007e4cH
	call	??7?$VuBin@VSimBaseClass@@@@QBE_NXZ	; VuBin<SimBaseClass>::operator!
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN41@SetOTWDisp

; 739  : 					return;

	jmp	$LN68@SetOTWDisp
$LN41@SetOTWDisp:

; 740  : 
; 741  : 				// try and find a flying weapon for the current otwPlatform
; 742  : 				newObject = FindNextViewObject( otwTrackPlatform.get(), otwPlatform.get(), NEXT_INCOMING  );

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32332				; 00007e4cH
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindNextViewObject@OTWDriverClass@@QAEPAVSimBaseClass@@PAVFalconEntity@@PAV2@W4ViewFindMode@1@@Z ; OTWDriverClass::FindNextViewObject
	mov	DWORD PTR _newObject$[ebp], eax

; 743  : 
; 744  : 				// At the moment, no weapons flying, no mode change
; 745  : 				if ( newObject == NULL )

	cmp	DWORD PTR _newObject$[ebp], 0
	jne	SHORT $LN40@SetOTWDisp

; 746  : 					return;

	jmp	$LN68@SetOTWDisp
$LN40@SetOTWDisp:

; 747  : 
; 748  : 				// set graphics focus to the object
; 749  : 				SetGraphicsOwnship( newObject );

	mov	edx, DWORD PTR _newObject$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGraphicsOwnship@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetGraphicsOwnship
$LN39@SetOTWDisp:
$LN63@SetOTWDisp:

; 750  : 
; 751  : 				break;
; 752  : 
; 753  : 			default:
; 754  : 				break;
; 755  : 		}
; 756  : 
; 757  : 		return;

	jmp	$LN68@SetOTWDisp

; 758  : 	}
; 759  : 	else

	jmp	$LN38@SetOTWDisp
$LN65@SetOTWDisp:

; 760  : 	{
; 761  : 		// we've got a new mode, some must be checked prior to switching
; 762  : 		switch( mode )

	mov	eax, DWORD PTR _mode$[ebp]
	mov	DWORD PTR tv310[ebp], eax
	mov	ecx, DWORD PTR tv310[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv310[ebp], ecx
	cmp	DWORD PTR tv310[ebp], 17		; 00000011H
	ja	$LN1@SetOTWDisp
	mov	edx, DWORD PTR tv310[ebp]
	jmp	DWORD PTR $LN71@SetOTWDisp[edx*4]
$LN35@SetOTWDisp:

; 763  : 		{
; 764  : 			case ModeFlyby:
; 765  : 				if ( otwPlatform )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??B?$VuBin@VSimBaseClass@@@@QBE_NXZ	; VuBin<SimBaseClass>::operator bool
	movzx	eax, al
	test	eax, eax
	je	$LN34@SetOTWDisp

; 766  : 				{
; 767  : 					   endFlightPoint.x = otwPlatform->XPos() + otwPlatform->dmx[0][0] * 10.0f + otwPlatform->XDelta() * 2.0f ;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv753[ebp]
	movss	xmm0, DWORD PTR tv753[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	movss	DWORD PTR tv919[ebp], xmm0
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR __real@41200000
	movss	xmm1, DWORD PTR tv919[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	movss	DWORD PTR tv921[ebp], xmm1
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv764[ebp]
	movss	xmm0, DWORD PTR tv764[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv921[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+33516], xmm1

; 768  : 					   endFlightPoint.y = otwPlatform->YPos() + otwPlatform->dmx[0][1] * 10.0f + otwPlatform->YDelta() * 2.0f ;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv771[ebp]
	movss	xmm0, DWORD PTR tv771[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	movss	DWORD PTR tv923[ebp], xmm0
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	lea	eax, DWORD PTR [eax+edx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR __real@41200000
	movss	xmm1, DWORD PTR tv923[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	movss	DWORD PTR tv925[ebp], xmm1
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv782[ebp]
	movss	xmm0, DWORD PTR tv782[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv925[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+33520], xmm1

; 769  : 					   endFlightPoint.z = otwPlatform->ZPos() + otwPlatform->dmx[0][2] * 10.0f + otwPlatform->ZDelta() * 2.0f ;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv789[ebp]
	movss	xmm0, DWORD PTR tv789[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	movss	DWORD PTR tv927[ebp], xmm0
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR __real@41200000
	movss	xmm1, DWORD PTR tv927[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	movss	DWORD PTR tv929[ebp], xmm1
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv800[ebp]
	movss	xmm0, DWORD PTR tv800[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv929[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+33524], xmm1

; 770  : 					   endFlightPoint.z -= 20.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+33524]
	subss	xmm0, DWORD PTR __real@41a00000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+33524], xmm0

; 771  : 					   endFlightVec.x = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+33528], xmm0

; 772  : 					   endFlightVec.y = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+33532], xmm0

; 773  : 					   endFlightVec.z = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+33536], xmm0

; 774  : 				}
; 775  : 				else

	jmp	$LN33@SetOTWDisp
$LN34@SetOTWDisp:

; 776  : 				{
; 777  : 					  // not otwplatform, use last focus point with some randomness...
; 778  : 					  float groundZ;
; 779  : 				   
; 780  : 					  endFlightPoint = focusPoint;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 33428				; 00008294H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 33516				; 000082ecH
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx

; 781  : 					  endFlightPoint.z += 400.0f * PRANDFloat();

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv826[ebp]
	movss	xmm0, DWORD PTR tv826[ebp]
	mulss	xmm0, DWORD PTR __real@43c80000
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+33524]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+33524], xmm0

; 782  : 					  endFlightPoint.z += 400.0f * PRANDFloat();

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv834[ebp]
	movss	xmm0, DWORD PTR tv834[ebp]
	mulss	xmm0, DWORD PTR __real@43c80000
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+33524]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+33524], xmm0

; 783  : 					  endFlightPoint.z -= 100.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+33524]
	subss	xmm0, DWORD PTR __real@42c80000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+33524], xmm0

; 784  : 				  
; 785  : 					  groundZ = GetGroundLevel( endFlightPoint.x, endFlightPoint.y );

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+33520]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+33516]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	fstp	DWORD PTR _groundZ$2[ebp]

; 786  : 					  if ( endFlightPoint.z + 50.0f > groundZ )

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+33524]
	addss	xmm0, DWORD PTR __real@42480000
	comiss	xmm0, DWORD PTR _groundZ$2[ebp]
	jbe	SHORT $LN32@SetOTWDisp

; 787  : 						   endFlightPoint.z = groundZ - 50.0f;

	movss	xmm0, DWORD PTR _groundZ$2[ebp]
	subss	xmm0, DWORD PTR __real@42480000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+33524], xmm0
$LN32@SetOTWDisp:

; 788  : 					   endFlightVec.x = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+33528], xmm0

; 789  : 					   endFlightVec.y = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+33532], xmm0

; 790  : 					   endFlightVec.z = -1.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [edx+33536], xmm0
$LN33@SetOTWDisp:

; 791  : 				  }
; 792  : 				  break;

	jmp	$LN36@SetOTWDisp
$LN31@SetOTWDisp:

; 793  : 			case ModeWeapon:
; 794  : 				// try and find a flying weapon for the current otwPlatform
; 795  : 				newObject = FindNextViewObject( otwPlatform.get(), NULL, NEXT_WEAPON );

	push	6
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindNextViewObject@OTWDriverClass@@QAEPAVSimBaseClass@@PAVFalconEntity@@PAV2@W4ViewFindMode@1@@Z ; OTWDriverClass::FindNextViewObject
	mov	DWORD PTR _newObject$[ebp], eax

; 796  : 
; 797  : 				// At the moment, no weapons flying, no mode change
; 798  : 				if ( newObject == NULL )

	cmp	DWORD PTR _newObject$[ebp], 0
	jne	SHORT $LN30@SetOTWDisp

; 799  : 					return;

	jmp	$LN68@SetOTWDisp
$LN30@SetOTWDisp:

; 800  : 
; 801  : 				// set graphics focus to the weapon
; 802  : 				SetGraphicsOwnship( newObject );

	mov	eax, DWORD PTR _newObject$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGraphicsOwnship@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetGraphicsOwnship

; 803  : 
; 804  : 				break;

	jmp	$LN36@SetOTWDisp
$LN29@SetOTWDisp:

; 805  : 
; 806  : 			case ModeTargetToWeapon:
; 807  : 				// try and find a flying weapon for the current otwPlatform
; 808  : 				newObject = FindNextViewObject( otwPlatform.get(), NULL, NEXT_WEAPON );

	push	6
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindNextViewObject@OTWDriverClass@@QAEPAVSimBaseClass@@PAVFalconEntity@@PAV2@W4ViewFindMode@1@@Z ; OTWDriverClass::FindNextViewObject
	mov	DWORD PTR _newObject$[ebp], eax

; 809  : 
; 810  : 				// At the moment, no weapons flying, no mode change
; 811  : 				if ( newObject == NULL || otwTrackPlatform.get() == NULL )

	cmp	DWORD PTR _newObject$[ebp], 0
	je	SHORT $LN27@SetOTWDisp
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32332				; 00007e4cH
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	test	eax, eax
	jne	SHORT $LN28@SetOTWDisp
$LN27@SetOTWDisp:

; 812  : 					return;

	jmp	$LN68@SetOTWDisp
$LN28@SetOTWDisp:

; 813  : 
; 814  : 				// set graphics focus to the target, tracking to weapon
; 815  : 				if ( otwTrackPlatform->IsSim() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32332				; 00007e4cH
	call	??C?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::operator->
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN26@SetOTWDisp

; 816  : 				{
; 817  : 					SetGraphicsOwnship( otwTrackPlatform.get() );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32332				; 00007e4cH
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGraphicsOwnship@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetGraphicsOwnship

; 818  : 					SetTrackPlatform( newObject );

	mov	ecx, DWORD PTR _newObject$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPlatform@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetTrackPlatform

; 819  : 				}
; 820  : 				else

	jmp	SHORT $LN25@SetOTWDisp
$LN26@SetOTWDisp:

; 821  : 				{
; 822  : 					SetGraphicsOwnship( newObject );

	mov	edx, DWORD PTR _newObject$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGraphicsOwnship@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetGraphicsOwnship
$LN25@SetOTWDisp:

; 823  : 				}
; 824  : 
; 825  : 				break;

	jmp	$LN36@SetOTWDisp
$LN24@SetOTWDisp:

; 826  : 
; 827  : 			case ModeAirFriendly:
; 828  : 
; 829  : 				// try and find a flying weapon for the current otwPlatform
; 830  : 				newObject = FindNextViewObject( SimDriver.GetPlayerAircraft(), NULL, NEXT_AIR_FRIEND  );

	push	0
	push	0
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindNextViewObject@OTWDriverClass@@QAEPAVSimBaseClass@@PAVFalconEntity@@PAV2@W4ViewFindMode@1@@Z ; OTWDriverClass::FindNextViewObject
	mov	DWORD PTR _newObject$[ebp], eax

; 831  : 
; 832  : 				// At the moment, no weapons flying, no mode change
; 833  : 				if ( newObject == NULL )

	cmp	DWORD PTR _newObject$[ebp], 0
	jne	SHORT $LN23@SetOTWDisp

; 834  : 					return;

	jmp	$LN68@SetOTWDisp
$LN23@SetOTWDisp:

; 835  : 
; 836  : 				// set graphics focus to the object
; 837  : 				SetGraphicsOwnship( newObject );

	mov	eax, DWORD PTR _newObject$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGraphicsOwnship@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetGraphicsOwnship

; 838  : 
; 839  : 				break;

	jmp	$LN36@SetOTWDisp
$LN22@SetOTWDisp:

; 840  : 
; 841  : 			case ModeAirEnemy:
; 842  : 
; 843  : 				// try and find a flying weapon for the current otwPlatform
; 844  : 				newObject = FindNextViewObject( SimDriver.GetPlayerAircraft(), NULL, NEXT_AIR_ENEMY  );

	push	2
	push	0
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindNextViewObject@OTWDriverClass@@QAEPAVSimBaseClass@@PAVFalconEntity@@PAV2@W4ViewFindMode@1@@Z ; OTWDriverClass::FindNextViewObject
	mov	DWORD PTR _newObject$[ebp], eax

; 845  : 
; 846  : 				// At the moment, no weapons flying, no mode change
; 847  : 				if ( newObject == NULL )

	cmp	DWORD PTR _newObject$[ebp], 0
	jne	SHORT $LN21@SetOTWDisp

; 848  : 					return;

	jmp	$LN68@SetOTWDisp
$LN21@SetOTWDisp:

; 849  : 
; 850  : 				// set graphics focus to the object
; 851  : 				SetGraphicsOwnship( newObject );

	mov	ecx, DWORD PTR _newObject$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGraphicsOwnship@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetGraphicsOwnship

; 852  : 
; 853  : 				break;

	jmp	$LN36@SetOTWDisp
$LN20@SetOTWDisp:

; 854  : 
; 855  : 			case ModeGroundFriendly:
; 856  : 
; 857  : 				// try and find a flying weapon for the current otwPlatform
; 858  : 				newObject = FindNextViewObject( SimDriver.GetPlayerAircraft(), NULL, NEXT_GROUND_FRIEND  );

	push	1
	push	0
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindNextViewObject@OTWDriverClass@@QAEPAVSimBaseClass@@PAVFalconEntity@@PAV2@W4ViewFindMode@1@@Z ; OTWDriverClass::FindNextViewObject
	mov	DWORD PTR _newObject$[ebp], eax

; 859  : 
; 860  : 				// At the moment, no weapons flying, no mode change
; 861  : 				if ( newObject == NULL )

	cmp	DWORD PTR _newObject$[ebp], 0
	jne	SHORT $LN19@SetOTWDisp

; 862  : 					return;

	jmp	$LN68@SetOTWDisp
$LN19@SetOTWDisp:

; 863  : 
; 864  : 				// set graphics focus to the object
; 865  : 				SetGraphicsOwnship( newObject );

	mov	edx, DWORD PTR _newObject$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGraphicsOwnship@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetGraphicsOwnship

; 866  : 
; 867  : 				break;

	jmp	$LN36@SetOTWDisp
$LN18@SetOTWDisp:

; 868  : 
; 869  : 			case ModeGroundEnemy:
; 870  : 
; 871  : 				// try and find a flying weapon for the current otwPlatform
; 872  : 				newObject = FindNextViewObject( SimDriver.GetPlayerAircraft(), NULL, NEXT_GROUND_ENEMY  );

	push	3
	push	0
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindNextViewObject@OTWDriverClass@@QAEPAVSimBaseClass@@PAVFalconEntity@@PAV2@W4ViewFindMode@1@@Z ; OTWDriverClass::FindNextViewObject
	mov	DWORD PTR _newObject$[ebp], eax

; 873  : 
; 874  : 				// At the moment, no weapons flying, no mode change
; 875  : 				if ( newObject == NULL )

	cmp	DWORD PTR _newObject$[ebp], 0
	jne	SHORT $LN17@SetOTWDisp

; 876  : 					return;

	jmp	$LN68@SetOTWDisp
$LN17@SetOTWDisp:

; 877  : 
; 878  : 				// set graphics focus to the object
; 879  : 				SetGraphicsOwnship( newObject );

	mov	eax, DWORD PTR _newObject$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGraphicsOwnship@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetGraphicsOwnship

; 880  : 
; 881  : 				break;

	jmp	$LN36@SetOTWDisp
$LN16@SetOTWDisp:

; 882  : 
; 883  : 			case ModeTarget:
; 884  : 
; 885  : 				if ( !SimDriver.GetPlayerAircraft() )

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	jne	SHORT $LN15@SetOTWDisp

; 886  : 					return;

	jmp	$LN68@SetOTWDisp
$LN15@SetOTWDisp:

; 887  : 
; 888  : 				// try and find a flying weapon for the current otwPlatform
; 889  : 				newObject = FindNextViewObject( SimDriver.GetPlayerAircraft(), NULL, NEXT_ENEMY  ); // 2002-02-16 MODIFIED BY S.G. Uses the new NEXT_ENEMY mode instead of NEXT_GROUND_ENEMY

	push	8
	push	0
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindNextViewObject@OTWDriverClass@@QAEPAVSimBaseClass@@PAVFalconEntity@@PAV2@W4ViewFindMode@1@@Z ; OTWDriverClass::FindNextViewObject
	mov	DWORD PTR _newObject$[ebp], eax

; 890  : 
; 891  : 				// At the moment, no bject, no mode change
; 892  : 				if ( newObject == NULL )

	cmp	DWORD PTR _newObject$[ebp], 0
	jne	SHORT $LN14@SetOTWDisp

; 893  : 					return;

	jmp	$LN68@SetOTWDisp
$LN14@SetOTWDisp:

; 894  : 
; 895  : 				// set graphics focus to the object
; 896  : 				SetGraphicsOwnship( SimDriver.GetPlayerAircraft() );

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGraphicsOwnship@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetGraphicsOwnship

; 897  : 				SetTrackPlatform( newObject );

	mov	ecx, DWORD PTR _newObject$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPlatform@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetTrackPlatform

; 898  : 
; 899  : 				/*
; 900  : 				if ( !SimDriver.GetPlayerAircraft() )
; 901  : 					return;
; 902  : 
; 903  : 				// ownship is always the focus
; 904  : 				SetGraphicsOwnship( SimDriver.GetPlayerAircraft() );
; 905  : 
; 906  : 				// if we got a candidate we use that
; 907  : 				if ( mpPadlockCandidate )
; 908  : 				{
; 909  : 					if ( mpPadlockPriorityObject &&
; 910  : 						 mpPadlockPriorityObject != mpPadlockCandidate )
; 911  : 					{
; 912  : 						VuDeReferenceEntity(mpPadlockPriorityObject);
; 913  : 						mpPadlockPriorityObject = (SimBaseClass*) mpPadlockCandidate;
; 914  : 						VuReferenceEntity(mpPadlockPriorityObject);
; 915  : 					}
; 916  : 					else if ( !mpPadlockPriorityObject )
; 917  : 					{
; 918  : 						mpPadlockPriorityObject = (SimBaseClass*) mpPadlockCandidate;
; 919  : 						VuReferenceEntity(mpPadlockPriorityObject);
; 920  : 					}
; 921  : 					mpPadlockCandidate = NULL;
; 922  : 				}
; 923  : 
; 924  : 				if ( mpPadlockPriorityObject )
; 925  : 				{
; 926  : 					SetTrackPlatform( mpPadlockPriorityObject );
; 927  : 					chaseRange *= 2.5f;
; 928  : 				}
; 929  : 				else
; 930  : 				{
; 931  : 
; 932  : 					// use the enhanced padlock priority to cycle thru appro-
; 933  : 					// priate objects
; 934  : 					Padlock_FindEnhancedPriority( TRUE );
; 935  : 
; 936  : 					if ( mpPadlockCandidate )
; 937  : 					{
; 938  : 						if ( mpPadlockPriorityObject &&
; 939  : 							 mpPadlockPriorityObject != mpPadlockCandidate )
; 940  : 						{
; 941  : 							VuDeReferenceEntity(mpPadlockPriorityObject);
; 942  : 							mpPadlockPriorityObject = (SimBaseClass*) mpPadlockCandidate;
; 943  : 							VuReferenceEntity(mpPadlockPriorityObject);
; 944  : 						}
; 945  : 						else if ( !mpPadlockPriorityObject )
; 946  : 						{
; 947  : 							mpPadlockPriorityObject = (SimBaseClass*) mpPadlockCandidate;
; 948  : 							VuReferenceEntity(mpPadlockPriorityObject);
; 949  : 						}
; 950  : 						mpPadlockCandidate = NULL;
; 951  : 					}
; 952  : 	
; 953  : 					if ( mpPadlockPriorityObject )
; 954  : 					{
; 955  : 						SetTrackPlatform( mpPadlockPriorityObject );
; 956  : 						chaseRange *= 2.5f;
; 957  : 					}
; 958  : 	
; 959  : 				}
; 960  : 
; 961  : 				if ( !otwPlatform || otwPlatform->IsSimObjective())
; 962  : 					return;
; 963  : 				
; 964  : 				// get the target (if any) of the current platform
; 965  : 				targetPtr = (( SimMoverClass * )otwPlatform)->targetPtr;
; 966  : 
; 967  : 				// any target?
; 968  : 				if ( targetPtr == NULL || targetPtr->BaseData() == NULL || !targetPtr->BaseData()->IsSim())
; 969  : 				{
; 970  : 					// no target, look for air threat
; 971  : 					newObject = FindNextViewObject( otwPlatform, NULL, NEXT_AIR_ENEMY  );
; 972  : 
; 973  : 					if ( newObject )
; 974  : 					{
; 975  : 						// set graphics focus to the target
; 976  : 						SetGraphicsOwnship( otwPlatform );
; 977  : 	
; 978  : 						// set the track platform to view platform
; 979  : 						SetTrackPlatform( newObject );
; 980  : 						chaseRange *= 2.5f;
; 981  : 					}
; 982  : 				}
; 983  : 				else
; 984  : 				{
; 985  : 					// set graphics focus to the target
; 986  : 					SetGraphicsOwnship( otwPlatform );
; 987  : 
; 988  : 					// set the track platform to view platform
; 989  : 					SetTrackPlatform( (SimBaseClass*)targetPtr->BaseData() );
; 990  : 					chaseRange *= 2.5f;
; 991  : 				}
; 992  : 				*/
; 993  : 
; 994  : 				break;

	jmp	$LN36@SetOTWDisp
$LN13@SetOTWDisp:

; 995  : 
; 996  : 			case ModeTargetToSelf:
; 997  : 
; 998  : 				if ( !SimDriver.GetPlayerAircraft() )

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	jne	SHORT $LN12@SetOTWDisp

; 999  : 					return;

	jmp	$LN68@SetOTWDisp
$LN12@SetOTWDisp:

; 1000 : 
; 1001 : 				// try and find a flying weapon for the current otwPlatform
; 1002 : 				newObject = FindNextViewObject( SimDriver.GetPlayerAircraft(), NULL, NEXT_ENEMY  ); // 2002-02-16 MODIFIED BY S.G. Uses the new NEXT_ENEMY mode instead of NEXT_GROUND_ENEMY

	push	8
	push	0
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindNextViewObject@OTWDriverClass@@QAEPAVSimBaseClass@@PAVFalconEntity@@PAV2@W4ViewFindMode@1@@Z ; OTWDriverClass::FindNextViewObject
	mov	DWORD PTR _newObject$[ebp], eax

; 1003 : 
; 1004 : 				// At the moment, no bject, no mode change
; 1005 : 				if ( newObject == NULL )

	cmp	DWORD PTR _newObject$[ebp], 0
	jne	SHORT $LN11@SetOTWDisp

; 1006 : 					return;

	jmp	$LN68@SetOTWDisp
$LN11@SetOTWDisp:

; 1007 : 
; 1008 : 				// set graphics focus to the object
; 1009 : 				SetGraphicsOwnship( newObject );

	mov	edx, DWORD PTR _newObject$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGraphicsOwnship@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetGraphicsOwnship

; 1010 : 				SetTrackPlatform( SimDriver.GetPlayerAircraft() );

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPlatform@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetTrackPlatform

; 1011 : 
; 1012 : 				/*
; 1013 : 				if ( !SimDriver.GetPlayerAircraft() )
; 1014 : 					return;
; 1015 : 
; 1016 : 
; 1017 : 				// if we got a candidate we use that
; 1018 : 				if ( mpPadlockCandidate && mpPadlockCandidate->IsSim() )
; 1019 : 				{
; 1020 : 					if ( mpPadlockPriorityObject &&
; 1021 : 						 mpPadlockPriorityObject != mpPadlockCandidate )
; 1022 : 					{
; 1023 : 						VuDeReferenceEntity(mpPadlockPriorityObject);
; 1024 : 						mpPadlockPriorityObject = (SimBaseClass*) mpPadlockCandidate;
; 1025 : 						VuReferenceEntity(mpPadlockPriorityObject);
; 1026 : 					}
; 1027 : 					else if ( !mpPadlockPriorityObject )
; 1028 : 					{
; 1029 : 						mpPadlockPriorityObject = (SimBaseClass*) mpPadlockCandidate;
; 1030 : 						VuReferenceEntity(mpPadlockPriorityObject);
; 1031 : 					}
; 1032 : 					mpPadlockCandidate = NULL;
; 1033 : 				}
; 1034 : 
; 1035 : 				if ( mpPadlockPriorityObject && mpPadlockPriorityObject->IsSim() )
; 1036 : 				{
; 1037 : 					SetGraphicsOwnship( mpPadlockPriorityObject );
; 1038 : 					SetTrackPlatform( SimDriver.GetPlayerAircraft() );
; 1039 : 					chaseRange *= 2.5f;
; 1040 : 				}
; 1041 : 				else
; 1042 : 				{
; 1043 : 
; 1044 : 					// use the enhanced padlock priority to cycle thru appro-
; 1045 : 					// priate objects
; 1046 : 
; 1047 : 					// we need to have the player be otwPlatform for
; 1048 : 					// the Padlock_FindEnhancedPriority
; 1049 : 					SetGraphicsOwnship( SimDriver.GetPlayerAircraft() );
; 1050 : 					Padlock_FindEnhancedPriority( TRUE );
; 1051 : 
; 1052 : 					if ( mpPadlockCandidate && mpPadlockCandidate->IsSim() )
; 1053 : 					{
; 1054 : 						if ( mpPadlockPriorityObject &&
; 1055 : 							 mpPadlockPriorityObject != mpPadlockCandidate )
; 1056 : 						{
; 1057 : 							VuDeReferenceEntity(mpPadlockPriorityObject);
; 1058 : 							mpPadlockPriorityObject = (SimBaseClass*) mpPadlockCandidate;
; 1059 : 							VuReferenceEntity(mpPadlockPriorityObject);
; 1060 : 						}
; 1061 : 						else if ( !mpPadlockPriorityObject )
; 1062 : 						{
; 1063 : 							mpPadlockPriorityObject = (SimBaseClass*) mpPadlockCandidate;
; 1064 : 							VuReferenceEntity(mpPadlockPriorityObject);
; 1065 : 						}
; 1066 : 						mpPadlockCandidate = NULL;
; 1067 : 					}
; 1068 : 	
; 1069 : 					if ( mpPadlockPriorityObject && mpPadlockPriorityObject->IsSim() )
; 1070 : 					{
; 1071 : 						SetGraphicsOwnship( mpPadlockPriorityObject );
; 1072 : 						SetTrackPlatform( SimDriver.GetPlayerAircraft() );
; 1073 : 						chaseRange *= 2.5f;
; 1074 : 					}
; 1075 : 					else
; 1076 : 					{
; 1077 : 						return;
; 1078 : 					}
; 1079 : 	
; 1080 : 				}
; 1081 : 				*/
; 1082 : 
; 1083 : 
; 1084 : 				break;

	jmp	SHORT $LN36@SetOTWDisp
$LN10@SetOTWDisp:

; 1085 : 
; 1086 : 			case ModeIncoming:
; 1087 : 
; 1088 : 				// try and find a flying weapon for the current otwPlatform
; 1089 : 				newObject = FindNextViewObject( otwPlatform.get(), NULL, NEXT_INCOMING );

	push	4
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindNextViewObject@OTWDriverClass@@QAEPAVSimBaseClass@@PAVFalconEntity@@PAV2@W4ViewFindMode@1@@Z ; OTWDriverClass::FindNextViewObject
	mov	DWORD PTR _newObject$[ebp], eax

; 1090 : 
; 1091 : 				// At the moment, no weapons flying, no mode change
; 1092 : 				if ( newObject == NULL )

	cmp	DWORD PTR _newObject$[ebp], 0
	jne	SHORT $LN9@SetOTWDisp

; 1093 : 					return;

	jmp	$LN68@SetOTWDisp
$LN9@SetOTWDisp:

; 1094 : 
; 1095 : 				// set the track platform to view platform
; 1096 : 				SetTrackPlatform( otwPlatform.get() );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTrackPlatform@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetTrackPlatform

; 1097 : 
; 1098 : 				// set graphics focus to the object
; 1099 : 				SetGraphicsOwnship( newObject );

	mov	eax, DWORD PTR _newObject$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGraphicsOwnship@OTWDriverClass@@QAEXPAVSimBaseClass@@@Z ; OTWDriverClass::SetGraphicsOwnship

; 1100 : 
; 1101 : 				break;

	jmp	SHORT $LN36@SetOTWDisp
$LN8@SetOTWDisp:

; 1102 : 
; 1103 : 			// these modes require a SimDriver Player Entity
; 1104 : 			case ModeHud:
; 1105 : 			case ModePadlockF3:
; 1106 : 			case ModePadlockEFOV:
; 1107 : 			case Mode2DCockpit:
; 1108 : 			case Mode3DCockpit:
; 1109 : 				if (
; 1110 : 					(ejectCam) || 
; 1111 : 					(!SimDriver.GetPlayerAircraft()) 
; 1112 : 					//||  (FalconLocalSession->GetFlyState() != FLYSTATE_FLYING)
; 1113 : 				){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+32216], 0
	jne	SHORT $LN6@SetOTWDisp
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	jne	SHORT $LN7@SetOTWDisp
$LN6@SetOTWDisp:

; 1114 : 					return;

	jmp	SHORT $LN68@SetOTWDisp
$LN7@SetOTWDisp:

; 1115 : 				}
; 1116 : 
; 1117 : 				switch(mOTWDisplayMode) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32328]
	mov	DWORD PTR tv650[ebp], eax
$LN1@SetOTWDisp:
$LN36@SetOTWDisp:

; 1118 : 					case ModeHud:
; 1119 : 					case ModePadlockF3:
; 1120 : 					case ModePadlockEFOV:
; 1121 : 					case Mode2DCockpit:
; 1122 : 					case Mode3DCockpit:
; 1123 : 					break;
; 1124 : 
; 1125 : 					default:	
; 1126 : 						// going from external to internal view				
; 1127 : 						//narrowFOV = FALSE;
; 1128 : 						//Wombat778 9-29-2003 Removed to allow FOV to be persistent
; 1129 : 						//SetFOV( 60.0F * DTR );
; 1130 : 						//Wombat778 9-29-2003
; 1131 : 					break;
; 1132 : 				}
; 1133 : 
; 1134 : 				break;
; 1135 : 
; 1136 : 			default:
; 1137 : 				break;
; 1138 : 		}
; 1139 : 
; 1140 : 		CleanupDisplayMode(mOTWDisplayMode);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32328]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanupDisplayMode@OTWDriverClass@@QAEXW4OTWDisplayMode@1@@Z ; OTWDriverClass::CleanupDisplayMode

; 1141 : 		OTWDisplayMode lastmode = mOTWDisplayMode;		//Wombat778 11-17-04

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32328]
	mov	DWORD PTR _lastmode$1[ebp], ecx

; 1142 : 		mOTWDisplayMode = mode;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [edx+32328], eax

; 1143 : 		SelectDisplayMode(mode,lastmode);				//Wombat778 11-17-04 added lastmode

	mov	ecx, DWORD PTR _lastmode$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectDisplayMode@OTWDriverClass@@QAEXW4OTWDisplayMode@1@0@Z ; OTWDriverClass::SelectDisplayMode
$LN38@SetOTWDisp:

; 1144 : 	}
; 1145 : 
; 1146 : 	CameraChange = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+32058], 1
$LN68@SetOTWDisp:

; 1147 : }

	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN70@SetOTWDisp:
	DD	$LN57@SetOTWDisp
	DD	$LN53@SetOTWDisp
	DD	$LN55@SetOTWDisp
	DD	$LN51@SetOTWDisp
	DD	$LN49@SetOTWDisp
	DD	$LN62@SetOTWDisp
	DD	$LN39@SetOTWDisp
	DD	$LN42@SetOTWDisp
	DD	$LN39@SetOTWDisp
	DD	$LN45@SetOTWDisp
	DD	$LN60@SetOTWDisp
$LN71@SetOTWDisp:
	DD	$LN8@SetOTWDisp
	DD	$LN8@SetOTWDisp
	DD	$LN8@SetOTWDisp
	DD	$LN8@SetOTWDisp
	DD	$LN8@SetOTWDisp
	DD	$LN1@SetOTWDisp
	DD	$LN1@SetOTWDisp
	DD	$LN24@SetOTWDisp
	DD	$LN20@SetOTWDisp
	DD	$LN22@SetOTWDisp
	DD	$LN18@SetOTWDisp
	DD	$LN16@SetOTWDisp
	DD	$LN31@SetOTWDisp
	DD	$LN1@SetOTWDisp
	DD	$LN10@SetOTWDisp
	DD	$LN35@SetOTWDisp
	DD	$LN13@SetOTWDisp
	DD	$LN29@SetOTWDisp
?SetOTWDisplayMode@OTWDriverClass@@QAEXW4OTWDisplayMode@1@@Z ENDP ; OTWDriverClass::SetOTWDisplayMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ PROC ; SimBaseClass::GetCampaignObject, COMDAT
; _this$ = ecx

; 212  : 	CampBaseClass *GetCampaignObject (void) { return campaignObject.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ENDP ; SimBaseClass::GetCampaignObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?Status@SimBaseClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Status@SimBaseClass@@QBEHXZ PROC			; SimBaseClass::Status, COMDAT
; _this$ = ecx

; 192  : 	int Status() const { return specialData.status; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+176]
	mov	esp, ebp
	pop	ebp
	ret	0
?Status@SimBaseClass@@QBEHXZ ENDP			; SimBaseClass::Status
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z PROC		; SimBaseClass::IsSetCampaignFlag, COMDAT
; _this$ = ecx

; 182  : 	int  IsSetCampaignFlag(int flag) const { return ((campaignFlags & flag) ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsSetCampa
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSetCampa
$LN3@IsSetCampa:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSetCampa:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetCampaignFlag@SimBaseClass@@QBEHH@Z ENDP		; SimBaseClass::IsSetCampaignFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsSetFlag@SimBaseClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFlag@SimBaseClass@@QBEHH@Z PROC			; SimBaseClass::IsSetFlag, COMDAT
; _this$ = ecx

; 178  : 	int  IsSetFlag(int flag) const { return ((specialData.flags & flag) ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsSetFlag
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSetFlag
$LN3@IsSetFlag:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSetFlag:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFlag@SimBaseClass@@QBEHH@Z ENDP			; SimBaseClass::IsSetFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ PROC ; VuBin<CampBaseClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ENDP ; VuBin<CampBaseClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?ClearGenFlag@PlayerOptionsClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?ClearGenFlag@PlayerOptionsClass@@QAEXH@Z PROC		; PlayerOptionsClass::ClearGenFlag, COMDAT
; _this$ = ecx

; 197  : 	void ClearGenFlag (int flag)							{GeneralFlags &= ~flag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _flag$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+84], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearGenFlag@PlayerOptionsClass@@QAEXH@Z ENDP		; PlayerOptionsClass::ClearGenFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?SetGenFlag@PlayerOptionsClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetGenFlag@PlayerOptionsClass@@QAEXH@Z PROC		; PlayerOptionsClass::SetGenFlag, COMDAT
; _this$ = ecx

; 196  : 	void SetGenFlag (int flag)								{GeneralFlags |= flag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	or	ecx, DWORD PTR _flag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+84], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetGenFlag@PlayerOptionsClass@@QAEXH@Z ENDP		; PlayerOptionsClass::SetGenFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?ClearDispFlag@PlayerOptionsClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?ClearDispFlag@PlayerOptionsClass@@QAEXH@Z PROC		; PlayerOptionsClass::ClearDispFlag, COMDAT
; _this$ = ecx

; 191  : 	void ClearDispFlag (int flag)							{DispFlags &= ~flag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _flag$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearDispFlag@PlayerOptionsClass@@QAEXH@Z ENDP		; PlayerOptionsClass::ClearDispFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?SetDispFlag@PlayerOptionsClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetDispFlag@PlayerOptionsClass@@QAEXH@Z PROC		; PlayerOptionsClass::SetDispFlag, COMDAT
; _this$ = ecx

; 190  : 	void SetDispFlag (int flag)								{DispFlags |= flag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, DWORD PTR _flag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetDispFlag@PlayerOptionsClass@@QAEXH@Z ENDP		; PlayerOptionsClass::SetDispFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?ClearSimFlag@PlayerOptionsClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?ClearSimFlag@PlayerOptionsClass@@QAEXH@Z PROC		; PlayerOptionsClass::ClearSimFlag, COMDAT
; _this$ = ecx

; 188  : 	void ClearSimFlag (int flag)							{SimFlags &= ~flag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _flag$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+52], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearSimFlag@PlayerOptionsClass@@QAEXH@Z ENDP		; PlayerOptionsClass::ClearSimFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?SetSimFlag@PlayerOptionsClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetSimFlag@PlayerOptionsClass@@QAEXH@Z PROC		; PlayerOptionsClass::SetSimFlag, COMDAT
; _this$ = ecx

; 187  : 	void SetSimFlag (int flag)								{SimFlags |= flag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	or	ecx, DWORD PTR _flag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+52], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSimFlag@PlayerOptionsClass@@QAEXH@Z ENDP		; PlayerOptionsClass::SetSimFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?GetMouseLook@PlayerOptionsClass@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMouseLook@PlayerOptionsClass@@QBE_NXZ PROC		; PlayerOptionsClass::GetMouseLook, COMDAT
; _this$ = ecx

; 182  : 	bool GetMouseLook(void) const                           { return enableMouseLook; }		// Retro 28Dec2003

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+208]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMouseLook@PlayerOptionsClass@@QBE_NXZ ENDP		; PlayerOptionsClass::GetMouseLook
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?Get3dTrackIR@PlayerOptionsClass@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Get3dTrackIR@PlayerOptionsClass@@QBE_NXZ PROC		; PlayerOptionsClass::Get3dTrackIR, COMDAT
; _this$ = ecx

; 180  : 	bool Get3dTrackIR(void) const                           { return TrackIR_3d; }			// Retro 27Dec2003

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+206]
	mov	esp, ebp
	pop	ebp
	ret	0
?Get3dTrackIR@PlayerOptionsClass@@QBE_NXZ ENDP		; PlayerOptionsClass::Get3dTrackIR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?WeatherOn@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?WeatherOn@PlayerOptionsClass@@QAEHXZ PROC		; PlayerOptionsClass::WeatherOn, COMDAT
; _this$ = ecx

; 160  : 	int WeatherOn (void)									{ return !(GeneralFlags & GEN_NO_WEATHER); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	and	ecx, 1
	jne	SHORT $LN3@WeatherOn
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@WeatherOn
$LN3@WeatherOn:
	mov	DWORD PTR tv67[ebp], 0
$LN4@WeatherOn:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?WeatherOn@PlayerOptionsClass@@QAEHXZ ENDP		; PlayerOptionsClass::WeatherOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?NameTagsOn@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?NameTagsOn@PlayerOptionsClass@@QAEHXZ PROC		; PlayerOptionsClass::NameTagsOn, COMDAT
; _this$ = ecx

; 155  : 	int NameTagsOn (void)									{ return (SimFlags & SIM_NAMETAGS) && TRUE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	and	ecx, 64					; 00000040H
	je	SHORT $LN3@NameTagsOn
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@NameTagsOn
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@NameTagsOn
$LN3@NameTagsOn:
	mov	DWORD PTR tv68[ebp], 0
$LN4@NameTagsOn:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?NameTagsOn@PlayerOptionsClass@@QAEHXZ ENDP		; PlayerOptionsClass::NameTagsOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?GetPadlockMode@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPadlockMode@PlayerOptionsClass@@QAEHXZ PROC		; PlayerOptionsClass::GetPadlockMode, COMDAT
; _this$ = ecx

; 145  : 	int GetPadlockMode (void)								{ return SimPadlockMode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+76]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPadlockMode@PlayerOptionsClass@@QAEHXZ ENDP		; PlayerOptionsClass::GetPadlockMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?BuildingDeaggLevel@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BuildingDeaggLevel@PlayerOptionsClass@@QAEHXZ PROC	; PlayerOptionsClass::BuildingDeaggLevel, COMDAT
; _this$ = ecx

; 136  : 	int BuildingDeaggLevel (void)							{ return BldDeaggLevel; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	mov	esp, ebp
	pop	ebp
	ret	0
?BuildingDeaggLevel@PlayerOptionsClass@@QAEHXZ ENDP	; PlayerOptionsClass::BuildingDeaggLevel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?FilteringOn@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?FilteringOn@PlayerOptionsClass@@QAEHXZ PROC		; PlayerOptionsClass::FilteringOn, COMDAT
; _this$ = ecx

; 116  : 	int FilteringOn (void)									{ return (DispFlags & DISP_BILINEAR) && TRUE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 16					; 00000010H
	je	SHORT $LN3@FilteringO
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@FilteringO
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@FilteringO
$LN3@FilteringO:
	mov	DWORD PTR tv68[ebp], 0
$LN4@FilteringO:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?FilteringOn@PlayerOptionsClass@@QAEHXZ ENDP		; PlayerOptionsClass::FilteringOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?HazingOn@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?HazingOn@PlayerOptionsClass@@QAEHXZ PROC		; PlayerOptionsClass::HazingOn, COMDAT
; _this$ = ecx

; 115  : 	int HazingOn (void)										{ return (DispFlags & DISP_HAZING) && TRUE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2
	je	SHORT $LN3@HazingOn
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@HazingOn
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@HazingOn
$LN3@HazingOn:
	mov	DWORD PTR tv68[ebp], 0
$LN4@HazingOn:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?HazingOn@PlayerOptionsClass@@QAEHXZ ENDP		; PlayerOptionsClass::HazingOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\rules.h
;	COMDAT ?ObjectMagnification@RulesClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ObjectMagnification@RulesClass@@QAEMXZ PROC		; RulesClass::ObjectMagnification, COMDAT
; _this$ = ecx

; 55   : 		float ObjectMagnification (void)						{ return ObjMagnification; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?ObjectMagnification@RulesClass@@QAEMXZ ENDP		; RulesClass::ObjectMagnification
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?mlSinCos@@YAXPAUmlTrig@@M@Z
_TEXT	SEGMENT
_trig$ = 8						; size = 4
_angle$ = 12						; size = 4
?mlSinCos@@YAXPAUmlTrig@@M@Z PROC			; mlSinCos, COMDAT

; 12   : {

	push	ebp
	mov	ebp, esp

; 13   : #if defined(_MSC_VER)
; 14   : 	__asm 
; 15   : 	{
; 16   : 		__asm	mov     ecx, trig;

	mov	ecx, DWORD PTR _trig$[ebp]

; 17   : 		__asm	fld     dword ptr [angle];

	fld	DWORD PTR _angle$[ebp]

; 18   : 		__asm	fsincos;

	fsincos

; 19   : 		__asm	fstp    dword ptr [ecx]trig.cos;

	fstp	DWORD PTR [ecx+4]

; 20   : 		__asm	fstp    dword ptr [ecx]trig.sin;

	fstp	DWORD PTR [ecx]

; 21   : 	}
; 22   : #else
; 23   : 	trig->sin = (Float32)sin(angle);
; 24   : 	trig->cos = (Float32)cos(angle);
; 25   : #endif
; 26   : }

	pop	ebp
	ret	0
?mlSinCos@@YAXPAUmlTrig@@M@Z ENDP			; mlSinCos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSim@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsSim@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsSim, COMDAT
; _this$ = ecx

; 103  : 		{return (falconType & FalconSimEntity) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	and	ecx, 2
	je	SHORT $LN3@IsSim
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSim
$LN3@IsSim:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSim:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSim@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Roll@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Roll@VuEntity@@QBEMXZ PROC				; VuEntity::Roll, COMDAT
; _this$ = ecx

; 166  : 	SM_SCALAR Roll() const { return orient_.roll_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+68]
	mov	esp, ebp
	pop	ebp
	ret	0
?Roll@VuEntity@@QBEMXZ ENDP				; VuEntity::Roll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Pitch@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Pitch@VuEntity@@QBEMXZ PROC				; VuEntity::Pitch, COMDAT
; _this$ = ecx

; 165  : 	SM_SCALAR Pitch() const { return orient_.pitch_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+64]
	mov	esp, ebp
	pop	ebp
	ret	0
?Pitch@VuEntity@@QBEMXZ ENDP				; VuEntity::Pitch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Yaw@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Yaw@VuEntity@@QBEMXZ PROC				; VuEntity::Yaw, COMDAT
; _this$ = ecx

; 164  : 	SM_SCALAR Yaw() const { return orient_.yaw_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?Yaw@VuEntity@@QBEMXZ ENDP				; VuEntity::Yaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZDelta@VuEntity@@QBEMXZ PROC				; VuEntity::ZDelta, COMDAT
; _this$ = ecx

; 163  : 	SM_SCALAR ZDelta() const { return pos_.dz_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::ZDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YDelta@VuEntity@@QBEMXZ PROC				; VuEntity::YDelta, COMDAT
; _this$ = ecx

; 162  : 	SM_SCALAR YDelta() const { return pos_.dy_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?YDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::YDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XDelta@VuEntity@@QBEMXZ PROC				; VuEntity::XDelta, COMDAT
; _this$ = ecx

; 161  : 	SM_SCALAR XDelta() const { return pos_.dx_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?XDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::XDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?Radius@DrawableObject@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Radius@DrawableObject@@QBEMXZ PROC			; DrawableObject::Radius, COMDAT
; _this$ = ecx

; 27   : 	float Radius() const { return radius; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]
	mov	esp, ebp
	pop	ebp
	ret	0
?Radius@DrawableObject@@QBEMXZ ENDP			; DrawableObject::Radius
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\renderow.h
;	COMDAT ?GetGreenMode@RenderOTW@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGreenMode@RenderOTW@@QAE_NXZ PROC			; RenderOTW::GetGreenMode, COMDAT
; _this$ = ecx

; 167  : 	inline bool GetGreenMode() { return GreenMode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+263368]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGreenMode@RenderOTW@@QAE_NXZ ENDP			; RenderOTW::GetGreenMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\renderow.h
;	COMDAT ?SetGreenMode@RenderOTW@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 1
?SetGreenMode@RenderOTW@@QAEX_N@Z PROC			; RenderOTW::SetGreenMode, COMDAT
; _this$ = ecx

; 166  : 	inline void SetGreenMode(bool state) { GreenMode = state; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _state$[ebp]
	mov	BYTE PTR [eax+263368], cl
	mov	esp, ebp
	pop	ebp
	ret	4
?SetGreenMode@RenderOTW@@QAEX_N@Z ENDP			; RenderOTW::SetGreenMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\renderow.h
;	COMDAT ?GetFilteringMode@RenderOTW@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFilteringMode@RenderOTW@@QAEHXZ PROC		; RenderOTW::GetFilteringMode, COMDAT
; _this$ = ecx

; 141  : 	BOOL GetFilteringMode( void )				{ return filtering; }; 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+263104]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFilteringMode@RenderOTW@@QAEHXZ ENDP		; RenderOTW::GetFilteringMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\renderow.h
;	COMDAT ?SetFilteringMode@RenderOTW@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 4
?SetFilteringMode@RenderOTW@@QAEXH@Z PROC		; RenderOTW::SetFilteringMode, COMDAT
; _this$ = ecx

; 140  : 	void SetFilteringMode( BOOL state )			{ filtering = state; SetupStates(); };	

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+263104], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetupStates@RenderOTW@@IAEXXZ		; RenderOTW::SetupStates
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFilteringMode@RenderOTW@@QAEXH@Z ENDP		; RenderOTW::SetFilteringMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\renderow.h
;	COMDAT ?GetRoofMode@RenderOTW@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRoofMode@RenderOTW@@QAEHXZ PROC			; RenderOTW::GetRoofMode, COMDAT
; _this$ = ecx

; 131  : 	BOOL GetRoofMode( void )					{ return skyRoof; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+263100]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRoofMode@RenderOTW@@QAEHXZ ENDP			; RenderOTW::GetRoofMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\renderow.h
;	COMDAT ?GetHazeMode@RenderOTW@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHazeMode@RenderOTW@@QAEHXZ PROC			; RenderOTW::GetHazeMode, COMDAT
; _this$ = ecx

; 123  : 	BOOL GetHazeMode( void )					{ return hazed; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+263096]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHazeMode@RenderOTW@@QAEHXZ ENDP			; RenderOTW::GetHazeMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\renderow.h
;	COMDAT ?SetHazeMode@RenderOTW@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_state$ = 8						; size = 4
?SetHazeMode@RenderOTW@@QAEXH@Z PROC			; RenderOTW::SetHazeMode, COMDAT
; _this$ = ecx

; 122  : 	void SetHazeMode( BOOL state )				{ hazed = state; SetupStates(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+263096], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetupStates@RenderOTW@@IAEXXZ		; RenderOTW::SetupStates
	mov	esp, ebp
	pop	ebp
	ret	4
?SetHazeMode@RenderOTW@@QAEXH@Z ENDP			; RenderOTW::SetHazeMode
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?GetNVGmode@CTimeOfDay@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNVGmode@CTimeOfDay@@QAEHXZ PROC			; CTimeOfDay::GetNVGmode, COMDAT
; _this$ = ecx

; 69   : 	BOOL GetNVGmode()							{ return NVGmode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+348]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNVGmode@CTimeOfDay@@QAEHXZ ENDP			; CTimeOfDay::GetNVGmode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
