; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\FalcSnd\VoiceManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?voiceBufferQueue@@3PAUVM_BUFFLIST@@A		; voiceBufferQueue
PUBLIC	?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A	; voiceChannelQueue
PUBLIC	?VMWakeEventHandle@@3PAXA			; VMWakeEventHandle
PUBLIC	?killThread@@3HA				; killThread
PUBLIC	?hThread@@3PAXA					; hThread
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
_BSS	SEGMENT
?voiceBufferQueue@@3PAUVM_BUFFLIST@@A DD 01H DUP (?)	; voiceBufferQueue
?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A DD 02H DUP (?)	; voiceChannelQueue
?VMWakeEventHandle@@3PAXA DD 01H DUP (?)		; VMWakeEventHandle
?killThread@@3HA DD 01H DUP (?)				; killThread
?hThread@@3PAXA DD 01H DUP (?)				; hThread
_BSS	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0VU_SESSION_ID@@QAE@K@Z			; VU_SESSION_ID::VU_SESSION_ID
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??0VU_ID@@QAE@XZ				; VU_ID::VU_ID
PUBLIC	??8VU_ID@@QBE_NABV0@@Z				; VU_ID::operator==
PUBLIC	??9VU_ID@@QBE_NABV0@@Z				; VU_ID::operator!=
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	??_EFalcVoice@@QAEPAXI@Z			; FalcVoice::`vector deleting destructor'
PUBLIC	??_GLHSP@@QAEPAXI@Z				; LHSP::`scalar deleting destructor'
PUBLIC	??0CONVERSATION@@QAE@XZ				; CONVERSATION::CONVERSATION
PUBLIC	?Index2Data@TlkFile@@AAEJH@Z			; TlkFile::Index2Data
PUBLIC	?GetFragIndex@TlkFile@@AAEJH@Z			; TlkFile::GetFragIndex
PUBLIC	?GetFileLength@TlkFile@@QAEKH@Z			; TlkFile::GetFileLength
PUBLIC	?GetCompressedLength@TlkFile@@QAEKH@Z		; TlkFile::GetCompressedLength
PUBLIC	?GetDataPtr@TlkFile@@QAEPADH@Z			; TlkFile::GetDataPtr
PUBLIC	??0TlkFile@@QAE@XZ				; TlkFile::TlkFile
PUBLIC	??1TlkFile@@QAE@XZ				; TlkFile::~TlkFile
PUBLIC	?VoiceManagementThread@@YGKPAX@Z		; VoiceManagementThread
PUBLIC	??0VoiceManager@@QAE@XZ				; VoiceManager::VoiceManager
PUBLIC	??1VoiceManager@@QAE@XZ				; VoiceManager::~VoiceManager
PUBLIC	?VMBegin@VoiceManager@@QAEHXZ			; VoiceManager::VMBegin
PUBLIC	?CallVoiceThread@VoiceManager@@QAEXXZ		; VoiceManager::CallVoiceThread
PUBLIC	?LoadCompressionData@VoiceManager@@QAEHH@Z	; VoiceManager::LoadCompressionData
PUBLIC	?AddToConversationQueue@VoiceManager@@QAEXPAVCONVERSATION@@@Z ; VoiceManager::AddToConversationQueue
PUBLIC	?VMResetVoices@VoiceManager@@QAEXXZ		; VoiceManager::VMResetVoices
PUBLIC	?VMResetVoice@VoiceManager@@QAEXH@Z		; VoiceManager::VMResetVoice
PUBLIC	?VMCleanup@VoiceManager@@QAEXXZ			; VoiceManager::VMCleanup
PUBLIC	?VMHearVoices@VoiceManager@@QAEXXZ		; VoiceManager::VMHearVoices
PUBLIC	?VMHearChannel@VoiceManager@@QAEXH@Z		; VoiceManager::VMHearChannel
PUBLIC	?VMSilenceVoices@VoiceManager@@QAEXXZ		; VoiceManager::VMSilenceVoices
PUBLIC	?VMSilenceChannel@VoiceManager@@QAEXH@Z		; VoiceManager::VMSilenceChannel
PUBLIC	?VMAddBuffToQueue@VoiceManager@@QAEXHH@Z	; VoiceManager::VMAddBuffToQueue
PUBLIC	?VMConvListInsert@VoiceManager@@QAEPAUVM_CONVLIST@@PAU2@0H@Z ; VoiceManager::VMConvListInsert
PUBLIC	?VMBuffListAppend@VoiceManager@@QAEPAUVM_BUFFLIST@@PAU2@PAUVMBuffQueue@@@Z ; VoiceManager::VMBuffListAppend
PUBLIC	?VMListRemoveVCQ@VoiceManager@@QAEXPAPAUVM_CONVLIST@@PAU2@@Z ; VoiceManager::VMListRemoveVCQ
PUBLIC	?VMListRemoveVMBQ@VoiceManager@@QAEPAUVM_BUFFLIST@@PAU2@@Z ; VoiceManager::VMListRemoveVMBQ
PUBLIC	?VMListPopVMBQ@VoiceManager@@QAEPAUVM_BUFFLIST@@PAU2@@Z ; VoiceManager::VMListPopVMBQ
PUBLIC	?VMDeleteNode@VoiceManager@@QAEXPAUVMBuffQueue@@@Z ; VoiceManager::VMDeleteNode
PUBLIC	?VMListSearchVMBQ@VoiceManager@@QAEPAUVM_BUFFLIST@@PAU2@HH@Z ; VoiceManager::VMListSearchVMBQ
PUBLIC	?ListCheckChannelNum@VoiceManager@@QAEHPAXH@Z	; VoiceManager::ListCheckChannelNum
PUBLIC	?VMListDestroyVCQ@VoiceManager@@QAEPAUVM_CONVLIST@@PAU2@@Z ; VoiceManager::VMListDestroyVCQ
PUBLIC	?VMListDestroyVBQ@VoiceManager@@QAEPAUVM_BUFFLIST@@PAU2@@Z ; VoiceManager::VMListDestroyVBQ
PUBLIC	?ChangeRadioFreq@VoiceManager@@QAEXHH@Z		; VoiceManager::ChangeRadioFreq
PUBLIC	?GetRadioFreq@VoiceManager@@QAEHH@Z		; VoiceManager::GetRadioFreq
PUBLIC	?ForwardCycleFreq@VoiceManager@@QAEXH@Z		; VoiceManager::ForwardCycleFreq
PUBLIC	?BackwardCycleFreq@VoiceManager@@QAEXH@Z	; VoiceManager::BackwardCycleFreq
PUBLIC	?ResumeChannel@VoiceManager@@QAEHH@Z		; VoiceManager::ResumeChannel
PUBLIC	?PauseChannel@VoiceManager@@QAEHH@Z		; VoiceManager::PauseChannel
PUBLIC	?BuffersEmpty@VoiceManager@@QAEHH@Z		; VoiceManager::BuffersEmpty
PUBLIC	?VoiceOpen@VoiceManager@@QAEHXZ			; VoiceManager::VoiceOpen
PUBLIC	?IsChannelDone@VoiceManager@@QAEHH@Z		; VoiceManager::IsChannelDone
PUBLIC	?AddNoise@VoiceManager@@QAEXPAUVOICE_STREAM_BUFFER@@VVU_ID@@H@Z ; VoiceManager::AddNoise
PUBLIC	?RemoveRadioCalls@VoiceManager@@QAEXVVU_ID@@@Z	; VoiceManager::RemoveRadioCalls
PUBLIC	?RemoveDuplicateMessages@VoiceManager@@QAEXVVU_ID@@0H@Z ; VoiceManager::RemoveDuplicateMessages
PUBLIC	?IsMessagePlaying@VoiceManager@@QAEHVVU_ID@@0H@Z ; VoiceManager::IsMessagePlaying
PUBLIC	?SetChannelVolume@VoiceManager@@QAEXHH@Z	; VoiceManager::SetChannelVolume
PUBLIC	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
PUBLIC	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
PUBLIC	?InSim@SimulationLoopControl@@SA_NXZ		; SimulationLoopControl::InSim
PUBLIC	?GetPlayerEntityID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerEntityID
PUBLIC	?GetFlyState@FalconSessionEntity@@QBEEXZ	; FalconSessionEntity::GetFlyState
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	?InSim@SimulationDriver@@QBE_NXZ		; SimulationDriver::InSim
PUBLIC	?RunningCampaign@SimulationDriver@@QBE_NXZ	; SimulationDriver::RunningCampaign
PUBLIC	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?GraphicsOwnship@OTWDriverClass@@QBEPAVSimBaseClass@@XZ ; OTWDriverClass::GraphicsOwnship
PUBLIC	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
PUBLIC	?FilterMessage@@YAHPAVCONVERSATION@@@Z		; FilterMessage
PUBLIC	?ResetVoices@@YAXXZ				; ResetVoices
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?gVmPlayVU_ID@@3VVU_ID@@A			; gVmPlayVU_ID
PUBLIC	??_C@_0L@BMONHOMA@vmCritical?$AA@		; `string'
PUBLIC	??_C@_0O@CJNDAFDH@?$CFs?2falcon?4tlk?$AA@	; `string'
PUBLIC	??_C@_0M@CFLADCE@Feb?518?52013?$AA@		; `string'
PUBLIC	??_C@_0BB@GJPCNOIL@VoiceManager?4cpp?$AA@	; `string'
PUBLIC	??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BG@MLIEFCIA@Can?8t?5open?5falcon?4tlk?$AA@ ; `string'
PUBLIC	??_C@_0BA@DHNKAOKH@VoiceWakeupCall?$AA@		; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f800000
PUBLIC	__real@42480000
PUBLIC	__real@437d0000
PUBLIC	__real@44fa0000
PUBLIC	__real@c61c4000
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__SetEvent@4:PROC
EXTRN	__imp__WaitForSingleObject@8:PROC
EXTRN	__imp__CreateEventA@16:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__beginthreadex:PROC
EXTRN	_exit:PROC
EXTRN	_rand:PROC
EXTRN	_sprintf:PROC
EXTRN	_F4SetStreamVolume:PROC
EXTRN	_F4CreateCriticalSection:PROC
EXTRN	_F4DestroyCriticalSection:PROC
EXTRN	_F4EnterCriticalSection:PROC
EXTRN	_F4LeaveCriticalSection:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	??0FalcVoice@@QAE@XZ:PROC			; FalcVoice::FalcVoice
EXTRN	??1FalcVoice@@QAE@XZ:PROC			; FalcVoice::~FalcVoice
EXTRN	?CreateVoice@FalcVoice@@QAEXXZ:PROC		; FalcVoice::CreateVoice
EXTRN	?InitCompressionData@FalcVoice@@QAEXXZ:PROC	; FalcVoice::InitCompressionData
EXTRN	?PlayVoices@FalcVoice@@QAEXXZ:PROC		; FalcVoice::PlayVoices
EXTRN	?SilenceVoices@FalcVoice@@QAEXXZ:PROC		; FalcVoice::SilenceVoices
EXTRN	?UnsilenceVoices@FalcVoice@@QAEXH@Z:PROC	; FalcVoice::UnsilenceVoices
EXTRN	?SetVoiceChannel@FalcVoice@@QAEXH@Z:PROC	; FalcVoice::SetVoiceChannel
EXTRN	?PopVCAddQueue@FalcVoice@@QAEXXZ:PROC		; FalcVoice::PopVCAddQueue
EXTRN	?GetVoiceBuffer@FalcVoice@@QAEPAUVOICE_STREAM_BUFFER@@H@Z:PROC ; FalcVoice::GetVoiceBuffer
EXTRN	?InitCompressionFile@FalcVoice@@QAEXXZ:PROC	; FalcVoice::InitCompressionFile
EXTRN	?BufferManager@FalcVoice@@QAEXH@Z:PROC		; FalcVoice::BufferManager
EXTRN	?BufferEmpty@FalcVoice@@QAEXH@Z:PROC		; FalcVoice::BufferEmpty
EXTRN	?ResetBufferStatus@FalcVoice@@QAEXXZ:PROC	; FalcVoice::ResetBufferStatus
EXTRN	??0LHSP@@QAE@XZ:PROC				; LHSP::LHSP
EXTRN	??1LHSP@@QAE@XZ:PROC				; LHSP::~LHSP
EXTRN	?InitializeLHSP@LHSP@@QAEXXZ:PROC		; LHSP::InitializeLHSP
EXTRN	?ReadLHSPFile@LHSP@@QAEJPAUCOMPRESSION_DATA@@PAPAE@Z:PROC ; LHSP::ReadLHSPFile
EXTRN	??0FileMemMap@@QAE@XZ:PROC			; FileMemMap::FileMemMap
EXTRN	??1FileMemMap@@QAE@XZ:PROC			; FileMemMap::~FileMemMap
EXTRN	?Open@FileMemMap@@QAEHPBDHH@Z:PROC		; FileMemMap::Open
EXTRN	?Close@FileMemMap@@QAEXXZ:PROC			; FileMemMap::Close
EXTRN	?GetData@FileMemMap@@QAEPAEHH@Z:PROC		; FileMemMap::GetData
EXTRN	?ResumeStream@CSoundMgr@@QAEXJ@Z:PROC		; CSoundMgr::ResumeStream
EXTRN	?PauseStream@CSoundMgr@@QAEXJ@Z:PROC		; CSoundMgr::PauseStream
EXTRN	?IsStreamPlaying@CSoundMgr@@QAEHJ@Z:PROC	; CSoundMgr::IsStreamPlaying
EXTRN	?GetGameType@FalconGameEntity@@QAE?AW4FalconGameType@@XZ:PROC ; FalconGameEntity::GetGameType
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	?GetAirbase@NavigationSystem@@QAEXPAVVU_ID@@@Z:PROC ; NavigationSystem::GetAirbase
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?GetFlightController@FlightClass@@QAEPAV1@XZ:PROC ; FlightClass::GetFlightController
EXTRN	?set_spinner3@@YAXH@Z:PROC			; set_spinner3
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?vuxGameTime@@3KA:DWORD				; vuxGameTime
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	?VM@@3PAVVoiceManager@@A:DWORD			; VM
EXTRN	?gSoundDriver@@3PAVCSoundMgr@@A:DWORD		; gSoundDriver
EXTRN	?currentMode@SimulationLoopControl@@1W4SimLoopControlMode@1@A:DWORD ; SimulationLoopControl::currentMode
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?gTacanList@@3PAVTacanList@@A:DWORD		; gTacanList
EXTRN	?gNavigationSys@@3PAVNavigationSystem@@A:DWORD	; gNavigationSys
EXTRN	?PlayerOptions@@3VPlayerOptionsClass@@A:BYTE	; PlayerOptions
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?MAX_RADIO_RANGE@@3MA:DWORD			; MAX_RADIO_RANGE
EXTRN	?noUIcomms@@3HA:DWORD				; noUIcomms
EXTRN	?FalconSoundThrDirectory@@3PADA:BYTE		; FalconSoundThrDirectory
EXTRN	?g_nSoundSwitchFix@@3HA:DWORD			; g_nSoundSwitchFix
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

?gVmPlayVU_ID@@3VVU_ID@@A DQ 01H DUP (?)		; gVmPlayVU_ID
_BSS	ENDS
;	COMDAT ?waketime@?1??VoiceManagementThread@@YGKPAX@Z@4KA
_BSS	SEGMENT
?waketime@?1??VoiceManagementThread@@YGKPAX@Z@4KA DD 01H DUP (?) ; `VoiceManagementThread'::`2'::waketime
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@c61c4000
CONST	SEGMENT
__real@c61c4000 DD 0c61c4000r			; -10000
CONST	ENDS
;	COMDAT __real@44fa0000
CONST	SEGMENT
__real@44fa0000 DD 044fa0000r			; 2000
CONST	ENDS
;	COMDAT __real@437d0000
CONST	SEGMENT
__real@437d0000 DD 0437d0000r			; 253
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DHNKAOKH@VoiceWakeupCall?$AA@
CONST	SEGMENT
??_C@_0BA@DHNKAOKH@VoiceWakeupCall?$AA@ DB 'VoiceWakeupCall', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MLIEFCIA@Can?8t?5open?5falcon?4tlk?$AA@
CONST	SEGMENT
??_C@_0BG@MLIEFCIA@Can?8t?5open?5falcon?4tlk?$AA@ DB 'Can''t open falcon.'
	DB	'tlk', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@ DB 'Error:  %'
	DB	'0d  %s  %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GJPCNOIL@VoiceManager?4cpp?$AA@
CONST	SEGMENT
??_C@_0BB@GJPCNOIL@VoiceManager?4cpp?$AA@ DB 'VoiceManager.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
CONST	SEGMENT
??_C@_0M@CFLADCE@Feb?518?52013?$AA@ DB 'Feb 18 2013', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CJNDAFDH@?$CFs?2falcon?4tlk?$AA@
CONST	SEGMENT
??_C@_0O@CJNDAFDH@?$CFs?2falcon?4tlk?$AA@ DB '%s\falcon.tlk', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BMONHOMA@vmCritical?$AA@
CONST	SEGMENT
??_C@_0L@BMONHOMA@vmCritical?$AA@ DB 'vmCritical', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?AddToConversationQueue@VoiceManager@@QAEXPAVCONVERSATION@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddToConversationQueue@VoiceManager@@QAEXPAVCONVERSATION@@@Z$0
__unwindtable$??1VoiceManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1VoiceManager@@QAE@XZ$0
__unwindtable$??0VoiceManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0VoiceManager@@QAE@XZ$0
__unwindtable$?VMBegin@VoiceManager@@QAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?VMBegin@VoiceManager@@QAEHXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?VMBegin@VoiceManager@@QAEHXZ$1
__ehfuncinfo$?AddToConversationQueue@VoiceManager@@QAEXPAVCONVERSATION@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddToConversationQueue@VoiceManager@@QAEXPAVCONVERSATION@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?VMBegin@VoiceManager@@QAEHXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?VMBegin@VoiceManager@@QAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??1VoiceManager@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1VoiceManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0VoiceManager@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0VoiceManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_gVmPlayVU_ID$initializer$ DD FLAT:??__EgVmPlayVU_ID@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
?ResetVoices@@YAXXZ PROC				; ResetVoices

; 747  : {

	push	ebp
	mov	ebp, esp

; 748  : 	if (VM)

	cmp	DWORD PTR ?VM@@3PAVVoiceManager@@A, 0	; VM
	je	SHORT $LN2@ResetVoice

; 749  : 	{
; 750  : 		VM->VMResetVoices();

	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?VMResetVoices@VoiceManager@@QAEXXZ	; VoiceManager::VMResetVoices
$LN2@ResetVoice:

; 751  : 	}
; 752  : }

	pop	ebp
	ret	0
?ResetVoices@@YAXXZ ENDP				; ResetVoices
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_ATCId$1 = -28						; size = 8
_ATCId$2 = -20						; size = 8
tv222 = -12						; size = 4
tv129 = -8						; size = 4
_retval$ = -4						; size = 4
_node$ = 8						; size = 4
?FilterMessage@@YAHPAVCONVERSATION@@@Z PROC		; FilterMessage

; 176  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 177  : 	int retval = FALSE;

	mov	DWORD PTR _retval$[ebp], 0

; 178  : 	//DSP Hack for debugging
; 179  : #ifdef _DEBUG
; 180  : 	//VM->radiofilter = rcfProx;
; 181  : #endif
; 182  : 
; 183  : 	if(!VM)

	cmp	DWORD PTR ?VM@@3PAVVoiceManager@@A, 0	; VM
	jne	SHORT $LN60@FilterMess

; 184  : 		return FALSE;

	xor	eax, eax
	jmp	$LN61@FilterMess
$LN60@FilterMess:

; 185  : 
; 186  : 	if(!node || node->message == -1)

	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN58@FilterMess
	mov	eax, DWORD PTR _node$[ebp]
	movsx	ecx, WORD PTR [eax]
	cmp	ecx, -1
	jne	SHORT $LN59@FilterMess
$LN58@FilterMess:

; 187  : 		return FALSE;

	xor	eax, eax
	jmp	$LN61@FilterMess
$LN59@FilterMess:

; 188  : 
; 189  : 	if(FalconLocalSession->GetFlyState() != FLYSTATE_FLYING && SimDriver.RunningCampaign())

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetFlyState@FalconSessionEntity@@QBEEXZ ; FalconSessionEntity::GetFlyState
	movzx	edx, al
	cmp	edx, 3
	je	SHORT $LN57@FilterMess
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?RunningCampaign@SimulationDriver@@QBE_NXZ ; SimulationDriver::RunningCampaign
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN57@FilterMess

; 190  : 	{
; 191  : 		if(noUIcomms || FalconLocalSession->GetFlyState() != FLYSTATE_IN_UI)

	cmp	DWORD PTR ?noUIcomms@@3HA, 0		; noUIcomms
	jne	SHORT $LN55@FilterMess
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetFlyState@FalconSessionEntity@@QBEEXZ ; FalconSessionEntity::GetFlyState
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN57@FilterMess
$LN55@FilterMess:

; 192  : 			return FALSE;

	xor	eax, eax
	jmp	$LN61@FilterMess
$LN57@FilterMess:

; 193  : 		//else 
; 194  : 			//return TRUE;
; 195  : 	}
; 196  : 
; 197  : 	//MI added check to make it only work for the radio we've selected
; 198  : 	//if(VM->Radio() == 0)
; 199  : 	//{
; 200  : 		switch(VM->radiofilter[0])

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	ecx, DWORD PTR [eax+edx+136]
	mov	DWORD PTR tv129[ebp], ecx
	cmp	DWORD PTR tv129[ebp], 15		; 0000000fH
	ja	$LN53@FilterMess
	mov	edx, DWORD PTR tv129[ebp]
	movzx	eax, BYTE PTR $LN63@FilterMess[edx]
	jmp	DWORD PTR $LN65@FilterMess[eax*4]
$LN52@FilterMess:

; 201  : 		{
; 202  : 		case rcfOff:
; 203  : 			retval = FALSE;

	mov	DWORD PTR _retval$[ebp], 0

; 204  : 			break;

	jmp	$LN53@FilterMess
$LN51@FilterMess:

; 205  : 		case rcfFlight5:
; 206  : 		case rcfFlight1:
; 207  : 		case rcfFlight2:
; 208  : 		case rcfFlight3:
; 209  : 		case rcfFlight4:
; 210  : 			if(TOFROM_FLIGHT & node->filter)

	mov	ecx, DWORD PTR _node$[ebp]
	movsx	edx, BYTE PTR [ecx+32]
	and	edx, 1
	je	SHORT $LN50@FilterMess

; 211  : 				retval = TRUE;

	mov	DWORD PTR _retval$[ebp], 1
$LN50@FilterMess:

; 212  : 			break;

	jmp	$LN53@FilterMess
$LN49@FilterMess:

; 213  : 		case rcfPackage5:
; 214  : 		case rcfPackage1:
; 215  : 		case rcfPackage2:
; 216  : 		case rcfPackage3:
; 217  : 		case rcfPackage4:
; 218  : 			if( (TO_PACKAGE & node->filter) || (node->filter & TOFROM_FLIGHT) )

	mov	eax, DWORD PTR _node$[ebp]
	movsx	ecx, BYTE PTR [eax+32]
	and	ecx, 2
	jne	SHORT $LN47@FilterMess
	mov	edx, DWORD PTR _node$[ebp]
	movsx	eax, BYTE PTR [edx+32]
	and	eax, 1
	je	SHORT $LN48@FilterMess
$LN47@FilterMess:

; 219  : 				retval = TRUE;

	mov	DWORD PTR _retval$[ebp], 1
$LN48@FilterMess:

; 220  : 			break;

	jmp	$LN53@FilterMess
$LN46@FilterMess:

; 221  : 		case rcfFromPackage:
; 222  : 			if( (TOFROM_PACKAGE & node->filter) || (node->filter & TOFROM_FLIGHT) )

	mov	ecx, DWORD PTR _node$[ebp]
	movsx	edx, BYTE PTR [ecx+32]
	and	edx, 4
	jne	SHORT $LN44@FilterMess
	mov	eax, DWORD PTR _node$[ebp]
	movsx	ecx, BYTE PTR [eax+32]
	and	ecx, 1
	je	SHORT $LN45@FilterMess
$LN44@FilterMess:

; 223  : 				retval = TRUE;

	mov	DWORD PTR _retval$[ebp], 1
$LN45@FilterMess:

; 224  : 			break;

	jmp	$LN53@FilterMess
$LN43@FilterMess:

; 225  : 		case rcfProx:
; 226  : 			if( (node->filter & TOFROM_FLIGHT) || ( (IN_PROXIMITY & node->filter) && ((node->filter & TO_TEAM) || (TO_PACKAGE & node->filter)) ) )

	mov	edx, DWORD PTR _node$[ebp]
	movsx	eax, BYTE PTR [edx+32]
	and	eax, 1
	jne	SHORT $LN41@FilterMess
	mov	ecx, DWORD PTR _node$[ebp]
	movsx	edx, BYTE PTR [ecx+32]
	and	edx, 16					; 00000010H
	je	SHORT $LN42@FilterMess
	mov	eax, DWORD PTR _node$[ebp]
	movsx	ecx, BYTE PTR [eax+32]
	and	ecx, 8
	jne	SHORT $LN41@FilterMess
	mov	edx, DWORD PTR _node$[ebp]
	movsx	eax, BYTE PTR [edx+32]
	and	eax, 2
	je	SHORT $LN42@FilterMess
$LN41@FilterMess:

; 227  : 				retval = TRUE;

	mov	DWORD PTR _retval$[ebp], 1
$LN42@FilterMess:

; 228  : 			break;

	jmp	$LN53@FilterMess
$LN39@FilterMess:

; 229  : 		case rcfTeam:
; 230  : 			if( (TO_TEAM & node->filter) || (node->filter & TOFROM_FLIGHT) || (TOFROM_PACKAGE & node->filter))

	mov	ecx, DWORD PTR _node$[ebp]
	movsx	edx, BYTE PTR [ecx+32]
	and	edx, 8
	jne	SHORT $LN37@FilterMess
	mov	eax, DWORD PTR _node$[ebp]
	movsx	ecx, BYTE PTR [eax+32]
	and	ecx, 1
	jne	SHORT $LN37@FilterMess
	mov	edx, DWORD PTR _node$[ebp]
	movsx	eax, BYTE PTR [edx+32]
	and	eax, 4
	je	SHORT $LN38@FilterMess
$LN37@FilterMess:

; 231  : 				retval = TRUE;

	mov	DWORD PTR _retval$[ebp], 1
$LN38@FilterMess:

; 232  : 			break;

	jmp	$LN53@FilterMess
$LN36@FilterMess:

; 233  : 		case rcfAll:
; 234  : 			if( (TO_WORLD & node->filter) || (node->filter & TOFROM_FLIGHT) || (TOFROM_PACKAGE & node->filter) || (TO_TEAM & node->filter))

	mov	ecx, DWORD PTR _node$[ebp]
	movsx	edx, BYTE PTR [ecx+32]
	and	edx, 32					; 00000020H
	jne	SHORT $LN34@FilterMess
	mov	eax, DWORD PTR _node$[ebp]
	movsx	ecx, BYTE PTR [eax+32]
	and	ecx, 1
	jne	SHORT $LN34@FilterMess
	mov	edx, DWORD PTR _node$[ebp]
	movsx	eax, BYTE PTR [edx+32]
	and	eax, 4
	jne	SHORT $LN34@FilterMess
	mov	ecx, DWORD PTR _node$[ebp]
	movsx	edx, BYTE PTR [ecx+32]
	and	edx, 8
	je	SHORT $LN35@FilterMess
$LN34@FilterMess:

; 235  : 				retval = TRUE;

	mov	DWORD PTR _retval$[ebp], 1
$LN35@FilterMess:

; 236  : 			break;

	jmp	SHORT $LN53@FilterMess
$LN33@FilterMess:

; 237  : 		case rcfTower:
; 238  : 			if(node->filter & TOFROM_FLIGHT)

	mov	eax, DWORD PTR _node$[ebp]
	movsx	ecx, BYTE PTR [eax+32]
	and	ecx, 1
	je	SHORT $LN32@FilterMess

; 239  : 				retval = TRUE;

	mov	DWORD PTR _retval$[ebp], 1
	jmp	SHORT $LN53@FilterMess
$LN32@FilterMess:

; 240  : 			else if( (TOFROM_TOWER & node->filter) && gNavigationSys)

	mov	edx, DWORD PTR _node$[ebp]
	movsx	eax, BYTE PTR [edx+32]
	and	eax, 64					; 00000040H
	je	SHORT $LN53@FilterMess
	cmp	DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A, 0 ; gNavigationSys
	je	SHORT $LN53@FilterMess

; 241  : 			{
; 242  : 				VU_ID	ATCId;

	lea	ecx, DWORD PTR _ATCId$2[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 243  : 				gNavigationSys->GetAirbase(&ATCId);

	lea	ecx, DWORD PTR _ATCId$2[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetAirbase@NavigationSystem@@QAEXPAVVU_ID@@@Z ; NavigationSystem::GetAirbase

; 244  : 				
; 245  : 				if(ATCId == node->from || ATCId == node->to)

	mov	edx, DWORD PTR _node$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	lea	ecx, DWORD PTR _ATCId$2[ebp]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN28@FilterMess
	mov	ecx, DWORD PTR _node$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	ecx, DWORD PTR _ATCId$2[ebp]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN53@FilterMess
$LN28@FilterMess:

; 246  : 					//return TRUE;
; 247  : 					retval = TRUE;

	mov	DWORD PTR _retval$[ebp], 1
$LN53@FilterMess:

; 248  : 			}
; 249  : 			break;
; 250  : 		}
; 251  : 	//}
; 252  : 
; 253  : 	//MI added check to make it only work for the radio we've selected
; 254  : 	//else if(VM->Radio() == 1)
; 255  : 	//{
; 256  : 	//if(!retval)
; 257  : 	//{
; 258  : 		switch(VM->radiofilter[1])

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	edx, DWORD PTR [ecx+eax+136]
	mov	DWORD PTR tv222[ebp], edx
	cmp	DWORD PTR tv222[ebp], 15		; 0000000fH
	ja	$LN26@FilterMess
	mov	eax, DWORD PTR tv222[ebp]
	movzx	ecx, BYTE PTR $LN64@FilterMess[eax]
	jmp	DWORD PTR $LN66@FilterMess[ecx*4]
$LN25@FilterMess:

; 259  : 		{
; 260  : 		case rcfOff:
; 261  : 			retval = FALSE;

	mov	DWORD PTR _retval$[ebp], 0

; 262  : 			break;

	jmp	$LN26@FilterMess
$LN24@FilterMess:

; 263  : 		case rcfFlight5:
; 264  : 		case rcfFlight1:
; 265  : 		case rcfFlight2:
; 266  : 		case rcfFlight3:
; 267  : 		case rcfFlight4:
; 268  : 		
; 269  : 			if(TOFROM_FLIGHT & node->filter)

	mov	edx, DWORD PTR _node$[ebp]
	movsx	eax, BYTE PTR [edx+32]
	and	eax, 1
	je	SHORT $LN23@FilterMess

; 270  : 				retval = TRUE;

	mov	DWORD PTR _retval$[ebp], 1
$LN23@FilterMess:

; 271  : 			break;

	jmp	$LN26@FilterMess
$LN22@FilterMess:

; 272  : 		case rcfPackage5:
; 273  : 		case rcfPackage1:
; 274  : 		case rcfPackage2:
; 275  : 		case rcfPackage3:
; 276  : 		case rcfPackage4:
; 277  : 		
; 278  : 			if( (TO_PACKAGE & node->filter) || (node->filter & TOFROM_FLIGHT) )

	mov	ecx, DWORD PTR _node$[ebp]
	movsx	edx, BYTE PTR [ecx+32]
	and	edx, 2
	jne	SHORT $LN20@FilterMess
	mov	eax, DWORD PTR _node$[ebp]
	movsx	ecx, BYTE PTR [eax+32]
	and	ecx, 1
	je	SHORT $LN21@FilterMess
$LN20@FilterMess:

; 279  : 				retval = TRUE;

	mov	DWORD PTR _retval$[ebp], 1
$LN21@FilterMess:

; 280  : 			break;

	jmp	$LN26@FilterMess
$LN19@FilterMess:

; 281  : 		case rcfFromPackage:
; 282  : 			if( (TOFROM_PACKAGE & node->filter) || (node->filter & TOFROM_FLIGHT) )

	mov	edx, DWORD PTR _node$[ebp]
	movsx	eax, BYTE PTR [edx+32]
	and	eax, 4
	jne	SHORT $LN17@FilterMess
	mov	ecx, DWORD PTR _node$[ebp]
	movsx	edx, BYTE PTR [ecx+32]
	and	edx, 1
	je	SHORT $LN18@FilterMess
$LN17@FilterMess:

; 283  : 				retval = TRUE;

	mov	DWORD PTR _retval$[ebp], 1
$LN18@FilterMess:

; 284  : 			break;

	jmp	$LN26@FilterMess
$LN16@FilterMess:

; 285  : 		case rcfProx:
; 286  : 			if( (node->filter & TOFROM_FLIGHT) || ( (IN_PROXIMITY & node->filter) && ((node->filter & TO_TEAM) || (TO_PACKAGE & node->filter)) ) )

	mov	eax, DWORD PTR _node$[ebp]
	movsx	ecx, BYTE PTR [eax+32]
	and	ecx, 1
	jne	SHORT $LN14@FilterMess
	mov	edx, DWORD PTR _node$[ebp]
	movsx	eax, BYTE PTR [edx+32]
	and	eax, 16					; 00000010H
	je	SHORT $LN15@FilterMess
	mov	ecx, DWORD PTR _node$[ebp]
	movsx	edx, BYTE PTR [ecx+32]
	and	edx, 8
	jne	SHORT $LN14@FilterMess
	mov	eax, DWORD PTR _node$[ebp]
	movsx	ecx, BYTE PTR [eax+32]
	and	ecx, 2
	je	SHORT $LN15@FilterMess
$LN14@FilterMess:

; 287  : 				retval = TRUE;

	mov	DWORD PTR _retval$[ebp], 1
$LN15@FilterMess:

; 288  : 			break;

	jmp	$LN26@FilterMess
$LN12@FilterMess:

; 289  : 		case rcfTeam:
; 290  : 			if( (TO_TEAM & node->filter) || (node->filter & TOFROM_FLIGHT) || (TOFROM_PACKAGE & node->filter))

	mov	edx, DWORD PTR _node$[ebp]
	movsx	eax, BYTE PTR [edx+32]
	and	eax, 8
	jne	SHORT $LN10@FilterMess
	mov	ecx, DWORD PTR _node$[ebp]
	movsx	edx, BYTE PTR [ecx+32]
	and	edx, 1
	jne	SHORT $LN10@FilterMess
	mov	eax, DWORD PTR _node$[ebp]
	movsx	ecx, BYTE PTR [eax+32]
	and	ecx, 4
	je	SHORT $LN11@FilterMess
$LN10@FilterMess:

; 291  : 				retval = TRUE;

	mov	DWORD PTR _retval$[ebp], 1
$LN11@FilterMess:

; 292  : 			break;

	jmp	$LN26@FilterMess
$LN9@FilterMess:

; 293  : 		case rcfAll:
; 294  : 			if( (TO_WORLD & node->filter) || (node->filter & TOFROM_FLIGHT) || (TOFROM_PACKAGE & node->filter) || (TO_TEAM & node->filter))

	mov	edx, DWORD PTR _node$[ebp]
	movsx	eax, BYTE PTR [edx+32]
	and	eax, 32					; 00000020H
	jne	SHORT $LN7@FilterMess
	mov	ecx, DWORD PTR _node$[ebp]
	movsx	edx, BYTE PTR [ecx+32]
	and	edx, 1
	jne	SHORT $LN7@FilterMess
	mov	eax, DWORD PTR _node$[ebp]
	movsx	ecx, BYTE PTR [eax+32]
	and	ecx, 4
	jne	SHORT $LN7@FilterMess
	mov	edx, DWORD PTR _node$[ebp]
	movsx	eax, BYTE PTR [edx+32]
	and	eax, 8
	je	SHORT $LN8@FilterMess
$LN7@FilterMess:

; 295  : 				retval = TRUE;

	mov	DWORD PTR _retval$[ebp], 1
$LN8@FilterMess:

; 296  : 			break;

	jmp	SHORT $LN26@FilterMess
$LN6@FilterMess:

; 297  : 		case rcfTower:
; 298  : 			if(node->filter & TOFROM_FLIGHT)

	mov	ecx, DWORD PTR _node$[ebp]
	movsx	edx, BYTE PTR [ecx+32]
	and	edx, 1
	je	SHORT $LN5@FilterMess

; 299  : 				retval = TRUE;

	mov	DWORD PTR _retval$[ebp], 1
	jmp	SHORT $LN26@FilterMess
$LN5@FilterMess:

; 300  : 			else if( (TOFROM_TOWER & node->filter) && gNavigationSys && gTacanList)

	mov	eax, DWORD PTR _node$[ebp]
	movsx	ecx, BYTE PTR [eax+32]
	and	ecx, 64					; 00000040H
	je	SHORT $LN26@FilterMess
	cmp	DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A, 0 ; gNavigationSys
	je	SHORT $LN26@FilterMess
	cmp	DWORD PTR ?gTacanList@@3PAVTacanList@@A, 0 ; gTacanList
	je	SHORT $LN26@FilterMess

; 301  : 			{
; 302  : 				VU_ID	ATCId;

	lea	ecx, DWORD PTR _ATCId$1[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 303  : 				gNavigationSys->GetAirbase(&ATCId);

	lea	edx, DWORD PTR _ATCId$1[ebp]
	push	edx
	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetAirbase@NavigationSystem@@QAEXPAVVU_ID@@@Z ; NavigationSystem::GetAirbase

; 304  : 				
; 305  : 				if(ATCId == node->from || ATCId == node->to)

	mov	eax, DWORD PTR _node$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	lea	ecx, DWORD PTR _ATCId$1[ebp]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@FilterMess
	mov	edx, DWORD PTR _node$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	lea	ecx, DWORD PTR _ATCId$1[ebp]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN26@FilterMess
$LN1@FilterMess:

; 306  : 					//return TRUE;
; 307  : 					retval = TRUE;

	mov	DWORD PTR _retval$[ebp], 1
$LN26@FilterMess:

; 308  : 			}
; 309  : 			break;
; 310  : 		}
; 311  : 	//}
; 312  : 	//}
; 313  : 	return retval;

	mov	eax, DWORD PTR _retval$[ebp]
$LN61@FilterMess:

; 314  : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN65@FilterMess:
	DD	$LN52@FilterMess
	DD	$LN51@FilterMess
	DD	$LN49@FilterMess
	DD	$LN46@FilterMess
	DD	$LN43@FilterMess
	DD	$LN39@FilterMess
	DD	$LN36@FilterMess
	DD	$LN33@FilterMess
$LN63@FilterMess:
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
$LN66@FilterMess:
	DD	$LN25@FilterMess
	DD	$LN24@FilterMess
	DD	$LN22@FilterMess
	DD	$LN19@FilterMess
	DD	$LN16@FilterMess
	DD	$LN12@FilterMess
	DD	$LN9@FilterMess
	DD	$LN6@FilterMess
$LN64@FilterMess:
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
?FilterMessage@@YAHPAVCONVERSATION@@@Z ENDP		; FilterMessage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
;	COMDAT ??__EgVmPlayVU_ID@@YAXXZ
text$yc	SEGMENT
??__EgVmPlayVU_ID@@YAXXZ PROC				; `dynamic initializer for 'gVmPlayVU_ID'', COMDAT

; 40   : VU_ID gVmPlayVU_ID;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?gVmPlayVU_ID@@3VVU_ID@@A	; gVmPlayVU_ID
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	pop	ebp
	ret	0
??__EgVmPlayVU_ID@@YAXXZ ENDP				; `dynamic initializer for 'gVmPlayVU_ID''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ PROC ; VuBin<SimBaseClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ENDP ; VuBin<SimBaseClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\otwdrive.h
;	COMDAT ?GraphicsOwnship@OTWDriverClass@@QBEPAVSimBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GraphicsOwnship@OTWDriverClass@@QBEPAVSimBaseClass@@XZ PROC ; OTWDriverClass::GraphicsOwnship, COMDAT
; _this$ = ecx

; 284  : 		SimBaseClass* GraphicsOwnship () const { return otwPlatform.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32336				; 00007e50H
	call	?get@?$VuBin@VSimBaseClass@@@@QBEPAVSimBaseClass@@XZ ; VuBin<SimBaseClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GraphicsOwnship@OTWDriverClass@@QBEPAVSimBaseClass@@XZ ENDP ; OTWDriverClass::GraphicsOwnship
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ PROC ; SimulationDriver::GetPlayerEntity, COMDAT
; _this$ = ecx

; 76   : 	SimMoverClass *GetPlayerEntity() const { return const_cast<SimMoverClass*>(playerEntity); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ENDP ; SimulationDriver::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?RunningCampaign@SimulationDriver@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv80 = -8						; size = 4
tv76 = -4						; size = 4
?RunningCampaign@SimulationDriver@@QBE_NXZ PROC		; SimulationDriver::RunningCampaign, COMDAT
; _this$ = ecx

; 59   : 	bool RunningCampaign() const             { return FalconLocalGame->GetGameType() == game_Campaign; }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@RunningCam
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN4@RunningCam
$LN3@RunningCam:
	mov	DWORD PTR tv76[ebp], 0
$LN4@RunningCam:
	mov	ecx, DWORD PTR tv76[ebp]
	call	?GetGameType@FalconGameEntity@@QAE?AW4FalconGameType@@XZ ; FalconGameEntity::GetGameType
	cmp	eax, 4
	jne	SHORT $LN5@RunningCam
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN6@RunningCam
$LN5@RunningCam:
	mov	DWORD PTR tv80[ebp], 0
$LN6@RunningCam:
	mov	al, BYTE PTR tv80[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?RunningCampaign@SimulationDriver@@QBE_NXZ ENDP		; SimulationDriver::RunningCampaign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?InSim@SimulationDriver@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InSim@SimulationDriver@@QBE_NXZ PROC			; SimulationDriver::InSim, COMDAT
; _this$ = ecx

; 51   : 	bool InSim() const                 { return SimulationLoopControl::InSim(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	call	?InSim@SimulationLoopControl@@SA_NXZ	; SimulationLoopControl::InSim
	mov	esp, ebp
	pop	ebp
	ret	0
?InSim@SimulationDriver@@QBE_NXZ ENDP			; SimulationDriver::InSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetFlyState@FalconSessionEntity@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFlyState@FalconSessionEntity@@QBEEXZ PROC		; FalconSessionEntity::GetFlyState, COMDAT
; _this$ = ecx

; 147  : 	uchar GetFlyState (void) const                { return flyState; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+513]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFlyState@FalconSessionEntity@@QBEEXZ ENDP		; FalconSessionEntity::GetFlyState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetPlayerEntityID@FalconSessionEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetPlayerEntityID@FalconSessionEntity@@QBE?AVVU_ID@@XZ PROC ; FalconSessionEntity::GetPlayerEntityID, COMDAT
; _this$ = ecx

; 135  : 	VU_ID GetPlayerEntityID(void) const           { return playerEntity; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+468]
	mov	edx, DWORD PTR [eax+472]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPlayerEntityID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ENDP ; FalconSessionEntity::GetPlayerEntityID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simloop.h
;	COMDAT ?InSim@SimulationLoopControl@@SA_NXZ
_TEXT	SEGMENT
tv65 = -4						; size = 4
?InSim@SimulationLoopControl@@SA_NXZ PROC		; SimulationLoopControl::InSim, COMDAT

; 27   : 	static bool InSim(void)			{ return currentMode == RunningGraphics; }

	push	ebp
	mov	ebp, esp
	push	ecx
	cmp	DWORD PTR ?currentMode@SimulationLoopControl@@1W4SimLoopControlMode@1@A, 6 ; SimulationLoopControl::currentMode
	jne	SHORT $LN3@InSim
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@InSim
$LN3@InSim:
	mov	DWORD PTR tv65[ebp], 0
$LN4@InSim:
	mov	al, BYTE PTR tv65[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?InSim@SimulationLoopControl@@SA_NXZ ENDP		; SimulationLoopControl::InSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ PROC ; SimBaseClass::GetCampaignObject, COMDAT
; _this$ = ecx

; 212  : 	CampBaseClass *GetCampaignObject (void) { return campaignObject.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ENDP ; SimBaseClass::GetCampaignObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ PROC ; VuBin<CampBaseClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ENDP ; VuBin<CampBaseClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_channel$ = 8						; size = 4
_volume$ = 12						; size = 4
?SetChannelVolume@VoiceManager@@QAEXHH@Z PROC		; VoiceManager::SetChannelVolume
; _this$ = ecx

; 1530 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1531 : 	if ( channel >= 0 && channel < NUM_VOICE_CHANNELS && !falconVoices[channel].exitChannel )

	cmp	DWORD PTR _channel$[ebp], 0
	jl	SHORT $LN2@SetChannel
	cmp	DWORD PTR _channel$[ebp], 2
	jge	SHORT $LN2@SetChannel
	mov	eax, DWORD PTR _channel$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	cmp	DWORD PTR [edx+eax+84], 0
	jne	SHORT $LN2@SetChannel

; 1532 : 	{
; 1533 : 		F4SetStreamVolume(	falconVoices[channel].FalcVoiceHandle, volume);

	mov	eax, DWORD PTR _volume$[ebp]
	push	eax
	mov	ecx, DWORD PTR _channel$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR [eax+ecx+68]
	push	ecx
	call	_F4SetStreamVolume
	add	esp, 8
$LN2@SetChannel:

; 1534 : 	}
; 1535 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetChannelVolume@VoiceManager@@QAEXHH@Z ENDP		; VoiceManager::SetChannelVolume
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_retval$ = -12						; size = 4
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
_from$ = 8						; size = 8
_to$ = 16						; size = 8
_msgid$ = 24						; size = 4
?IsMessagePlaying@VoiceManager@@QAEHVVU_ID@@0H@Z PROC	; VoiceManager::IsMessagePlaying
; _this$ = ecx

; 1085 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1086 : 	int retval = FALSE;

	mov	DWORD PTR _retval$[ebp], 0

; 1087 : 
; 1088 : 	F4EnterCriticalSection( vmCriticalSection );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	call	_F4EnterCriticalSection
	add	esp, 4

; 1089 : 
; 1090 : 	for (int i = 0 ; i < NUM_VOICE_CHANNELS ; i++ )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@IsMessageP
$LN3@IsMessageP:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN4@IsMessageP:
	cmp	DWORD PTR _i$1[ebp], 2
	jge	SHORT $LN2@IsMessageP

; 1091 : 	{
; 1092 : 		if( decompQueue[i].from == from &&  decompQueue[i].to == to && decompQueue[i].message == msgid)

	lea	eax, DWORD PTR _from$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$1[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [edx+ecx+80]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@IsMessageP
	lea	ecx, DWORD PTR _to$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$1[ebp]
	imul	edx, 40					; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+72]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@IsMessageP
	mov	edx, DWORD PTR _i$1[ebp]
	imul	edx, 40					; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+edx+56]
	cmp	ecx, DWORD PTR _msgid$[ebp]
	jne	SHORT $LN1@IsMessageP

; 1093 : 		{
; 1094 : 			retval = TRUE;

	mov	DWORD PTR _retval$[ebp], 1

; 1095 : 			break;

	jmp	SHORT $LN2@IsMessageP
$LN1@IsMessageP:

; 1096 : 		}
; 1097 : 	}

	jmp	SHORT $LN3@IsMessageP
$LN2@IsMessageP:

; 1098 : 
; 1099 : 	F4LeaveCriticalSection( vmCriticalSection );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	push	eax
	call	_F4LeaveCriticalSection
	add	esp, 4

; 1100 : 
; 1101 : 	return retval;

	mov	eax, DWORD PTR _retval$[ebp]

; 1102 : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?IsMessagePlaying@VoiceManager@@QAEHVVU_ID@@0H@Z ENDP	; VoiceManager::IsMessagePlaying
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_pVCnext$ = -16						; size = 4
_this$ = -12						; size = 4
_i$1 = -8						; size = 4
_pVC$ = -4						; size = 4
_from$ = 8						; size = 8
_to$ = 16						; size = 8
_msgid$ = 24						; size = 4
?RemoveDuplicateMessages@VoiceManager@@QAEXVVU_ID@@0H@Z PROC ; VoiceManager::RemoveDuplicateMessages
; _this$ = ecx

; 1061 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1062 : 	VM_CONVLIST *pVC,*pVCnext;
; 1063 : 
; 1064 : 	F4EnterCriticalSection( vmCriticalSection );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	call	_F4EnterCriticalSection
	add	esp, 4

; 1065 : 
; 1066 : 	for (int i = 0 ; i < NUM_VOICE_CHANNELS ; i++ )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN6@RemoveDupl
$LN5@RemoveDupl:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN6@RemoveDupl:
	cmp	DWORD PTR _i$1[ebp], 2
	jge	$LN4@RemoveDupl

; 1067 : 	{
; 1068 : 		pVCnext = NULL;

	mov	DWORD PTR _pVCnext$[ebp], 0

; 1069 : 		pVC = voiceChannelQueue[i];

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[eax*4]
	mov	DWORD PTR _pVC$[ebp], ecx
$LN3@RemoveDupl:

; 1070 : 
; 1071 : 		while(pVC)

	cmp	DWORD PTR _pVC$[ebp], 0
	je	$LN2@RemoveDupl

; 1072 : 		{
; 1073 : 			pVCnext = pVC->next;

	mov	edx, DWORD PTR _pVC$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _pVCnext$[ebp], eax

; 1074 : 			// Fix for Weapons Call
; 1075 : 			if(pVC->node->from == from && pVC->node->to == to && pVC->node->message == msgid && pVC->node->message != rcDAMREPORT && pVC->node->message != rcWEAPONSCHECKRSP)

	lea	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pVC$[ebp]
	mov	ecx, DWORD PTR [edx]
	add	ecx, 24					; 00000018H
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@RemoveDupl
	lea	ecx, DWORD PTR _to$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pVC$[ebp]
	mov	ecx, DWORD PTR [edx]
	add	ecx, 16					; 00000010H
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@RemoveDupl
	mov	ecx, DWORD PTR _pVC$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, WORD PTR [edx]
	cmp	eax, DWORD PTR _msgid$[ebp]
	jne	SHORT $LN1@RemoveDupl
	mov	ecx, DWORD PTR _pVC$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, WORD PTR [edx]
	cmp	eax, 46					; 0000002eH
	je	SHORT $LN1@RemoveDupl
	mov	ecx, DWORD PTR _pVC$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, WORD PTR [edx]
	cmp	eax, 231				; 000000e7H
	je	SHORT $LN1@RemoveDupl

; 1076 : 				VMListRemoveVCQ(&voiceChannelQueue[i], pVC);

	mov	ecx, DWORD PTR _pVC$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$1[ebp]
	lea	eax, DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?VMListRemoveVCQ@VoiceManager@@QAEXPAPAUVM_CONVLIST@@PAU2@@Z ; VoiceManager::VMListRemoveVCQ
$LN1@RemoveDupl:

; 1077 : 			pVC = pVCnext;

	mov	ecx, DWORD PTR _pVCnext$[ebp]
	mov	DWORD PTR _pVC$[ebp], ecx

; 1078 : 		}

	jmp	$LN3@RemoveDupl
$LN2@RemoveDupl:

; 1079 : 	}

	jmp	$LN5@RemoveDupl
$LN4@RemoveDupl:

; 1080 : 
; 1081 : 	F4LeaveCriticalSection( vmCriticalSection );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	push	eax
	call	_F4LeaveCriticalSection
	add	esp, 4

; 1082 : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?RemoveDuplicateMessages@VoiceManager@@QAEXVVU_ID@@0H@Z ENDP ; VoiceManager::RemoveDuplicateMessages
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
$T1 = -20						; size = 4
_pVCnext$ = -16						; size = 4
_pVC$ = -12						; size = 4
_this$ = -8						; size = 4
_i$ = -4						; size = 4
_dead$ = 8						; size = 8
?RemoveRadioCalls@VoiceManager@@QAEXVVU_ID@@@Z PROC	; VoiceManager::RemoveRadioCalls
; _this$ = ecx

; 1597 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 1598 : 	VM_CONVLIST *pVC, *pVCnext;
; 1599 : 	int i;
; 1600 : 
; 1601 : 	F4EnterCriticalSection( VM->vmCriticalSection );

	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	call	_F4EnterCriticalSection
	add	esp, 4

; 1602 : 	for ( i = 0 ; i < NUM_VOICE_CHANNELS ; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@RemoveRadi
$LN6@RemoveRadi:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN7@RemoveRadi:
	cmp	DWORD PTR _i$[ebp], 2
	jge	$LN5@RemoveRadi

; 1603 : 	{
; 1604 : 		pVC = voiceChannelQueue[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[eax*4]
	mov	DWORD PTR _pVC$[ebp], ecx
$LN4@RemoveRadi:

; 1605 : 
; 1606 : 		while(pVC)

	cmp	DWORD PTR _pVC$[ebp], 0
	je	SHORT $LN3@RemoveRadi

; 1607 : 		{
; 1608 : 			pVCnext = pVC->next;

	mov	edx, DWORD PTR _pVC$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _pVCnext$[ebp], eax

; 1609 : 			if(pVC->node->from == dead)

	lea	ecx, DWORD PTR _dead$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pVC$[ebp]
	mov	ecx, DWORD PTR [edx]
	add	ecx, 24					; 00000018H
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@RemoveRadi

; 1610 : 				VMListRemoveVCQ(&voiceChannelQueue[i], pVC);

	mov	ecx, DWORD PTR _pVC$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?VMListRemoveVCQ@VoiceManager@@QAEXPAPAUVM_CONVLIST@@PAU2@@Z ; VoiceManager::VMListRemoveVCQ
$LN2@RemoveRadi:

; 1611 : 			pVC = pVCnext;

	mov	ecx, DWORD PTR _pVCnext$[ebp]
	mov	DWORD PTR _pVC$[ebp], ecx

; 1612 : 		}

	jmp	SHORT $LN4@RemoveRadi
$LN3@RemoveRadi:

; 1613 : 
; 1614 : 		if( decompQueue[i].from == dead )

	lea	edx, DWORD PTR _dead$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [ecx+eax+80]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	edx, al
	test	edx, edx
	je	$LN1@RemoveRadi

; 1615 : 		{
; 1616 : 			decompQueue[i].status = SLOT_IS_AVAILABLE;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+58], -1

; 1617 : 			decompQueue[i].from = FalconNullId;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 40					; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax+edx+80], ecx
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+edx+84], ecx

; 1618 : 			decompQueue[i].to = FalconNullId;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 40					; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax+edx+72], ecx
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+edx+76], ecx

; 1619 : 			delete [] decompQueue[i].conversations;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 40					; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+92]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 1620 : 			decompQueue[i].conversations = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+92], 0

; 1621 : 			falconVoices[i].BufferEmpty( 0 );

	push	0
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+52]
	call	?BufferEmpty@FalcVoice@@QAEXH@Z		; FalcVoice::BufferEmpty

; 1622 : 			falconVoices[i].BufferEmpty( 1 );

	push	1
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+52]
	call	?BufferEmpty@FalcVoice@@QAEXH@Z		; FalcVoice::BufferEmpty
$LN1@RemoveRadi:

; 1623 : 		}
; 1624 : 	}

	jmp	$LN6@RemoveRadi
$LN5@RemoveRadi:

; 1625 : 	F4LeaveCriticalSection( VM->vmCriticalSection );

	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	edx, DWORD PTR [ecx+148]
	push	edx
	call	_F4LeaveCriticalSection
	add	esp, 4

; 1626 : 
; 1627 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?RemoveRadioCalls@VoiceManager@@QAEXVVU_ID@@@Z ENDP	; VoiceManager::RemoveRadioCalls
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
$T1 = -112						; size = 8
_this$ = -104						; size = 4
_volume$ = -100						; size = 4
tv275 = -96						; size = 4
tv325 = -92						; size = 4
tv271 = -88						; size = 4
tv267 = -84						; size = 4
tv323 = -80						; size = 4
tv263 = -76						; size = 4
tv259 = -72						; size = 4
tv321 = -68						; size = 4
tv255 = -64						; size = 4
_minLevel$ = -60					; size = 4
tv209 = -56						; size = 4
tv185 = -52						; size = 4
_dz$ = -48						; size = 4
_dy$ = -44						; size = 4
_dx$ = -40						; size = 4
_nonoise$ = -36						; size = 4
_level$ = -32						; size = 4
_awacs$ = -28						; size = 4
_flight$ = -24						; size = 4
_pos$ = -20						; size = 4
_i$ = -16						; size = 4
_ownship$ = -12						; size = 4
_dist$ = -8						; size = 4
_fromEnt$ = -4						; size = 4
_streamBuffer$ = 8					; size = 4
_from$ = 12						; size = 8
_channel$ = 20						; size = 4
?AddNoise@VoiceManager@@QAEXPAUVOICE_STREAM_BUFFER@@VVU_ID@@H@Z PROC ; VoiceManager::AddNoise
; _this$ = ecx

; 1538 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1539 : 	unsigned long i; 
; 1540 : 	int level=255, minLevel=253, volume, nonoise;

	mov	DWORD PTR _level$[ebp], 255		; 000000ffH
	mov	DWORD PTR _minLevel$[ebp], 253		; 000000fdH

; 1541 : 	VuEntity *fromEnt = NULL;

	mov	DWORD PTR _fromEnt$[ebp], 0

; 1542 : 	float dist, dx, dy , dz;
; 1543 : 	SimBaseClass *ownship = OTWDriver.GraphicsOwnship();

	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GraphicsOwnship@OTWDriverClass@@QBEPAVSimBaseClass@@XZ ; OTWDriverClass::GraphicsOwnship
	mov	DWORD PTR _ownship$[ebp], eax

; 1544 : 
; 1545 : 	Flight	awacs = NULL;

	mov	DWORD PTR _awacs$[ebp], 0

; 1546 : 	Flight	flight = NULL;

	mov	DWORD PTR _flight$[ebp], 0

; 1547 : 	nonoise = FALSE;

	mov	DWORD PTR _nonoise$[ebp], 0

; 1548 : 
; 1549 : 	if(SimDriver.GetPlayerEntity())

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	SHORT $LN7@AddNoise

; 1550 : 	{
; 1551 : 		flight = (Flight)SimDriver.GetPlayerEntity()->GetCampaignObject();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _flight$[ebp], eax

; 1552 : 		if(flight)

	cmp	DWORD PTR _flight$[ebp], 0
	je	SHORT $LN7@AddNoise

; 1553 : 		{
; 1554 : 			// AWACS/FAC callsign
; 1555 : 			awacs = flight->GetFlightController();

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetFlightController@FlightClass@@QAEPAV1@XZ ; FlightClass::GetFlightController
	mov	DWORD PTR _awacs$[ebp], eax

; 1556 : 			if (awacs && awacs->Id() == from)

	cmp	DWORD PTR _awacs$[ebp], 0
	je	SHORT $LN7@AddNoise
	lea	eax, DWORD PTR _from$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _awacs$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN7@AddNoise

; 1557 : 				nonoise = TRUE;

	mov	DWORD PTR _nonoise$[ebp], 1
$LN7@AddNoise:

; 1558 : 
; 1559 : 		}
; 1560 : 	}
; 1561 : 
; 1562 : 	fromEnt = vuDatabase->Find(from);

	mov	eax, DWORD PTR _from$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _fromEnt$[ebp], eax

; 1563 : 	if(fromEnt && ownship && fromEnt != SimDriver.GetPlayerEntity() && !nonoise && SimDriver.InSim())

	cmp	DWORD PTR _fromEnt$[ebp], 0
	je	$LN6@AddNoise
	cmp	DWORD PTR _ownship$[ebp], 0
	je	$LN6@AddNoise
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	cmp	DWORD PTR _fromEnt$[ebp], eax
	je	$LN6@AddNoise
	cmp	DWORD PTR _nonoise$[ebp], 0
	jne	$LN6@AddNoise
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?InSim@SimulationDriver@@QBE_NXZ	; SimulationDriver::InSim
	movzx	edx, al
	test	edx, edx
	je	$LN6@AddNoise

; 1564 : 	{
; 1565 : 		dx = fromEnt->XPos() - ownship->XPos();

	mov	ecx, DWORD PTR _fromEnt$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv255[ebp]
	movss	xmm0, DWORD PTR tv255[ebp]
	mov	ecx, DWORD PTR _ownship$[ebp]
	movss	DWORD PTR tv321[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv259[ebp]
	movss	xmm0, DWORD PTR tv321[ebp]
	subss	xmm0, DWORD PTR tv259[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 1566 : 		dy = fromEnt->YPos() - ownship->YPos();

	mov	ecx, DWORD PTR _fromEnt$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv263[ebp]
	movss	xmm0, DWORD PTR tv263[ebp]
	mov	ecx, DWORD PTR _ownship$[ebp]
	movss	DWORD PTR tv323[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv267[ebp]
	movss	xmm0, DWORD PTR tv323[ebp]
	subss	xmm0, DWORD PTR tv267[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 1567 : 		dz = fromEnt->ZPos() - ownship->ZPos();

	mov	ecx, DWORD PTR _fromEnt$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv271[ebp]
	movss	xmm0, DWORD PTR tv271[ebp]
	mov	ecx, DWORD PTR _ownship$[ebp]
	movss	DWORD PTR tv325[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv275[ebp]
	movss	xmm0, DWORD PTR tv325[ebp]
	subss	xmm0, DWORD PTR tv275[ebp]
	movss	DWORD PTR _dz$[ebp], xmm0

; 1568 : 		dist = (float)sqrt(dx*dx + dy*dy + dz*dz);

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dz$[ebp]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _dist$[ebp]

; 1569 : 
; 1570 : 		dist = min(dist, MAX_RADIO_RANGE - 1.0F);

	movss	xmm0, DWORD PTR ?MAX_RADIO_RANGE@@3MA
	subss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _dist$[ebp]
	jbe	SHORT $LN12@AddNoise
	movss	xmm0, DWORD PTR _dist$[ebp]
	movss	DWORD PTR tv185[ebp], xmm0
	jmp	SHORT $LN13@AddNoise
$LN12@AddNoise:
	movss	xmm0, DWORD PTR ?MAX_RADIO_RANGE@@3MA
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv185[ebp], xmm0
$LN13@AddNoise:
	movss	xmm0, DWORD PTR tv185[ebp]
	movss	DWORD PTR _dist$[ebp], xmm0

; 1571 : 
; 1572 : 		minLevel = FloatToInt32(253 - dist/MAX_RADIO_RANGE * 50.0F);	

	movss	xmm0, DWORD PTR _dist$[ebp]
	divss	xmm0, DWORD PTR ?MAX_RADIO_RANGE@@3MA
	mulss	xmm0, DWORD PTR __real@42480000
	movss	xmm1, DWORD PTR __real@437d0000
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _minLevel$[ebp], eax

; 1573 : 		
; 1574 : 		volume = FloatToInt32(max(-10000,PlayerOptions.GroupVol[COM1_SOUND_GROUP + channel] - dist/MAX_RADIO_RANGE*2000));

	mov	eax, DWORD PTR _channel$[ebp]
	cvtsi2ss xmm0, DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A[eax*4+132]
	movss	xmm1, DWORD PTR _dist$[ebp]
	divss	xmm1, DWORD PTR ?MAX_RADIO_RANGE@@3MA
	mulss	xmm1, DWORD PTR __real@44fa0000
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@c61c4000
	comiss	xmm1, xmm0
	jbe	SHORT $LN14@AddNoise
	movss	xmm0, DWORD PTR __real@c61c4000
	movss	DWORD PTR tv209[ebp], xmm0
	jmp	SHORT $LN15@AddNoise
$LN14@AddNoise:
	mov	ecx, DWORD PTR _channel$[ebp]
	cvtsi2ss xmm0, DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A[ecx*4+132]
	movss	xmm1, DWORD PTR _dist$[ebp]
	divss	xmm1, DWORD PTR ?MAX_RADIO_RANGE@@3MA
	mulss	xmm1, DWORD PTR __real@44fa0000
	subss	xmm0, xmm1
	movss	DWORD PTR tv209[ebp], xmm0
$LN15@AddNoise:
	push	ecx
	movss	xmm0, DWORD PTR tv209[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _volume$[ebp], eax

; 1575 : 		SetChannelVolume(channel, volume);

	mov	edx, DWORD PTR _volume$[ebp]
	push	edx
	mov	eax, DWORD PTR _channel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetChannelVolume@VoiceManager@@QAEXHH@Z ; VoiceManager::SetChannelVolume
$LN6@AddNoise:

; 1576 : 	}
; 1577 : 
; 1578 : 
; 1579 : 	unsigned char  *pos = streamBuffer->waveBuffer;

	mov	ecx, DWORD PTR _streamBuffer$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _pos$[ebp], edx

; 1580 : 
; 1581 : 	for(i = 0; i < streamBuffer->dataInWaveBuffer; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@AddNoise
$LN4@AddNoise:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@AddNoise:
	mov	ecx, DWORD PTR _streamBuffer$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jae	SHORT $LN3@AddNoise

; 1582 : 	{
; 1583 : 		if(!(i%50))

	mov	eax, DWORD PTR _i$[ebp]
	xor	edx, edx
	mov	ecx, 50					; 00000032H
	div	ecx
	test	edx, edx
	jne	SHORT $LN2@AddNoise

; 1584 : 			level = minLevel - rand()%4 - rand()%4;

	call	_rand
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN16@AddNoise
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN16@AddNoise:
	mov	esi, DWORD PTR _minLevel$[ebp]
	sub	esi, eax
	call	_rand
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN17@AddNoise
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN17@AddNoise:
	sub	esi, eax
	mov	DWORD PTR _level$[ebp], esi
$LN2@AddNoise:

; 1585 : 
; 1586 : 		if(*pos > level)

	mov	edx, DWORD PTR _pos$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, DWORD PTR _level$[ebp]
	jle	SHORT $LN1@AddNoise

; 1587 : 			*pos = (uchar)level;

	mov	ecx, DWORD PTR _pos$[ebp]
	mov	dl, BYTE PTR _level$[ebp]
	mov	BYTE PTR [ecx], dl
$LN1@AddNoise:

; 1588 : 
; 1589 : 		//if(level < 235)
; 1590 : 		//	*pos += (1 - rand()%3);
; 1591 : 
; 1592 : 		pos++;

	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax

; 1593 : 	}

	jmp	SHORT $LN4@AddNoise
$LN3@AddNoise:

; 1594 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?AddNoise@VoiceManager@@QAEXPAUVOICE_STREAM_BUFFER@@VVU_ID@@H@Z ENDP ; VoiceManager::AddNoise
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv73 = -4						; size = 4
_channel$ = 8						; size = 4
?IsChannelDone@VoiceManager@@QAEHH@Z PROC		; VoiceManager::IsChannelDone
; _this$ = ecx

; 1488 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1489 : 	if (gSoundDriver)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN1@IsChannelD

; 1490 : 	{
; 1491 : 		return !gSoundDriver->IsStreamPlaying(VM->falconVoices[channel].FalcVoiceHandle);

	mov	eax, DWORD PTR _channel$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+eax+68]
	push	eax
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?IsStreamPlaying@CSoundMgr@@QAEHJ@Z	; CSoundMgr::IsStreamPlaying
	test	eax, eax
	jne	SHORT $LN4@IsChannelD
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN5@IsChannelD
$LN4@IsChannelD:
	mov	DWORD PTR tv73[ebp], 0
$LN5@IsChannelD:
	mov	eax, DWORD PTR tv73[ebp]
	jmp	SHORT $LN2@IsChannelD
$LN1@IsChannelD:

; 1492 : 	}
; 1493 : 
; 1494 : 	return FALSE;

	xor	eax, eax
$LN2@IsChannelD:

; 1495 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsChannelDone@VoiceManager@@QAEHH@Z ENDP		; VoiceManager::IsChannelDone
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_this$ = -848						; size = 4
_buffer$1 = -844					; size = 580
_filename$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
?VoiceOpen@VoiceManager@@QAEHXZ PROC			; VoiceManager::VoiceOpen
; _this$ = ecx

; 137  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 848				; 00000350H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 138  : 	char	filename[MAX_PATH];
; 139  : 	
; 140  : 	sprintf(filename,"%s\\falcon.tlk",FalconSoundThrDirectory);

	push	OFFSET ?FalconSoundThrDirectory@@3PADA	; FalconSoundThrDirectory
	push	OFFSET ??_C@_0O@CJNDAFDH@?$CFs?2falcon?4tlk?$AA@
	lea	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 141  : #if 0
; 142  : 	voiceMapPtr = (char *)map_file(filename);
; 143  : #endif
; 144  : 	if (voiceMap.Open(filename) != TRUE)

	push	0
	push	0
	lea	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Open@FileMemMap@@QAEHPBDHH@Z		; FileMemMap::Open
	cmp	eax, 1
	je	SHORT $LN1@VoiceOpen

; 145  : 	    ShiError("Can't open falcon.tlk");

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_0BB@GJPCNOIL@VoiceManager?4cpp?$AA@
	push	145					; 00000091H
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	edx, DWORD PTR _buffer$1[ebp]
	push	edx
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	push	OFFSET ??_C@_0BG@MLIEFCIA@Can?8t?5open?5falcon?4tlk?$AA@
	lea	eax, DWORD PTR _buffer$1[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	push	-1
	call	_exit
$LN1@VoiceOpen:

; 146  : 	return TRUE;

	mov	eax, 1
$LN3@VoiceOpen:

; 147  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?VoiceOpen@VoiceManager@@QAEHXZ ENDP			; VoiceManager::VoiceOpen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv80 = -4						; size = 4
_channel$ = 8						; size = 4
?BuffersEmpty@VoiceManager@@QAEHH@Z PROC		; VoiceManager::BuffersEmpty
; _this$ = ecx

; 1522 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1523 : 	return ( 
; 1524 : 		VM->falconVoices[channel].voiceBuffers[0].status == BUFFER_NOT_IN_QUEUE &&
; 1525 : 		VM->falconVoices[channel].voiceBuffers[1].status == BUFFER_NOT_IN_QUEUE
; 1526 : 	);

	mov	eax, DWORD PTR _channel$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	add	eax, DWORD PTR [ecx+52]
	mov	edx, 32					; 00000020H
	imul	edx, 0
	cmp	DWORD PTR [eax+edx+8], 0
	jne	SHORT $LN3@BuffersEmp
	mov	eax, DWORD PTR _channel$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	add	eax, DWORD PTR [ecx+52]
	mov	edx, 32					; 00000020H
	shl	edx, 0
	cmp	DWORD PTR [eax+edx+8], 0
	jne	SHORT $LN3@BuffersEmp
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN4@BuffersEmp
$LN3@BuffersEmp:
	mov	DWORD PTR tv80[ebp], 0
$LN4@BuffersEmp:
	mov	eax, DWORD PTR tv80[ebp]

; 1527 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?BuffersEmpty@VoiceManager@@QAEHH@Z ENDP		; VoiceManager::BuffersEmpty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_channel$ = 8						; size = 4
?PauseChannel@VoiceManager@@QAEHH@Z PROC		; VoiceManager::PauseChannel
; _this$ = ecx

; 1511 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1512 : 	if(gSoundDriver)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN1@PauseChann

; 1513 : 	{
; 1514 : 		gSoundDriver->PauseStream(VM->falconVoices[channel].FalcVoiceHandle);

	mov	eax, DWORD PTR _channel$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+eax+68]
	push	eax
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?PauseStream@CSoundMgr@@QAEXJ@Z		; CSoundMgr::PauseStream

; 1515 : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN2@PauseChann
$LN1@PauseChann:

; 1516 : 	}
; 1517 : 	return FALSE;

	xor	eax, eax
$LN2@PauseChann:

; 1518 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?PauseChannel@VoiceManager@@QAEHH@Z ENDP		; VoiceManager::PauseChannel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_channel$ = 8						; size = 4
?ResumeChannel@VoiceManager@@QAEHH@Z PROC		; VoiceManager::ResumeChannel
; _this$ = ecx

; 1498 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1499 : 	if(gSoundDriver)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN2@ResumeChan

; 1500 : 	{
; 1501 : 		if(!gSoundDriver->IsStreamPlaying(VM->falconVoices[channel].FalcVoiceHandle) )

	mov	eax, DWORD PTR _channel$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+eax+68]
	push	eax
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?IsStreamPlaying@CSoundMgr@@QAEHJ@Z	; CSoundMgr::IsStreamPlaying
	test	eax, eax
	jne	SHORT $LN1@ResumeChan

; 1502 : 		{
; 1503 : 			gSoundDriver->ResumeStream(VM->falconVoices[channel].FalcVoiceHandle);

	mov	ecx, DWORD PTR _channel$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	eax, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR [eax+ecx+68]
	push	ecx
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?ResumeStream@CSoundMgr@@QAEXJ@Z	; CSoundMgr::ResumeStream
$LN1@ResumeChan:

; 1504 : 		}
; 1505 : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN3@ResumeChan
$LN2@ResumeChan:

; 1506 : 	}
; 1507 : 	return FALSE;

	xor	eax, eax
$LN3@ResumeChan:

; 1508 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ResumeChannel@VoiceManager@@QAEHH@Z ENDP		; VoiceManager::ResumeChannel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_radio$ = 8						; size = 4
?BackwardCycleFreq@VoiceManager@@QAEXH@Z PROC		; VoiceManager::BackwardCycleFreq
; _this$ = ecx

; 1450 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1451 : 	if(radio < 0 || radio > 1 || !this) {

	cmp	DWORD PTR _radio$[ebp], 0
	jl	SHORT $LN3@BackwardCy
	cmp	DWORD PTR _radio$[ebp], 1
	jg	SHORT $LN3@BackwardCy
	cmp	DWORD PTR _this$[ebp], 0
	jne	SHORT $LN4@BackwardCy
$LN3@BackwardCy:

; 1452 : 		return;

	jmp	SHORT $LN5@BackwardCy
$LN4@BackwardCy:

; 1453 : 	}
; 1454 : 
; 1455 : 	if(radiofilter[radio] == rcfOff) {

	mov	eax, DWORD PTR _radio$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+136], 0
	jne	SHORT $LN2@BackwardCy

; 1456 : 		ChangeRadioFreq( rcfTower, radio );

	mov	edx, DWORD PTR _radio$[ebp]
	push	edx
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeRadioFreq@VoiceManager@@QAEXHH@Z	; VoiceManager::ChangeRadioFreq

; 1457 : 	}
; 1458 : 	else {

	jmp	SHORT $LN5@BackwardCy
$LN2@BackwardCy:

; 1459 : 		ChangeRadioFreq( radiofilter[radio] - 1, radio );

	mov	eax, DWORD PTR _radio$[ebp]
	push	eax
	mov	ecx, DWORD PTR _radio$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+136]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeRadioFreq@VoiceManager@@QAEXHH@Z	; VoiceManager::ChangeRadioFreq
$LN5@BackwardCy:

; 1460 : 	}
; 1461 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?BackwardCycleFreq@VoiceManager@@QAEXH@Z ENDP		; VoiceManager::BackwardCycleFreq
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_radio$ = 8						; size = 4
?ForwardCycleFreq@VoiceManager@@QAEXH@Z PROC		; VoiceManager::ForwardCycleFreq
; _this$ = ecx

; 1435 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1436 : 	if(radio < 0 || radio > 1 || !this) {

	cmp	DWORD PTR _radio$[ebp], 0
	jl	SHORT $LN3@ForwardCyc
	cmp	DWORD PTR _radio$[ebp], 1
	jg	SHORT $LN3@ForwardCyc
	cmp	DWORD PTR _this$[ebp], 0
	jne	SHORT $LN4@ForwardCyc
$LN3@ForwardCyc:

; 1437 : 		return;

	jmp	SHORT $LN5@ForwardCyc
$LN4@ForwardCyc:

; 1438 : 	}
; 1439 : 
; 1440 : 	if(radiofilter[radio] == rcfTower) {

	mov	eax, DWORD PTR _radio$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+136], 15		; 0000000fH
	jne	SHORT $LN2@ForwardCyc

; 1441 : 		ChangeRadioFreq( rcfOff, radio );

	mov	edx, DWORD PTR _radio$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeRadioFreq@VoiceManager@@QAEXHH@Z	; VoiceManager::ChangeRadioFreq

; 1442 : 	}
; 1443 : 	else {

	jmp	SHORT $LN5@ForwardCyc
$LN2@ForwardCyc:

; 1444 : 		ChangeRadioFreq( radiofilter[radio] + 1, radio );

	mov	eax, DWORD PTR _radio$[ebp]
	push	eax
	mov	ecx, DWORD PTR _radio$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+136]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeRadioFreq@VoiceManager@@QAEXHH@Z	; VoiceManager::ChangeRadioFreq
$LN5@ForwardCyc:

; 1445 : 	}
; 1446 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ForwardCycleFreq@VoiceManager@@QAEXH@Z ENDP		; VoiceManager::ForwardCycleFreq
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_radio$ = 8						; size = 4
?GetRadioFreq@VoiceManager@@QAEHH@Z PROC		; VoiceManager::GetRadioFreq
; _this$ = ecx

; 1419 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1420 : 	if (this)

	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN3@GetRadioFr

; 1421 : 	{
; 1422 : 		if(radio >= 0 && radio <= 1)

	cmp	DWORD PTR _radio$[ebp], 0
	jl	SHORT $LN2@GetRadioFr
	cmp	DWORD PTR _radio$[ebp], 1
	jg	SHORT $LN2@GetRadioFr

; 1423 : 			return radiofilter[radio];

	mov	eax, DWORD PTR _radio$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+136]
	jmp	SHORT $LN4@GetRadioFr
$LN2@GetRadioFr:

; 1424 : 
; 1425 : 		return radiofilter[0];

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+edx+136]
	jmp	SHORT $LN4@GetRadioFr

; 1426 : 	}
; 1427 : 	else

	jmp	SHORT $LN4@GetRadioFr
$LN3@GetRadioFr:

; 1428 : 	{
; 1429 : 		return 0;

	xor	eax, eax
$LN4@GetRadioFr:

; 1430 : 	}
; 1431 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetRadioFreq@VoiceManager@@QAEHH@Z ENDP		; VoiceManager::GetRadioFreq
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
$T1 = -12						; size = 4
_this$ = -8						; size = 4
_i$2 = -4						; size = 4
_filter$ = 8						; size = 4
_radio$ = 12						; size = 4
?ChangeRadioFreq@VoiceManager@@QAEXHH@Z PROC		; VoiceManager::ChangeRadioFreq
; _this$ = ecx

; 1465 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1466 : 	F4EnterCriticalSection( VM->vmCriticalSection );

	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	call	_F4EnterCriticalSection
	add	esp, 4

; 1467 : 
; 1468 : 	if(radio >= 0 && radio <= 1)

	cmp	DWORD PTR _radio$[ebp], 0
	jl	SHORT $LN5@ChangeRadi
	cmp	DWORD PTR _radio$[ebp], 1
	jg	SHORT $LN5@ChangeRadi

; 1469 : 		radiofilter[radio] = filter;

	mov	edx, DWORD PTR _radio$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _filter$[ebp]
	mov	DWORD PTR [eax+edx*4+136], ecx
$LN5@ChangeRadi:

; 1470 : 
; 1471 : 	for(int i = 0; i < NUM_VOICE_CHANNELS; i++ )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@ChangeRadi
$LN3@ChangeRadi:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN4@ChangeRadi:
	cmp	DWORD PTR _i$2[ebp], 2
	jge	$LN2@ChangeRadi

; 1472 : 	{
; 1473 : 		if(!FilterMessage(&VM->decompQueue[i]))

	mov	eax, DWORD PTR _i$2[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	lea	edx, DWORD PTR [ecx+eax+56]
	push	edx
	call	?FilterMessage@@YAHPAVCONVERSATION@@@Z	; FilterMessage
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@ChangeRadi

; 1474 : 		{
; 1475 : 			delete [] VM->decompQueue[i].conversations;

	mov	eax, DWORD PTR _i$2[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	edx, DWORD PTR [ecx+eax+92]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 1476 : 			VM->decompQueue[i].conversations = NULL;

	mov	ecx, DWORD PTR _i$2[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	DWORD PTR [edx+ecx+92], 0

; 1477 : 			VM->decompQueue[i].status = SLOT_IS_AVAILABLE;

	mov	eax, DWORD PTR _i$2[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	BYTE PTR [ecx+eax+58], -1

; 1478 : 			VM->falconVoices[i].BufferEmpty( 0 );

	push	0
	mov	ecx, DWORD PTR _i$2[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	add	ecx, DWORD PTR [edx+52]
	call	?BufferEmpty@FalcVoice@@QAEXH@Z		; FalcVoice::BufferEmpty

; 1479 : 			VM->falconVoices[i].BufferEmpty( 1 );

	push	1
	mov	ecx, DWORD PTR _i$2[ebp]
	imul	ecx, 88					; 00000058H
	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	add	ecx, DWORD PTR [eax+52]
	call	?BufferEmpty@FalcVoice@@QAEXH@Z		; FalcVoice::BufferEmpty
$LN1@ChangeRadi:

; 1480 : 		}
; 1481 : 	}

	jmp	$LN3@ChangeRadi
$LN2@ChangeRadi:

; 1482 : 
; 1483 : 	F4LeaveCriticalSection( VM->vmCriticalSection );

	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	edx, DWORD PTR [ecx+148]
	push	edx
	call	_F4LeaveCriticalSection
	add	esp, 4

; 1484 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ChangeRadioFreq@VoiceManager@@QAEXHH@Z ENDP		; VoiceManager::ChangeRadioFreq
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T1 = -20						; size = 4
$T2 = -16						; size = 4
_vmbqNode$ = -12					; size = 4
_next$ = -8						; size = 4
_curr$ = -4						; size = 4
_list$ = 8						; size = 4
?VMListDestroyVBQ@VoiceManager@@QAEPAUVM_BUFFLIST@@PAU2@@Z PROC ; VoiceManager::VMListDestroyVBQ
; _this$ = ecx

; 1395 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1396 : 	VMBuffQueue	*vmbqNode;
; 1397 : 	VM_BUFFLIST	*curr, *next;
; 1398 : 	
; 1399 : 	if ( !list )

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN5@VMListDest

; 1400 : 	    return NULL;

	xor	eax, eax
	jmp	SHORT $LN6@VMListDest
$LN5@VMListDest:

; 1401 : 	
; 1402 : 	// JPO - go FORWARDS through the list stupid!
; 1403 : 	for (curr = list; curr; curr = next)

	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR _curr$[ebp], eax
	jmp	SHORT $LN4@VMListDest
$LN3@VMListDest:
	mov	ecx, DWORD PTR _next$[ebp]
	mov	DWORD PTR _curr$[ebp], ecx
$LN4@VMListDest:
	cmp	DWORD PTR _curr$[ebp], 0
	je	SHORT $LN2@VMListDest

; 1404 : 	{
; 1405 : 	    next = curr->next;

	mov	edx, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _next$[ebp], eax

; 1406 : 	    if ( !curr->node )

	mov	ecx, DWORD PTR _curr$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN1@VMListDest

; 1407 : 		break;

	jmp	SHORT $LN2@VMListDest
$LN1@VMListDest:

; 1408 : 	    
; 1409 : 	    vmbqNode = curr->node;

	mov	edx, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _vmbqNode$[ebp], eax

; 1410 : 	    delete vmbqNode;

	mov	ecx, DWORD PTR _vmbqNode$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1411 : 	    delete curr;

	mov	eax, DWORD PTR _curr$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1412 : 	}

	jmp	SHORT $LN3@VMListDest
$LN2@VMListDest:

; 1413 : 	list = curr;

	mov	edx, DWORD PTR _curr$[ebp]
	mov	DWORD PTR _list$[ebp], edx

; 1414 : 	return( list );

	mov	eax, DWORD PTR _list$[ebp]
$LN6@VMListDest:

; 1415 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?VMListDestroyVBQ@VoiceManager@@QAEPAUVM_BUFFLIST@@PAU2@@Z ENDP ; VoiceManager::VMListDestroyVBQ
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T1 = -24						; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
_next$ = -12						; size = 4
_vmVCNode$ = -8						; size = 4
_curr$ = -4						; size = 4
_list$ = 8						; size = 4
?VMListDestroyVCQ@VoiceManager@@QAEPAUVM_CONVLIST@@PAU2@@Z PROC ; VoiceManager::VMListDestroyVCQ
; _this$ = ecx

; 1371 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 1372 : 	CONVERSATION	*vmVCNode;
; 1373 : 	VM_CONVLIST		*curr, *next;
; 1374 : 	
; 1375 : 	if ( !list )

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN5@VMListDest

; 1376 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN6@VMListDest
$LN5@VMListDest:

; 1377 : 	// JPO - go FORWARDS through the list stupid!
; 1378 : 	for (curr = list; curr; curr = next)

	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR _curr$[ebp], eax
	jmp	SHORT $LN4@VMListDest
$LN3@VMListDest:
	mov	ecx, DWORD PTR _next$[ebp]
	mov	DWORD PTR _curr$[ebp], ecx
$LN4@VMListDest:
	cmp	DWORD PTR _curr$[ebp], 0
	je	SHORT $LN2@VMListDest

; 1379 : 	{
; 1380 : 	    next = curr->next;

	mov	edx, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _next$[ebp], eax

; 1381 : 	    if ( !curr->node )

	mov	ecx, DWORD PTR _curr$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN1@VMListDest

; 1382 : 		break;

	jmp	SHORT $LN2@VMListDest
$LN1@VMListDest:

; 1383 : 	    
; 1384 : 	    vmVCNode = curr->node;

	mov	edx, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _vmVCNode$[ebp], eax

; 1385 : 	    
; 1386 : 	    delete [] vmVCNode->conversations;

	mov	ecx, DWORD PTR _vmVCNode$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 1387 : 	    delete vmVCNode;

	mov	ecx, DWORD PTR _vmVCNode$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1388 : 	    delete curr;

	mov	eax, DWORD PTR _curr$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1389 : 	}

	jmp	SHORT $LN3@VMListDest
$LN2@VMListDest:

; 1390 : 	list = curr;

	mov	edx, DWORD PTR _curr$[ebp]
	mov	DWORD PTR _list$[ebp], edx

; 1391 : 	return( list );

	mov	eax, DWORD PTR _list$[ebp]
$LN6@VMListDest:

; 1392 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?VMListDestroyVCQ@VoiceManager@@QAEPAUVM_CONVLIST@@PAU2@@Z ENDP ; VoiceManager::VMListDestroyVCQ
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_channel_a$ = -4					; size = 4
_node_a$ = 8						; size = 4
_channelNum$ = 12					; size = 4
?ListCheckChannelNum@VoiceManager@@QAEHPAXH@Z PROC	; VoiceManager::ListCheckChannelNum
; _this$ = ecx

; 1234 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1235 : 	VMBuffQueue	*channel_a;
; 1236 : 	
; 1237 : 	if ( !node_a )

	cmp	DWORD PTR _node_a$[ebp], 0
	jne	SHORT $LN2@ListCheckC

; 1238 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@ListCheckC
$LN2@ListCheckC:

; 1239 : 	
; 1240 : 	channel_a = ( VMBuffQueue * ) node_a;

	mov	eax, DWORD PTR _node_a$[ebp]
	mov	DWORD PTR _channel_a$[ebp], eax

; 1241 : 	
; 1242 : 	if( channel_a->channel == channelNum )

	mov	ecx, DWORD PTR _channel_a$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _channelNum$[ebp]
	jne	SHORT $LN1@ListCheckC

; 1243 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN3@ListCheckC
$LN1@ListCheckC:

; 1244 : 	
; 1245 : 	return 1;

	mov	eax, 1
$LN3@ListCheckC:

; 1246 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ListCheckChannelNum@VoiceManager@@QAEHPAXH@Z ENDP	; VoiceManager::ListCheckChannelNum
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_l$ = -12						; size = 4
tv67 = -8						; size = 4
_this$ = -4						; size = 4
_list$ = 8						; size = 4
_channelNum$ = 12					; size = 4
_searchType$ = 16					; size = 4
?VMListSearchVMBQ@VoiceManager@@QAEPAUVM_BUFFLIST@@PAU2@HH@Z PROC ; VoiceManager::VMListSearchVMBQ
; _this$ = ecx

; 1210 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1211 : 	VM_BUFFLIST	*l;
; 1212 : 	
; 1213 : 	if ( !list )

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN9@VMListSear

; 1214 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN10@VMListSear
$LN9@VMListSear:

; 1215 : 	
; 1216 : 	for( l = list; list; list = list->next )

	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR _l$[ebp], eax
	jmp	SHORT $LN8@VMListSear
$LN7@VMListSear:
	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _list$[ebp], edx
$LN8@VMListSear:
	cmp	DWORD PTR _list$[ebp], 0
	je	SHORT $LN6@VMListSear

; 1217 : 	{
; 1218 : 		switch ( searchType )

	mov	eax, DWORD PTR _searchType$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	cmp	DWORD PTR tv67[ebp], 0
	je	SHORT $LN3@VMListSear
	jmp	SHORT $LN4@VMListSear
$LN3@VMListSear:

; 1219 : 		{
; 1220 : 		case SEARCH_AND_DESTROY:
; 1221 : 			if ( !ListCheckChannelNum( list->node, channelNum ) )

	mov	ecx, DWORD PTR _channelNum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ListCheckChannelNum@VoiceManager@@QAEHPAXH@Z ; VoiceManager::ListCheckChannelNum
	test	eax, eax
	jne	SHORT $LN4@VMListSear

; 1222 : 			{
; 1223 : 				list = VMListRemoveVMBQ( list );

	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?VMListRemoveVMBQ@VoiceManager@@QAEPAUVM_BUFFLIST@@PAU2@@Z ; VoiceManager::VMListRemoveVMBQ
	mov	DWORD PTR _list$[ebp], eax

; 1224 : 				if ( !list )

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN4@VMListSear

; 1225 : 					return NULL;

	xor	eax, eax
	jmp	SHORT $LN10@VMListSear
$LN4@VMListSear:

; 1226 : 			}
; 1227 : 			break;
; 1228 : 		};
; 1229 : 	}

	jmp	SHORT $LN7@VMListSear
$LN6@VMListSear:

; 1230 : 	return( list );

	mov	eax, DWORD PTR _list$[ebp]
$LN10@VMListSear:

; 1231 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?VMListSearchVMBQ@VoiceManager@@QAEPAUVM_BUFFLIST@@PAU2@HH@Z ENDP ; VoiceManager::VMListSearchVMBQ
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
_vmNode$ = 8						; size = 4
?VMDeleteNode@VoiceManager@@QAEXPAUVMBuffQueue@@@Z PROC	; VoiceManager::VMDeleteNode
; _this$ = ecx

; 1195 : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1196 : 	delete vmNode;

	mov	eax, DWORD PTR _vmNode$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1197 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?VMDeleteNode@VoiceManager@@QAEXPAUVMBuffQueue@@@Z ENDP	; VoiceManager::VMDeleteNode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_next$ = -4						; size = 4
_list$ = 8						; size = 4
?VMListPopVMBQ@VoiceManager@@QAEPAUVM_BUFFLIST@@PAU2@@Z PROC ; VoiceManager::VMListPopVMBQ
; _this$ = ecx

; 1146 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1147 : 	VM_BUFFLIST	*next;
; 1148 : 	
; 1149 : 	if ( !list )

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN2@VMListPopV

; 1150 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@VMListPopV
$LN2@VMListPopV:

; 1151 : 	
; 1152 : 	next = list->next;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _next$[ebp], ecx

; 1153 : 	if(next)

	cmp	DWORD PTR _next$[ebp], 0
	je	SHORT $LN1@VMListPopV

; 1154 : 		next->prev = NULL;

	mov	edx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [edx+8], 0
$LN1@VMListPopV:

; 1155 : 	
; 1156 : 	delete list->node;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1157 : 	list->node = NULL;

	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax], 0

; 1158 : 	
; 1159 : 	delete list;

	mov	ecx, DWORD PTR _list$[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1160 : 	list = NULL;

	mov	DWORD PTR _list$[ebp], 0

; 1161 : 
; 1162 : 	return( next );

	mov	eax, DWORD PTR _next$[ebp]
$LN3@VMListPopV:

; 1163 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?VMListPopVMBQ@VoiceManager@@QAEPAUVM_BUFFLIST@@PAU2@@Z ENDP ; VoiceManager::VMListPopVMBQ
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T1 = -20						; size = 4
$T2 = -16						; size = 4
_vmbqNode$ = -12					; size = 4
_next$ = -8						; size = 4
_curr$ = -4						; size = 4
_list$ = 8						; size = 4
?VMListRemoveVMBQ@VoiceManager@@QAEPAUVM_BUFFLIST@@PAU2@@Z PROC ; VoiceManager::VMListRemoveVMBQ
; _this$ = ecx

; 1168 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1169 : 	VMBuffQueue	*vmbqNode;
; 1170 : 	VM_BUFFLIST	*curr, *next;
; 1171 : 	
; 1172 : 	if ( !list )

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN4@VMListRemo

; 1173 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN5@VMListRemo
$LN4@VMListRemo:

; 1174 : 	
; 1175 : 	curr = list;

	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR _curr$[ebp], eax

; 1176 : 	next = list->next;

	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _next$[ebp], edx

; 1177 : 	if(next)

	cmp	DWORD PTR _next$[ebp], 0
	je	SHORT $LN3@VMListRemo

; 1178 : 		next->prev = curr->prev;

	mov	eax, DWORD PTR _next$[ebp]
	mov	ecx, DWORD PTR _curr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
$LN3@VMListRemo:

; 1179 : 	
; 1180 : 	if ( curr->node )

	mov	eax, DWORD PTR _curr$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@VMListRemo

; 1181 : 	{
; 1182 : 		vmbqNode = curr->node;

	mov	ecx, DWORD PTR _curr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _vmbqNode$[ebp], edx

; 1183 : 		delete vmbqNode;

	mov	eax, DWORD PTR _vmbqNode$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1184 : 		
; 1185 : 		if ( curr->prev )

	mov	edx, DWORD PTR _curr$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN1@VMListRemo

; 1186 : 			curr->prev->next = curr->next;

	mov	eax, DWORD PTR _curr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
$LN1@VMListRemo:

; 1187 : 		delete curr;

	mov	ecx, DWORD PTR _curr$[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1188 : 		curr = NULL;

	mov	DWORD PTR _curr$[ebp], 0
$LN2@VMListRemo:

; 1189 : 	}
; 1190 : 	
; 1191 : 	return( next );

	mov	eax, DWORD PTR _next$[ebp]
$LN5@VMListRemo:

; 1192 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?VMListRemoveVMBQ@VoiceManager@@QAEPAUVM_BUFFLIST@@PAU2@@Z ENDP ; VoiceManager::VMListRemoveVMBQ
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T1 = -24						; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
_next$ = -12						; size = 4
_prev$ = -8						; size = 4
_curr$ = -4						; size = 4
_list$ = 8						; size = 4
_node$ = 12						; size = 4
?VMListRemoveVCQ@VoiceManager@@QAEXPAPAUVM_CONVLIST@@PAU2@@Z PROC ; VoiceManager::VMListRemoveVCQ
; _this$ = ecx

; 1106 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 1107 : 	VM_CONVLIST		*curr, *next, *prev;
; 1108 : 
; 1109 : 	//F4EnterCriticalSection( vmCriticalSection );
; 1110 : 	
; 1111 : 	if ( !*list )

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN5@VMListRemo

; 1112 : 		return;

	jmp	$LN6@VMListRemo
$LN5@VMListRemo:

; 1113 : 	
; 1114 : 	if(*list == node)

	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _node$[ebp]
	jne	SHORT $LN4@VMListRemo

; 1115 : 		*list = node->next;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
$LN4@VMListRemo:

; 1116 : 
; 1117 : 	curr = node;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR _curr$[ebp], eax

; 1118 : 	prev = curr->prev;

	mov	ecx, DWORD PTR _curr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _prev$[ebp], edx

; 1119 : 	if(prev)

	cmp	DWORD PTR _prev$[ebp], 0
	je	SHORT $LN3@VMListRemo

; 1120 : 		prev->next = curr->next;

	mov	eax, DWORD PTR _prev$[ebp]
	mov	ecx, DWORD PTR _curr$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
$LN3@VMListRemo:

; 1121 : 	next = curr->next;

	mov	eax, DWORD PTR _curr$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _next$[ebp], ecx

; 1122 : 	if ( next )

	cmp	DWORD PTR _next$[ebp], 0
	je	SHORT $LN2@VMListRemo

; 1123 : 		next->prev = prev;

	mov	edx, DWORD PTR _next$[ebp]
	mov	eax, DWORD PTR _prev$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@VMListRemo:

; 1124 : 
; 1125 : #ifdef DAVE_DBG
; 1126 : 	//MonoPrint("Message removed from channel: %d message: %d\n", curr->node->channelIndex, curr->node->message);
; 1127 : #endif
; 1128 : 
; 1129 : 	if ( curr->node )

	mov	ecx, DWORD PTR _curr$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN6@VMListRemo

; 1130 : 	{
; 1131 : 		delete [] curr->node->conversations;

	mov	edx, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 1132 : 		curr->node->conversations = NULL;

	mov	eax, DWORD PTR _curr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+36], 0

; 1133 : 		delete curr->node;

	mov	edx, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1134 : 		curr->node = NULL;

	mov	edx, DWORD PTR _curr$[ebp]
	mov	DWORD PTR [edx], 0

; 1135 : 		
; 1136 : 		delete curr;

	mov	eax, DWORD PTR _curr$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1137 : 		curr = NULL;

	mov	DWORD PTR _curr$[ebp], 0
$LN6@VMListRemo:

; 1138 : 	}
; 1139 : 
; 1140 : 	//F4LeaveCriticalSection( vmCriticalSection );
; 1141 : 	return;
; 1142 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?VMListRemoveVCQ@VoiceManager@@QAEXPAPAUVM_CONVLIST@@PAU2@@Z ENDP ; VoiceManager::VMListRemoveVCQ
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
$T1 = -20						; size = 4
_newlist$ = -16						; size = 4
_this$ = -12						; size = 4
_newnode$ = -8						; size = 4
_tmpPtr$ = -4						; size = 4
_list$ = 8						; size = 4
_node$ = 12						; size = 4
?VMBuffListAppend@VoiceManager@@QAEPAUVM_BUFFLIST@@PAU2@PAUVMBuffQueue@@@Z PROC ; VoiceManager::VMBuffListAppend
; _this$ = ecx

; 1027 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 1028 : 	VM_BUFFLIST * newnode;
; 1029 : 	VM_BUFFLIST * tmpPtr = list;

	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR _tmpPtr$[ebp], eax

; 1030 : 	VM_BUFFLIST * newlist = list;

	mov	ecx, DWORD PTR _list$[ebp]
	mov	DWORD PTR _newlist$[ebp], ecx

; 1031 : 	
; 1032 : 	newnode = new VM_BUFFLIST;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _newnode$[ebp], edx

; 1033 : 	
; 1034 : 	newnode->node = node;

	mov	eax, DWORD PTR _newnode$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax], ecx

; 1035 : 	newnode->next = NULL;

	mov	edx, DWORD PTR _newnode$[ebp]
	mov	DWORD PTR [edx+4], 0

; 1036 : 	newnode->prev = NULL;

	mov	eax, DWORD PTR _newnode$[ebp]
	mov	DWORD PTR [eax+8], 0

; 1037 : 	
; 1038 : 	F4EnterCriticalSection( vmCriticalSection );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	push	edx
	call	_F4EnterCriticalSection
	add	esp, 4

; 1039 : 	
; 1040 : 	if ( tmpPtr != NULL )

	cmp	DWORD PTR _tmpPtr$[ebp], 0
	je	SHORT $LN4@VMBuffList
$LN3@VMBuffList:

; 1041 : 	{
; 1042 : 		while( tmpPtr->next != NULL )

	mov	eax, DWORD PTR _tmpPtr$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@VMBuffList

; 1043 : 			tmpPtr = tmpPtr->next;

	mov	ecx, DWORD PTR _tmpPtr$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _tmpPtr$[ebp], edx
	jmp	SHORT $LN3@VMBuffList
$LN2@VMBuffList:

; 1044 : 		
; 1045 : 		newnode->prev = tmpPtr;

	mov	eax, DWORD PTR _newnode$[ebp]
	mov	ecx, DWORD PTR _tmpPtr$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1046 : 		tmpPtr->next = newnode;

	mov	edx, DWORD PTR _tmpPtr$[ebp]
	mov	eax, DWORD PTR _newnode$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1047 : 		
; 1048 : 	}
; 1049 : 	else

	jmp	SHORT $LN1@VMBuffList
$LN4@VMBuffList:

; 1050 : 	{
; 1051 : 		newlist = newnode;

	mov	ecx, DWORD PTR _newnode$[ebp]
	mov	DWORD PTR _newlist$[ebp], ecx
$LN1@VMBuffList:

; 1052 : 	}
; 1053 : 	
; 1054 : 
; 1055 : 	F4LeaveCriticalSection( vmCriticalSection );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	push	eax
	call	_F4LeaveCriticalSection
	add	esp, 4

; 1056 : 	
; 1057 : 	return( newlist );

	mov	eax, DWORD PTR _newlist$[ebp]

; 1058 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?VMBuffListAppend@VoiceManager@@QAEPAUVM_BUFFLIST@@PAU2@PAUVMBuffQueue@@@Z ENDP ; VoiceManager::VMBuffListAppend
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv65 = -12						; size = 4
_prev$ = -8						; size = 4
_cur$ = -4						; size = 4
_list$ = 8						; size = 4
_newnode$ = 12						; size = 4
_insType$ = 16						; size = 4
?VMConvListInsert@VoiceManager@@QAEPAUVM_CONVLIST@@PAU2@0H@Z PROC ; VoiceManager::VMConvListInsert
; _this$ = ecx

; 961  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 962  : 	if(!newnode)

	cmp	DWORD PTR _newnode$[ebp], 0
	jne	SHORT $LN18@VMConvList

; 963  : 		return list;

	mov	eax, DWORD PTR _list$[ebp]
	jmp	$LN19@VMConvList
$LN18@VMConvList:

; 964  : 	
; 965  : 	VM_CONVLIST *prev = NULL;

	mov	DWORD PTR _prev$[ebp], 0

; 966  : 	VM_CONVLIST *cur = list;

	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR _cur$[ebp], eax

; 967  : 	
; 968  : 	
; 969  : 
; 970  : 	switch(insType)

	mov	ecx, DWORD PTR _insType$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 0
	je	SHORT $LN14@VMConvList
	cmp	DWORD PTR tv65[ebp], 1
	je	$LN8@VMConvList
	jmp	$LN1@VMConvList
$LN14@VMConvList:

; 971  : 	{
; 972  : 	case SORT_TIME:
; 973  : 		while(cur && (newnode->node->playTime >= cur->node->playTime ) )

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN13@VMConvList
	mov	edx, DWORD PTR _newnode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+12]
	cmp	eax, DWORD PTR [edx+12]
	jb	SHORT $LN13@VMConvList

; 974  : 		{
; 975  : 			prev=cur;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _prev$[ebp], ecx

; 976  : 			cur=cur->next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _cur$[ebp], eax

; 977  : 		}

	jmp	SHORT $LN14@VMConvList
$LN13@VMConvList:

; 978  : 		if(!prev)

	cmp	DWORD PTR _prev$[ebp], 0
	jne	SHORT $LN12@VMConvList

; 979  : 		{
; 980  : 			newnode->next = list;

	mov	ecx, DWORD PTR _newnode$[ebp]
	mov	edx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 981  : 			if(list)

	cmp	DWORD PTR _list$[ebp], 0
	je	SHORT $LN11@VMConvList

; 982  : 				list->prev = newnode;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR _newnode$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN11@VMConvList:

; 983  : 			return newnode;

	mov	eax, DWORD PTR _newnode$[ebp]
	jmp	$LN19@VMConvList
$LN12@VMConvList:

; 984  : 		}
; 985  : 		newnode->next = cur;

	mov	edx, DWORD PTR _newnode$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+4], eax

; 986  : 		newnode->prev = prev;

	mov	ecx, DWORD PTR _newnode$[ebp]
	mov	edx, DWORD PTR _prev$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 987  : 		prev->next = newnode;

	mov	eax, DWORD PTR _prev$[ebp]
	mov	ecx, DWORD PTR _newnode$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 988  : 		if(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN10@VMConvList

; 989  : 			cur->prev = newnode;		

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR _newnode$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN10@VMConvList:

; 990  : 		return list;	

	mov	eax, DWORD PTR _list$[ebp]
	jmp	$LN19@VMConvList

; 991  : 		
; 992  : 		break;

	jmp	$LN19@VMConvList
$LN8@VMConvList:

; 993  : 	case SORT_TIME_PRIORITY:
; 994  : 		while(cur && (newnode->node->playTime >= cur->node->playTime)  )

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN6@VMConvList
	mov	ecx, DWORD PTR _newnode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+12]
	cmp	edx, DWORD PTR [ecx+12]
	jb	SHORT $LN6@VMConvList

; 995  : 		{
; 996  : 			prev=cur;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _prev$[ebp], eax

; 997  : 			cur=cur->next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _cur$[ebp], edx

; 998  : 		}

	jmp	SHORT $LN8@VMConvList
$LN6@VMConvList:

; 999  : 		while(cur && (newnode->node->priority <= cur->node->priority) &&
; 1000 : 			(newnode->node->playTime == cur->node->playTime) )

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN5@VMConvList
	mov	eax, DWORD PTR _newnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+6]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	eax, BYTE PTR [ecx+6]
	cmp	edx, eax
	jg	SHORT $LN5@VMConvList
	mov	ecx, DWORD PTR _newnode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+12]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN5@VMConvList

; 1001 : 		{
; 1002 : 			prev=cur;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _prev$[ebp], eax

; 1003 : 			cur=cur->next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _cur$[ebp], edx

; 1004 : 		}

	jmp	SHORT $LN6@VMConvList
$LN5@VMConvList:

; 1005 : 		
; 1006 : 		if(!prev)

	cmp	DWORD PTR _prev$[ebp], 0
	jne	SHORT $LN4@VMConvList

; 1007 : 		{
; 1008 : 			newnode->next = list;

	mov	eax, DWORD PTR _newnode$[ebp]
	mov	ecx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1009 : 			if(list)

	cmp	DWORD PTR _list$[ebp], 0
	je	SHORT $LN3@VMConvList

; 1010 : 				list->prev = newnode;

	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR _newnode$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN3@VMConvList:

; 1011 : 			return newnode;

	mov	eax, DWORD PTR _newnode$[ebp]
	jmp	SHORT $LN19@VMConvList
$LN4@VMConvList:

; 1012 : 		}
; 1013 : 		newnode->next = cur;

	mov	ecx, DWORD PTR _newnode$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 1014 : 		newnode->prev = prev;

	mov	eax, DWORD PTR _newnode$[ebp]
	mov	ecx, DWORD PTR _prev$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1015 : 		prev->next = newnode;

	mov	edx, DWORD PTR _prev$[ebp]
	mov	eax, DWORD PTR _newnode$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1016 : 		if(cur)

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN2@VMConvList

; 1017 : 			cur->prev = newnode;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR _newnode$[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN2@VMConvList:

; 1018 : 		
; 1019 : 		return list;

	mov	eax, DWORD PTR _list$[ebp]
	jmp	SHORT $LN19@VMConvList

; 1020 : 		break;

	jmp	SHORT $LN19@VMConvList
$LN1@VMConvList:

; 1021 : 	default:
; 1022 : 		return list;

	mov	eax, DWORD PTR _list$[ebp]
$LN19@VMConvList:

; 1023 : 	}
; 1024 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?VMConvListInsert@VoiceManager@@QAEPAUVM_CONVLIST@@PAU2@0H@Z ENDP ; VoiceManager::VMConvListInsert
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
$T1 = -12						; size = 4
_this$ = -8						; size = 4
_vmBuffer$ = -4						; size = 4
_channel$ = 8						; size = 4
_buffer$ = 12						; size = 4
?VMAddBuffToQueue@VoiceManager@@QAEXHH@Z PROC		; VoiceManager::VMAddBuffToQueue
; _this$ = ecx

; 944  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 945  : 	VMBuffQueue *vmBuffer = NULL;

	mov	DWORD PTR _vmBuffer$[ebp], 0

; 946  : 	
; 947  : 	vmBuffer = new VMBuffQueue;

	push	8
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _vmBuffer$[ebp], eax

; 948  : 	
; 949  : 	if ( vmBuffer )

	cmp	DWORD PTR _vmBuffer$[ebp], 0
	je	SHORT $LN2@VMAddBuffT

; 950  : 	{
; 951  : 		vmBuffer->channel = channel;

	mov	ecx, DWORD PTR _vmBuffer$[ebp]
	mov	edx, DWORD PTR _channel$[ebp]
	mov	DWORD PTR [ecx], edx

; 952  : 		vmBuffer->buff = buffer;

	mov	eax, DWORD PTR _vmBuffer$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 953  : 		
; 954  : 		F4EnterCriticalSection( vmCriticalSection );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	push	eax
	call	_F4EnterCriticalSection
	add	esp, 4

; 955  : 		voiceBufferQueue = VMBuffListAppend( voiceBufferQueue, vmBuffer );

	mov	ecx, DWORD PTR _vmBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?voiceBufferQueue@@3PAUVM_BUFFLIST@@A ; voiceBufferQueue
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?VMBuffListAppend@VoiceManager@@QAEPAUVM_BUFFLIST@@PAU2@PAUVMBuffQueue@@@Z ; VoiceManager::VMBuffListAppend
	mov	DWORD PTR ?voiceBufferQueue@@3PAUVM_BUFFLIST@@A, eax ; voiceBufferQueue

; 956  : 		F4LeaveCriticalSection( vmCriticalSection );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	call	_F4LeaveCriticalSection
	add	esp, 4
$LN2@VMAddBuffT:

; 957  : 	}
; 958  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?VMAddBuffToQueue@VoiceManager@@QAEXHH@Z ENDP		; VoiceManager::VMAddBuffToQueue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_channel$ = 8						; size = 4
?VMSilenceChannel@VoiceManager@@QAEXH@Z PROC		; VoiceManager::VMSilenceChannel
; _this$ = ecx

; 894  : {	

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 895  : 	if(channel < NUM_VOICE_CHANNELS && channel >= 0 )

	cmp	DWORD PTR _channel$[ebp], 2
	jge	SHORT $LN2@VMSilenceC
	cmp	DWORD PTR _channel$[ebp], 0
	jl	SHORT $LN2@VMSilenceC

; 896  : 		falconVoices[channel].SilenceVoices();

	mov	ecx, DWORD PTR _channel$[ebp]
	imul	ecx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+52]
	call	?SilenceVoices@FalcVoice@@QAEXXZ	; FalcVoice::SilenceVoices
$LN2@VMSilenceC:

; 897  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?VMSilenceChannel@VoiceManager@@QAEXH@Z ENDP		; VoiceManager::VMSilenceChannel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = -4						; size = 4
?VMSilenceVoices@VoiceManager@@QAEXXZ PROC		; VoiceManager::VMSilenceVoices
; _this$ = ecx

; 887  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 888  : 	int i;
; 889  : 	for ( i = 0; i < NUM_VOICE_CHANNELS; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@VMSilenceV
$LN2@VMSilenceV:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@VMSilenceV:
	cmp	DWORD PTR _i$[ebp], 2
	jge	SHORT $LN4@VMSilenceV

; 890  : 		falconVoices[i].SilenceVoices();

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+52]
	call	?SilenceVoices@FalcVoice@@QAEXXZ	; FalcVoice::SilenceVoices
	jmp	SHORT $LN2@VMSilenceV
$LN4@VMSilenceV:

; 891  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?VMSilenceVoices@VoiceManager@@QAEXXZ ENDP		; VoiceManager::VMSilenceVoices
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_channel$ = 8						; size = 4
?VMHearChannel@VoiceManager@@QAEXH@Z PROC		; VoiceManager::VMHearChannel
; _this$ = ecx

; 881  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 882  : 	if(channel < NUM_VOICE_CHANNELS && channel >= 0 )

	cmp	DWORD PTR _channel$[ebp], 2
	jge	SHORT $LN2@VMHearChan
	cmp	DWORD PTR _channel$[ebp], 0
	jl	SHORT $LN2@VMHearChan

; 883  : 		falconVoices[channel].UnsilenceVoices(channel + COM1_SOUND_GROUP);

	mov	eax, DWORD PTR _channel$[ebp]
	add	eax, 3
	push	eax
	mov	ecx, DWORD PTR _channel$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+52]
	call	?UnsilenceVoices@FalcVoice@@QAEXH@Z	; FalcVoice::UnsilenceVoices
$LN2@VMHearChan:

; 884  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?VMHearChannel@VoiceManager@@QAEXH@Z ENDP		; VoiceManager::VMHearChannel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = -4						; size = 4
?VMHearVoices@VoiceManager@@QAEXXZ PROC			; VoiceManager::VMHearVoices
; _this$ = ecx

; 874  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 875  : 	int i;
; 876  : 	for ( i = 0; i < NUM_VOICE_CHANNELS; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@VMHearVoic
$LN2@VMHearVoic:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@VMHearVoic:
	cmp	DWORD PTR _i$[ebp], 2
	jge	SHORT $LN4@VMHearVoic

; 877  : 		falconVoices[i].UnsilenceVoices(i + COM1_SOUND_GROUP);

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 3
	push	ecx
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+52]
	call	?UnsilenceVoices@FalcVoice@@QAEXH@Z	; FalcVoice::UnsilenceVoices
	jmp	SHORT $LN2@VMHearVoic
$LN4@VMHearVoic:

; 878  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?VMHearVoices@VoiceManager@@QAEXXZ ENDP			; VoiceManager::VMHearVoices
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
tv145 = -36						; size = 4
$T1 = -32						; size = 4
tv138 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
$T4 = -16						; size = 4
$T5 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?VMCleanup@VoiceManager@@QAEXXZ PROC			; VoiceManager::VMCleanup
; _this$ = ecx

; 899  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 900  : 	int i;
; 901  : 
; 902  : 	killThread = TRUE;

	mov	DWORD PTR ?killThread@@3HA, 1		; killThread

; 903  : 	SetEvent( VMWakeEventHandle );

	mov	eax, DWORD PTR ?VMWakeEventHandle@@3PAXA ; VMWakeEventHandle
	push	eax
	call	DWORD PTR __imp__SetEvent@4

; 904  : 	
; 905  : 	F4EnterCriticalSection( vmCriticalSection );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	push	edx
	call	_F4EnterCriticalSection
	add	esp, 4

; 906  : 	if ( voiceBufferQueue != NULL )

	cmp	DWORD PTR ?voiceBufferQueue@@3PAUVM_BUFFLIST@@A, 0 ; voiceBufferQueue
	je	SHORT $LN8@VMCleanup

; 907  : 	{
; 908  : 		voiceBufferQueue = VMListDestroyVBQ( voiceBufferQueue );

	mov	eax, DWORD PTR ?voiceBufferQueue@@3PAUVM_BUFFLIST@@A ; voiceBufferQueue
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?VMListDestroyVBQ@VoiceManager@@QAEPAUVM_BUFFLIST@@PAU2@@Z ; VoiceManager::VMListDestroyVBQ
	mov	DWORD PTR ?voiceBufferQueue@@3PAUVM_BUFFLIST@@A, eax ; voiceBufferQueue

; 909  : 		voiceBufferQueue = NULL;

	mov	DWORD PTR ?voiceBufferQueue@@3PAUVM_BUFFLIST@@A, 0 ; voiceBufferQueue
$LN8@VMCleanup:

; 910  : 	}
; 911  : 
; 912  : 	for ( i = 0; i < NUM_VOICE_CHANNELS; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@VMCleanup
$LN6@VMCleanup:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN7@VMCleanup:
	cmp	DWORD PTR _i$[ebp], 2
	jge	$LN5@VMCleanup

; 913  : 	{
; 914  : 		if ( voiceChannelQueue[i] != NULL )

	mov	edx, DWORD PTR _i$[ebp]
	cmp	DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[edx*4], 0
	je	SHORT $LN4@VMCleanup

; 915  : 		{
; 916  : 			voiceChannelQueue[i] = VMListDestroyVCQ( voiceChannelQueue[i] );

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[eax*4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?VMListDestroyVCQ@VoiceManager@@QAEPAUVM_CONVLIST@@PAU2@@Z ; VoiceManager::VMListDestroyVCQ
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[edx*4], eax

; 917  : 			voiceChannelQueue[i] = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[eax*4], 0
$LN4@VMCleanup:

; 918  : 		}
; 919  : 
; 920  : 		if(VM->decompQueue[i].conversations != NULL)

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [edx+ecx+92], 0
	je	SHORT $LN3@VMCleanup

; 921  : 		{
; 922  : 			delete [] VM->decompQueue[i].conversations;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	edx, DWORD PTR [ecx+eax+92]
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 923  : 			VM->decompQueue[i].conversations = NULL;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	DWORD PTR [edx+ecx+92], 0
$LN3@VMCleanup:

; 924  : 		}
; 925  : 	}

	jmp	$LN6@VMCleanup
$LN5@VMCleanup:

; 926  : 	if ( falconVoices != NULL )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN2@VMCleanup

; 927  : 		delete [] falconVoices;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T5[ebp], eax
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN11@VMCleanup
	push	3
	mov	ecx, DWORD PTR $T5[ebp]
	call	??_EFalcVoice@@QAEPAXI@Z
	mov	DWORD PTR tv138[ebp], eax
	jmp	SHORT $LN2@VMCleanup
$LN11@VMCleanup:
	mov	DWORD PTR tv138[ebp], 0
$LN2@VMCleanup:

; 928  : 	
; 929  : 	falconVoices = NULL;	

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], 0

; 930  : 	delete lhspPtr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN13@VMCleanup
	push	1
	mov	ecx, DWORD PTR $T4[ebp]
	call	??_GLHSP@@QAEPAXI@Z
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN14@VMCleanup
$LN13@VMCleanup:
	mov	DWORD PTR tv145[ebp], 0
$LN14@VMCleanup:

; 931  : 	
; 932  : 	F4LeaveCriticalSection( vmCriticalSection );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	push	eax
	call	_F4LeaveCriticalSection
	add	esp, 4

; 933  : 
; 934  : 	// edg: destroy critical section for voicemanager
; 935  : 	if ( vmCriticalSection != NULL )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+148], 0
	je	SHORT $LN1@VMCleanup

; 936  : 	{
; 937  : 		F4DestroyCriticalSection( vmCriticalSection );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	push	eax
	call	_F4DestroyCriticalSection
	add	esp, 4

; 938  : 		vmCriticalSection = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN1@VMCleanup:

; 939  : 	}
; 940  : 	voiceMap.Close();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@FileMemMap@@QAEXXZ		; FileMemMap::Close

; 941  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?VMCleanup@VoiceManager@@QAEXXZ ENDP			; VoiceManager::VMCleanup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
$T1 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_channel$ = 8						; size = 4
?VMResetVoice@VoiceManager@@QAEXH@Z PROC		; VoiceManager::VMResetVoice
; _this$ = ecx

; 755  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 756  : 	F4EnterCriticalSection( vmCriticalSection );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	call	_F4EnterCriticalSection
	add	esp, 4

; 757  : 	
; 758  : 	int i;
; 759  : 
; 760  : 	if ( voiceBufferQueue != NULL )

	cmp	DWORD PTR ?voiceBufferQueue@@3PAUVM_BUFFLIST@@A, 0 ; voiceBufferQueue
	je	SHORT $LN11@VMResetVoi

; 761  : 	{
; 762  : 		voiceBufferQueue = VMListDestroyVBQ( voiceBufferQueue );

	mov	edx, DWORD PTR ?voiceBufferQueue@@3PAUVM_BUFFLIST@@A ; voiceBufferQueue
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?VMListDestroyVBQ@VoiceManager@@QAEPAUVM_BUFFLIST@@PAU2@@Z ; VoiceManager::VMListDestroyVBQ
	mov	DWORD PTR ?voiceBufferQueue@@3PAUVM_BUFFLIST@@A, eax ; voiceBufferQueue

; 763  : 		voiceBufferQueue = NULL;

	mov	DWORD PTR ?voiceBufferQueue@@3PAUVM_BUFFLIST@@A, 0 ; voiceBufferQueue
$LN11@VMResetVoi:

; 764  : 	}
; 765  : 
; 766  : 	for(i = 0; i < NUM_VOICE_CHANNELS; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@VMResetVoi
$LN9@VMResetVoi:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@VMResetVoi:
	cmp	DWORD PTR _i$[ebp], 2
	jge	SHORT $LN8@VMResetVoi

; 767  : 	{
; 768  : 		if(i != channel)

	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _channel$[ebp]
	je	SHORT $LN7@VMResetVoi

; 769  : 			falconVoices[1 - channel].PopVCAddQueue();

	mov	ecx, 1
	sub	ecx, DWORD PTR _channel$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+52]
	call	?PopVCAddQueue@FalcVoice@@QAEXXZ	; FalcVoice::PopVCAddQueue
$LN7@VMResetVoi:

; 770  : 	}

	jmp	SHORT $LN9@VMResetVoi
$LN8@VMResetVoi:

; 771  : 
; 772  : 	decompQueue[channel].status = SLOT_IS_AVAILABLE;

	mov	eax, DWORD PTR _channel$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+58], -1

; 773  : 	if(decompQueue[channel].conversations != NULL)

	mov	edx, DWORD PTR _channel$[ebp]
	imul	edx, 40					; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx+92], 0
	je	SHORT $LN6@VMResetVoi

; 774  : 	{
; 775  : 		delete [] decompQueue[channel].conversations;

	mov	ecx, DWORD PTR _channel$[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+92]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 776  : 		decompQueue[channel].conversations	= NULL;

	mov	edx, DWORD PTR _channel$[ebp]
	imul	edx, 40					; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+92], 0

; 777  : 		decompQueue[channel].from				= FalconNullId;

	mov	ecx, DWORD PTR _channel$[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [edx+ecx+80], eax
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [edx+ecx+84], eax

; 778  : 		decompQueue[channel].message			= -1;

	mov	ecx, DWORD PTR _channel$[ebp]
	imul	ecx, 40					; 00000028H
	or	edx, -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+ecx+56], dx
$LN6@VMResetVoi:

; 779  : 	}
; 780  : 	
; 781  : 
; 782  : 	if ( voiceChannelQueue[channel] != NULL )

	mov	ecx, DWORD PTR _channel$[ebp]
	cmp	DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[ecx*4], 0
	je	SHORT $LN5@VMResetVoi

; 783  : 	{
; 784  : 		voiceChannelQueue[channel] = VMListDestroyVCQ( voiceChannelQueue[channel] );

	mov	edx, DWORD PTR _channel$[ebp]
	mov	eax, DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?VMListDestroyVCQ@VoiceManager@@QAEPAUVM_CONVLIST@@PAU2@@Z ; VoiceManager::VMListDestroyVCQ
	mov	ecx, DWORD PTR _channel$[ebp]
	mov	DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[ecx*4], eax

; 785  : 		voiceChannelQueue[channel] = NULL;

	mov	edx, DWORD PTR _channel$[ebp]
	mov	DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[edx*4], 0
$LN5@VMResetVoi:

; 786  : 	}
; 787  : 	if ( falconVoices )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN4@VMResetVoi

; 788  : 		falconVoices[channel].ResetBufferStatus();

	mov	ecx, DWORD PTR _channel$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+52]
	call	?ResetBufferStatus@FalcVoice@@QAEXXZ	; FalcVoice::ResetBufferStatus
$LN4@VMResetVoi:

; 789  : 
; 790  : 	for(i = 0; i<MAX_VOICE_BUFFERS;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@VMResetVoi
$LN2@VMResetVoi:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@VMResetVoi:
	cmp	DWORD PTR _i$[ebp], 2
	jge	$LN1@VMResetVoi

; 791  : 	{
; 792  : 		F4EnterCriticalSection( falconVoices[channel].voiceBuffers[i].criticalSection );

	mov	ecx, DWORD PTR _channel$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	add	eax, ecx
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [eax+ecx+32]
	push	edx
	call	_F4EnterCriticalSection
	add	esp, 4

; 793  : 		memset(falconVoices[channel].voiceBuffers[i].waveBuffer, SILENCE_KEY, 8000 );

	push	8000					; 00001f40H
	push	0
	mov	eax, DWORD PTR _channel$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	add	edx, eax
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR [edx+eax+12]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 794  : 		F4LeaveCriticalSection(falconVoices[channel].voiceBuffers[i].criticalSection);

	mov	edx, DWORD PTR _channel$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	add	ecx, edx
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+edx+32]
	push	eax
	call	_F4LeaveCriticalSection
	add	esp, 4

; 795  : 
; 796  : 		falconVoices[channel].voiceBuffers[i].status = BUFFER_FILLED;

	mov	ecx, DWORD PTR _channel$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+52]
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	DWORD PTR [ecx+eax+8], 2

; 797  : 		falconVoices[channel].PopVCAddQueue();

	mov	ecx, DWORD PTR _channel$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+52]
	call	?PopVCAddQueue@FalcVoice@@QAEXXZ	; FalcVoice::PopVCAddQueue

; 798  : 	}

	jmp	$LN2@VMResetVoi
$LN1@VMResetVoi:

; 799  : 	falconVoices[channel].exitChannel = FALSE;

	mov	eax, DWORD PTR _channel$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR [edx+eax+84], 0

; 800  : 
; 801  : 	F4LeaveCriticalSection( vmCriticalSection );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	call	_F4LeaveCriticalSection
	add	esp, 4

; 802  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?VMResetVoice@VoiceManager@@QAEXH@Z ENDP		; VoiceManager::VMResetVoice
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 4
_j$2 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?VMResetVoices@VoiceManager@@QAEXXZ PROC		; VoiceManager::VMResetVoices
; _this$ = ecx

; 805  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 806  : 	int	i;
; 807  : 	
; 808  : 	VMSilenceVoices();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?VMSilenceVoices@VoiceManager@@QAEXXZ	; VoiceManager::VMSilenceVoices

; 809  : 	
; 810  : 	if ( voiceBufferQueue != NULL )

	cmp	DWORD PTR ?voiceBufferQueue@@3PAUVM_BUFFLIST@@A, 0 ; voiceBufferQueue
	je	SHORT $LN11@VMResetVoi

; 811  : 	{
; 812  : 		F4EnterCriticalSection( vmCriticalSection );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	call	_F4EnterCriticalSection
	add	esp, 4

; 813  : 		voiceBufferQueue = VMListDestroyVBQ( voiceBufferQueue );

	mov	edx, DWORD PTR ?voiceBufferQueue@@3PAUVM_BUFFLIST@@A ; voiceBufferQueue
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?VMListDestroyVBQ@VoiceManager@@QAEPAUVM_BUFFLIST@@PAU2@@Z ; VoiceManager::VMListDestroyVBQ
	mov	DWORD PTR ?voiceBufferQueue@@3PAUVM_BUFFLIST@@A, eax ; voiceBufferQueue

; 814  : 		voiceBufferQueue = NULL;

	mov	DWORD PTR ?voiceBufferQueue@@3PAUVM_BUFFLIST@@A, 0 ; voiceBufferQueue

; 815  : 		F4LeaveCriticalSection( vmCriticalSection );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	call	_F4LeaveCriticalSection
	add	esp, 4
$LN11@VMResetVoi:

; 816  : 	}
; 817  : 	
; 818  : 	for ( i = 0; i < NUM_VOICE_CHANNELS; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@VMResetVoi
$LN9@VMResetVoi:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN10@VMResetVoi:
	cmp	DWORD PTR _i$[ebp], 2
	jge	$LN8@VMResetVoi

; 819  : 	{
; 820  : 		F4EnterCriticalSection( vmCriticalSection );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	call	_F4EnterCriticalSection
	add	esp, 4

; 821  : 
; 822  : 		decompQueue[i].status = SLOT_IS_AVAILABLE;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 40					; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+edx+58], -1

; 823  : 		decompQueue[i].message			= -1;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 40					; 00000028H
	or	edx, -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+ecx+56], dx

; 824  : 		decompQueue[i].from				= FalconNullId;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [edx+ecx+80], eax
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [edx+ecx+84], eax

; 825  : 		if(decompQueue[i].conversations != NULL)

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx+92], 0
	je	SHORT $LN7@VMResetVoi

; 826  : 		{
; 827  : 			delete [] decompQueue[i].conversations;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+92]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 828  : 			decompQueue[i].conversations = NULL;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+92], 0
$LN7@VMResetVoi:

; 829  : 		}
; 830  : 		
; 831  : 
; 832  : 		if ( voiceChannelQueue[i] != NULL )

	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[eax*4], 0
	je	SHORT $LN6@VMResetVoi

; 833  : 		{
; 834  : 			voiceChannelQueue[i] = VMListDestroyVCQ( voiceChannelQueue[i] );

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[ecx*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?VMListDestroyVCQ@VoiceManager@@QAEPAUVM_CONVLIST@@PAU2@@Z ; VoiceManager::VMListDestroyVCQ
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[ecx*4], eax

; 835  : 			voiceChannelQueue[i] = NULL;

	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[edx*4], 0
$LN6@VMResetVoi:

; 836  : 		}
; 837  : 		if ( falconVoices )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN5@VMResetVoi

; 838  : 			falconVoices[i].ResetBufferStatus();

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+52]
	call	?ResetBufferStatus@FalcVoice@@QAEXXZ	; FalcVoice::ResetBufferStatus
$LN5@VMResetVoi:

; 839  : 
; 840  : 		F4LeaveCriticalSection( vmCriticalSection );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	call	_F4LeaveCriticalSection
	add	esp, 4

; 841  : 
; 842  : 		for(int j = 0; j<MAX_VOICE_BUFFERS;j++)

	mov	DWORD PTR _j$2[ebp], 0
	jmp	SHORT $LN4@VMResetVoi
$LN3@VMResetVoi:
	mov	edx, DWORD PTR _j$2[ebp]
	add	edx, 1
	mov	DWORD PTR _j$2[ebp], edx
$LN4@VMResetVoi:
	cmp	DWORD PTR _j$2[ebp], 2
	jge	$LN2@VMResetVoi

; 843  : 		{
; 844  : 			F4EnterCriticalSection( falconVoices[i].voiceBuffers[j].criticalSection );

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	add	edx, eax
	mov	eax, DWORD PTR _j$2[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR [edx+eax+32]
	push	ecx
	call	_F4EnterCriticalSection
	add	esp, 4

; 845  : 			memset(falconVoices[i].voiceBuffers[j].waveBuffer, SILENCE_KEY, 8000 );

	push	8000					; 00001f40H
	push	0
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	add	ecx, edx
	mov	edx, DWORD PTR _j$2[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+edx+12]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 846  : 			falconVoices[i].voiceBuffers[j].status = BUFFER_FILLED;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+52]
	mov	eax, DWORD PTR _j$2[ebp]
	shl	eax, 5
	mov	DWORD PTR [ecx+eax+8], 2

; 847  : 			F4LeaveCriticalSection(falconVoices[i].voiceBuffers[j].criticalSection);

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	add	eax, ecx
	mov	ecx, DWORD PTR _j$2[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [eax+ecx+32]
	push	edx
	call	_F4LeaveCriticalSection
	add	esp, 4

; 848  : 
; 849  : 			falconVoices[i].PopVCAddQueue();

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+52]
	call	?PopVCAddQueue@FalcVoice@@QAEXXZ	; FalcVoice::PopVCAddQueue

; 850  : 		}

	jmp	$LN3@VMResetVoi
$LN2@VMResetVoi:

; 851  : 		if (g_nSoundSwitchFix & 0x02) // I assume that garbage in this after theater switch

	mov	ecx, DWORD PTR ?g_nSoundSwitchFix@@3HA	; g_nSoundSwitchFix
	and	ecx, 2
	je	SHORT $LN1@VMResetVoi

; 852  : 			falconVoices[i].exitChannel = FALSE; // can cause voices to fail to play...

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR [ecx+edx+84], 0
$LN1@VMResetVoi:

; 853  : 	}

	jmp	$LN9@VMResetVoi
$LN8@VMResetVoi:

; 854  : 	radiofilter[0] = rcfPackage1;

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+136], 6

; 855  : 	radiofilter[1] = rcfTeam;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+136], 13		; 0000000dH

; 856  : 
; 857  : 	VMHearVoices();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?VMHearVoices@VoiceManager@@QAEXXZ	; VoiceManager::VMHearVoices

; 858  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?VMResetVoices@VoiceManager@@QAEXXZ ENDP		; VoiceManager::VMResetVoices
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 4
$T4 = -36						; size = 4
_this$ = -32						; size = 4
tv76 = -28						; size = 4
$T5 = -24						; size = 4
_newnode$ = -20						; size = 4
_listConv$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_newConv$ = 8						; size = 4
?AddToConversationQueue@VoiceManager@@QAEXPAVCONVERSATION@@@Z PROC ; VoiceManager::AddToConversationQueue
; _this$ = ecx

; 692  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddToConversationQueue@VoiceManager@@QAEXPAVCONVERSATION@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 693  : 	CONVERSATION *listConv;
; 694  : 	
; 695  : 	//MonoPrint("Adding Message To Queue: %d  Channel: %d\n", newConv->message, newConv->channelIndex);
; 696  : 
; 697  : 	if ( newConv->channelIndex >= NUM_VOICE_CHANNELS )

	mov	eax, DWORD PTR _newConv$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 2
	jl	SHORT $LN3@AddToConve

; 698  : 	{
; 699  : 		delete [] newConv->conversations;

	mov	edx, DWORD PTR _newConv$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 700  : 		return;

	jmp	$LN4@AddToConve
$LN3@AddToConve:

; 701  : 	}
; 702  : 
; 703  : 	//if(decompQueue[newConv->channelIndex].from == newConv->from && decompQueue[newConv->channelIndex].message == newConv->message)
; 704  : 	//	return;
; 705  : 	
; 706  : 	// must change currConversation to a list for voice manager
; 707  : 	listConv = new CONVERSATION;

	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN6@AddToConve
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0CONVERSATION@@QAE@XZ
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN7@AddToConve
$LN6@AddToConve:
	mov	DWORD PTR tv76[ebp], 0
$LN7@AddToConve:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _listConv$[ebp], eax

; 708  : 	ShiAssert(listConv);
; 709  : 	
; 710  : 	memcpy( listConv, newConv, sizeof( CONVERSATION ) );

	push	40					; 00000028H
	mov	ecx, DWORD PTR _newConv$[ebp]
	push	ecx
	mov	edx, DWORD PTR _listConv$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 711  : 	
; 712  : 	listConv->conversations = newConv->conversations;

	mov	eax, DWORD PTR _listConv$[ebp]
	mov	ecx, DWORD PTR _newConv$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx

; 713  : 	
; 714  : 	// if override and VCQ is not null, reomve all conv from channel
; 715  : 	//	falconVoices[newConv->channelIndex].status = listConv->interupt; //convStruct->interupt;
; 716  : 	//	if overRide, need to destroy current queue and start again
; 717  : 	
; 718  : 	listConv->status = SLOT_IS_AVAILABLE;

	mov	eax, DWORD PTR _listConv$[ebp]
	mov	BYTE PTR [eax+2], -1

; 719  : 	
; 720  : 	if( listConv->interrupt == OVERRIDE_CONV )

	mov	ecx, DWORD PTR _listConv$[ebp]
	movsx	edx, BYTE PTR [ecx+7]
	cmp	edx, 2
	jne	SHORT $LN2@AddToConve

; 721  : 	{		
; 722  : 		F4EnterCriticalSection( VM->vmCriticalSection );

	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	call	_F4EnterCriticalSection
	add	esp, 4

; 723  : 		if ( voiceChannelQueue[newConv->channelIndex] != NULL )

	mov	edx, DWORD PTR _newConv$[ebp]
	movsx	eax, BYTE PTR [edx+8]
	cmp	DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[eax*4], 0
	je	SHORT $LN1@AddToConve

; 724  : 		{
; 725  : 			voiceChannelQueue[newConv->channelIndex] = VMListDestroyVCQ( voiceChannelQueue[newConv->channelIndex] );

	mov	ecx, DWORD PTR _newConv$[ebp]
	movsx	edx, BYTE PTR [ecx+8]
	mov	eax, DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?VMListDestroyVCQ@VoiceManager@@QAEPAUVM_CONVLIST@@PAU2@@Z ; VoiceManager::VMListDestroyVCQ
	mov	ecx, DWORD PTR _newConv$[ebp]
	movsx	edx, BYTE PTR [ecx+8]
	mov	DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[edx*4], eax
$LN1@AddToConve:

; 726  : 		}
; 727  : 		F4LeaveCriticalSection( VM->vmCriticalSection );

	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	call	_F4LeaveCriticalSection
	add	esp, 4
$LN2@AddToConve:

; 728  : 	}
; 729  : 		
; 730  : 	VM_CONVLIST *newnode = new VM_CONVLIST;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _newnode$[ebp], edx

; 731  : 	newnode->node = listConv;

	mov	eax, DWORD PTR _newnode$[ebp]
	mov	ecx, DWORD PTR _listConv$[ebp]
	mov	DWORD PTR [eax], ecx

; 732  : 	newnode->next = NULL;

	mov	edx, DWORD PTR _newnode$[ebp]
	mov	DWORD PTR [edx+4], 0

; 733  : 	newnode->prev = NULL;

	mov	eax, DWORD PTR _newnode$[ebp]
	mov	DWORD PTR [eax+8], 0

; 734  : 	
; 735  : 	
; 736  : 	F4EnterCriticalSection( VM->vmCriticalSection );

	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	edx, DWORD PTR [ecx+148]
	push	edx
	call	_F4EnterCriticalSection
	add	esp, 4

; 737  : 	voiceChannelQueue[newConv->channelIndex] = VMConvListInsert( voiceChannelQueue[newConv->channelIndex],newnode,SORT_TIME);

	push	0
	mov	eax, DWORD PTR _newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newConv$[ebp]
	movsx	edx, BYTE PTR [ecx+8]
	mov	eax, DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?VMConvListInsert@VoiceManager@@QAEPAUVM_CONVLIST@@PAU2@0H@Z ; VoiceManager::VMConvListInsert
	mov	ecx, DWORD PTR _newConv$[ebp]
	movsx	edx, BYTE PTR [ecx+8]
	mov	DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[edx*4], eax

; 738  : 	F4LeaveCriticalSection( VM->vmCriticalSection );

	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	call	_F4LeaveCriticalSection
	add	esp, 4

; 739  : 	
; 740  : 	SetEvent( VMWakeEventHandle );

	mov	edx, DWORD PTR ?VMWakeEventHandle@@3PAXA ; VMWakeEventHandle
	push	edx
	call	DWORD PTR __imp__SetEvent@4

; 741  : 	
; 742  : 	newConv->status = SLOT_IS_AVAILABLE;

	mov	eax, DWORD PTR _newConv$[ebp]
	mov	BYTE PTR [eax+2], -1
$LN4@AddToConve:

; 743  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddToConversationQueue@VoiceManager@@QAEXPAVCONVERSATION@@@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddToConversationQueue@VoiceManager@@QAEXPAVCONVERSATION@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddToConversationQueue@VoiceManager@@QAEXPAVCONVERSATION@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddToConversationQueue@VoiceManager@@QAEXPAVCONVERSATION@@@Z ENDP ; VoiceManager::AddToConversationQueue
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_playConv$ = -8						; size = 4
_this$ = -4						; size = 4
_curChannel$ = 8					; size = 4
?LoadCompressionData@VoiceManager@@QAEHH@Z PROC		; VoiceManager::LoadCompressionData
; _this$ = ecx

; 664  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 665  : 	int					playConv;
; 666  : 	
; 667  : 	/* Get Conversations file no. and index to next file no. */
; 668  : 	playConv = decompQueue[curChannel].conversations[decompQueue[curChannel].convIndex];

	mov	eax, DWORD PTR _curChannel$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _curChannel$[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [edx+ecx+59]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax+92]
	movsx	ecx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR _playConv$[ebp], ecx

; 669  : 	decompQueue[curChannel].convIndex++;

	mov	edx, DWORD PTR _curChannel$[ebp]
	imul	edx, 40					; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+edx+59]
	add	cl, 1
	mov	edx, DWORD PTR _curChannel$[ebp]
	imul	edx, 40					; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+edx+59], cl

; 670  : 	
; 671  : 	falconVoices[curChannel].InitCompressionFile();

	mov	ecx, DWORD PTR _curChannel$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+52]
	call	?InitCompressionFile@FalcVoice@@QAEXXZ	; FalcVoice::InitCompressionFile

; 672  : 
; 673  : #if 0 // jpo old code
; 674  : 	long				tlkBlock;
; 675  : 	tlkBlock = TLK_HEADER_INFO + ( sizeof( long ) * ( playConv ) );
; 676  : 
; 677  : 	ShiAssert(tlkBlock >= 0);
; 678  : 
; 679  : 	tlkBlock = *((unsigned long *)(voiceMapPtr + tlkBlock));
; 680  : 	falconVoices[curChannel].voiceCompInfo->fileLength = *( (unsigned long *)(voiceMapPtr + tlkBlock) );
; 681  : 	falconVoices[curChannel].voiceCompInfo->compFileLength = *( (unsigned long *)(voiceMapPtr + tlkBlock + sizeof(unsigned long)) );
; 682  : 	falconVoices[curChannel].voiceCompInfo->dataPtr = (voiceMapPtr + tlkBlock + sizeof(unsigned long) * 2);
; 683  : #endif
; 684  : 
; 685  : 	falconVoices[curChannel].voiceCompInfo->fileLength = voiceMap.GetFileLength(playConv);

	mov	eax, DWORD PTR _playConv$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFileLength@TlkFile@@QAEKH@Z		; TlkFile::GetFileLength
	mov	ecx, DWORD PTR _curChannel$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR [edx+ecx+80]
	mov	DWORD PTR [ecx+8], eax

; 686  : 	falconVoices[curChannel].voiceCompInfo->compFileLength = voiceMap.GetCompressedLength(playConv);

	mov	edx, DWORD PTR _playConv$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCompressedLength@TlkFile@@QAEKH@Z	; TlkFile::GetCompressedLength
	mov	ecx, DWORD PTR _curChannel$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR [edx+ecx+80]
	mov	DWORD PTR [ecx+12], eax

; 687  : 	falconVoices[curChannel].voiceCompInfo->dataPtr = voiceMap.GetDataPtr(playConv);

	mov	edx, DWORD PTR _playConv$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDataPtr@TlkFile@@QAEPADH@Z		; TlkFile::GetDataPtr
	mov	ecx, DWORD PTR _curChannel$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR [edx+ecx+80]
	mov	DWORD PTR [ecx+16], eax

; 688  : 	return( playConv );

	mov	eax, DWORD PTR _playConv$[ebp]

; 689  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?LoadCompressionData@VoiceManager@@QAEHH@Z ENDP		; VoiceManager::LoadCompressionData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_dwIDThread$ = -8					; size = 4
_this$ = -4						; size = 4
?CallVoiceThread@VoiceManager@@QAEXXZ PROC		; VoiceManager::CallVoiceThread
; _this$ = ecx

; 150  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 151  : 	DWORD	dwIDThread;
; 152  : 	
; 153  : 	strcpy( VMWakeEventName, "VoiceWakeupCall" );

	push	OFFSET ??_C@_0BA@DHNKAOKH@VoiceWakeupCall?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	call	_strcpy
	add	esp, 8

; 154  : 	VMWakeEventHandle = CreateEvent( NULL, FALSE, FALSE, VMWakeEventName );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	push	0
	push	0
	push	0
	call	DWORD PTR __imp__CreateEventA@16
	mov	DWORD PTR ?VMWakeEventHandle@@3PAXA, eax ; VMWakeEventHandle

; 155  : 	if ( !VMWakeEventHandle ) 

	cmp	DWORD PTR ?VMWakeEventHandle@@3PAXA, 0	; VMWakeEventHandle
	jne	SHORT $LN3@CallVoiceT

; 156  : 	{
; 157  : 		return;

	jmp	SHORT $LN4@CallVoiceT
$LN3@CallVoiceT:

; 158  : 	} 
; 159  : 	
; 160  : 	hThread = ( HANDLE ) _beginthreadex( NULL, 0, (unsigned int (__stdcall *)(void *)) VoiceManagementThread, 
; 161  : 		(LPVOID)falconVoices, 0, ( unsigned * ) &dwIDThread );

	lea	edx, DWORD PTR _dwIDThread$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	push	OFFSET ?VoiceManagementThread@@YGKPAX@Z	; VoiceManagementThread
	push	0
	push	0
	call	__beginthreadex
	add	esp, 24					; 00000018H
	mov	DWORD PTR ?hThread@@3PAXA, eax		; hThread

; 162  : 	
; 163  : 	if (hThread != NULL)

	cmp	DWORD PTR ?hThread@@3PAXA, 0		; hThread
	je	SHORT $LN2@CallVoiceT

; 164  : 	{
; 165  : // 2002-03-25 MN we need to set killThread to false if we opened a thread sucessfully because of theater switching, or we won't have voices
; 166  : 		killThread = false;	

	mov	DWORD PTR ?killThread@@3HA, 0		; killThread

; 167  : 		CloseHandle(hThread);

	mov	edx, DWORD PTR ?hThread@@3PAXA		; hThread
	push	edx
	call	DWORD PTR __imp__CloseHandle@4

; 168  : 	}
; 169  : 	else

	jmp	SHORT $LN4@CallVoiceT
$LN2@CallVoiceT:

; 170  : 	{
; 171  : 		VMCleanup();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?VMCleanup@VoiceManager@@QAEXXZ		; VoiceManager::VMCleanup
$LN4@CallVoiceT:

; 172  : 	}
; 173  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CallVoiceThread@VoiceManager@@QAEXXZ ENDP		; VoiceManager::CallVoiceThread
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 4
tv95 = -36						; size = 4
tv77 = -32						; size = 4
$T4 = -28						; size = 4
$T5 = -24						; size = 4
_i$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?VMBegin@VoiceManager@@QAEHXZ PROC			; VoiceManager::VMBegin
; _this$ = ecx

; 93   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?VMBegin@VoiceManager@@QAEHXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 94   : 	int	i;
; 95   : 	
; 96   : #ifdef USE_SH_POOLS
; 97   : 	CONVERSATION::InitializeStorage();
; 98   : 	VM_BUFFLIST::InitializeStorage();
; 99   : 	VM_CONVLIST::InitializeStorage();
; 100  : #endif
; 101  : 
; 102  : 	// edg: create critical section for voicemanager
; 103  : 	if ( vmCriticalSection == NULL )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+148], 0
	jne	SHORT $LN5@VMBegin

; 104  : 		vmCriticalSection = F4CreateCriticalSection("vmCritical");

	push	OFFSET ??_C@_0L@BMONHOMA@vmCritical?$AA@
	call	_F4CreateCriticalSection
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+148], eax
$LN5@VMBegin:

; 105  : 	//This is where the decomp library is initialized
; 106  : 	lhspPtr = new LHSP;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN8@VMBegin
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0LHSP@@QAE@XZ				; LHSP::LHSP
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN9@VMBegin
$LN8@VMBegin:
	mov	DWORD PTR tv77[ebp], 0
$LN9@VMBegin:
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+16], ecx

; 107  : 	if(lhspPtr)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN4@VMBegin

; 108  : 		lhspPtr->InitializeLHSP();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?InitializeLHSP@LHSP@@QAEXXZ		; LHSP::InitializeLHSP
$LN4@VMBegin:

; 109  : 	//This is where the .tlk file is opened
; 110  : 	VoiceOpen();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?VoiceOpen@VoiceManager@@QAEHXZ		; VoiceManager::VoiceOpen

; 111  : 	
; 112  : 	falconVoices = new FalcVoice[NUM_VOICE_CHANNELS];

	push	180					; 000000b4H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN10@VMBegin
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR [ecx], 2
	push	OFFSET ??1FalcVoice@@QAE@XZ		; FalcVoice::~FalcVoice
	push	OFFSET ??0FalcVoice@@QAE@XZ		; FalcVoice::FalcVoice
	push	2
	push	88					; 00000058H
	mov	edx, DWORD PTR $T5[ebp]
	add	edx, 4
	push	edx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	eax, DWORD PTR $T5[ebp]
	add	eax, 4
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN11@VMBegin
$LN10@VMBegin:
	mov	DWORD PTR tv95[ebp], 0
$LN11@VMBegin:
	mov	ecx, DWORD PTR tv95[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+52], eax

; 113  : 	for ( i = 0; i < NUM_VOICE_CHANNELS; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@VMBegin
$LN2@VMBegin:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@VMBegin:
	cmp	DWORD PTR _i$[ebp], 2
	jge	$LN1@VMBegin

; 114  : 	{
; 115  : 		falconVoices[i].CreateVoice();

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+52]
	call	?CreateVoice@FalcVoice@@QAEXXZ		; FalcVoice::CreateVoice

; 116  : 		falconVoices[i].SetVoiceChannel( i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+52]
	call	?SetVoiceChannel@FalcVoice@@QAEXH@Z	; FalcVoice::SetVoiceChannel

; 117  : 		falconVoices[i].InitCompressionData(  );

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+52]
	call	?InitCompressionData@FalcVoice@@QAEXXZ	; FalcVoice::InitCompressionData

; 118  : 		falconVoices[i].PlayVoices();

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+52]
	call	?PlayVoices@FalcVoice@@QAEXXZ		; FalcVoice::PlayVoices

; 119  : 		PauseChannel(i);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PauseChannel@VoiceManager@@QAEHH@Z	; VoiceManager::PauseChannel

; 120  : 		decompQueue[i].status = SLOT_IS_AVAILABLE;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+58], -1

; 121  : 		decompQueue[i].conversations = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+92], 0

; 122  : 		decompQueue[i].filter = 0;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 40					; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+edx+88], 0

; 123  : 		decompQueue[i].message = -1;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 40					; 00000028H
	or	edx, -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+ecx+56], dx

; 124  : 		decompQueue[i].priority = 0;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+62], 0

; 125  : 	};

	jmp	$LN2@VMBegin
$LN1@VMBegin:

; 126  : 
; 127  : 	radiofilter[0] = rcfPackage1;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+136], 6

; 128  : 	radiofilter[1] = rcfTeam;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+136], 13		; 0000000dH

; 129  : 	currRadio = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+144], 0

; 130  : 	
; 131  : 	CallVoiceThread();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CallVoiceThread@VoiceManager@@QAEXXZ	; VoiceManager::CallVoiceThread

; 132  : 	
; 133  : 	return( TRUE );

	mov	eax, 1

; 134  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?VMBegin@VoiceManager@@QAEHXZ$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?VMBegin@VoiceManager@@QAEHXZ$1:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?VMBegin@VoiceManager@@QAEHXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?VMBegin@VoiceManager@@QAEHXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?VMBegin@VoiceManager@@QAEHXZ ENDP			; VoiceManager::VMBegin
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1VoiceManager@@QAE@XZ PROC				; VoiceManager::~VoiceManager
; _this$ = ecx

; 82   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1VoiceManager@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 83   : 	VMCleanup();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?VMCleanup@VoiceManager@@QAEXXZ		; VoiceManager::VMCleanup

; 84   : 
; 85   : #ifdef USE_SH_POOLS
; 86   : 	CONVERSATION::ReleaseStorage();
; 87   : 	VM_BUFFLIST::ReleaseStorage();
; 88   : 	VM_CONVLIST::ReleaseStorage();
; 89   : #endif
; 90   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TlkFile@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1VoiceManager@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TlkFile@@QAE@XZ
__ehhandler$??1VoiceManager@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1VoiceManager@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1VoiceManager@@QAE@XZ ENDP				; VoiceManager::~VoiceManager
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0VoiceManager@@QAE@XZ PROC				; VoiceManager::VoiceManager
; _this$ = ecx

; 77   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0VoiceManager@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TlkFile@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	OFFSET ??0CONVERSATION@@QAE@XZ
	push	2
	push	40					; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 56					; 00000038H
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 78   :     vmCriticalSection = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+148], 0

; 79   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0VoiceManager@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TlkFile@@QAE@XZ
__ehhandler$??0VoiceManager@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0VoiceManager@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0VoiceManager@@QAE@XZ ENDP				; VoiceManager::VoiceManager
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
$T1 = -128						; size = 8
$T2 = -120						; size = 8
$T3 = -112						; size = 8
$T4 = -104						; size = 8
_playerID$ = -96					; size = 8
$T5 = -88						; size = 4
$T6 = -84						; size = 4
$T7 = -80						; size = 4
$T8 = -76						; size = 4
_pVCnext$ = -72						; size = 4
$T9 = -68						; size = 4
tv67 = -64						; size = 4
_sleeptime$ = -60					; size = 4
_sleep$ = -56						; size = 4
_buffChnl$10 = -52					; size = 4
_breakin$ = -48						; size = 4
_holdTime$ = -44					; size = 4
tv87 = -40						; size = 4
_ticks$ = -36						; size = 4
_curBuffer$ = -32					; size = 4
_j$11 = -28						; size = 4
_outputBuf$ = -24					; size = 4
_pVC$ = -20						; size = 4
_best$ = -16						; size = 4
_curChannel$ = -12					; size = 4
_i$ = -8						; size = 4
_leave$12 = -1						; size = 1
_lpvThreadParm$ = 8					; size = 4
?VoiceManagementThread@@YGKPAX@Z PROC			; VoiceManagementThread

; 317  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H

; 318  : 	int					i, curChannel, curBuffer=0,sleep, breakin;

	mov	DWORD PTR _curBuffer$[ebp], 0

; 319  : 	VOICE_STREAM_BUFFER *outputBuf;
; 320  : 	DWORD				sleeptime;
; 321  : 	static VU_TIME oldtime = 0,waketime;
; 322  : 	int ticks = 0;

	mov	DWORD PTR _ticks$[ebp], 0

; 323  : 	ulong	holdTime;
; 324  : 	VU_ID playerID; // sfr: player ID	

	lea	ecx, DWORD PTR _playerID$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
$LN63@VoiceManag:

; 325  : 	VM_CONVLIST *pVC,*best,*pVCnext;
; 326  : 
; 327  : 	while( !killThread ){

	cmp	DWORD PTR ?killThread@@3HA, 0		; killThread
	jne	$LN62@VoiceManag

; 328  : 
; 329  : 		curChannel = 0;

	mov	DWORD PTR _curChannel$[ebp], 0

; 330  : 		sleep = FALSE;

	mov	DWORD PTR _sleep$[ebp], 0

; 331  : 		waketime = 0;

	mov	DWORD PTR ?waketime@?1??VoiceManagementThread@@YGKPAX@Z@4KA, 0

; 332  : 		set_spinner3 (ticks++);

	mov	eax, DWORD PTR _ticks$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR tv67[ebp]
	push	ecx
	call	?set_spinner3@@YAXH@Z			; set_spinner3
	add	esp, 4
	mov	edx, DWORD PTR _ticks$[ebp]
	add	edx, 1
	mov	DWORD PTR _ticks$[ebp], edx

; 333  : 
; 334  : 		F4EnterCriticalSection( VM->vmCriticalSection );

	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	call	_F4EnterCriticalSection
	add	esp, 4

; 335  : 		playerID = (FalconLocalSession == NULL) ? FalconNullId : FalconLocalSession->GetPlayerEntityID();

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	test	eax, eax
	jne	SHORT $LN66@VoiceManag
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR $T4[ebp], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR $T4[ebp+4], eax
	lea	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR tv87[ebp], ecx
	jmp	SHORT $LN67@VoiceManag
$LN66@VoiceManag:
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerEntityID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerEntityID
	mov	DWORD PTR tv87[ebp], eax
$LN67@VoiceManag:
	mov	eax, DWORD PTR tv87[ebp]
	mov	DWORD PTR $T9[ebp], eax
	mov	ecx, DWORD PTR $T9[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _playerID$[ebp], edx
	mov	DWORD PTR _playerID$[ebp+4], eax

; 336  : 		// lower channels have higher priority to play
; 337  : 		for ( i = NUM_VOICE_CHANNELS -1 ; i > -1 ; --i){

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN61@VoiceManag
$LN60@VoiceManag:
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN61@VoiceManag:
	cmp	DWORD PTR _i$[ebp], -1
	jle	$LN59@VoiceManag

; 338  : 			// best is the best conversation to be played
; 339  : 			best = NULL;

	mov	DWORD PTR _best$[ebp], 0

; 340  : 
; 341  : 			// we go through all conversations in channel list, trying to find best one
; 342  : 			// conversations are organized by time to play, so we only use an older one
; 343  : 			// if its priority is higher
; 344  : 			// priorities:
; 345  : 			// 1- from player
; 346  : 			// 2- to player
; 347  : 			// 3- priority field
; 348  : 			for (pVC = voiceChannelQueue[i]; pVC && (pVC->node->playTime <= vuxGameTime); pVC = pVCnext){

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[edx*4]
	mov	DWORD PTR _pVC$[ebp], eax
	jmp	SHORT $LN58@VoiceManag
$LN57@VoiceManag:
	mov	ecx, DWORD PTR _pVCnext$[ebp]
	mov	DWORD PTR _pVC$[ebp], ecx
$LN58@VoiceManag:
	cmp	DWORD PTR _pVC$[ebp], 0
	je	$LN56@VoiceManag
	mov	edx, DWORD PTR _pVC$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	ja	$LN56@VoiceManag

; 349  : 				// we need this to get next if current message gets removed
; 350  : 				pVCnext = pVC->next;

	mov	edx, DWORD PTR _pVC$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _pVCnext$[ebp], eax

; 351  : 
; 352  : 				// adjust conversation hold time based on priority
; 353  : 				if(pVC->node->priority){

	mov	ecx, DWORD PTR _pVC$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx+6]
	test	eax, eax
	je	SHORT $LN55@VoiceManag

; 354  : 					holdTime = MSG_HOLD_TIME/pVC->node->priority;

	mov	ecx, DWORD PTR _pVC$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	ecx, BYTE PTR [edx+6]
	mov	eax, 60000				; 0000ea60H
	cdq
	idiv	ecx
	mov	DWORD PTR _holdTime$[ebp], eax

; 355  : 				}
; 356  : 				else{

	jmp	SHORT $LN54@VoiceManag
$LN55@VoiceManag:

; 357  : 					holdTime = MSG_HOLD_TIME;

	mov	DWORD PTR _holdTime$[ebp], 60000	; 0000ea60H
$LN54@VoiceManag:

; 358  : 				}
; 359  : 
; 360  : 				// remove old conversation
; 361  : 				if (pVC->node->playTime + holdTime < vuxGameTime){

	mov	edx, DWORD PTR _pVC$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _holdTime$[ebp]
	cmp	ecx, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	jae	SHORT $LN53@VoiceManag

; 362  : 					// old message
; 363  : 					VM->VMListRemoveVCQ(&voiceChannelQueue[i], pVC);

	mov	edx, DWORD PTR _pVC$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[eax*4]
	push	ecx
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?VMListRemoveVCQ@VoiceManager@@QAEXPAPAUVM_CONVLIST@@PAU2@@Z ; VoiceManager::VMListRemoveVCQ
	jmp	$LN52@VoiceManag
$LN53@VoiceManag:

; 364  : 				}
; 365  : 				// filter message and check if its best
; 366  : 				else if (FilterMessage(pVC->node)){

	mov	edx, DWORD PTR _pVC$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?FilterMessage@@YAHPAVCONVERSATION@@@Z	; FilterMessage
	add	esp, 4
	test	eax, eax
	je	$LN52@VoiceManag

; 367  : 					if (!best){

	cmp	DWORD PTR _best$[ebp], 0
	jne	SHORT $LN50@VoiceManag

; 368  : 						// no best yet, its the best
; 369  : 						best = pVC;

	mov	ecx, DWORD PTR _pVC$[ebp]
	mov	DWORD PTR _best$[ebp], ecx
	jmp	$LN52@VoiceManag
$LN50@VoiceManag:

; 370  : 					}
; 371  : 					// sfr removing best test and merging 2 ifs in one
; 372  : 					else if(best->node->from == playerID){

	lea	edx, DWORD PTR _playerID$[ebp]
	push	edx
	mov	eax, DWORD PTR _best$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 24					; 00000018H
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN48@VoiceManag

; 373  : 						// best message is from player
; 374  : 						if (
; 375  : 							(pVC->node->from == playerID) && 
; 376  : 							(pVC->node->priority > best->node->priority)
; 377  : 						){

	lea	edx, DWORD PTR _playerID$[ebp]
	push	edx
	mov	eax, DWORD PTR _pVC$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 24					; 00000018H
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN47@VoiceManag
	mov	edx, DWORD PTR _pVC$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax+6]
	mov	edx, DWORD PTR _best$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	edx, BYTE PTR [eax+6]
	cmp	ecx, edx
	jle	SHORT $LN47@VoiceManag

; 378  : 							// current is also and has higher priority, remove it and make new current one
; 379  : 							VM->VMListRemoveVCQ(&voiceChannelQueue[i], best);

	mov	eax, DWORD PTR _best$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[ecx*4]
	push	edx
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?VMListRemoveVCQ@VoiceManager@@QAEXPAPAUVM_CONVLIST@@PAU2@@Z ; VoiceManager::VMListRemoveVCQ

; 380  : 							best = pVC;

	mov	eax, DWORD PTR _pVC$[ebp]
	mov	DWORD PTR _best$[ebp], eax

; 381  : 						}
; 382  : 						else {

	jmp	SHORT $LN46@VoiceManag
$LN47@VoiceManag:

; 383  : 							// current has lower priority, remove it
; 384  : 							VM->VMListRemoveVCQ(&voiceChannelQueue[i], pVC);

	mov	ecx, DWORD PTR _pVC$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[edx*4]
	push	eax
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?VMListRemoveVCQ@VoiceManager@@QAEXPAPAUVM_CONVLIST@@PAU2@@Z ; VoiceManager::VMListRemoveVCQ
$LN46@VoiceManag:

; 385  : 						}

	jmp	$LN52@VoiceManag
$LN48@VoiceManag:

; 386  : 					}
; 387  : 					else if(best->node->to == playerID){

	lea	ecx, DWORD PTR _playerID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _best$[ebp]
	mov	ecx, DWORD PTR [edx]
	add	ecx, 16					; 00000010H
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN44@VoiceManag

; 388  : 						// best is to player
; 389  : 						if (
; 390  : 							(pVC->node->to == playerID) && 
; 391  : 							// sfr: was < here!!
; 392  : 							(pVC->node->priority > best->node->priority)
; 393  : 						){

	lea	ecx, DWORD PTR _playerID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pVC$[ebp]
	mov	ecx, DWORD PTR [edx]
	add	ecx, 16					; 00000010H
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN43@VoiceManag
	mov	ecx, DWORD PTR _pVC$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx+6]
	mov	ecx, DWORD PTR _best$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	ecx, BYTE PTR [edx+6]
	cmp	eax, ecx
	jle	SHORT $LN43@VoiceManag

; 394  : 							// current too, but has higher priority
; 395  : 							// set as new best
; 396  : 							best = pVC;

	mov	edx, DWORD PTR _pVC$[ebp]
	mov	DWORD PTR _best$[ebp], edx
$LN43@VoiceManag:

; 397  : 						}
; 398  : 					}
; 399  : 					else if (

	jmp	SHORT $LN52@VoiceManag
$LN44@VoiceManag:

; 400  : 						(pVC->node->from == playerID) || 
; 401  : 						(pVC->node->to == playerID) ||
; 402  : 						(pVC->node->priority > best->node->priority)
; 403  : 					){

	lea	eax, DWORD PTR _playerID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVC$[ebp]
	mov	ecx, DWORD PTR [ecx]
	add	ecx, 24					; 00000018H
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN40@VoiceManag
	lea	eax, DWORD PTR _playerID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVC$[ebp]
	mov	ecx, DWORD PTR [ecx]
	add	ecx, 16					; 00000010H
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN40@VoiceManag
	mov	eax, DWORD PTR _pVC$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+6]
	mov	eax, DWORD PTR _best$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	eax, BYTE PTR [ecx+6]
	cmp	edx, eax
	jle	SHORT $LN52@VoiceManag
$LN40@VoiceManag:

; 404  : 						// best is not from player nor to player and current is
; 405  : 						// or has highter priority
; 406  : 						best = pVC;

	mov	ecx, DWORD PTR _pVC$[ebp]
	mov	DWORD PTR _best$[ebp], ecx
$LN52@VoiceManag:

; 407  : 					}
; 408  : 				}
; 409  : 			}

	jmp	$LN57@VoiceManag
$LN56@VoiceManag:

; 410  : 
; 411  : 			// sfr: this breakin logic needs to be reviewed! Its not usign same as best choice!!
; 412  : 			// now we check if the best conversation is enough to break a current ongoin one
; 413  : 			// breaking means we are interrupting an ongoing conversation to play a new one
; 414  : 			breakin = FALSE;

	mov	DWORD PTR _breakin$[ebp], 0

; 415  : 			if(SimDriver.GetPlayerAircraft() && (best != NULL)){	

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	$LN39@VoiceManag
	cmp	DWORD PTR _best$[ebp], 0
	je	$LN39@VoiceManag

; 416  : 				if(	
; 417  : 					(
; 418  : 						// message from us 
; 419  : 						(VM->decompQueue[i].from != FalconLocalSession->GetPlayerEntityID()) &&
; 420  : 						(best->node->priority == rpLifeThreatening) && 
; 421  : 						(VM->decompQueue[i].priority != rpLifeThreatening)
; 422  : 					) ||
; 423  : 					(
; 424  : 						best->node->from == FalconLocalSession->GetPlayerEntityID()
; 425  : 					) ||
; 426  : 					(
; 427  : 						(best && best->node->priority == rpLifeThreatening) && 
; 428  : 						(VM->decompQueue[i].priority != rpLifeThreatening)
; 429  : 					)
; 430  : 				){

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerEntityID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerEntityID
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	lea	ecx, DWORD PTR [ecx+eax+80]
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN36@VoiceManag
	mov	eax, DWORD PTR _best$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+6]
	test	edx, edx
	jne	SHORT $LN36@VoiceManag
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	movsx	edx, BYTE PTR [ecx+eax+62]
	test	edx, edx
	jne	SHORT $LN37@VoiceManag
$LN36@VoiceManag:
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerEntityID@FalconSessionEntity@@QBE?AVVU_ID@@XZ ; FalconSessionEntity::GetPlayerEntityID
	push	eax
	mov	ecx, DWORD PTR _best$[ebp]
	mov	ecx, DWORD PTR [ecx]
	add	ecx, 24					; 00000018H
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN37@VoiceManag
	cmp	DWORD PTR _best$[ebp], 0
	je	SHORT $LN39@VoiceManag
	mov	eax, DWORD PTR _best$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+6]
	test	edx, edx
	jne	SHORT $LN39@VoiceManag
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	movsx	edx, BYTE PTR [ecx+eax+62]
	test	edx, edx
	je	SHORT $LN39@VoiceManag
$LN37@VoiceManag:

; 431  : 					breakin = TRUE;

	mov	DWORD PTR _breakin$[ebp], 1
$LN39@VoiceManag:

; 432  : 				}
; 433  : 			}
; 434  : 
; 435  : 			// here we know conversation to be played (best) for the channel
; 436  : 			// and if it breaks an ongoing one (breakin)
; 437  : 			// sfr: it seems to me this is inverted, i <= curChannel
; 438  : 			if (i >= curChannel){

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _curChannel$[ebp]
	jl	$LN35@VoiceManag

; 439  : 				//if there is a message queued from PlayRadioMessage and the appropriate decompQueue is available
; 440  : 				if (
; 441  : 					best &&  
; 442  : 					(VM->decompQueue[i].status == SLOT_IS_AVAILABLE  || breakin) && 
; 443  : 					!VM->falconVoices[curChannel].exitChannel 
; 444  : 				){

	cmp	DWORD PTR _best$[ebp], 0
	je	$LN34@VoiceManag
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	movsx	eax, BYTE PTR [edx+ecx+58]
	cmp	eax, -1
	je	SHORT $LN33@VoiceManag
	cmp	DWORD PTR _breakin$[ebp], 0
	je	$LN34@VoiceManag
$LN33@VoiceManag:
	mov	ecx, DWORD PTR _curChannel$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	eax, DWORD PTR [edx+52]
	cmp	DWORD PTR [eax+ecx+84], 0
	jne	$LN34@VoiceManag

; 445  : 					// we have a message to be played with an available slot or 
; 446  : 					// we must break an ongoing conversation at the channel
; 447  : 
; 448  : 					//if we're breaking in let's clean up first
; 449  : 					if(VM->decompQueue[i].status != SLOT_IS_AVAILABLE){

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	movsx	eax, BYTE PTR [edx+ecx+58]
	cmp	eax, -1
	je	$LN32@VoiceManag

; 450  : 						delete [] VM->decompQueue[i].conversations;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	eax, DWORD PTR [edx+ecx+92]
	mov	DWORD PTR $T8[ebp], eax
	mov	ecx, DWORD PTR $T8[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 451  : 						VM->decompQueue[i].conversations = NULL;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 40					; 00000028H
	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	DWORD PTR [eax+edx+92], 0

; 452  : 						VM->decompQueue[i].from = FalconNullId;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [edx+ecx+80], eax
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [edx+ecx+84], eax

; 453  : 						VM->decompQueue[i].to = FalconNullId;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [edx+ecx+72], eax
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [edx+ecx+76], eax

; 454  : 						VM->decompQueue[i].message = -1;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 40					; 00000028H
	or	edx, -1
	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	WORD PTR [eax+ecx+56], dx

; 455  : 						// sfr: whats is this firing thing????
; 456  : 						if(best->node->message != rcFIRING){

	mov	ecx, DWORD PTR _best$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, WORD PTR [edx]
	cmp	eax, 73					; 00000049H
	je	SHORT $LN32@VoiceManag

; 457  : 							VM->falconVoices[i].BufferEmpty(0);

	push	0
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	add	ecx, DWORD PTR [edx+52]
	call	?BufferEmpty@FalcVoice@@QAEXH@Z		; FalcVoice::BufferEmpty

; 458  : 							VM->falconVoices[i].BufferEmpty(1);

	push	1
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	add	ecx, DWORD PTR [eax+52]
	call	?BufferEmpty@FalcVoice@@QAEXH@Z		; FalcVoice::BufferEmpty
$LN32@VoiceManag:

; 459  : 						}
; 460  : 					}
; 461  : 
; 462  : 					// this tells the Action Camera System whose current message is from
; 463  : 					gVmPlayVU_ID = best->node->from;

	mov	ecx, DWORD PTR _best$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR ?gVmPlayVU_ID@@3VVU_ID@@A, eax
	mov	DWORD PTR ?gVmPlayVU_ID@@3VVU_ID@@A+4, ecx

; 464  : 
; 465  : 					sleep = TRUE;

	mov	DWORD PTR _sleep$[ebp], 1

; 466  : 					//VM->ResumeChannel(i);
; 467  : 					VM->falconVoices[i].silenceWritten = 0;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR [ecx+edx+72], 0

; 468  : 					// place buffers in channel buffer queue
; 469  : 					VM->falconVoices[i].PopVCAddQueue();

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	add	ecx, DWORD PTR [edx+52]
	call	?PopVCAddQueue@FalcVoice@@QAEXXZ	; FalcVoice::PopVCAddQueue

; 470  : 					
; 471  : 					//copy radio message info into decompQueue
; 472  : 					memcpy(&VM->decompQueue[i], best->node, sizeof(CONVERSATION));

	push	40					; 00000028H
	mov	eax, DWORD PTR _best$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 40					; 00000028H
	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	lea	ecx, DWORD PTR [eax+edx+56]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 473  : 					VM->decompQueue[i].conversations = new short[VM->decompQueue[i].sizeofConv];

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 40					; 00000028H
	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	movsx	eax, BYTE PTR [eax+edx+60]
	xor	ecx, ecx
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	edx, DWORD PTR $T7[ebp]
	mov	DWORD PTR [ecx+eax+92], edx

; 474  : 					
; 475  : 					//copy the actual fragFiles needed into decompQueue->conversations
; 476  : 					memcpy(VM->decompQueue[i].conversations, best->node->conversations, sizeof(short)*VM->decompQueue[i].sizeofConv);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	movsx	edx, BYTE PTR [ecx+eax+60]
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _best$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	edx, DWORD PTR [ecx+eax+92]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 477  : 					
; 478  : 					//tell decompression routine that a message is available for this channel
; 479  : 					VM->decompQueue[i].status = MESG_IS_AVAILABLE;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	BYTE PTR [ecx+eax+58], 0

; 480  : 					
; 481  : 					//remove the message we added from the voiceChannelQueue
; 482  : 					VM->VMListRemoveVCQ(&voiceChannelQueue[i], best);

	mov	edx, DWORD PTR _best$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[eax*4]
	push	ecx
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?VMListRemoveVCQ@VoiceManager@@QAEXPAPAUVM_CONVLIST@@PAU2@@Z ; VoiceManager::VMListRemoveVCQ

; 483  : 
; 484  : 					// delete the lower channels decomp queue 
; 485  : 					// since we are already the current channel, we can delete it... is this correct?
; 486  : 					// sfr: wtf is this for??????
; 487  : 					for(int j = 0;j<i;++j) {						

	mov	DWORD PTR _j$11[ebp], 0
	jmp	SHORT $LN30@VoiceManag
$LN29@VoiceManag:
	mov	edx, DWORD PTR _j$11[ebp]
	add	edx, 1
	mov	DWORD PTR _j$11[ebp], edx
$LN30@VoiceManag:
	mov	eax, DWORD PTR _j$11[ebp]
	cmp	eax, DWORD PTR _i$[ebp]
	jge	$LN34@VoiceManag

; 488  : 						delete [] VM->decompQueue[j].conversations;

	mov	ecx, DWORD PTR _j$11[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	eax, DWORD PTR [edx+ecx+92]
	mov	DWORD PTR $T6[ebp], eax
	mov	ecx, DWORD PTR $T6[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 489  : 						VM->decompQueue[j].from = FalconNullId;

	mov	edx, DWORD PTR _j$11[ebp]
	imul	edx, 40					; 00000028H
	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax+edx+80], ecx
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+edx+84], ecx

; 490  : 						VM->decompQueue[j].to = FalconNullId;

	mov	edx, DWORD PTR _j$11[ebp]
	imul	edx, 40					; 00000028H
	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax+edx+72], ecx
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+edx+76], ecx

; 491  : 						VM->decompQueue[j].message = -1;

	mov	edx, DWORD PTR _j$11[ebp]
	imul	edx, 40					; 00000028H
	or	eax, -1
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	WORD PTR [ecx+edx+56], ax

; 492  : 						VM->decompQueue[j].conversations = NULL;

	mov	edx, DWORD PTR _j$11[ebp]
	imul	edx, 40					; 00000028H
	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	DWORD PTR [eax+edx+92], 0

; 493  : 						VM->falconVoices[j].BufferEmpty(0);

	push	0
	mov	ecx, DWORD PTR _j$11[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	add	ecx, DWORD PTR [edx+52]
	call	?BufferEmpty@FalcVoice@@QAEXH@Z		; FalcVoice::BufferEmpty

; 494  : 						VM->falconVoices[j].BufferEmpty(1);

	push	1
	mov	ecx, DWORD PTR _j$11[ebp]
	imul	ecx, 88					; 00000058H
	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	add	ecx, DWORD PTR [eax+52]
	call	?BufferEmpty@FalcVoice@@QAEXH@Z		; FalcVoice::BufferEmpty

; 495  : 						VM->decompQueue[j].status = SLOT_IS_AVAILABLE;

	mov	ecx, DWORD PTR _j$11[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	BYTE PTR [edx+ecx+58], -1

; 496  : 					}				

	jmp	$LN29@VoiceManag
$LN34@VoiceManag:

; 497  : 				}
; 498  : 
; 499  : 				// if we placed something in this channel, it will be the current channel
; 500  : 				if (VM->decompQueue[i].status != SLOT_IS_AVAILABLE){

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	movsx	edx, BYTE PTR [ecx+eax+58]
	cmp	edx, -1
	je	SHORT $LN27@VoiceManag

; 501  : 					curChannel = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _curChannel$[ebp], eax
$LN27@VoiceManag:

; 502  : 				}
; 503  : 			}

	jmp	SHORT $LN26@VoiceManag
$LN35@VoiceManag:

; 504  : 			else if (voiceChannelQueue[i] && (waketime > voiceChannelQueue[i]->node->playTime)){

	mov	ecx, DWORD PTR _i$[ebp]
	cmp	DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[ecx*4], 0
	je	SHORT $LN26@VoiceManag
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[edx*4]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?waketime@?1??VoiceManagementThread@@YGKPAX@Z@4KA
	cmp	edx, DWORD PTR [ecx+12]
	jbe	SHORT $LN26@VoiceManag

; 505  : 				// set wake time for this channel event
; 506  : 				waketime = voiceChannelQueue[i]->node->playTime;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?voiceChannelQueue@@3PAPAUVM_CONVLIST@@A[eax*4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR ?waketime@?1??VoiceManagementThread@@YGKPAX@Z@4KA, eax
$LN26@VoiceManag:

; 507  : 			}
; 508  : 		} // end for each channel

	jmp	$LN60@VoiceManag
$LN59@VoiceManag:

; 509  : 		F4LeaveCriticalSection(VM->vmCriticalSection);

	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	edx, DWORD PTR [ecx+148]
	push	edx
	call	_F4LeaveCriticalSection
	add	esp, 4

; 510  : 
; 511  : 		// at this point we have both channels set to
; 512  : 		// play a new message
; 513  : 		// continue an ongoing message
; 514  : 		// do nothing
; 515  : 
; 516  : 		//if there are any buffers on the queue we need to fill them if we can and remove
; 517  : 		//them from the queue if there is nothing to process
; 518  : 		if ( voiceBufferQueue != NULL ){

	cmp	DWORD PTR ?voiceBufferQueue@@3PAUVM_BUFFLIST@@A, 0 ; voiceBufferQueue
	je	$LN24@VoiceManag

; 519  : 			int buffChnl;
; 520  : 			bool leave = false;

	mov	BYTE PTR _leave$12[ebp], 0

; 521  : 
; 522  : 			F4EnterCriticalSection(VM->vmCriticalSection);

	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	call	_F4EnterCriticalSection
	add	esp, 4

; 523  : 			if(voiceBufferQueue->node){

	mov	edx, DWORD PTR ?voiceBufferQueue@@3PAUVM_BUFFLIST@@A ; voiceBufferQueue
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN23@VoiceManag

; 524  : 				curBuffer = voiceBufferQueue->node->buff;

	mov	eax, DWORD PTR ?voiceBufferQueue@@3PAUVM_BUFFLIST@@A ; voiceBufferQueue
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _curBuffer$[ebp], edx

; 525  : 				buffChnl = voiceBufferQueue->node->channel;

	mov	eax, DWORD PTR ?voiceBufferQueue@@3PAUVM_BUFFLIST@@A ; voiceBufferQueue
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _buffChnl$10[ebp], edx

; 526  : 				// sfr: it seems this get called twice (here and after the continue below)
; 527  : 				VM->falconVoices[buffChnl].BufferEmpty(curBuffer);

	mov	eax, DWORD PTR _curBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffChnl$10[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	add	ecx, DWORD PTR [edx+52]
	call	?BufferEmpty@FalcVoice@@QAEXH@Z		; FalcVoice::BufferEmpty

; 528  : 				if(curChannel != buffChnl){

	mov	eax, DWORD PTR _curChannel$[ebp]
	cmp	eax, DWORD PTR _buffChnl$10[ebp]
	je	SHORT $LN22@VoiceManag

; 529  : 					leave = true;

	mov	BYTE PTR _leave$12[ebp], 1
$LN22@VoiceManag:

; 530  : 				}
; 531  : 			}
; 532  : 			else{

	jmp	SHORT $LN21@VoiceManag
$LN23@VoiceManag:

; 533  : 				// is this even possible??
; 534  : 				leave = true;

	mov	BYTE PTR _leave$12[ebp], 1
$LN21@VoiceManag:

; 535  : 			}
; 536  : 			voiceBufferQueue = VM->VMListRemoveVMBQ(voiceBufferQueue);	

	mov	ecx, DWORD PTR ?voiceBufferQueue@@3PAUVM_BUFFLIST@@A ; voiceBufferQueue
	push	ecx
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?VMListRemoveVMBQ@VoiceManager@@QAEPAUVM_BUFFLIST@@PAU2@@Z ; VoiceManager::VMListRemoveVMBQ
	mov	DWORD PTR ?voiceBufferQueue@@3PAUVM_BUFFLIST@@A, eax ; voiceBufferQueue

; 537  : 
; 538  : 			if (leave){

	movzx	edx, BYTE PTR _leave$12[ebp]
	test	edx, edx
	je	SHORT $LN20@VoiceManag

; 539  : 				F4LeaveCriticalSection(VM->vmCriticalSection);

	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	call	_F4LeaveCriticalSection
	add	esp, 4

; 540  : 				continue; // begin thread loop again...

	jmp	$LN63@VoiceManag
$LN20@VoiceManag:

; 541  : 			}
; 542  : 			
; 543  : 			// sfr: already called above
; 544  : 			// VM->falconVoices[buffChnl].BufferEmpty(curBuffer);
; 545  : 
; 546  : 			// message was made available by first part of loop, or we are done with
; 547  : 			// previous part of the conversation
; 548  : 			if (VM->decompQueue[curChannel].status == MESG_IS_AVAILABLE){

	mov	edx, DWORD PTR _curChannel$[ebp]
	imul	edx, 40					; 00000028H
	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	movsx	ecx, BYTE PTR [eax+edx+58]
	test	ecx, ecx
	jne	SHORT $LN19@VoiceManag

; 549  : 				VM->decompQueue[curChannel].status = MESG_IS_PROCESSING;

	mov	edx, DWORD PTR _curChannel$[ebp]
	imul	edx, 40					; 00000028H
	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	BYTE PTR [eax+edx+58], 1

; 550  : 				// sfr: i find it weird we call resume before loading data...
; 551  : 				//VM->ResumeChannel(curChannel);
; 552  : 				//MonoPrint("Decompression started channel: %d message: %d index: %d  time: %d\n",curChannel,VM->decompQueue[curChannel].message, VM->decompQueue[curChannel].convIndex, VM->decompQueue[curChannel].playTime);
; 553  : 				//this is where the conversation index is incremented
; 554  : 				//this function just sets the data needed by ReadLHSP
; 555  : 				VM->LoadCompressionData(curChannel);

	mov	ecx, DWORD PTR _curChannel$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?LoadCompressionData@VoiceManager@@QAEHH@Z ; VoiceManager::LoadCompressionData

; 556  : 				// sfr: moved resume here...
; 557  : 				VM->ResumeChannel(curChannel);

	mov	edx, DWORD PTR _curChannel$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?ResumeChannel@VoiceManager@@QAEHH@Z	; VoiceManager::ResumeChannel
$LN19@VoiceManag:

; 558  : 			}
; 559  : 			
; 560  : 			//need to load up the decompression buffer
; 561  : 			//with the compressed data so DSOUND can get to it
; 562  : 			if ( VM->decompQueue[curChannel].status == MESG_IS_PROCESSING ){

	mov	eax, DWORD PTR _curChannel$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	movsx	edx, BYTE PTR [ecx+eax+58]
	cmp	edx, 1
	jne	$LN18@VoiceManag

; 563  : 				outputBuf = VM->falconVoices[curChannel].GetVoiceBuffer(curBuffer);

	mov	eax, DWORD PTR _curBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _curChannel$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	add	ecx, DWORD PTR [edx+52]
	call	?GetVoiceBuffer@FalcVoice@@QAEPAUVOICE_STREAM_BUFFER@@H@Z ; FalcVoice::GetVoiceBuffer
	mov	DWORD PTR _outputBuf$[ebp], eax

; 564  : 				
; 565  : 				//this is where the current buffer is loaded with the uncompressed
; 566  : 				//data so DSOUND can get it
; 567  : 				outputBuf->waveBufferWrite = VM->lhspPtr->ReadLHSPFile(
; 568  : 					VM->falconVoices[curChannel].voiceCompInfo ,
; 569  : 					&outputBuf->waveBuffer
; 570  : 				);

	mov	eax, DWORD PTR _outputBuf$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _curChannel$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	eax, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR [eax+ecx+80]
	push	ecx
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	ecx, DWORD PTR [edx+16]
	call	?ReadLHSPFile@LHSP@@QAEJPAUCOMPRESSION_DATA@@PAPAE@Z ; LHSP::ReadLHSPFile
	mov	ecx, DWORD PTR _outputBuf$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 571  : 				
; 572  : 				//if something was written continue on with this conv index
; 573  : 				//else mark buffer empty and if it was the last index in the
; 574  : 				//conversation we need to delete the conversation and make the
; 575  : 				//decompQueue for this channel available
; 576  : 				
; 577  : 				outputBuf->dataInWaveBuffer = outputBuf->waveBufferWrite;

	mov	edx, DWORD PTR _outputBuf$[ebp]
	mov	eax, DWORD PTR _outputBuf$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+12], ecx

; 578  : 				outputBuf->waveBufferLen = outputBuf->waveBufferWrite;

	mov	edx, DWORD PTR _outputBuf$[ebp]
	mov	eax, DWORD PTR _outputBuf$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+16], ecx

; 579  : 				outputBuf->waveBufferRead = 0;

	mov	edx, DWORD PTR _outputBuf$[ebp]
	mov	DWORD PTR [edx+24], 0

; 580  : 
; 581  : 				VM->AddNoise(outputBuf, VM->decompQueue[curChannel].from, curChannel);

	mov	eax, DWORD PTR _curChannel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _curChannel$[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	eax, DWORD PTR [edx+ecx+84]
	push	eax
	mov	ecx, DWORD PTR [edx+ecx+80]
	push	ecx
	mov	edx, DWORD PTR _outputBuf$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?AddNoise@VoiceManager@@QAEXPAUVOICE_STREAM_BUFFER@@VVU_ID@@H@Z ; VoiceManager::AddNoise

; 582  : 
; 583  : 				// check if we read everything
; 584  : 				if (VM->falconVoices[curChannel].voiceCompInfo->bytesRead == VM->falconVoices[curChannel].voiceCompInfo->compFileLength){

	mov	eax, DWORD PTR _curChannel$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+eax+80]
	mov	ecx, DWORD PTR _curChannel$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	edx, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR [edx+ecx+80]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+12]
	jne	$LN17@VoiceManag

; 585  : 					if (VM->decompQueue[curChannel].convIndex == VM->decompQueue[curChannel].sizeofConv){

	mov	eax, DWORD PTR _curChannel$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	movsx	edx, BYTE PTR [ecx+eax+59]
	mov	eax, DWORD PTR _curChannel$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	movsx	eax, BYTE PTR [ecx+eax+60]
	cmp	edx, eax
	jne	$LN16@VoiceManag

; 586  : 						VM->decompQueue[curChannel].status = ADD_SILENCE;

	mov	ecx, DWORD PTR _curChannel$[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	BYTE PTR [edx+ecx+58], 2

; 587  : 						// last part of conversation read, add silence
; 588  : 						delete [] VM->decompQueue[curChannel].conversations;

	mov	eax, DWORD PTR _curChannel$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	edx, DWORD PTR [ecx+eax+92]
	mov	DWORD PTR $T5[ebp], edx
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 589  : 						VM->decompQueue[curChannel].conversations = NULL;

	mov	ecx, DWORD PTR _curChannel$[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	DWORD PTR [edx+ecx+92], 0

; 590  : 						VM->decompQueue[curChannel].from = FalconNullId;

	mov	eax, DWORD PTR _curChannel$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [ecx+eax+80], edx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [ecx+eax+84], edx

; 591  : 						VM->decompQueue[curChannel].to = FalconNullId;

	mov	eax, DWORD PTR _curChannel$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [ecx+eax+72], edx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [ecx+eax+76], edx

; 592  : 						VM->decompQueue[curChannel].message = -1;

	mov	eax, DWORD PTR _curChannel$[ebp]
	imul	eax, 40					; 00000028H
	or	ecx, -1
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	WORD PTR [edx+eax+56], cx

; 593  : 						// buffer is full now
; 594  : 						VM->falconVoices[curChannel].BufferManager( curBuffer );

	mov	eax, DWORD PTR _curBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _curChannel$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	add	ecx, DWORD PTR [edx+52]
	call	?BufferManager@FalcVoice@@QAEXH@Z	; FalcVoice::BufferManager

; 595  : 					}
; 596  : 					else {

	jmp	SHORT $LN17@VoiceManag
$LN16@VoiceManag:

; 597  : 						// conversation index was incremented already during load compression data
; 598  : 						VM->decompQueue[curChannel].status = MESG_IS_AVAILABLE;

	mov	eax, DWORD PTR _curChannel$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	BYTE PTR [ecx+eax+58], 0

; 599  : 						// process next part of conversation
; 600  : 						VM->falconVoices[curChannel].BufferManager( curBuffer );

	mov	edx, DWORD PTR _curBuffer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _curChannel$[ebp]
	imul	ecx, 88					; 00000058H
	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	add	ecx, DWORD PTR [eax+52]
	call	?BufferManager@FalcVoice@@QAEXH@Z	; FalcVoice::BufferManager
$LN17@VoiceManag:

; 601  : 					}
; 602  : 				}
; 603  : 				// sfr: i think we dont need this else, since state is already that and buffer is filled
; 604  : 				/*else {
; 605  : 					VM->falconVoices[curChannel].BufferManager( curBuffer );
; 606  : 					VM->decompQueue[curChannel].status = MESG_IS_PROCESSING;
; 607  : 				}*/
; 608  : 			}

	jmp	$LN14@VoiceManag
$LN18@VoiceManag:

; 609  : 			// sfr: is this really an else??? why the first one is not?
; 610  : 			else if(VM->decompQueue[curChannel].status == ADD_SILENCE){

	mov	ecx, DWORD PTR _curChannel$[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	movsx	eax, BYTE PTR [edx+ecx+58]
	cmp	eax, 2
	jne	$LN13@VoiceManag

; 611  : 				if(VM->BuffersEmpty(curChannel)){

	mov	ecx, DWORD PTR _curChannel$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?BuffersEmpty@VoiceManager@@QAEHH@Z	; VoiceManager::BuffersEmpty
	test	eax, eax
	je	$LN12@VoiceManag

; 612  : 					VM->decompQueue[curChannel].status = SILENCE_ADDED;

	mov	edx, DWORD PTR _curChannel$[ebp]
	imul	edx, 40					; 00000028H
	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	BYTE PTR [eax+edx+58], 3

; 613  : 					outputBuf = VM->falconVoices[curChannel].GetVoiceBuffer(curBuffer);

	mov	ecx, DWORD PTR _curBuffer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _curChannel$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	add	ecx, DWORD PTR [edx+52]
	call	?GetVoiceBuffer@FalcVoice@@QAEPAUVOICE_STREAM_BUFFER@@H@Z ; FalcVoice::GetVoiceBuffer
	mov	DWORD PTR _outputBuf$[ebp], eax

; 614  : 					//try to add a little silence at end of message
; 615  : 					memset(outputBuf->waveBuffer, SILENCE_KEY, SILENCE_LEN);

	push	16000					; 00003e80H
	push	0
	mov	eax, DWORD PTR _outputBuf$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 616  : 					outputBuf->waveBufferRead = 0; // sfr: zero read

	mov	edx, DWORD PTR _outputBuf$[ebp]
	mov	DWORD PTR [edx+24], 0

; 617  : 					outputBuf->dataInWaveBuffer = outputBuf->waveBufferWrite = outputBuf->waveBufferLen = SILENCE_LEN;

	mov	eax, DWORD PTR _outputBuf$[ebp]
	mov	DWORD PTR [eax+16], 16000		; 00003e80H
	mov	ecx, DWORD PTR _outputBuf$[ebp]
	mov	DWORD PTR [ecx+20], 16000		; 00003e80H
	mov	edx, DWORD PTR _outputBuf$[ebp]
	mov	DWORD PTR [edx+12], 16000		; 00003e80H

; 618  : 					VM->falconVoices[curChannel].BufferManager(curBuffer);

	mov	eax, DWORD PTR _curBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _curChannel$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	add	ecx, DWORD PTR [edx+52]
	call	?BufferManager@FalcVoice@@QAEXH@Z	; FalcVoice::BufferManager
$LN12@VoiceManag:

; 619  : 					// sfr: resume channel again... it may have gotten inactive
; 620  : 					//VM->ResumeChannel(curChannel); 
; 621  : 				}
; 622  : 			}

	jmp	SHORT $LN14@VoiceManag
$LN13@VoiceManag:

; 623  : 			// sfr: again, else??
; 624  : 			else if(VM->decompQueue[curChannel].status == SILENCE_ADDED){

	mov	eax, DWORD PTR _curChannel$[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	movsx	edx, BYTE PTR [ecx+eax+58]
	cmp	edx, 3
	jne	SHORT $LN14@VoiceManag

; 625  : 				if(VM->BuffersEmpty(curChannel)){

	mov	eax, DWORD PTR _curChannel$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?BuffersEmpty@VoiceManager@@QAEHH@Z	; VoiceManager::BuffersEmpty
	test	eax, eax
	je	SHORT $LN14@VoiceManag

; 626  : 					VM->decompQueue[curChannel].status = SLOT_IS_AVAILABLE;

	mov	ecx, DWORD PTR _curChannel$[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	BYTE PTR [edx+ecx+58], -1
$LN14@VoiceManag:

; 627  : 				}
; 628  : 			}
; 629  : 
; 630  : 			// if the other buffer is not full, wake immediatly
; 631  : 			if (VM->falconVoices[curChannel].voiceBuffers[1 - curBuffer].status != BUFFER_FILLED){

	mov	eax, DWORD PTR _curChannel$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	add	eax, DWORD PTR [ecx+52]
	mov	edx, 1
	sub	edx, DWORD PTR _curBuffer$[ebp]
	shl	edx, 5
	cmp	DWORD PTR [eax+edx+8], 2
	je	SHORT $LN8@VoiceManag

; 632  : 				SetEvent( VMWakeEventHandle );

	mov	eax, DWORD PTR ?VMWakeEventHandle@@3PAXA ; VMWakeEventHandle
	push	eax
	call	DWORD PTR __imp__SetEvent@4
$LN8@VoiceManag:

; 633  : 			}
; 634  : 
; 635  : 			F4LeaveCriticalSection( VM->vmCriticalSection );

	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	mov	edx, DWORD PTR [ecx+148]
	push	edx
	call	_F4LeaveCriticalSection
	add	esp, 4

; 636  : 		}
; 637  : 		// all buffers consumed in queue
; 638  : 		// now we place each one back which is not filled and is not in queue
; 639  : 		// ie: buffer.status == BUFFER_NOT_IN_QUEUE
; 640  : 		else {

	jmp	SHORT $LN7@VoiceManag
$LN24@VoiceManag:

; 641  : 			for (i = 0; i < NUM_VOICE_CHANNELS; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@VoiceManag
$LN5@VoiceManag:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@VoiceManag:
	cmp	DWORD PTR _i$[ebp], 2
	jge	SHORT $LN7@VoiceManag

; 642  : 				if(VM->decompQueue[i].status != SLOT_IS_AVAILABLE){

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	movsx	eax, BYTE PTR [edx+ecx+58]
	cmp	eax, -1
	je	SHORT $LN3@VoiceManag

; 643  : 					VM->falconVoices[i].PopVCAddQueue();

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	add	ecx, DWORD PTR [edx+52]
	call	?PopVCAddQueue@FalcVoice@@QAEXXZ	; FalcVoice::PopVCAddQueue
$LN3@VoiceManag:

; 644  : 				}
; 645  : 			}

	jmp	SHORT $LN5@VoiceManag
$LN7@VoiceManag:

; 646  : 		}
; 647  : 
; 648  : 		// sfr: organized logic here
; 649  : 		if (!sleep && waketime){

	cmp	DWORD PTR _sleep$[ebp], 0
	jne	SHORT $LN2@VoiceManag
	cmp	DWORD PTR ?waketime@?1??VoiceManagementThread@@YGKPAX@Z@4KA, 0
	je	SHORT $LN2@VoiceManag

; 650  : 			sleeptime = waketime - vuxGameTime;//should be divided by time compression

	mov	eax, DWORD PTR ?waketime@?1??VoiceManagementThread@@YGKPAX@Z@4KA
	sub	eax, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	mov	DWORD PTR _sleeptime$[ebp], eax

; 651  : 		}
; 652  : 		else {

	jmp	SHORT $LN1@VoiceManag
$LN2@VoiceManag:

; 653  : 			//sleeptime = INFINITE;
; 654  : 			sleeptime = 2000;

	mov	DWORD PTR _sleeptime$[ebp], 2000	; 000007d0H
$LN1@VoiceManag:

; 655  : 		}
; 656  : 		WaitForSingleObject( VMWakeEventHandle, sleeptime );

	mov	ecx, DWORD PTR _sleeptime$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?VMWakeEventHandle@@3PAXA ; VMWakeEventHandle
	push	edx
	call	DWORD PTR __imp__WaitForSingleObject@8

; 657  : 	}

	jmp	$LN63@VoiceManag
$LN62@VoiceManag:

; 658  : 
; 659  : 	return(0);

	xor	eax, eax

; 660  : 	lpvThreadParm;
; 661  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?VoiceManagementThread@@YGKPAX@Z ENDP			; VoiceManagementThread
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1TlkFile@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1TlkFile@@QAE@XZ PROC					; TlkFile::~TlkFile, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FileMemMap@@QAE@XZ			; FileMemMap::~FileMemMap
	mov	esp, ebp
	pop	ebp
	ret	0
??1TlkFile@@QAE@XZ ENDP					; TlkFile::~TlkFile
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0TlkFile@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0TlkFile@@QAE@XZ PROC					; TlkFile::TlkFile, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FileMemMap@@QAE@XZ			; FileMemMap::FileMemMap
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0TlkFile@@QAE@XZ ENDP					; TlkFile::TlkFile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_blockind$ = -12					; size = 4
_tblock$ = -8						; size = 4
_this$ = -4						; size = 4
_tlkind$ = 8						; size = 4
?GetDataPtr@TlkFile@@QAEPADH@Z PROC			; TlkFile::GetDataPtr
; _this$ = ecx

; 1652 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1653 :     long blockind = GetFragIndex(tlkind);

	mov	eax, DWORD PTR _tlkind$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFragIndex@TlkFile@@AAEJH@Z		; TlkFile::GetFragIndex
	mov	DWORD PTR _blockind$[ebp], eax

; 1654 :     ShiAssert(blockind > 0);
; 1655 :     struct TlkBlock *tblock;
; 1656 :     tblock = (struct TlkBlock *) GetData(blockind, sizeof *tblock);

	push	12					; 0000000cH
	mov	ecx, DWORD PTR _blockind$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@FileMemMap@@QAEPAEHH@Z		; FileMemMap::GetData
	mov	DWORD PTR _tblock$[ebp], eax

; 1657 :     ShiAssert(tblock != NULL);
; 1658 :     if (tblock == NULL) return 0;

	cmp	DWORD PTR _tblock$[ebp], 0
	jne	SHORT $LN1@GetDataPtr
	xor	eax, eax
	jmp	SHORT $LN2@GetDataPtr
$LN1@GetDataPtr:

; 1659 :     return tblock->data;

	mov	eax, DWORD PTR _tblock$[ebp]
	add	eax, 8
$LN2@GetDataPtr:

; 1660 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetDataPtr@TlkFile@@QAEPADH@Z ENDP			; TlkFile::GetDataPtr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_blockind$ = -12					; size = 4
_tblock$ = -8						; size = 4
_this$ = -4						; size = 4
_tlkind$ = 8						; size = 4
?GetCompressedLength@TlkFile@@QAEKH@Z PROC		; TlkFile::GetCompressedLength
; _this$ = ecx

; 1641 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1642 :     long blockind = GetFragIndex(tlkind);

	mov	eax, DWORD PTR _tlkind$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFragIndex@TlkFile@@AAEJH@Z		; TlkFile::GetFragIndex
	mov	DWORD PTR _blockind$[ebp], eax

; 1643 :     ShiAssert(blockind > 0);
; 1644 :     struct TlkBlock *tblock;
; 1645 :     tblock = (struct TlkBlock *) GetData(blockind, sizeof *tblock);

	push	12					; 0000000cH
	mov	ecx, DWORD PTR _blockind$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@FileMemMap@@QAEPAEHH@Z		; FileMemMap::GetData
	mov	DWORD PTR _tblock$[ebp], eax

; 1646 :     ShiAssert(tblock != NULL);
; 1647 :     if (tblock == NULL) return 0;

	cmp	DWORD PTR _tblock$[ebp], 0
	jne	SHORT $LN1@GetCompres
	xor	eax, eax
	jmp	SHORT $LN2@GetCompres
$LN1@GetCompres:

; 1648 :     return tblock->compressedlen;

	mov	edx, DWORD PTR _tblock$[ebp]
	mov	eax, DWORD PTR [edx+4]
$LN2@GetCompres:

; 1649 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetCompressedLength@TlkFile@@QAEKH@Z ENDP		; TlkFile::GetCompressedLength
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.cpp
_TEXT	SEGMENT
_blockind$ = -12					; size = 4
_tblock$ = -8						; size = 4
_this$ = -4						; size = 4
_tlkind$ = 8						; size = 4
?GetFileLength@TlkFile@@QAEKH@Z PROC			; TlkFile::GetFileLength
; _this$ = ecx

; 1630 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1631 :     long blockind = GetFragIndex(tlkind);

	mov	eax, DWORD PTR _tlkind$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFragIndex@TlkFile@@AAEJH@Z		; TlkFile::GetFragIndex
	mov	DWORD PTR _blockind$[ebp], eax

; 1632 :     ShiAssert(blockind > 0);
; 1633 :     struct TlkBlock *tblock;
; 1634 :     tblock = (struct TlkBlock *) GetData(blockind, sizeof *tblock);

	push	12					; 0000000cH
	mov	ecx, DWORD PTR _blockind$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@FileMemMap@@QAEPAEHH@Z		; FileMemMap::GetData
	mov	DWORD PTR _tblock$[ebp], eax

; 1635 :     ShiAssert(tblock != NULL);
; 1636 :     if (tblock == NULL) return 0;

	cmp	DWORD PTR _tblock$[ebp], 0
	jne	SHORT $LN1@GetFileLen
	xor	eax, eax
	jmp	SHORT $LN2@GetFileLen
$LN1@GetFileLen:

; 1637 :     return tblock->filelen;

	mov	edx, DWORD PTR _tblock$[ebp]
	mov	eax, DWORD PTR [edx]
$LN2@GetFileLen:

; 1638 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetFileLength@TlkFile@@QAEKH@Z ENDP			; TlkFile::GetFileLength
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.h
;	COMDAT ?GetFragIndex@TlkFile@@AAEJH@Z
_TEXT	SEGMENT
tv76 = -12						; size = 4
_data$ = -8						; size = 4
_this$ = -4						; size = 4
_tlkind$ = 8						; size = 4
?GetFragIndex@TlkFile@@AAEJH@Z PROC			; TlkFile::GetFragIndex, COMDAT
; _this$ = ecx

; 139  :     long GetFragIndex(int tlkind) { 

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 	BYTE *data = GetData(Index2Data(tlkind), sizeof (long));

	push	4
	mov	eax, DWORD PTR _tlkind$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Index2Data@TlkFile@@AAEJH@Z		; TlkFile::Index2Data
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetData@FileMemMap@@QAEPAEHH@Z		; FileMemMap::GetData
	mov	DWORD PTR _data$[ebp], eax

; 141  : 	ShiAssert(data != NULL);
; 142  : 	return data ? *(long *)data : 0;

	cmp	DWORD PTR _data$[ebp], 0
	je	SHORT $LN3@GetFragInd
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv76[ebp], edx
	jmp	SHORT $LN4@GetFragInd
$LN3@GetFragInd:
	mov	DWORD PTR tv76[ebp], 0
$LN4@GetFragInd:
	mov	eax, DWORD PTR tv76[ebp]

; 143  :     };

	mov	esp, ebp
	pop	ebp
	ret	4
?GetFragIndex@TlkFile@@AAEJH@Z ENDP			; TlkFile::GetFragIndex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.h
;	COMDAT ?Index2Data@TlkFile@@AAEJH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_tlkind$ = 8						; size = 4
?Index2Data@TlkFile@@AAEJH@Z PROC			; TlkFile::Index2Data, COMDAT
; _this$ = ecx

; 138  :     long Index2Data(int tlkind) { return TLK_HEADER_INFO + sizeof(long) * tlkind; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _tlkind$[ebp]
	lea	eax, DWORD PTR [eax*4+12]
	mov	esp, ebp
	pop	ebp
	ret	4
?Index2Data@TlkFile@@AAEJH@Z ENDP			; TlkFile::Index2Data
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0CONVERSATION@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CONVERSATION@@QAE@XZ PROC				; CONVERSATION::CONVERSATION, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CONVERSATION@@QAE@XZ ENDP				; CONVERSATION::CONVERSATION
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GLHSP@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GLHSP@@QAEPAXI@Z PROC				; LHSP::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1LHSP@@QAE@XZ				; LHSP::~LHSP
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GLHSP@@QAEPAXI@Z ENDP				; LHSP::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_EFalcVoice@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EFalcVoice@@QAEPAXI@Z PROC				; FalcVoice::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1FalcVoice@@QAE@XZ		; FalcVoice::~FalcVoice
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FalcVoice@@QAE@XZ			; FalcVoice::~FalcVoice
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_EFalcVoice@@QAEPAXI@Z ENDP				; FalcVoice::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??9VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??9VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator!=, COMDAT
; _this$ = ecx

; 111  : 	bool operator != (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 		return (
; 113  : 			num_ == rhs.num_ ? 
; 114  : 			(creator_ == rhs.creator_ ? false : true) : 
; 115  : 			true
; 116  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 1
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 1
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 117  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??9VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??8VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator==, COMDAT
; _this$ = ecx

; 104  : 	bool operator == (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		return (
; 106  : 			num_ == rhs.num_ ? 
; 107  : 			(creator_ == rhs.creator_ ? true : false) : 
; 108  : 			false
; 109  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 0
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 110  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_ID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VU_ID@@QAE@XZ PROC					; VU_ID::VU_ID, COMDAT
; _this$ = ecx

; 100  : 	VU_ID() : num_(0), creator_(0){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0VU_SESSION_ID@@QAE@K@Z		; VU_SESSION_ID::VU_SESSION_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0VU_ID@@QAE@XZ ENDP					; VU_ID::VU_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_SESSION_ID@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??0VU_SESSION_ID@@QAE@K@Z PROC				; VU_SESSION_ID::VU_SESSION_ID, COMDAT
; _this$ = ecx

; 53   : 	VU_SESSION_ID(unsigned long value) : value_((unsigned long)value) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0VU_SESSION_ID@@QAE@K@Z ENDP				; VU_SESSION_ID::VU_SESSION_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
