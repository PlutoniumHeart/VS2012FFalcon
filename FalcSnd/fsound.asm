; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\FalcSnd\fsound.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?mono_8bit_8k@@3UtWAVEFORMATEX@@A		; mono_8bit_8k
PUBLIC	?mono_8bit_22k@@3UtWAVEFORMATEX@@A		; mono_8bit_22k
PUBLIC	?mono_16bit_22k@@3UtWAVEFORMATEX@@A		; mono_16bit_22k
PUBLIC	?stereo_8bit_22k@@3UtWAVEFORMATEX@@A		; stereo_8bit_22k
PUBLIC	?stereo_16bit_22k@@3UtWAVEFORMATEX@@A		; stereo_16bit_22k
PUBLIC	?mono_16bit_8k@@3UtWAVEFORMATEX@@A		; mono_16bit_8k
PUBLIC	?sndHandleList@@3PAXA				; sndHandleList
PUBLIC	?voiceFilter@@3PAVVoiceFilter@@A		; voiceFilter
PUBLIC	?chatInputDevice@@3PAUIDirectSoundCapture@@A	; chatInputDevice
PUBLIC	?gSoundManagerRunning@@3HA			; gSoundManagerRunning
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?CamPos@@3UTpoint@@A				; CamPos
PUBLIC	?CamVel@@3UTpoint@@A				; CamVel
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?gSoundObject@@3PAVF4SoundPos@@A		; gSoundObject
PUBLIC	?Mono_22K_8Bit@@3UtWAVEFORMATEX@@A		; Mono_22K_8Bit
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?ExtAttenuation@@3MA				; ExtAttenuation
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?g_bNoSound@@3_NA				; g_bNoSound
PUBLIC	?SoundPosSection@@3PAUF4CSECTIONHANDLE@@A	; SoundPosSection
PUBLIC	?F4SoundPosUID@@3HA				; F4SoundPosUID
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	_gSoundFlags
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?otwViewChange@F4SoundPos@@0HA			; F4SoundPos::otwViewChange
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
_BSS	SEGMENT
?mono_8bit_8k@@3UtWAVEFORMATEX@@A DB 012H DUP (?)	; mono_8bit_8k
	ALIGN	4

?mono_8bit_22k@@3UtWAVEFORMATEX@@A DB 012H DUP (?)	; mono_8bit_22k
	ALIGN	4

?mono_16bit_22k@@3UtWAVEFORMATEX@@A DB 012H DUP (?)	; mono_16bit_22k
	ALIGN	4

?stereo_8bit_22k@@3UtWAVEFORMATEX@@A DB 012H DUP (?)	; stereo_8bit_22k
	ALIGN	4

?sndHandleList@@3PAXA DD 01H DUP (?)			; sndHandleList
?voiceFilter@@3PAVVoiceFilter@@A DD 01H DUP (?)		; voiceFilter
?chatInputDevice@@3PAUIDirectSoundCapture@@A DD 01H DUP (?) ; chatInputDevice
_soundCount DD	01H DUP (?)
?gSoundManagerRunning@@3HA DD 01H DUP (?)		; gSoundManagerRunning
?CamPos@@3UTpoint@@A DB 0cH DUP (?)			; CamPos
?CamVel@@3UTpoint@@A DB 0cH DUP (?)			; CamVel
?gSoundObject@@3PAVF4SoundPos@@A DD 01H DUP (?)		; gSoundObject
_sPosLoopStagger DD 01H DUP (?)
?g_bNoSound@@3_NA DB 01H DUP (?)			; g_bNoSound
	ALIGN	4

?SoundPosSection@@3PAUF4CSECTIONHANDLE@@A DD 01H DUP (?) ; SoundPosSection
?otwViewChange@F4SoundPos@@0HA DD 01H DUP (?)		; F4SoundPos::otwViewChange
_BSS	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
_DATA	SEGMENT
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
?stereo_16bit_22k@@3UtWAVEFORMATEX@@A DW 01H		; stereo_16bit_22k
	DW	02H
	DD	05622H
	DD	015888H
	DW	04H
	DW	010H
	DW	00H
	ORG $+2
?mono_16bit_8k@@3UtWAVEFORMATEX@@A DW 01H		; mono_16bit_8k
	DW	01H
	DD	01f40H
	DD	03e80H
	DW	02H
	DW	010H
	DW	00H
	ORG $+2
?Mono_22K_8Bit@@3UtWAVEFORMATEX@@A DW 01H		; Mono_22K_8Bit
	DW	01H
	DD	05622H
	DD	05622H
	DW	01H
	DW	08H
	DW	00H
	ORG $+2
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
?ExtAttenuation@@3MA DD 0c61c4000r		; -10000 ; ExtAttenuation
?F4SoundPosUID@@3HA DD 064H				; F4SoundPosUID
_gSoundFlags DD	03H
_DATA	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
PUBLIC	_acosf
PUBLIC	_atanf
PUBLIC	_cosf
PUBLIC	?acos@@YAMM@Z					; acos
PUBLIC	?atan@@YAMM@Z					; atan
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	_F4LoadFXSound
PUBLIC	_F4LoadSound
PUBLIC	_F4LoadRawSound
PUBLIC	_F4IsSoundPlaying
PUBLIC	_F4GetVolume
PUBLIC	_F4FreeSound
PUBLIC	_F4PlaySound
PUBLIC	_F4LoopSound
PUBLIC	_F4StopSound
PUBLIC	_ExitSoundManager
PUBLIC	_F4SoundStop
PUBLIC	_F4SoundStart
PUBLIC	_F4PitchBend
PUBLIC	_F4PanSound
PUBLIC	_F4SetVolume
PUBLIC	_F4CreateStream
PUBLIC	_F4StreamPlayed
PUBLIC	_F4RemoveStream
PUBLIC	_F4StartStream
PUBLIC	_F4StartRawStream
PUBLIC	_F4StartCallbackStream
PUBLIC	_F4StopStream
PUBLIC	_F4SetStreamVolume
PUBLIC	_F4HearVoices
PUBLIC	_F4SilenceVoices
PUBLIC	_F4StopAllStreams
PUBLIC	_F4ChatToggleXmitReceive
PUBLIC	_F4ReloadSFX
PUBLIC	_F4SoundEntering3d
PUBLIC	_F4SoundLeaving3d
PUBLIC	_F4SetGroupVolume
PUBLIC	_F4SoundFXSetPos
PUBLIC	_F4SoundFXSetDist
PUBLIC	_F4SoundFXSetCamPosAndOrient
PUBLIC	_F4SoundFXPositionDriver
PUBLIC	_F4SoundFXInit
PUBLIC	_F4SoundFXEnd
PUBLIC	_F4SoundFXPlaying
PUBLIC	?CompareWith@ANode@@UAEHPAV1@@Z			; ANode::CompareWith
PUBLIC	??1AList@@QAE@XZ				; AList::~AList
PUBLIC	??0F4SoundPos@@QAE@XZ				; F4SoundPos::F4SoundPos
PUBLIC	??1F4SoundPos@@QAE@XZ				; F4SoundPos::~F4SoundPos
PUBLIC	?UpdatePos@F4SoundPos@@QAEXPAVSimBaseClass@@@Z	; F4SoundPos::UpdatePos
PUBLIC	?UpdatePos@F4SoundPos@@QAEXMMMMMM@Z		; F4SoundPos::UpdatePos
PUBLIC	?Sfx@F4SoundPos@@QAEXHHMM@Z			; F4SoundPos::Sfx
PUBLIC	?Sfx@F4SoundPos@@QAEXHHMMMMM@Z			; F4SoundPos::Sfx
PUBLIC	?SfxRel@F4SoundPos@@QAEXHHMMMMM@Z		; F4SoundPos::SfxRel
PUBLIC	?SfxRel@F4SoundPos@@QAEXHHMMAAUTpoint@@@Z	; F4SoundPos::SfxRel
PUBLIC	?IsPlaying@F4SoundPos@@QAE_NHH@Z		; F4SoundPos::IsPlaying
PUBLIC	?Purge@F4SoundPos@@QAEXXZ			; F4SoundPos::Purge
PUBLIC	?PositionalData@F4SoundPos@@QAEXXZ		; F4SoundPos::PositionalData
PUBLIC	?OTWViewChanged@F4SoundPos@@SAXH@Z		; F4SoundPos::OTWViewChanged
PUBLIC	??_GF4SoundPos@@QAEPAXI@Z			; F4SoundPos::`scalar deleting destructor'
PUBLIC	?InitSoundManager@@YAHPAUHWND__@@HPAD@Z		; InitSoundManager
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?XDelta@VuEntity@@QBEMXZ			; VuEntity::XDelta
PUBLIC	?YDelta@VuEntity@@QBEMXZ			; VuEntity::YDelta
PUBLIC	?ZDelta@VuEntity@@QBEMXZ			; VuEntity::ZDelta
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??_GCSoundMgr@@QAEPAXI@Z			; CSoundMgr::`scalar deleting destructor'
PUBLIC	?InSim@SimulationLoopControl@@SA_NXZ		; SimulationLoopControl::InSim
PUBLIC	?IsSetFlag@SimBaseClass@@QBEHH@Z		; SimBaseClass::IsSetFlag
PUBLIC	?GetDOFValue@SimMoverClass@@QAEMH@Z		; SimMoverClass::GetDOFValue
PUBLIC	?GetNumDOFs@SimMoverClass@@QAEHXZ		; SimMoverClass::GetNumDOFs
PUBLIC	?IsComplex@AircraftClass@@QAEHXZ		; AircraftClass::IsComplex
PUBLIC	?InSim@SimulationDriver@@QBE_NXZ		; SimulationDriver::InSim
PUBLIC	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?DisplayInCockpit@OTWDriverClass@@QAEHXZ	; OTWDriverClass::DisplayInCockpit
PUBLIC	?GetCanopyMaxAngle@AirframeClass@@QAEMXZ	; AirframeClass::GetCanopyMaxAngle
PUBLIC	?GetSoundExternalVol@AirframeClass@@QAEMXZ	; AirframeClass::GetSoundExternalVol
PUBLIC	??_GmlrVoiceHandle@@QAEPAXI@Z			; mlrVoiceHandle::`scalar deleting destructor'
PUBLIC	?MaxVoices@FragFile@@QAEHXZ			; FragFile::MaxVoices
PUBLIC	??_GVoiceFilter@@QAEPAXI@Z			; VoiceFilter::`scalar deleting destructor'
PUBLIC	?ChatSetup@@YAHXZ				; ChatSetup
PUBLIC	?ChatCleanup@@YAXXZ				; ChatCleanup
PUBLIC	?SaveSFXTable@@YAHXZ				; SaveSFXTable
PUBLIC	?F4LoopStream@@YAHHPAD@Z			; F4LoopStream
PUBLIC	?F4SetSoundFlags@@YAXHJ@Z			; F4SetSoundFlags
PUBLIC	?F4SetStreamFlags@@YAXHJ@Z			; F4SetStreamFlags
PUBLIC	?F4PlaySound@@YAXHH@Z				; F4PlaySound
PUBLIC	?SoundHandler@@YGXIIKKK@Z			; SoundHandler
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7F4SoundPos@@6B@				; F4SoundPos::`vftable'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?sndPurgeList@@3VAList@@A			; sndPurgeList
PUBLIC	?SonicBoomTable@@3VLookupTable@@A		; SonicBoomTable
PUBLIC	?CamRot@@3UTrotation@@A				; CamRot
PUBLIC	??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@		; `string'
PUBLIC	??_C@_0BA@LKFMLBBL@SoundPosSection?$AA@		; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_04OHMGOEGF@?5?0?7?6?$AA@			; `string'
PUBLIC	??_C@_0BA@GKBFKHHC@PLEV3FAHORSICOX?$AA@		; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4F4SoundPos@@6B@				; F4SoundPos::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVF4SoundPos@@@8				; F4SoundPos `RTTI Type Descriptor'
PUBLIC	??_R3F4SoundPos@@8				; F4SoundPos::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2F4SoundPos@@8				; F4SoundPos::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@F4SoundPos@@8			; F4SoundPos::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ANode@@8				; ANode::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVANode@@@8				; ANode `RTTI Type Descriptor'
PUBLIC	??_R3ANode@@8					; ANode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ANode@@8					; ANode::`RTTI Base Class Array'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3c8efa34
PUBLIC	__real@3d0efa34
PUBLIC	__real@3e428f5c
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@3fc90fd9
PUBLIC	__real@40490fd9
PUBLIC	__real@40490fdb
PUBLIC	__real@43340000
PUBLIC	__real@447a0000
PUBLIC	__real@44898000
PUBLIC	__real@47435000
PUBLIC	__real@c47a0000
PUBLIC	__real@c4fa0000
PUBLIC	__real@c59c4000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_strncpy:PROC
EXTRN	_strtok:PROC
EXTRN	_acos:PROC
EXTRN	_atan:PROC
EXTRN	_cos:PROC
EXTRN	__set_SSE2_enable:PROC
EXTRN	_fgets:PROC
EXTRN	_fwrite:PROC
EXTRN	_sprintf:PROC
EXTRN	??0ANode@@QAE@XZ:PROC				; ANode::ANode
EXTRN	?GetSucc@ANode@@QAEPAXXZ:PROC			; ANode::GetSucc
EXTRN	?Remove@ANode@@QAEPAXXZ:PROC			; ANode::Remove
EXTRN	??1ANode@@QAE@XZ:PROC				; ANode::~ANode
EXTRN	??0AList@@QAE@XZ:PROC				; AList::AList
EXTRN	?RemHead@AList@@QAEPAXXZ:PROC			; AList::RemHead
EXTRN	?AddHead@AList@@QAEXPAVANode@@@Z:PROC		; AList::AddHead
EXTRN	?GetHead@AList@@QAEPAXXZ:PROC			; AList::GetHead
EXTRN	?F4IsBadReadPtr@@YA_NPBXI@Z:PROC		; F4IsBadReadPtr
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?TokenF@@YAMM@Z:PROC				; TokenF
EXTRN	?TokenI@@YAHH@Z:PROC				; TokenI
EXTRN	?TokenF@@YAMPADM@Z:PROC				; TokenF
EXTRN	?TokenI@@YAHPADH@Z:PROC				; TokenI
EXTRN	??0CSoundMgr@@QAE@XZ:PROC			; CSoundMgr::CSoundMgr
EXTRN	??1CSoundMgr@@QAE@XZ:PROC			; CSoundMgr::~CSoundMgr
EXTRN	?InstallDSound@CSoundMgr@@QAEHPAUHWND__@@KPAUtWAVEFORMATEX@@@Z:PROC ; CSoundMgr::InstallDSound
EXTRN	?RemoveDSound@CSoundMgr@@QAEXXZ:PROC		; CSoundMgr::RemoveDSound
EXTRN	?LoadWaveFile@CSoundMgr@@QAEJPADJPAUSfxDef@@@Z:PROC ; CSoundMgr::LoadWaveFile
EXTRN	?AddRawSample@CSoundMgr@@QAEJPAUtWAVEFORMATEX@@PADJJ@Z:PROC ; CSoundMgr::AddRawSample
EXTRN	?RemoveSample@CSoundMgr@@QAEXJ@Z:PROC		; CSoundMgr::RemoveSample
EXTRN	?RemoveAllSamples@CSoundMgr@@QAEXXZ:PROC	; CSoundMgr::RemoveAllSamples
EXTRN	?PlaySample@CSoundMgr@@QAEHJJ@Z:PROC		; CSoundMgr::PlaySample
EXTRN	?StopSample@CSoundMgr@@QAEHJ@Z:PROC		; CSoundMgr::StopSample
EXTRN	?StopAllSamples@CSoundMgr@@QAEHXZ:PROC		; CSoundMgr::StopAllSamples
EXTRN	?SetSamplePitch@CSoundMgr@@QAEHJM@Z:PROC	; CSoundMgr::SetSamplePitch
EXTRN	?SetSampleVolume@CSoundMgr@@QAEHJJ@Z:PROC	; CSoundMgr::SetSampleVolume
EXTRN	?SetSamplePan@CSoundMgr@@QAEHJJ@Z:PROC		; CSoundMgr::SetSamplePan
EXTRN	?GetSampleVolume@CSoundMgr@@QAEHJ@Z:PROC	; CSoundMgr::GetSampleVolume
EXTRN	?IsSamplePlaying@CSoundMgr@@QAEHJH@Z:PROC	; CSoundMgr::IsSamplePlaying
EXTRN	?CreateStream@CSoundMgr@@QAEJPAUtWAVEFORMATEX@@M@Z:PROC ; CSoundMgr::CreateStream
EXTRN	?RemoveStream@CSoundMgr@@QAEXJ@Z:PROC		; CSoundMgr::RemoveStream
EXTRN	?RemoveAllStreams@CSoundMgr@@QAEXXZ:PROC	; CSoundMgr::RemoveAllStreams
EXTRN	?StartFileStream@CSoundMgr@@QAEHJPADJJ@Z:PROC	; CSoundMgr::StartFileStream
EXTRN	?StartMemoryStream@CSoundMgr@@QAEHJPADJ@Z:PROC	; CSoundMgr::StartMemoryStream
EXTRN	?StartCallbackStream@CSoundMgr@@QAEHJPAXP6AK0PADK@Z@Z:PROC ; CSoundMgr::StartCallbackStream
EXTRN	?SetStreamVolume@CSoundMgr@@QAEJJJ@Z:PROC	; CSoundMgr::SetStreamVolume
EXTRN	?StopStream@CSoundMgr@@QAEXJ@Z:PROC		; CSoundMgr::StopStream
EXTRN	?StopAllStreams@CSoundMgr@@QAEXXZ:PROC		; CSoundMgr::StopAllStreams
EXTRN	?GetStreamPlayTime@CSoundMgr@@QAEJJ@Z:PROC	; CSoundMgr::GetStreamPlayTime
EXTRN	?SetCameraPostion@CSoundMgr@@QAEXPAUTpoint@@PAUTrotation@@0_N@Z:PROC ; CSoundMgr::SetCameraPostion
EXTRN	?FindSample@CSoundMgr@@QAEPAVSoundList@@J@Z:PROC ; CSoundMgr::FindSample
EXTRN	?LoadRiffFormat@CSoundMgr@@QAEJPADPAUtWAVEFORMATEX@@PAJ2@Z:PROC ; CSoundMgr::LoadRiffFormat
EXTRN	_F4CreateCriticalSection:PROC
EXTRN	_F4DestroyCriticalSection:PROC
EXTRN	_F4EnterCriticalSection:PROC
EXTRN	_F4LeaveCriticalSection:PROC
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?GetOTWDisplayMode@OTWDriverClass@@QAE?AW4OTWDisplayMode@1@XZ:PROC ; OTWDriverClass::GetOTWDisplayMode
EXTRN	??0LookupTable@@QAE@XZ:PROC			; LookupTable::LookupTable
EXTRN	??1LookupTable@@QAE@XZ:PROC			; LookupTable::~LookupTable
EXTRN	?Lookup@LookupTable@@QAEMM@Z:PROC		; LookupTable::Lookup
EXTRN	?SetVoiceCount@VoiceMapper@@QAEXH@Z:PROC	; VoiceMapper::SetVoiceCount
EXTRN	??0mlrVoiceHandle@@QAE@PAVF4SoundPos@@HH@Z:PROC	; mlrVoiceHandle::mlrVoiceHandle
EXTRN	??1mlrVoiceHandle@@QAE@XZ:PROC			; mlrVoiceHandle::~mlrVoiceHandle
EXTRN	?Play@mlrVoiceHandle@@QAEXMMMMMMMM@Z:PROC	; mlrVoiceHandle::Play
EXTRN	?IsPlaying@mlrVoiceHandle@@QAE_NXZ:PROC		; mlrVoiceHandle::IsPlaying
EXTRN	?AreYou@mlrVoiceHandle@@QAE_NHH@Z:PROC		; mlrVoiceHandle::AreYou
EXTRN	?Exec@mlrVoiceManager@@QAEXPAUTpoint@@PAUTrotation@@0@Z:PROC ; mlrVoiceManager::Exec
EXTRN	?StopAll@mlrVoiceManager@@QAEXXZ:PROC		; mlrVoiceManager::StopAll
EXTRN	??0VoiceFilter@@QAE@XZ:PROC			; VoiceFilter::VoiceFilter
EXTRN	??1VoiceFilter@@QAE@XZ:PROC			; VoiceFilter::~VoiceFilter
EXTRN	?StartVoiceManager@VoiceFilter@@QAEXXZ:PROC	; VoiceFilter::StartVoiceManager
EXTRN	?ResetVoiceManager@VoiceFilter@@QAEXXZ:PROC	; VoiceFilter::ResetVoiceManager
EXTRN	?HearVoices@VoiceFilter@@QAEXXZ:PROC		; VoiceFilter::HearVoices
EXTRN	?SilenceVoices@VoiceFilter@@QAEXXZ:PROC		; VoiceFilter::SilenceVoices
EXTRN	?SetUpVoiceFilter@VoiceFilter@@QAEXXZ:PROC	; VoiceFilter::SetUpVoiceFilter
EXTRN	_ResFOpen:PROC
EXTRN	_ResFClose:PROC
EXTRN	_ResFSeek:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuxRealTime@@3KA:DWORD				; vuxRealTime
EXTRN	?SimLibMajorFrameTime@@3MA:DWORD		; SimLibMajorFrameTime
EXTRN	?gSoundDriver@@3PAVCSoundMgr@@A:DWORD		; gSoundDriver
EXTRN	?BuiltinSFX@@3PAUSfxDef@@A:BYTE			; BuiltinSFX
EXTRN	?BuiltinNSFX@@3HB:DWORD				; BuiltinNSFX
EXTRN	?SFX_DEF@@3PAUSfxDef@@A:DWORD			; SFX_DEF
EXTRN	?NumSFX@@3HA:DWORD				; NumSFX
EXTRN	?FALCONSNDTABLE@@3PBDB:DWORD			; FALCONSNDTABLE
EXTRN	?PlayerOptions@@3VPlayerOptionsClass@@A:BYTE	; PlayerOptions
EXTRN	?currentMode@SimulationLoopControl@@1W4SimLoopControlMode@1@A:DWORD ; SimulationLoopControl::currentMode
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?IMatrix@@3UTrotation@@B:BYTE			; IMatrix
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?g_voicemap@@3VVoiceMapper@@A:QWORD		; g_voicemap
EXTRN	?g_bRealisticAvionics@@3_NA:BYTE		; g_bRealisticAvionics
EXTRN	?gVoiceManager@@3VmlrVoiceManager@@A:BYTE	; gVoiceManager
EXTRN	?FALCONSNDTABLETXT@@3PBDB:DWORD			; FALCONSNDTABLETXT
EXTRN	?g_nSoundUpdateMS@@3HA:DWORD			; g_nSoundUpdateMS
EXTRN	?g_bSoundHearVMSExternal@@3_NA:BYTE		; g_bSoundHearVMSExternal
EXTRN	?g_bEnableDopplerSound@@3_NA:BYTE		; g_bEnableDopplerSound
EXTRN	?g_bSoundDistanceEffect@@3_NA:BYTE		; g_bSoundDistanceEffect
EXTRN	?g_bNewEngineSounds@@3_NA:BYTE			; g_bNewEngineSounds
EXTRN	?g_bSoundSonicBoom@@3_NA:BYTE			; g_bSoundSonicBoom
EXTRN	?FalconObjectDataDir@@3PADA:BYTE		; FalconObjectDataDir
EXTRN	?FalconSoundThrDirectory@@3PADA:BYTE		; FalconSoundThrDirectory
EXTRN	?FalconDataDirectory@@3PADA:BYTE		; FalconDataDirectory
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

?sndPurgeList@@3VAList@@A DB 018H DUP (?)		; sndPurgeList
?SonicBoomTable@@3VLookupTable@@A DB 054H DUP (?)	; SonicBoomTable
_chatMode DD	01H DUP (?)
?CamRot@@3UTrotation@@A DB 024H DUP (?)			; CamRot
_BSS	ENDS
;	COMDAT ?lastPlayTime@?1??F4SoundFXPositionDriver@@9@4KA
_BSS	SEGMENT
?lastPlayTime@?1??F4SoundFXPositionDriver@@9@4KA DD 01H DUP (?) ; `F4SoundFXPositionDriver'::`2'::lastPlayTime
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@c59c4000
CONST	SEGMENT
__real@c59c4000 DD 0c59c4000r			; -5000
CONST	ENDS
;	COMDAT __real@c4fa0000
CONST	SEGMENT
__real@c4fa0000 DD 0c4fa0000r			; -2000
CONST	ENDS
;	COMDAT __real@c47a0000
CONST	SEGMENT
__real@c47a0000 DD 0c47a0000r			; -1000
CONST	ENDS
;	COMDAT __real@47435000
CONST	SEGMENT
__real@47435000 DD 047435000r			; 50000
CONST	ENDS
;	COMDAT __real@44898000
CONST	SEGMENT
__real@44898000 DD 044898000r			; 1100
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40490fd9
CONST	SEGMENT
__real@40490fd9 DD 040490fd9r			; 3.14159
CONST	ENDS
;	COMDAT __real@3fc90fd9
CONST	SEGMENT
__real@3fc90fd9 DD 03fc90fd9r			; 1.5708
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e428f5c
CONST	SEGMENT
__real@3e428f5c DD 03e428f5cr			; 0.19
CONST	ENDS
;	COMDAT __real@3d0efa34
CONST	SEGMENT
__real@3d0efa34 DD 03d0efa34r			; 0.0349066
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ANode@@8
rdata$r	SEGMENT
??_R2ANode@@8 DD FLAT:??_R1A@?0A@EA@ANode@@8		; ANode::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ANode@@8
rdata$r	SEGMENT
??_R3ANode@@8 DD 00H					; ANode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ANode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVANode@@@8
_DATA	SEGMENT
??_R0?AVANode@@@8 DD FLAT:??_7type_info@@6B@		; ANode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVANode@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ANode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ANode@@8 DD FLAT:??_R0?AVANode@@@8	; ANode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ANode@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@F4SoundPos@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@F4SoundPos@@8 DD FLAT:??_R0?AVF4SoundPos@@@8 ; F4SoundPos::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3F4SoundPos@@8
rdata$r	ENDS
;	COMDAT ??_R2F4SoundPos@@8
rdata$r	SEGMENT
??_R2F4SoundPos@@8 DD FLAT:??_R1A@?0A@EA@F4SoundPos@@8	; F4SoundPos::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ANode@@8
rdata$r	ENDS
;	COMDAT ??_R3F4SoundPos@@8
rdata$r	SEGMENT
??_R3F4SoundPos@@8 DD 00H				; F4SoundPos::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2F4SoundPos@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVF4SoundPos@@@8
_DATA	SEGMENT
??_R0?AVF4SoundPos@@@8 DD FLAT:??_7type_info@@6B@	; F4SoundPos `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVF4SoundPos@@', 00H
_DATA	ENDS
;	COMDAT ??_R4F4SoundPos@@6B@
rdata$r	SEGMENT
??_R4F4SoundPos@@6B@ DD 00H				; F4SoundPos::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVF4SoundPos@@@8
	DD	FLAT:??_R3F4SoundPos@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ?LastOTWDispMode@?L@??F4SoundFXPositionDriver@@9@4HA
_DATA	SEGMENT
?LastOTWDispMode@?L@??F4SoundFXPositionDriver@@9@4HA DD 0ffffffffH ; `F4SoundFXPositionDriver'::`11'::LastOTWDispMode
_DATA	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GKBFKHHC@PLEV3FAHORSICOX?$AA@
CONST	SEGMENT
??_C@_0BA@GKBFKHHC@PLEV3FAHORSICOX?$AA@ DB 'PLEV3FAHORSICOX', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHMGOEGF@?5?0?7?6?$AA@
CONST	SEGMENT
??_C@_04OHMGOEGF@?5?0?7?6?$AA@ DB ' ,', 09H, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LKFMLBBL@SoundPosSection?$AA@
CONST	SEGMENT
??_C@_0BA@LKFMLBBL@SoundPosSection?$AA@ DB 'SoundPosSection', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@
CONST	SEGMENT
??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@ DB '%s\%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7F4SoundPos@@6B@
CONST	SEGMENT
??_7F4SoundPos@@6B@ DD FLAT:??_R4F4SoundPos@@6B@	; F4SoundPos::`vftable'
	DD	FLAT:?CompareWith@ANode@@UAEHPAV1@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?Sfx@F4SoundPos@@QAEXHHMMMMM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Sfx@F4SoundPos@@QAEXHHMMMMM@Z$0
__unwindtable$??0F4SoundPos@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0F4SoundPos@@QAE@XZ$0
__unwindtable$??1F4SoundPos@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1F4SoundPos@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1F4SoundPos@@QAE@XZ$1
__unwindtable$?InitSoundManager@@YAHPAUHWND__@@HPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitSoundManager@@YAHPAUHWND__@@HPAD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitSoundManager@@YAHPAUHWND__@@HPAD@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitSoundManager@@YAHPAUHWND__@@HPAD@Z$2
__ehfuncinfo$?InitSoundManager@@YAHPAUHWND__@@HPAD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?InitSoundManager@@YAHPAUHWND__@@HPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Sfx@F4SoundPos@@QAEXHHMMMMM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Sfx@F4SoundPos@@QAEXHHMMMMM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??1F4SoundPos@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1F4SoundPos@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0F4SoundPos@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0F4SoundPos@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1AList@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1AList@@QAE@XZ$0
__ehfuncinfo$??1AList@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1AList@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_sndPurgeList$initializer$ DD FLAT:??__EsndPurgeList@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_SonicBoomTable$initializer$ DD FLAT:??__ESonicBoomTable@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_CamRot$initializer$ DD FLAT:??__ECamRot@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
?SoundHandler@@YGXIIKKK@Z PROC				; SoundHandler

; 842  : {

	push	ebp
	mov	ebp, esp

; 843  : }

	pop	ebp
	ret	20					; 00000014H
?SoundHandler@@YGXIIKKK@Z ENDP				; SoundHandler
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_soundIdx$ = 8						; size = 4
_flags$ = 12						; size = 4
?F4PlaySound@@YAXHH@Z PROC				; F4PlaySound

; 761  : {

	push	ebp
	mov	ebp, esp

; 762  : 	if(gSoundDriver && soundIdx != SND_NO_HANDLE)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN2@F4PlaySoun
	cmp	DWORD PTR _soundIdx$[ebp], 0
	je	SHORT $LN2@F4PlaySoun

; 763  : 		gSoundDriver->PlaySample(soundIdx,flags);

	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soundIdx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?PlaySample@CSoundMgr@@QAEHJJ@Z		; CSoundMgr::PlaySample
$LN2@F4PlaySoun:

; 764  : }

	pop	ebp
	ret	0
?F4PlaySound@@YAXHH@Z ENDP				; F4PlaySound
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?F4SetStreamFlags@@YAXHJ@Z PROC				; F4SetStreamFlags

; 735  : {

	push	ebp
	mov	ebp, esp

; 736  : /*
; 737  : 	if(gSoundDriver && soundIdx != SND_NO_HANDLE)
; 738  : 	{
; 739  : 	}
; 740  : */
; 741  : }

	pop	ebp
	ret	0
?F4SetStreamFlags@@YAXHJ@Z ENDP				; F4SetStreamFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_snd$ = -4						; size = 4
_soundIdx$ = 8						; size = 4
_flags$ = 12						; size = 4
?F4SetSoundFlags@@YAXHJ@Z PROC				; F4SetSoundFlags

; 722  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 723  : 	SOUNDLIST *snd;
; 724  : 
; 725  : 	if(gSoundDriver && soundIdx != SND_NO_HANDLE)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN3@F4SetSound
	cmp	DWORD PTR _soundIdx$[ebp], 0
	je	SHORT $LN3@F4SetSound

; 726  : 	{
; 727  : 		snd=gSoundDriver->FindSample(soundIdx);

	mov	eax, DWORD PTR _soundIdx$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?FindSample@CSoundMgr@@QAEPAVSoundList@@J@Z ; CSoundMgr::FindSample
	mov	DWORD PTR _snd$[ebp], eax

; 728  : 		if(snd != NULL)

	cmp	DWORD PTR _snd$[ebp], 0
	je	SHORT $LN3@F4SetSound

; 729  : 			snd->Flags |= flags;

	mov	ecx, DWORD PTR _snd$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	or	edx, DWORD PTR _flags$[ebp]
	mov	eax, DWORD PTR _snd$[ebp]
	mov	DWORD PTR [eax+16], edx
$LN3@F4SetSound:

; 730  : 	}
; 731  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?F4SetSoundFlags@@YAXHJ@Z ENDP				; F4SetSoundFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_StreamID$ = 8						; size = 4
_filename$ = 12						; size = 4
?F4LoopStream@@YAHHPAD@Z PROC				; F4LoopStream

; 603  : {

	push	ebp
	mov	ebp, esp

; 604  : 	if(gSoundDriver && StreamID != SND_NO_HANDLE)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN1@F4LoopStre
	cmp	DWORD PTR _StreamID$[ebp], 0
	je	SHORT $LN1@F4LoopStre

; 605  : 		return(gSoundDriver->StartFileStream(StreamID,filename,SND_STREAM_LOOP));

	push	0
	push	32768					; 00008000H
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _StreamID$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?StartFileStream@CSoundMgr@@QAEHJPADJJ@Z ; CSoundMgr::StartFileStream
	jmp	SHORT $LN2@F4LoopStre
$LN1@F4LoopStre:

; 606  : 
; 607  : 	return(FALSE);

	xor	eax, eax
$LN2@F4LoopStre:

; 608  : }

	pop	ebp
	ret	0
?F4LoopStream@@YAHHPAD@Z ENDP				; F4LoopStream
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_sfxtable$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
?SaveSFXTable@@YAHXZ PROC				; SaveSFXTable

; 418  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 419  :     char sfxtable[_MAX_PATH];
; 420  :     if (FalconObjectDataDir == NULL) return FALSE;

	mov	eax, OFFSET ?FalconObjectDataDir@@3PADA	; FalconObjectDataDir
	test	eax, eax
	jne	SHORT $LN2@SaveSFXTab
	xor	eax, eax
	jmp	SHORT $LN3@SaveSFXTab
$LN2@SaveSFXTab:

; 421  :     sprintf (sfxtable, "%s\\%s", FalconObjectDataDir, FALCONSNDTABLE);

	mov	ecx, DWORD PTR ?FALCONSNDTABLE@@3PBDB	; FALCONSNDTABLE
	push	ecx
	push	OFFSET ?FalconObjectDataDir@@3PADA	; FalconObjectDataDir
	push	OFFSET ??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@
	lea	edx, DWORD PTR _sfxtable$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 422  :     ShiAssert(SFX_DEF == NULL);
; 423  :     if (WriteSFXTable (sfxtable) == FALSE)

	lea	eax, DWORD PTR _sfxtable$[ebp]
	push	eax
	call	?WriteSFXTable@@YAHPAD@Z		; WriteSFXTable
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@SaveSFXTab

; 424  : 	return FALSE;

	xor	eax, eax
	jmp	SHORT $LN3@SaveSFXTab
$LN1@SaveSFXTab:

; 425  :     return TRUE;

	mov	eax, 1
$LN3@SaveSFXTab:

; 426  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?SaveSFXTable@@YAHXZ ENDP				; SaveSFXTable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_vrsn$ = -8						; size = 4
_fp$ = -4						; size = 4
_sndtable$ = 8						; size = 4
?WriteSFXTable@@YAHPAD@Z PROC				; WriteSFXTable

; 1167 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1168 :     ShiAssert(FALSE == IsBadStringPtr(sndtable, _MAX_PATH));
; 1169 :     if(BuiltinNSFX <= 0 || BuiltinSFX == NULL) return FALSE;

	cmp	DWORD PTR ?BuiltinNSFX@@3HB, 0		; BuiltinNSFX
	jle	SHORT $LN5@WriteSFXTa
	mov	eax, OFFSET ?BuiltinSFX@@3PAUSfxDef@@A	; BuiltinSFX
	test	eax, eax
	jne	SHORT $LN6@WriteSFXTa
$LN5@WriteSFXTa:
	xor	eax, eax
	jmp	$LN7@WriteSFXTa
$LN6@WriteSFXTa:

; 1170 :     ShiAssert(FALSE == F4IsBadReadPtr (BuiltinSFX, sizeof(SFX_DEF) * BuiltinNSFX));
; 1171 : 
; 1172 :     FILE *fp = fopen(sndtable, "wb");

	push	OFFSET ??_C@_02GMLFBBN@wb?$AA@
	mov	ecx, DWORD PTR _sndtable$[ebp]
	push	ecx
	call	_ResFOpen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 1173 : 
; 1174 :     if (fp == NULL) {

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN4@WriteSFXTa

; 1175 : 	return FALSE;

	xor	eax, eax
	jmp	$LN7@WriteSFXTa
$LN4@WriteSFXTa:

; 1176 :     }
; 1177 :     int vrsn = SFX_TABLE_VRSN;

	mov	DWORD PTR _vrsn$[ebp], 2

; 1178 :     if (fwrite(&vrsn, sizeof(vrsn), 1, fp) != 1 ||
; 1179 : 	fwrite(&BuiltinNSFX, sizeof(BuiltinNSFX), 1, fp) != 1) {

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	1
	push	4
	lea	eax, DWORD PTR _vrsn$[ebp]
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H
	cmp	eax, 1
	jne	SHORT $LN2@WriteSFXTa
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	1
	push	4
	push	OFFSET ?BuiltinNSFX@@3HB		; BuiltinNSFX
	call	_fwrite
	add	esp, 16					; 00000010H
	cmp	eax, 1
	je	SHORT $LN3@WriteSFXTa
$LN2@WriteSFXTa:

; 1180 : 	ShiAssert(!"Write error on Sound Table");
; 1181 : 	fclose (fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_ResFClose
	add	esp, 4

; 1182 : 	return FALSE;

	xor	eax, eax
	jmp	SHORT $LN7@WriteSFXTa
$LN3@WriteSFXTa:

; 1183 :     }
; 1184 :     if (fwrite(BuiltinSFX, sizeof(*BuiltinSFX), BuiltinNSFX, fp) != (UINT)BuiltinNSFX) {

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?BuiltinNSFX@@3HB	; BuiltinNSFX
	push	ecx
	push	140					; 0000008cH
	push	OFFSET ?BuiltinSFX@@3PAUSfxDef@@A	; BuiltinSFX
	call	_fwrite
	add	esp, 16					; 00000010H
	cmp	eax, DWORD PTR ?BuiltinNSFX@@3HB	; BuiltinNSFX
	je	SHORT $LN1@WriteSFXTa

; 1185 : 	ShiAssert(!"Write error on Sound Table");
; 1186 : 	fclose (fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_ResFClose
	add	esp, 4

; 1187 : 	return FALSE;

	xor	eax, eax
	jmp	SHORT $LN7@WriteSFXTa
$LN1@WriteSFXTa:

; 1188 :     }
; 1189 :     fclose (fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_ResFClose
	add	esp, 4

; 1190 :     return TRUE;

	mov	eax, 1
$LN7@WriteSFXTa:

; 1191 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?WriteSFXTable@@YAHPAD@Z ENDP				; WriteSFXTable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
tv457 = -564						; size = 4
tv468 = -560						; size = 4
$T1 = -556						; size = 4
_nsfx$ = -552						; size = 4
_fp$ = -548						; size = 4
_l$2 = -544						; size = 4
_arg$ = -540						; size = 4
_i$ = -536						; size = 4
_buffer$ = -532						; size = 512
_flags$3 = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_sndtable$ = 8						; size = 4
?ReadSFXTableTXT@@YAHPAD@Z PROC				; ReadSFXTableTXT

; 947  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 564				; 00000234H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi

; 948  : 	char buffer[512],*arg;
; 949  :     ShiAssert(FALSE == IsBadStringPtr(sndtable, 256));
; 950  :     FILE *fp = fopen(sndtable, "r");

	push	OFFSET ??_C@_01KDCPPGHE@r?$AA@
	mov	eax, DWORD PTR _sndtable$[ebp]
	push	eax
	call	_ResFOpen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 951  : 
; 952  :   if (fp == NULL) 

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN18@ReadSFXTab

; 953  : 	{
; 954  : 		return FALSE;

	xor	eax, eax
	jmp	$LN19@ReadSFXTab
$LN18@ReadSFXTab:

; 955  :   }
; 956  : 
; 957  : 	int nsfx=0;

	mov	DWORD PTR _nsfx$[ebp], 0
$LN17@ReadSFXTab:

; 958  : 
; 959  : 	while(fgets(buffer,512,fp))

	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	512					; 00000200H
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_fgets
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN16@ReadSFXTab

; 960  : 	{
; 961  : 		if(buffer[0]!='#')

	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _buffer$[ebp+eax]
	cmp	ecx, 35					; 00000023H
	je	SHORT $LN15@ReadSFXTab

; 962  : 			nsfx++;

	mov	edx, DWORD PTR _nsfx$[ebp]
	add	edx, 1
	mov	DWORD PTR _nsfx$[ebp], edx
$LN15@ReadSFXTab:

; 963  : 	}

	jmp	SHORT $LN17@ReadSFXTab
$LN16@ReadSFXTab:

; 964  : 
; 965  : 	fseek(fp,0,SEEK_SET);

	push	0
	push	0
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_ResFSeek
	add	esp, 12					; 0000000cH

; 966  : 
; 967  :     SFX_DEF = new SFX_DEF_ENTRY[nsfx];

	xor	ecx, ecx
	mov	eax, DWORD PTR _nsfx$[ebp]
	mov	edx, 140				; 0000008cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A, eax	; SFX_DEF

; 968  :     NumSFX = nsfx;

	mov	ecx, DWORD PTR _nsfx$[ebp]
	mov	DWORD PTR ?NumSFX@@3HA, ecx		; NumSFX

; 969  : 
; 970  : 	int i=0;

	mov	DWORD PTR _i$[ebp], 0
$LN14@ReadSFXTab:

; 971  :   	while(fgets(buffer,512,fp))

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	512					; 00000200H
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_fgets
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN13@ReadSFXTab

; 972  : 	{
; 973  : 		if(buffer[0]!='#')

	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR _buffer$[ebp+ecx]
	cmp	edx, 35					; 00000023H
	je	$LN12@ReadSFXTab

; 974  : 		{
; 975  : 			arg=strtok(buffer," ,\t\n");

	push	OFFSET ??_C@_04OHMGOEGF@?5?0?7?6?$AA@
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_strtok
	add	esp, 8
	mov	DWORD PTR _arg$[ebp], eax

; 976  : 			strncpy(SFX_DEF[i].fileName,arg,64);

	push	64					; 00000040H
	mov	ecx, DWORD PTR _arg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 140				; 0000008cH
	add	edx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	push	edx
	call	_strncpy
	add	esp, 12					; 0000000cH

; 977  : 			SFX_DEF[i].offset=TokenI(0,0);

	push	0
	push	0
	call	?TokenI@@YAHPADH@Z			; TokenI
	add	esp, 8
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 140				; 0000008cH
	mov	edx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	DWORD PTR [edx+ecx+64], eax

; 978  : 			SFX_DEF[i].length=TokenI(0,0);

	push	0
	push	0
	call	?TokenI@@YAHPADH@Z			; TokenI
	add	esp, 8
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 140				; 0000008cH
	mov	edx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	DWORD PTR [edx+ecx+68], eax

; 979  : 			SFX_DEF[i].handle=0;		// run time data

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 140				; 0000008cH
	mov	ecx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	DWORD PTR [ecx+eax+72], 0

; 980  : 			SFX_DEF[i].maxDistSq=TokenF(0,50000);

	push	ecx
	movss	xmm0, DWORD PTR __real@47435000
	movss	DWORD PTR [esp], xmm0
	push	0
	call	?TokenF@@YAMPADM@Z			; TokenF
	add	esp, 8
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 140				; 0000008cH
	mov	eax, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	fstp	DWORD PTR [eax+edx+76]

; 981  : 			SFX_DEF[i].maxDistSq*=SFX_DEF[i].maxDistSq; // Must square values

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 140				; 0000008cH
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 140				; 0000008cH
	mov	eax, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	esi, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	movss	xmm0, DWORD PTR [eax+ecx+76]
	mulss	xmm0, DWORD PTR [esi+edx+76]
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 140				; 0000008cH
	mov	edx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	movss	DWORD PTR [edx+ecx+76], xmm0

; 982  : 			SFX_DEF[i].min3ddist=TokenF(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	0
	call	?TokenF@@YAMPADM@Z			; TokenF
	add	esp, 8
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 140				; 0000008cH
	mov	ecx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	fstp	DWORD PTR [ecx+eax+124]

; 983  : 			SFX_DEF[i].min3ddist*=SFX_DEF[i].min3ddist; // Must square values

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 140				; 0000008cH
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 140				; 0000008cH
	mov	ecx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	esi, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	movss	xmm0, DWORD PTR [ecx+edx+124]
	mulss	xmm0, DWORD PTR [esi+eax+124]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 140				; 0000008cH
	mov	eax, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	movss	DWORD PTR [eax+edx+124], xmm0

; 984  : 			SFX_DEF[i].maxVol=TokenF(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	0
	call	?TokenF@@YAMPADM@Z			; TokenF
	add	esp, 8
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 140				; 0000008cH
	mov	edx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	fstp	DWORD PTR [edx+ecx+80]

; 985  : 			SFX_DEF[i].minVol=TokenF(0,-1000);

	push	ecx
	movss	xmm0, DWORD PTR __real@c47a0000
	movss	DWORD PTR [esp], xmm0
	push	0
	call	?TokenF@@YAMPADM@Z			; TokenF
	add	esp, 8
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 140				; 0000008cH
	mov	ecx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	fstp	DWORD PTR [ecx+eax+84]

; 986  : 			SFX_DEF[i].distSq=0;		// TokenI(0,0); run time data

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 140				; 0000008cH
	mov	eax, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx+88], xmm0

; 987  : 			SFX_DEF[i].override=0;		// TokenI(0,0); run time data

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 140				; 0000008cH
	mov	edx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	DWORD PTR [edx+ecx+92], 0

; 988  : 			SFX_DEF[i].lastFrameUpdated=0;		// TokenI(0,0); run time data

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 140				; 0000008cH
	mov	ecx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	DWORD PTR [ecx+eax+96], 0

; 989  : 			//SFX_DEF[i].flags=TokenI(0,0);
; 990  : 			arg=strtok(0," ,\t\n");

	push	OFFSET ??_C@_04OHMGOEGF@?5?0?7?6?$AA@
	push	0
	call	_strtok
	add	esp, 8
	mov	DWORD PTR _arg$[ebp], eax

; 991  : 			SFX_DEF[i].flags = 0;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 140				; 0000008cH
	mov	eax, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	DWORD PTR [eax+edx+100], 0

; 992  : 			if(arg)

	cmp	DWORD PTR _arg$[ebp], 0
	je	$LN9@ReadSFXTab
$LN10@ReadSFXTab:

; 993  : 			{
; 994  : 				while(*arg)

	mov	ecx, DWORD PTR _arg$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	$LN9@ReadSFXTab

; 995  : 				{
; 996  : 					int l;
; 997  : 					char flags[16]="PLEV3FAHORSICOX"; 

	mov	eax, DWORD PTR ??_C@_0BA@GKBFKHHC@PLEV3FAHORSICOX?$AA@
	mov	DWORD PTR _flags$3[ebp], eax
	mov	ecx, DWORD PTR ??_C@_0BA@GKBFKHHC@PLEV3FAHORSICOX?$AA@+4
	mov	DWORD PTR _flags$3[ebp+4], ecx
	mov	edx, DWORD PTR ??_C@_0BA@GKBFKHHC@PLEV3FAHORSICOX?$AA@+8
	mov	DWORD PTR _flags$3[ebp+8], edx
	mov	eax, DWORD PTR ??_C@_0BA@GKBFKHHC@PLEV3FAHORSICOX?$AA@+12
	mov	DWORD PTR _flags$3[ebp+12], eax

; 998  : 					for(l=0;l<16;l++)

	mov	DWORD PTR _l$2[ebp], 0
	jmp	SHORT $LN8@ReadSFXTab
$LN7@ReadSFXTab:
	mov	ecx, DWORD PTR _l$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _l$2[ebp], ecx
$LN8@ReadSFXTab:
	cmp	DWORD PTR _l$2[ebp], 16			; 00000010H
	jge	SHORT $LN6@ReadSFXTab

; 999  : 					{
; 1000 : 						if(*arg==flags[l])

	mov	edx, DWORD PTR _arg$[ebp]
	movsx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _l$2[ebp]
	movsx	edx, BYTE PTR _flags$3[ebp+ecx]
	cmp	eax, edx
	jne	SHORT $LN5@ReadSFXTab

; 1001 : 						{
; 1002 : 							SFX_DEF[i].flags|=1<<l;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 140				; 0000008cH
	mov	edx, 1
	mov	ecx, DWORD PTR _l$2[ebp]
	shl	edx, cl
	mov	ecx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	or	edx, DWORD PTR [ecx+eax+100]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 140				; 0000008cH
	mov	ecx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	DWORD PTR [ecx+eax+100], edx
$LN5@ReadSFXTab:

; 1003 : 						}
; 1004 : 					}

	jmp	SHORT $LN7@ReadSFXTab
$LN6@ReadSFXTab:

; 1005 : 					arg++;

	mov	edx, DWORD PTR _arg$[ebp]
	add	edx, 1
	mov	DWORD PTR _arg$[ebp], edx

; 1006 : 				}

	jmp	$LN10@ReadSFXTab
$LN9@ReadSFXTab:

; 1007 : 			}
; 1008 : 
; 1009 : 
; 1010 : 			if(SFX_DEF[i].flags & (SFX_POS_SELF | SFX_POS_EXTONLY | SFX_POS_EXTINT))

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 140				; 0000008cH
	mov	ecx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	edx, DWORD PTR [ecx+eax+100]
	and	edx, 25600				; 00006400H
	je	SHORT $LN4@ReadSFXTab

; 1011 : 			{   // for all those types, set the External flag
; 1012 : 				SFX_DEF[i].flags |= SFX_POS_EXTERN;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 140				; 0000008cH
	mov	ecx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	edx, DWORD PTR [ecx+eax+100]
	or	edx, 4
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 140				; 0000008cH
	mov	ecx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	DWORD PTR [ecx+eax+100], edx
$LN4@ReadSFXTab:

; 1013 : 			}
; 1014 : 
; 1015 : 			if(SFX_DEF[i].flags & SFX_POS_EXTERN)

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 140				; 0000008cH
	mov	eax, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	ecx, DWORD PTR [eax+edx+100]
	and	ecx, 4
	je	SHORT $LN3@ReadSFXTab

; 1016 : 			{
; 1017 : 				// for all external types, set the 3d flag
; 1018 : 				SFX_DEF[i].flags |= SFX_FLAGS_3D;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 140				; 0000008cH
	mov	eax, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	ecx, DWORD PTR [eax+edx+100]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 140				; 0000008cH
	mov	eax, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	DWORD PTR [eax+edx+100], ecx
$LN3@ReadSFXTab:

; 1019 : 				// SFX_DEF[i].flags |= SFX_FLAGS_FREQ; // needed for doppler effect // this will be handled in psound
; 1020 : 				
; 1021 : 			}
; 1022 : 
; 1023 : 			SFX_DEF[i].pitchScale=TokenF(0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	?TokenF@@YAMM@Z				; TokenF
	add	esp, 4
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 140				; 0000008cH
	mov	edx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	fstp	DWORD PTR [edx+ecx+104]

; 1024 : 			SFX_DEF[i].soundGroup=TokenI(0);

	push	0
	call	?TokenI@@YAHH@Z				; TokenI
	add	esp, 4
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 140				; 0000008cH
	mov	edx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	DWORD PTR [edx+ecx+112], eax

; 1025 : 			SFX_DEF[i].LinkedSoundID=TokenI(0);

	push	0
	call	?TokenI@@YAHH@Z				; TokenI
	add	esp, 4
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 140				; 0000008cH
	mov	edx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	DWORD PTR [edx+ecx+116], eax

; 1026 : 			SFX_DEF[i].Unused=TokenI(0);

	push	0
	call	?TokenI@@YAHH@Z				; TokenI
	add	esp, 4
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 140				; 0000008cH
	mov	edx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	DWORD PTR [edx+ecx+120], eax

; 1027 : 			SFX_DEF[i].coneInsideAngle  =cos( TokenF(0)   / 180 * PI );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	call	?TokenF@@YAMM@Z				; TokenF
	add	esp, 4
	fstp	DWORD PTR tv457[ebp]
	movss	xmm0, DWORD PTR tv457[ebp]
	divss	xmm0, DWORD PTR __real@43340000
	mulss	xmm0, DWORD PTR __real@40490fdb
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 140				; 0000008cH
	mov	ecx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	fstp	DWORD PTR [ecx+eax+128]

; 1028 : 			SFX_DEF[i].coneOutsideAngle =cos( TokenF(180) / 180 * PI );

	push	ecx
	movss	xmm0, DWORD PTR __real@43340000
	movss	DWORD PTR [esp], xmm0
	call	?TokenF@@YAMM@Z				; TokenF
	add	esp, 4
	fstp	DWORD PTR tv468[ebp]
	movss	xmm0, DWORD PTR tv468[ebp]
	divss	xmm0, DWORD PTR __real@43340000
	mulss	xmm0, DWORD PTR __real@40490fdb
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 140				; 0000008cH
	mov	eax, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	fstp	DWORD PTR [eax+edx+132]

; 1029 : 			SFX_DEF[i].coneOutsideVol   =TokenF(SFX_DEF[i].maxVol);

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 140				; 0000008cH
	mov	edx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx+80]
	movss	DWORD PTR [esp], xmm0
	call	?TokenF@@YAMM@Z				; TokenF
	add	esp, 4
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 140				; 0000008cH
	mov	ecx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	fstp	DWORD PTR [ecx+eax+136]

; 1030 : 
; 1031 : //			SFX_DEF[i].majorSymbol=TokenI(0,0);
; 1032 : //			SFX_DEF[i].minorSymbol=TokenI(0,0);
; 1033 : 			i++;

	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN12@ReadSFXTab:

; 1034 : 		}
; 1035 : 	}

	jmp	$LN14@ReadSFXTab
$LN13@ReadSFXTab:

; 1036 : 
; 1037 : 	// if the text file is too short, get defaults
; 1038 : 	while(i<BuiltinNSFX)

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?BuiltinNSFX@@3HB	; BuiltinNSFX
	jge	SHORT $LN1@ReadSFXTab

; 1039 : 	{
; 1040 : 		SFX_DEF[i]=BuiltinSFX[i];

	mov	esi, DWORD PTR _i$[ebp]
	imul	esi, 140				; 0000008cH
	add	esi, OFFSET ?BuiltinSFX@@3PAUSfxDef@@A	; BuiltinSFX
	mov	edi, DWORD PTR _i$[ebp]
	imul	edi, 140				; 0000008cH
	add	edi, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	ecx, 35					; 00000023H
	rep movsd

; 1041 : 		i++;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 1042 : 	}

	jmp	SHORT $LN13@ReadSFXTab
$LN1@ReadSFXTab:

; 1043 : 
; 1044 :     fclose (fp);

	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_ResFClose
	add	esp, 4

; 1045 : 
; 1046 : //#define SNDINI
; 1047 : #ifdef SNDINI
; 1048 : 	{
; 1049 : 		FILE *fp;
; 1050 : 
; 1051 : 		if(fp=fopen("f4sound.ini","w"))
; 1052 : 		{
; 1053 : 			fprintf(fp,
; 1054 : 				"id=%d"
; 1055 : 				"filename=%s"
; 1056 : 				"{\nSound ID-%d \"%s\" Offset=%d Lenght=%d MaxDist=%f MinDist=%f MaxVol=%f MinVol=%f Flags=%8x ",
; 1057 : 				i,
; 1058 : 				SFX_DEF[i].fileName,
; 1059 : 				SFX_DEF[i].offset,
; 1060 : 				SFX_DEF[i].length,
; 1061 : 				SFX_DEF[i].maxDistSq,
; 1062 : 				SFX_DEF[i].min3ddist,
; 1063 : 				SFX_DEF[i].maxVol,
; 1064 : 				SFX_DEF[i].minVol,
; 1065 : 				SFX_DEF[i].flags);
; 1066 : 
; 1067 : 			int l;
; 1068 : 			for(l=0;l<10;l++)
; 1069 : 			{
; 1070 : 				char flags[11]="PLEV3FAHOR"; 
; 1071 : 				if(SFX_DEF[i].flags & 1<<l)
; 1072 : 					fprintf(fp,"%c",flags[l]);
; 1073 : 			}
; 1074 : 			fprintf(fp,"\n");
; 1075 : 
; 1076 : 			fclose(fp);
; 1077 : 
; 1078 : 
; 1079 : 
; 1080 : 		}
; 1081 : 	}
; 1082 : #endif
; 1083 : 
; 1084 :     return TRUE;

	mov	eax, 1
$LN19@ReadSFXTab:

; 1085 : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ReadSFXTableTXT@@YAHPAD@Z ENDP				; ReadSFXTableTXT
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_i$ = -4						; size = 4
?UnLoadSFX@@YAXXZ PROC					; UnLoadSFX

; 1194 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1195 : int i;
; 1196 : 
; 1197 :    for (i=0; i<NumSFX; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@UnLoadSFX
$LN2@UnLoadSFX:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@UnLoadSFX:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR ?NumSFX@@3HA		; NumSFX
	jge	SHORT $LN4@UnLoadSFX

; 1198 :    {
; 1199 :       F4FreeSound(&(SFX_DEF[i].handle));

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 140				; 0000008cH
	mov	eax, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	lea	ecx, DWORD PTR [eax+edx+72]
	push	ecx
	call	_F4FreeSound
	add	esp, 4

; 1200 :       ShiAssert (SFX_DEF[i].handle == SND_NO_HANDLE );
; 1201 :    }

	jmp	SHORT $LN2@UnLoadSFX
$LN4@UnLoadSFX:

; 1202 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?UnLoadSFX@@YAXXZ ENDP					; UnLoadSFX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_i$ = -268						; size = 4
_fname$ = -264						; size = 260
__$ArrayPad$ = -4					; size = 4
_falconDataDir$ = 8					; size = 4
?LoadSFX@@YAXPAD@Z PROC					; LoadSFX

; 1121 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1122 :     int i;
; 1123 :     char fname[MAX_PATH];
; 1124 : 
; 1125 : 	// RV - Biker - Suppress log-file
; 1126 : 	//sprintf( fname, "%s\\%s", FalconSoundThrDirectory, "SoundError.log" );
; 1127 : 	
; 1128 : 	//FILE *fp;
; 1129 : 	//fp=fopen("SoundError.log","w");
; 1130 : 	{
; 1131 : 		
; 1132 : 		for (i=0; i<NumSFX; i++) // first pass - most important buffers

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@LoadSFX
$LN7@LoadSFX:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@LoadSFX:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR ?NumSFX@@3HA		; NumSFX
	jge	$LN6@LoadSFX

; 1133 : 		{
; 1134 : 			if ((SFX_DEF[i].flags & SFX_FLAGS_HIGH) == 0)

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 140				; 0000008cH
	mov	eax, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	ecx, DWORD PTR [eax+edx+100]
	and	ecx, 128				; 00000080H
	jne	SHORT $LN5@LoadSFX

; 1135 : 				continue;

	jmp	SHORT $LN7@LoadSFX
$LN5@LoadSFX:

; 1136 : 			sprintf( fname, "%s\\%s", FalconSoundThrDirectory, SFX_DEF[i].fileName );

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 140				; 0000008cH
	add	edx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	push	edx
	push	OFFSET ?FalconSoundThrDirectory@@3PADA	; FalconSoundThrDirectory
	push	OFFSET ??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@
	lea	eax, DWORD PTR _fname$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 1137 : 			//SFX_DEF[i].handle = F4LoadFXSound(fname, SND_EXCLUSIVE, &SFX_DEF[i]);
; 1138 : 			SFX_DEF[i].handle = F4LoadFXSound(fname, SFX_DEF[i].flags, &SFX_DEF[i]);

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 140				; 0000008cH
	add	ecx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 140				; 0000008cH
	mov	eax, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	ecx, DWORD PTR [eax+edx+100]
	push	ecx
	lea	edx, DWORD PTR _fname$[ebp]
	push	edx
	call	_F4LoadFXSound
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 140				; 0000008cH
	mov	edx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	DWORD PTR [edx+ecx+72], eax

; 1139 : 			//if(SFX_DEF[i].handle == SND_NO_HANDLE)
; 1140 : 			//{
; 1141 : 			//	if(fp)
; 1142 : 			//		fprintf(fp,"LoadSFX() didn't load %d:%s\n",i,fname);
; 1143 : 			//}
; 1144 : 			// ShiAssert (SFX_DEF[i].handle != SND_NO_HANDLE); // MLR 1/21/2004 - who cares! 
; 1145 : 		}

	jmp	$LN7@LoadSFX
$LN6@LoadSFX:

; 1146 : 		for (i=0; i<NumSFX; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@LoadSFX
$LN3@LoadSFX:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@LoadSFX:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR ?NumSFX@@3HA		; NumSFX
	jge	$LN9@LoadSFX

; 1147 : 		{
; 1148 : 			if (SFX_DEF[i].flags & SFX_FLAGS_HIGH)

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 140				; 0000008cH
	mov	eax, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	ecx, DWORD PTR [eax+edx+100]
	and	ecx, 128				; 00000080H
	je	SHORT $LN1@LoadSFX

; 1149 : 				continue;

	jmp	SHORT $LN3@LoadSFX
$LN1@LoadSFX:

; 1150 : 			sprintf( fname, "%s\\%s", FalconSoundThrDirectory, SFX_DEF[i].fileName );

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 140				; 0000008cH
	add	edx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	push	edx
	push	OFFSET ?FalconSoundThrDirectory@@3PADA	; FalconSoundThrDirectory
	push	OFFSET ??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@
	lea	eax, DWORD PTR _fname$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 1151 : 			//SFX_DEF[i].handle = F4LoadFXSound(fname, SND_EXCLUSIVE, &SFX_DEF[i]);
; 1152 : 			SFX_DEF[i].handle = F4LoadFXSound(fname, SFX_DEF[i].flags, &SFX_DEF[i]);

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 140				; 0000008cH
	add	ecx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 140				; 0000008cH
	mov	eax, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	ecx, DWORD PTR [eax+edx+100]
	push	ecx
	lea	edx, DWORD PTR _fname$[ebp]
	push	edx
	call	_F4LoadFXSound
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 140				; 0000008cH
	mov	edx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	DWORD PTR [edx+ecx+72], eax

; 1153 : 			//if(SFX_DEF[i].handle == SND_NO_HANDLE)
; 1154 : 			//{
; 1155 : 			//	if(fp)
; 1156 : 			//		fprintf(fp,"LoadSFX() didn't load %f\n",fname);
; 1157 : 			//}
; 1158 : 			// ShiAssert (SFX_DEF[i].handle != SND_NO_HANDLE); // MLR 1/21/2004 - who cares!
; 1159 : 		}

	jmp	$LN3@LoadSFX
$LN9@LoadSFX:

; 1160 : 		//if(fp)
; 1161 : 		//	fclose(fp);
; 1162 : 	}
; 1163 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?LoadSFX@@YAXPAD@Z ENDP					; LoadSFX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
;	COMDAT ??__ECamRot@@YAXXZ
text$yc	SEGMENT
??__ECamRot@@YAXXZ PROC					; `dynamic initializer for 'CamRot'', COMDAT

; 152  : Trotation CamRot = IMatrix;

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, 9
	mov	esi, OFFSET ?IMatrix@@3UTrotation@@B	; IMatrix
	mov	edi, OFFSET ?CamRot@@3UTrotation@@A	; CamRot
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	0
??__ECamRot@@YAXXZ ENDP					; `dynamic initializer for 'CamRot''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
?ChatCleanup@@YAXXZ PROC				; ChatCleanup

; 1265 : {

	push	ebp
	mov	ebp, esp

; 1266 : 	#ifdef CHAT_USED
; 1267 : 	HRESULT	result;
; 1268 : 
; 1269 : 	if(!gSoundDriver) return;
; 1270 : 
; 1271 : 
; 1272 : 	// If we were transmitting, stop
; 1273 : 	if (chatMode == Transmit) {
; 1274 : 		F4ChatToggleXmitReceive( );
; 1275 : 	}
; 1276 : 
; 1277 : 	// Cleanup our service modules
; 1278 : 	CleanupTalkIO();
; 1279 : 
; 1280 : 	
; 1281 : 	// Clean up input stuff
; 1282 : 	result = chatInputDevice->Release();
; 1283 : 	DSErrorCheck( result );
; 1284 : 	#endif
; 1285 : 
; 1286 : }

	pop	ebp
	ret	0
?ChatCleanup@@YAXXZ ENDP				; ChatCleanup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
?ChatSetup@@YAHXZ PROC					; ChatSetup

; 1211 : {

	push	ebp
	mov	ebp, esp

; 1212 : 	if(!gSoundDriver) return(FALSE);

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	jne	SHORT $LN1@ChatSetup
	xor	eax, eax
	jmp	SHORT $LN2@ChatSetup
$LN1@ChatSetup:

; 1213 : 
; 1214 : 	#ifdef CHAT_USED
; 1215 : 	HRESULT	result;
; 1216 : 	WAVEFORMATEX audioFormat;
; 1217 : 
; 1218 : 	// Setup the audio format structure we want
; 1219 : 	/*
; 1220 : 	audioFormat.wFormatTag		= WAVE_FORMAT_PCM; 
; 1221 : 	audioFormat.nChannels		= 1; 
; 1222 : 	audioFormat.nSamplesPerSec	= SAMPLE_RATE; 
; 1223 : 	audioFormat.nAvgBytesPerSec	= SAMPLE_RATE * SAMPLE_SIZE; 
; 1224 : 	audioFormat.nBlockAlign		= SAMPLE_SIZE; 
; 1225 : 	audioFormat.wBitsPerSample	= 8 * SAMPLE_SIZE; 
; 1226 : 	audioFormat.cbSize			= 0; 
; 1227 : 	*/
; 1228 : 
; 1229 : 	audioFormat.wFormatTag		= SND_FORMAT;
; 1230 : 	audioFormat.nChannels		= SND_CHANNELS;
; 1231 : 	audioFormat.nSamplesPerSec	= SND_SAMPLE_RATE;
; 1232 : 	audioFormat.nAvgBytesPerSec	= SND_AVG_RATE;
; 1233 : 	audioFormat.nBlockAlign		= SND_BLOCK_ALIGN;
; 1234 : 	audioFormat.wBitsPerSample	= SND_BIT_RATE;
; 1235 : 	audioFormat.cbSize			= 0; 
; 1236 : 	
; 1237 : 	
; 1238 : 	// Setup input stuff
; 1239 : 	result = DirectSoundCaptureCreate( NULL, &chatInputDevice, NULL );
; 1240 : 	DSErrorCheck( result );
; 1241 : 
; 1242 : 
; 1243 : 	// Setup our service modules
; 1244 : 	SetupTalkIO( chatInputDevice, DIRECT_SOUND_OBJECT, &audioFormat );
; 1245 : 
; 1246 : 	// Fake that we're transmitting
; 1247 : 	chatMode = Transmit;
; 1248 : 
; 1249 : 	// Now toggle into receive mode
; 1250 : 	F4ChatToggleXmitReceive();
; 1251 : 
; 1252 : 	#endif
; 1253 : 
; 1254 : 	return TRUE;

	mov	eax, 1
$LN2@ChatSetup:

; 1255 : }

	pop	ebp
	ret	0
?ChatSetup@@YAHXZ ENDP					; ChatSetup
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__FSonicBoomTable@@YAXXZ
text$yd	SEGMENT
??__FSonicBoomTable@@YAXXZ PROC				; `dynamic atexit destructor for 'SonicBoomTable'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?SonicBoomTable@@3VLookupTable@@A ; SonicBoomTable
	call	??1LookupTable@@QAE@XZ			; LookupTable::~LookupTable
	pop	ebp
	ret	0
??__FSonicBoomTable@@YAXXZ ENDP				; `dynamic atexit destructor for 'SonicBoomTable''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
;	COMDAT ??__ESonicBoomTable@@YAXXZ
text$yc	SEGMENT
??__ESonicBoomTable@@YAXXZ PROC				; `dynamic initializer for 'SonicBoomTable'', COMDAT

; 50   : LookupTable SonicBoomTable;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?SonicBoomTable@@3VLookupTable@@A ; SonicBoomTable
	call	??0LookupTable@@QAE@XZ			; LookupTable::LookupTable
	push	OFFSET ??__FSonicBoomTable@@YAXXZ	; `dynamic atexit destructor for 'SonicBoomTable''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__ESonicBoomTable@@YAXXZ ENDP				; `dynamic initializer for 'SonicBoomTable''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GVoiceFilter@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GVoiceFilter@@QAEPAXI@Z PROC				; VoiceFilter::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1VoiceFilter@@QAE@XZ			; VoiceFilter::~VoiceFilter
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GVoiceFilter@@QAEPAXI@Z ENDP				; VoiceFilter::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicefilter.h
;	COMDAT ?MaxVoices@FragFile@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MaxVoices@FragFile@@QAEHXZ PROC			; FragFile::MaxVoices, COMDAT
; _this$ = ecx

; 132  :     int MaxVoices() { return maxvoices; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?MaxVoices@FragFile@@QAEHXZ ENDP			; FragFile::MaxVoices
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__FsndPurgeList@@YAXXZ
text$yd	SEGMENT
??__FsndPurgeList@@YAXXZ PROC				; `dynamic atexit destructor for 'sndPurgeList'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?sndPurgeList@@3VAList@@A	; sndPurgeList
	call	??1AList@@QAE@XZ
	pop	ebp
	ret	0
??__FsndPurgeList@@YAXXZ ENDP				; `dynamic atexit destructor for 'sndPurgeList''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
;	COMDAT ??__EsndPurgeList@@YAXXZ
text$yc	SEGMENT
??__EsndPurgeList@@YAXXZ PROC				; `dynamic initializer for 'sndPurgeList'', COMDAT

; 36   : AList sndPurgeList;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?sndPurgeList@@3VAList@@A	; sndPurgeList
	call	??0AList@@QAE@XZ			; AList::AList
	push	OFFSET ??__FsndPurgeList@@YAXXZ		; `dynamic atexit destructor for 'sndPurgeList''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__EsndPurgeList@@YAXXZ ENDP				; `dynamic initializer for 'sndPurgeList''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GmlrVoiceHandle@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GmlrVoiceHandle@@QAEPAXI@Z PROC			; mlrVoiceHandle::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1mlrVoiceHandle@@QAE@XZ		; mlrVoiceHandle::~mlrVoiceHandle
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GmlrVoiceHandle@@QAEPAXI@Z ENDP			; mlrVoiceHandle::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetSoundExternalVol@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSoundExternalVol@AirframeClass@@QAEMXZ PROC		; AirframeClass::GetSoundExternalVol, COMDAT
; _this$ = ecx

; 844  : 	float GetSoundExternalVol() { return auxaeroData->sndExternalVol; };  // MLR 11/x/2003 - 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+1652]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSoundExternalVol@AirframeClass@@QAEMXZ ENDP		; AirframeClass::GetSoundExternalVol
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetCanopyMaxAngle@AirframeClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCanopyMaxAngle@AirframeClass@@QAEMXZ PROC		; AirframeClass::GetCanopyMaxAngle, COMDAT
; _this$ = ecx

; 843  : 	float GetCanopyMaxAngle()	{ return auxaeroData->canopyMaxAngle; };  // MLR 11/x/2003 - 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+244]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCanopyMaxAngle@AirframeClass@@QAEMXZ ENDP		; AirframeClass::GetCanopyMaxAngle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\otwdrive.h
;	COMDAT ?DisplayInCockpit@OTWDriverClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DisplayInCockpit@OTWDriverClass@@QAEHXZ PROC		; OTWDriverClass::DisplayInCockpit, COMDAT
; _this$ = ecx

; 244  : 		inline BOOL DisplayInCockpit( void ){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 245  : 			if (mOTWDisplayMode >= ModeHud && mOTWDisplayMode <= ModePadlockEFOV )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32328], 1
	jl	SHORT $LN1@DisplayInC
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+32328], 5
	jg	SHORT $LN1@DisplayInC

; 246  : 		  		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN2@DisplayInC
$LN1@DisplayInC:

; 247  : 			return FALSE;

	xor	eax, eax
$LN2@DisplayInC:

; 248  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?DisplayInCockpit@OTWDriverClass@@QAEHXZ ENDP		; OTWDriverClass::DisplayInCockpit
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ PROC ; SimulationDriver::GetPlayerEntity, COMDAT
; _this$ = ecx

; 76   : 	SimMoverClass *GetPlayerEntity() const { return const_cast<SimMoverClass*>(playerEntity); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ENDP ; SimulationDriver::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?InSim@SimulationDriver@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InSim@SimulationDriver@@QBE_NXZ PROC			; SimulationDriver::InSim, COMDAT
; _this$ = ecx

; 51   : 	bool InSim() const                 { return SimulationLoopControl::InSim(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	call	?InSim@SimulationLoopControl@@SA_NXZ	; SimulationLoopControl::InSim
	mov	esp, ebp
	pop	ebp
	ret	0
?InSim@SimulationDriver@@QBE_NXZ ENDP			; SimulationDriver::InSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?IsComplex@AircraftClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsComplex@AircraftClass@@QAEHXZ PROC			; AircraftClass::IsComplex, COMDAT
; _this$ = ecx

; 336  : 	int            IsComplex (void) {return ((acFlags & isComplex) ? TRUE : FALSE);}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+964]
	and	ecx, 4
	je	SHORT $LN3@IsComplex
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsComplex
$LN3@IsComplex:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsComplex:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsComplex@AircraftClass@@QAEHXZ ENDP			; AircraftClass::IsComplex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simmover.h
;	COMDAT ?GetNumDOFs@SimMoverClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumDOFs@SimMoverClass@@QAEHXZ PROC			; SimMoverClass::GetNumDOFs, COMDAT
; _this$ = ecx

; 139  : 	int GetNumDOFs (void ) { return numDofs;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+600]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumDOFs@SimMoverClass@@QAEHXZ ENDP			; SimMoverClass::GetNumDOFs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simmover.h
;	COMDAT ?GetDOFValue@SimMoverClass@@QAEMH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_dof$ = 8						; size = 4
?GetDOFValue@SimMoverClass@@QAEMH@Z PROC		; SimMoverClass::GetDOFValue, COMDAT
; _this$ = ecx

; 132  : 	float GetDOFValue (int dof) { ShiAssert(dof < numDofs); return dof < numDofs ? DOFData[dof] : 0;}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dof$[ebp]
	cmp	ecx, DWORD PTR [eax+600]
	jge	SHORT $LN3@GetDOFValu
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+612]
	mov	ecx, DWORD PTR _dof$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4]
	movss	DWORD PTR tv69[ebp], xmm0
	jmp	SHORT $LN4@GetDOFValu
$LN3@GetDOFValu:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv69[ebp], xmm0
$LN4@GetDOFValu:
	fld	DWORD PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetDOFValue@SimMoverClass@@QAEMH@Z ENDP		; SimMoverClass::GetDOFValue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsSetFlag@SimBaseClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFlag@SimBaseClass@@QBEHH@Z PROC			; SimBaseClass::IsSetFlag, COMDAT
; _this$ = ecx

; 178  : 	int  IsSetFlag(int flag) const { return ((specialData.flags & flag) ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsSetFlag
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSetFlag
$LN3@IsSetFlag:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSetFlag:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFlag@SimBaseClass@@QBEHH@Z ENDP			; SimBaseClass::IsSetFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simloop.h
;	COMDAT ?InSim@SimulationLoopControl@@SA_NXZ
_TEXT	SEGMENT
tv65 = -4						; size = 4
?InSim@SimulationLoopControl@@SA_NXZ PROC		; SimulationLoopControl::InSim, COMDAT

; 27   : 	static bool InSim(void)			{ return currentMode == RunningGraphics; }

	push	ebp
	mov	ebp, esp
	push	ecx
	cmp	DWORD PTR ?currentMode@SimulationLoopControl@@1W4SimLoopControlMode@1@A, 6 ; SimulationLoopControl::currentMode
	jne	SHORT $LN3@InSim
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@InSim
$LN3@InSim:
	mov	DWORD PTR tv65[ebp], 0
$LN4@InSim:
	mov	al, BYTE PTR tv65[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?InSim@SimulationLoopControl@@SA_NXZ ENDP		; SimulationLoopControl::InSim
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCSoundMgr@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCSoundMgr@@QAEPAXI@Z PROC				; CSoundMgr::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CSoundMgr@@QAE@XZ			; CSoundMgr::~CSoundMgr
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCSoundMgr@@QAEPAXI@Z ENDP				; CSoundMgr::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZDelta@VuEntity@@QBEMXZ PROC				; VuEntity::ZDelta, COMDAT
; _this$ = ecx

; 163  : 	SM_SCALAR ZDelta() const { return pos_.dz_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::ZDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YDelta@VuEntity@@QBEMXZ PROC				; VuEntity::YDelta, COMDAT
; _this$ = ecx

; 162  : 	SM_SCALAR YDelta() const { return pos_.dy_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?YDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::YDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XDelta@VuEntity@@QBEMXZ PROC				; VuEntity::XDelta, COMDAT
; _this$ = ecx

; 161  : 	SM_SCALAR XDelta() const { return pos_.dx_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?XDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::XDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_i$ = -328						; size = 4
$T2 = -324						; size = 4
$T3 = -320						; size = 4
tv139 = -316						; size = 4
$T4 = -312						; size = 4
$T5 = -308						; size = 4
$T6 = -304						; size = 4
tv128 = -300						; size = 4
$T7 = -296						; size = 4
$T8 = -292						; size = 4
$T9 = -288						; size = 4
tv149 = -284						; size = 4
tv178 = -280						; size = 4
_sfxtable$ = -276					; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_hWnd$ = 8						; size = 4
___formal$ = 12						; size = 4
_falconDataDir$ = 16					; size = 4
?InitSoundManager@@YAHPAUHWND__@@HPAD@Z PROC		; InitSoundManager

; 335  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?InitSoundManager@@YAHPAUHWND__@@HPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 316				; 0000013cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 336  :     ShiAssert(FALSE == IsBadStringPtr(falconDataDir, _MAX_PATH));
; 337  :     ShiAssert(FALSE != IsWindow(hWnd));
; 338  :     ShiAssert(FALSE == IsBadStringPtr(FalconObjectDataDir, _MAX_PATH));
; 339  : 	ShiAssert(FALSE == IsBadStringPtr(FalconSoundThrDirectory, _MAX_PATH));
; 340  : 
; 341  : 
; 342  : 	// Sonic Boom N wave
; 343  : 	SonicBoomTable.table[0].input   = 0;

	mov	eax, 8
	imul	eax, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?SonicBoomTable@@3VLookupTable@@A[eax+4], xmm0

; 344  : 	SonicBoomTable.table[0].output  = 1000;

	mov	ecx, 8
	imul	ecx, 0
	movss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR ?SonicBoomTable@@3VLookupTable@@A[ecx+8], xmm0

; 345  : 
; 346  : 	SonicBoomTable.table[1].input   = .19f;

	mov	edx, 8
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@3e428f5c
	movss	DWORD PTR ?SonicBoomTable@@3VLookupTable@@A[edx+4], xmm0

; 347  : 	SonicBoomTable.table[1].output  = -2000;

	mov	eax, 8
	shl	eax, 0
	movss	xmm0, DWORD PTR __real@c4fa0000
	movss	DWORD PTR ?SonicBoomTable@@3VLookupTable@@A[eax+8], xmm0

; 348  : 
; 349  : 	SonicBoomTable.table[2].input   = .20f;

	mov	ecx, 8
	shl	ecx, 1
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR ?SonicBoomTable@@3VLookupTable@@A[ecx+4], xmm0

; 350  : 	SonicBoomTable.table[2].output  = 1000;

	mov	edx, 8
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR ?SonicBoomTable@@3VLookupTable@@A[edx+8], xmm0

; 351  : 
; 352  : 	SonicBoomTable.table[3].input   =  1;

	mov	eax, 8
	imul	eax, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?SonicBoomTable@@3VLookupTable@@A[eax+4], xmm0

; 353  : 	SonicBoomTable.table[3].output  = -5000;

	mov	ecx, 8
	imul	ecx, 3
	movss	xmm0, DWORD PTR __real@c59c4000
	movss	DWORD PTR ?SonicBoomTable@@3VLookupTable@@A[ecx+8], xmm0

; 354  : 
; 355  : 	SonicBoomTable.pairs=4;

	mov	DWORD PTR ?SonicBoomTable@@3VLookupTable@@A, 4

; 356  : 
; 357  : 
; 358  : 
; 359  : 	if(gSoundDriver == NULL)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	jne	$LN5@InitSoundM

; 360  : 	{
; 361  : 		gSoundDriver=new CSoundMgr;

	push	72					; 00000048H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN11@InitSoundM
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0CSoundMgr@@QAE@XZ			; CSoundMgr::CSoundMgr
	mov	DWORD PTR tv128[ebp], eax
	jmp	SHORT $LN12@InitSoundM
$LN11@InitSoundM:
	mov	DWORD PTR tv128[ebp], 0
$LN12@InitSoundM:
	mov	edx, DWORD PTR tv128[ebp]
	mov	DWORD PTR $T5[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T5[ebp]
	mov	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, eax ; gSoundDriver

; 362  : 		if(!gSoundDriver)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	jne	SHORT $LN7@InitSoundM

; 363  : 			return FALSE;

	xor	eax, eax
	jmp	$LN9@InitSoundM
	jmp	SHORT $LN5@InitSoundM
$LN7@InitSoundM:

; 364  : 		else if(!gSoundDriver->InstallDSound(hWnd,DSSCL_NORMAL,&stereo_16bit_22k))

	push	OFFSET ?stereo_16bit_22k@@3UtWAVEFORMATEX@@A ; stereo_16bit_22k
	push	1
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?InstallDSound@CSoundMgr@@QAEHPAUHWND__@@KPAUtWAVEFORMATEX@@@Z ; CSoundMgr::InstallDSound
	test	eax, eax
	jne	SHORT $LN5@InitSoundM

; 365  : 		{
; 366  : 			delete gSoundDriver;

	mov	edx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T6[ebp], eax
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN13@InitSoundM
	push	1
	mov	ecx, DWORD PTR $T6[ebp]
	call	??_GCSoundMgr@@QAEPAXI@Z
	mov	DWORD PTR tv139[ebp], eax
	jmp	SHORT $LN14@InitSoundM
$LN13@InitSoundM:
	mov	DWORD PTR tv139[ebp], 0
$LN14@InitSoundM:

; 367  : 			gSoundDriver=NULL;

	mov	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver

; 368  : 			return(FALSE);

	xor	eax, eax
	jmp	$LN9@InitSoundM
$LN5@InitSoundM:

; 369  : 		}
; 370  : 	}
; 371  : 
; 372  : 	if( gSoundFlags & FSND_REPETE)

	mov	ecx, DWORD PTR _gSoundFlags
	and	ecx, 2
	je	SHORT $LN4@InitSoundM

; 373  : 		{
; 374  : 		voiceFilter = new VoiceFilter;

	push	64					; 00000040H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN15@InitSoundM
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0VoiceFilter@@QAE@XZ			; VoiceFilter::VoiceFilter
	mov	DWORD PTR tv149[ebp], eax
	jmp	SHORT $LN16@InitSoundM
$LN15@InitSoundM:
	mov	DWORD PTR tv149[ebp], 0
$LN16@InitSoundM:
	mov	edx, DWORD PTR tv149[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR ?voiceFilter@@3PAVVoiceFilter@@A, eax ; voiceFilter

; 375  : 		voiceFilter->SetUpVoiceFilter();

	mov	ecx, DWORD PTR ?voiceFilter@@3PAVVoiceFilter@@A ; voiceFilter
	call	?SetUpVoiceFilter@VoiceFilter@@QAEXXZ	; VoiceFilter::SetUpVoiceFilter

; 376  : 		voiceFilter->StartVoiceManager();

	mov	ecx, DWORD PTR ?voiceFilter@@3PAVVoiceFilter@@A ; voiceFilter
	call	?StartVoiceManager@VoiceFilter@@QAEXXZ	; VoiceFilter::StartVoiceManager
$LN4@InitSoundM:

; 377  : //		messageCenter = new AWACSMessage;
; 378  : 		}
; 379  : 	char sfxtable[_MAX_PATH];
; 380  : 	sprintf (sfxtable, "%s\\%s", FalconSoundThrDirectory, FALCONSNDTABLETXT);

	mov	ecx, DWORD PTR ?FALCONSNDTABLETXT@@3PBDB ; FALCONSNDTABLETXT
	push	ecx
	push	OFFSET ?FalconSoundThrDirectory@@3PADA	; FalconSoundThrDirectory
	push	OFFSET ??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@
	lea	edx, DWORD PTR _sfxtable$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 381  : 	ShiAssert(SFX_DEF == NULL);
; 382  : 	if(!ReadSFXTableTXT(sfxtable)) // MLR 2003-10-17 Parse text file if it exists

	lea	eax, DWORD PTR _sfxtable$[ebp]
	push	eax
	call	?ReadSFXTableTXT@@YAHPAD@Z		; ReadSFXTableTXT
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN3@InitSoundM

; 383  : 	{
; 384  : 		return FALSE;

	xor	eax, eax
	jmp	$LN9@InitSoundM
$LN3@InitSoundM:

; 385  : 		// MLR 2003-11-19 the new sound table is mandatory!
; 386  : 		/*
; 387  : 		sprintf (sfxtable, "%s\\%s", FalconObjectDataDir, FALCONSNDTABLE);
; 388  : 		if (ReadSFXTable (sfxtable) == FALSE)
; 389  : 		{
; 390  : 			return FALSE;
; 391  : 		}*/
; 392  : 	}
; 393  : 	LoadSFX( falconDataDir );

	mov	ecx, DWORD PTR _falconDataDir$[ebp]
	push	ecx
	call	?LoadSFX@@YAXPAD@Z			; LoadSFX
	add	esp, 4

; 394  : 
; 395  : 	//JAM 14Dec03 - Fixing -nopete CTD
; 396  : 	if(gSoundFlags & FSND_REPETE)

	mov	edx, DWORD PTR _gSoundFlags
	and	edx, 2
	je	SHORT $LN2@InitSoundM

; 397  : 		g_voicemap.SetVoiceCount(voiceFilter->fragfile.MaxVoices());

	mov	ecx, DWORD PTR ?voiceFilter@@3PAVVoiceFilter@@A ; voiceFilter
	add	ecx, 20					; 00000014H
	call	?MaxVoices@FragFile@@QAEHXZ		; FragFile::MaxVoices
	push	eax
	mov	ecx, OFFSET ?g_voicemap@@3VVoiceMapper@@A ; g_voicemap
	call	?SetVoiceCount@VoiceMapper@@QAEXH@Z	; VoiceMapper::SetVoiceCount
$LN2@InitSoundM:

; 398  : 
; 399  : 	gSoundManagerRunning = TRUE;

	mov	DWORD PTR ?gSoundManagerRunning@@3HA, 1	; gSoundManagerRunning

; 400  : 
; 401  : 	SoundPosSection=F4CreateCriticalSection("SoundPosSection");

	push	OFFSET ??_C@_0BA@LKFMLBBL@SoundPosSection?$AA@
	call	_F4CreateCriticalSection
	add	esp, 4
	mov	DWORD PTR ?SoundPosSection@@3PAUF4CSECTIONHANDLE@@A, eax ; SoundPosSection

; 402  : 
; 403  : 
; 404  : #if _MSC_VER >= 1300
; 405  : 	int i = _set_SSE2_enable(1);

	push	1
	call	__set_SSE2_enable
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 406  : #endif
; 407  : 
; 408  : 	if(!gSoundObject) // MLR 1/25/2004 - the global sound object

	cmp	DWORD PTR ?gSoundObject@@3PAVF4SoundPos@@A, 0 ; gSoundObject
	jne	SHORT $LN1@InitSoundM

; 409  : 	{
; 410  : 		gSoundObject = new F4SoundPos();

	push	148					; 00000094H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN17@InitSoundM
	mov	ecx, DWORD PTR $T9[ebp]
	call	??0F4SoundPos@@QAE@XZ			; F4SoundPos::F4SoundPos
	mov	DWORD PTR tv178[ebp], eax
	jmp	SHORT $LN18@InitSoundM
$LN17@InitSoundM:
	mov	DWORD PTR tv178[ebp], 0
$LN18@InitSoundM:
	mov	eax, DWORD PTR tv178[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR ?gSoundObject@@3PAVF4SoundPos@@A, ecx ; gSoundObject
$LN1@InitSoundM:

; 411  : 	}
; 412  : 
; 413  : 	return(TRUE);

	mov	eax, 1
$LN9@InitSoundM:

; 414  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?InitSoundManager@@YAHPAUHWND__@@HPAD@Z$0:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?InitSoundManager@@YAHPAUHWND__@@HPAD@Z$1:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?InitSoundManager@@YAHPAUHWND__@@HPAD@Z$2:
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?InitSoundManager@@YAHPAUHWND__@@HPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-320]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?InitSoundManager@@YAHPAUHWND__@@HPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?InitSoundManager@@YAHPAUHWND__@@HPAD@Z ENDP		; InitSoundManager
; Function compile flags: /Odtp
;	COMDAT ??_GF4SoundPos@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GF4SoundPos@@QAEPAXI@Z PROC				; F4SoundPos::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1F4SoundPos@@QAE@XZ			; F4SoundPos::~F4SoundPos
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GF4SoundPos@@QAEPAXI@Z ENDP				; F4SoundPos::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fsound.h
;	COMDAT ?OTWViewChanged@F4SoundPos@@SAXH@Z
_TEXT	SEGMENT
_boolean$ = 8						; size = 4
?OTWViewChanged@F4SoundPos@@SAXH@Z PROC			; F4SoundPos::OTWViewChanged, COMDAT

; 130  : 		static void OTWViewChanged( int boolean ) { otwViewChange = boolean; };

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _boolean$[ebp]
	mov	DWORD PTR ?otwViewChange@F4SoundPos@@0HA, eax ; F4SoundPos::otwViewChange
	pop	ebp
	ret	0
?OTWViewChanged@F4SoundPos@@SAXH@Z ENDP			; F4SoundPos::OTWViewChanged
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_v$1 = -44						; size = 4
_wasInMachShadow$ = -40					; size = 4
_machcone2$2 = -36					; size = 4
tv375 = -32						; size = 4
tv367 = -28						; size = 4
_rvz$3 = -24						; size = 4
_rvy$4 = -20						; size = 4
_rvx$5 = -16						; size = 4
_camang$6 = -12						; size = 4
_machcone$7 = -8					; size = 4
_this$ = -4						; size = 4
?PositionalData@F4SoundPos@@QAEXXZ PROC			; F4SoundPos::PositionalData
; _this$ = ecx

; 1617 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1618 : 	if(platform && platform->drawPointer)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+144], 0
	je	SHORT $LN11@Positional
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	cmp	DWORD PTR [edx+332], 0
	je	SHORT $LN11@Positional

; 1619 : 	{
; 1620 : 		orientation = ((DrawableBSP *)(platform->drawPointer))->orientation;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	mov	esi, DWORD PTR [ecx+332]
	add	esi, 48					; 00000030H
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 64					; 00000040H
	mov	ecx, 9
	rep movsd
$LN11@Positional:

; 1621 : 	}
; 1622 : 
; 1623 : 	velocity = (float)sqrt(vel.x*vel.x + vel.y*vel.y + vel.z*vel.z);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+28]
	mulss	xmm0, DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+32]
	mulss	xmm1, DWORD PTR [edx+32]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+36]
	mulss	xmm1, DWORD PTR [ecx+36]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+100]

; 1624 : 
; 1625 : 	if(velocity)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+100]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN10@Positional

; 1626 : 	{
; 1627 : 		velVec.x = vel.x / velocity;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+28]
	divss	xmm0, DWORD PTR [edx+100]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+40], xmm0

; 1628 : 		velVec.y = vel.y / velocity;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+32]
	divss	xmm0, DWORD PTR [edx+100]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+44], xmm0

; 1629 : 		velVec.z = vel.z / velocity;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+36]
	divss	xmm0, DWORD PTR [edx+100]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+48], xmm0
$LN10@Positional:

; 1630 : 	}
; 1631 : 
; 1632 : 	int wasInMachShadow = inMachShadow;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR _wasInMachShadow$[ebp], edx

; 1633 : 	inMachShadow = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+108], 0

; 1634 : 
; 1635 : 	relPos.x = pos.x - CamPos.x;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+16]
	subss	xmm0, DWORD PTR ?CamPos@@3UTpoint@@A
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+52], xmm0

; 1636 : 	relPos.y = pos.y - CamPos.y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	subss	xmm0, DWORD PTR ?CamPos@@3UTpoint@@A+4
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+56], xmm0

; 1637 : 	relPos.z = pos.z - CamPos.z;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+24]
	subss	xmm0, DWORD PTR ?CamPos@@3UTpoint@@A+8
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+60], xmm0

; 1638 : 	
; 1639 : 	// dist from camera
; 1640 : 	distance = (float)sqrt(relPos.x*relPos.x + relPos.y*relPos.y + relPos.z*relPos.z);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+52]
	mulss	xmm0, DWORD PTR [edx+52]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+56]
	mulss	xmm1, DWORD PTR [ecx+56]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+60]
	mulss	xmm1, DWORD PTR [eax+60]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+104]

; 1641 : 	
; 1642 : 	if(g_bSoundSonicBoom && platform && ((SimBaseClass *)platform)->IsAirplane())

	movzx	edx, BYTE PTR ?g_bSoundSonicBoom@@3_NA	; g_bSoundSonicBoom
	test	edx, edx
	je	$LN1@Positional
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+144], 0
	je	$LN1@Positional
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+144]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	je	$LN1@Positional

; 1643 : 	{   // platform is really a SimBaseClass object
; 1644 : 		// object exceeding mach 1?
; 1645 : 		if(velocity > 1100 && distance)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+100]
	comiss	xmm0, DWORD PTR __real@44898000
	jbe	$LN5@Positional
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+104]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN5@Positional

; 1646 : 		{
; 1647 : 			// determine the angle between the velocity vector, the object, and the camera.
; 1648 : 			float rvx,rvy,rvz;
; 1649 : 			
; 1650 : 			rvx=relPos.x/distance;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+52]
	divss	xmm0, DWORD PTR [ecx+104]
	movss	DWORD PTR _rvx$5[ebp], xmm0

; 1651 : 			rvy=relPos.y/distance;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+56]
	divss	xmm0, DWORD PTR [eax+104]
	movss	DWORD PTR _rvy$4[ebp], xmm0

; 1652 : 			rvz=relPos.z/distance;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+60]
	divss	xmm0, DWORD PTR [edx+104]
	movss	DWORD PTR _rvz$3[ebp], xmm0

; 1653 : 			
; 1654 : 			float camang = 180 * DTR - acos(velVec.x * rvx + velVec.y * rvy + velVec.z * rvz);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+40]
	mulss	xmm0, DWORD PTR _rvx$5[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+44]
	mulss	xmm1, DWORD PTR _rvy$4[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+48]
	mulss	xmm1, DWORD PTR _rvz$3[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?acos@@YAMM@Z				; acos
	add	esp, 4
	fstp	DWORD PTR tv367[ebp]
	movss	xmm0, DWORD PTR __real@40490fd9
	subss	xmm0, DWORD PTR tv367[ebp]
	movss	DWORD PTR _camang$6[ebp], xmm0

; 1655 : 			
; 1656 : 			float machcone = (float)atan(velocity / 1100) + 90 * DTR;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+100]
	divss	xmm0, DWORD PTR __real@44898000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	fstp	DWORD PTR tv375[ebp]
	movss	xmm0, DWORD PTR tv375[ebp]
	addss	xmm0, DWORD PTR __real@3fc90fd9
	movss	DWORD PTR _machcone$7[ebp], xmm0

; 1657 : 			float machcone2 = machcone + 2 * DTR;

	movss	xmm0, DWORD PTR _machcone$7[ebp]
	addss	xmm0, DWORD PTR __real@3d0efa34
	movss	DWORD PTR _machcone2$2[ebp], xmm0

; 1658 : 
; 1659 : 			//MonoPrint("cones %.4f %.4f %.4f",camang * 180 / PI, machcone * 180 / PI, machcone2 * 180 / PI);
; 1660 : 			
; 1661 : 			if(camang < machcone)

	movss	xmm0, DWORD PTR _machcone$7[ebp]
	comiss	xmm0, DWORD PTR _camang$6[ebp]
	jbe	SHORT $LN7@Positional

; 1662 : 			{
; 1663 : 				inMachShadow = 1; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+108], 1

; 1664 : 			}
; 1665 : 			else

	jmp	SHORT $LN5@Positional
$LN7@Positional:

; 1666 : 			{
; 1667 : 				if(camang <= machcone2)

	movss	xmm0, DWORD PTR _machcone2$2[ebp]
	comiss	xmm0, DWORD PTR _camang$6[ebp]
	jb	SHORT $LN5@Positional

; 1668 : 				{
; 1669 : 					sonicBoom = 1000; // 1000 ms

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+112], 1000		; 000003e8H
$LN5@Positional:

; 1670 : 				}
; 1671 : 			}
; 1672 : 		}
; 1673 : 
; 1674 : 		if(wasInMachShadow && !inMachShadow) // don't do booms with a view change

	cmp	DWORD PTR _wasInMachShadow$[ebp], 0
	je	SHORT $LN4@Positional
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+108], 0
	jne	SHORT $LN4@Positional

; 1675 : 		{
; 1676 : 			sonicBoom = 1000;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+112], 1000		; 000003e8H
$LN4@Positional:

; 1677 : 		}
; 1678 : 
; 1679 : 		if(otwViewChange)

	cmp	DWORD PTR ?otwViewChange@F4SoundPos@@0HA, 0 ; F4SoundPos::otwViewChange
	je	SHORT $LN3@Positional

; 1680 : 		{
; 1681 : 			sonicBoom = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+112], 0
$LN3@Positional:

; 1682 : 		}
; 1683 : 
; 1684 : 		if(sonicBoom > 0 ) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+112], 0
	jle	SHORT $LN2@Positional

; 1685 : 		{
; 1686 : 			float v = SonicBoomTable.Lookup(1.0f - (float)sonicBoom / 1000.0f);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+112]
	divss	xmm0, DWORD PTR __real@447a0000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, OFFSET ?SonicBoomTable@@3VLookupTable@@A ; SonicBoomTable
	call	?Lookup@LookupTable@@QAEMM@Z		; LookupTable::Lookup
	fstp	DWORD PTR _v$1[ebp]

; 1687 : 			sonicBoom -= (int)(SimLibMajorFrameTime * 1000);

	movss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@447a0000
	cvttss2si edx, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	sub	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+112], ecx

; 1688 : 			Sfx(SFX_SONIC_BOOM, 0, 1, v);

	push	ecx
	movss	xmm0, DWORD PTR _v$1[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	282					; 0000011aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Sfx@F4SoundPos@@QAEXHHMM@Z		; F4SoundPos::Sfx

; 1689 : 			//play the BOOM!
; 1690 : 		}
; 1691 : 		else

	jmp	SHORT $LN1@Positional
$LN2@Positional:

; 1692 : 		{
; 1693 : 			sonicBoom = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+112], 0
$LN1@Positional:

; 1694 : 		}
; 1695 : 	}
; 1696 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?PositionalData@F4SoundPos@@QAEXXZ ENDP			; F4SoundPos::PositionalData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_sn2$ = -24						; size = 4
tv86 = -20						; size = 4
$T1 = -16						; size = 4
$T2 = -12						; size = 4
_this$ = -8						; size = 4
_sn$ = -4						; size = 4
?Purge@F4SoundPos@@QAEXXZ PROC				; F4SoundPos::Purge
; _this$ = ecx

; 1850 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1851 : 	mlrVoiceHandle *sn,*sn2;
; 1852 : 
; 1853 :     sn=(mlrVoiceHandle *)soList.GetHead();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	?GetHead@AList@@QAEPAXXZ		; AList::GetHead
	mov	DWORD PTR _sn$[ebp], eax
$LN4@Purge:

; 1854 : 	while(sn)

	cmp	DWORD PTR _sn$[ebp], 0
	je	SHORT $LN3@Purge

; 1855 : 	{
; 1856 : 		sn2=(mlrVoiceHandle *)sn->GetSucc();

	mov	ecx, DWORD PTR _sn$[ebp]
	call	?GetSucc@ANode@@QAEPAXXZ		; ANode::GetSucc
	mov	DWORD PTR _sn2$[ebp], eax

; 1857 : 
; 1858 : 		// delete if older than 10 seconds (arbitrary)
; 1859 : 		if((vuxRealTime - sn->lastPlayTime) > (10 * 1000)){

	mov	eax, DWORD PTR _sn$[ebp]
	mov	ecx, DWORD PTR ?vuxRealTime@@3KA	; vuxRealTime
	sub	ecx, DWORD PTR [eax+32]
	cmp	ecx, 10000				; 00002710H
	jbe	SHORT $LN2@Purge

; 1860 : 			sn->Remove();

	mov	ecx, DWORD PTR _sn$[ebp]
	call	?Remove@ANode@@QAEPAXXZ			; ANode::Remove

; 1861 : 			delete sn;

	mov	edx, DWORD PTR _sn$[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN7@Purge
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_GmlrVoiceHandle@@QAEPAXI@Z
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN2@Purge
$LN7@Purge:
	mov	DWORD PTR tv86[ebp], 0
$LN2@Purge:

; 1862 : 		}
; 1863 : 
; 1864 : 		sn=sn2;

	mov	ecx, DWORD PTR _sn2$[ebp]
	mov	DWORD PTR _sn$[ebp], ecx

; 1865 : 	}

	jmp	SHORT $LN4@Purge
$LN3@Purge:

; 1866 : 
; 1867 : 	if(!(soList.GetHead()))

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	?GetHead@AList@@QAEPAXXZ		; AList::GetHead
	test	eax, eax
	jne	SHORT $LN5@Purge

; 1868 : 	{
; 1869 : 		ENTERSPCS;

	mov	edx, DWORD PTR ?SoundPosSection@@3PAUF4CSECTIONHANDLE@@A ; SoundPosSection
	push	edx
	call	_F4EnterCriticalSection
	add	esp, 4

; 1870 : 		inPurgeList=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+140], 0

; 1871 : 		Remove();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Remove@ANode@@QAEPAXXZ			; ANode::Remove

; 1872 : 		LEAVESPCS;

	mov	ecx, DWORD PTR ?SoundPosSection@@3PAUF4CSECTIONHANDLE@@A ; SoundPosSection
	push	ecx
	call	_F4LeaveCriticalSection
	add	esp, 4
$LN5@Purge:

; 1873 : 	}
; 1874 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Purge@F4SoundPos@@QAEXXZ ENDP				; F4SoundPos::Purge
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_sn$ = -4						; size = 4
_SfxID$ = 8						; size = 4
_SID$ = 12						; size = 4
?IsPlaying@F4SoundPos@@QAE_NHH@Z PROC			; F4SoundPos::IsPlaying
; _this$ = ecx

; 1771 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1772 : 	mlrVoiceHandle *sn;
; 1773 : 
; 1774 : 	// try to find existing node
; 1775 :     sn=(mlrVoiceHandle *)soList.GetHead();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	?GetHead@AList@@QAEPAXXZ		; AList::GetHead
	mov	DWORD PTR _sn$[ebp], eax
$LN3@IsPlaying:

; 1776 : 	while(sn)

	cmp	DWORD PTR _sn$[ebp], 0
	je	SHORT $LN2@IsPlaying

; 1777 : 	{
; 1778 : 		if(sn->AreYou(SfxID,SID))

	mov	eax, DWORD PTR _SID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _SfxID$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _sn$[ebp]
	call	?AreYou@mlrVoiceHandle@@QAE_NHH@Z	; mlrVoiceHandle::AreYou
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@IsPlaying

; 1779 : 		{
; 1780 : 			return((bool)sn->IsPlaying());

	mov	ecx, DWORD PTR _sn$[ebp]
	call	?IsPlaying@mlrVoiceHandle@@QAE_NXZ	; mlrVoiceHandle::IsPlaying
	jmp	SHORT $LN4@IsPlaying
$LN1@IsPlaying:

; 1781 : 		}
; 1782 : 		sn=(mlrVoiceHandle *)sn->GetSucc();

	mov	ecx, DWORD PTR _sn$[ebp]
	call	?GetSucc@ANode@@QAEPAXXZ		; ANode::GetSucc
	mov	DWORD PTR _sn$[ebp], eax

; 1783 : 	}

	jmp	SHORT $LN3@IsPlaying
$LN2@IsPlaying:

; 1784 : 	return(0);

	xor	al, al
$LN4@IsPlaying:

; 1785 : 
; 1786 : 	//return (F4SoundFXPlaying(SfxID, uid + SID)>0);
; 1787 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?IsPlaying@F4SoundPos@@QAE_NHH@Z ENDP			; F4SoundPos::IsPlaying
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_x$ = -44						; size = 4
_y$ = -40						; size = 4
_z$ = -36						; size = 4
tv214 = -32						; size = 4
tv233 = -28						; size = 4
tv200 = -24						; size = 4
tv231 = -20						; size = 4
tv186 = -16						; size = 4
tv229 = -12						; size = 4
_this$ = -8						; size = 4
_orientation$ = -4					; size = 4
_SfxID$ = 8						; size = 4
_SID$ = 12						; size = 4
_PScale$ = 16						; size = 4
_Vol$ = 20						; size = 4
_lPos$ = 24						; size = 4
?SfxRel@F4SoundPos@@QAEXHHMMAAUTpoint@@@Z PROC		; F4SoundPos::SfxRel
; _this$ = ecx

; 1759 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1760 : 	Trotation *orientation = &((DrawableBSP *)(platform->drawPointer))->orientation;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	mov	edx, DWORD PTR [ecx+332]
	add	edx, 48					; 00000030H
	mov	DWORD PTR _orientation$[ebp], edx

; 1761 : 
; 1762 : 	float x = orientation->M11*lPos.x + orientation->M12*lPos.y + orientation->M13*lPos.z + platform->XPos();

	mov	eax, DWORD PTR _orientation$[ebp]
	mov	ecx, DWORD PTR _lPos$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _orientation$[ebp]
	mov	eax, DWORD PTR _lPos$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _orientation$[ebp]
	mov	edx, DWORD PTR _lPos$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	movss	DWORD PTR tv229[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv186[ebp]
	movss	xmm0, DWORD PTR tv229[ebp]
	addss	xmm0, DWORD PTR tv186[ebp]
	movss	DWORD PTR _x$[ebp], xmm0

; 1763 : 	float y = orientation->M21*lPos.x + orientation->M22*lPos.y + orientation->M23*lPos.z + platform->YPos();

	mov	ecx, DWORD PTR _orientation$[ebp]
	mov	edx, DWORD PTR _lPos$[ebp]
	movss	xmm0, DWORD PTR [ecx+12]
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _orientation$[ebp]
	mov	ecx, DWORD PTR _lPos$[ebp]
	movss	xmm1, DWORD PTR [eax+16]
	mulss	xmm1, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _orientation$[ebp]
	mov	eax, DWORD PTR _lPos$[ebp]
	movss	xmm1, DWORD PTR [edx+20]
	mulss	xmm1, DWORD PTR [eax+8]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+144]
	movss	DWORD PTR tv231[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv200[ebp]
	movss	xmm0, DWORD PTR tv231[ebp]
	addss	xmm0, DWORD PTR tv200[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 1764 : 	float z = orientation->M31*lPos.x + orientation->M32*lPos.y + orientation->M33*lPos.z + platform->ZPos();

	mov	edx, DWORD PTR _orientation$[ebp]
	mov	eax, DWORD PTR _lPos$[ebp]
	movss	xmm0, DWORD PTR [edx+24]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _orientation$[ebp]
	mov	edx, DWORD PTR _lPos$[ebp]
	movss	xmm1, DWORD PTR [ecx+28]
	mulss	xmm1, DWORD PTR [edx+4]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _orientation$[ebp]
	mov	ecx, DWORD PTR _lPos$[ebp]
	movss	xmm1, DWORD PTR [eax+32]
	mulss	xmm1, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+144]
	movss	DWORD PTR tv233[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv214[ebp]
	movss	xmm0, DWORD PTR tv233[ebp]
	addss	xmm0, DWORD PTR tv214[ebp]
	movss	DWORD PTR _z$[ebp], xmm0

; 1765 : 
; 1766 : 	Sfx(SfxID, SID, PScale, Vol, x, y, z );

	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Vol$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _PScale$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _SID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _SfxID$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Sfx@F4SoundPos@@QAEXHHMMMMM@Z		; F4SoundPos::Sfx

; 1767 : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?SfxRel@F4SoundPos@@QAEXHHMMAAUTpoint@@@Z ENDP		; F4SoundPos::SfxRel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_x$1 = -44						; size = 4
_y$2 = -40						; size = 4
_z$3 = -36						; size = 4
tv206 = -32						; size = 4
tv231 = -28						; size = 4
tv195 = -24						; size = 4
tv229 = -20						; size = 4
tv184 = -16						; size = 4
tv227 = -12						; size = 4
_this$ = -8						; size = 4
_orientation$4 = -4					; size = 4
_SfxID$ = 8						; size = 4
_SID$ = 12						; size = 4
_PScale$ = 16						; size = 4
_Vol$ = 20						; size = 4
_X$ = 24						; size = 4
_Y$ = 28						; size = 4
_Z$ = 32						; size = 4
?SfxRel@F4SoundPos@@QAEXHHMMMMM@Z PROC			; F4SoundPos::SfxRel
; _this$ = ecx

; 1741 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1742 : 	if(platform->drawPointer)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	cmp	DWORD PTR [ecx+332], 0
	je	$LN2@SfxRel

; 1743 : 	{
; 1744 : 		Trotation *orientation = &((DrawableBSP *)(platform->drawPointer))->orientation;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+144]
	mov	ecx, DWORD PTR [eax+332]
	add	ecx, 48					; 00000030H
	mov	DWORD PTR _orientation$4[ebp], ecx

; 1745 : 
; 1746 : 		float x = orientation->M11*X + orientation->M12*Y + orientation->M13*Z + platform->XPos();

	mov	edx, DWORD PTR _orientation$4[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _X$[ebp]
	mov	eax, DWORD PTR _orientation$4[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR _Y$[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _orientation$4[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR _Z$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+144]
	movss	DWORD PTR tv227[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv184[ebp]
	movss	xmm0, DWORD PTR tv227[ebp]
	addss	xmm0, DWORD PTR tv184[ebp]
	movss	DWORD PTR _x$1[ebp], xmm0

; 1747 : 		float y = orientation->M21*X + orientation->M22*Y + orientation->M23*Z + platform->YPos();

	mov	eax, DWORD PTR _orientation$4[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _X$[ebp]
	mov	ecx, DWORD PTR _orientation$4[ebp]
	movss	xmm1, DWORD PTR [ecx+16]
	mulss	xmm1, DWORD PTR _Y$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _orientation$4[ebp]
	movss	xmm1, DWORD PTR [edx+20]
	mulss	xmm1, DWORD PTR _Z$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	movss	DWORD PTR tv229[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv195[ebp]
	movss	xmm0, DWORD PTR tv229[ebp]
	addss	xmm0, DWORD PTR tv195[ebp]
	movss	DWORD PTR _y$2[ebp], xmm0

; 1748 : 		float z = orientation->M31*X + orientation->M32*Y + orientation->M33*Z + platform->ZPos();

	mov	ecx, DWORD PTR _orientation$4[ebp]
	movss	xmm0, DWORD PTR [ecx+24]
	mulss	xmm0, DWORD PTR _X$[ebp]
	mov	edx, DWORD PTR _orientation$4[ebp]
	movss	xmm1, DWORD PTR [edx+28]
	mulss	xmm1, DWORD PTR _Y$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _orientation$4[ebp]
	movss	xmm1, DWORD PTR [eax+32]
	mulss	xmm1, DWORD PTR _Z$[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+144]
	movss	DWORD PTR tv231[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv206[ebp]
	movss	xmm0, DWORD PTR tv231[ebp]
	addss	xmm0, DWORD PTR tv206[ebp]
	movss	DWORD PTR _z$3[ebp], xmm0

; 1749 : 
; 1750 : 		Sfx(SfxID, SID, PScale, Vol, x, y, z );

	push	ecx
	movss	xmm0, DWORD PTR _z$3[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$2[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$1[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Vol$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _PScale$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _SID$[ebp]
	push	edx
	mov	eax, DWORD PTR _SfxID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Sfx@F4SoundPos@@QAEXHHMMMMM@Z		; F4SoundPos::Sfx

; 1751 : 	}
; 1752 : 	else

	jmp	SHORT $LN1@SfxRel
$LN2@SfxRel:

; 1753 : 	{
; 1754 : 		Sfx(SfxID, SID, PScale, Vol);

	push	ecx
	movss	xmm0, DWORD PTR _Vol$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _PScale$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _SID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _SfxID$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Sfx@F4SoundPos@@QAEXHHMM@Z		; F4SoundPos::Sfx
$LN1@SfxRel:

; 1755 : 	}
; 1756 : }

	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?SfxRel@F4SoundPos@@QAEXHHMMMMM@Z ENDP			; F4SoundPos::SfxRel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
$T2 = -32						; size = 4
tv150 = -28						; size = 4
$T3 = -24						; size = 4
_vh$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_SfxID$ = 8						; size = 4
_SID$ = 12						; size = 4
_PScale$ = 16						; size = 4
_Vol$ = 20						; size = 4
_X$ = 24						; size = 4
_Y$ = 28						; size = 4
_Z$ = 32						; size = 4
?Sfx@F4SoundPos@@QAEXHHMMMMM@Z PROC			; F4SoundPos::Sfx
; _this$ = ecx

; 1791 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Sfx@F4SoundPos@@QAEXHHMMMMM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1792 : #ifdef Prof_ENABLED // MLR 5/21/2004 - 
; 1793 : 	Prof(F4SoundPos_Sfx);
; 1794 : #endif
; 1795 : 
; 1796 : 	mlrVoiceHandle *vh;
; 1797 : 
; 1798 : 	if(!inPurgeList)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+140], 0
	jne	SHORT $LN6@Sfx

; 1799 : 	{
; 1800 : 		ENTERSPCS;

	mov	ecx, DWORD PTR ?SoundPosSection@@3PAUF4CSECTIONHANDLE@@A ; SoundPosSection
	push	ecx
	call	_F4EnterCriticalSection
	add	esp, 4

; 1801 : 		sndPurgeList.AddHead(this);

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, OFFSET ?sndPurgeList@@3VAList@@A	; sndPurgeList
	call	?AddHead@AList@@QAEXPAVANode@@@Z	; AList::AddHead

; 1802 : 		inPurgeList=1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+140], 1

; 1803 : 		LEAVESPCS;

	mov	ecx, DWORD PTR ?SoundPosSection@@3PAUF4CSECTIONHANDLE@@A ; SoundPosSection
	push	ecx
	call	_F4LeaveCriticalSection
	add	esp, 4
$LN6@Sfx:

; 1804 : 	}
; 1805 : 
; 1806 : 	// try to find existing node
; 1807 :     vh=(mlrVoiceHandle *)soList.GetHead();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	?GetHead@AList@@QAEPAXXZ		; AList::GetHead
	mov	DWORD PTR _vh$[ebp], eax
$LN5@Sfx:

; 1808 : 	while(vh)

	cmp	DWORD PTR _vh$[ebp], 0
	je	$LN4@Sfx

; 1809 : 	{
; 1810 : 		if(vh->AreYou(SfxID,SID))

	mov	edx, DWORD PTR _SID$[ebp]
	push	edx
	mov	eax, DWORD PTR _SfxID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vh$[ebp]
	call	?AreYou@mlrVoiceHandle@@QAE_NHH@Z	; mlrVoiceHandle::AreYou
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@Sfx

; 1811 : 		{
; 1812 : 			vh->Play(PScale, Vol, X, Y, Z, vel.x, vel.y, vel.z);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+36]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Z$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _X$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Vol$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _PScale$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _vh$[ebp]
	call	?Play@mlrVoiceHandle@@QAEXMMMMMMMM@Z	; mlrVoiceHandle::Play

; 1813 : 			return;

	jmp	$LN7@Sfx
$LN3@Sfx:

; 1814 : 		}
; 1815 : 		vh=(mlrVoiceHandle *)vh->GetSucc();

	mov	ecx, DWORD PTR _vh$[ebp]
	call	?GetSucc@ANode@@QAEPAXXZ		; ANode::GetSucc
	mov	DWORD PTR _vh$[ebp], eax

; 1816 : 	}

	jmp	$LN5@Sfx
$LN4@Sfx:

; 1817 : 
; 1818 : 	// make new node
; 1819 :     ShiAssert (SfxID < NumSFX );
; 1820 : 	ShiAssert (SfxID > 0 );
; 1821 : 	if(SfxID < NumSFX && SfxID > 0)

	mov	edx, DWORD PTR _SfxID$[ebp]
	cmp	edx, DWORD PTR ?NumSFX@@3HA		; NumSFX
	jge	$LN1@Sfx
	cmp	DWORD PTR _SfxID$[ebp], 0
	jle	$LN1@Sfx

; 1822 : 	{
; 1823 : 		if( vh = new mlrVoiceHandle(this,SfxID,SID))

	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN9@Sfx
	mov	eax, DWORD PTR _SID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _SfxID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0mlrVoiceHandle@@QAE@PAVF4SoundPos@@HH@Z ; mlrVoiceHandle::mlrVoiceHandle
	mov	DWORD PTR tv150[ebp], eax
	jmp	SHORT $LN10@Sfx
$LN9@Sfx:
	mov	DWORD PTR tv150[ebp], 0
$LN10@Sfx:
	mov	eax, DWORD PTR tv150[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _vh$[ebp], ecx
	cmp	DWORD PTR _vh$[ebp], 0
	je	SHORT $LN1@Sfx

; 1824 : 		{
; 1825 : 			soList.AddHead((ANode *)vh);

	mov	edx, DWORD PTR _vh$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	?AddHead@AList@@QAEXPAVANode@@@Z	; AList::AddHead

; 1826 : 			vh->Play(PScale, Vol, X, Y, Z, vel.x, vel.y, vel.z);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+28]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Z$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _X$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Vol$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _PScale$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _vh$[ebp]
	call	?Play@mlrVoiceHandle@@QAEXMMMMMMMM@Z	; mlrVoiceHandle::Play
$LN1@Sfx:
$LN7@Sfx:

; 1827 : 		}
; 1828 : 	}
; 1829 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Sfx@F4SoundPos@@QAEXHHMMMMM@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Sfx@F4SoundPos@@QAEXHHMMMMM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Sfx@F4SoundPos@@QAEXHHMMMMM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Sfx@F4SoundPos@@QAEXHHMMMMM@Z ENDP			; F4SoundPos::Sfx
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_sfxp$ = -12						; size = 4
_this$ = -8						; size = 4
_playerAC$1 = -4					; size = 4
_SfxID$ = 8						; size = 4
_SID$ = 12						; size = 4
_PScale$ = 16						; size = 4
_Vol$ = 20						; size = 4
?Sfx@F4SoundPos@@QAEXHHMM@Z PROC			; F4SoundPos::Sfx
; _this$ = ecx

; 1700 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1701 : 	//F4SoundFXSetPos(SfxID, 0, pos.x, pos.y, pos.z, PScale, Vol, vel.x, vel.y, vel.z,uid + SID,platform);
; 1702 : 	//Cobra Inhibit stuff?
; 1703 : 	SFX_DEF_ENTRY *sfxp;
; 1704 : 
; 1705 : 	if (SfxID <= 0 || SfxID >= NumSFX) return;

	cmp	DWORD PTR _SfxID$[ebp], 0
	jle	SHORT $LN9@Sfx
	mov	eax, DWORD PTR _SfxID$[ebp]
	cmp	eax, DWORD PTR ?NumSFX@@3HA		; NumSFX
	jl	SHORT $LN10@Sfx
$LN9@Sfx:
	jmp	$LN11@Sfx
$LN10@Sfx:

; 1706 : 
; 1707 : 	sfxp = &SFX_DEF[ SfxID ];

	mov	ecx, DWORD PTR _SfxID$[ebp]
	imul	ecx, 140				; 0000008cH
	add	ecx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	DWORD PTR _sfxp$[ebp], ecx

; 1708 : 
; 1709 : 	// Cobra - Fix CTD when exiting F4
; 1710 : 	// sfr: @todo remove this hack
; 1711 : 	if (F4IsBadReadPtr(sfxp, sizeof(sfxp))) return;

	push	4
	mov	edx, DWORD PTR _sfxp$[ebp]
	push	edx
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@Sfx
	jmp	$LN11@Sfx
$LN8@Sfx:

; 1712 : 
; 1713 : 	if (g_bRealisticAvionics && (sfxp->flags & SFX_FLAGS_VMS))

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	SHORT $LN2@Sfx
	mov	edx, DWORD PTR _sfxp$[ebp]
	mov	eax, DWORD PTR [edx+100]
	and	eax, 8
	je	SHORT $LN2@Sfx

; 1714 : 	{
; 1715 : 		AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$1[ebp], eax

; 1716 : 	    //MI no VMS when on ground
; 1717 : 	    if (playerAC){

	cmp	DWORD PTR _playerAC$1[ebp], 0
	je	SHORT $LN2@Sfx

; 1718 : 			if (
; 1719 : 				OTWDriver.DisplayInCockpit() && playerAC->OnGround() || 
; 1720 : 				!playerAC->playBetty || !playerAC->IsSetFlag(MOTION_OWNSHIP)
; 1721 : 			){ 

	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?DisplayInCockpit@OTWDriverClass@@QAEHXZ ; OTWDriverClass::DisplayInCockpit
	test	eax, eax
	je	SHORT $LN3@Sfx
	mov	ecx, DWORD PTR _playerAC$1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _playerAC$1[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	jne	SHORT $LN4@Sfx
$LN3@Sfx:
	mov	ecx, DWORD PTR _playerAC$1[ebp]
	movzx	edx, BYTE PTR [ecx+1516]
	test	edx, edx
	je	SHORT $LN4@Sfx
	push	65536					; 00010000H
	mov	ecx, DWORD PTR _playerAC$1[ebp]
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	jne	SHORT $LN2@Sfx
$LN4@Sfx:

; 1722 : 				// MD -- 20031125: except if the MAL/IND test button is being pressed to test the warning sound
; 1723 : 				if (!((SfxID == SFX_BB_ALLWORDS) && playerAC->TestLights))

	cmp	DWORD PTR _SfxID$[ebp], 270		; 0000010eH
	jne	SHORT $LN1@Sfx
	mov	eax, DWORD PTR _playerAC$1[ebp]
	movzx	ecx, BYTE PTR [eax+849]
	test	ecx, ecx
	jne	SHORT $LN2@Sfx
$LN1@Sfx:

; 1724 : 					return;

	jmp	SHORT $LN11@Sfx
$LN2@Sfx:

; 1725 : 			}
; 1726 : 		}
; 1727 : 	}
; 1728 : //End
; 1729 : 	Sfx(SfxID,SID,PScale,Vol,pos.x, pos.y, pos.z);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+24]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Vol$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _PScale$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _SID$[ebp]
	push	edx
	mov	eax, DWORD PTR _SfxID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Sfx@F4SoundPos@@QAEXHHMMMMM@Z		; F4SoundPos::Sfx
$LN11@Sfx:

; 1730 : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Sfx@F4SoundPos@@QAEXHHMM@Z ENDP			; F4SoundPos::Sfx
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_vx$ = 20						; size = 4
_vy$ = 24						; size = 4
_vz$ = 28						; size = 4
?UpdatePos@F4SoundPos@@QAEXMMMMMM@Z PROC		; F4SoundPos::UpdatePos
; _this$ = ecx

; 1594 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1595 : 	pos.x=x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 1596 : 	pos.y=y;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [ecx+20], xmm0

; 1597 : 	pos.z=z;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [edx+24], xmm0

; 1598 : 	vel.x=vx;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _vx$[ebp]
	movss	DWORD PTR [eax+28], xmm0

; 1599 : 	vel.y=vy;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _vy$[ebp]
	movss	DWORD PTR [ecx+32], xmm0

; 1600 : 	vel.z=vz;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _vz$[ebp]
	movss	DWORD PTR [edx+36], xmm0

; 1601 : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?UpdatePos@F4SoundPos@@QAEXMMMMMM@Z ENDP		; F4SoundPos::UpdatePos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_owner$ = 8						; size = 4
?UpdatePos@F4SoundPos@@QAEXPAVSimBaseClass@@@Z PROC	; F4SoundPos::UpdatePos
; _this$ = ecx

; 1604 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1605 : 	platform=owner; // this should be moved to constructor

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _owner$[ebp]
	mov	DWORD PTR [eax+144], ecx

; 1606 : 
; 1607 : 	pos.x=platform->XPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+144]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+16]

; 1608 : 	pos.y=platform->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+144]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+20]

; 1609 : 	pos.z=platform->ZPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+24]

; 1610 : 
; 1611 : 	vel.x=platform->XDelta();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+144]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+28]

; 1612 : 	vel.y=platform->YDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+144]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+32]

; 1613 : 	vel.z=platform->ZDelta();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+36]

; 1614 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?UpdatePos@F4SoundPos@@QAEXPAVSimBaseClass@@@Z ENDP	; F4SoundPos::UpdatePos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
tv94 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -24						; size = 4
_vh$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1F4SoundPos@@QAE@XZ PROC				; F4SoundPos::~F4SoundPos
; _this$ = ecx

; 1832 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1F4SoundPos@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7F4SoundPos@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 1833 : 
; 1834 : 	if(inPurgeList){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+140], 0
	je	SHORT $LN2@F4SoundPos

; 1835 : 		ENTERSPCS;

	mov	edx, DWORD PTR ?SoundPosSection@@3PAUF4CSECTIONHANDLE@@A ; SoundPosSection
	push	edx
	call	_F4EnterCriticalSection
	add	esp, 4

; 1836 : 		inPurgeList=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+140], 0

; 1837 : 		Remove();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Remove@ANode@@QAEPAXXZ			; ANode::Remove

; 1838 : 		LEAVESPCS;

	mov	ecx, DWORD PTR ?SoundPosSection@@3PAUF4CSECTIONHANDLE@@A ; SoundPosSection
	push	ecx
	call	_F4LeaveCriticalSection
	add	esp, 4
$LN2@F4SoundPos:

; 1839 : 	}
; 1840 : 
; 1841 : 	mlrVoiceHandle *vh;
; 1842 : 
; 1843 :     while(vh=(mlrVoiceHandle *)soList.RemHead()){

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	?RemHead@AList@@QAEPAXXZ		; AList::RemHead
	mov	DWORD PTR _vh$[ebp], eax
	cmp	DWORD PTR _vh$[ebp], 0
	je	SHORT $LN4@F4SoundPos

; 1844 : 		delete vh;

	mov	edx, DWORD PTR _vh$[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T3[ebp], eax
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN6@F4SoundPos
	push	1
	mov	ecx, DWORD PTR $T3[ebp]
	call	??_GmlrVoiceHandle@@QAEPAXI@Z
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@F4SoundPos
$LN6@F4SoundPos:
	mov	DWORD PTR tv94[ebp], 0
$LN7@F4SoundPos:

; 1845 : 	}

	jmp	SHORT $LN2@F4SoundPos
$LN4@F4SoundPos:

; 1846 : 
; 1847 : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	??1AList@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ANode@@QAE@XZ			; ANode::~ANode
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1F4SoundPos@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1ANode@@QAE@XZ			; ANode::~ANode
__unwindfunclet$??1F4SoundPos@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	jmp	??1AList@@QAE@XZ
__ehhandler$??1F4SoundPos@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1F4SoundPos@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1F4SoundPos@@QAE@XZ ENDP				; F4SoundPos::~F4SoundPos
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0F4SoundPos@@QAE@XZ PROC				; F4SoundPos::F4SoundPos
; _this$ = ecx

; 1580 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0F4SoundPos@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ANode@@QAE@XZ			; ANode::ANode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7F4SoundPos@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	??0AList@@QAE@XZ			; AList::AList

; 1581 : 	uid=F4SoundPosUID;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?F4SoundPosUID@@3HA	; F4SoundPosUID
	mov	DWORD PTR [ecx+12], edx

; 1582 : 	vel.x=0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+28], xmm0

; 1583 : 	vel.y=0;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+32], xmm0

; 1584 : 	vel.z=0;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+36], xmm0

; 1585 : 	pos.x=pos.y=pos.z=0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+24], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+20], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+16], xmm0

; 1586 : 	platform=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+144], 0

; 1587 : 	F4SoundPosUID+=100;	

	mov	ecx, DWORD PTR ?F4SoundPosUID@@3HA	; F4SoundPosUID
	add	ecx, 100				; 00000064H
	mov	DWORD PTR ?F4SoundPosUID@@3HA, ecx	; F4SoundPosUID

; 1588 : 	inPurgeList=0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+140], 0

; 1589 : 	inMachShadow = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+108], 0

; 1590 : 	sonicBoom = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+112], 0

; 1591 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0F4SoundPos@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1ANode@@QAE@XZ			; ANode::~ANode
__ehhandler$??0F4SoundPos@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0F4SoundPos@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0F4SoundPos@@QAE@XZ ENDP				; F4SoundPos::F4SoundPos
; Function compile flags: /Odtp
;	COMDAT ??1AList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1AList@@QAE@XZ PROC					; AList::~AList, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1AList@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1ANode@@QAE@XZ			; ANode::~ANode
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ANode@@QAE@XZ			; ANode::~ANode
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1AList@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1ANode@@QAE@XZ			; ANode::~ANode
__ehhandler$??1AList@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1AList@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1AList@@QAE@XZ ENDP					; AList::~AList
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\alist.h
;	COMDAT ?CompareWith@ANode@@UAEHPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?CompareWith@ANode@@UAEHPAV1@@Z PROC			; ANode::CompareWith, COMDAT
; _this$ = ecx

; 13   : 	virtual int CompareWith(ANode *n) {return 0;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?CompareWith@ANode@@UAEHPAV1@@Z ENDP			; ANode::CompareWith
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_sfxId$ = 8						; size = 4
_UID$ = 12						; size = 4
_F4SoundFXPlaying PROC

; 778  : {

	push	ebp
	mov	ebp, esp

; 779  :     ShiAssert (sfxId < NumSFX );
; 780  :     ShiAssert (sfxId > 0 );
; 781  :     if (sfxId <= 0 || sfxId >= NumSFX) return 0;

	cmp	DWORD PTR _sfxId$[ebp], 0
	jle	SHORT $LN2@F4SoundFXP
	mov	eax, DWORD PTR _sfxId$[ebp]
	cmp	eax, DWORD PTR ?NumSFX@@3HA		; NumSFX
	jl	SHORT $LN3@F4SoundFXP
$LN2@F4SoundFXP:
	xor	eax, eax
	jmp	SHORT $LN4@F4SoundFXP
$LN3@F4SoundFXP:

; 782  : 
; 783  :     if( gSoundManagerRunning == FALSE ) return 0;

	cmp	DWORD PTR ?gSoundManagerRunning@@3HA, 0	; gSoundManagerRunning
	jne	SHORT $LN1@F4SoundFXP
	xor	eax, eax
	jmp	SHORT $LN4@F4SoundFXP
$LN1@F4SoundFXP:

; 784  :     return F4IsSoundPlaying(SFX_DEF[sfxId].handle, UID);

	mov	ecx, DWORD PTR _UID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sfxId$[ebp]
	imul	edx, 140				; 0000008cH
	mov	eax, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	ecx, DWORD PTR [eax+edx+72]
	push	ecx
	call	_F4IsSoundPlaying
	add	esp, 8
$LN4@F4SoundFXP:

; 785  : }

	pop	ebp
	ret	0
_F4SoundFXPlaying ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_i$ = -8						; size = 4
_sfxp$ = -4						; size = 4
_F4SoundFXEnd PROC

; 1554 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1555 : 	int i;
; 1556 : 	SFX_DEF_ENTRY *sfxp;
; 1557 : 
; 1558 : 	if(!gSoundDriver) return;

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	jne	SHORT $LN5@F4SoundFXE
	jmp	SHORT $LN6@F4SoundFXE
$LN5@F4SoundFXE:

; 1559 : 
; 1560 : 	// main loop thru sound effects
; 1561 : 	for ( i = 0, sfxp = &SFX_DEF[0]; i < NumSFX; i++, sfxp++ )

	mov	DWORD PTR _i$[ebp], 0
	mov	eax, 140				; 0000008cH
	imul	eax, 0
	add	eax, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	DWORD PTR _sfxp$[ebp], eax
	jmp	SHORT $LN4@F4SoundFXE
$LN3@F4SoundFXE:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _sfxp$[ebp]
	add	edx, 140				; 0000008cH
	mov	DWORD PTR _sfxp$[ebp], edx
$LN4@F4SoundFXE:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?NumSFX@@3HA		; NumSFX
	jge	SHORT $LN6@F4SoundFXE

; 1562 : 	{
; 1563 : 	 	if ( F4IsSoundPlaying( sfxp->handle ) )

	push	0
	mov	ecx, DWORD PTR _sfxp$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	call	_F4IsSoundPlaying
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@F4SoundFXE

; 1564 : 			F4StopSound( sfxp->handle );

	mov	eax, DWORD PTR _sfxp$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	_F4StopSound
	add	esp, 4
$LN1@F4SoundFXE:

; 1565 : 	}

	jmp	SHORT $LN3@F4SoundFXE
$LN6@F4SoundFXE:

; 1566 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_F4SoundFXEnd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_i$ = -8						; size = 4
_sfxp$ = -4						; size = 4
_F4SoundFXInit PROC

; 1532 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1533 : 	int i;
; 1534 : 	SFX_DEF_ENTRY *sfxp;
; 1535 : 
; 1536 : 	if(!gSoundDriver) return;

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	jne	SHORT $LN4@F4SoundFXI
	jmp	SHORT $LN5@F4SoundFXI
$LN4@F4SoundFXI:

; 1537 : 
; 1538 : 	// main loop thru sound effects
; 1539 : 	for ( i = 0, sfxp = &SFX_DEF[0]; i < NumSFX; i++, sfxp++ )

	mov	DWORD PTR _i$[ebp], 0
	mov	eax, 140				; 0000008cH
	imul	eax, 0
	add	eax, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	DWORD PTR _sfxp$[ebp], eax
	jmp	SHORT $LN3@F4SoundFXI
$LN2@F4SoundFXI:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _sfxp$[ebp]
	add	edx, 140				; 0000008cH
	mov	DWORD PTR _sfxp$[ebp], edx
$LN3@F4SoundFXI:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR ?NumSFX@@3HA		; NumSFX
	jge	SHORT $LN1@F4SoundFXI

; 1540 : 	{
; 1541 : 		sfxp->distSq = sfxp->maxDistSq;

	mov	ecx, DWORD PTR _sfxp$[ebp]
	mov	edx, DWORD PTR _sfxp$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR [ecx+88], eax

; 1542 : 	  	sfxp->lastFrameUpdated = 0;

	mov	ecx, DWORD PTR _sfxp$[ebp]
	mov	DWORD PTR [ecx+96], 0

; 1543 : 	}

	jmp	SHORT $LN2@F4SoundFXI
$LN1@F4SoundFXI:
$LN5@F4SoundFXI:

; 1544 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_F4SoundFXInit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_sp2$1 = -16						; size = 4
_sp$2 = -12						; size = 4
_sp$3 = -8						; size = 4
_reset$4 = -1						; size = 1
_begFrame$ = 8						; size = 4
_endFrame$ = 12						; size = 4
_F4SoundFXPositionDriver PROC

; 1466 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 1467 : 	static unsigned long lastPlayTime = 0;
; 1468 : 	//int i;
; 1469 : 	//SFX_DEF_ENTRY *sfxp;
; 1470 : 	//BOOL isPlaying;
; 1471 : 	//int volLevel;
; 1472 : 	//float volRange;
; 1473 : 	//float maxVol;
; 1474 : 	//int curVolLevel;
; 1475 : 
; 1476 : 	// Maximum of 20 Hz update on the sound
; 1477 : 	if ((vuxRealTime - lastPlayTime) > (VU_TIME)(g_nSoundUpdateMS)){

	mov	eax, DWORD PTR ?vuxRealTime@@3KA	; vuxRealTime
	sub	eax, DWORD PTR ?lastPlayTime@?1??F4SoundFXPositionDriver@@9@4KA
	cmp	eax, DWORD PTR ?g_nSoundUpdateMS@@3HA	; g_nSoundUpdateMS
	jbe	$LN10@F4SoundFXP

; 1478 : 		lastPlayTime = vuxRealTime;

	mov	ecx, DWORD PTR ?vuxRealTime@@3KA	; vuxRealTime
	mov	DWORD PTR ?lastPlayTime@?1??F4SoundFXPositionDriver@@9@4KA, ecx

; 1479 : 		if (gSoundManagerRunning == FALSE || !SimDriver.InSim()){

	cmp	DWORD PTR ?gSoundManagerRunning@@3HA, 0	; gSoundManagerRunning
	je	SHORT $LN7@F4SoundFXP
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?InSim@SimulationDriver@@QBE_NXZ	; SimulationDriver::InSim
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN8@F4SoundFXP
$LN7@F4SoundFXP:

; 1480 : 			return;

	jmp	$LN10@F4SoundFXP
$LN8@F4SoundFXP:

; 1481 : 		}
; 1482 : 
; 1483 : 		// set stagger counter
; 1484 : 		sPosLoopStagger = (++sPosLoopStagger) & LOOP_STAGGER_MASK;

	mov	eax, DWORD PTR _sPosLoopStagger
	add	eax, 1
	mov	DWORD PTR _sPosLoopStagger, eax
	mov	ecx, DWORD PTR _sPosLoopStagger
	and	ecx, 3
	mov	DWORD PTR _sPosLoopStagger, ecx

; 1485 : 		if (gSoundDriver){

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	$LN10@F4SoundFXP

; 1486 : 			static int LastOTWDispMode=-1;
; 1487 : 			bool reset=0;

	mov	BYTE PTR _reset$4[ebp], 0

; 1488 : 
; 1489 : 			if(OTWDriver.GetOTWDisplayMode() != LastOTWDispMode){

	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetOTWDisplayMode@OTWDriverClass@@QAE?AW4OTWDisplayMode@1@XZ ; OTWDriverClass::GetOTWDisplayMode
	cmp	eax, DWORD PTR ?LastOTWDispMode@?L@??F4SoundFXPositionDriver@@9@4HA
	je	SHORT $LN5@F4SoundFXP

; 1490 : 				reset=1;

	mov	BYTE PTR _reset$4[ebp], 1

; 1491 : 				LastOTWDispMode=OTWDriver.GetOTWDisplayMode();

	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetOTWDisplayMode@OTWDriverClass@@QAE?AW4OTWDisplayMode@1@XZ ; OTWDriverClass::GetOTWDisplayMode
	mov	DWORD PTR ?LastOTWDispMode@?L@??F4SoundFXPositionDriver@@9@4HA, eax
$LN5@F4SoundFXP:

; 1492 : 			}
; 1493 : 
; 1494 : 			{
; 1495 : 				F4SoundPos *sp;
; 1496 : 
; 1497 : 				// MLR 5/15/2004 - this will prevent the sonic boom from occuring 
; 1498 : 				// due to view changes
; 1499 : 				F4SoundPos::OTWViewChanged(reset); 

	movzx	edx, BYTE PTR _reset$4[ebp]
	push	edx
	call	?OTWViewChanged@F4SoundPos@@SAXH@Z	; F4SoundPos::OTWViewChanged
	add	esp, 4

; 1500 : 
; 1501 : 				sp=(F4SoundPos *)sndPurgeList.GetHead();

	mov	ecx, OFFSET ?sndPurgeList@@3VAList@@A	; sndPurgeList
	call	?GetHead@AList@@QAEPAXXZ		; AList::GetHead
	mov	DWORD PTR _sp$3[ebp], eax
$LN4@F4SoundFXP:

; 1502 : 				while (sp){

	cmp	DWORD PTR _sp$3[ebp], 0
	je	SHORT $LN3@F4SoundFXP

; 1503 : 					sp->PositionalData();

	mov	ecx, DWORD PTR _sp$3[ebp]
	call	?PositionalData@F4SoundPos@@QAEXXZ	; F4SoundPos::PositionalData

; 1504 : 					sp=(F4SoundPos *)sp->GetSucc();

	mov	ecx, DWORD PTR _sp$3[ebp]
	call	?GetSucc@ANode@@QAEPAXXZ		; ANode::GetSucc
	mov	DWORD PTR _sp$3[ebp], eax

; 1505 : 				}

	jmp	SHORT $LN4@F4SoundFXP
$LN3@F4SoundFXP:

; 1506 : 			}
; 1507 : 
; 1508 : 			gVoiceManager.Exec(&CamPos, &CamRot, &CamVel);

	push	OFFSET ?CamVel@@3UTpoint@@A		; CamVel
	push	OFFSET ?CamRot@@3UTrotation@@A		; CamRot
	push	OFFSET ?CamPos@@3UTpoint@@A		; CamPos
	mov	ecx, OFFSET ?gVoiceManager@@3VmlrVoiceManager@@A ; gVoiceManager
	call	?Exec@mlrVoiceManager@@QAEXPAUTpoint@@PAUTrotation@@0@Z ; mlrVoiceManager::Exec

; 1509 : 
; 1510 : 			//gSoundDriver->AssignSamples();
; 1511 : 			gSoundDriver->SetCameraPostion(&CamPos, &CamRot, &CamVel, reset);

	movzx	eax, BYTE PTR _reset$4[ebp]
	push	eax
	push	OFFSET ?CamVel@@3UTpoint@@A		; CamVel
	push	OFFSET ?CamRot@@3UTrotation@@A		; CamRot
	push	OFFSET ?CamPos@@3UTpoint@@A		; CamPos
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?SetCameraPostion@CSoundMgr@@QAEXPAUTpoint@@PAUTrotation@@0_N@Z ; CSoundMgr::SetCameraPostion

; 1512 : 
; 1513 : 			F4SoundPos *sp,*sp2;
; 1514 : 			sp=(F4SoundPos *)sndPurgeList.GetHead();

	mov	ecx, OFFSET ?sndPurgeList@@3VAList@@A	; sndPurgeList
	call	?GetHead@AList@@QAEPAXXZ		; AList::GetHead
	mov	DWORD PTR _sp$2[ebp], eax
$LN2@F4SoundFXP:

; 1515 : 			while(sp){

	cmp	DWORD PTR _sp$2[ebp], 0
	je	SHORT $LN10@F4SoundFXP

; 1516 : 				sp2=(F4SoundPos *)sp->GetSucc();

	mov	ecx, DWORD PTR _sp$2[ebp]
	call	?GetSucc@ANode@@QAEPAXXZ		; ANode::GetSucc
	mov	DWORD PTR _sp2$1[ebp], eax

; 1517 : 				sp->Purge();

	mov	ecx, DWORD PTR _sp$2[ebp]
	call	?Purge@F4SoundPos@@QAEXXZ		; F4SoundPos::Purge

; 1518 : 				sp=sp2;

	mov	ecx, DWORD PTR _sp2$1[ebp]
	mov	DWORD PTR _sp$2[ebp], ecx

; 1519 : 			}

	jmp	SHORT $LN2@F4SoundFXP
$LN10@F4SoundFXP:

; 1520 : 		}
; 1521 : 	}
; 1522 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_F4SoundFXPositionDriver ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
tv205 = -28						; size = 4
tv200 = -24						; size = 4
tv195 = -20						; size = 4
tv189 = -16						; size = 4
tv182 = -12						; size = 4
_v$1 = -8						; size = 4
_playerAC$2 = -4					; size = 4
_campos$ = 8						; size = 4
_camrot$ = 12						; size = 4
_camvel$ = 16						; size = 4
_F4SoundFXSetCamPosAndOrient PROC

; 1353 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	push	edi

; 1354 :     CamPos = *campos;

	mov	eax, DWORD PTR _campos$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?CamPos@@3UTpoint@@A, ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR ?CamPos@@3UTpoint@@A+4, edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR ?CamPos@@3UTpoint@@A+8, eax

; 1355 :     CamRot = *camrot;

	mov	ecx, 9
	mov	esi, DWORD PTR _camrot$[ebp]
	mov	edi, OFFSET ?CamRot@@3UTrotation@@A	; CamRot
	rep movsd

; 1356 : 	CamVel = *camvel;

	mov	ecx, DWORD PTR _camvel$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR ?CamVel@@3UTpoint@@A, edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR ?CamVel@@3UTpoint@@A+4, eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR ?CamVel@@3UTpoint@@A+8, ecx

; 1357 : 
; 1358 : 	ExtAttenuation=0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?ExtAttenuation@@3MA, xmm0

; 1359 : 
; 1360 : 	// MonoPrint("InCockpit:%d\n",OTWDriver.DisplayInCockpit());
; 1361 : 	if (OTWDriver.DisplayInCockpit()){

	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?DisplayInCockpit@OTWDriverClass@@QAEHXZ ; OTWDriverClass::DisplayInCockpit
	test	eax, eax
	je	$LN1@F4SoundFXS

; 1362 : 		
; 1363 : 		if(SimDriver.GetPlayerEntity()){

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	$LN5@F4SoundFXS

; 1364 : 			float v;
; 1365 : 			AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$2[ebp], eax

; 1366 : 			v=playerAC->af->GetSoundExternalVol() + PlayerOptions.SoundExtAttenuation;

	mov	edx, DWORD PTR _playerAC$2[ebp]
	mov	ecx, DWORD PTR [edx+932]
	call	?GetSoundExternalVol@AirframeClass@@QAEMXZ ; AirframeClass::GetSoundExternalVol
	fstp	DWORD PTR tv182[ebp]
	movss	xmm0, DWORD PTR tv182[ebp]
	cvtsi2ss xmm1, DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+232
	addss	xmm0, xmm1
	movss	DWORD PTR _v$1[ebp], xmm0

; 1367 : 			
; 1368 : 			if( 
; 1369 : 				playerAC->GetNumDOFs() > COMP_CANOPY_DOF && 
; 1370 : 				playerAC->IsComplex() && 
; 1371 : 				playerAC->af->GetCanopyMaxAngle()
; 1372 : 			){

	mov	ecx, DWORD PTR _playerAC$2[ebp]
	call	?GetNumDOFs@SimMoverClass@@QAEHXZ	; SimMoverClass::GetNumDOFs
	cmp	eax, 30					; 0000001eH
	jle	$LN4@F4SoundFXS
	mov	ecx, DWORD PTR _playerAC$2[ebp]
	call	?IsComplex@AircraftClass@@QAEHXZ	; AircraftClass::IsComplex
	test	eax, eax
	je	SHORT $LN4@F4SoundFXS
	mov	eax, DWORD PTR _playerAC$2[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?GetCanopyMaxAngle@AirframeClass@@QAEMXZ ; AirframeClass::GetCanopyMaxAngle
	fstp	DWORD PTR tv189[ebp]
	movss	xmm0, DWORD PTR tv189[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN4@F4SoundFXS

; 1373 : 				ExtAttenuation=(1-(playerAC->GetDOFValue(COMP_CANOPY_DOF) /
; 1374 : 					            (playerAC->af->GetCanopyMaxAngle() * DTR))) * v;

	push	30					; 0000001eH
	mov	ecx, DWORD PTR _playerAC$2[ebp]
	call	?GetDOFValue@SimMoverClass@@QAEMH@Z	; SimMoverClass::GetDOFValue
	fstp	DWORD PTR tv195[ebp]
	movss	xmm0, DWORD PTR tv195[ebp]
	mov	ecx, DWORD PTR _playerAC$2[ebp]
	mov	ecx, DWORD PTR [ecx+932]
	movss	DWORD PTR tv205[ebp], xmm0
	call	?GetCanopyMaxAngle@AirframeClass@@QAEMXZ ; AirframeClass::GetCanopyMaxAngle
	fstp	DWORD PTR tv200[ebp]
	movss	xmm0, DWORD PTR tv200[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	xmm1, DWORD PTR tv205[ebp]
	divss	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _v$1[ebp]
	movss	DWORD PTR ?ExtAttenuation@@3MA, xmm0

; 1375 : 			}
; 1376 : 			else {

	jmp	SHORT $LN2@F4SoundFXS
$LN4@F4SoundFXS:

; 1377 : 				if(playerAC->af->canopyState==false){

	mov	edx, DWORD PTR _playerAC$2[ebp]
	mov	eax, DWORD PTR [edx+932]
	movzx	ecx, BYTE PTR [eax+1588]
	test	ecx, ecx
	jne	SHORT $LN2@F4SoundFXS

; 1378 : 					// closed
; 1379 : 					ExtAttenuation=v;

	movss	xmm0, DWORD PTR _v$1[ebp]
	movss	DWORD PTR ?ExtAttenuation@@3MA, xmm0
$LN2@F4SoundFXS:

; 1380 : 				}
; 1381 : 			}
; 1382 : 		}
; 1383 : 		else { 

	jmp	SHORT $LN1@F4SoundFXS
$LN5@F4SoundFXS:

; 1384 : 			// presume closed
; 1385 : 			//ExtAttenuation=-2000;
; 1386 : 			// Cobra - Should use player-selected attentuation
; 1387 : 			ExtAttenuation = (float)PlayerOptions.SoundExtAttenuation;

	cvtsi2ss xmm0, DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+232
	movss	DWORD PTR ?ExtAttenuation@@3MA, xmm0
$LN1@F4SoundFXS:

; 1388 : 		}
; 1389 : 	}	
; 1390 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_F4SoundFXSetCamPosAndOrient ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_sfxp$ = -8						; size = 4
_playerAC$1 = -4					; size = 4
_sfxId$ = 8						; size = 4
_override$ = 12						; size = 4
_volume$ = 16						; size = 4
_pscale$ = 20						; size = 4
_F4SoundFXSetDist PROC

; 1412 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1413 : 	//Cobra Inhibit stuff?
; 1414 : 	SFX_DEF_ENTRY *sfxp;
; 1415 : 
; 1416 : 	if (sfxId <= 0 || sfxId >= NumSFX) return;

	cmp	DWORD PTR _sfxId$[ebp], 0
	jle	SHORT $LN12@F4SoundFXS
	mov	eax, DWORD PTR _sfxId$[ebp]
	cmp	eax, DWORD PTR ?NumSFX@@3HA		; NumSFX
	jl	SHORT $LN13@F4SoundFXS
$LN12@F4SoundFXS:
	jmp	$LN14@F4SoundFXS
$LN13@F4SoundFXS:

; 1417 : 
; 1418 : 	sfxp = &SFX_DEF[ sfxId ];

	mov	ecx, DWORD PTR _sfxId$[ebp]
	imul	ecx, 140				; 0000008cH
	add	ecx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	DWORD PTR _sfxp$[ebp], ecx

; 1419 : 
; 1420 : 	// Cobra - Fix CTD when exiting F4
; 1421 : 	if(F4IsBadReadPtr(sfxp, sizeof(sfxp))) return;

	push	4
	mov	edx, DWORD PTR _sfxp$[ebp]
	push	edx
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@F4SoundFXS
	jmp	$LN14@F4SoundFXS
$LN11@F4SoundFXS:

; 1422 : 
; 1423 : 	if(g_bRealisticAvionics &&
; 1424 : 	    (sfxp->flags & SFX_FLAGS_VMS))

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	SHORT $LN5@F4SoundFXS
	mov	edx, DWORD PTR _sfxp$[ebp]
	mov	eax, DWORD PTR [edx+100]
	and	eax, 8
	je	SHORT $LN5@F4SoundFXS

; 1425 : 	{
; 1426 : 		AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$1[ebp], eax

; 1427 : 	    //MI no VMS when on ground
; 1428 : 	    if(playerAC)

	cmp	DWORD PTR _playerAC$1[ebp], 0
	je	SHORT $LN5@F4SoundFXS

; 1429 : 		{
; 1430 : 			if(
; 1431 : 				OTWDriver.DisplayInCockpit() && playerAC->OnGround() ||
; 1432 : 				!playerAC->playBetty || !playerAC->IsSetFlag(MOTION_OWNSHIP)
; 1433 : 			){ 

	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?DisplayInCockpit@OTWDriverClass@@QAEHXZ ; OTWDriverClass::DisplayInCockpit
	test	eax, eax
	je	SHORT $LN6@F4SoundFXS
	mov	ecx, DWORD PTR _playerAC$1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _playerAC$1[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	jne	SHORT $LN7@F4SoundFXS
$LN6@F4SoundFXS:
	mov	ecx, DWORD PTR _playerAC$1[ebp]
	movzx	edx, BYTE PTR [ecx+1516]
	test	edx, edx
	je	SHORT $LN7@F4SoundFXS
	push	65536					; 00010000H
	mov	ecx, DWORD PTR _playerAC$1[ebp]
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	jne	SHORT $LN5@F4SoundFXS
$LN7@F4SoundFXS:

; 1434 : 				// MD -- 20031125: except if the MAL/IND test button is being pressed to test the warning sound
; 1435 : 				if (!((sfxId == SFX_BB_ALLWORDS) && playerAC->TestLights)){

	cmp	DWORD PTR _sfxId$[ebp], 270		; 0000010eH
	jne	SHORT $LN4@F4SoundFXS
	mov	eax, DWORD PTR _playerAC$1[ebp]
	movzx	ecx, BYTE PTR [eax+849]
	test	ecx, ecx
	jne	SHORT $LN5@F4SoundFXS
$LN4@F4SoundFXS:

; 1436 : 					return;

	jmp	$LN14@F4SoundFXS
$LN5@F4SoundFXS:

; 1437 : 				}
; 1438 : 			}
; 1439 : 		}
; 1440 : 	}
; 1441 : //End
; 1442 : 
; 1443 : 	if(gSoundObject)

	cmp	DWORD PTR ?gSoundObject@@3PAVF4SoundPos@@A, 0 ; gSoundObject
	je	$LN2@F4SoundFXS

; 1444 : 	{			
; 1445 : 		if( (SFX_DEF[ sfxId ].flags & SFX_POS_LOOPED)	|| 
; 1446 : 			override									|| 
; 1447 : 			(!gSoundObject->IsPlaying(sfxId,0)) )

	mov	edx, DWORD PTR _sfxId$[ebp]
	imul	edx, 140				; 0000008cH
	mov	eax, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	ecx, DWORD PTR [eax+edx+100]
	and	ecx, 2
	jne	SHORT $LN1@F4SoundFXS
	cmp	DWORD PTR _override$[ebp], 0
	jne	SHORT $LN1@F4SoundFXS
	push	0
	mov	edx, DWORD PTR _sfxId$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?gSoundObject@@3PAVF4SoundPos@@A ; gSoundObject
	call	?IsPlaying@F4SoundPos@@QAE_NHH@Z	; F4SoundPos::IsPlaying
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@F4SoundFXS
$LN1@F4SoundFXS:

; 1448 : 			gSoundObject->Sfx(sfxId, 0, pscale, volume,CamPos.x,CamPos.y,CamPos.z);

	push	ecx
	movss	xmm0, DWORD PTR ?CamPos@@3UTpoint@@A+8
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?CamPos@@3UTpoint@@A+4
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?CamPos@@3UTpoint@@A
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _volume$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pscale$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _sfxId$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gSoundObject@@3PAVF4SoundPos@@A ; gSoundObject
	call	?Sfx@F4SoundPos@@QAEXHHMMMMM@Z		; F4SoundPos::Sfx
$LN2@F4SoundFXS:
$LN14@F4SoundFXS:

; 1449 : 	}
; 1450 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_F4SoundFXSetDist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_sfxId$ = 8						; size = 4
_override$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_z$ = 24						; size = 4
_pscale$ = 28						; size = 4
_volume$ = 32						; size = 4
_uid$ = 36						; size = 4
_F4SoundFXSetPos PROC

; 1405 : {

	push	ebp
	mov	ebp, esp

; 1406 : 	if(gSoundObject)

	cmp	DWORD PTR ?gSoundObject@@3PAVF4SoundPos@@A, 0 ; gSoundObject
	je	SHORT $LN1@F4SoundFXS

; 1407 : 	gSoundObject->Sfx(sfxId, uid, pscale, volume, x, y, z);

	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _volume$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pscale$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _uid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sfxId$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gSoundObject@@3PAVF4SoundPos@@A ; gSoundObject
	call	?Sfx@F4SoundPos@@QAEXHHMMMMM@Z		; F4SoundPos::Sfx
$LN1@F4SoundFXS:

; 1408 : }

	pop	ebp
	ret	0
_F4SoundFXSetPos ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_group$ = 8						; size = 4
_vol$ = 12						; size = 4
_F4SetGroupVolume PROC

; 714  : {

	push	ebp
	mov	ebp, esp

; 715  : 	if ( group < 0 || group >= NUM_SOUND_GROUPS )

	cmp	DWORD PTR _group$[ebp], 0
	jl	SHORT $LN1@F4SetGroup
	cmp	DWORD PTR _group$[ebp], 10		; 0000000aH
	jl	SHORT $LN2@F4SetGroup
$LN1@F4SetGroup:

; 716  : 		return;

	jmp	SHORT $LN3@F4SetGroup
$LN2@F4SetGroup:

; 717  : 	//gGroupMaxVols[ group ] = vol;
; 718  : 	PlayerOptions.GroupVol[ group ] = vol;

	mov	eax, DWORD PTR _group$[ebp]
	mov	ecx, DWORD PTR _vol$[ebp]
	mov	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A[eax*4+120], ecx
$LN3@F4SetGroup:

; 719  : }

	pop	ebp
	ret	0
_F4SetGroupVolume ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_F4SoundLeaving3d PROC

; 1337 : void F4SoundLeaving3d(void){

	push	ebp
	mov	ebp, esp

; 1338 : 	F4SoundStop();

	call	_F4SoundStop

; 1339 : 	gVoiceManager.StopAll();

	mov	ecx, OFFSET ?gVoiceManager@@3VmlrVoiceManager@@A ; gVoiceManager
	call	?StopAll@mlrVoiceManager@@QAEXXZ	; mlrVoiceManager::StopAll

; 1340 : }

	pop	ebp
	ret	0
_F4SoundLeaving3d ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_F4SoundEntering3d PROC

; 1310 : {

	push	ebp
	mov	ebp, esp

; 1311 : 	g_bNewEngineSounds = false;

	mov	BYTE PTR ?g_bNewEngineSounds@@3_NA, 0	; g_bNewEngineSounds

; 1312 : 	g_bEnableDopplerSound  = false;

	mov	BYTE PTR ?g_bEnableDopplerSound@@3_NA, 0 ; g_bEnableDopplerSound

; 1313 : 	g_bSoundDistanceEffect = false;

	mov	BYTE PTR ?g_bSoundDistanceEffect@@3_NA, 0 ; g_bSoundDistanceEffect

; 1314 : 	g_bSoundHearVMSExternal = false;

	mov	BYTE PTR ?g_bSoundHearVMSExternal@@3_NA, 0 ; g_bSoundHearVMSExternal

; 1315 : 
; 1316 : 	if(PlayerOptions.SoundFlags & SNDFNEWENG)

	mov	eax, DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+228
	and	eax, 1
	je	SHORT $LN4@F4SoundEnt

; 1317 : 	{
; 1318 : 		g_bNewEngineSounds  = true;

	mov	BYTE PTR ?g_bNewEngineSounds@@3_NA, 1	; g_bNewEngineSounds
$LN4@F4SoundEnt:

; 1319 : 	}
; 1320 : 
; 1321 : 	if(PlayerOptions.SoundFlags & SNDFDOP)

	mov	ecx, DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+228
	and	ecx, 2
	je	SHORT $LN3@F4SoundEnt

; 1322 : 	{
; 1323 : 		g_bEnableDopplerSound  = true;

	mov	BYTE PTR ?g_bEnableDopplerSound@@3_NA, 1 ; g_bEnableDopplerSound
$LN3@F4SoundEnt:

; 1324 : 	}
; 1325 : 
; 1326 : 	if(PlayerOptions.SoundFlags & SNDFDISTE)

	mov	edx, DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+228
	and	edx, 4
	je	SHORT $LN2@F4SoundEnt

; 1327 : 	{
; 1328 : 		g_bSoundDistanceEffect = true;

	mov	BYTE PTR ?g_bSoundDistanceEffect@@3_NA, 1 ; g_bSoundDistanceEffect
$LN2@F4SoundEnt:

; 1329 : 	}
; 1330 : 
; 1331 : 	if(PlayerOptions.SoundFlags & SNDFVMSEXT)

	mov	eax, DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+228
	and	eax, 8
	je	SHORT $LN5@F4SoundEnt

; 1332 : 	{
; 1333 : 		g_bSoundHearVMSExternal = true;

	mov	BYTE PTR ?g_bSoundHearVMSExternal@@3_NA, 1 ; g_bSoundHearVMSExternal
$LN5@F4SoundEnt:

; 1334 : 	}
; 1335 : }

	pop	ebp
	ret	0
_F4SoundEntering3d ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
$T1 = -268						; size = 4
_sfxtable$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_F4ReloadSFX PROC

; 1093 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1094 : 	UnLoadSFX();

	call	?UnLoadSFX@@YAXXZ			; UnLoadSFX

; 1095 : 	if (SFX_DEF != BuiltinSFX)  

	cmp	DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A, OFFSET ?BuiltinSFX@@3PAUSfxDef@@A ; SFX_DEF, BuiltinSFX
	je	SHORT $LN2@F4ReloadSF

; 1096 : 	{
; 1097 : 	    delete [] SFX_DEF;

	mov	eax, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@F4ReloadSF:

; 1098 : 	}
; 1099 : 	SFX_DEF = NULL;

	mov	DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A, 0	; SFX_DEF

; 1100 : 
; 1101 : 	char sfxtable[_MAX_PATH];
; 1102 : 	sprintf (sfxtable, "%s\\%s", FalconSoundThrDirectory, FALCONSNDTABLETXT);

	mov	edx, DWORD PTR ?FALCONSNDTABLETXT@@3PBDB ; FALCONSNDTABLETXT
	push	edx
	push	OFFSET ?FalconSoundThrDirectory@@3PADA	; FalconSoundThrDirectory
	push	OFFSET ??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@
	lea	eax, DWORD PTR _sfxtable$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 1103 : 
; 1104 : 	if(!ReadSFXTableTXT(sfxtable)) // MLR 2003-10-17 Parse text file if it exists

	lea	ecx, DWORD PTR _sfxtable$[ebp]
	push	ecx
	call	?ReadSFXTableTXT@@YAHPAD@Z		; ReadSFXTableTXT
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@F4ReloadSF

; 1105 : 	{
; 1106 : 		return; // MLR 2003-11-18 - the new style sound table is mandatory

	jmp	SHORT $LN3@F4ReloadSF
$LN1@F4ReloadSF:

; 1107 : 		/*
; 1108 : 		sprintf (sfxtable, "%s\\%s", FalconObjectDataDir, FALCONSNDTABLE);
; 1109 : 		if (ReadSFXTable (sfxtable) == FALSE)
; 1110 : 		{
; 1111 : 			// screwed
; 1112 : 			return;
; 1113 : 		}
; 1114 : 		*/
; 1115 : 	}
; 1116 : 	LoadSFX(FalconDataDirectory);

	push	OFFSET ?FalconDataDirectory@@3PADA	; FalconDataDirectory
	call	?LoadSFX@@YAXPAD@Z			; LoadSFX
	add	esp, 4
$LN3@F4ReloadSF:

; 1117 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_F4ReloadSFX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_F4ChatToggleXmitReceive PROC

; 1291 : {

	push	ebp
	mov	ebp, esp

; 1292 : 	if(!gSoundDriver) return;

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	jne	SHORT $LN3@F4ChatTogg
	jmp	SHORT $LN4@F4ChatTogg
$LN3@F4ChatTogg:

; 1293 : 
; 1294 : 	// Switch modes
; 1295 : 	if (chatMode == Transmit) {

	cmp	DWORD PTR _chatMode, 1
	jne	SHORT $LN2@F4ChatTogg

; 1296 : 		chatMode = Receive;

	mov	DWORD PTR _chatMode, 0

; 1297 : //		KCK: Commented out - need to use new VoiceDataMessage
; 1298 : //		EndTransmission();
; 1299 : 	} else {

	jmp	SHORT $LN4@F4ChatTogg
$LN2@F4ChatTogg:

; 1300 : 		chatMode = Transmit;

	mov	DWORD PTR _chatMode, 1
$LN4@F4ChatTogg:

; 1301 : //		KCK: Commented out - need to use new VoiceDataMessage
; 1302 : //		BeginTransmission();
; 1303 : 	}
; 1304 : }

	pop	ebp
	ret	0
_F4ChatToggleXmitReceive ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_F4StopAllStreams PROC

; 635  : {

	push	ebp
	mov	ebp, esp

; 636  : 	// add here reset for lists
; 637  : /* This I must kill the voices here in buffer*/
; 638  : 	if ( voiceFilter )

	cmp	DWORD PTR ?voiceFilter@@3PAVVoiceFilter@@A, 0 ; voiceFilter
	je	SHORT $LN2@F4StopAllS

; 639  : 		{
; 640  : 		voiceFilter->ResetVoiceManager();

	mov	ecx, DWORD PTR ?voiceFilter@@3PAVVoiceFilter@@A ; voiceFilter
	call	?ResetVoiceManager@VoiceFilter@@QAEXXZ	; VoiceFilter::ResetVoiceManager
$LN2@F4StopAllS:

; 641  : 		}
; 642  : /*		Also the following just stops and I need to play them here
; 643  : 	*/
; 644  : 	if(gSoundDriver)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN3@F4StopAllS

; 645  : 		gSoundDriver->StopAllStreams();

	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?StopAllStreams@CSoundMgr@@QAEXXZ	; CSoundMgr::StopAllStreams
$LN3@F4StopAllS:

; 646  : }

	pop	ebp
	ret	0
_F4StopAllStreams ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_F4SilenceVoices PROC

; 668  : {

	push	ebp
	mov	ebp, esp

; 669  : 	if(voiceFilter)

	cmp	DWORD PTR ?voiceFilter@@3PAVVoiceFilter@@A, 0 ; voiceFilter
	je	SHORT $LN2@F4SilenceV

; 670  : 		voiceFilter->SilenceVoices();

	mov	ecx, DWORD PTR ?voiceFilter@@3PAVVoiceFilter@@A ; voiceFilter
	call	?SilenceVoices@VoiceFilter@@QAEXXZ	; VoiceFilter::SilenceVoices
$LN2@F4SilenceV:

; 671  : }

	pop	ebp
	ret	0
_F4SilenceVoices ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_F4HearVoices PROC

; 662  : {

	push	ebp
	mov	ebp, esp

; 663  : 	if(voiceFilter)

	cmp	DWORD PTR ?voiceFilter@@3PAVVoiceFilter@@A, 0 ; voiceFilter
	je	SHORT $LN2@F4HearVoic

; 664  : 		voiceFilter->HearVoices();

	mov	ecx, DWORD PTR ?voiceFilter@@3PAVVoiceFilter@@A ; voiceFilter
	call	?HearVoices@VoiceFilter@@QAEXXZ		; VoiceFilter::HearVoices
$LN2@F4HearVoic:

; 665  : }

	pop	ebp
	ret	0
_F4HearVoices ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_ID$ = 8						; size = 4
_vol$ = 12						; size = 4
_F4SetStreamVolume PROC

; 655  : {

	push	ebp
	mov	ebp, esp

; 656  : 	if(gSoundDriver)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN1@F4SetStrea

; 657  : 		return(gSoundDriver->SetStreamVolume(ID,vol));

	mov	eax, DWORD PTR _vol$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ID$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?SetStreamVolume@CSoundMgr@@QAEJJJ@Z	; CSoundMgr::SetStreamVolume
	jmp	SHORT $LN2@F4SetStrea
$LN1@F4SetStrea:

; 658  : 	return(-10000);

	mov	eax, -10000				; ffffd8f0H
$LN2@F4SetStrea:

; 659  : }

	pop	ebp
	ret	0
_F4SetStreamVolume ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_StreamID$ = 8						; size = 4
_F4StopStream PROC

; 626  : {

	push	ebp
	mov	ebp, esp

; 627  : 	if(gSoundDriver && StreamID != SND_NO_HANDLE)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN2@F4StopStre
	cmp	DWORD PTR _StreamID$[ebp], 0
	je	SHORT $LN2@F4StopStre

; 628  : 	{
; 629  : 		gSoundDriver->StopStream(StreamID);

	mov	eax, DWORD PTR _StreamID$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?StopStream@CSoundMgr@@QAEXJ@Z		; CSoundMgr::StopStream

; 630  : 		gSoundDriver->RemoveStream(StreamID);

	mov	ecx, DWORD PTR _StreamID$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?RemoveStream@CSoundMgr@@QAEXJ@Z	; CSoundMgr::RemoveStream
$LN2@F4StopStre:

; 631  : 	}
; 632  : }

	pop	ebp
	ret	0
_F4StopStream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_StreamID$ = 8						; size = 4
_ptr$ = 12						; size = 4
_cb$ = 16						; size = 4
_F4StartCallbackStream PROC

; 619  : {

	push	ebp
	mov	ebp, esp

; 620  : 	if(gSoundDriver && StreamID != SND_NO_HANDLE)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN1@F4StartCal
	cmp	DWORD PTR _StreamID$[ebp], 0
	je	SHORT $LN1@F4StartCal

; 621  : 		return(gSoundDriver->StartCallbackStream(StreamID,ptr,cb));

	mov	eax, DWORD PTR _cb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _StreamID$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?StartCallbackStream@CSoundMgr@@QAEHJPAXP6AK0PADK@Z@Z ; CSoundMgr::StartCallbackStream
	jmp	SHORT $LN2@F4StartCal
$LN1@F4StartCal:

; 622  : 	return(FALSE);

	xor	eax, eax
$LN2@F4StartCal:

; 623  : }

	pop	ebp
	ret	0
_F4StartCallbackStream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_StreamID$ = 8						; size = 4
_Data$ = 12						; size = 4
_size$ = 16						; size = 4
_F4StartRawStream PROC

; 611  : {

	push	ebp
	mov	ebp, esp

; 612  : 	if(gSoundDriver && StreamID != SND_NO_HANDLE)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN1@F4StartRaw
	cmp	DWORD PTR _StreamID$[ebp], 0
	je	SHORT $LN1@F4StartRaw

; 613  : 		return(gSoundDriver->StartMemoryStream(StreamID,Data,size));

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _StreamID$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?StartMemoryStream@CSoundMgr@@QAEHJPADJ@Z ; CSoundMgr::StartMemoryStream
	jmp	SHORT $LN2@F4StartRaw
$LN1@F4StartRaw:

; 614  : 
; 615  : 	return(FALSE);

	xor	eax, eax
$LN2@F4StartRaw:

; 616  : }

	pop	ebp
	ret	0
_F4StartRawStream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_size$ = -36						; size = 4
_NumSamples$ = -32					; size = 4
_StreamID$ = -28					; size = 4
_Header$ = -24						; size = 18
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
_flags$ = 12						; size = 4
_F4StartStream PROC

; 571  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 572  : 	WAVEFORMATEX Header;
; 573  : 	int StreamID=SND_NO_HANDLE;

	mov	DWORD PTR _StreamID$[ebp], 0

; 574  : 	long size,NumSamples;
; 575  : 
; 576  : 	if(gSoundDriver)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	$LN1@F4StartStr

; 577  : 	{
; 578  : 		// Start KLUDGE
; 579  : 		gSoundDriver->LoadRiffFormat(filename,&Header,&size,&NumSamples);

	lea	eax, DWORD PTR _NumSamples$[ebp]
	push	eax
	lea	ecx, DWORD PTR _size$[ebp]
	push	ecx
	lea	edx, DWORD PTR _Header$[ebp]
	push	edx
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?LoadRiffFormat@CSoundMgr@@QAEJPADPAUtWAVEFORMATEX@@PAJ2@Z ; CSoundMgr::LoadRiffFormat

; 580  : 		if(Header.wFormatTag == WAVE_FORMAT_IMA_ADPCM)

	movzx	ecx, WORD PTR _Header$[ebp]
	cmp	ecx, 17					; 00000011H
	jne	SHORT $LN4@F4StartStr

; 581  : 		{
; 582  : 			Header.wFormatTag=WAVE_FORMAT_PCM;

	mov	edx, 1
	mov	WORD PTR _Header$[ebp], dx

; 583  : 			Header.wBitsPerSample *=4;

	movzx	eax, WORD PTR _Header$[ebp+14]
	shl	eax, 2
	mov	WORD PTR _Header$[ebp+14], ax

; 584  : 			Header.nBlockAlign = (unsigned short)(Header.nChannels * Header.wBitsPerSample / 8);

	movzx	eax, WORD PTR _Header$[ebp+2]
	movzx	ecx, WORD PTR _Header$[ebp+14]
	imul	eax, ecx
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	WORD PTR _Header$[ebp+12], ax

; 585  : 			Header.nAvgBytesPerSec=Header.nSamplesPerSec * Header.nBlockAlign;

	movzx	edx, WORD PTR _Header$[ebp+12]
	imul	edx, DWORD PTR _Header$[ebp+4]
	mov	DWORD PTR _Header$[ebp+8], edx
$LN4@F4StartStr:

; 586  : 		}
; 587  : 		StreamID=gSoundDriver->CreateStream(&Header,0.5);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _Header$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?CreateStream@CSoundMgr@@QAEJPAUtWAVEFORMATEX@@M@Z ; CSoundMgr::CreateStream
	mov	DWORD PTR _StreamID$[ebp], eax

; 588  : 		// END KLUDGE
; 589  : 		if(StreamID != SND_NO_HANDLE)

	cmp	DWORD PTR _StreamID$[ebp], 0
	je	SHORT $LN1@F4StartStr

; 590  : 		{
; 591  : 			if(gSoundDriver->StartFileStream(StreamID,filename,flags))

	push	0
	mov	ecx, DWORD PTR _flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _filename$[ebp]
	push	edx
	mov	eax, DWORD PTR _StreamID$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?StartFileStream@CSoundMgr@@QAEHJPADJJ@Z ; CSoundMgr::StartFileStream
	test	eax, eax
	je	SHORT $LN2@F4StartStr

; 592  : 				return(StreamID);

	mov	eax, DWORD PTR _StreamID$[ebp]
	jmp	SHORT $LN6@F4StartStr

; 593  : 			else

	jmp	SHORT $LN1@F4StartStr
$LN2@F4StartStr:

; 594  : 				gSoundDriver->RemoveStream(StreamID);

	mov	ecx, DWORD PTR _StreamID$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?RemoveStream@CSoundMgr@@QAEXJ@Z	; CSoundMgr::RemoveStream
$LN1@F4StartStr:

; 595  : 		}
; 596  : 	}
; 597  : 	return(SND_NO_HANDLE);

	xor	eax, eax
$LN6@F4StartStr:

; 598  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_F4StartStream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_StreamID$ = 8						; size = 4
_F4RemoveStream PROC

; 562  : {

	push	ebp
	mov	ebp, esp

; 563  : 	if(gSoundDriver && StreamID != SND_NO_HANDLE)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN2@F4RemoveSt
	cmp	DWORD PTR _StreamID$[ebp], 0
	je	SHORT $LN2@F4RemoveSt

; 564  : 		gSoundDriver->RemoveStream(StreamID);

	mov	eax, DWORD PTR _StreamID$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?RemoveStream@CSoundMgr@@QAEXJ@Z	; CSoundMgr::RemoveStream
$LN2@F4RemoveSt:

; 565  : }

	pop	ebp
	ret	0
_F4RemoveStream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_StreamID$ = 8						; size = 4
_F4StreamPlayed PROC

; 674  : {

	push	ebp
	mov	ebp, esp

; 675  : 	if(gSoundDriver)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN1@F4StreamPl

; 676  : 		return(gSoundDriver->GetStreamPlayTime(StreamID));

	mov	eax, DWORD PTR _StreamID$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?GetStreamPlayTime@CSoundMgr@@QAEJJ@Z	; CSoundMgr::GetStreamPlayTime
	jmp	SHORT $LN2@F4StreamPl
$LN1@F4StreamPl:

; 677  : 	return(0);

	xor	eax, eax
$LN2@F4StreamPl:

; 678  : }

	pop	ebp
	ret	0
_F4StreamPlayed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_fmt$ = 8						; size = 4
_seconds$ = 12						; size = 4
_F4CreateStream PROC

; 552  : {

	push	ebp
	mov	ebp, esp

; 553  : 	if(gSoundDriver)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN1@F4CreateSt

; 554  : 		return(gSoundDriver->CreateStream(fmt,seconds));

	push	ecx
	movss	xmm0, DWORD PTR _seconds$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _fmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?CreateStream@CSoundMgr@@QAEJPAUtWAVEFORMATEX@@M@Z ; CSoundMgr::CreateStream
	jmp	SHORT $LN2@F4CreateSt
$LN1@F4CreateSt:

; 555  : 	return(SND_NO_HANDLE);

	xor	eax, eax
$LN2@F4CreateSt:

; 556  : }

	pop	ebp
	ret	0
_F4CreateStream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_soundIdx$ = 8						; size = 4
_Volume$ = 12						; size = 4
_F4SetVolume PROC

; 706  : {

	push	ebp
	mov	ebp, esp

; 707  : 	if(gSoundDriver && soundIdx != SND_NO_HANDLE)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN1@F4SetVolum
	cmp	DWORD PTR _soundIdx$[ebp], 0
	je	SHORT $LN1@F4SetVolum

; 708  : 		return(gSoundDriver->SetSampleVolume(soundIdx,Volume));

	mov	eax, DWORD PTR _Volume$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soundIdx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?SetSampleVolume@CSoundMgr@@QAEHJJ@Z	; CSoundMgr::SetSampleVolume
	jmp	SHORT $LN2@F4SetVolum
$LN1@F4SetVolum:

; 709  : 	return(-10000);

	mov	eax, -10000				; ffffd8f0H
$LN2@F4SetVolum:

; 710  : }

	pop	ebp
	ret	0
_F4SetVolume ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_soundIdx$ = 8						; size = 4
_PanDir$ = 12						; size = 4
_F4PanSound PROC

; 685  : {

	push	ebp
	mov	ebp, esp

; 686  : 	if(gSoundDriver && soundIdx != SND_NO_HANDLE)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN2@F4PanSound
	cmp	DWORD PTR _soundIdx$[ebp], 0
	je	SHORT $LN2@F4PanSound

; 687  : 		gSoundDriver->SetSamplePan(soundIdx,PanDir);

	mov	eax, DWORD PTR _PanDir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soundIdx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?SetSamplePan@CSoundMgr@@QAEHJJ@Z	; CSoundMgr::SetSamplePan
$LN2@F4PanSound:

; 688  : }

	pop	ebp
	ret	0
_F4PanSound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_soundIdx$ = 8						; size = 4
_Pitch$ = 12						; size = 4
_F4PitchBend PROC

; 696  : {

	push	ebp
	mov	ebp, esp

; 697  : 	if(gSoundDriver && soundIdx != SND_NO_HANDLE)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN1@F4PitchBen
	cmp	DWORD PTR _soundIdx$[ebp], 0
	je	SHORT $LN1@F4PitchBen

; 698  : 		gSoundDriver->SetSamplePitch(soundIdx,Pitch);

	push	ecx
	movss	xmm0, DWORD PTR _Pitch$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _soundIdx$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?SetSamplePitch@CSoundMgr@@QAEHJM@Z	; CSoundMgr::SetSamplePitch
$LN1@F4PitchBen:

; 699  : }

	pop	ebp
	ret	0
_F4PitchBend ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_F4SoundStart PROC

; 505  : void F4SoundStart(){

	push	ebp
	mov	ebp, esp

; 506  : 	if(gSoundDriver){

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN2@F4SoundSta

; 507  : 		F4SoundFXInit();

	call	_F4SoundFXInit
$LN2@F4SoundSta:

; 508  : 	}
; 509  : }

	pop	ebp
	ret	0
_F4SoundStart ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_F4SoundStop PROC

; 496  : void F4SoundStop(){

	push	ebp
	mov	ebp, esp

; 497  : 	if (gSoundDriver){

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN2@F4SoundSto

; 498  : 		gSoundDriver->StopAllSamples();

	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?StopAllSamples@CSoundMgr@@QAEHXZ	; CSoundMgr::StopAllSamples
$LN2@F4SoundSto:

; 499  : 	}
; 500  : }

	pop	ebp
	ret	0
_F4SoundStop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
$T1 = -40						; size = 4
tv84 = -36						; size = 4
$T2 = -32						; size = 4
tv76 = -28						; size = 4
$T3 = -24						; size = 4
tv69 = -20						; size = 4
$T4 = -16						; size = 4
$T5 = -12						; size = 4
$T6 = -8						; size = 4
$T7 = -4						; size = 4
_ExitSoundManager PROC

; 810  : void ExitSoundManager (void){

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 811  : 
; 812  : 	if(gSoundObject){

	cmp	DWORD PTR ?gSoundObject@@3PAVF4SoundPos@@A, 0 ; gSoundObject
	je	SHORT $LN3@ExitSoundM

; 813  : 		delete gSoundObject;

	mov	eax, DWORD PTR ?gSoundObject@@3PAVF4SoundPos@@A ; gSoundObject
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR $T7[ebp], ecx
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN6@ExitSoundM
	push	1
	mov	ecx, DWORD PTR $T7[ebp]
	call	??_GF4SoundPos@@QAEPAXI@Z
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN7@ExitSoundM
$LN6@ExitSoundM:
	mov	DWORD PTR tv69[ebp], 0
$LN7@ExitSoundM:

; 814  : 		gSoundObject=0;

	mov	DWORD PTR ?gSoundObject@@3PAVF4SoundPos@@A, 0 ; gSoundObject
$LN3@ExitSoundM:

; 815  : 	}
; 816  : 
; 817  : 	F4DestroyCriticalSection(SoundPosSection);

	mov	edx, DWORD PTR ?SoundPosSection@@3PAUF4CSECTIONHANDLE@@A ; SoundPosSection
	push	edx
	call	_F4DestroyCriticalSection
	add	esp, 4

; 818  : 
; 819  : 	gSoundManagerRunning = FALSE;

	mov	DWORD PTR ?gSoundManagerRunning@@3HA, 0	; gSoundManagerRunning

; 820  : 	if(gSoundDriver){

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	$LN2@ExitSoundM

; 821  : //		delete messageCenter;
; 822  : 		delete voiceFilter;

	mov	eax, DWORD PTR ?voiceFilter@@3PAVVoiceFilter@@A ; voiceFilter
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T6[ebp], ecx
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN8@ExitSoundM
	push	1
	mov	ecx, DWORD PTR $T6[ebp]
	call	??_GVoiceFilter@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN9@ExitSoundM
$LN8@ExitSoundM:
	mov	DWORD PTR tv76[ebp], 0
$LN9@ExitSoundM:

; 823  : 		voiceFilter=NULL;

	mov	DWORD PTR ?voiceFilter@@3PAVVoiceFilter@@A, 0 ; voiceFilter

; 824  : 		gSoundDriver->RemoveAllSamples();

	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?RemoveAllSamples@CSoundMgr@@QAEXXZ	; CSoundMgr::RemoveAllSamples

; 825  : 		gSoundDriver->RemoveAllStreams();

	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?RemoveAllStreams@CSoundMgr@@QAEXXZ	; CSoundMgr::RemoveAllStreams

; 826  : 		gSoundDriver->RemoveDSound();

	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?RemoveDSound@CSoundMgr@@QAEXXZ		; CSoundMgr::RemoveDSound

; 827  : 		delete gSoundDriver;

	mov	edx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T5[ebp], eax
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN10@ExitSoundM
	push	1
	mov	ecx, DWORD PTR $T5[ebp]
	call	??_GCSoundMgr@@QAEPAXI@Z
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN11@ExitSoundM
$LN10@ExitSoundM:
	mov	DWORD PTR tv84[ebp], 0
$LN11@ExitSoundM:

; 828  : 		gSoundDriver=NULL;

	mov	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
$LN2@ExitSoundM:

; 829  : 	}
; 830  : 	UnLoadSFX();

	call	?UnLoadSFX@@YAXXZ			; UnLoadSFX

; 831  : 	if (SFX_DEF != BuiltinSFX){

	cmp	DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A, OFFSET ?BuiltinSFX@@3PAUSfxDef@@A ; SFX_DEF, BuiltinSFX
	je	SHORT $LN1@ExitSoundM

; 832  : 	    delete [] SFX_DEF;

	mov	ecx, DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A	; SFX_DEF
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@ExitSoundM:

; 833  : 	}
; 834  : 	SFX_DEF = NULL;

	mov	DWORD PTR ?SFX_DEF@@3PAUSfxDef@@A, 0	; SFX_DEF

; 835  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_ExitSoundManager ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_soundIdx$ = 8						; size = 4
_F4StopSound PROC

; 802  : {

	push	ebp
	mov	ebp, esp

; 803  : 	if(gSoundDriver && soundIdx != SND_NO_HANDLE)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN2@F4StopSoun
	cmp	DWORD PTR _soundIdx$[ebp], 0
	je	SHORT $LN2@F4StopSoun

; 804  : 		gSoundDriver->StopSample(soundIdx);

	mov	eax, DWORD PTR _soundIdx$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?StopSample@CSoundMgr@@QAEHJ@Z		; CSoundMgr::StopSample
$LN2@F4StopSoun:

; 805  : }

	pop	ebp
	ret	0
_F4StopSound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_soundIdx$ = 8						; size = 4
_F4LoopSound PROC

; 791  : {

	push	ebp
	mov	ebp, esp

; 792  : 	if(gSoundDriver && soundIdx != SND_NO_HANDLE)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN2@F4LoopSoun
	cmp	DWORD PTR _soundIdx$[ebp], 0
	je	SHORT $LN2@F4LoopSoun

; 793  : 		//gSoundDriver->PlaySample(soundIdx,SND_LOOP_SAMPLE | SND_EXCLUSIVE);
; 794  : 		gSoundDriver->PlaySample(soundIdx,SFX_POS_LOOPED);

	push	2
	mov	eax, DWORD PTR _soundIdx$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?PlaySample@CSoundMgr@@QAEHJJ@Z		; CSoundMgr::PlaySample
$LN2@F4LoopSoun:

; 795  : }

	pop	ebp
	ret	0
_F4LoopSound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_soundIdx$ = 8						; size = 4
_F4PlaySound PROC

; 755  : {

	push	ebp
	mov	ebp, esp

; 756  : 	if(gSoundDriver && soundIdx != SND_NO_HANDLE)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN2@F4PlaySoun
	cmp	DWORD PTR _soundIdx$[ebp], 0
	je	SHORT $LN2@F4PlaySoun

; 757  : 		gSoundDriver->PlaySample(soundIdx,0);

	push	0
	mov	eax, DWORD PTR _soundIdx$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?PlaySample@CSoundMgr@@QAEHJJ@Z		; CSoundMgr::PlaySample
$LN2@F4PlaySoun:

; 758  : }

	pop	ebp
	ret	0
_F4PlaySound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_sound$ = 8						; size = 4
_F4FreeSound PROC

; 479  : {

	push	ebp
	mov	ebp, esp

; 480  : 	if (gSoundDriver)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN1@F4FreeSoun

; 481  : 	   gSoundDriver->RemoveSample(*sound);

	mov	eax, DWORD PTR _sound$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?RemoveSample@CSoundMgr@@QAEXJ@Z	; CSoundMgr::RemoveSample
$LN1@F4FreeSoun:

; 482  :    *sound=SND_NO_HANDLE;

	mov	edx, DWORD PTR _sound$[ebp]
	mov	DWORD PTR [edx], 0

; 483  : }

	pop	ebp
	ret	0
_F4FreeSound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_soundIdx$ = 8						; size = 4
_F4GetVolume PROC

; 744  : {

	push	ebp
	mov	ebp, esp

; 745  : 	if(gSoundDriver && soundIdx != SND_NO_HANDLE)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN1@F4GetVolum
	cmp	DWORD PTR _soundIdx$[ebp], 0
	je	SHORT $LN1@F4GetVolum

; 746  : 		return(gSoundDriver->GetSampleVolume(soundIdx));

	mov	eax, DWORD PTR _soundIdx$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?GetSampleVolume@CSoundMgr@@QAEHJ@Z	; CSoundMgr::GetSampleVolume
	jmp	SHORT $LN2@F4GetVolum
$LN1@F4GetVolum:

; 747  : 	return(0);

	xor	eax, eax
$LN2@F4GetVolum:

; 748  : }

	pop	ebp
	ret	0
_F4GetVolume ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_theSound$ = 8						; size = 4
_UID$ = 12						; size = 4
_F4IsSoundPlaying PROC

; 770  : {

	push	ebp
	mov	ebp, esp

; 771  : 	if(gSoundDriver && theSound != SND_NO_HANDLE)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN1@F4IsSoundP
	cmp	DWORD PTR _theSound$[ebp], 0
	je	SHORT $LN1@F4IsSoundP

; 772  : 		return(gSoundDriver->IsSamplePlaying(theSound,UID));

	mov	eax, DWORD PTR _UID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _theSound$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?IsSamplePlaying@CSoundMgr@@QAEHJH@Z	; CSoundMgr::IsSamplePlaying
	jmp	SHORT $LN2@F4IsSoundP
$LN1@F4IsSoundP:

; 773  : 
; 774  : 	return(0);

	xor	eax, eax
$LN2@F4IsSoundP:

; 775  : }

	pop	ebp
	ret	0
_F4IsSoundPlaying ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_SoundID$ = -4						; size = 4
___formal$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_F4LoadRawSound PROC

; 466  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 467  : 	int SoundID=SND_NO_HANDLE;

	mov	DWORD PTR _SoundID$[ebp], 0

; 468  : 
; 469  : 	if(gSoundDriver)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN1@F4LoadRawS

; 470  : 		SoundID=gSoundDriver->AddRawSample(&Mono_22K_8Bit,data,len,0);

	push	0
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	push	OFFSET ?Mono_22K_8Bit@@3UtWAVEFORMATEX@@A ; Mono_22K_8Bit
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?AddRawSample@CSoundMgr@@QAEJPAUtWAVEFORMATEX@@PADJJ@Z ; CSoundMgr::AddRawSample
	mov	DWORD PTR _SoundID$[ebp], eax
$LN1@F4LoadRawS:

; 471  : 
; 472  : 	return(SoundID);

	mov	eax, DWORD PTR _SoundID$[ebp]

; 473  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_F4LoadRawSound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_SoundID$ = -4						; size = 4
_filename$ = 8						; size = 4
_Flags$ = 12						; size = 4
_F4LoadSound PROC

; 435  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 436  : 	int SoundID=SND_NO_HANDLE;

	mov	DWORD PTR _SoundID$[ebp], 0

; 437  : 
; 438  : 	if (gSoundDriver)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN1@F4LoadSoun

; 439  : 		SoundID=gSoundDriver->LoadWaveFile(filename,Flags, NULL);

	push	0
	mov	eax, DWORD PTR _Flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?LoadWaveFile@CSoundMgr@@QAEJPADJPAUSfxDef@@@Z ; CSoundMgr::LoadWaveFile
	mov	DWORD PTR _SoundID$[ebp], eax
$LN1@F4LoadSoun:

; 440  : 
; 441  : 	return(SoundID);

	mov	eax, DWORD PTR _SoundID$[ebp]

; 442  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_F4LoadSound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\fsound.cpp
_TEXT	SEGMENT
_SoundID$ = -4						; size = 4
_filename$ = 8						; size = 4
_Flags$ = 12						; size = 4
_sfx$ = 16						; size = 4
_F4LoadFXSound PROC

; 445  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 446  : 	int SoundID=SND_NO_HANDLE;

	mov	DWORD PTR _SoundID$[ebp], 0

; 447  : 
; 448  : 	if (gSoundDriver)

	cmp	DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A, 0 ; gSoundDriver
	je	SHORT $LN1@F4LoadFXSo

; 449  : 		SoundID=gSoundDriver->LoadWaveFile(filename,Flags, sfx);

	mov	eax, DWORD PTR _sfx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _filename$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?gSoundDriver@@3PAVCSoundMgr@@A ; gSoundDriver
	call	?LoadWaveFile@CSoundMgr@@QAEJPADJPAUSfxDef@@@Z ; CSoundMgr::LoadWaveFile
	mov	DWORD PTR _SoundID$[ebp], eax
$LN1@F4LoadFXSo:

; 450  : 
; 451  : 	return(SoundID);

	mov	eax, DWORD PTR _SoundID$[ebp]

; 452  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_F4LoadFXSound ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?atan@@YAMM@Z PROC					; atan, COMDAT

; 505  :         {return (atanf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atanf
	add	esp, 4
	pop	ebp
	ret	0
?atan@@YAMM@Z ENDP					; atan
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?acos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?acos@@YAMM@Z PROC					; acos, COMDAT

; 501  :         {return (acosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_acosf
	add	esp, 4
	pop	ebp
	ret	0
?acos@@YAMM@Z ENDP					; acos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 404  :         {return ((float)atan((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_atanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _acosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 400  :         {return ((float)acos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_acos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_acosf	ENDP
_TEXT	ENDS
END
