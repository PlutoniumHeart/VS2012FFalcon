; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\CAMPAIGN\CAMPTASK\Navunit.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
PUBLIC	??0VU_SESSION_ID@@QAE@K@Z			; VU_SESSION_ID::VU_SESSION_ID
PUBLIC	??0VU_ID@@QAE@XZ				; VU_ID::VU_ID
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0logic_error@std@@QAE@PBD@Z			; std::logic_error::logic_error
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
PUBLIC	??1out_of_range@std@@UAE@XZ			; std::out_of_range::~out_of_range
PUBLIC	??0out_of_range@std@@QAE@ABV01@@Z		; std::out_of_range::out_of_range
PUBLIC	??_Gout_of_range@std@@UAEPAXI@Z			; std::out_of_range::`scalar deleting destructor'
PUBLIC	?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ	; VuBin<VuEntity>::get
PUBLIC	?IsSimBase@FalconEntity@@UAE_NXZ		; FalconEntity::IsSimBase
PUBLIC	?CombatClass@FalconEntity@@UAEHXZ		; FalconEntity::CombatClass
PUBLIC	?IsMissile@FalconEntity@@UAEHXZ			; FalconEntity::IsMissile
PUBLIC	?IsLauncher@FalconEntity@@UAEHXZ		; FalconEntity::IsLauncher
PUBLIC	?IsBomb@FalconEntity@@UAEHXZ			; FalconEntity::IsBomb
PUBLIC	?IsGun@FalconEntity@@UAEHXZ			; FalconEntity::IsGun
PUBLIC	?IsMover@FalconEntity@@UAEHXZ			; FalconEntity::IsMover
PUBLIC	?IsVehicle@FalconEntity@@UAEHXZ			; FalconEntity::IsVehicle
PUBLIC	?IsStatic@FalconEntity@@UAEHXZ			; FalconEntity::IsStatic
PUBLIC	?IsHelicopter@FalconEntity@@UAEHXZ		; FalconEntity::IsHelicopter
PUBLIC	?IsEject@FalconEntity@@UAEHXZ			; FalconEntity::IsEject
PUBLIC	?IsAirplane@FalconEntity@@UAEHXZ		; FalconEntity::IsAirplane
PUBLIC	?IsGroundVehicle@FalconEntity@@UAEHXZ		; FalconEntity::IsGroundVehicle
PUBLIC	?IsShip@FalconEntity@@UAEHXZ			; FalconEntity::IsShip
PUBLIC	?IsWeapon@FalconEntity@@UAEHXZ			; FalconEntity::IsWeapon
PUBLIC	?IsExploding@FalconEntity@@UAEHXZ		; FalconEntity::IsExploding
PUBLIC	?IsDead@FalconEntity@@UAEHXZ			; FalconEntity::IsDead
PUBLIC	?GetMovementType@FalconEntity@@UAE?AW4MoveType@@XZ ; FalconEntity::GetMovementType
PUBLIC	?IsObjective@FalconEntity@@UAEHXZ		; FalconEntity::IsObjective
PUBLIC	?IsBattalion@FalconEntity@@UAEHXZ		; FalconEntity::IsBattalion
PUBLIC	?IsBrigade@FalconEntity@@UAEHXZ			; FalconEntity::IsBrigade
PUBLIC	?IsFlight@FalconEntity@@UBEHXZ			; FalconEntity::IsFlight
PUBLIC	?IsSquadron@FalconEntity@@UAEHXZ		; FalconEntity::IsSquadron
PUBLIC	?IsPackage@FalconEntity@@UAEHXZ			; FalconEntity::IsPackage
PUBLIC	?IsTeam@FalconEntity@@UAEHXZ			; FalconEntity::IsTeam
PUBLIC	?IsSPJamming@FalconEntity@@UAEHXZ		; FalconEntity::IsSPJamming
PUBLIC	?IsAreaJamming@FalconEntity@@UAEHXZ		; FalconEntity::IsAreaJamming
PUBLIC	?HasSPJamming@FalconEntity@@UAEHXZ		; FalconEntity::HasSPJamming
PUBLIC	?HasAreaJamming@FalconEntity@@UAEHXZ		; FalconEntity::HasAreaJamming
PUBLIC	?mlSinCos@@YAXPAUmlTrig@@M@Z			; mlSinCos
PUBLIC	?checked_atan2@@YANNN@Z				; checked_atan2
PUBLIC	??1SmallPathClass@@QAE@XZ			; SmallPathClass::~SmallPathClass
PUBLIC	?SetWPFlags@WayPointClass@@QAEXK@Z		; WayPointClass::SetWPFlags
PUBLIC	?GetWPFlags@WayPointClass@@QAEKXZ		; WayPointClass::GetWPFlags
PUBLIC	?GetNextWP@WayPointClass@@QAEPAV1@XZ		; WayPointClass::GetNextWP
PUBLIC	?GetPrevWP@WayPointClass@@QAEPAV1@XZ		; WayPointClass::GetPrevWP
PUBLIC	?GetWPDepartureTime@WayPointClass@@QAEKXZ	; WayPointClass::GetWPDepartureTime
PUBLIC	?GetWPLocation@WayPointClass@@QBEXPAF0@Z	; WayPointClass::GetWPLocation
PUBLIC	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
PUBLIC	??1InvalidBufferException@@UAE@XZ		; InvalidBufferException::~InvalidBufferException
PUBLIC	??0InvalidBufferException@@QAE@ABV0@@Z		; InvalidBufferException::InvalidBufferException
PUBLIC	??_GInvalidBufferException@@UAEPAXI@Z		; InvalidBufferException::`scalar deleting destructor'
PUBLIC	?memcpychk@@YAXPAXPAPAEIPAJ@Z			; memcpychk
PUBLIC	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
PUBLIC	?GetCampID@CampBaseClass@@UAEFXZ		; CampBaseClass::GetCampID
PUBLIC	?GetTeam@CampBaseClass@@UAEEXZ			; CampBaseClass::GetTeam
PUBLIC	?GetCountry@CampBaseClass@@UAEEXZ		; CampBaseClass::GetCountry
PUBLIC	?GetOwner@CampBaseClass@@QAEEXZ			; CampBaseClass::GetOwner
PUBLIC	?IsCampBase@CampBaseClass@@UAE_NXZ		; CampBaseClass::IsCampBase
PUBLIC	?IsEmitting@CampBaseClass@@UAEHXZ		; CampBaseClass::IsEmitting
PUBLIC	?IsChecked@CampBaseClass@@QAEHXZ		; CampBaseClass::IsChecked
PUBLIC	?IsAwake@CampBaseClass@@QAEHXZ			; CampBaseClass::IsAwake
PUBLIC	?IsAggregate@CampBaseClass@@QAEHXZ		; CampBaseClass::IsAggregate
PUBLIC	?HasEntity@CampBaseClass@@UBEHPAVVuEntity@@@Z	; CampBaseClass::HasEntity
PUBLIC	?GetType@CampBaseClass@@QBEEXZ			; CampBaseClass::GetType
PUBLIC	?GetSType@CampBaseClass@@QBEEXZ			; CampBaseClass::GetSType
PUBLIC	?SetChecked@CampBaseClass@@QAEXXZ		; CampBaseClass::SetChecked
PUBLIC	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
PUBLIC	?CampEnterCriticalSection@@YAXXZ		; CampEnterCriticalSection
PUBLIC	?CampLeaveCriticalSection@@YAXXZ		; CampLeaveCriticalSection
PUBLIC	?GetUnitDeaggregationData@UnitClass@@UAEPAVUnitDeaggregationData@@XZ ; UnitClass::GetUnitDeaggregationData
PUBLIC	?ShouldDeaggregate@UnitClass@@UAEHXZ		; UnitClass::ShouldDeaggregate
PUBLIC	?ClearDeaggregationData@UnitClass@@UAEXXZ	; UnitClass::ClearDeaggregationData
PUBLIC	?Father@UnitClass@@UBEHXZ			; UnitClass::Father
PUBLIC	?AdjustForSupply@UnitClass@@UAEMXZ		; UnitClass::AdjustForSupply
PUBLIC	?GetUnitSupplyNeed@UnitClass@@UAEHH@Z		; UnitClass::GetUnitSupplyNeed
PUBLIC	?GetUnitFuelNeed@UnitClass@@UAEHH@Z		; UnitClass::GetUnitFuelNeed
PUBLIC	?SupplyUnit@UnitClass@@UAEXHH@Z			; UnitClass::SupplyUnit
PUBLIC	?IsUnit@UnitClass@@UAEHXZ			; UnitClass::IsUnit
PUBLIC	?IsDead@UnitClass@@UBEHXZ			; UnitClass::IsDead
PUBLIC	?Parent@UnitClass@@QBEHXZ			; UnitClass::Parent
PUBLIC	?Engaged@UnitClass@@QBEHXZ			; UnitClass::Engaged
PUBLIC	?Moving@UnitClass@@QBEHXZ			; UnitClass::Moving
PUBLIC	?Combat@UnitClass@@QBEHXZ			; UnitClass::Combat
PUBLIC	?Targeted@UnitClass@@QBEHXZ			; UnitClass::Targeted
PUBLIC	?SimSetLocation@UnitClass@@UAEXMMM@Z		; UnitClass::SimSetLocation
PUBLIC	?SimSetOrientation@UnitClass@@UAEXMMM@Z		; UnitClass::SimSetOrientation
PUBLIC	?SetTarget@UnitClass@@QAEXPAVFalconEntity@@@Z	; UnitClass::SetTarget
PUBLIC	?GetNumVehicles@UnitClass@@QAEHH@Z		; UnitClass::GetNumVehicles
PUBLIC	?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ	; UnitClass::GetTarget
PUBLIC	?GetUnitMoved@UnitClass@@QBEHXZ			; UnitClass::GetUnitMoved
PUBLIC	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
PUBLIC	?SetBurntFuel@UnitClass@@UAEXJ@Z		; UnitClass::SetBurntFuel
PUBLIC	?SetUnitMission@UnitClass@@UAEXE@Z		; UnitClass::SetUnitMission
PUBLIC	?SetUnitRole@UnitClass@@UAEXE@Z			; UnitClass::SetUnitRole
PUBLIC	?SetUnitPriority@UnitClass@@UAEXH@Z		; UnitClass::SetUnitPriority
PUBLIC	?SetUnitMissionID@UnitClass@@UAEXH@Z		; UnitClass::SetUnitMissionID
PUBLIC	?SetUnitMissionTarget@UnitClass@@UAEXH@Z	; UnitClass::SetUnitMissionTarget
PUBLIC	?SetUnitTOT@UnitClass@@UAEXK@Z			; UnitClass::SetUnitTOT
PUBLIC	?SetUnitSquadron@UnitClass@@UAEXVVU_ID@@@Z	; UnitClass::SetUnitSquadron
PUBLIC	?SetUnitAirbase@UnitClass@@UAEXVVU_ID@@@Z	; UnitClass::SetUnitAirbase
PUBLIC	?SetLoadout@UnitClass@@UAEXPAULoadoutStruct@@H@Z ; UnitClass::SetLoadout
PUBLIC	?GetNumberOfLoadouts@UnitClass@@UAEHXZ		; UnitClass::GetNumberOfLoadouts
PUBLIC	?GetBurntFuel@UnitClass@@UAEHXZ			; UnitClass::GetBurntFuel
PUBLIC	?GetUnitMission@UnitClass@@UAE?AW4MissionTypeEnum@@XZ ; UnitClass::GetUnitMission
PUBLIC	?GetUnitNormalRole@UnitClass@@UAEHXZ		; UnitClass::GetUnitNormalRole
PUBLIC	?GetUnitCurrentRole@UnitClass@@UBEHXZ		; UnitClass::GetUnitCurrentRole
PUBLIC	?GetUnitPriority@UnitClass@@UAEHXZ		; UnitClass::GetUnitPriority
PUBLIC	?GetUnitMissionTarget@UnitClass@@UAEPAVCampBaseClass@@XZ ; UnitClass::GetUnitMissionTarget
PUBLIC	?GetUnitMissionTargetID@UnitClass@@UAE?AVVU_ID@@XZ ; UnitClass::GetUnitMissionTargetID
PUBLIC	?GetUnitMissionID@UnitClass@@UAEHXZ		; UnitClass::GetUnitMissionID
PUBLIC	?GetUnitTOT@UnitClass@@UAEKXZ			; UnitClass::GetUnitTOT
PUBLIC	?GetUnitSquadron@UnitClass@@UAEPAV1@XZ		; UnitClass::GetUnitSquadron
PUBLIC	?GetUnitSquadronID@UnitClass@@UAE?AVVU_ID@@XZ	; UnitClass::GetUnitSquadronID
PUBLIC	?GetUnitAirbase@UnitClass@@UAEPAVCampBaseClass@@XZ ; UnitClass::GetUnitAirbase
PUBLIC	?GetUnitAirbaseID@UnitClass@@UAE?AVVU_ID@@XZ	; UnitClass::GetUnitAirbaseID
PUBLIC	?LoadWeapons@UnitClass@@UAEHPAXPAEW4MoveType@@HHH@Z ; UnitClass::LoadWeapons
PUBLIC	?DumpWeapons@UnitClass@@UAEHXZ			; UnitClass::DumpWeapons
PUBLIC	?ETA@UnitClass@@UAEKXZ				; UnitClass::ETA
PUBLIC	?GetKnownEmitters@UnitClass@@UAEPAVFalconPrivateList@@XZ ; UnitClass::GetKnownEmitters
PUBLIC	?BuildMission@UnitClass@@UAEHPAVMissionRequestClass@@@Z ; UnitClass::BuildMission
PUBLIC	?UseFuel@UnitClass@@UAEXJ@Z			; UnitClass::UseFuel
PUBLIC	?SetUnitSpecialty@UnitClass@@UAEXH@Z		; UnitClass::SetUnitSpecialty
PUBLIC	?SetUnitSupply@UnitClass@@UAEXH@Z		; UnitClass::SetUnitSupply
PUBLIC	?SetUnitMorale@UnitClass@@UAEXH@Z		; UnitClass::SetUnitMorale
PUBLIC	?SetSquadronFuel@UnitClass@@UAEXJ@Z		; UnitClass::SetSquadronFuel
PUBLIC	?SetUnitStores@UnitClass@@UAEXHE@Z		; UnitClass::SetUnitStores
PUBLIC	?SetLastResupply@UnitClass@@UAEXH@Z		; UnitClass::SetLastResupply
PUBLIC	?SetLastResupplyTime@UnitClass@@UAEXK@Z		; UnitClass::SetLastResupplyTime
PUBLIC	?GetUnitSpecialty@UnitClass@@UAEHXZ		; UnitClass::GetUnitSpecialty
PUBLIC	?GetUnitMorale@UnitClass@@UAEHXZ		; UnitClass::GetUnitMorale
PUBLIC	?GetSquadronFuel@UnitClass@@UAEJXZ		; UnitClass::GetSquadronFuel
PUBLIC	?GetUnitStores@UnitClass@@UAEEH@Z		; UnitClass::GetUnitStores
PUBLIC	?GetLastResupplyTime@UnitClass@@UAEKXZ		; UnitClass::GetLastResupplyTime
PUBLIC	?GetLastResupply@UnitClass@@UAEHXZ		; UnitClass::GetLastResupply
PUBLIC	?BuildPackage@UnitClass@@UAEHPAVMissionRequestClass@@PAVFalconPrivateList@@@Z ; UnitClass::BuildPackage
PUBLIC	?HandleRequestReceipt@UnitClass@@UAEXHHVVU_ID@@@Z ; UnitClass::HandleRequestReceipt
PUBLIC	?SetUnitAssemblyPoint@UnitClass@@UAEXHFF@Z	; UnitClass::SetUnitAssemblyPoint
PUBLIC	?GetUnitAssemblyPoint@UnitClass@@UAEXHPAF0@Z	; UnitClass::GetUnitAssemblyPoint
PUBLIC	?SetUnitPrimaryObj@UnitClass@@UAEXVVU_ID@@@Z	; UnitClass::SetUnitPrimaryObj
PUBLIC	?SetUnitSecondaryObj@UnitClass@@UAEXVVU_ID@@@Z	; UnitClass::SetUnitSecondaryObj
PUBLIC	?SetUnitObjective@UnitClass@@UAEXVVU_ID@@@Z	; UnitClass::SetUnitObjective
PUBLIC	?SetUnitOrders@UnitClass@@UAEXH@Z		; UnitClass::SetUnitOrders
PUBLIC	?SetUnitOrders@UnitClass@@UAEXHVVU_ID@@@Z	; UnitClass::SetUnitOrders
PUBLIC	?SetUnitFatigue@UnitClass@@UAEXH@Z		; UnitClass::SetUnitFatigue
PUBLIC	?SetUnitMode@UnitClass@@UAEXH@Z			; UnitClass::SetUnitMode
PUBLIC	?SetUnitPosition@UnitClass@@UAEXH@Z		; UnitClass::SetUnitPosition
PUBLIC	?SetUnitDivision@UnitClass@@UAEXH@Z		; UnitClass::SetUnitDivision
PUBLIC	?SetUnitHeading@UnitClass@@UAEXH@Z		; UnitClass::SetUnitHeading
PUBLIC	?GetUnitPrimaryObj@UnitClass@@UAEPAVObjectiveClass@@XZ ; UnitClass::GetUnitPrimaryObj
PUBLIC	?GetUnitSecondaryObj@UnitClass@@UAEPAVObjectiveClass@@XZ ; UnitClass::GetUnitSecondaryObj
PUBLIC	?GetUnitObjective@UnitClass@@UAEPAVObjectiveClass@@XZ ; UnitClass::GetUnitObjective
PUBLIC	?GetUnitPrimaryObjID@UnitClass@@UAE?AVVU_ID@@XZ	; UnitClass::GetUnitPrimaryObjID
PUBLIC	?GetUnitSecondaryObjID@UnitClass@@UAE?AVVU_ID@@XZ ; UnitClass::GetUnitSecondaryObjID
PUBLIC	?GetUnitObjectiveID@UnitClass@@UAE?AVVU_ID@@XZ	; UnitClass::GetUnitObjectiveID
PUBLIC	?GetUnitFatigue@UnitClass@@UAEHXZ		; UnitClass::GetUnitFatigue
PUBLIC	?GetUnitElement@UnitClass@@UAEHXZ		; UnitClass::GetUnitElement
PUBLIC	?GetUnitMode@UnitClass@@UAEHXZ			; UnitClass::GetUnitMode
PUBLIC	?GetUnitPosition@UnitClass@@UAEHXZ		; UnitClass::GetUnitPosition
PUBLIC	?GetUnitDivision@UnitClass@@UAEHXZ		; UnitClass::GetUnitDivision
PUBLIC	?GetUnitHeading@UnitClass@@UAEHXZ		; UnitClass::GetUnitHeading
PUBLIC	?SetUnitCurrentDestination@UnitClass@@UAEXFF@Z	; UnitClass::SetUnitCurrentDestination
PUBLIC	?GetUnitCurrentDestination@UnitClass@@UAEXPAF0@Z ; UnitClass::GetUnitCurrentDestination
PUBLIC	?GetObjMovementType@UnitClass@@UAE?AW4MoveType@@PAVObjectiveClass@@H@Z ; UnitClass::GetObjMovementType
PUBLIC	?CheckForSurrender@UnitClass@@UAEHXZ		; UnitClass::CheckForSurrender
PUBLIC	?BuildMission@UnitClass@@UAEHXZ			; UnitClass::BuildMission
PUBLIC	?RallyUnit@UnitClass@@UAEHH@Z			; UnitClass::RallyUnit
PUBLIC	?GetUnitParent@UnitClass@@UBEPAV1@XZ		; UnitClass::GetUnitParent
PUBLIC	?GetUnitParentID@UnitClass@@UAE?AVVU_ID@@XZ	; UnitClass::GetUnitParentID
PUBLIC	?SetUnitParent@UnitClass@@UAEXPAV1@@Z		; UnitClass::SetUnitParent
PUBLIC	?GetFirstUnitElement@UnitClass@@UBEPAV1@XZ	; UnitClass::GetFirstUnitElement
PUBLIC	?GetNextUnitElement@UnitClass@@UBEPAV1@XZ	; UnitClass::GetNextUnitElement
PUBLIC	?GetUnitElement@UnitClass@@UAEPAV1@H@Z		; UnitClass::GetUnitElement
PUBLIC	?GetUnitElementByID@UnitClass@@UAEPAV1@H@Z	; UnitClass::GetUnitElementByID
PUBLIC	?GetPrevUnitElement@UnitClass@@UAEPAV1@PAV1@@Z	; UnitClass::GetPrevUnitElement
PUBLIC	?AddUnitChild@UnitClass@@UAEXPAV1@@Z		; UnitClass::AddUnitChild
PUBLIC	?DisposeChildren@UnitClass@@UAEXXZ		; UnitClass::DisposeChildren
PUBLIC	?RemoveChild@UnitClass@@UAEXVVU_ID@@@Z		; UnitClass::RemoveChild
PUBLIC	?ReorganizeUnit@UnitClass@@UAEXXZ		; UnitClass::ReorganizeUnit
PUBLIC	?UpdateParentStatistics@UnitClass@@UAEHXZ	; UnitClass::UpdateParentStatistics
PUBLIC	??0TaskForceClass@@QAE@G@Z			; TaskForceClass::TaskForceClass
PUBLIC	??0TaskForceClass@@QAE@PAPAEPAJ@Z		; TaskForceClass::TaskForceClass
PUBLIC	??1TaskForceClass@@UAE@XZ			; TaskForceClass::~TaskForceClass
PUBLIC	?SaveSize@TaskForceClass@@UAEHXZ		; TaskForceClass::SaveSize
PUBLIC	?Save@TaskForceClass@@UAEHPAPAE@Z		; TaskForceClass::Save
PUBLIC	?Handle@TaskForceClass@@UAEHPAVVuFullUpdateEvent@@@Z ; TaskForceClass::Handle
PUBLIC	?GetVt@TaskForceClass@@UBEMXZ			; TaskForceClass::GetVt
PUBLIC	?GetKias@TaskForceClass@@UBEMXZ			; TaskForceClass::GetKias
PUBLIC	?DetectOnMove@TaskForceClass@@UAEHXZ		; TaskForceClass::DetectOnMove
PUBLIC	?GetMovementType@TaskForceClass@@UAE?AW4MoveType@@XZ ; TaskForceClass::GetMovementType
PUBLIC	?Reaction@TaskForceClass@@UAEHPAVCampBaseClass@@HM@Z ; TaskForceClass::Reaction
PUBLIC	?MoveUnit@TaskForceClass@@UAEHK@Z		; TaskForceClass::MoveUnit
PUBLIC	?DoCombat@TaskForceClass@@UAEHXZ		; TaskForceClass::DoCombat
PUBLIC	?ChooseTactic@TaskForceClass@@UAEHXZ		; TaskForceClass::ChooseTactic
PUBLIC	?CheckTactic@TaskForceClass@@UAEHH@Z		; TaskForceClass::CheckTactic
PUBLIC	?Real@TaskForceClass@@UAEHXZ			; TaskForceClass::Real
PUBLIC	?GetUnitSpeed@TaskForceClass@@UBEHXZ		; TaskForceClass::GetUnitSpeed
PUBLIC	?GetAirTargetID@TaskForceClass@@UAE?AVVU_ID@@XZ	; TaskForceClass::GetAirTargetID
PUBLIC	?GetAirTarget@TaskForceClass@@UAEPAVFalconEntity@@XZ ; TaskForceClass::GetAirTarget
PUBLIC	?SetAirTarget@TaskForceClass@@UAEXPAVFalconEntity@@@Z ; TaskForceClass::SetAirTarget
PUBLIC	?MaxUpdateTime@TaskForceClass@@UBEKXZ		; TaskForceClass::MaxUpdateTime
PUBLIC	?CombatTime@TaskForceClass@@UAEKXZ		; TaskForceClass::CombatTime
PUBLIC	?IsTaskForce@TaskForceClass@@UAEHXZ		; TaskForceClass::IsTaskForce
PUBLIC	?OnGround@TaskForceClass@@UAEHXZ		; TaskForceClass::OnGround
PUBLIC	?GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z ; TaskForceClass::GetVehicleDeagData
PUBLIC	?GetDeaggregationPoint@TaskForceClass@@UAEHHPAPAVCampBaseClass@@@Z ; TaskForceClass::GetDeaggregationPoint
PUBLIC	?SetUnitOrders@TaskForceClass@@UAEXE@Z		; TaskForceClass::SetUnitOrders
PUBLIC	?SetUnitSupply@TaskForceClass@@UAEXE@Z		; TaskForceClass::SetUnitSupply
PUBLIC	?SetUnitNextMove@TaskForceClass@@UAEXXZ		; TaskForceClass::SetUnitNextMove
PUBLIC	?ClearUnitPath@TaskForceClass@@UAEXXZ		; TaskForceClass::ClearUnitPath
PUBLIC	?GetNextMoveDirection@TaskForceClass@@UAEHXZ	; TaskForceClass::GetNextMoveDirection
PUBLIC	?GetUnitOrders@TaskForceClass@@UAEHXZ		; TaskForceClass::GetUnitOrders
PUBLIC	?GetUnitSupply@TaskForceClass@@UAEHXZ		; TaskForceClass::GetUnitSupply
PUBLIC	?GetMoveTime@TaskForceClass@@UAEKXZ		; TaskForceClass::GetMoveTime
PUBLIC	?SetCombatTime@TaskForceClass@@UAEXK@Z		; TaskForceClass::SetCombatTime
PUBLIC	?GetCombatTime@TaskForceClass@@UAEKXZ		; TaskForceClass::GetCombatTime
PUBLIC	?GetRealPosition@TaskForceClass@@UAEXPAM00@Z	; TaskForceClass::GetRealPosition
PUBLIC	?CanShootWeapon@TaskForceClass@@UAEHH@Z		; TaskForceClass::CanShootWeapon
PUBLIC	?GetRadarMode@TaskForceClass@@UAEHXZ		; TaskForceClass::GetRadarMode
PUBLIC	?SetRadarMode@TaskForceClass@@UAEXE@Z		; TaskForceClass::SetRadarMode
PUBLIC	?ReturnToSearch@TaskForceClass@@UAEXXZ		; TaskForceClass::ReturnToSearch
PUBLIC	?SetSearchMode@TaskForceClass@@UAEXE@Z		; TaskForceClass::SetSearchMode
PUBLIC	?StepRadar@TaskForceClass@@UAEHHHM@Z		; TaskForceClass::StepRadar
PUBLIC	?ChooseTarget@TaskForceClass@@UAEHXZ		; TaskForceClass::ChooseTarget
PUBLIC	?IncrementTime@TaskForceClass@@UAEXK@Z		; TaskForceClass::IncrementTime
PUBLIC	?SetUnitLastMove@TaskForceClass@@UAEXK@Z	; TaskForceClass::SetUnitLastMove
PUBLIC	?DetectVs@TaskForceClass@@QAEHPAVAircraftClass@@PAMPAH2@Z ; TaskForceClass::DetectVs
PUBLIC	?DetectVs@TaskForceClass@@QAEHPAVCampBaseClass@@PAMPAH2@Z ; TaskForceClass::DetectVs
PUBLIC	?GetMissilesFlying@TaskForceClass@@UAEHXZ	; TaskForceClass::GetMissilesFlying
PUBLIC	?SetAQUIREtimer@TaskForceClass@@UAEXK@Z		; TaskForceClass::SetAQUIREtimer
PUBLIC	?SetSEARCHtimer@TaskForceClass@@UAEXK@Z		; TaskForceClass::SetSEARCHtimer
PUBLIC	?SetStepSearchMode@TaskForceClass@@UAEXE@Z	; TaskForceClass::SetStepSearchMode
PUBLIC	?GetAQUIREtimer@TaskForceClass@@UAEKXZ		; TaskForceClass::GetAQUIREtimer
PUBLIC	?GetSEARCHtimer@TaskForceClass@@UAEKXZ		; TaskForceClass::GetSEARCHtimer
PUBLIC	??_GTaskForceClass@@UAEPAXI@Z			; TaskForceClass::`scalar deleting destructor'
PUBLIC	?NewTaskForce@@YAPAVTaskForceClass@@H@Z		; NewTaskForce
PUBLIC	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
PUBLIC	?ResetCurrentWP@@YAPAVWayPointClass@@PAVTaskForceClass@@@Z ; ResetCurrentWP
PUBLIC	?DoWPAction@@YAPAVWayPointClass@@PAVTaskForceClass@@PAV1@@Z ; DoWPAction
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_7out_of_range@std@@6B@			; std::out_of_range::`vftable'
PUBLIC	??_7InvalidBufferException@@6B@			; InvalidBufferException::`vftable'
PUBLIC	??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ ; `string'
PUBLIC	__TI4?AVInvalidBufferException@@
PUBLIC	__CTA4?AVInvalidBufferException@@
PUBLIC	??_R0?AVInvalidBufferException@@@8		; InvalidBufferException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_7TaskForceClass@@6B@				; TaskForceClass::`vftable'
PUBLIC	??_C@_0BF@NFLOHBN@?$CF08x?5TaskForceClass?5?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4out_of_range@std@@6B@			; std::out_of_range::`RTTI Complete Object Locator'
PUBLIC	??_R3out_of_range@std@@8			; std::out_of_range::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2out_of_range@std@@8			; std::out_of_range::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@out_of_range@std@@8		; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InvalidBufferException@@6B@		; InvalidBufferException::`RTTI Complete Object Locator'
PUBLIC	??_R3InvalidBufferException@@8			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InvalidBufferException@@8			; InvalidBufferException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InvalidBufferException@@8		; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4TaskForceClass@@6B@			; TaskForceClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTaskForceClass@@@8			; TaskForceClass `RTTI Type Descriptor'
PUBLIC	??_R3TaskForceClass@@8				; TaskForceClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TaskForceClass@@8				; TaskForceClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TaskForceClass@@8			; TaskForceClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@UnitClass@@8			; UnitClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVUnitClass@@@8				; UnitClass `RTTI Type Descriptor'
PUBLIC	??_R3UnitClass@@8				; UnitClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UnitClass@@8				; UnitClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CampBaseClass@@8			; CampBaseClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCampBaseClass@@@8			; CampBaseClass `RTTI Type Descriptor'
PUBLIC	??_R3CampBaseClass@@8				; CampBaseClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CampBaseClass@@8				; CampBaseClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FalconEntity@@8			; FalconEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVFalconEntity@@@8			; FalconEntity `RTTI Type Descriptor'
PUBLIC	??_R3FalconEntity@@8				; FalconEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FalconEntity@@8				; FalconEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VuEntity@@8			; VuEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVVuEntity@@@8				; VuEntity `RTTI Type Descriptor'
PUBLIC	??_R3VuEntity@@8				; VuEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VuEntity@@8				; VuEntity::`RTTI Base Class Array'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3c8efa34
PUBLIC	__real@3f17ac60
PUBLIC	__real@3f693e32
PUBLIC	__real@3f800000
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@40000000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@41f00000
PUBLIC	__real@42340000
PUBLIC	__real@42c80000
PUBLIC	__real@447a0000
PUBLIC	__real@44bb8000
PUBLIC	__real@45bb8000
PUBLIC	__real@461c3c00
PUBLIC	__real@7f7fffff
PUBLIC	__real@8000000000000000
PUBLIC	__real@bff921fb54442d18
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_fflush:PROC
EXTRN	_fprintf:PROC
EXTRN	_sprintf:PROC
EXTRN	_rand:PROC
EXTRN	_atan:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?SetPosition@VuEntity@@QAEXMMM@Z:PROC		; VuEntity::SetPosition
EXTRN	?CustomCollisionCheck@VuEntity@@UAEEPAV1@M@Z:PROC ; VuEntity::CustomCollisionCheck
EXTRN	?TerrainCollisionCheck@VuEntity@@UAEEXZ:PROC	; VuEntity::TerrainCollisionCheck
EXTRN	?IsTarget@VuEntity@@UAEEXZ:PROC			; VuEntity::IsTarget
EXTRN	?IsSession@VuEntity@@UAEEXZ:PROC		; VuEntity::IsSession
EXTRN	?IsGroup@VuEntity@@UAEEXZ:PROC			; VuEntity::IsGroup
EXTRN	?IsGame@VuEntity@@UAEEXZ:PROC			; VuEntity::IsGame
EXTRN	?IsCamera@VuEntity@@UBEEXZ:PROC			; VuEntity::IsCamera
EXTRN	?Handle@VuEntity@@UAEHPAVVuErrorMessage@@@Z:PROC ; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuPushRequest@@@Z:PROC	; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuPullRequest@@@Z:PROC	; VuEntity::Handle
EXTRN	?InsertionCallback@VuEntity@@MAEHXZ:PROC	; VuEntity::InsertionCallback
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Eout_of_range@std@@UAEPAXI@Z:PROC		; std::out_of_range::`vector deleting destructor'
EXTRN	?Find@VuCollection@@QBE_NPAVVuEntity@@@Z:PROC	; VuCollection::Find
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetFirst
EXTRN	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetNext
EXTRN	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z:PROC ; VuGridIterator::VuGridIterator
EXTRN	??1VuGridIterator@@UAE@XZ:PROC			; VuGridIterator::~VuGridIterator
EXTRN	?GetFirst@VuGridIterator@@QAEPAVVuEntity@@XZ:PROC ; VuGridIterator::GetFirst
EXTRN	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ:PROC ; VuGridIterator::GetNext
EXTRN	?Save@FalconEntity@@UAEHPAU_iobuf@@@Z:PROC	; FalconEntity::Save
EXTRN	?CleanupData@FalconEntity@@UAEXXZ:PROC		; FalconEntity::CleanupData
EXTRN	?RemovalCallback@FalconEntity@@UAEHXZ:PROC	; FalconEntity::RemovalCallback
EXTRN	?GetDomain@FalconEntity@@UAEEXZ:PROC		; FalconEntity::GetDomain
EXTRN	?GetLocation@FalconEntity@@QBEXPAF0@Z:PROC	; FalconEntity::GetLocation
EXTRN	?Camp_GetCurrentTime@@YAKXZ:PROC		; Camp_GetCurrentTime
EXTRN	?GetCover@@YA?AW4CoverType@@FF@Z:PROC		; GetCover
EXTRN	_F4EnterCriticalSection:PROC
EXTRN	_F4LeaveCriticalSection:PROC
EXTRN	??1BasePathClass@@QAE@XZ:PROC			; BasePathClass::~BasePathClass
EXTRN	?GetNextDirection@BasePathClass@@QAEHXZ:PROC	; BasePathClass::GetNextDirection
EXTRN	?StepPath@BasePathClass@@QAEXXZ:PROC		; BasePathClass::StepPath
EXTRN	?ClearPath@BasePathClass@@QAEXXZ:PROC		; BasePathClass::ClearPath
EXTRN	??0SmallPathClass@@QAE@XZ:PROC			; SmallPathClass::SmallPathClass
EXTRN	?CloneWPToList@@YAPAVWayPointClass@@PAV1@0@Z:PROC ; CloneWPToList
EXTRN	??_EInvalidBufferException@@UAEPAXI@Z:PROC	; InvalidBufferException::`vector deleting destructor'
EXTRN	?GetIdFromNamespace@@YAKAAVIdNamespace@@@Z:PROC	; GetIdFromNamespace
EXTRN	?GetTeam@@YAEE@Z:PROC				; GetTeam
EXTRN	?SetOwner@CampBaseClass@@UAEXE@Z:PROC		; CampBaseClass::SetOwner
EXTRN	?MakeCampBaseDirty@CampBaseClass@@QAEXW4Dirty_Campaign_Base@@W4Dirtyness@@@Z:PROC ; CampBaseClass::MakeCampBaseDirty
EXTRN	?InitData@CampBaseClass@@UAEXXZ:PROC		; CampBaseClass::InitData
EXTRN	?Handle@CampBaseClass@@UAEHPAVVuEvent@@@Z:PROC	; CampBaseClass::Handle
EXTRN	?Handle@CampBaseClass@@UAEHPAVVuPositionUpdateEvent@@@Z:PROC ; CampBaseClass::Handle
EXTRN	?Handle@CampBaseClass@@UAEHPAVVuEntityCollisionEvent@@@Z:PROC ; CampBaseClass::Handle
EXTRN	?Handle@CampBaseClass@@UAEHPAVVuTransferEvent@@@Z:PROC ; CampBaseClass::Handle
EXTRN	?Handle@CampBaseClass@@UAEHPAVVuSessionEvent@@@Z:PROC ; CampBaseClass::Handle
EXTRN	?GetSpotted@CampBaseClass@@QAEHE@Z:PROC		; CampBaseClass::GetSpotted
EXTRN	?SetSpotted@CampBaseClass@@QAEXEKH@Z:PROC	; CampBaseClass::SetSpotted
EXTRN	?SetEmitting@CampBaseClass@@QAEXH@Z:PROC	; CampBaseClass::SetEmitting
EXTRN	?SetTacan@CampBaseClass@@QAEXH@Z:PROC		; CampBaseClass::SetTacan
EXTRN	?GetObjectiveClassData@ObjectiveClass@@QAEPAUObjClassDataType@@XZ:PROC ; ObjectiveClass::GetObjectiveClassData
EXTRN	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z:PROC ; GetVehicleClassData
EXTRN	?SetCurrentWaypoint@UnitClass@@QAEXG@Z:PROC	; UnitClass::SetCurrentWaypoint
EXTRN	?SetOdds@UnitClass@@QAEXF@Z:PROC		; UnitClass::SetOdds
EXTRN	??0UnitClass@@QAE@GK@Z:PROC			; UnitClass::UnitClass
EXTRN	??0UnitClass@@QAE@PAPAEPAJ@Z:PROC		; UnitClass::UnitClass
EXTRN	??1UnitClass@@UAE@XZ:PROC			; UnitClass::~UnitClass
EXTRN	?SaveSize@UnitClass@@UAEHXZ:PROC		; UnitClass::SaveSize
EXTRN	?Save@UnitClass@@UAEHPAPAE@Z:PROC		; UnitClass::Save
EXTRN	?Handle@UnitClass@@UAEHPAVVuFullUpdateEvent@@@Z:PROC ; UnitClass::Handle
EXTRN	?SendDeaggregateData@UnitClass@@UAEXPAVVuTargetEntity@@@Z:PROC ; UnitClass::SendDeaggregateData
EXTRN	?RecordCurrentState@UnitClass@@UAEHPAVFalconSessionEntity@@H@Z:PROC ; UnitClass::RecordCurrentState
EXTRN	?Deaggregate@UnitClass@@UAEHPAVFalconSessionEntity@@@Z:PROC ; UnitClass::Deaggregate
EXTRN	?Reaggregate@UnitClass@@UAEHPAVFalconSessionEntity@@@Z:PROC ; UnitClass::Reaggregate
EXTRN	?TransferOwnership@UnitClass@@UAEHPAVFalconSessionEntity@@@Z:PROC ; UnitClass::TransferOwnership
EXTRN	?Wake@UnitClass@@UAEHXZ:PROC			; UnitClass::Wake
EXTRN	?Sleep@UnitClass@@UAEHXZ:PROC			; UnitClass::Sleep
EXTRN	?InsertInSimLists@UnitClass@@UAEXMM@Z:PROC	; UnitClass::InsertInSimLists
EXTRN	?RemoveFromSimLists@UnitClass@@UAEXXZ:PROC	; UnitClass::RemoveFromSimLists
EXTRN	?DeaggregateFromData@UnitClass@@UAEXPAEJ@Z:PROC	; UnitClass::DeaggregateFromData
EXTRN	?ReaggregateFromData@UnitClass@@UAEXPAEJ@Z:PROC	; UnitClass::ReaggregateFromData
EXTRN	?TransferOwnershipFromData@UnitClass@@UAEXPAEJ@Z:PROC ; UnitClass::TransferOwnershipFromData
EXTRN	?ResetPlayerStatus@UnitClass@@UAEHXZ:PROC	; UnitClass::ResetPlayerStatus
EXTRN	?ApplyDamage@UnitClass@@UAEHPAVFalconCampWeaponsFire@@E@Z:PROC ; UnitClass::ApplyDamage
EXTRN	?ApplyDamage@UnitClass@@UAEHW4DamageDataType@@PAHHF@Z:PROC ; UnitClass::ApplyDamage
EXTRN	?DecodeDamageData@UnitClass@@UAEHPAEPAV1@PAVFalconDeathMessage@@@Z:PROC ; UnitClass::DecodeDamageData
EXTRN	?CollectWeapons@UnitClass@@UAEHPAEW4MoveType@@QAFQAEH@Z:PROC ; UnitClass::CollectWeapons
EXTRN	?GetDamageModifiers@UnitClass@@UAEPAEXZ:PROC	; UnitClass::GetDamageModifiers
EXTRN	?GetName@UnitClass@@UAEPADPADHH@Z:PROC		; UnitClass::GetName
EXTRN	?GetFullName@UnitClass@@UAEPADPADHH@Z:PROC	; UnitClass::GetFullName
EXTRN	?GetDivisionName@UnitClass@@UAEPADPADHH@Z:PROC	; UnitClass::GetDivisionName
EXTRN	?GetHitChance@UnitClass@@UAEHHH@Z:PROC		; UnitClass::GetHitChance
EXTRN	?GetAproxHitChance@UnitClass@@UAEHHH@Z:PROC	; UnitClass::GetAproxHitChance
EXTRN	?GetCombatStrength@UnitClass@@UAEHHH@Z:PROC	; UnitClass::GetCombatStrength
EXTRN	?GetAproxCombatStrength@UnitClass@@UAEHHH@Z:PROC ; UnitClass::GetAproxCombatStrength
EXTRN	?GetWeaponRange@UnitClass@@UAEHHPAVFalconEntity@@@Z:PROC ; UnitClass::GetWeaponRange
EXTRN	?GetAproxWeaponRange@UnitClass@@UAEHH@Z:PROC	; UnitClass::GetAproxWeaponRange
EXTRN	?GetDetectionRange@UnitClass@@UAEHH@Z:PROC	; UnitClass::GetDetectionRange
EXTRN	?GetElectronicDetectionRange@UnitClass@@UAEHH@Z:PROC ; UnitClass::GetElectronicDetectionRange
EXTRN	?CanDetect@UnitClass@@UAEHPAVFalconEntity@@@Z:PROC ; UnitClass::CanDetect
EXTRN	?GetComponentLocation@UnitClass@@UAEXPAF0H@Z:PROC ; UnitClass::GetComponentLocation
EXTRN	?GetComponentAltitude@UnitClass@@UAEHH@Z:PROC	; UnitClass::GetComponentAltitude
EXTRN	?GetRCSFactor@UnitClass@@UAEMXZ:PROC		; UnitClass::GetRCSFactor
EXTRN	?GetIRFactor@UnitClass@@UAEMXZ:PROC		; UnitClass::GetIRFactor
EXTRN	?GetNumberOfArcs@UnitClass@@UAEHXZ:PROC		; UnitClass::GetNumberOfArcs
EXTRN	?GetArcRatio@UnitClass@@UAEMH@Z:PROC		; UnitClass::GetArcRatio
EXTRN	?GetArcRange@UnitClass@@UAEMH@Z:PROC		; UnitClass::GetArcRange
EXTRN	?GetArcAngle@UnitClass@@UAEXHPAM0@Z:PROC	; UnitClass::GetArcAngle
EXTRN	?GetRadarType@UnitClass@@UAEHXZ:PROC		; UnitClass::GetRadarType
EXTRN	?ChangeUnitLocation@UnitClass@@QAEHE@Z:PROC	; UnitClass::ChangeUnitLocation
EXTRN	?SetParent@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetParent
EXTRN	?SetEngaged@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetEngaged
EXTRN	?SetCombat@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetCombat
EXTRN	?SetTargeted@UnitClass@@QAEXH@Z:PROC		; UnitClass::SetTargeted
EXTRN	?GetUnitClassData@UnitClass@@QAEPAUUnitClassDataType@@XZ:PROC ; UnitClass::GetUnitClassData
EXTRN	?GetBestVehicleWeapon@UnitClass@@UAEHHPAEW4MoveType@@HPAH@Z:PROC ; UnitClass::GetBestVehicleWeapon
EXTRN	?GetVehicleHitChance@UnitClass@@UAEHHW4MoveType@@HH@Z:PROC ; UnitClass::GetVehicleHitChance
EXTRN	?GetVehicleCombatStrength@UnitClass@@UAEHHW4MoveType@@H@Z:PROC ; UnitClass::GetVehicleCombatStrength
EXTRN	?GetVehicleRange@UnitClass@@UAEHHHPAVFalconEntity@@@Z:PROC ; UnitClass::GetVehicleRange
EXTRN	?GetUnitWeaponId@UnitClass@@UAEHHH@Z:PROC	; UnitClass::GetUnitWeaponId
EXTRN	?GetUnitWeaponCount@UnitClass@@UAEHHH@Z:PROC	; UnitClass::GetUnitWeaponCount
EXTRN	?GetCampTarget@UnitClass@@QAEPAVCampBaseClass@@XZ:PROC ; UnitClass::GetCampTarget
EXTRN	?GetTotalVehicles@UnitClass@@QAEHXZ:PROC	; UnitClass::GetTotalVehicles
EXTRN	?GetMaxSpeed@UnitClass@@QBEHXZ:PROC		; UnitClass::GetMaxSpeed
EXTRN	?AddUnitWP@UnitClass@@QAEPAVWayPointClass@@FFHHKHE@Z:PROC ; UnitClass::AddUnitWP
EXTRN	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ:PROC ; UnitClass::GetCurrentUnitWP
EXTRN	?DisposeWayPoints@UnitClass@@QAEXXZ:PROC	; UnitClass::DisposeWayPoints
EXTRN	?SetCurrentUnitWP@UnitClass@@QAEXPAVWayPointClass@@@Z:PROC ; UnitClass::SetCurrentUnitWP
EXTRN	?AdjustWayPoints@UnitClass@@QAEXXZ:PROC		; UnitClass::AdjustWayPoints
EXTRN	?DistSqu@@YAHFFFF@Z:PROC			; DistSqu
EXTRN	?DistSqu@@YAMMMMM@Z:PROC			; DistSqu
EXTRN	?AngleTo@@YAMFFFF@Z:PROC			; AngleTo
EXTRN	?DirectionTo@@YAEFFFFFF@Z:PROC			; DirectionTo
EXTRN	?FindNearestUnit@@YAPAVUnitClass@@FFPAM@Z:PROC	; FindNearestUnit
EXTRN	?FindNearestObjective@@YAPAVObjectiveClass@@FFPAMF@Z:PROC ; FindNearestObjective
EXTRN	?GridToSim@@YAMF@Z:PROC				; GridToSim
EXTRN	?GetRoE@@YAHEEH@Z:PROC				; GetRoE
EXTRN	?EngageParent@@YAHPAVUnitClass@@PAVFalconEntity@@@Z:PROC ; EngageParent
EXTRN	?Detected@@YAHPAVUnitClass@@PAVFalconEntity@@PAM@Z:PROC ; Detected
EXTRN	?DoCombat@@YAHPAVCampBaseClass@@PAVFalconEntity@@@Z:PROC ; DoCombat
EXTRN	??_ETaskForceClass@@UAEPAXI@Z:PROC		; TaskForceClass::`vector deleting destructor'
EXTRN	?GetMEA@TMap@@QAEMMM@Z:PROC			; TMap::GetMEA
EXTRN	?GetFirstPt@@YAHH@Z:PROC			; GetFirstPt
EXTRN	?GetNextPt@@YAHH@Z:PROC				; GetNextPt
EXTRN	?TranslatePointData@@YAXPAVCampBaseClass@@HPAM1@Z:PROC ; TranslatePointData
EXTRN	?CheckValidType@@YAHPAVCampBaseClass@@0@Z:PROC	; CheckValidType
EXTRN	?CanItIdentify@@YAHPAVCampBaseClass@@0MH@Z:PROC	; CanItIdentify
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	?SimLibElapsedTime@@3KA:DWORD			; SimLibElapsedTime
EXTRN	?WeaponDataTable@@3PAUWeaponClassDataType@@A:DWORD ; WeaponDataTable
EXTRN	?PtHeaderDataTable@@3PAUPtHeaderDataType@@A:DWORD ; PtHeaderDataTable
EXTRN	?PtDataTable@@3PAUPtDataType@@A:DWORD		; PtDataTable
EXTRN	?DDP@@3PAUDirtyDataClassType@@A:DWORD		; DDP
EXTRN	?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A:DWORD ; Falcon4ClassTable
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?NonVolatileNS@@3VIdNamespace@@A:BYTE		; NonVolatileNS
EXTRN	?RealUnitProxList@@3PAVVuGridTree@@A:DWORD	; RealUnitProxList
EXTRN	?campCritical@@3PAUF4CSECTIONHANDLE@@A:DWORD	; campCritical
EXTRN	?TheCampaign@@3VCampaignClass@@A:BYTE		; TheCampaign
EXTRN	?TeamInfo@@3PAPAVTeamClass@@A:BYTE		; TeamInfo
EXTRN	?MINIMUM_EXP_TO_FIRE_PREGUIDE@@3FA:WORD		; MINIMUM_EXP_TO_FIRE_PREGUIDE
EXTRN	?NAVAL_MOVE_CHECK_INTERVAL@@3FA:WORD		; NAVAL_MOVE_CHECK_INTERVAL
EXTRN	?NAVAL_COMBAT_CHECK_INTERVAL@@3FA:WORD		; NAVAL_COMBAT_CHECK_INTERVAL
EXTRN	?MAX_GROUND_SEARCH@@3FA:WORD			; MAX_GROUND_SEARCH
EXTRN	?TheMap@@3VTMap@@A:BYTE				; TheMap
EXTRN	?radarDatFileTable@@3PAURadarDataSet@@A:DWORD	; radarDatFileTable
EXTRN	?save_log@@3PAU_iobuf@@A:DWORD			; save_log
EXTRN	?load_log@@3PAU_iobuf@@A:DWORD			; load_log
EXTRN	?start_save_stream@@3HA:DWORD			; start_save_stream
EXTRN	?start_load_stream@@3HA:DWORD			; start_load_stream
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?ent@?1??GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A
_BSS	SEGMENT
?ent@?1??GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A DD 01H DUP (?) ; `TaskForceClass::GetVehicleDeagData'::`2'::ent
_BSS	ENDS
;	COMDAT ?round@?1??GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
_BSS	SEGMENT
?round@?1??GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z@4HA DD 01H DUP (?) ; `TaskForceClass::GetVehicleDeagData'::`2'::round
_BSS	ENDS
;	COMDAT ?last_pt@?1??GetDeaggregationPoint@TaskForceClass@@UAEHHPAPAVCampBaseClass@@@Z@4HA
_BSS	SEGMENT
?last_pt@?1??GetDeaggregationPoint@TaskForceClass@@UAEHHPAPAVCampBaseClass@@@Z@4HA DD 01H DUP (?) ; `TaskForceClass::GetDeaggregationPoint'::`2'::last_pt
_BSS	ENDS
;	COMDAT ?index@?1??GetDeaggregationPoint@TaskForceClass@@UAEHHPAPAVCampBaseClass@@@Z@4HA
_BSS	SEGMENT
?index@?1??GetDeaggregationPoint@TaskForceClass@@UAEHHPAPAVCampBaseClass@@@Z@4HA DD 01H DUP (?) ; `TaskForceClass::GetDeaggregationPoint'::`2'::index
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@bff921fb54442d18
CONST	SEGMENT
__real@bff921fb54442d18 DQ 0bff921fb54442d18r	; -1.5708
CONST	ENDS
;	COMDAT __real@8000000000000000
CONST	SEGMENT
__real@8000000000000000 DQ 08000000000000000r	; -0
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+038
CONST	ENDS
;	COMDAT __real@461c3c00
CONST	SEGMENT
__real@461c3c00 DD 0461c3c00r			; 9999
CONST	ENDS
;	COMDAT __real@45bb8000
CONST	SEGMENT
__real@45bb8000 DD 045bb8000r			; 6000
CONST	ENDS
;	COMDAT __real@44bb8000
CONST	SEGMENT
__real@44bb8000 DD 044bb8000r			; 1500
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42340000
CONST	SEGMENT
__real@42340000 DD 042340000r			; 45
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f693e32
CONST	SEGMENT
__real@3f693e32 DD 03f693e32r			; 0.911105
CONST	ENDS
;	COMDAT __real@3f17ac60
CONST	SEGMENT
__real@3f17ac60 DD 03f17ac60r			; 0.592474
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R2VuEntity@@8
rdata$r	SEGMENT
??_R2VuEntity@@8 DD FLAT:??_R1A@?0A@EA@VuEntity@@8	; VuEntity::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3VuEntity@@8
rdata$r	SEGMENT
??_R3VuEntity@@8 DD 00H					; VuEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVuEntity@@@8
_DATA	SEGMENT
??_R0?AVVuEntity@@@8 DD FLAT:??_7type_info@@6B@		; VuEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVuEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@VuEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VuEntity@@8 DD FLAT:??_R0?AVVuEntity@@@8	; VuEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2FalconEntity@@8
rdata$r	SEGMENT
??_R2FalconEntity@@8 DD FLAT:??_R1A@?0A@EA@FalconEntity@@8 ; FalconEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3FalconEntity@@8
rdata$r	SEGMENT
??_R3FalconEntity@@8 DD 00H				; FalconEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FalconEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFalconEntity@@@8
_DATA	SEGMENT
??_R0?AVFalconEntity@@@8 DD FLAT:??_7type_info@@6B@	; FalconEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFalconEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@FalconEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FalconEntity@@8 DD FLAT:??_R0?AVFalconEntity@@@8 ; FalconEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FalconEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2CampBaseClass@@8
rdata$r	SEGMENT
??_R2CampBaseClass@@8 DD FLAT:??_R1A@?0A@EA@CampBaseClass@@8 ; CampBaseClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3CampBaseClass@@8
rdata$r	SEGMENT
??_R3CampBaseClass@@8 DD 00H				; CampBaseClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CampBaseClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCampBaseClass@@@8
_DATA	SEGMENT
??_R0?AVCampBaseClass@@@8 DD FLAT:??_7type_info@@6B@	; CampBaseClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCampBaseClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CampBaseClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CampBaseClass@@8 DD FLAT:??_R0?AVCampBaseClass@@@8 ; CampBaseClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CampBaseClass@@8
rdata$r	ENDS
;	COMDAT ??_R2UnitClass@@8
rdata$r	SEGMENT
??_R2UnitClass@@8 DD FLAT:??_R1A@?0A@EA@UnitClass@@8	; UnitClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CampBaseClass@@8
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3UnitClass@@8
rdata$r	SEGMENT
??_R3UnitClass@@8 DD 00H				; UnitClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2UnitClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUnitClass@@@8
_DATA	SEGMENT
??_R0?AVUnitClass@@@8 DD FLAT:??_7type_info@@6B@	; UnitClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUnitClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@UnitClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UnitClass@@8 DD FLAT:??_R0?AVUnitClass@@@8 ; UnitClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UnitClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@TaskForceClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TaskForceClass@@8 DD FLAT:??_R0?AVTaskForceClass@@@8 ; TaskForceClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TaskForceClass@@8
rdata$r	ENDS
;	COMDAT ??_R2TaskForceClass@@8
rdata$r	SEGMENT
??_R2TaskForceClass@@8 DD FLAT:??_R1A@?0A@EA@TaskForceClass@@8 ; TaskForceClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@UnitClass@@8
	DD	FLAT:??_R1A@?0A@EA@CampBaseClass@@8
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3TaskForceClass@@8
rdata$r	SEGMENT
??_R3TaskForceClass@@8 DD 00H				; TaskForceClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2TaskForceClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTaskForceClass@@@8
_DATA	SEGMENT
??_R0?AVTaskForceClass@@@8 DD FLAT:??_7type_info@@6B@	; TaskForceClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTaskForceClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TaskForceClass@@6B@
rdata$r	SEGMENT
??_R4TaskForceClass@@6B@ DD 00H				; TaskForceClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTaskForceClass@@@8
	DD	FLAT:??_R3TaskForceClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InvalidBufferException@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InvalidBufferException@@8 DD FLAT:??_R0?AVInvalidBufferException@@@8 ; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R2InvalidBufferException@@8
rdata$r	SEGMENT
??_R2InvalidBufferException@@8 DD FLAT:??_R1A@?0A@EA@InvalidBufferException@@8 ; InvalidBufferException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@out_of_range@std@@8
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InvalidBufferException@@8
rdata$r	SEGMENT
??_R3InvalidBufferException@@8 DD 00H			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R4InvalidBufferException@@6B@
rdata$r	SEGMENT
??_R4InvalidBufferException@@6B@ DD 00H			; InvalidBufferException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@out_of_range@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@out_of_range@std@@8 DD FLAT:??_R0?AVout_of_range@std@@@8 ; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R2out_of_range@std@@8
rdata$r	SEGMENT
??_R2out_of_range@std@@8 DD FLAT:??_R1A@?0A@EA@out_of_range@std@@8 ; std::out_of_range::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3out_of_range@std@@8
rdata$r	SEGMENT
??_R3out_of_range@std@@8 DD 00H				; std::out_of_range::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R4out_of_range@std@@6B@
rdata$r	SEGMENT
??_R4out_of_range@std@@6B@ DD 00H			; std::out_of_range::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NFLOHBN@?$CF08x?5TaskForceClass?5?$AA@
CONST	SEGMENT
??_C@_0BF@NFLOHBN@?$CF08x?5TaskForceClass?5?$AA@ DB '%08x TaskForceClass '
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_7TaskForceClass@@6B@
CONST	SEGMENT
??_7TaskForceClass@@6B@ DD FLAT:??_R4TaskForceClass@@6B@ ; TaskForceClass::`vftable'
	DD	FLAT:?CustomCollisionCheck@VuEntity@@UAEEPAV1@M@Z
	DD	FLAT:?TerrainCollisionCheck@VuEntity@@UAEEXZ
	DD	FLAT:?IsTarget@VuEntity@@UAEEXZ
	DD	FLAT:?IsSession@VuEntity@@UAEEXZ
	DD	FLAT:?IsGroup@VuEntity@@UAEEXZ
	DD	FLAT:?IsGame@VuEntity@@UAEEXZ
	DD	FLAT:?IsCamera@VuEntity@@UBEEXZ
	DD	FLAT:?SaveSize@TaskForceClass@@UAEHXZ
	DD	FLAT:?Save@FalconEntity@@UAEHPAU_iobuf@@@Z
	DD	FLAT:?Save@TaskForceClass@@UAEHPAPAE@Z
	DD	FLAT:?Handle@CampBaseClass@@UAEHPAVVuSessionEvent@@@Z
	DD	FLAT:?Handle@CampBaseClass@@UAEHPAVVuTransferEvent@@@Z
	DD	FLAT:?Handle@CampBaseClass@@UAEHPAVVuEntityCollisionEvent@@@Z
	DD	FLAT:?Handle@CampBaseClass@@UAEHPAVVuPositionUpdateEvent@@@Z
	DD	FLAT:?Handle@TaskForceClass@@UAEHPAVVuFullUpdateEvent@@@Z
	DD	FLAT:?Handle@CampBaseClass@@UAEHPAVVuEvent@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuPullRequest@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuPushRequest@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuErrorMessage@@@Z
	DD	FLAT:??_ETaskForceClass@@UAEPAXI@Z
	DD	FLAT:?InsertionCallback@VuEntity@@MAEHXZ
	DD	FLAT:?RemovalCallback@FalconEntity@@UAEHXZ
	DD	FLAT:?InitData@CampBaseClass@@UAEXXZ
	DD	FLAT:?CleanupData@FalconEntity@@UAEXXZ
	DD	FLAT:?IsSimBase@FalconEntity@@UAE_NXZ
	DD	FLAT:?IsCampBase@CampBaseClass@@UAE_NXZ
	DD	FLAT:?Wake@UnitClass@@UAEHXZ
	DD	FLAT:?Sleep@UnitClass@@UAEHXZ
	DD	FLAT:?GetCampID@CampBaseClass@@UAEFXZ
	DD	FLAT:?GetTeam@CampBaseClass@@UAEEXZ
	DD	FLAT:?GetCountry@CampBaseClass@@UAEEXZ
	DD	FLAT:?GetDomain@FalconEntity@@UAEEXZ
	DD	FLAT:?GetRadarMode@TaskForceClass@@UAEHXZ
	DD	FLAT:?SetRadarMode@TaskForceClass@@UAEXE@Z
	DD	FLAT:?ReturnToSearch@TaskForceClass@@UAEXXZ
	DD	FLAT:?SetSearchMode@TaskForceClass@@UAEXE@Z
	DD	FLAT:?CombatClass@FalconEntity@@UAEHXZ
	DD	FLAT:?OnGround@TaskForceClass@@UAEHXZ
	DD	FLAT:?HasEntity@CampBaseClass@@UBEHPAVVuEntity@@@Z
	DD	FLAT:?IsMissile@FalconEntity@@UAEHXZ
	DD	FLAT:?IsLauncher@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBomb@FalconEntity@@UAEHXZ
	DD	FLAT:?IsGun@FalconEntity@@UAEHXZ
	DD	FLAT:?IsMover@FalconEntity@@UAEHXZ
	DD	FLAT:?IsVehicle@FalconEntity@@UAEHXZ
	DD	FLAT:?IsStatic@FalconEntity@@UAEHXZ
	DD	FLAT:?IsHelicopter@FalconEntity@@UAEHXZ
	DD	FLAT:?IsEject@FalconEntity@@UAEHXZ
	DD	FLAT:?IsAirplane@FalconEntity@@UAEHXZ
	DD	FLAT:?IsGroundVehicle@FalconEntity@@UAEHXZ
	DD	FLAT:?IsShip@FalconEntity@@UAEHXZ
	DD	FLAT:?IsWeapon@FalconEntity@@UAEHXZ
	DD	FLAT:?IsExploding@FalconEntity@@UAEHXZ
	DD	FLAT:?IsDead@FalconEntity@@UAEHXZ
	DD	FLAT:?IsEmitting@CampBaseClass@@UAEHXZ
	DD	FLAT:?GetVt@TaskForceClass@@UBEMXZ
	DD	FLAT:?GetKias@TaskForceClass@@UBEMXZ
	DD	FLAT:?GetMovementType@TaskForceClass@@UAE?AW4MoveType@@XZ
	DD	FLAT:?IsUnit@UnitClass@@UAEHXZ
	DD	FLAT:?IsObjective@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBattalion@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBrigade@FalconEntity@@UAEHXZ
	DD	FLAT:?IsFlight@FalconEntity@@UBEHXZ
	DD	FLAT:?IsSquadron@FalconEntity@@UAEHXZ
	DD	FLAT:?IsPackage@FalconEntity@@UAEHXZ
	DD	FLAT:?IsTeam@FalconEntity@@UAEHXZ
	DD	FLAT:?IsTaskForce@TaskForceClass@@UAEHXZ
	DD	FLAT:?IsSPJamming@FalconEntity@@UAEHXZ
	DD	FLAT:?IsAreaJamming@FalconEntity@@UAEHXZ
	DD	FLAT:?HasSPJamming@FalconEntity@@UAEHXZ
	DD	FLAT:?HasAreaJamming@FalconEntity@@UAEHXZ
	DD	FLAT:?GetRCSFactor@UnitClass@@UAEMXZ
	DD	FLAT:?GetIRFactor@UnitClass@@UAEMXZ
	DD	FLAT:?GetRadarType@UnitClass@@UAEHXZ
	DD	FLAT:?GetDamageModifiers@UnitClass@@UAEPAEXZ
	DD	FLAT:?SetAQUIREtimer@TaskForceClass@@UAEXK@Z
	DD	FLAT:?SetSEARCHtimer@TaskForceClass@@UAEXK@Z
	DD	FLAT:?SetStepSearchMode@TaskForceClass@@UAEXE@Z
	DD	FLAT:?GetAQUIREtimer@TaskForceClass@@UAEKXZ
	DD	FLAT:?GetSEARCHtimer@TaskForceClass@@UAEKXZ
	DD	FLAT:?SetOwner@CampBaseClass@@UAEXE@Z
	DD	FLAT:?SendDeaggregateData@UnitClass@@UAEXPAVVuTargetEntity@@@Z
	DD	FLAT:?RecordCurrentState@UnitClass@@UAEHPAVFalconSessionEntity@@H@Z
	DD	FLAT:?Deaggregate@UnitClass@@UAEHPAVFalconSessionEntity@@@Z
	DD	FLAT:?Reaggregate@UnitClass@@UAEHPAVFalconSessionEntity@@@Z
	DD	FLAT:?TransferOwnership@UnitClass@@UAEHPAVFalconSessionEntity@@@Z
	DD	FLAT:?InsertInSimLists@UnitClass@@UAEXMM@Z
	DD	FLAT:?RemoveFromSimLists@UnitClass@@UAEXXZ
	DD	FLAT:?DeaggregateFromData@UnitClass@@UAEXPAEJ@Z
	DD	FLAT:?ReaggregateFromData@UnitClass@@UAEXPAEJ@Z
	DD	FLAT:?TransferOwnershipFromData@UnitClass@@UAEXPAEJ@Z
	DD	FLAT:?ApplyDamage@UnitClass@@UAEHW4DamageDataType@@PAHHF@Z
	DD	FLAT:?ApplyDamage@UnitClass@@UAEHPAVFalconCampWeaponsFire@@E@Z
	DD	FLAT:?DecodeDamageData@UnitClass@@UAEHPAEPAV1@PAVFalconDeathMessage@@@Z
	DD	FLAT:?CollectWeapons@UnitClass@@UAEHPAEW4MoveType@@QAFQAEH@Z
	DD	FLAT:?GetName@UnitClass@@UAEPADPADHH@Z
	DD	FLAT:?GetFullName@UnitClass@@UAEPADPADHH@Z
	DD	FLAT:?GetDivisionName@UnitClass@@UAEPADPADHH@Z
	DD	FLAT:?GetHitChance@UnitClass@@UAEHHH@Z
	DD	FLAT:?GetAproxHitChance@UnitClass@@UAEHHH@Z
	DD	FLAT:?GetCombatStrength@UnitClass@@UAEHHH@Z
	DD	FLAT:?GetAproxCombatStrength@UnitClass@@UAEHHH@Z
	DD	FLAT:?GetWeaponRange@UnitClass@@UAEHHPAVFalconEntity@@@Z
	DD	FLAT:?GetAproxWeaponRange@UnitClass@@UAEHH@Z
	DD	FLAT:?GetDetectionRange@UnitClass@@UAEHH@Z
	DD	FLAT:?GetElectronicDetectionRange@UnitClass@@UAEHH@Z
	DD	FLAT:?CanDetect@UnitClass@@UAEHPAVFalconEntity@@@Z
	DD	FLAT:?StepRadar@TaskForceClass@@UAEHHHM@Z
	DD	FLAT:?GetNumberOfArcs@UnitClass@@UAEHXZ
	DD	FLAT:?GetArcRatio@UnitClass@@UAEMH@Z
	DD	FLAT:?GetArcRange@UnitClass@@UAEMH@Z
	DD	FLAT:?GetArcAngle@UnitClass@@UAEXHPAM0@Z
	DD	FLAT:?GetMissilesFlying@TaskForceClass@@UAEHXZ
	DD	FLAT:?ResetPlayerStatus@UnitClass@@UAEHXZ
	DD	FLAT:?GetComponentLocation@UnitClass@@UAEXPAF0H@Z
	DD	FLAT:?GetComponentAltitude@UnitClass@@UAEHH@Z
	DD	FLAT:?CanShootWeapon@TaskForceClass@@UAEHH@Z
	DD	FLAT:?GetDeaggregationPoint@TaskForceClass@@UAEHHPAPAVCampBaseClass@@@Z
	DD	FLAT:?GetUnitDeaggregationData@UnitClass@@UAEPAVUnitDeaggregationData@@XZ
	DD	FLAT:?ShouldDeaggregate@UnitClass@@UAEHXZ
	DD	FLAT:?ClearDeaggregationData@UnitClass@@UAEXXZ
	DD	FLAT:?Reaction@TaskForceClass@@UAEHPAVCampBaseClass@@HM@Z
	DD	FLAT:?MoveUnit@TaskForceClass@@UAEHK@Z
	DD	FLAT:?DoCombat@TaskForceClass@@UAEHXZ
	DD	FLAT:?ChooseTactic@TaskForceClass@@UAEHXZ
	DD	FLAT:?CheckTactic@TaskForceClass@@UAEHH@Z
	DD	FLAT:?Father@UnitClass@@UBEHXZ
	DD	FLAT:?Real@TaskForceClass@@UAEHXZ
	DD	FLAT:?AdjustForSupply@UnitClass@@UAEMXZ
	DD	FLAT:?GetUnitSpeed@TaskForceClass@@UBEHXZ
	DD	FLAT:?DetectOnMove@TaskForceClass@@UAEHXZ
	DD	FLAT:?ChooseTarget@TaskForceClass@@UAEHXZ
	DD	FLAT:?MaxUpdateTime@TaskForceClass@@UBEKXZ
	DD	FLAT:?CombatTime@TaskForceClass@@UAEKXZ
	DD	FLAT:?GetUnitSupplyNeed@UnitClass@@UAEHH@Z
	DD	FLAT:?GetUnitFuelNeed@UnitClass@@UAEHH@Z
	DD	FLAT:?SupplyUnit@UnitClass@@UAEXHH@Z
	DD	FLAT:?GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z
	DD	FLAT:?IsDead@UnitClass@@UBEHXZ
	DD	FLAT:?SimSetLocation@UnitClass@@UAEXMMM@Z
	DD	FLAT:?SimSetOrientation@UnitClass@@UAEXMMM@Z
	DD	FLAT:?GetRealPosition@TaskForceClass@@UAEXPAM00@Z
	DD	FLAT:?GetBestVehicleWeapon@UnitClass@@UAEHHPAEW4MoveType@@HPAH@Z
	DD	FLAT:?GetVehicleHitChance@UnitClass@@UAEHHW4MoveType@@HH@Z
	DD	FLAT:?GetVehicleCombatStrength@UnitClass@@UAEHHW4MoveType@@H@Z
	DD	FLAT:?GetVehicleRange@UnitClass@@UAEHHHPAVFalconEntity@@@Z
	DD	FLAT:?GetUnitWeaponId@UnitClass@@UAEHHH@Z
	DD	FLAT:?GetUnitWeaponCount@UnitClass@@UAEHHH@Z
	DD	FLAT:?SetUnitLastMove@TaskForceClass@@UAEXK@Z
	DD	FLAT:?SetCombatTime@TaskForceClass@@UAEXK@Z
	DD	FLAT:?SetBurntFuel@UnitClass@@UAEXJ@Z
	DD	FLAT:?SetUnitMission@UnitClass@@UAEXE@Z
	DD	FLAT:?SetUnitRole@UnitClass@@UAEXE@Z
	DD	FLAT:?SetUnitPriority@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitMissionID@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitMissionTarget@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitTOT@UnitClass@@UAEXK@Z
	DD	FLAT:?SetUnitSquadron@UnitClass@@UAEXVVU_ID@@@Z
	DD	FLAT:?SetUnitAirbase@UnitClass@@UAEXVVU_ID@@@Z
	DD	FLAT:?SetLoadout@UnitClass@@UAEXPAULoadoutStruct@@H@Z
	DD	FLAT:?GetNumberOfLoadouts@UnitClass@@UAEHXZ
	DD	FLAT:?GetMoveTime@TaskForceClass@@UAEKXZ
	DD	FLAT:?GetCombatTime@TaskForceClass@@UAEKXZ
	DD	FLAT:?GetAirTargetID@TaskForceClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?GetAirTarget@TaskForceClass@@UAEPAVFalconEntity@@XZ
	DD	FLAT:?GetBurntFuel@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitMission@UnitClass@@UAE?AW4MissionTypeEnum@@XZ
	DD	FLAT:?GetUnitNormalRole@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitCurrentRole@UnitClass@@UBEHXZ
	DD	FLAT:?GetUnitPriority@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitMissionTarget@UnitClass@@UAEPAVCampBaseClass@@XZ
	DD	FLAT:?GetUnitMissionTargetID@UnitClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?GetUnitMissionID@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitTOT@UnitClass@@UAEKXZ
	DD	FLAT:?GetUnitSquadron@UnitClass@@UAEPAV1@XZ
	DD	FLAT:?GetUnitSquadronID@UnitClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?GetUnitAirbase@UnitClass@@UAEPAVCampBaseClass@@XZ
	DD	FLAT:?GetUnitAirbaseID@UnitClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?LoadWeapons@UnitClass@@UAEHPAXPAEW4MoveType@@HHH@Z
	DD	FLAT:?DumpWeapons@UnitClass@@UAEHXZ
	DD	FLAT:?ETA@UnitClass@@UAEKXZ
	DD	FLAT:?GetKnownEmitters@UnitClass@@UAEPAVFalconPrivateList@@XZ
	DD	FLAT:?BuildMission@UnitClass@@UAEHXZ
	DD	FLAT:?BuildMission@UnitClass@@UAEHPAVMissionRequestClass@@@Z
	DD	FLAT:?IncrementTime@TaskForceClass@@UAEXK@Z
	DD	FLAT:?UseFuel@UnitClass@@UAEXJ@Z
	DD	FLAT:?SetUnitSpecialty@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitSupply@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitMorale@UnitClass@@UAEXH@Z
	DD	FLAT:?SetSquadronFuel@UnitClass@@UAEXJ@Z
	DD	FLAT:?SetUnitStores@UnitClass@@UAEXHE@Z
	DD	FLAT:?SetLastResupply@UnitClass@@UAEXH@Z
	DD	FLAT:?SetLastResupplyTime@UnitClass@@UAEXK@Z
	DD	FLAT:?GetUnitSpecialty@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitSupply@TaskForceClass@@UAEHXZ
	DD	FLAT:?GetUnitMorale@UnitClass@@UAEHXZ
	DD	FLAT:?GetSquadronFuel@UnitClass@@UAEJXZ
	DD	FLAT:?GetUnitStores@UnitClass@@UAEEH@Z
	DD	FLAT:?GetLastResupplyTime@UnitClass@@UAEKXZ
	DD	FLAT:?GetLastResupply@UnitClass@@UAEHXZ
	DD	FLAT:?BuildPackage@UnitClass@@UAEHPAVMissionRequestClass@@PAVFalconPrivateList@@@Z
	DD	FLAT:?HandleRequestReceipt@UnitClass@@UAEXHHVVU_ID@@@Z
	DD	FLAT:?SetUnitAssemblyPoint@UnitClass@@UAEXHFF@Z
	DD	FLAT:?GetUnitAssemblyPoint@UnitClass@@UAEXHPAF0@Z
	DD	FLAT:?SetUnitPrimaryObj@UnitClass@@UAEXVVU_ID@@@Z
	DD	FLAT:?SetUnitSecondaryObj@UnitClass@@UAEXVVU_ID@@@Z
	DD	FLAT:?SetUnitObjective@UnitClass@@UAEXVVU_ID@@@Z
	DD	FLAT:?SetUnitOrders@UnitClass@@UAEXHVVU_ID@@@Z
	DD	FLAT:?SetUnitOrders@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitFatigue@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitMode@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitPosition@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitDivision@UnitClass@@UAEXH@Z
	DD	FLAT:?SetUnitHeading@UnitClass@@UAEXH@Z
	DD	FLAT:?GetUnitPrimaryObj@UnitClass@@UAEPAVObjectiveClass@@XZ
	DD	FLAT:?GetUnitSecondaryObj@UnitClass@@UAEPAVObjectiveClass@@XZ
	DD	FLAT:?GetUnitObjective@UnitClass@@UAEPAVObjectiveClass@@XZ
	DD	FLAT:?GetUnitPrimaryObjID@UnitClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?GetUnitSecondaryObjID@UnitClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?GetUnitObjectiveID@UnitClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?GetUnitOrders@TaskForceClass@@UAEHXZ
	DD	FLAT:?GetUnitFatigue@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitElement@UnitClass@@UAEPAV1@H@Z
	DD	FLAT:?GetUnitElement@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitMode@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitPosition@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitDivision@UnitClass@@UAEHXZ
	DD	FLAT:?GetUnitHeading@UnitClass@@UAEHXZ
	DD	FLAT:?SetUnitNextMove@TaskForceClass@@UAEXXZ
	DD	FLAT:?ClearUnitPath@TaskForceClass@@UAEXXZ
	DD	FLAT:?GetNextMoveDirection@TaskForceClass@@UAEHXZ
	DD	FLAT:?SetUnitCurrentDestination@UnitClass@@UAEXFF@Z
	DD	FLAT:?GetUnitCurrentDestination@UnitClass@@UAEXPAF0@Z
	DD	FLAT:?GetObjMovementType@UnitClass@@UAE?AW4MoveType@@PAVObjectiveClass@@H@Z
	DD	FLAT:?CheckForSurrender@UnitClass@@UAEHXZ
	DD	FLAT:?RallyUnit@UnitClass@@UAEHH@Z
	DD	FLAT:?GetUnitParent@UnitClass@@UBEPAV1@XZ
	DD	FLAT:?GetUnitParentID@UnitClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?SetUnitParent@UnitClass@@UAEXPAV1@@Z
	DD	FLAT:?GetFirstUnitElement@UnitClass@@UBEPAV1@XZ
	DD	FLAT:?GetNextUnitElement@UnitClass@@UBEPAV1@XZ
	DD	FLAT:?GetUnitElementByID@UnitClass@@UAEPAV1@H@Z
	DD	FLAT:?GetPrevUnitElement@UnitClass@@UAEPAV1@PAV1@@Z
	DD	FLAT:?AddUnitChild@UnitClass@@UAEXPAV1@@Z
	DD	FLAT:?DisposeChildren@UnitClass@@UAEXXZ
	DD	FLAT:?RemoveChild@UnitClass@@UAEXVVU_ID@@@Z
	DD	FLAT:?ReorganizeUnit@UnitClass@@UAEXXZ
	DD	FLAT:?UpdateParentStatistics@UnitClass@@UAEHXZ
	DD	FLAT:?SetAirTarget@TaskForceClass@@UAEXPAVFalconEntity@@@Z
	DD	FLAT:?SetUnitOrders@TaskForceClass@@UAEXE@Z
	DD	FLAT:?SetUnitSupply@TaskForceClass@@UAEXE@Z
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0InvalidBufferException@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInvalidBufferException@@@8
_DATA	SEGMENT
??_R0?AVInvalidBufferException@@@8 DD FLAT:??_7type_info@@6B@ ; InvalidBufferException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInvalidBufferException@@', 00H
_DATA	ENDS
;	COMDAT __CTA4?AVInvalidBufferException@@
xdata$x	SEGMENT
__CTA4?AVInvalidBufferException@@ DD 04H
	DD	FLAT:__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI4?AVInvalidBufferException@@
xdata$x	SEGMENT
__TI4?AVInvalidBufferException@@ DD 00H
	DD	FLAT:??1InvalidBufferException@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AVInvalidBufferException@@
xdata$x	ENDS
;	COMDAT ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
CONST	SEGMENT
??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ DB 'Tryi'
	DB	'ng to write %lu bytes to %ld buffer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7InvalidBufferException@@6B@
CONST	SEGMENT
??_7InvalidBufferException@@6B@ DD FLAT:??_R4InvalidBufferException@@6B@ ; InvalidBufferException::`vftable'
	DD	FLAT:??_EInvalidBufferException@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT
??_7out_of_range@std@@6B@ DD FLAT:??_R4out_of_range@std@@6B@ ; std::out_of_range::`vftable'
	DD	FLAT:??_Eout_of_range@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?NewTaskForce@@YAPAVTaskForceClass@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NewTaskForce@@YAPAVTaskForceClass@@H@Z$0
__unwindtable$?ChooseTarget@TaskForceClass@@UAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ChooseTarget@TaskForceClass@@UAEHXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ChooseTarget@TaskForceClass@@UAEHXZ$1
__unwindtable$??1TaskForceClass@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1TaskForceClass@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1TaskForceClass@@UAE@XZ$1
__unwindtable$??0TaskForceClass@@QAE@PAPAEPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TaskForceClass@@QAE@PAPAEPAJ@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0TaskForceClass@@QAE@PAPAEPAJ@Z$1
__unwindtable$??0TaskForceClass@@QAE@G@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TaskForceClass@@QAE@G@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0TaskForceClass@@QAE@G@Z$1
__ehfuncinfo$?NewTaskForce@@YAPAVTaskForceClass@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NewTaskForce@@YAPAVTaskForceClass@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ChooseTarget@TaskForceClass@@UAEHXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ChooseTarget@TaskForceClass@@UAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??1TaskForceClass@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1TaskForceClass@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0TaskForceClass@@QAE@PAPAEPAJ@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0TaskForceClass@@QAE@PAPAEPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0TaskForceClass@@QAE@G@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0TaskForceClass@@QAE@G@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0
__ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
_cw$ = -4						; size = 4
_tf$ = 8						; size = 4
_w$ = 12						; size = 4
?DoWPAction@@YAPAVWayPointClass@@PAVTaskForceClass@@PAV1@@Z PROC ; DoWPAction

; 895  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi

; 896  : 	WayPoint	cw;
; 897  : 
; 898  : 	if (!w || !tf)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN4@DoWPAction
	cmp	DWORD PTR _tf$[ebp], 0
	jne	SHORT $LN5@DoWPAction
$LN4@DoWPAction:

; 899  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN6@DoWPAction
$LN5@DoWPAction:

; 900  : 
; 901  : 	// Check Actions
; 902  : 	/*	int action = w->GetWPAction();
; 903  : 		switch (action)
; 904  : 		{
; 905  : 		case WP_NOTHING:
; 906  : 		default:
; 907  : 		break;
; 908  : 		}
; 909  : 	 */
; 910  : 
; 911  : 	// Check Flags
; 912  : 	if (w->GetWPFlags() & WPF_REPEAT)

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	and	eax, 64					; 00000040H
	je	SHORT $LN3@DoWPAction

; 913  : 	{
; 914  : 		// Check if we've been here long enough
; 915  : 		if (Camp_GetCurrentTime() > w->GetWPDepartureTime())

	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	mov	esi, eax
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPDepartureTime@WayPointClass@@QAEKXZ ; WayPointClass::GetWPDepartureTime
	cmp	esi, eax
	jbe	SHORT $LN2@DoWPAction

; 916  : 		{
; 917  : 			// If so, go on to the next wp (adjust their times from now)
; 918  : 			tf->AdjustWayPoints();

	mov	ecx, DWORD PTR _tf$[ebp]
	call	?AdjustWayPoints@UnitClass@@QAEXXZ	; UnitClass::AdjustWayPoints

; 919  : 		}
; 920  : 		else

	jmp	SHORT $LN3@DoWPAction
$LN2@DoWPAction:

; 921  : 		{
; 922  : 			// If not, restore previous WP and readjust times
; 923  : 			cw = w->GetPrevWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetPrevWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetPrevWP
	mov	DWORD PTR _cw$[ebp], eax

; 924  : 			tf->SetCurrentUnitWP(cw);

	mov	eax, DWORD PTR _cw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tf$[ebp]
	call	?SetCurrentUnitWP@UnitClass@@QAEXPAVWayPointClass@@@Z ; UnitClass::SetCurrentUnitWP

; 925  : 			tf->AdjustWayPoints();

	mov	ecx, DWORD PTR _tf$[ebp]
	call	?AdjustWayPoints@UnitClass@@QAEXXZ	; UnitClass::AdjustWayPoints

; 926  : 			return cw;

	mov	eax, DWORD PTR _cw$[ebp]
	jmp	SHORT $LN6@DoWPAction
$LN3@DoWPAction:

; 927  : 		}
; 928  : 	}
; 929  : 
; 930  : 	return NULL;

	xor	eax, eax
$LN6@DoWPAction:

; 931  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?DoWPAction@@YAPAVWayPointClass@@PAVTaskForceClass@@PAV1@@Z ENDP ; DoWPAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
_w$ = -20						; size = 4
_x$ = -16						; size = 2
_y$ = -12						; size = 2
_ux$ = -8						; size = 2
_uy$ = -4						; size = 2
_tf$ = 8						; size = 4
?ResetCurrentWP@@YAPAVWayPointClass@@PAVTaskForceClass@@@Z PROC ; ResetCurrentWP

; 870  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi

; 871  : 	WayPoint	w;
; 872  : 	GridIndex	x,y,ux,uy;
; 873  : 
; 874  : 	w = tf->GetCurrentUnitWP();

	mov	ecx, DWORD PTR _tf$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	mov	DWORD PTR _w$[ebp], eax
$LN5@ResetCurre:

; 875  : 	while (w && w->GetWPDepartureTime() < Camp_GetCurrentTime())

	cmp	DWORD PTR _w$[ebp], 0
	je	$LN4@ResetCurre
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPDepartureTime@WayPointClass@@QAEKXZ ; WayPointClass::GetWPDepartureTime
	mov	esi, eax
	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	cmp	esi, eax
	jae	$LN4@ResetCurre

; 876  : 	{
; 877  : 		if (w->GetWPFlags())				// Make sure we actually get here, it's important

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPFlags@WayPointClass@@QAEKXZ	; WayPointClass::GetWPFlags
	test	eax, eax
	je	SHORT $LN1@ResetCurre

; 878  : 		{
; 879  : 			w->GetWPLocation(&x,&y);

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 880  : 			tf->GetLocation(&ux,&uy);

	lea	edx, DWORD PTR _uy$[ebp]
	push	edx
	lea	eax, DWORD PTR _ux$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tf$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 881  : 			if (DistSqu(x,y,ux,uy) > 2.0F)

	movzx	ecx, WORD PTR _uy$[ebp]
	push	ecx
	movzx	edx, WORD PTR _ux$[ebp]
	push	edx
	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?DistSqu@@YAHFFFF@Z			; DistSqu
	add	esp, 16					; 00000010H
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR __real@40000000
	jbe	SHORT $LN2@ResetCurre

; 882  : 				return w;

	mov	eax, DWORD PTR _w$[ebp]
	jmp	SHORT $LN6@ResetCurre
$LN2@ResetCurre:

; 883  : 			if (DoWPAction(tf,w))

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _tf$[ebp]
	push	eax
	call	?DoWPAction@@YAPAVWayPointClass@@PAVTaskForceClass@@PAV1@@Z ; DoWPAction
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@ResetCurre

; 884  : 				return tf->GetCurrentUnitWP();

	mov	ecx, DWORD PTR _tf$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	jmp	SHORT $LN6@ResetCurre
$LN1@ResetCurre:

; 885  : 		}
; 886  : 		w = w->GetNextWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _w$[ebp], eax

; 887  : 		tf->SetCurrentUnitWP(w);

	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _tf$[ebp]
	call	?SetCurrentUnitWP@UnitClass@@QAEXPAVWayPointClass@@@Z ; UnitClass::SetCurrentUnitWP

; 888  : 	}

	jmp	$LN5@ResetCurre
$LN4@ResetCurre:

; 889  : 	return w;

	mov	eax, DWORD PTR _w$[ebp]
$LN6@ResetCurre:

; 890  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?ResetCurrentWP@@YAPAVWayPointClass@@PAVTaskForceClass@@@Z ENDP ; ResetCurrentWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ PROC ; SimBaseClass::GetCampaignObject, COMDAT
; _this$ = ecx

; 212  : 	CampBaseClass *GetCampaignObject (void) { return campaignObject.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ENDP ; SimBaseClass::GetCampaignObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
_new_taskforce$ = -28					; size = 4
$T2 = -24						; size = 4
tv72 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 4
?NewTaskForce@@YAPAVTaskForceClass@@H@Z PROC		; NewTaskForce

; 89   : TaskForceClass* NewTaskForce(int type){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?NewTaskForce@@YAPAVTaskForceClass@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 90   : 	TaskForceClass	*new_taskforce;
; 91   : 	/*VuEnterCriticalSection();
; 92   : 	lastVolatileId = vuAssignmentId;
; 93   : 	vuAssignmentId = lastNonVolatileId;
; 94   : 	vuLowWrapNumber = FIRST_NON_VOLATILE_VU_ID_NUMBER;
; 95   : 	vuHighWrapNumber = LAST_NON_VOLATILE_VU_ID_NUMBER;*/
; 96   : 	new_taskforce = new TaskForceClass (type);

	push	312					; 00000138H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@NewTaskFor
	movzx	eax, WORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0TaskForceClass@@QAE@G@Z		; TaskForceClass::TaskForceClass
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@NewTaskFor
$LN3@NewTaskFor:
	mov	DWORD PTR tv72[ebp], 0
$LN4@NewTaskFor:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _new_taskforce$[ebp], edx

; 97   : 	/*lastNonVolatileId = vuAssignmentId;
; 98   : 	vuAssignmentId = lastVolatileId;
; 99   : 	vuLowWrapNumber = FIRST_VOLATILE_VU_ID_NUMBER;
; 100  : 	vuHighWrapNumber = LAST_VOLATILE_VU_ID_NUMBER;
; 101  : 	VuExitCriticalSection();*/
; 102  : 	return new_taskforce;

	mov	eax, DWORD PTR _new_taskforce$[ebp]

; 103  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?NewTaskForce@@YAPAVTaskForceClass@@H@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?NewTaskForce@@YAPAVTaskForceClass@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?NewTaskForce@@YAPAVTaskForceClass@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?NewTaskForce@@YAPAVTaskForceClass@@H@Z ENDP		; NewTaskForce
; Function compile flags: /Odtp
;	COMDAT ??_GTaskForceClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTaskForceClass@@UAEPAXI@Z PROC			; TaskForceClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TaskForceClass@@UAE@XZ		; TaskForceClass::~TaskForceClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTaskForceClass@@UAEPAXI@Z ENDP			; TaskForceClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?GetSEARCHtimer@TaskForceClass@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSEARCHtimer@TaskForceClass@@UAEKXZ PROC		; TaskForceClass::GetSEARCHtimer, COMDAT
; _this$ = ecx

; 138  : 	virtual VU_TIME GetSEARCHtimer(void)				{ return SEARCHtimer; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+300]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSEARCHtimer@TaskForceClass@@UAEKXZ ENDP		; TaskForceClass::GetSEARCHtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?GetAQUIREtimer@TaskForceClass@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAQUIREtimer@TaskForceClass@@UAEKXZ PROC		; TaskForceClass::GetAQUIREtimer, COMDAT
; _this$ = ecx

; 137  : 	virtual VU_TIME GetAQUIREtimer(void)				{ return AQUIREtimer; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+304]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAQUIREtimer@TaskForceClass@@UAEKXZ ENDP		; TaskForceClass::GetAQUIREtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?SetStepSearchMode@TaskForceClass@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mode$ = 8						; size = 1
?SetStepSearchMode@TaskForceClass@@UAEXE@Z PROC		; TaskForceClass::SetStepSearchMode, COMDAT
; _this$ = ecx

; 136  : 	virtual void SetStepSearchMode(uchar mode)			{ step_search_mode = mode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _mode$[ebp]
	mov	BYTE PTR [eax+308], cl
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStepSearchMode@TaskForceClass@@UAEXE@Z ENDP		; TaskForceClass::SetStepSearchMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?SetSEARCHtimer@TaskForceClass@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newTime$ = 8						; size = 4
?SetSEARCHtimer@TaskForceClass@@UAEXK@Z PROC		; TaskForceClass::SetSEARCHtimer, COMDAT
; _this$ = ecx

; 135  : 	virtual void SetSEARCHtimer(VU_TIME newTime)		{ SEARCHtimer = newTime; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newTime$[ebp]
	mov	DWORD PTR [eax+300], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSEARCHtimer@TaskForceClass@@UAEXK@Z ENDP		; TaskForceClass::SetSEARCHtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?SetAQUIREtimer@TaskForceClass@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newTime$ = 8						; size = 4
?SetAQUIREtimer@TaskForceClass@@UAEXK@Z PROC		; TaskForceClass::SetAQUIREtimer, COMDAT
; _this$ = ecx

; 134  : 	virtual void SetAQUIREtimer(VU_TIME newTime)		{ AQUIREtimer = newTime; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newTime$[ebp]
	mov	DWORD PTR [eax+304], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAQUIREtimer@TaskForceClass@@UAEXK@Z ENDP		; TaskForceClass::SetAQUIREtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?GetMissilesFlying@TaskForceClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMissilesFlying@TaskForceClass@@UAEHXZ PROC		; TaskForceClass::GetMissilesFlying, COMDAT
; _this$ = ecx

; 131  : 	virtual int GetMissilesFlying (void)				{ return missiles_flying; } // MLR 10/3/2004 - finishing what //me123 //Cobra 10/31/04 TJL

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+296]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMissilesFlying@TaskForceClass@@UAEHXZ ENDP		; TaskForceClass::GetMissilesFlying
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
_react$ = -24						; size = 4
tv154 = -20						; size = 4
tv128 = -16						; size = 4
_det$ = -12						; size = 4
_detTmp$ = -8						; size = 4
_this$ = -4						; size = 4
_e$ = 8							; size = 4
_d$ = 12						; size = 4
_combat$ = 16						; size = 4
_spot$ = 20						; size = 4
?DetectVs@TaskForceClass@@QAEHPAVCampBaseClass@@PAMPAH2@Z PROC ; TaskForceClass::DetectVs
; _this$ = ecx

; 779  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 780  : 	int		react,det;
; 781  : 
; 782  : 	det = Detected(this,e,d);

	mov	eax, DWORD PTR _d$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?Detected@@YAHPAVUnitClass@@PAVFalconEntity@@PAM@Z ; Detected
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _det$[ebp], eax

; 783  : 
; 784  : 	int detTmp = det;

	mov	eax, DWORD PTR _det$[ebp]
	mov	DWORD PTR _detTmp$[ebp], eax

; 785  : 
; 786  : 	// Check type of entity before GCI is used
; 787  : 	if (CheckValidType(this, e))

	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?CheckValidType@@YAHPAVCampBaseClass@@0@Z ; CheckValidType
	add	esp, 8
	test	eax, eax
	je	SHORT $LN10@DetectVs

; 788  : 		detTmp |= e->GetSpotted(GetTeam()) ? ENEMY_DETECTED : 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetSpotted@CampBaseClass@@QAEHE@Z	; CampBaseClass::GetSpotted
	test	eax, eax
	je	SHORT $LN13@DetectVs
	mov	DWORD PTR tv128[ebp], 1
	jmp	SHORT $LN14@DetectVs
$LN13@DetectVs:
	mov	DWORD PTR tv128[ebp], 0
$LN14@DetectVs:
	mov	edx, DWORD PTR _detTmp$[ebp]
	or	edx, DWORD PTR tv128[ebp]
	mov	DWORD PTR _detTmp$[ebp], edx
$LN10@DetectVs:

; 789  : 
; 790  : 	// Check type of entity before GCI is used
; 791  : 	if (CheckValidType(e, this))

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	call	?CheckValidType@@YAHPAVCampBaseClass@@0@Z ; CheckValidType
	add	esp, 8
	test	eax, eax
	je	SHORT $LN9@DetectVs

; 792  : 		detTmp |= GetSpotted(e->GetTeam()) ? FRIENDLY_DETECTED : 0;

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpotted@CampBaseClass@@QAEHE@Z	; CampBaseClass::GetSpotted
	test	eax, eax
	je	SHORT $LN15@DetectVs
	mov	DWORD PTR tv154[ebp], 4
	jmp	SHORT $LN16@DetectVs
$LN15@DetectVs:
	mov	DWORD PTR tv154[ebp], 0
$LN16@DetectVs:
	mov	ecx, DWORD PTR _detTmp$[ebp]
	or	ecx, DWORD PTR tv154[ebp]
	mov	DWORD PTR _detTmp$[ebp], ecx
$LN9@DetectVs:

; 793  : 
; 794  : 	if (!(detTmp & REACTION_MASK))

	mov	edx, DWORD PTR _detTmp$[ebp]
	and	edx, 17					; 00000011H
	jne	SHORT $LN8@DetectVs

; 795  : 		return 0;

	xor	eax, eax
	jmp	$LN11@DetectVs
$LN8@DetectVs:

; 796  : 
; 797  : 	react = Reaction(e,detTmp,*d);

	mov	eax, DWORD PTR _d$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _detTmp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+484]
	call	eax
	mov	DWORD PTR _react$[ebp], eax

; 798  : 
; 799  : 	// We'll spot our enemy if we're not broken
; 800  : 	if (det & ENEMY_DETECTED) {

	mov	ecx, DWORD PTR _det$[ebp]
	and	ecx, 1
	je	SHORT $LN6@DetectVs

; 801  : 		if (IsAggregate() && CheckValidType(this, e))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	je	SHORT $LN6@DetectVs
	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?CheckValidType@@YAHPAVCampBaseClass@@0@Z ; CheckValidType
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@DetectVs

; 802  : 			e->SetSpotted(GetTeam(),TheCampaign.CurrentTime, (CanItIdentify(this, e, *d, e->GetMovementType()))); // 2002-02-11 MODIFIED BY S.G. Say 'identified if it has the hability to identify

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+228]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _d$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?CanItIdentify@@YAHPAVCampBaseClass@@0MH@Z ; CanItIdentify
	add	esp, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?SetSpotted@CampBaseClass@@QAEXEKH@Z	; CampBaseClass::SetSpotted
$LN6@DetectVs:

; 803  : 	}
; 804  : 	if (det & ENEMY_IN_RANGE && react)

	mov	ecx, DWORD PTR _det$[ebp]
	and	ecx, 2
	je	SHORT $LN5@DetectVs
	cmp	DWORD PTR _react$[ebp], 0
	je	SHORT $LN5@DetectVs

; 805  : 		*combat = 1;

	mov	edx, DWORD PTR _combat$[ebp]
	mov	DWORD PTR [edx], 1
$LN5@DetectVs:

; 806  : 	if (det & FRIENDLY_DETECTED) {

	mov	eax, DWORD PTR _det$[ebp]
	and	eax, 4
	je	SHORT $LN3@DetectVs

; 807  : 		// Spotting will be set only if our enemy is aggregated or if he's an AWAC. SensorFusion or GroundClass::Exec will hanlde deaggregated vehicles.
; 808  : 		if ((e->IsAggregate() && CheckValidType(e, this)) || (e->IsFlight() && e->GetSType() == STYPE_UNIT_AWACS)) {

	mov	ecx, DWORD PTR _e$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	je	SHORT $LN1@DetectVs
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	call	?CheckValidType@@YAHPAVCampBaseClass@@0@Z ; CheckValidType
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@DetectVs
$LN1@DetectVs:
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN3@DetectVs
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	ecx, al
	cmp	ecx, 5
	jne	SHORT $LN3@DetectVs
$LN2@DetectVs:

; 809  : 			SetSpotted(e->GetTeam(),TheCampaign.CurrentTime, 1); // 2002-02-11 Modified by S.G. Ground units are always identified (doesn't change a thing)

	push	1
	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSpotted@CampBaseClass@@QAEXEKH@Z	; CampBaseClass::SetSpotted

; 810  : 			*spot = 1;

	mov	edx, DWORD PTR _spot$[ebp]
	mov	DWORD PTR [edx], 1
$LN3@DetectVs:

; 811  : 		}
; 812  : 	}
; 813  : 
; 814  : 	return react;

	mov	eax, DWORD PTR _react$[ebp]
$LN11@DetectVs:

; 815  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?DetectVs@TaskForceClass@@QAEHPAVCampBaseClass@@PAMPAH2@Z ENDP ; TaskForceClass::DetectVs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
_react$ = -28						; size = 4
tv160 = -24						; size = 4
tv134 = -20						; size = 4
_det$ = -16						; size = 4
_detTmp$ = -12						; size = 4
_this$ = -8						; size = 4
_e$ = -4						; size = 4
_ac$ = 8						; size = 4
_d$ = 12						; size = 4
_combat$ = 16						; size = 4
_spot$ = 20						; size = 4
?DetectVs@TaskForceClass@@QAEHPAVAircraftClass@@PAMPAH2@Z PROC ; TaskForceClass::DetectVs
; _this$ = ecx

; 717  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 718  : 	int			react,det = Detected(this,ac,d);

	mov	eax, DWORD PTR _d$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ac$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?Detected@@YAHPAVUnitClass@@PAVFalconEntity@@PAM@Z ; Detected
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _det$[ebp], eax

; 719  : 	CampEntity	e;
; 720  : 
; 721  : 	e = ac->GetCampaignObject();

	mov	ecx, DWORD PTR _ac$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _e$[ebp], eax

; 722  : 
; 723  : 	// 2001-03-22 ADDED BY S.G. DETECTION DOESN'T INCLUDED SPOTTED, ONLY THAT THIS ENTITY DETECTED THE OTHER BY ITSELF.
; 724  : 	int detTmp = det;

	mov	eax, DWORD PTR _det$[ebp]
	mov	DWORD PTR _detTmp$[ebp], eax

; 725  : 
; 726  : 	// Check type of entity before GCI is used
; 727  : 	if (CheckValidType(this, e))

	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?CheckValidType@@YAHPAVCampBaseClass@@0@Z ; CheckValidType
	add	esp, 8
	test	eax, eax
	je	SHORT $LN8@DetectVs

; 728  : 		detTmp |= e->GetSpotted(GetTeam()) ? ENEMY_DETECTED : 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetSpotted@CampBaseClass@@QAEHE@Z	; CampBaseClass::GetSpotted
	test	eax, eax
	je	SHORT $LN11@DetectVs
	mov	DWORD PTR tv134[ebp], 1
	jmp	SHORT $LN12@DetectVs
$LN11@DetectVs:
	mov	DWORD PTR tv134[ebp], 0
$LN12@DetectVs:
	mov	edx, DWORD PTR _detTmp$[ebp]
	or	edx, DWORD PTR tv134[ebp]
	mov	DWORD PTR _detTmp$[ebp], edx
$LN8@DetectVs:

; 729  : 
; 730  : 	// Check type of entity before GCI is used
; 731  : 	if (CheckValidType(e, this))

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	call	?CheckValidType@@YAHPAVCampBaseClass@@0@Z ; CheckValidType
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@DetectVs

; 732  : 		detTmp |= GetSpotted(e->GetTeam()) ? FRIENDLY_DETECTED : 0;

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpotted@CampBaseClass@@QAEHE@Z	; CampBaseClass::GetSpotted
	test	eax, eax
	je	SHORT $LN13@DetectVs
	mov	DWORD PTR tv160[ebp], 4
	jmp	SHORT $LN14@DetectVs
$LN13@DetectVs:
	mov	DWORD PTR tv160[ebp], 0
$LN14@DetectVs:
	mov	ecx, DWORD PTR _detTmp$[ebp]
	or	ecx, DWORD PTR tv160[ebp]
	mov	DWORD PTR _detTmp$[ebp], ecx
$LN7@DetectVs:

; 733  : 
; 734  : 	if (!(detTmp & REACTION_MASK))

	mov	edx, DWORD PTR _detTmp$[ebp]
	and	edx, 17					; 00000011H
	jne	SHORT $LN6@DetectVs

; 735  : 		return 0;

	xor	eax, eax
	jmp	$LN9@DetectVs
$LN6@DetectVs:

; 736  : 
; 737  : 	react = Reaction(e,detTmp,*d);

	mov	eax, DWORD PTR _d$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _detTmp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+484]
	call	eax
	mov	DWORD PTR _react$[ebp], eax

; 738  : 
; 739  : 	if (det & ENEMY_IN_RANGE && react)

	mov	ecx, DWORD PTR _det$[ebp]
	and	ecx, 2
	je	SHORT $LN5@DetectVs
	cmp	DWORD PTR _react$[ebp], 0
	je	SHORT $LN5@DetectVs

; 740  : 		*combat = 1;

	mov	edx, DWORD PTR _combat$[ebp]
	mov	DWORD PTR [edx], 1
$LN5@DetectVs:

; 741  : 
; 742  : 	// Spotting will be set only if our enemy is aggregated or if he's an AWAC. SensorFusion or GroundClass::Exec will hanlde deaggregated vehicles.
; 743  : 	// I can't let SensorFusion handle the spotting for AWAC because this will put a too big toll on the CPU
; 744  : 	// e has to be a flight since it is derived from an aircraft class so less checks needs to be done here then against flights below
; 745  : 	if (det & FRIENDLY_DETECTED) {

	mov	eax, DWORD PTR _det$[ebp]
	and	eax, 4
	je	$LN3@DetectVs

; 746  : 		// Spotting will be set only if our enemy is aggregated or if he's an AWAC. SensorFusion or GroundClass::Exec will hanlde deaggregated vehicles.
; 747  : 		if ((e->IsAggregate() && CheckValidType(e, this)) || (e->IsFlight() && e->GetSType() == STYPE_UNIT_AWACS)) {

	mov	ecx, DWORD PTR _e$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	je	SHORT $LN1@DetectVs
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	call	?CheckValidType@@YAHPAVCampBaseClass@@0@Z ; CheckValidType
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@DetectVs
$LN1@DetectVs:
	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN3@DetectVs
	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	ecx, al
	cmp	ecx, 5
	jne	SHORT $LN3@DetectVs
$LN2@DetectVs:

; 748  : 			SetSpotted(e->GetTeam(),TheCampaign.CurrentTime, CanItIdentify(this, e, *d, e->GetMovementType())); // 2002-02-11 MODIFIED BY S.G. Added 'CanItIdentify' which query if the target can be identified

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+228]
	call	edx
	push	eax
	mov	eax, DWORD PTR _d$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?CanItIdentify@@YAHPAVCampBaseClass@@0MH@Z ; CanItIdentify
	add	esp, 16					; 00000010H
	push	eax
	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSpotted@CampBaseClass@@QAEXEKH@Z	; CampBaseClass::SetSpotted

; 749  : 			*spot = 1;

	mov	edx, DWORD PTR _spot$[ebp]
	mov	DWORD PTR [edx], 1
$LN3@DetectVs:

; 750  : 		}
; 751  : 	}
; 752  : 	return react;

	mov	eax, DWORD PTR _react$[ebp]
$LN9@DetectVs:

; 753  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?DetectVs@TaskForceClass@@QAEHPAVAircraftClass@@PAMPAH2@Z ENDP ; TaskForceClass::DetectVs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?SetUnitLastMove@TaskForceClass@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?SetUnitLastMove@TaskForceClass@@UAEXK@Z PROC		; TaskForceClass::SetUnitLastMove, COMDAT
; _this$ = ecx

; 125  : 	virtual void SetUnitLastMove (CampaignTime t)		{ last_move = t; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax+260], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitLastMove@TaskForceClass@@UAEXK@Z ENDP		; TaskForceClass::SetUnitLastMove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?IncrementTime@TaskForceClass@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dt$ = 8						; size = 4
?IncrementTime@TaskForceClass@@UAEXK@Z PROC		; TaskForceClass::IncrementTime, COMDAT
; _this$ = ecx

; 124  : 	virtual void IncrementTime (CampaignTime dt) 		{ last_move += dt; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	add	ecx, DWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+260], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?IncrementTime@TaskForceClass@@UAEXK@Z ENDP		; TaskForceClass::IncrementTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
_detit$ = -188						; size = 60
_capture$ = -128					; size = 4
_pass$ = -124						; size = 4
_cit$2 = -120						; size = 12
_nomove$ = -108						; size = 4
$T3 = -104						; size = 4
$T4 = -100						; size = 4
_spot$ = -96						; size = 4
$T5 = -92						; size = 4
_estr$ = -88						; size = 4
_brsq$6 = -84						; size = 4
_best_air_react$ = -80					; size = 4
_react_distance$ = -76					; size = 4
_combat$ = -72						; size = 4
_search_dist$ = -68					; size = 4
_rsq$7 = -64						; size = 4
_retval$ = -60						; size = 4
_best_reaction$ = -56					; size = 4
_react_against$ = -52					; size = 4
_d$ = -48						; size = 4
_air_react_against$ = -44				; size = 4
_react$ = -40						; size = 4
_air_react_distance$ = -36				; size = 4
_fe$8 = -32						; size = 4
_artTarget$ = -28					; size = 4
_who$ = -21						; size = 1
_e$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?ChooseTarget@TaskForceClass@@UAEHXZ PROC		; TaskForceClass::ChooseTarget
; _this$ = ecx

; 1127 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ChooseTarget@TaskForceClass@@UAEHXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 176				; 000000b0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1128 : 	FalconEntity	*artTarget,*react_against=NULL,*air_react_against=NULL;

	mov	DWORD PTR _react_against$[ebp], 0
	mov	DWORD PTR _air_react_against$[ebp], 0

; 1129 : 	CampEntity		e;
; 1130 : 	float		d,react_distance,air_react_distance;
; 1131 : 	int			react,best_reaction=1,best_air_react=1,combat,retval=0,pass=0,spot=0,estr=0,capture=0,nomove=0;

	mov	DWORD PTR _best_reaction$[ebp], 1
	mov	DWORD PTR _best_air_react$[ebp], 1
	mov	DWORD PTR _retval$[ebp], 0
	mov	DWORD PTR _pass$[ebp], 0
	mov	DWORD PTR _spot$[ebp], 0
	mov	DWORD PTR _estr$[ebp], 0
	mov	DWORD PTR _capture$[ebp], 0
	mov	DWORD PTR _nomove$[ebp], 0

; 1132 : 	int			search_dist;
; 1133 : 	Team		who;
; 1134 : 
; 1135 : 	if (IsChecked())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsChecked@CampBaseClass@@QAEHXZ	; CampBaseClass::IsChecked
	test	eax, eax
	je	SHORT $LN23@ChooseTarg

; 1136 : 		return Engaged();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Engaged@UnitClass@@QBEHXZ		; UnitClass::Engaged
	jmp	$LN24@ChooseTarg
$LN23@ChooseTarg:

; 1137 : 
; 1138 : 	who = GetTeam();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	mov	BYTE PTR _who$[ebp], al

; 1139 : 	react_distance = air_react_distance = 9999.0F;

	movss	xmm0, DWORD PTR __real@461c3c00
	movss	DWORD PTR _air_react_distance$[ebp], xmm0
	movss	xmm0, DWORD PTR _air_react_distance$[ebp]
	movss	DWORD PTR _react_distance$[ebp], xmm0

; 1140 : 
; 1141 : #ifdef DEBUG
; 1142 : 	DWORD				timec = GetTickCount();
; 1143 : #endif
; 1144 : 
; 1145 : 	// Special case for fire support
; 1146 : 	if (Targeted())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Targeted@UnitClass@@QBEHXZ		; UnitClass::Targeted
	test	eax, eax
	je	SHORT $LN22@ChooseTarg

; 1147 : 		artTarget = GetTarget();					// Save our target

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ ; UnitClass::GetTarget
	mov	DWORD PTR _artTarget$[ebp], eax

; 1148 : 	else

	jmp	SHORT $LN21@ChooseTarg
$LN22@ChooseTarg:

; 1149 : 		artTarget = NULL;

	mov	DWORD PTR _artTarget$[ebp], 0
$LN21@ChooseTarg:

; 1150 : 
; 1151 : 	SetEngaged(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEngaged@UnitClass@@QAEXH@Z		; UnitClass::SetEngaged

; 1152 : 	SetCombat(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCombat@UnitClass@@QAEXH@Z		; UnitClass::SetCombat

; 1153 : 	SetChecked();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetChecked@CampBaseClass@@QAEXXZ	; CampBaseClass::SetChecked

; 1154 : 
; 1155 : 	search_dist = GetDetectionRange(Air);

	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+416]
	call	eax
	mov	DWORD PTR _search_dist$[ebp], eax

; 1156 : 	if (search_dist < MAX_GROUND_SEARCH)

	movsx	ecx, WORD PTR ?MAX_GROUND_SEARCH@@3FA	; MAX_GROUND_SEARCH
	cmp	DWORD PTR _search_dist$[ebp], ecx
	jge	SHORT $LN20@ChooseTarg

; 1157 : 		search_dist = MAX_GROUND_SEARCH;

	movsx	edx, WORD PTR ?MAX_GROUND_SEARCH@@3FA	; MAX_GROUND_SEARCH
	mov	DWORD PTR _search_dist$[ebp], edx
$LN20@ChooseTarg:

; 1158 : #ifdef VU_GRID_TREE_Y_MAJOR
; 1159 : 	VuGridIterator detit(RealUnitProxList,YPos(),XPos(),(BIG_SCALAR)GridToSim(search_dist));

	movzx	eax, WORD PTR _search_dist$[ebp]
	push	eax
	call	?GridToSim@@YAMF@Z			; GridToSim
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ?RealUnitProxList@@3PAVVuGridTree@@A ; RealUnitProxList
	push	ecx
	lea	ecx, DWORD PTR _detit$[ebp]
	call	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z ; VuGridIterator::VuGridIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1160 : #else
; 1161 : 	VuGridIterator detit(RealUnitProxList,XPos(),YPos(),(BIG_SCALAR)GridToSim(search_dist));
; 1162 : #endif
; 1163 : 	//  CalculateSOJ(detit); 2002-02-19 REMOVED BY S.G. eFalcon 1.10 SOJ code removed
; 1164 : 
; 1165 : 	e = (CampEntity)detit.GetFirst();

	lea	ecx, DWORD PTR _detit$[ebp]
	call	?GetFirst@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetFirst
	mov	DWORD PTR _e$[ebp], eax
$LN19@ChooseTarg:

; 1166 : 	while (e)

	cmp	DWORD PTR _e$[ebp], 0
	je	$LN18@ChooseTarg

; 1167 : 	{
; 1168 : 		if (GetRoE(who,e->GetTeam(),ROE_GROUND_FIRE) == ROE_ALLOWED)

	push	1
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	movzx	ecx, BYTE PTR _who$[ebp]
	push	ecx
	call	?GetRoE@@YAHEEH@Z			; GetRoE
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jne	$LN14@ChooseTarg

; 1169 : 		{
; 1170 : 			combat = 0;

	mov	DWORD PTR _combat$[ebp], 0

; 1171 : 			react = DetectVs(e,&d,&combat,&spot);

	lea	edx, DWORD PTR _spot$[ebp]
	push	edx
	lea	eax, DWORD PTR _combat$[ebp]
	push	eax
	lea	ecx, DWORD PTR _d$[ebp]
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DetectVs@TaskForceClass@@QAEHPAVCampBaseClass@@PAMPAH2@Z ; TaskForceClass::DetectVs
	mov	DWORD PTR _react$[ebp], eax

; 1172 : 			if (!e->IsFlight() && react >= best_reaction && d < react_distance)

	mov	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	jne	SHORT $LN16@ChooseTarg
	mov	ecx, DWORD PTR _react$[ebp]
	cmp	ecx, DWORD PTR _best_reaction$[ebp]
	jl	SHORT $LN16@ChooseTarg
	movss	xmm0, DWORD PTR _react_distance$[ebp]
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	SHORT $LN16@ChooseTarg

; 1173 : 			{
; 1174 : 				// React vs a ground/Naval target
; 1175 : 				best_reaction = react;

	mov	edx, DWORD PTR _react$[ebp]
	mov	DWORD PTR _best_reaction$[ebp], edx

; 1176 : 				react_distance = d;

	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _react_distance$[ebp], xmm0

; 1177 : 				react_against = e;

	mov	eax, DWORD PTR _e$[ebp]
	mov	DWORD PTR _react_against$[ebp], eax

; 1178 : 				SetEngaged(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEngaged@UnitClass@@QAEXH@Z		; UnitClass::SetEngaged

; 1179 : 				SetCombat(combat);

	mov	ecx, DWORD PTR _combat$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCombat@UnitClass@@QAEXH@Z		; UnitClass::SetCombat
	jmp	$LN14@ChooseTarg
$LN16@ChooseTarg:

; 1180 : 			}
; 1181 : 			else if (e->IsFlight() && react >= best_air_react && d < air_react_distance)

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [eax+248]
	call	edx
	test	eax, eax
	je	$LN14@ChooseTarg
	mov	eax, DWORD PTR _react$[ebp]
	cmp	eax, DWORD PTR _best_air_react$[ebp]
	jl	$LN14@ChooseTarg
	movss	xmm0, DWORD PTR _air_react_distance$[ebp]
	comiss	xmm0, DWORD PTR _d$[ebp]
	jbe	$LN14@ChooseTarg

; 1182 : 			{
; 1183 : 				// React vs an air target -
; 1184 : 				best_air_react = react;

	mov	ecx, DWORD PTR _react$[ebp]
	mov	DWORD PTR _best_air_react$[ebp], ecx

; 1185 : 				air_react_distance = d;

	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR _air_react_distance$[ebp], xmm0

; 1186 : 				air_react_against = e;

	mov	edx, DWORD PTR _e$[ebp]
	mov	DWORD PTR _air_react_against$[ebp], edx

; 1187 : 				if (!e->IsAggregate())

	mov	ecx, DWORD PTR _e$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	jne	$LN13@ChooseTarg

; 1188 : 				{
; 1189 : 					// Pick a specific aircraft in the flight if it's deaggregated
; 1190 : 					CampEnterCriticalSection();

	call	?CampEnterCriticalSection@@YAXXZ	; CampEnterCriticalSection

; 1191 : 					if (e->GetComponents())

	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	test	eax, eax
	je	$LN12@ChooseTarg

; 1192 : 					{
; 1193 : 						VuListIterator	cit(e->GetComponents());

	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	push	eax
	lea	ecx, DWORD PTR _cit$2[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 1194 : 						FalconEntity	*fe;
; 1195 : 						float			rsq,brsq=FLT_MAX;

	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR _brsq$6[ebp], xmm0

; 1196 : 
; 1197 : 						fe = (FalconEntity *)cit.GetFirst();

	lea	ecx, DWORD PTR _cit$2[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _fe$8[ebp], eax
$LN11@ChooseTarg:

; 1198 : 						while (fe)

	cmp	DWORD PTR _fe$8[ebp], 0
	je	SHORT $LN10@ChooseTarg

; 1199 : 						{
; 1200 : 							rsq = DistSqu(XPos(),YPos(),fe->XPos(),fe->YPos());

	mov	ecx, DWORD PTR _fe$8[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _fe$8[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?DistSqu@@YAMMMMM@Z			; DistSqu
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _rsq$7[ebp]

; 1201 : 							if (rsq < brsq)

	movss	xmm0, DWORD PTR _brsq$6[ebp]
	comiss	xmm0, DWORD PTR _rsq$7[ebp]
	jbe	SHORT $LN9@ChooseTarg

; 1202 : 							{
; 1203 : 								air_react_against = fe;

	mov	eax, DWORD PTR _fe$8[ebp]
	mov	DWORD PTR _air_react_against$[ebp], eax

; 1204 : 								air_react_distance = (float)sqrt(rsq);

	push	ecx
	movss	xmm0, DWORD PTR _rsq$7[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _air_react_distance$[ebp]

; 1205 : 								brsq = rsq;

	movss	xmm0, DWORD PTR _rsq$7[ebp]
	movss	DWORD PTR _brsq$6[ebp], xmm0
$LN9@ChooseTarg:

; 1206 : 							}
; 1207 : 							fe = (FalconEntity *)cit.GetNext();

	lea	ecx, DWORD PTR _cit$2[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _fe$8[ebp], eax

; 1208 : 						}

	jmp	SHORT $LN11@ChooseTarg
$LN10@ChooseTarg:

; 1209 : 					}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _cit$2[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
$LN12@ChooseTarg:

; 1210 : 					CampLeaveCriticalSection();

	call	?CampLeaveCriticalSection@@YAXXZ	; CampLeaveCriticalSection
$LN13@ChooseTarg:

; 1211 : 				}
; 1212 : 				// Make sure our radar is on (if we have one)
; 1213 : 				if (!IsEmitting() && class_data->RadarVehicle < 255 && GetNumVehicles(class_data->RadarVehicle))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+216]
	call	eax
	test	eax, eax
	jne	SHORT $LN8@ChooseTarg
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+236]
	movzx	eax, BYTE PTR [edx+328]
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN8@ChooseTarg
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+236]
	movzx	eax, BYTE PTR [edx+328]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNumVehicles@UnitClass@@QAEHH@Z	; UnitClass::GetNumVehicles
	test	eax, eax
	je	SHORT $LN8@ChooseTarg

; 1214 : 					SetEmitting(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEmitting@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetEmitting
$LN8@ChooseTarg:

; 1215 : 				SetEngaged(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEngaged@UnitClass@@QAEXH@Z		; UnitClass::SetEngaged

; 1216 : 				SetCombat(combat);

	mov	ecx, DWORD PTR _combat$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCombat@UnitClass@@QAEXH@Z		; UnitClass::SetCombat
$LN14@ChooseTarg:

; 1217 : 			}
; 1218 : 		}
; 1219 : 		e = (CampEntity)detit.GetNext();

	lea	ecx, DWORD PTR _detit$[ebp]
	call	?GetNext@VuGridIterator@@QAEPAVVuEntity@@XZ ; VuGridIterator::GetNext
	mov	DWORD PTR _e$[ebp], eax

; 1220 : 	}

	jmp	$LN19@ChooseTarg
$LN18@ChooseTarg:

; 1221 : 	SetOdds ((GetTotalVehicles() * 10) / (estr+10));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTotalVehicles@UnitClass@@QAEHXZ	; UnitClass::GetTotalVehicles
	imul	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _estr$[ebp]
	add	ecx, 10					; 0000000aH
	cdq
	idiv	ecx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetOdds@UnitClass@@QAEXF@Z		; UnitClass::SetOdds

; 1222 : 
; 1223 : 	if (!Parent() && best_reaction > 1)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Parent@UnitClass@@QBEHXZ		; UnitClass::Parent
	test	eax, eax
	jne	SHORT $LN7@ChooseTarg
	cmp	DWORD PTR _best_reaction$[ebp], 1
	jle	SHORT $LN7@ChooseTarg

; 1224 : 		EngageParent(this,react_against);

	mov	edx, DWORD PTR _react_against$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?EngageParent@@YAHPAVUnitClass@@PAVFalconEntity@@@Z ; EngageParent
	add	esp, 8
$LN7@ChooseTarg:

; 1225 : 
; 1226 : 	if (air_react_against)

	cmp	DWORD PTR _air_react_against$[ebp], 0
	je	SHORT $LN6@ChooseTarg

; 1227 : 	{
; 1228 : 		SetAirTarget(air_react_against);

	mov	ecx, DWORD PTR _air_react_against$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+992]
	call	edx

; 1229 : 		retval = 1;

	mov	DWORD PTR _retval$[ebp], 1
$LN6@ChooseTarg:

; 1230 : 	}
; 1231 : 	if (react_against)

	cmp	DWORD PTR _react_against$[ebp], 0
	je	SHORT $LN5@ChooseTarg

; 1232 : 	{
; 1233 : 		SetTarget(react_against);

	mov	eax, DWORD PTR _react_against$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTarget@UnitClass@@QAEXPAVFalconEntity@@@Z ; UnitClass::SetTarget

; 1234 : 		SetTargeted(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTargeted@UnitClass@@QAEXH@Z		; UnitClass::SetTargeted

; 1235 : 		retval = 1;

	mov	DWORD PTR _retval$[ebp], 1
	jmp	SHORT $LN3@ChooseTarg
$LN5@ChooseTarg:

; 1236 : 	}
; 1237 : 	else if (artTarget && (!artTarget->IsUnit() || ((Unit)artTarget)->Engaged()) && orders == GORD_SUPPORT)

	cmp	DWORD PTR _artTarget$[ebp], 0
	je	SHORT $LN3@ChooseTarg
	mov	ecx, DWORD PTR _artTarget$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _artTarget$[ebp]
	mov	eax, DWORD PTR [edx+232]
	call	eax
	test	eax, eax
	je	SHORT $LN2@ChooseTarg
	mov	ecx, DWORD PTR _artTarget$[ebp]
	call	?Engaged@UnitClass@@QBEHXZ		; UnitClass::Engaged
	test	eax, eax
	je	SHORT $LN3@ChooseTarg
$LN2@ChooseTarg:
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+268]
	cmp	edx, 7
	jne	SHORT $LN3@ChooseTarg

; 1238 : 	{
; 1239 : 		// Keep blowing away this target until the target gets out of range, disengages, or we get new orders
; 1240 : 		// (Target will get reset after a null DoCombat result)
; 1241 : 		SetTarget(artTarget);

	mov	eax, DWORD PTR _artTarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTarget@UnitClass@@QAEXPAVFalconEntity@@@Z ; UnitClass::SetTarget

; 1242 : 		SetTargeted(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTargeted@UnitClass@@QAEXH@Z		; UnitClass::SetTargeted

; 1243 : 		SetEngaged(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEngaged@UnitClass@@QAEXH@Z		; UnitClass::SetEngaged

; 1244 : 		SetCombat(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCombat@UnitClass@@QAEXH@Z		; UnitClass::SetCombat

; 1245 : 		return -1;			// We want to sit here and shoot until we can't any longer

	mov	DWORD PTR $T3[ebp], -1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _detit$[ebp]
	call	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
	mov	eax, DWORD PTR $T3[ebp]
	jmp	SHORT $LN24@ChooseTarg
$LN3@ChooseTarg:

; 1246 : 	}
; 1247 : 	if (nomove)

	cmp	DWORD PTR _nomove$[ebp], 0
	je	SHORT $LN1@ChooseTarg

; 1248 : 		return -1;

	mov	DWORD PTR $T4[ebp], -1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _detit$[ebp]
	call	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
	mov	eax, DWORD PTR $T4[ebp]
	jmp	SHORT $LN24@ChooseTarg
$LN1@ChooseTarg:

; 1249 : 	return retval;

	mov	ecx, DWORD PTR _retval$[ebp]
	mov	DWORD PTR $T5[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _detit$[ebp]
	call	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
	mov	eax, DWORD PTR $T5[ebp]
$LN24@ChooseTarg:

; 1250 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ChooseTarget@TaskForceClass@@UAEHXZ$0:
	lea	ecx, DWORD PTR _detit$[ebp]
	jmp	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
__unwindfunclet$?ChooseTarget@TaskForceClass@@UAEHXZ$1:
	lea	ecx, DWORD PTR _cit$2[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?ChooseTarget@TaskForceClass@@UAEHXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-180]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ChooseTarget@TaskForceClass@@UAEHXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ChooseTarget@TaskForceClass@@UAEHXZ ENDP		; TaskForceClass::ChooseTarget
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
tv712 = -104						; size = 8
tv683 = -96						; size = 8
tv656 = -88						; size = 8
tv634 = -80						; size = 8
tv612 = -72						; size = 8
tv598 = -64						; size = 8
_timetoaquire$ = -56					; size = 4
tv709 = -52						; size = 4
tv680 = -48						; size = 4
tv653 = -44						; size = 4
tv631 = -40						; size = 4
tv609 = -36						; size = 4
tv595 = -32						; size = 4
tv303 = -28						; size = 4
_out$ = -24						; size = 4
_radMode$ = -20						; size = 4
_timetosearch$ = -16					; size = 4
_skill$ = -12						; size = 4
_radarData$ = -8					; size = 4
_this$ = -4						; size = 4
_t$ = 8							; size = 4
_d$ = 12						; size = 4
_range$ = 16						; size = 4
?StepRadar@TaskForceClass@@UAEHHHM@Z PROC		; TaskForceClass::StepRadar
; _this$ = ecx

; 965  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 966  : 	int	radMode = GetRadarMode();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	call	eax
	mov	DWORD PTR _radMode$[ebp], eax

; 967  : 	if (IsAggregate())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	je	$LN35@StepRadar

; 968  : 	{
; 969  : 		// Check if we still have any radar vehicles
; 970  : 		if (class_data->RadarVehicle == 255 || !GetNumVehicles(class_data->RadarVehicle))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+236]
	movzx	eax, BYTE PTR [edx+328]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN39@StepRadar
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+236]
	movzx	eax, BYTE PTR [edx+328]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNumVehicles@UnitClass@@QAEHH@Z	; UnitClass::GetNumVehicles
	test	eax, eax
	jne	SHORT $LN40@StepRadar
$LN39@StepRadar:

; 971  : 			return FEC_RADAR_OFF;

	xor	eax, eax
	jmp	$LN42@StepRadar
$LN40@StepRadar:

; 972  : 
; 973  : 		// Check if we're already in our fire state
; 974  : 		if (radMode == FEC_RADAR_GUIDE || radMode == FEC_RADAR_SEARCH_100)

	cmp	DWORD PTR _radMode$[ebp], 6
	je	SHORT $LN37@StepRadar
	cmp	DWORD PTR _radMode$[ebp], 1
	jne	SHORT $LN38@StepRadar
$LN37@StepRadar:

; 975  : 			return radMode;

	mov	eax, DWORD PTR _radMode$[ebp]
	jmp	$LN42@StepRadar
$LN38@StepRadar:

; 976  : 
; 977  : 		// Check for switch over to guide
; 978  : 		if (radMode == FEC_RADAR_AQUIRE)

	cmp	DWORD PTR _radMode$[ebp], 5
	jne	SHORT $LN36@StepRadar

; 979  : 		{
; 980  : 			SetRadarMode(FEC_RADAR_GUIDE);

	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	call	eax

; 981  : 			return FEC_RADAR_GUIDE;

	mov	eax, 6
	jmp	$LN42@StepRadar

; 982  : 		}
; 983  : 		else

	jmp	$LN35@StepRadar
$LN36@StepRadar:

; 984  : 		{
; 985  : 			SetRadarMode(FEC_RADAR_AQUIRE);

	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	call	eax

; 986  : 			// KCK: Good operators could shoot before going to guide mode. Check skill and return TRUE
; 987  : 			if (GetRadarMode() == FEC_RADAR_AQUIRE && rand()%100 < TeamInfo[GetOwner()]->airDefenseExperience - MINIMUM_EXP_TO_FIRE_PREGUIDE)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	call	eax
	cmp	eax, 5
	jne	SHORT $LN34@StepRadar
	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	esi, edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	movzx	edx, al
	mov	eax, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	movzx	ecx, BYTE PTR [eax+613]
	movsx	edx, WORD PTR ?MINIMUM_EXP_TO_FIRE_PREGUIDE@@3FA ; MINIMUM_EXP_TO_FIRE_PREGUIDE
	sub	ecx, edx
	cmp	esi, ecx
	jge	SHORT $LN34@StepRadar

; 988  : 				SetRadarMode(FEC_RADAR_GUIDE);

	push	6
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	call	eax
$LN34@StepRadar:

; 989  : 			return GetRadarMode();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	call	eax
	jmp	$LN42@StepRadar
$LN35@StepRadar:

; 990  : 		}
; 991  : 	}
; 992  : 
; 993  : 	assert (range);
; 994  : 	/*
; 995  : 	   FEC_RADAR_OFF			0x00	   	// Radar always off
; 996  : 	   FEC_RADAR_SEARCH_100	0x01	   	// Search Radar - 100 % of the time (always on)
; 997  : 	   FEC_RADAR_SEARCH_1		0x02	   	// Search Sequence #1
; 998  : 	   FEC_RADAR_SEARCH_2		0x03	   	// Search Sequence #2
; 999  : 	   FEC_RADAR_SEARCH_3		0x04	   	// Search Sequence #3
; 1000 : 	   FEC_RADAR_AQUIRE		0x05	   	// Aquire Mode (looking for a target)
; 1001 : 	   FEC_RADAR_GUIDE			0x06	   	// Missile in flight. Death is imminent*/
; 1002 : 
; 1003 : 
; 1004 : 	// Check if we still have any radar vehicles
; 1005 : 	if (class_data->RadarVehicle == 255 || !GetNumVehicles(class_data->RadarVehicle ))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+236]
	movzx	eax, BYTE PTR [edx+328]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN32@StepRadar
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+236]
	movzx	eax, BYTE PTR [edx+328]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNumVehicles@UnitClass@@QAEHH@Z	; UnitClass::GetNumVehicles
	test	eax, eax
	jne	SHORT $LN33@StepRadar
$LN32@StepRadar:

; 1006 : 		return FEC_RADAR_OFF;

	xor	eax, eax
	jmp	$LN42@StepRadar
$LN33@StepRadar:

; 1007 : 
; 1008 : 	assert(radarDatFileTable != NULL);
; 1009 : 	RadarDataSet* radarData = &radarDatFileTable[((VehicleClassDataType *)Falcon4ClassTable[class_data->VehicleType[class_data->RadarVehicle]].dataPtr)->RadarType];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+236]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+236]
	movzx	eax, BYTE PTR [ecx+328]
	movsx	ecx, WORD PTR [edx+eax*2+68]
	imul	ecx, 81					; 00000051H
	mov	edx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	eax, DWORD PTR [edx+ecx+77]
	movsx	ecx, WORD PTR [eax+56]
	imul	ecx, 180				; 000000b4H
	add	ecx, DWORD PTR ?radarDatFileTable@@3PAURadarDataSet@@A ; radarDatFileTable
	mov	DWORD PTR _radarData$[ebp], ecx

; 1010 : 
; 1011 : 
; 1012 : 	// Check if we're already in our fire state
; 1013 : 	if (radMode == FEC_RADAR_SEARCH_100)

	cmp	DWORD PTR _radMode$[ebp], 1
	jne	SHORT $LN31@StepRadar

; 1014 : 		return radMode;

	mov	eax, DWORD PTR _radMode$[ebp]
	jmp	$LN42@StepRadar
$LN31@StepRadar:

; 1015 : 
; 1016 : 	// Check for switch over to guide
; 1017 : 	float skill = TeamInfo[GetOwner()]->airDefenseExperience/30.0f*1000; // from 1 - 3

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	movzx	edx, al
	mov	eax, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	movzx	ecx, BYTE PTR [eax+613]
	cvtsi2ss xmm0, ecx
	divss	xmm0, DWORD PTR __real@41f00000
	mulss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR _skill$[ebp], xmm0

; 1018 : 	skill *= (float)radarData->Timeskillfactor;

	mov	edx, DWORD PTR _radarData$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+84]
	mulss	xmm0, DWORD PTR _skill$[ebp]
	movss	DWORD PTR _skill$[ebp], xmm0

; 1019 : 	skill /=100.0f;

	movss	xmm0, DWORD PTR _skill$[ebp]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR _skill$[ebp], xmm0

; 1020 : 	float timetosearch ;
; 1021 : 	float timetoaquire ;
; 1022 : 	if (!d && !t) SetRadarMode(search_mode);

	cmp	DWORD PTR _d$[ebp], 0
	jne	SHORT $LN30@StepRadar
	cmp	DWORD PTR _t$[ebp], 0
	jne	SHORT $LN30@StepRadar
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+298]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+132]
	call	edx
$LN30@StepRadar:

; 1023 : 
; 1024 : 	if (GetRadarMode() == FEC_RADAR_CHANGEMODE && search_mode >= FEC_RADAR_SEARCH_1 )

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	call	eax
	cmp	eax, 7
	jne	SHORT $LN29@StepRadar
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+298]
	cmp	edx, 2
	jl	SHORT $LN29@StepRadar

; 1025 : 		SetRadarMode(search_mode);// we are changing mode.. realy not off

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+298]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+132]
	call	edx
$LN29@StepRadar:

; 1026 : 
; 1027 : 	switch (GetRadarMode())

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	call	eax
	mov	DWORD PTR tv303[ebp], eax
	cmp	DWORD PTR tv303[ebp], 6
	ja	$LN27@StepRadar
	mov	ecx, DWORD PTR tv303[ebp]
	jmp	DWORD PTR $LN44@StepRadar[ecx*4]
$LN26@StepRadar:

; 1028 : 	{
; 1029 : 			case FEC_RADAR_OFF:
; 1030 : 					timetosearch = radarData->Timetosearch1 - skill;

	mov	edx, DWORD PTR _radarData$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+16]
	subss	xmm0, DWORD PTR _skill$[ebp]
	movss	DWORD PTR _timetosearch$[ebp], xmm0

; 1031 : 					if (range <= radarData->Rangetosearch1 && !SEARCHtimer) SEARCHtimer = SimLibElapsedTime;

	mov	eax, DWORD PTR _radarData$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+40]
	comiss	xmm0, DWORD PTR _range$[ebp]
	jb	SHORT $LN25@StepRadar
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+300], 0
	jne	SHORT $LN25@StepRadar
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [edx+300], eax
	jmp	SHORT $LN23@StepRadar
$LN25@StepRadar:

; 1032 : 					else if (range >= radarData->Rangetosearch1 || SimLibElapsedTime - SEARCHtimer > timetosearch+6000.0f)SEARCHtimer = 0;

	mov	ecx, DWORD PTR _radarData$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+40]
	movss	xmm1, DWORD PTR _range$[ebp]
	comiss	xmm1, xmm0
	jae	SHORT $LN22@StepRadar
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	eax, DWORD PTR [edx+300]
	mov	DWORD PTR tv595[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv595[ebp]
	mov	ecx, DWORD PTR tv595[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv598[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv598[ebp]
	movss	xmm1, DWORD PTR _timetosearch$[ebp]
	addss	xmm1, DWORD PTR __real@45bb8000
	comiss	xmm0, xmm1
	jbe	SHORT $LN23@StepRadar
$LN22@StepRadar:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+300], 0
$LN23@StepRadar:

; 1033 : 					if (range <= radarData->Rangetosearch1 && SEARCHtimer && SimLibElapsedTime - SEARCHtimer > timetosearch )

	mov	eax, DWORD PTR _radarData$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+40]
	comiss	xmm0, DWORD PTR _range$[ebp]
	jb	SHORT $LN21@StepRadar
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+300], 0
	je	SHORT $LN21@StepRadar
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	eax, DWORD PTR [edx+300]
	mov	DWORD PTR tv609[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv609[ebp]
	mov	ecx, DWORD PTR tv609[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv612[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv612[ebp]
	comiss	xmm0, DWORD PTR _timetosearch$[ebp]
	jbe	SHORT $LN21@StepRadar

; 1034 : 					{
; 1035 : 						SEARCHtimer = SimLibElapsedTime;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [edx+300], eax

; 1036 : 						search_mode = FEC_RADAR_SEARCH_1 ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+298], 2

; 1037 : 						SetRadarMode(FEC_RADAR_SEARCH_1);

	push	2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+132]
	call	edx
$LN21@StepRadar:

; 1038 : 					}
; 1039 : 					break;

	jmp	$LN27@StepRadar
$LN20@StepRadar:

; 1040 : 			case FEC_RADAR_SEARCH_1:
; 1041 : 					AQUIREtimer = SimLibElapsedTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [eax+304], ecx

; 1042 : 					if (!SEARCHtimer) SEARCHtimer = SimLibElapsedTime;

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+300], 0
	jne	SHORT $LN19@StepRadar
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [eax+300], ecx
$LN19@StepRadar:

; 1043 : 					timetosearch = radarData->Timetosearch1 - skill;

	mov	edx, DWORD PTR _radarData$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+16]
	subss	xmm0, DWORD PTR _skill$[ebp]
	movss	DWORD PTR _timetosearch$[ebp], xmm0

; 1044 : 					if (d && range <= radarData->Rangetosearch2 && SimLibElapsedTime - SEARCHtimer >= timetosearch)  

	cmp	DWORD PTR _d$[ebp], 0
	je	SHORT $LN18@StepRadar
	mov	eax, DWORD PTR _radarData$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+44]
	comiss	xmm0, DWORD PTR _range$[ebp]
	jb	SHORT $LN18@StepRadar
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	edx, DWORD PTR [ecx+300]
	mov	DWORD PTR tv631[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv631[ebp]
	mov	eax, DWORD PTR tv631[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv634[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv634[ebp]
	comiss	xmm0, DWORD PTR _timetosearch$[ebp]
	jb	SHORT $LN18@StepRadar

; 1045 : 					{
; 1046 : 						SetRadarMode(FEC_RADAR_CHANGEMODE);

	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	call	eax

; 1047 : 						search_mode = FEC_RADAR_SEARCH_2;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+298], 3

; 1048 : 						SEARCHtimer = SimLibElapsedTime;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [edx+300], eax
$LN18@StepRadar:

; 1049 : 					}
; 1050 : 					break;

	jmp	$LN27@StepRadar
$LN17@StepRadar:

; 1051 : 			case FEC_RADAR_SEARCH_2:
; 1052 : 					AQUIREtimer = SimLibElapsedTime;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [ecx+304], edx

; 1053 : 					timetosearch = radarData->Timetosearch2 - skill;

	mov	eax, DWORD PTR _radarData$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+20]
	subss	xmm0, DWORD PTR _skill$[ebp]
	movss	DWORD PTR _timetosearch$[ebp], xmm0

; 1054 : 					if (!SEARCHtimer) SEARCHtimer = SimLibElapsedTime;

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+300], 0
	jne	SHORT $LN16@StepRadar
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [edx+300], eax
$LN16@StepRadar:

; 1055 : 					if (d && range <= radarData->Rangetosearch3 &&  SimLibElapsedTime - SEARCHtimer >= timetosearch)

	cmp	DWORD PTR _d$[ebp], 0
	je	SHORT $LN15@StepRadar
	mov	ecx, DWORD PTR _radarData$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+48]
	comiss	xmm0, DWORD PTR _range$[ebp]
	jb	SHORT $LN15@StepRadar
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	eax, DWORD PTR [edx+300]
	mov	DWORD PTR tv653[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv653[ebp]
	mov	ecx, DWORD PTR tv653[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv656[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv656[ebp]
	comiss	xmm0, DWORD PTR _timetosearch$[ebp]
	jb	SHORT $LN15@StepRadar

; 1056 : 					{
; 1057 : 						search_mode =FEC_RADAR_SEARCH_3;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+298], 4

; 1058 : 						SetRadarMode(FEC_RADAR_CHANGEMODE);

	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	call	eax

; 1059 : 						SEARCHtimer = SimLibElapsedTime;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [ecx+300], edx
	jmp	SHORT $LN13@StepRadar
$LN15@StepRadar:

; 1060 : 					}
; 1061 : 					else if (!d)// no detection step search down

	cmp	DWORD PTR _d$[ebp], 0
	jne	SHORT $LN13@StepRadar

; 1062 : 					{
; 1063 : 						SetRadarMode(FEC_RADAR_CHANGEMODE);

	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	call	eax

; 1064 : 						search_mode = FEC_RADAR_SEARCH_1 ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+298], 2

; 1065 : 						SEARCHtimer = SimLibElapsedTime;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [edx+300], eax
$LN13@StepRadar:

; 1066 : 					}
; 1067 : 					break;

	jmp	$LN27@StepRadar
$LN12@StepRadar:

; 1068 : 			case FEC_RADAR_SEARCH_3:
; 1069 : 					AQUIREtimer = SimLibElapsedTime;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [ecx+304], edx

; 1070 : 					timetosearch = radarData->Timetosearch3 - skill;

	mov	eax, DWORD PTR _radarData$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+24]
	subss	xmm0, DWORD PTR _skill$[ebp]
	movss	DWORD PTR _timetosearch$[ebp], xmm0

; 1071 : 					if (!SEARCHtimer) SEARCHtimer = SimLibElapsedTime;		

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+300], 0
	jne	SHORT $LN11@StepRadar
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [edx+300], eax
$LN11@StepRadar:

; 1072 : 					// goto aquire ?
; 1073 : 					if (d && range <= radarData->Rangetoacuire && SimLibElapsedTime - SEARCHtimer >= timetosearch )

	cmp	DWORD PTR _d$[ebp], 0
	je	SHORT $LN10@StepRadar
	mov	ecx, DWORD PTR _radarData$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+52]
	comiss	xmm0, DWORD PTR _range$[ebp]
	jb	SHORT $LN10@StepRadar
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	eax, DWORD PTR [edx+300]
	mov	DWORD PTR tv680[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv680[ebp]
	mov	ecx, DWORD PTR tv680[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv683[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv683[ebp]
	comiss	xmm0, DWORD PTR _timetosearch$[ebp]
	jb	SHORT $LN10@StepRadar

; 1074 : 					{
; 1075 : 						search_mode =FEC_RADAR_AQUIRE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+298], 5

; 1076 : 						SetRadarMode(FEC_RADAR_CHANGEMODE);

	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	call	eax

; 1077 : 						AQUIREtimer = SimLibElapsedTime;		

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [ecx+304], edx
	jmp	SHORT $LN8@StepRadar
$LN10@StepRadar:

; 1078 : 					}
; 1079 : 					else if(!d)//  no detection step search down

	cmp	DWORD PTR _d$[ebp], 0
	jne	SHORT $LN8@StepRadar

; 1080 : 					{
; 1081 : 						SetRadarMode(FEC_RADAR_CHANGEMODE);

	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	call	eax

; 1082 : 						search_mode = FEC_RADAR_SEARCH_2 ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+298], 3

; 1083 : 						SEARCHtimer = SimLibElapsedTime;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [edx+300], eax
$LN8@StepRadar:

; 1084 : 					}
; 1085 : 					break;

	jmp	$LN27@StepRadar
$LN7@StepRadar:

; 1086 : 			case FEC_RADAR_AQUIRE:
; 1087 : 					SEARCHtimer = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+300], 0

; 1088 : 					timetoaquire = radarData->Timetoacuire - skill;

	mov	edx, DWORD PTR _radarData$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+28]
	subss	xmm0, DWORD PTR _skill$[ebp]
	movss	DWORD PTR _timetoaquire$[ebp], xmm0

; 1089 : 					// only allow to be in aquire for the coast amount of time
; 1090 : 					if (!t && !d && SimLibElapsedTime - AQUIREtimer >= (unsigned)radarData->Timetocoast)

	cmp	DWORD PTR _t$[ebp], 0
	jne	SHORT $LN6@StepRadar
	cmp	DWORD PTR _d$[ebp], 0
	jne	SHORT $LN6@StepRadar
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	ecx, DWORD PTR [eax+304]
	mov	edx, DWORD PTR _radarData$[ebp]
	cmp	ecx, DWORD PTR [edx+36]
	jb	SHORT $LN6@StepRadar

; 1091 : 					{
; 1092 : 						SetRadarMode(FEC_RADAR_CHANGEMODE);

	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	call	eax

; 1093 : 						search_mode = FEC_RADAR_SEARCH_3 ; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+298], 4
	jmp	SHORT $LN4@StepRadar
$LN6@StepRadar:

; 1094 : 					}
; 1095 : 					else if (t && range <= radarData->Rangetoguide && SimLibElapsedTime - AQUIREtimer >= timetoaquire)

	cmp	DWORD PTR _t$[ebp], 0
	je	SHORT $LN4@StepRadar
	mov	edx, DWORD PTR _radarData$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+56]
	comiss	xmm0, DWORD PTR _range$[ebp]
	jb	SHORT $LN4@StepRadar
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	ecx, DWORD PTR [eax+304]
	mov	DWORD PTR tv709[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv709[ebp]
	mov	edx, DWORD PTR tv709[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv712[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv712[ebp]
	comiss	xmm0, DWORD PTR _timetoaquire$[ebp]
	jb	SHORT $LN4@StepRadar

; 1096 : 					{
; 1097 : 						search_mode =FEC_RADAR_GUIDE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+298], 6

; 1098 : 						SetRadarMode(FEC_RADAR_CHANGEMODE);

	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	call	eax

; 1099 : 						return FEC_RADAR_GUIDE;

	mov	eax, 6
	jmp	SHORT $LN42@StepRadar
$LN4@StepRadar:

; 1100 : 					}
; 1101 : 					break;

	jmp	SHORT $LN27@StepRadar
$LN3@StepRadar:

; 1102 : 			case FEC_RADAR_GUIDE:
; 1103 : 					AQUIREtimer = SimLibElapsedTime;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [ecx+304], edx

; 1104 : 					search_mode = FEC_RADAR_AQUIRE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+298], 5

; 1105 : 					if (!t) SetRadarMode(FEC_RADAR_CHANGEMODE);

	cmp	DWORD PTR _t$[ebp], 0
	jne	SHORT $LN2@StepRadar
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	call	eax
$LN2@StepRadar:
$LN27@StepRadar:

; 1106 : 					break;
; 1107 : 	}
; 1108 : 
; 1109 : 
; 1110 : 
; 1111 : 	/*	else if (SimLibElapsedTime - AQUIREtimer > timetoaquire)
; 1112 : 		{
; 1113 : 	// KCK: Good operators could shoot before going to guide mode. Check skill and return TRUE
; 1114 : 	if (GetRadarMode() == FEC_RADAR_AQUIRE && rand()%100 < TeamInfo[GetOwner()]->airDefenseExperience - MINIMUM_EXP_TO_FIRE_PREGUIDE)
; 1115 : 	{
; 1116 : 	search_mode = FEC_RADAR_AQUIRE ;
; 1117 : 	SetRadarMode(FEC_RADAR_GUIDE);
; 1118 : 	}
; 1119 : 	}
; 1120 : 	 */
; 1121 : 	int out = GetRadarMode();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	call	eax
	mov	DWORD PTR _out$[ebp], eax

; 1122 : 	if (out == FEC_RADAR_OFF) out = search_mode;

	cmp	DWORD PTR _out$[ebp], 0
	jne	SHORT $LN1@StepRadar
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+298]
	mov	DWORD PTR _out$[ebp], edx
$LN1@StepRadar:

; 1123 : 	return out;

	mov	eax, DWORD PTR _out$[ebp]
$LN42@StepRadar:

; 1124 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN44@StepRadar:
	DD	$LN26@StepRadar
	DD	$LN27@StepRadar
	DD	$LN20@StepRadar
	DD	$LN17@StepRadar
	DD	$LN12@StepRadar
	DD	$LN7@StepRadar
	DD	$LN3@StepRadar
?StepRadar@TaskForceClass@@UAEHHHM@Z ENDP		; TaskForceClass::StepRadar
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?SetSearchMode@TaskForceClass@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mode$ = 8						; size = 1
?SetSearchMode@TaskForceClass@@UAEXE@Z PROC		; TaskForceClass::SetSearchMode, COMDAT
; _this$ = ecx

; 120  : 	virtual void SetSearchMode (uchar mode)				{ search_mode = mode; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _mode$[ebp]
	mov	BYTE PTR [eax+298], cl
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSearchMode@TaskForceClass@@UAEXE@Z ENDP		; TaskForceClass::SetSearchMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReturnToSearch@TaskForceClass@@UAEXXZ PROC		; TaskForceClass::ReturnToSearch
; _this$ = ecx

; 953  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 954  : 	if (missiles_flying < 1 && IsEmitting())

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+296]
	cmp	ecx, 1
	jge	SHORT $LN4@ReturnToSe
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+216]
	call	edx
	test	eax, eax
	je	SHORT $LN4@ReturnToSe

; 955  : 	{
; 956  : 		radar_mode = search_mode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+298]
	mov	BYTE PTR [eax+297], dl

; 957  : 		if (radar_mode == FEC_RADAR_OFF)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+297]
	test	ecx, ecx
	jne	SHORT $LN3@ReturnToSe

; 958  : 			SetEmitting(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEmitting@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetEmitting
$LN3@ReturnToSe:

; 959  : 	}

	jmp	SHORT $LN5@ReturnToSe
$LN4@ReturnToSe:

; 960  : 	else if (!IsEmitting())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+216]
	call	edx
	test	eax, eax
	jne	SHORT $LN5@ReturnToSe

; 961  : 		radar_mode = FEC_RADAR_OFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+297], 0
$LN5@ReturnToSe:

; 962  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ReturnToSearch@TaskForceClass@@UAEXXZ ENDP		; TaskForceClass::ReturnToSearch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?SetRadarMode@TaskForceClass@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mode$ = 8						; size = 1
?SetRadarMode@TaskForceClass@@UAEXE@Z PROC		; TaskForceClass::SetRadarMode, COMDAT
; _this$ = ecx

; 115  : 	virtual void SetRadarMode (uchar mode)				{ radar_mode = mode; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _mode$[ebp]
	mov	BYTE PTR [eax+297], cl
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRadarMode@TaskForceClass@@UAEXE@Z ENDP		; TaskForceClass::SetRadarMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?GetRadarMode@TaskForceClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRadarMode@TaskForceClass@@UAEHXZ PROC		; TaskForceClass::GetRadarMode, COMDAT
; _this$ = ecx

; 112  : 	virtual int GetRadarMode (void)						{ return radar_mode; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+297]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRadarMode@TaskForceClass@@UAEHXZ ENDP		; TaskForceClass::GetRadarMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_wid$ = 8						; size = 4
?CanShootWeapon@TaskForceClass@@UAEHH@Z PROC		; TaskForceClass::CanShootWeapon
; _this$ = ecx

; 943  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 944  : 	if(WeaponDataTable[wid].GuidanceFlags & WEAP_RADAR && missiles_flying > 1)

	mov	eax, DWORD PTR _wid$[ebp]
	imul	eax, 60					; 0000003cH
	mov	ecx, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movzx	edx, WORD PTR [ecx+eax+42]
	and	edx, 4
	je	SHORT $LN3@CanShootWe
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+296]
	cmp	ecx, 1
	jle	SHORT $LN3@CanShootWe

; 945  : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN4@CanShootWe
$LN3@CanShootWe:

; 946  : 	// Check for radar guidance, and make adjustments if necessary
; 947  : 	if (!(WeaponDataTable[wid].GuidanceFlags & WEAP_RADAR) || GetRadarMode() == FEC_RADAR_GUIDE || GetRadarMode() == FEC_RADAR_SEARCH_100)

	mov	edx, DWORD PTR _wid$[ebp]
	imul	edx, 60					; 0000003cH
	mov	eax, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movzx	ecx, WORD PTR [eax+edx+42]
	and	ecx, 4
	je	SHORT $LN1@CanShootWe
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+128]
	call	edx
	cmp	eax, 6
	je	SHORT $LN1@CanShootWe
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	call	eax
	cmp	eax, 1
	jne	SHORT $LN2@CanShootWe
$LN1@CanShootWe:

; 948  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN4@CanShootWe
$LN2@CanShootWe:

; 949  : 	return FALSE;

	xor	eax, eax
$LN4@CanShootWe:

; 950  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CanShootWeapon@TaskForceClass@@UAEHH@Z ENDP		; TaskForceClass::CanShootWeapon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
tv197 = -52						; size = 8
_sincos$ = -44						; size = 8
tv239 = -36						; size = 4
tv233 = -32						; size = 4
_heading$ = -28						; size = 4
_movetime$ = -24					; size = 4
_speed$ = -20						; size = 4
_dist$ = -16						; size = 4
tv194 = -12						; size = 4
_h$ = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?GetRealPosition@TaskForceClass@@UAEXPAM00@Z PROC	; TaskForceClass::GetRealPosition
; _this$ = ecx

; 839  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 840  : 	// This will use the last move time to determine the real x,y & z of the unit
; 841  : 	float			movetime = (float)(SimLibElapsedTime - last_move) / VU_TICS_PER_SECOND;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	ecx, DWORD PTR [eax+260]
	mov	DWORD PTR tv194[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv194[ebp]
	mov	edx, DWORD PTR tv194[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv197[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv197[ebp]
	divss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR _movetime$[ebp], xmm0

; 842  : 	float			speed;
; 843  : 	float			heading;
; 844  : 	float			dist;
; 845  : 	int				h = GetNextMoveDirection();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+920]
	call	eax
	mov	DWORD PTR _h$[ebp], eax

; 846  : 	mlTrig			sincos;
; 847  : 
; 848  : 	if (h < 0 || h > 7 || SimLibElapsedTime < last_move)

	cmp	DWORD PTR _h$[ebp], 0
	jl	SHORT $LN1@GetRealPos
	cmp	DWORD PTR _h$[ebp], 7
	jg	SHORT $LN1@GetRealPos
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	edx, DWORD PTR [ecx+260]
	jae	SHORT $LN2@GetRealPos
$LN1@GetRealPos:

; 849  : 	{
; 850  : 		*x = XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	eax, DWORD PTR _x$[ebp]
	fstp	DWORD PTR [eax]

; 851  : 		*y = YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	ecx, DWORD PTR _y$[ebp]
	fstp	DWORD PTR [ecx]

; 852  : 		*z = TheMap.GetMEA(XPos(),YPos());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	call	?GetMEA@TMap@@QAEMMM@Z			; TMap::GetMEA
	mov	edx, DWORD PTR _z$[ebp]
	fstp	DWORD PTR [edx]

; 853  : 		return;

	jmp	$LN3@GetRealPos
$LN2@GetRealPos:

; 854  : 	}
; 855  : 
; 856  : 	speed = (float) GetUnitSpeed() * KPH_TO_FPS;

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	call	eax
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3f693e32
	movss	DWORD PTR _speed$[ebp], xmm0

; 857  : 	dist = speed * movetime;

	movss	xmm0, DWORD PTR _speed$[ebp]
	mulss	xmm0, DWORD PTR _movetime$[ebp]
	movss	DWORD PTR _dist$[ebp], xmm0

; 858  : 	heading = h * 45.0F * DTR;

	cvtsi2ss xmm0, DWORD PTR _h$[ebp]
	mulss	xmm0, DWORD PTR __real@42340000
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR _heading$[ebp], xmm0

; 859  : 	mlSinCos(&sincos, heading);

	push	ecx
	movss	xmm0, DWORD PTR _heading$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _sincos$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 860  : 	*x = XPos() + dist * sincos.cos;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv233[ebp]
	movss	xmm0, DWORD PTR tv233[ebp]
	movss	xmm1, DWORD PTR _dist$[ebp]
	mulss	xmm1, DWORD PTR _sincos$[ebp+4]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _x$[ebp]
	movss	DWORD PTR [edx], xmm0

; 861  : 	*y = YPos() + dist * sincos.sin;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv239[ebp]
	movss	xmm0, DWORD PTR tv239[ebp]
	movss	xmm1, DWORD PTR _dist$[ebp]
	mulss	xmm1, DWORD PTR _sincos$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax], xmm0

; 862  : 	*z = TheMap.GetMEA(XPos(),YPos());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, OFFSET ?TheMap@@3VTMap@@A		; TheMap
	call	?GetMEA@TMap@@QAEMMM@Z			; TMap::GetMEA
	mov	ecx, DWORD PTR _z$[ebp]
	fstp	DWORD PTR [ecx]
$LN3@GetRealPos:

; 863  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetRealPosition@TaskForceClass@@UAEXPAM00@Z ENDP	; TaskForceClass::GetRealPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?GetCombatTime@TaskForceClass@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCombatTime@TaskForceClass@@UAEKXZ PROC		; TaskForceClass::GetCombatTime, COMDAT
; _this$ = ecx

; 109  : 	virtual CampaignTime GetCombatTime (void)		{ return TheCampaign.CurrentTime - last_combat; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	sub	ecx, DWORD PTR [eax+264]
	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCombatTime@TaskForceClass@@UAEKXZ ENDP		; TaskForceClass::GetCombatTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?SetCombatTime@TaskForceClass@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?SetCombatTime@TaskForceClass@@UAEXK@Z PROC		; TaskForceClass::SetCombatTime, COMDAT
; _this$ = ecx

; 108  : 	virtual void SetCombatTime (CampaignTime t)			{ last_combat = t; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax+264], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCombatTime@TaskForceClass@@UAEXK@Z ENDP		; TaskForceClass::SetCombatTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMoveTime@TaskForceClass@@UAEKXZ PROC		; TaskForceClass::GetMoveTime
; _this$ = ecx

; 829  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 830  : 	if (last_move && TheCampaign.CurrentTime > last_move)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+260], 0
	je	SHORT $LN1@GetMoveTim
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	cmp	edx, DWORD PTR [ecx+260]
	jbe	SHORT $LN1@GetMoveTim

; 831  : 		return TheCampaign.CurrentTime - last_move;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	sub	ecx, DWORD PTR [eax+260]
	mov	eax, ecx
	jmp	SHORT $LN2@GetMoveTim
$LN1@GetMoveTim:

; 832  : 
; 833  : 	last_move = TheCampaign.CurrentTime;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	mov	DWORD PTR [edx+260], eax

; 834  : 
; 835  : 	return 0;

	xor	eax, eax
$LN2@GetMoveTim:

; 836  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetMoveTime@TaskForceClass@@UAEKXZ ENDP		; TaskForceClass::GetMoveTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?GetUnitSupply@TaskForceClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitSupply@TaskForceClass@@UAEHXZ PROC		; TaskForceClass::GetUnitSupply, COMDAT
; _this$ = ecx

; 106  : 	virtual int GetUnitSupply (void)				{ return (int)supply; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+270]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitSupply@TaskForceClass@@UAEHXZ ENDP		; TaskForceClass::GetUnitSupply
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?GetUnitOrders@TaskForceClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitOrders@TaskForceClass@@UAEHXZ PROC		; TaskForceClass::GetUnitOrders, COMDAT
; _this$ = ecx

; 105  : 	virtual int GetUnitOrders (void)				{ return orders; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+268]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitOrders@TaskForceClass@@UAEHXZ ENDP		; TaskForceClass::GetUnitOrders
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?GetNextMoveDirection@TaskForceClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNextMoveDirection@TaskForceClass@@UAEHXZ PROC	; TaskForceClass::GetNextMoveDirection, COMDAT
; _this$ = ecx

; 104  : 	virtual int GetNextMoveDirection (void)			{ return path.GetNextDirection(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	?GetNextDirection@BasePathClass@@QAEHXZ	; BasePathClass::GetNextDirection
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextMoveDirection@TaskForceClass@@UAEHXZ ENDP	; TaskForceClass::GetNextMoveDirection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?ClearUnitPath@TaskForceClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearUnitPath@TaskForceClass@@UAEXXZ PROC		; TaskForceClass::ClearUnitPath, COMDAT
; _this$ = ecx

; 103  : 	virtual void ClearUnitPath (void)				{ path.ClearPath(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	?ClearPath@BasePathClass@@QAEXXZ	; BasePathClass::ClearPath
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearUnitPath@TaskForceClass@@UAEXXZ ENDP		; TaskForceClass::ClearUnitPath
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?SetUnitNextMove@TaskForceClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetUnitNextMove@TaskForceClass@@UAEXXZ PROC		; TaskForceClass::SetUnitNextMove, COMDAT
; _this$ = ecx

; 102  : 	virtual void SetUnitNextMove (void)				{ path.StepPath(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	?StepPath@BasePathClass@@QAEXXZ		; BasePathClass::StepPath
	mov	esp, ebp
	pop	ebp
	ret	0
?SetUnitNextMove@TaskForceClass@@UAEXXZ ENDP		; TaskForceClass::SetUnitNextMove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?SetUnitSupply@TaskForceClass@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 1
?SetUnitSupply@TaskForceClass@@UAEXE@Z PROC		; TaskForceClass::SetUnitSupply, COMDAT
; _this$ = ecx

; 101  : 	virtual void SetUnitSupply (uchar s)				{ supply = s; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _s$[ebp]
	mov	BYTE PTR [eax+270], cl
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitSupply@TaskForceClass@@UAEXE@Z ENDP		; TaskForceClass::SetUnitSupply
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?SetUnitOrders@TaskForceClass@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_o$ = 8							; size = 1
?SetUnitOrders@TaskForceClass@@UAEXE@Z PROC		; TaskForceClass::SetUnitOrders, COMDAT
; _this$ = ecx

; 100  : 	virtual void SetUnitOrders (uchar o)				{ orders = o; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _o$[ebp]
	mov	BYTE PTR [eax+268], cl
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitOrders@TaskForceClass@@UAEXE@Z ENDP		; TaskForceClass::SetUnitOrders
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
_vc$1 = -36						; size = 4
_type$ = -32						; size = 4
_uc$2 = -28						; size = 4
_oc$3 = -24						; size = 4
_this$ = -20						; size = 4
_o$4 = -16						; size = 4
_pt$ = -12						; size = 4
_x$5 = -8						; size = 2
_y$6 = -4						; size = 2
_slot$ = 8						; size = 4
_installation$ = 12					; size = 4
?GetDeaggregationPoint@TaskForceClass@@UAEHHPAPAVCampBaseClass@@@Z PROC ; TaskForceClass::GetDeaggregationPoint
; _this$ = ecx

; 319  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 320  : 	int			pt=0,type;

	mov	DWORD PTR _pt$[ebp], 0

; 321  : 	static int	last_pt, index = 0;
; 322  : 
; 323  : 	if (!*installation)

	mov	eax, DWORD PTR _installation$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN11@GetDeaggre

; 324  : 	{
; 325  : 		// We're looking for a new list, so clear statics
; 326  : 		last_pt = index = 0;

	mov	DWORD PTR ?index@?1??GetDeaggregationPoint@TaskForceClass@@UAEHHPAPAVCampBaseClass@@@Z@4HA, 0
	mov	ecx, DWORD PTR ?index@?1??GetDeaggregationPoint@TaskForceClass@@UAEHHPAPAVCampBaseClass@@@Z@4HA
	mov	DWORD PTR ?last_pt@?1??GetDeaggregationPoint@TaskForceClass@@UAEHHPAPAVCampBaseClass@@@Z@4HA, ecx

; 327  : 
; 328  : 		// Check if we care about placement
; 329  : 		if (!Moving())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Moving@UnitClass@@QBEHXZ		; UnitClass::Moving
	test	eax, eax
	jne	$LN11@GetDeaggre

; 330  : 		{
; 331  : 			// Find the appropriate installation
; 332  : 			GridIndex	x,y;
; 333  : 			Objective	o;
; 334  : 			GetLocation(&x,&y);

	lea	edx, DWORD PTR _y$6[ebp]
	push	edx
	lea	eax, DWORD PTR _x$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 335  : 			o = FindNearestObjective (x,y,NULL,0);

	push	0
	push	0
	movzx	ecx, WORD PTR _y$6[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$5[ebp]
	push	edx
	call	?FindNearestObjective@@YAPAVObjectiveClass@@FFPAMF@Z ; FindNearestObjective
	add	esp, 16					; 00000010H
	mov	DWORD PTR _o$4[ebp], eax

; 336  : 			*installation = o;

	mov	eax, DWORD PTR _installation$[ebp]
	mov	ecx, DWORD PTR _o$4[ebp]
	mov	DWORD PTR [eax], ecx

; 337  : 
; 338  : 			// Find the appropriate list
; 339  : 			if (o)

	cmp	DWORD PTR _o$4[ebp], 0
	je	SHORT $LN11@GetDeaggre

; 340  : 			{
; 341  : 				ObjClassDataType	*oc = o->GetObjectiveClassData();

	mov	ecx, DWORD PTR _o$4[ebp]
	call	?GetObjectiveClassData@ObjectiveClass@@QAEPAUObjClassDataType@@XZ ; ObjectiveClass::GetObjectiveClassData
	mov	DWORD PTR _oc$3[ebp], eax

; 342  : 				index = oc->PtDataIndex;

	mov	edx, DWORD PTR _oc$3[ebp]
	movsx	eax, WORD PTR [edx+26]
	mov	DWORD PTR ?index@?1??GetDeaggregationPoint@TaskForceClass@@UAEHHPAPAVCampBaseClass@@@Z@4HA, eax
$LN8@GetDeaggre:

; 343  : 				while (index)

	cmp	DWORD PTR ?index@?1??GetDeaggregationPoint@TaskForceClass@@UAEHHPAPAVCampBaseClass@@@Z@4HA, 0
	je	SHORT $LN11@GetDeaggre

; 344  : 				{
; 345  : 					if (PtHeaderDataTable[index].type == DockListType)

	mov	ecx, DWORD PTR ?index@?1??GetDeaggregationPoint@TaskForceClass@@UAEHHPAPAVCampBaseClass@@@Z@4HA
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR ?PtHeaderDataTable@@3PAUPtHeaderDataType@@A ; PtHeaderDataTable
	movzx	eax, BYTE PTR [edx+ecx+2]
	cmp	eax, 16					; 00000010H
	jne	SHORT $LN6@GetDeaggre

; 346  : 					{
; 347  : 						// The first time we look, we just want to know if we have a list.
; 348  : 						// Return now.
; 349  : 						return index;

	mov	eax, DWORD PTR ?index@?1??GetDeaggregationPoint@TaskForceClass@@UAEHHPAPAVCampBaseClass@@@Z@4HA
	jmp	$LN12@GetDeaggre
$LN6@GetDeaggre:

; 350  : 					}
; 351  : 					index = PtHeaderDataTable[index].nextHeader;

	mov	ecx, DWORD PTR ?index@?1??GetDeaggregationPoint@TaskForceClass@@UAEHHPAPAVCampBaseClass@@@Z@4HA
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR ?PtHeaderDataTable@@3PAUPtHeaderDataType@@A ; PtHeaderDataTable
	movsx	eax, WORD PTR [edx+ecx+26]
	mov	DWORD PTR ?index@?1??GetDeaggregationPoint@TaskForceClass@@UAEHHPAPAVCampBaseClass@@@Z@4HA, eax

; 352  : 				}

	jmp	SHORT $LN8@GetDeaggre
$LN11@GetDeaggre:

; 353  : #ifdef DEBUG
; 354  : 				FILE	*fp = fopen("PtDatErr.log","a");
; 355  : 				if (fp)
; 356  : 				{
; 357  : 					char		name[80];
; 358  : 					o->GetName(name,79,FALSE);
; 359  : 					fprintf(fp, "Obj %s @ %d,%d: No header list of type %d.\n",name,x,y,DockListType);
; 360  : 					fclose(fp);
; 361  : 				}
; 362  : #endif
; 363  : 			}
; 364  : 		}
; 365  : 	}
; 366  : 
; 367  : 	if (index)

	cmp	DWORD PTR ?index@?1??GetDeaggregationPoint@TaskForceClass@@UAEHHPAPAVCampBaseClass@@@Z@4HA, 0
	je	$LN5@GetDeaggre

; 368  : 	{
; 369  : 		// We have a list, and want to find the correct point
; 370  : 		UnitClassDataType		*uc = GetUnitClassData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnitClassData@UnitClass@@QAEPAUUnitClassDataType@@XZ ; UnitClass::GetUnitClassData
	mov	DWORD PTR _uc$2[ebp], eax

; 371  : 		VehicleClassDataType	*vc = GetVehicleClassData(uc->VehicleType[slot]);

	mov	ecx, DWORD PTR _slot$[ebp]
	mov	edx, DWORD PTR _uc$2[ebp]
	movsx	eax, WORD PTR [edx+ecx*2+68]
	push	eax
	call	?GetVehicleClassData@@YAPAUVehicleClassDataType@@H@Z ; GetVehicleClassData
	add	esp, 4
	mov	DWORD PTR _vc$1[ebp], eax

; 372  : 
; 373  : 		// Check which type of point we're looking for
; 374  : 		// TODO: Check ship type here...
; 375  : 		//		type = SmallDockPt;
; 376  : 		type = LargeDockPt;

	mov	DWORD PTR _type$[ebp], 14		; 0000000eH

; 377  : 
; 378  : 		// Return the next point, if it's the base type 
; 379  : 		// NOTE: Log error if we don't have enough points of this type
; 380  : 		if (last_pt)

	cmp	DWORD PTR ?last_pt@?1??GetDeaggregationPoint@TaskForceClass@@UAEHHPAPAVCampBaseClass@@@Z@4HA, 0
	je	SHORT $LN4@GetDeaggre

; 381  : 		{
; 382  : 			last_pt = pt = GetNextPt(last_pt);

	mov	ecx, DWORD PTR ?last_pt@?1??GetDeaggregationPoint@TaskForceClass@@UAEHHPAPAVCampBaseClass@@@Z@4HA
	push	ecx
	call	?GetNextPt@@YAHH@Z			; GetNextPt
	add	esp, 4
	mov	DWORD PTR _pt$[ebp], eax
	mov	edx, DWORD PTR _pt$[ebp]
	mov	DWORD PTR ?last_pt@?1??GetDeaggregationPoint@TaskForceClass@@UAEHHPAPAVCampBaseClass@@@Z@4HA, edx

; 383  : #ifdef DEBUG
; 384  : 			if (!pt || PtDataTable[pt].type != type)
; 385  : 			{
; 386  : 				FILE	*fp = fopen("PtDatErr.log","a");
; 387  : 				if (fp)
; 388  : 				{
; 389  : 					char		name[80];
; 390  : 					GridIndex	x,y;
; 391  : 					(*installation)->GetName(name,79,FALSE);
; 392  : 					(*installation)->GetLocation(&x,&y);
; 393  : 					fprintf(fp, "HeaderList %d (Obj %s @ %d,%d): Insufficient points of type %d.\n",index,name,x,y,type);
; 394  : 					fclose(fp);
; 395  : 				}
; 396  : 			}
; 397  : #endif
; 398  : 			return pt;

	mov	eax, DWORD PTR _pt$[ebp]
	jmp	SHORT $LN12@GetDeaggre
$LN4@GetDeaggre:

; 399  : 		}
; 400  : 
; 401  : 		// Find one of the appropriate type
; 402  : 		pt = GetFirstPt(index);

	mov	eax, DWORD PTR ?index@?1??GetDeaggregationPoint@TaskForceClass@@UAEHHPAPAVCampBaseClass@@@Z@4HA
	push	eax
	call	?GetFirstPt@@YAHH@Z			; GetFirstPt
	add	esp, 4
	mov	DWORD PTR _pt$[ebp], eax
$LN3@GetDeaggre:

; 403  : 		while (pt)

	cmp	DWORD PTR _pt$[ebp], 0
	je	SHORT $LN5@GetDeaggre

; 404  : 		{
; 405  : 			if (PtDataTable[pt].type == type)

	mov	ecx, DWORD PTR _pt$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR ?PtDataTable@@3PAUPtDataType@@A ; PtDataTable
	movzx	eax, BYTE PTR [edx+ecx+8]
	cmp	eax, DWORD PTR _type$[ebp]
	jne	SHORT $LN1@GetDeaggre

; 406  : 			{
; 407  : 				last_pt = pt;

	mov	ecx, DWORD PTR _pt$[ebp]
	mov	DWORD PTR ?last_pt@?1??GetDeaggregationPoint@TaskForceClass@@UAEHHPAPAVCampBaseClass@@@Z@4HA, ecx

; 408  : 				return pt;

	mov	eax, DWORD PTR _pt$[ebp]
	jmp	SHORT $LN12@GetDeaggre
$LN1@GetDeaggre:

; 409  : 			}
; 410  : 			pt = GetNextPt(pt);

	mov	edx, DWORD PTR _pt$[ebp]
	push	edx
	call	?GetNextPt@@YAHH@Z			; GetNextPt
	add	esp, 4
	mov	DWORD PTR _pt$[ebp], eax

; 411  : 		}

	jmp	SHORT $LN3@GetDeaggre
$LN5@GetDeaggre:

; 412  : #ifdef DEBUG
; 413  : 		FILE	*fp = fopen("PtDatErr.log","a");
; 414  : 		if (fp)
; 415  : 		{
; 416  : 			char		name[80];
; 417  : 			GridIndex	x,y;
; 418  : 			(*installation)->GetName(name,79,FALSE);
; 419  : 			(*installation)->GetLocation(&x,&y);
; 420  : 			fprintf(fp, "HeaderList %d (Obj %s @ %d,%d): No points of type %d.\n",index,name,x,y,type);
; 421  : 			fclose(fp);
; 422  : 		}
; 423  : #endif
; 424  : 	}
; 425  : 	return pt;

	mov	eax, DWORD PTR _pt$[ebp]
$LN12@GetDeaggre:

; 426  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetDeaggregationPoint@TaskForceClass@@UAEHHPAPAVCampBaseClass@@@Z ENDP ; TaskForceClass::GetDeaggregationPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
tv619 = -80						; size = 4
tv613 = -76						; size = 4
tv607 = -72						; size = 4
tv601 = -68						; size = 4
tv595 = -64						; size = 4
tv589 = -60						; size = 4
tv583 = -56						; size = 4
tv577 = -52						; size = 4
_dy$1 = -48						; size = 4
_dx$2 = -44						; size = 4
_w$3 = -40						; size = 4
tv283 = -36						; size = 4
_ptIndexAt$ = -32					; size = 4
_dist$ = -28						; size = 4
_i$ = -24						; size = 4
_this$ = -20						; size = 4
_ux$4 = -16						; size = 2
_uy$5 = -12						; size = 2
_wx$6 = -8						; size = 2
_wy$7 = -4						; size = 2
_simdata$ = 8						; size = 4
_remote$ = 12						; size = 4
?GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z PROC ; TaskForceClass::GetVehicleDeagData
; _this$ = ecx

; 185  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 186  : 	static CampEntity		ent;
; 187  : 	static int				round;
; 188  : 	int						dist, i, ptIndexAt;
; 189  : 
; 190  : 	// Reinitialize static vars upon query of first vehicle
; 191  : 	if (simdata->vehicleInUnit < 0)

	mov	eax, DWORD PTR _simdata$[ebp]
	movsx	ecx, WORD PTR [eax+42]
	test	ecx, ecx
	jge	$LN23@GetVehicle

; 192  : 	{
; 193  : 		simdata->vehicleInUnit = 0;

	xor	edx, edx
	mov	eax, DWORD PTR _simdata$[ebp]
	mov	WORD PTR [eax+42], dx

; 194  : 		ent = NULL;

	mov	DWORD PTR ?ent@?1??GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A, 0

; 195  : 
; 196  : 		if (!remote)

	cmp	DWORD PTR _remote$[ebp], 0
	jne	$LN19@GetVehicle

; 197  : 		{
; 198  : 			// Used only in port
; 199  : 			round = 0;

	mov	DWORD PTR ?round@?1??GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z@4HA, 0

; 200  : 			simdata->ptIndex = GetDeaggregationPoint(0, &ent);

	push	OFFSET ?ent@?1??GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+468]
	call	eax
	mov	ecx, DWORD PTR _simdata$[ebp]
	mov	DWORD PTR [ecx+84], eax

; 201  : 			if (simdata->ptIndex) {

	mov	edx, DWORD PTR _simdata$[ebp]
	cmp	DWORD PTR [edx+84], 0
	je	SHORT $LN21@GetVehicle

; 202  : 				// Yuck!  The first call returns only the list index, NOT a real point index.
; 203  : 				// To ensure we have at least one set of points we have to actually query for them
; 204  : 				// then reset again...
; 205  : 				simdata->ptIndex = GetDeaggregationPoint(0, &ent);

	push	OFFSET ?ent@?1??GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+468]
	call	eax
	mov	ecx, DWORD PTR _simdata$[ebp]
	mov	DWORD PTR [ecx+84], eax

; 206  : 				if (simdata->ptIndex) 

	mov	edx, DWORD PTR _simdata$[ebp]
	cmp	DWORD PTR [edx+84], 0
	je	SHORT $LN20@GetVehicle

; 207  : 					simdata->ptIndex = GetDeaggregationPoint(0, &ent);

	push	OFFSET ?ent@?1??GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+468]
	call	eax
	mov	ecx, DWORD PTR _simdata$[ebp]
	mov	DWORD PTR [ecx+84], eax
$LN20@GetVehicle:

; 208  : 				ent = NULL;

	mov	DWORD PTR ?ent@?1??GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A, 0

; 209  : 				GetDeaggregationPoint(0, &ent);

	push	OFFSET ?ent@?1??GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+468]
	call	edx
$LN21@GetVehicle:

; 210  : 			}
; 211  : 
; 212  : 			// Used only at sea
; 213  : 			WayPoint			w;
; 214  : 			w = GetCurrentUnitWP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	mov	DWORD PTR _w$3[ebp], eax

; 215  : 			if (w)

	cmp	DWORD PTR _w$3[ebp], 0
	je	SHORT $LN19@GetVehicle

; 216  : 			{
; 217  : 				// Find heading to next waypoint
; 218  : 				GridIndex	ux,uy,wx,wy;
; 219  : 				GetLocation(&ux,&uy);

	lea	eax, DWORD PTR _uy$5[ebp]
	push	eax
	lea	ecx, DWORD PTR _ux$4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 220  : 				w->GetWPLocation(&wx,&wy);

	lea	edx, DWORD PTR _wy$7[ebp]
	push	edx
	lea	eax, DWORD PTR _wx$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$3[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 221  : 				simdata->heading = AngleTo(ux,uy,wx,wy);

	movzx	ecx, WORD PTR _wy$7[ebp]
	push	ecx
	movzx	edx, WORD PTR _wx$6[ebp]
	push	edx
	movzx	eax, WORD PTR _uy$5[ebp]
	push	eax
	movzx	ecx, WORD PTR _ux$4[ebp]
	push	ecx
	call	?AngleTo@@YAMFFFF@Z			; AngleTo
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _simdata$[ebp]
	fstp	DWORD PTR [edx+68]
$LN19@GetVehicle:

; 222  : 			}
; 223  : 		}
; 224  : 	}
; 225  : 	else

	jmp	SHORT $LN18@GetVehicle
$LN23@GetVehicle:

; 226  : 	{
; 227  : 		simdata->vehicleInUnit++;

	mov	eax, DWORD PTR _simdata$[ebp]
	mov	cx, WORD PTR [eax+42]
	add	cx, 1
	mov	edx, DWORD PTR _simdata$[ebp]
	mov	WORD PTR [edx+42], cx
$LN18@GetVehicle:

; 228  : 	}
; 229  : 
; 230  : 	if (!remote)

	cmp	DWORD PTR _remote$[ebp], 0
	jne	$LN12@GetVehicle

; 231  : 	{
; 232  : 		if (simdata->ptIndex) {

	mov	eax, DWORD PTR _simdata$[ebp]
	cmp	DWORD PTR [eax+84], 0
	je	$LN16@GetVehicle

; 233  : 			// In port
; 234  : 			float	dx, dy;
; 235  : 
; 236  : 			// Find the center point and direction point for this ship
; 237  : 			simdata->ptIndex = GetDeaggregationPoint(simdata->campSlot, &ent);

	push	OFFSET ?ent@?1??GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A
	mov	ecx, DWORD PTR _simdata$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+468]
	call	eax
	mov	ecx, DWORD PTR _simdata$[ebp]
	mov	DWORD PTR [ecx+84], eax

; 238  : 			ptIndexAt        = GetDeaggregationPoint(simdata->campSlot, &ent);

	push	OFFSET ?ent@?1??GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A
	mov	edx, DWORD PTR _simdata$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+468]
	call	eax
	mov	DWORD PTR _ptIndexAt$[ebp], eax

; 239  : 
; 240  : 			if (!ptIndexAt)

	cmp	DWORD PTR _ptIndexAt$[ebp], 0
	jne	SHORT $LN15@GetVehicle

; 241  : 			{
; 242  : 				ShiAssert( !simdata->ptIndex );	// We should always have an even number of points
; 243  : 
; 244  : 				// Reuse the old points, but with an offset
; 245  : 				ent = NULL;

	mov	DWORD PTR ?ent@?1??GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A, 0

; 246  : 				GetDeaggregationPoint(simdata->campSlot, &ent);		// Reset

	push	OFFSET ?ent@?1??GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A
	mov	ecx, DWORD PTR _simdata$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+468]
	call	eax

; 247  : 				simdata->ptIndex = GetDeaggregationPoint(simdata->campSlot, &ent);

	push	OFFSET ?ent@?1??GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A
	mov	ecx, DWORD PTR _simdata$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+468]
	call	eax
	mov	ecx, DWORD PTR _simdata$[ebp]
	mov	DWORD PTR [ecx+84], eax

; 248  : 				ptIndexAt        = GetDeaggregationPoint(simdata->campSlot, &ent);

	push	OFFSET ?ent@?1??GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A
	mov	edx, DWORD PTR _simdata$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+468]
	call	eax
	mov	DWORD PTR _ptIndexAt$[ebp], eax

; 249  : 				round++;

	mov	ecx, DWORD PTR ?round@?1??GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
	add	ecx, 1
	mov	DWORD PTR ?round@?1??GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z@4HA, ecx
$LN15@GetVehicle:

; 250  : 			}
; 251  : 			ShiAssert( ptIndexAt );		// We must have at least two points (center and toward)
; 252  : 			TranslatePointData(ent, simdata->ptIndex, &simdata->x, &simdata->y);

	mov	edx, DWORD PTR _simdata$[ebp]
	add	edx, 60					; 0000003cH
	push	edx
	mov	eax, DWORD PTR _simdata$[ebp]
	add	eax, 56					; 00000038H
	push	eax
	mov	ecx, DWORD PTR _simdata$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	eax, DWORD PTR ?ent@?1??GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z@4PAVCampBaseClass@@A
	push	eax
	call	?TranslatePointData@@YAXPAVCampBaseClass@@HPAM1@Z ; TranslatePointData
	add	esp, 16					; 00000010H

; 253  : 
; 254  : 			// Face toward the "at" point
; 255  : 			dx = PtDataTable[ptIndexAt].yOffset - PtDataTable[simdata->ptIndex].yOffset; // KCK NOTE: axis' are reversed

	mov	ecx, DWORD PTR _ptIndexAt$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _simdata$[ebp]
	mov	eax, DWORD PTR [edx+84]
	imul	eax, 12					; 0000000cH
	mov	edx, DWORD PTR ?PtDataTable@@3PAUPtDataType@@A ; PtDataTable
	mov	esi, DWORD PTR ?PtDataTable@@3PAUPtDataType@@A ; PtDataTable
	movss	xmm0, DWORD PTR [edx+ecx+4]
	subss	xmm0, DWORD PTR [esi+eax+4]
	movss	DWORD PTR _dx$2[ebp], xmm0

; 256  : 			dy = PtDataTable[ptIndexAt].xOffset - PtDataTable[simdata->ptIndex].xOffset; // KCK NOTE: axis' are reversed

	mov	eax, DWORD PTR _ptIndexAt$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _simdata$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	imul	edx, 12					; 0000000cH
	mov	ecx, DWORD PTR ?PtDataTable@@3PAUPtDataType@@A ; PtDataTable
	mov	esi, DWORD PTR ?PtDataTable@@3PAUPtDataType@@A ; PtDataTable
	movss	xmm0, DWORD PTR [ecx+eax]
	subss	xmm0, DWORD PTR [esi+edx]
	movss	DWORD PTR _dy$1[ebp], xmm0

; 257  : 			simdata->heading = (float)atan2(dx,dy);

	cvtss2sd xmm0, DWORD PTR _dy$1[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _dx$2[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _simdata$[ebp]
	fstp	DWORD PTR [edx+68]

; 258  : 
; 259  : 			// If we reused a point, shift our center point along the at vector
; 260  : 			simdata->x += dx * round;

	cvtsi2ss xmm0, DWORD PTR ?round@?1??GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
	mulss	xmm0, DWORD PTR _dx$2[ebp]
	mov	eax, DWORD PTR _simdata$[ebp]
	addss	xmm0, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR _simdata$[ebp]
	movss	DWORD PTR [ecx+56], xmm0

; 261  : 			simdata->y += dy * round;

	cvtsi2ss xmm0, DWORD PTR ?round@?1??GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z@4HA
	mulss	xmm0, DWORD PTR _dy$1[ebp]
	mov	edx, DWORD PTR _simdata$[ebp]
	addss	xmm0, DWORD PTR [edx+60]
	mov	eax, DWORD PTR _simdata$[ebp]
	movss	DWORD PTR [eax+60], xmm0

; 262  : 		} else {

	jmp	$LN12@GetVehicle
$LN16@GetVehicle:

; 263  : 			// At sea
; 264  : 			dist = (simdata->vehicleInUnit - 1) >> 2;

	mov	ecx, DWORD PTR _simdata$[ebp]
	movsx	edx, WORD PTR [ecx+42]
	sub	edx, 1
	sar	edx, 2
	mov	DWORD PTR _dist$[ebp], edx

; 265  : 			switch ( (simdata->vehicleInUnit - 1) & 0x3 )

	mov	eax, DWORD PTR _simdata$[ebp]
	movsx	ecx, WORD PTR [eax+42]
	sub	ecx, 1
	and	ecx, 3
	mov	DWORD PTR tv283[ebp], ecx
	je	SHORT $LN11@GetVehicle
	cmp	DWORD PTR tv283[ebp], 1
	je	SHORT $LN10@GetVehicle
	cmp	DWORD PTR tv283[ebp], 2
	je	$LN9@GetVehicle
	jmp	$LN8@GetVehicle
$LN11@GetVehicle:

; 266  : 			{
; 267  : 					case 0:
; 268  : 							simdata->x = XPos() - 1500.0f - 1500.0f * dist;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv577[ebp]
	movss	xmm0, DWORD PTR tv577[ebp]
	subss	xmm0, DWORD PTR __real@44bb8000
	cvtsi2ss xmm1, DWORD PTR _dist$[ebp]
	mulss	xmm1, DWORD PTR __real@44bb8000
	subss	xmm0, xmm1
	mov	edx, DWORD PTR _simdata$[ebp]
	movss	DWORD PTR [edx+56], xmm0

; 269  : 							simdata->y = YPos() - 1500.0f - 1500.0f * dist;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv583[ebp]
	movss	xmm0, DWORD PTR tv583[ebp]
	subss	xmm0, DWORD PTR __real@44bb8000
	cvtsi2ss xmm1, DWORD PTR _dist$[ebp]
	mulss	xmm1, DWORD PTR __real@44bb8000
	subss	xmm0, xmm1
	mov	eax, DWORD PTR _simdata$[ebp]
	movss	DWORD PTR [eax+60], xmm0

; 270  : 							break;

	jmp	$LN12@GetVehicle
$LN10@GetVehicle:

; 271  : 					case 1:
; 272  : 							simdata->x = XPos() + 1500.0f + 1500.0f * dist;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv589[ebp]
	movss	xmm0, DWORD PTR tv589[ebp]
	addss	xmm0, DWORD PTR __real@44bb8000
	cvtsi2ss xmm1, DWORD PTR _dist$[ebp]
	mulss	xmm1, DWORD PTR __real@44bb8000
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _simdata$[ebp]
	movss	DWORD PTR [ecx+56], xmm0

; 273  : 							simdata->y = YPos() - 1500.0f - 1500.0f * dist;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv595[ebp]
	movss	xmm0, DWORD PTR tv595[ebp]
	subss	xmm0, DWORD PTR __real@44bb8000
	cvtsi2ss xmm1, DWORD PTR _dist$[ebp]
	mulss	xmm1, DWORD PTR __real@44bb8000
	subss	xmm0, xmm1
	mov	edx, DWORD PTR _simdata$[ebp]
	movss	DWORD PTR [edx+60], xmm0

; 274  : 							break;

	jmp	$LN12@GetVehicle
$LN9@GetVehicle:

; 275  : 					case 2:
; 276  : 							simdata->x = XPos() + 1500.0f + 1500.0f * dist;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv601[ebp]
	movss	xmm0, DWORD PTR tv601[ebp]
	addss	xmm0, DWORD PTR __real@44bb8000
	cvtsi2ss xmm1, DWORD PTR _dist$[ebp]
	mulss	xmm1, DWORD PTR __real@44bb8000
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _simdata$[ebp]
	movss	DWORD PTR [eax+56], xmm0

; 277  : 							simdata->y = YPos() + 1500.0f + 1500.0f * dist;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv607[ebp]
	movss	xmm0, DWORD PTR tv607[ebp]
	addss	xmm0, DWORD PTR __real@44bb8000
	cvtsi2ss xmm1, DWORD PTR _dist$[ebp]
	mulss	xmm1, DWORD PTR __real@44bb8000
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _simdata$[ebp]
	movss	DWORD PTR [ecx+60], xmm0

; 278  : 							break;

	jmp	SHORT $LN12@GetVehicle
$LN8@GetVehicle:

; 279  : 					case 3:
; 280  : 					default:
; 281  : 							simdata->x = XPos() - 1500.0f - 1500.0f * dist;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv613[ebp]
	movss	xmm0, DWORD PTR tv613[ebp]
	subss	xmm0, DWORD PTR __real@44bb8000
	cvtsi2ss xmm1, DWORD PTR _dist$[ebp]
	mulss	xmm1, DWORD PTR __real@44bb8000
	subss	xmm0, xmm1
	mov	edx, DWORD PTR _simdata$[ebp]
	movss	DWORD PTR [edx+56], xmm0

; 282  : 							simdata->y = YPos() + 1500.0f + 1500.0f * dist;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv619[ebp]
	movss	xmm0, DWORD PTR tv619[ebp]
	addss	xmm0, DWORD PTR __real@44bb8000
	cvtsi2ss xmm1, DWORD PTR _dist$[ebp]
	mulss	xmm1, DWORD PTR __real@44bb8000
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _simdata$[ebp]
	movss	DWORD PTR [eax+60], xmm0
$LN12@GetVehicle:

; 283  : 							break;
; 284  : 			}
; 285  : 		}
; 286  : 	}
; 287  : 
; 288  : 	// We're always at sea level
; 289  : 	simdata->z = 0.0f;

	mov	ecx, DWORD PTR _simdata$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+64], xmm0

; 290  : 
; 291  : 	// Determine skill (Sim only uses it for anti-air stuff right now, so bow to expedience
; 292  : 	simdata->skill = ((TeamInfo[GetOwner()]->airDefenseExperience - 60) / 10) + rand()%3 - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	movzx	edx, al
	mov	eax, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[edx*4]
	movzx	eax, BYTE PTR [eax+613]
	sub	eax, 60					; 0000003cH
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	esi, eax
	call	_rand
	cdq
	mov	ecx, 3
	idiv	ecx
	lea	edx, DWORD PTR [esi+edx-1]
	mov	eax, DWORD PTR _simdata$[ebp]
	mov	WORD PTR [eax+44], dx

; 293  : 	//	simdata->skill = ((TeamInfo[GetOwner()]->navalExperience - 60) / 10) + rand()%3 - 1;
; 294  : 
; 295  : 	// Clamp it to legal sim side values
; 296  : 	if (simdata->skill > 4)

	mov	ecx, DWORD PTR _simdata$[ebp]
	movsx	edx, WORD PTR [ecx+44]
	cmp	edx, 4
	jle	SHORT $LN7@GetVehicle

; 297  : 		simdata->skill = 4;

	mov	eax, 4
	mov	ecx, DWORD PTR _simdata$[ebp]
	mov	WORD PTR [ecx+44], ax
$LN7@GetVehicle:

; 298  : 	if (simdata->skill < 0)

	mov	edx, DWORD PTR _simdata$[ebp]
	movsx	eax, WORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $LN6@GetVehicle

; 299  : 		simdata->skill = 0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _simdata$[ebp]
	mov	WORD PTR [edx+44], cx
$LN6@GetVehicle:

; 300  : 
; 301  : 	// Weapon loadout
; 302  : 	for (i=0; i<HARDPOINT_MAX; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@GetVehicle
$LN4@GetVehicle:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@GetVehicle:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN3@GetVehicle

; 303  : 	{
; 304  : 		simdata->weapon[i] = GetUnitWeaponId(i,simdata->campSlot);

	mov	ecx, DWORD PTR _simdata$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+584]
	call	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _simdata$[ebp]
	mov	WORD PTR [edx+ecx*2+96], ax

; 305  : 		if (simdata->weapon[i])

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _simdata$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2+96]
	test	edx, edx
	je	SHORT $LN2@GetVehicle

; 306  : 			simdata->weapons[i] = GetUnitWeaponCount(i,simdata->campSlot);

	mov	eax, DWORD PTR _simdata$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+588]
	call	eax
	mov	ecx, DWORD PTR _simdata$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx+128], al

; 307  : 		else

	jmp	SHORT $LN1@GetVehicle
$LN2@GetVehicle:

; 308  : 			simdata->weapons[i] = 0;

	mov	edx, DWORD PTR _simdata$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx+128], 0
$LN1@GetVehicle:

; 309  : 	}

	jmp	SHORT $LN4@GetVehicle
$LN3@GetVehicle:

; 310  : 
; 311  : 	simdata->playerSlot = NO_PILOT;

	mov	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _simdata$[ebp]
	mov	WORD PTR [ecx+40], ax

; 312  : 	simdata->waypointList = CloneWPToList(GetFirstUnitWP(),NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ; UnitClass::GetFirstUnitWP
	push	eax
	call	?CloneWPToList@@YAPAVWayPointClass@@PAV1@0@Z ; CloneWPToList
	add	esp, 8
	mov	edx, DWORD PTR _simdata$[ebp]
	mov	DWORD PTR [edx+160], eax

; 313  : 
; 314  : 	return  MOTION_GND_AI;

	mov	eax, 262144				; 00040000H

; 315  : }	

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?GetVehicleDeagData@TaskForceClass@@UAEHPAVSimInitDataClass@@H@Z ENDP ; TaskForceClass::GetVehicleDeagData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?OnGround@TaskForceClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnGround@TaskForceClass@@UAEHXZ PROC			; TaskForceClass::OnGround, COMDAT
; _this$ = ecx

; 95   : 	virtual int OnGround (void)						{ return TRUE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?OnGround@TaskForceClass@@UAEHXZ ENDP			; TaskForceClass::OnGround
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?IsTaskForce@TaskForceClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTaskForce@TaskForceClass@@UAEHXZ PROC		; TaskForceClass::IsTaskForce, COMDAT
; _this$ = ecx

; 94   : 	virtual int IsTaskForce (void)					{ return TRUE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTaskForce@TaskForceClass@@UAEHXZ ENDP		; TaskForceClass::IsTaskForce
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?CombatTime@TaskForceClass@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CombatTime@TaskForceClass@@UAEKXZ PROC			; TaskForceClass::CombatTime, COMDAT
; _this$ = ecx

; 93   : 	virtual CampaignTime CombatTime (void)			{ return NAVAL_COMBAT_CHECK_INTERVAL*CampaignSeconds; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	movsx	eax, WORD PTR ?NAVAL_COMBAT_CHECK_INTERVAL@@3FA ; NAVAL_COMBAT_CHECK_INTERVAL
	imul	eax, 1000				; 000003e8H
	mov	esp, ebp
	pop	ebp
	ret	0
?CombatTime@TaskForceClass@@UAEKXZ ENDP			; TaskForceClass::CombatTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?MaxUpdateTime@TaskForceClass@@UBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MaxUpdateTime@TaskForceClass@@UBEKXZ PROC		; TaskForceClass::MaxUpdateTime, COMDAT
; _this$ = ecx

; 89   : 	virtual CampaignTime MaxUpdateTime() const		{ return NAVAL_MOVE_CHECK_INTERVAL*CampaignSeconds; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	movsx	eax, WORD PTR ?NAVAL_MOVE_CHECK_INTERVAL@@3FA ; NAVAL_MOVE_CHECK_INTERVAL
	imul	eax, 1000				; 000003e8H
	mov	esp, ebp
	pop	ebp
	ret	0
?MaxUpdateTime@TaskForceClass@@UBEKXZ ENDP		; TaskForceClass::MaxUpdateTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?SetAirTarget@TaskForceClass@@UAEXPAVFalconEntity@@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?SetAirTarget@TaskForceClass@@UAEXPAVFalconEntity@@@Z PROC ; TaskForceClass::SetAirTarget, COMDAT
; _this$ = ecx

; 87   : 	virtual void SetAirTarget (FalconEntity *t)		{ if (t) air_target = t->Id(); else air_target = FalconNullId; }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _t$[ebp], 0
	je	SHORT $LN2@SetAirTarg
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+288], ecx
	mov	DWORD PTR [eax+292], edx
	jmp	SHORT $LN3@SetAirTarg
$LN2@SetAirTarg:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [ecx+288], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [ecx+292], eax
$LN3@SetAirTarg:
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAirTarget@TaskForceClass@@UAEXPAVFalconEntity@@@Z ENDP ; TaskForceClass::SetAirTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?GetAirTarget@TaskForceClass@@UAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAirTarget@TaskForceClass@@UAEPAVFalconEntity@@XZ PROC ; TaskForceClass::GetAirTarget, COMDAT
; _this$ = ecx

; 86   : 	virtual FalconEntity* GetAirTarget (void)		{ return (FalconEntity*)vuDatabase->Find(air_target); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	push	ecx
	mov	edx, DWORD PTR [eax+288]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAirTarget@TaskForceClass@@UAEPAVFalconEntity@@XZ ENDP ; TaskForceClass::GetAirTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?GetAirTargetID@TaskForceClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetAirTargetID@TaskForceClass@@UAE?AVVU_ID@@XZ PROC	; TaskForceClass::GetAirTargetID, COMDAT
; _this$ = ecx

; 85   : 	virtual VU_ID GetAirTargetID (void)				{ return air_target; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+288]
	mov	edx, DWORD PTR [eax+292]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAirTargetID@TaskForceClass@@UAE?AVVU_ID@@XZ ENDP	; TaskForceClass::GetAirTargetID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitSpeed@TaskForceClass@@UBEHXZ PROC		; TaskForceClass::GetUnitSpeed
; _this$ = ecx

; 180  : int TaskForceClass::GetUnitSpeed() const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 181  : 	return GetMaxSpeed();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMaxSpeed@UnitClass@@QBEHXZ		; UnitClass::GetMaxSpeed

; 182  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitSpeed@TaskForceClass@@UBEHXZ ENDP		; TaskForceClass::GetUnitSpeed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?Real@TaskForceClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Real@TaskForceClass@@UAEHXZ PROC			; TaskForceClass::Real, COMDAT
; _this$ = ecx

; 83   : 	virtual int Real (void)							{ return 1; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?Real@TaskForceClass@@UAEHXZ ENDP			; TaskForceClass::Real
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_tid$ = 8						; size = 4
?CheckTactic@TaskForceClass@@UAEHH@Z PROC		; TaskForceClass::CheckTactic
; _this$ = ecx

; 824  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 825  : 	return 0;

	xor	eax, eax

; 826  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CheckTactic@TaskForceClass@@UAEHH@Z ENDP		; TaskForceClass::CheckTactic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ChooseTactic@TaskForceClass@@UAEHXZ PROC		; TaskForceClass::ChooseTactic
; _this$ = ecx

; 819  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 820  : 	return NULL;

	xor	eax, eax

; 821  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ChooseTactic@TaskForceClass@@UAEHXZ ENDP		; TaskForceClass::ChooseTactic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
_a$1 = -16						; size = 4
_e$2 = -12						; size = 4
_combat$ = -8						; size = 4
_this$ = -4						; size = 4
?DoCombat@TaskForceClass@@UAEHXZ PROC			; TaskForceClass::DoCombat
; _this$ = ecx

; 539  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 540  : 	int combat;
; 541  : 	SetCombatTime(TheCampaign.CurrentTime);

	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+596]
	call	eax

; 542  : 
; 543  : #if 0 // JPO mthis stuff now done in Choose Target - like Battalion
; 544  : 	// KCK: Super simple targetting (c)
; 545  : 	Team				who = GetTeam();
; 546  : 	CampEntity			e;
; 547  : 	FalconEntity		*react_against=NULL,*air_react_against=NULL;
; 548  : 	int					react,spot,best_reaction=1,best_air_react=1;
; 549  : 	int					search_dist;
; 550  : 	float				react_distance,air_react_distance,d;
; 551  : 	react_distance = air_react_distance = 9999.0F;
; 552  : 
; 553  : 	SetEngaged(0);
; 554  : 	SetCombat(0);
; 555  : 	SetChecked();
; 556  : 
; 557  : 	search_dist = GetDetectionRange(Air);
; 558  : #ifdef VU_GRID_TREE_Y_MAJOR
; 559  : 	VuGridIterator detit(RealUnitProxList,YPos(),XPos(),(BIG_SCALAR)GridToSim(search_dist));
; 560  : #else
; 561  : 	VuGridIterator detit(RealUnitProxList,XPos(),YPos(),(BIG_SCALAR)GridToSim(search_dist));
; 562  : #endif
; 563  : 	e = (CampEntity)detit.GetFirst();
; 564  : 	while (e)
; 565  : 	{
; 566  : 		if (GetRoE(who,e->GetTeam(),ROE_GROUND_FIRE) == ROE_ALLOWED)
; 567  : 		{
; 568  : 			combat = 0;
; 569  : 			react = DetectVs(e,&d,&combat,&spot);
; 570  : 			if (!e->IsFlight() && react >= best_reaction && d < react_distance)
; 571  : 			{
; 572  : 				// React vs a ground/Naval target
; 573  : 				best_reaction = react;
; 574  : 				react_distance = d;
; 575  : 				react_against = e;
; 576  : 				SetEngaged(1);
; 577  : 				SetCombat(combat);
; 578  : 			}
; 579  : 			else if (e->IsFlight() && react >= best_air_react && d < air_react_distance)
; 580  : 			{
; 581  : 				// React vs an air target -
; 582  : 				best_air_react = react;
; 583  : 				air_react_distance = d;
; 584  : 				air_react_against = e;
; 585  : 				if (!e->IsAggregate())
; 586  : 				{
; 587  : 					// Pick a specific aircraft in the flight if it's deaggregated
; 588  : 					CampEnterCriticalSection();
; 589  : 					if (e->GetComponents())
; 590  : 					{
; 591  : 						VuListIterator	cit(e->GetComponents());
; 592  : 						FalconEntity	*fe;
; 593  : 						float			rsq,brsq=FLT_MAX;
; 594  : 
; 595  : 						fe = (FalconEntity *)cit.GetFirst();
; 596  : 						while (fe)
; 597  : 						{
; 598  : 							rsq = DistSqu(XPos(),YPos(),fe->XPos(),fe->YPos());
; 599  : 							if (rsq < brsq)
; 600  : 							{
; 601  : 								air_react_against = fe;
; 602  : 								air_react_distance = (float)sqrt(rsq);
; 603  : 								brsq = rsq;
; 604  : 							}
; 605  : 							fe = (FalconEntity *)cit.GetNext();
; 606  : 						}
; 607  : 					}
; 608  : 					CampLeaveCriticalSection();
; 609  : 				}
; 610  : 				SetEngaged(1);
; 611  : 				SetCombat(combat);
; 612  : 			}
; 613  : 		}
; 614  : 		e = (CampEntity)detit.GetNext();
; 615  : 	}
; 616  : 
; 617  : 	if (air_react_against)
; 618  : 		SetAirTarget(air_react_against);
; 619  : 	if (react_against)
; 620  : 		SetTarget(react_against);
; 621  : #endif
; 622  : 	if (Engaged())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Engaged@UnitClass@@QBEHXZ		; UnitClass::Engaged
	test	eax, eax
	je	$LN10@DoCombat

; 623  : 	{
; 624  : 		FalconEntity	*e = GetTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ ; UnitClass::GetTarget
	mov	DWORD PTR _e$2[ebp], eax

; 625  : 		FalconEntity	*a = GetAirTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+656]
	call	eax
	mov	DWORD PTR _a$1[ebp], eax

; 626  : 
; 627  : 		// Check vs our Ground Target
; 628  : 		if (!e)											

	cmp	DWORD PTR _e$2[ebp], 0
	jne	SHORT $LN9@DoCombat

; 629  : 			SetTarget(NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTarget@UnitClass@@QAEXPAVFalconEntity@@@Z ; UnitClass::SetTarget

; 630  : 		else

	jmp	SHORT $LN8@DoCombat
$LN9@DoCombat:

; 631  : 		{
; 632  : 			if (Combat() && IsAggregate())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Combat@UnitClass@@QBEHXZ		; UnitClass::Combat
	test	eax, eax
	je	SHORT $LN8@DoCombat
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	je	SHORT $LN8@DoCombat

; 633  : 			{
; 634  : 				combat = ::DoCombat(this,e);

	mov	ecx, DWORD PTR _e$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?DoCombat@@YAHPAVCampBaseClass@@PAVFalconEntity@@@Z ; DoCombat
	add	esp, 8
	mov	DWORD PTR _combat$[ebp], eax

; 635  : 				if (combat <= 0 || Targeted())

	cmp	DWORD PTR _combat$[ebp], 0
	jle	SHORT $LN5@DoCombat
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Targeted@UnitClass@@QBEHXZ		; UnitClass::Targeted
	test	eax, eax
	je	SHORT $LN8@DoCombat
$LN5@DoCombat:

; 636  : 					SetTargeted(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTargeted@UnitClass@@QAEXH@Z		; UnitClass::SetTargeted
$LN8@DoCombat:

; 637  : 			}
; 638  : 		}
; 639  : 		// Check vs our Air Target
; 640  : 		if (!a)

	cmp	DWORD PTR _a$1[ebp], 0
	jne	SHORT $LN4@DoCombat

; 641  : 			SetAirTarget(NULL);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+992]
	call	eax
	jmp	SHORT $LN10@DoCombat
$LN4@DoCombat:

; 642  : 		else if (Combat() && IsAggregate())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Combat@UnitClass@@QBEHXZ		; UnitClass::Combat
	test	eax, eax
	je	SHORT $LN10@DoCombat
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAggregate@CampBaseClass@@QAEHXZ	; CampBaseClass::IsAggregate
	test	eax, eax
	je	SHORT $LN10@DoCombat

; 643  : 		{
; 644  : 			combat = ::DoCombat(this,a);

	mov	ecx, DWORD PTR _a$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?DoCombat@@YAHPAVCampBaseClass@@PAVFalconEntity@@@Z ; DoCombat
	add	esp, 8
	mov	DWORD PTR _combat$[ebp], eax

; 645  : 			if (combat < 0)

	cmp	DWORD PTR _combat$[ebp], 0
	jge	SHORT $LN10@DoCombat

; 646  : 				SetAirTarget(NULL);							// Clear targeting data so we can look for another

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+992]
	call	eax
$LN10@DoCombat:

; 647  : 		}
; 648  : 	}
; 649  : 
; 650  : 	return 0;

	xor	eax, eax

; 651  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DoCombat@TaskForceClass@@UAEHXZ ENDP			; TaskForceClass::DoCombat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
_moving$ = -48						; size = 4
_ow$ = -44						; size = 4
_o$ = -40						; size = 4
_w$ = -36						; size = 4
_this$ = -32						; size = 4
_ox$ = -28						; size = 2
_oy$ = -24						; size = 2
_nx$ = -20						; size = 2
_ny$ = -16						; size = 2
_x$ = -12						; size = 2
_y$ = -8						; size = 2
_h$ = -1						; size = 1
_time$ = 8						; size = 4
?MoveUnit@TaskForceClass@@UAEHK@Z PROC			; TaskForceClass::MoveUnit
; _this$ = ecx

; 430  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 431  : 	GridIndex x = 0, y = 0;

	xor	eax, eax
	mov	WORD PTR _x$[ebp], ax
	xor	ecx, ecx
	mov	WORD PTR _y$[ebp], cx

; 432  : 	GridIndex nx = 0, ny = 0;

	xor	edx, edx
	mov	WORD PTR _nx$[ebp], dx
	xor	eax, eax
	mov	WORD PTR _ny$[ebp], ax

; 433  : 	GridIndex ox = 0, oy = 0;

	xor	ecx, ecx
	mov	WORD PTR _ox$[ebp], cx
	xor	edx, edx
	mov	WORD PTR _oy$[ebp], dx

; 434  : 	WayPoint w = NULL, ow = NULL;

	mov	DWORD PTR _w$[ebp], 0
	mov	DWORD PTR _ow$[ebp], 0

; 435  : 	Objective o = NULL;

	mov	DWORD PTR _o$[ebp], 0

; 436  : 	int	moving = 1;

	mov	DWORD PTR _moving$[ebp], 1

; 437  : 	CampaignHeading	h = 0;

	mov	BYTE PTR _h$[ebp], 0

; 438  : 
; 439  : 	// RV - Biker
; 440  : 	// Naval units now have three modes:
; 441  : 	// (a) Sit still in harbor
; 442  : 	// (b) Do a 20 km track (repeating waypoints)
; 443  : 	// (c) Followy WPs
; 444  : 
; 445  : 	GetLocation(&x,&y);

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 446  : 
; 447  : 	w = ResetCurrentWP(this);

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?ResetCurrentWP@@YAPAVWayPointClass@@PAVTaskForceClass@@@Z ; ResetCurrentWP
	add	esp, 4
	mov	DWORD PTR _w$[ebp], eax

; 448  : 	
; 449  : 	FindNearestUnit(x, y, NULL);

	push	0
	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	call	?FindNearestUnit@@YAPAVUnitClass@@FFPAM@Z ; FindNearestUnit
	add	esp, 12					; 0000000cH

; 450  : 	
; 451  : 	// Check for mode a
; 452  : 	o = FindNearestObjective(x, y, NULL, 1);

	push	1
	push	0
	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	call	?FindNearestObjective@@YAPAVObjectiveClass@@FFPAMF@Z ; FindNearestObjective
	add	esp, 16					; 00000010H
	mov	DWORD PTR _o$[ebp], eax

; 453  : 
; 454  : 	// RV - Biker - If we are in port and have no WPs do nothing
; 455  : 	if (o && o->GetType() == TYPE_PORT && !w){

	cmp	DWORD PTR _o$[ebp], 0
	je	SHORT $LN23@MoveUnit
	mov	ecx, DWORD PTR _o$[ebp]
	call	?GetType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 19					; 00000013H
	jne	SHORT $LN23@MoveUnit
	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN23@MoveUnit

; 456  : 		return TRUE;

	mov	eax, 1
	jmp	$LN24@MoveUnit
$LN23@MoveUnit:

; 457  : 	}
; 458  : 
; 459  : 	// If not in port and no WPs... create a repeating path 20 km north and back
; 460  : 	if (!w)	{

	cmp	DWORD PTR _w$[ebp], 0
	jne	$LN22@MoveUnit

; 461  : 		DisposeWayPoints();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DisposeWayPoints@UnitClass@@QAEXXZ	; UnitClass::DisposeWayPoints

; 462  : 		
; 463  : 		w = AddUnitWP(x, y, 0, 60,	TheCampaign.CurrentTime + (rand()%15), 0, 0);

	push	0
	push	0
	call	_rand
	cdq
	mov	ecx, 15					; 0000000fH
	idiv	ecx
	add	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	push	edx
	push	60					; 0000003cH
	push	0
	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddUnitWP@UnitClass@@QAEPAVWayPointClass@@FFHHKHE@Z ; UnitClass::AddUnitWP
	mov	DWORD PTR _w$[ebp], eax

; 464  : 		w->SetWPFlags(WPF_REPEAT);

	push	64					; 00000040H
	mov	ecx, DWORD PTR _w$[ebp]
	call	?SetWPFlags@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPFlags

; 465  : 		
; 466  : 		// This should prevent naval units to run into ground
; 467  : 		if (GetCover(x, y+20) == Water) {

	movsx	ecx, WORD PTR _y$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	call	?GetCover@@YA?AW4CoverType@@FF@Z	; GetCover
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN21@MoveUnit

; 468  : 			w = AddUnitWP(x, y+20, 0, 60, TheCampaign.CurrentTime + (15+(rand()%15))*CampaignMinutes, 0, 0);

	push	0
	push	0
	call	_rand
	cdq
	mov	ecx, 15					; 0000000fH
	idiv	ecx
	add	edx, 15					; 0000000fH
	imul	edx, 60000				; 0000ea60H
	add	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	push	edx
	push	60					; 0000003cH
	push	0
	movsx	edx, WORD PTR _y$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddUnitWP@UnitClass@@QAEPAVWayPointClass@@FFHHKHE@Z ; UnitClass::AddUnitWP
	mov	DWORD PTR _w$[ebp], eax

; 469  : 		}
; 470  : 		else {

	jmp	SHORT $LN20@MoveUnit
$LN21@MoveUnit:

; 471  : 			w = AddUnitWP(x, y, 0, 60, TheCampaign.CurrentTime + 15*CampaignMinutes, 0, 0);

	push	0
	push	0
	mov	ecx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	add	ecx, 900000				; 000dbba0H
	push	ecx
	push	60					; 0000003cH
	push	0
	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddUnitWP@UnitClass@@QAEPAVWayPointClass@@FFHHKHE@Z ; UnitClass::AddUnitWP
	mov	DWORD PTR _w$[ebp], eax
$LN20@MoveUnit:

; 472  : 		}
; 473  : 		w->SetWPFlags(WPF_REPEAT);

	push	64					; 00000040H
	mov	ecx, DWORD PTR _w$[ebp]
	call	?SetWPFlags@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPFlags

; 474  : 
; 475  : 		w = AddUnitWP(x, y, 0, 60, TheCampaign.CurrentTime + (30+(rand()%15))*CampaignMinutes, 0xffffffff, 0);		

	push	0
	push	-1
	call	_rand
	cdq
	mov	ecx, 15					; 0000000fH
	idiv	ecx
	add	edx, 30					; 0000001eH
	imul	edx, 60000				; 0000ea60H
	add	edx, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	push	edx
	push	60					; 0000003cH
	push	0
	movzx	edx, WORD PTR _y$[ebp]
	push	edx
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddUnitWP@UnitClass@@QAEPAVWayPointClass@@FFHHKHE@Z ; UnitClass::AddUnitWP
	mov	DWORD PTR _w$[ebp], eax

; 476  : 		w->SetWPFlags(WPF_REPEAT);

	push	64					; 00000040H
	mov	ecx, DWORD PTR _w$[ebp]
	call	?SetWPFlags@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPFlags

; 477  : 		
; 478  : 		SetCurrentWaypoint (1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCurrentWaypoint@UnitClass@@QAEXG@Z	; UnitClass::SetCurrentWaypoint

; 479  : 		w = GetCurrentUnitWP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentUnitWP@UnitClass@@QBEPAVWayPointClass@@XZ ; UnitClass::GetCurrentUnitWP
	mov	DWORD PTR _w$[ebp], eax
$LN22@MoveUnit:

; 480  : 	}
; 481  : 	
; 482  : 	w->GetWPLocation(&nx, &ny);

	lea	ecx, DWORD PTR _ny$[ebp]
	push	ecx
	lea	edx, DWORD PTR _nx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 483  : 
; 484  : 	// RV - Biker - Wait for departure
; 485  : 	if (Camp_GetCurrentTime() < w->GetWPDepartureTime()) {

	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	mov	esi, eax
	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetWPDepartureTime@WayPointClass@@QAEKXZ ; WayPointClass::GetWPDepartureTime
	cmp	esi, eax
	jae	SHORT $LN19@MoveUnit

; 486  : 		SetUnitLastMove(Camp_GetCurrentTime());

	call	?Camp_GetCurrentTime@@YAKXZ		; Camp_GetCurrentTime
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+592]
	call	eax

; 487  : 		return 0;

	xor	eax, eax
	jmp	$LN24@MoveUnit
$LN19@MoveUnit:

; 488  : 	}
; 489  : 
; 490  : 	// Move, if we're not at destination
; 491  : 	if (x!=nx || y!=ny)

	movsx	ecx, WORD PTR _x$[ebp]
	movsx	edx, WORD PTR _nx$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN17@MoveUnit
	movsx	eax, WORD PTR _y$[ebp]
	movsx	ecx, WORD PTR _ny$[ebp]
	cmp	eax, ecx
	je	$LN18@MoveUnit
$LN17@MoveUnit:

; 492  : 	{
; 493  : 		if (w)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN16@MoveUnit

; 494  : 			ow = w->GetPrevWP();

	mov	ecx, DWORD PTR _w$[ebp]
	call	?GetPrevWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetPrevWP
	mov	DWORD PTR _ow$[ebp], eax
$LN16@MoveUnit:

; 495  : 		if (ow)			

	cmp	DWORD PTR _ow$[ebp], 0
	je	SHORT $LN15@MoveUnit

; 496  : 			ow->GetWPLocation(&ox, &oy);

	lea	edx, DWORD PTR _oy$[ebp]
	push	edx
	lea	eax, DWORD PTR _ox$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ow$[ebp]
	call	?GetWPLocation@WayPointClass@@QBEXPAF0@Z ; WayPointClass::GetWPLocation

; 497  : 		else

	jmp	SHORT $LN13@MoveUnit
$LN15@MoveUnit:

; 498  : 			GetLocation(&ox, &oy);

	lea	ecx, DWORD PTR _oy$[ebp]
	push	ecx
	lea	edx, DWORD PTR _ox$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation
$LN13@MoveUnit:

; 499  : 
; 500  : 		while (moving) {

	cmp	DWORD PTR _moving$[ebp], 0
	je	$LN18@MoveUnit

; 501  : 			h = DirectionTo(ox, oy, nx, ny, x, y);

	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	movzx	edx, WORD PTR _ny$[ebp]
	push	edx
	movzx	eax, WORD PTR _nx$[ebp]
	push	eax
	movzx	ecx, WORD PTR _oy$[ebp]
	push	ecx
	movzx	edx, WORD PTR _ox$[ebp]
	push	edx
	call	?DirectionTo@@YAEFFFFFF@Z		; DirectionTo
	add	esp, 24					; 00000018H
	mov	BYTE PTR _h$[ebp], al

; 502  : 			if (h > 7) {

	movzx	eax, BYTE PTR _h$[ebp]
	cmp	eax, 7
	jle	SHORT $LN11@MoveUnit

; 503  : 				moving = 0;

	mov	DWORD PTR _moving$[ebp], 0

; 504  : 				h = Here;

	mov	BYTE PTR _h$[ebp], 8
$LN11@MoveUnit:

; 505  : 			}
; 506  : 			// This is kinda hacky - basically, limit change in direction to 45 deg per move
; 507  : 			if (h > last_direction) {

	movzx	ecx, BYTE PTR _h$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+269]
	cmp	ecx, eax
	jle	SHORT $LN10@MoveUnit

; 508  : 				if (h - last_direction < 5)

	movzx	ecx, BYTE PTR _h$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+269]
	sub	ecx, eax
	cmp	ecx, 5
	jge	SHORT $LN9@MoveUnit

; 509  : 					h = (last_direction+1) & 0x07;

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+269]
	add	edx, 1
	and	edx, 7
	mov	BYTE PTR _h$[ebp], dl

; 510  : 				else

	jmp	SHORT $LN8@MoveUnit
$LN9@MoveUnit:

; 511  : 					h = (last_direction+7) & 0x07;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+269]
	add	ecx, 7
	and	ecx, 7
	mov	BYTE PTR _h$[ebp], cl
$LN8@MoveUnit:
	jmp	SHORT $LN7@MoveUnit
$LN10@MoveUnit:

; 512  : 			}
; 513  : 
; 514  : 			else if (h < last_direction) {

	movzx	edx, BYTE PTR _h$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+269]
	cmp	edx, ecx
	jge	SHORT $LN7@MoveUnit

; 515  : 				if (last_direction - h < 5)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+269]
	movzx	ecx, BYTE PTR _h$[ebp]
	sub	eax, ecx
	cmp	eax, 5
	jge	SHORT $LN5@MoveUnit

; 516  : 					h = (last_direction+7) & 0x07;

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+269]
	add	eax, 7
	and	eax, 7
	mov	BYTE PTR _h$[ebp], al

; 517  : 				else

	jmp	SHORT $LN7@MoveUnit
$LN5@MoveUnit:

; 518  : 					h = (last_direction+1) & 0x07;

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+269]
	add	edx, 1
	and	edx, 7
	mov	BYTE PTR _h$[ebp], dl
$LN7@MoveUnit:

; 519  : 			}
; 520  : 
; 521  : 			//this moves the unit
; 522  : 			if (ChangeUnitLocation(h) > 0){

	movzx	eax, BYTE PTR _h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeUnitLocation@UnitClass@@QAEHE@Z	; UnitClass::ChangeUnitLocation
	test	eax, eax
	jle	SHORT $LN3@MoveUnit

; 523  : 				last_direction = h;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _h$[ebp]
	mov	BYTE PTR [ecx+269], dl

; 524  : 			}
; 525  : 			else {

	jmp	SHORT $LN2@MoveUnit
$LN3@MoveUnit:

; 526  : 				moving = 0;

	mov	DWORD PTR _moving$[ebp], 0
$LN2@MoveUnit:

; 527  : 			}
; 528  : 
; 529  : 			// Now do combat
; 530  : 			if (GetCombatTime() > CombatTime()){

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+648]
	call	eax
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+532]
	call	eax
	cmp	esi, eax
	jbe	SHORT $LN1@MoveUnit

; 531  : 				DoCombat();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+492]
	call	eax
$LN1@MoveUnit:

; 532  : 			}
; 533  : 		}

	jmp	$LN13@MoveUnit
$LN18@MoveUnit:

; 534  : 	}
; 535  : 	return 0;

	xor	eax, eax
$LN24@MoveUnit:

; 536  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?MoveUnit@TaskForceClass@@UAEHK@Z ENDP			; TaskForceClass::MoveUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
_omt$ = -24						; size = 4
_et$ = -20						; size = 4
_tmt$ = -16						; size = 4
_enemy_threat_bonus$ = -12				; size = 4
_score$ = -8						; size = 4
_this$ = -4						; size = 4
_e$ = 8							; size = 4
_knowledge$ = 12					; size = 4
_range$ = 16						; size = 4
?Reaction@TaskForceClass@@UAEHPAVCampBaseClass@@HM@Z PROC ; TaskForceClass::Reaction
; _this$ = ecx

; 654  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 655  : 	int			score = 0, enemy_threat_bonus = 1;

	mov	DWORD PTR _score$[ebp], 0
	mov	DWORD PTR _enemy_threat_bonus$[ebp], 1

; 656  : 	CampEntity	et = NULL;

	mov	DWORD PTR _et$[ebp], 0

; 657  : 	MoveType	tmt,omt;
; 658  : 
; 659  : 	if (!e)	return 0;

	cmp	DWORD PTR _e$[ebp], 0
	jne	SHORT $LN8@Reaction
	xor	eax, eax
	jmp	$LN9@Reaction
$LN8@Reaction:

; 660  : 
; 661  : 	// Some basic info on us.
; 662  : 	omt = GetMovementType();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+228]
	call	eax
	mov	DWORD PTR _omt$[ebp], eax

; 663  : 	tmt = e->GetMovementType();

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+228]
	call	eax
	mov	DWORD PTR _tmt$[ebp], eax

; 664  : 
; 665  : 	// Aircraft on ground are ignored (technically, we could shoot at them.. but..)
; 666  : 	if (e->IsFlight() && !((Flight)e)->Moving())

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN7@Reaction
	mov	ecx, DWORD PTR _e$[ebp]
	call	?Moving@UnitClass@@QBEHXZ		; UnitClass::Moving
	test	eax, eax
	jne	SHORT $LN7@Reaction

; 667  : 		return 0;

	xor	eax, eax
	jmp	$LN9@Reaction
$LN7@Reaction:

; 668  : 
; 669  : 	// Score their threat to us
; 670  : 	if (knowledge & FRIENDLY_DETECTED)

	mov	ecx, DWORD PTR _knowledge$[ebp]
	and	ecx, 4
	je	SHORT $LN6@Reaction

; 671  : 		enemy_threat_bonus++;

	mov	edx, DWORD PTR _enemy_threat_bonus$[ebp]
	add	edx, 1
	mov	DWORD PTR _enemy_threat_bonus$[ebp], edx
$LN6@Reaction:

; 672  : 	if (knowledge & FRIENDLY_IN_RANGE)

	mov	eax, DWORD PTR _knowledge$[ebp]
	and	eax, 8
	je	SHORT $LN5@Reaction

; 673  : 		enemy_threat_bonus += 2;

	mov	ecx, DWORD PTR _enemy_threat_bonus$[ebp]
	add	ecx, 2
	mov	DWORD PTR _enemy_threat_bonus$[ebp], ecx
$LN5@Reaction:

; 674  : 	et = ((Unit)e)->GetCampTarget();

	mov	ecx, DWORD PTR _e$[ebp]
	call	?GetCampTarget@UnitClass@@QAEPAVCampBaseClass@@XZ ; UnitClass::GetCampTarget
	mov	DWORD PTR _et$[ebp], eax

; 675  : 
; 676  : 	// All units score vs enemy engaged with this unit
; 677  : 	if (et == this)

	mov	edx, DWORD PTR _et$[ebp]
	cmp	edx, DWORD PTR _this$[ebp]
	jne	SHORT $LN4@Reaction

; 678  : 		score += e->GetAproxHitChance(omt,0)/5 * enemy_threat_bonus;

	push	0
	mov	eax, DWORD PTR _omt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+396]
	call	eax
	cdq
	mov	ecx, 5
	idiv	ecx
	imul	eax, DWORD PTR _enemy_threat_bonus$[ebp]
	add	eax, DWORD PTR _score$[ebp]
	mov	DWORD PTR _score$[ebp], eax
$LN4@Reaction:

; 679  : 
; 680  : 	// Bonus if we can shoot them
; 681  : 	if (knowledge & ENEMY_IN_RANGE)

	mov	edx, DWORD PTR _knowledge$[ebp]
	and	edx, 2
	je	SHORT $LN3@Reaction

; 682  : 		score += GetAproxHitChance(tmt,FloatToInt32(range/2.0F))/5;

	movss	xmm0, DWORD PTR _range$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _tmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+396]
	call	eax
	cdq
	mov	ecx, 5
	idiv	ecx
	add	eax, DWORD PTR _score$[ebp]
	mov	DWORD PTR _score$[ebp], eax
$LN3@Reaction:

; 683  : 
; 684  : 	// Added bonus for them attacking
; 685  : 	if (et && (tmt == Air || tmt == LowAir))

	cmp	DWORD PTR _et$[ebp], 0
	je	SHORT $LN2@Reaction
	cmp	DWORD PTR _tmt$[ebp], 5
	je	SHORT $LN1@Reaction
	cmp	DWORD PTR _tmt$[ebp], 4
	jne	SHORT $LN2@Reaction
$LN1@Reaction:

; 686  : 		score += GetAproxHitChance(tmt,0)/5 * enemy_threat_bonus;

	push	0
	mov	edx, DWORD PTR _tmt$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+396]
	call	eax
	cdq
	mov	ecx, 5
	idiv	ecx
	imul	eax, DWORD PTR _enemy_threat_bonus$[ebp]
	add	eax, DWORD PTR _score$[ebp]
	mov	DWORD PTR _score$[ebp], eax
$LN2@Reaction:

; 687  : 
; 688  : 	return score;

	mov	eax, DWORD PTR _score$[ebp]
$LN9@Reaction:

; 689  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Reaction@TaskForceClass@@UAEHPAVCampBaseClass@@HM@Z ENDP ; TaskForceClass::Reaction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?GetMovementType@TaskForceClass@@UAE?AW4MoveType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMovementType@TaskForceClass@@UAE?AW4MoveType@@XZ PROC ; TaskForceClass::GetMovementType, COMDAT
; _this$ = ecx

; 77   : 	virtual MoveType GetMovementType (void)			{ return Naval; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 6
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMovementType@TaskForceClass@@UAE?AW4MoveType@@XZ ENDP ; TaskForceClass::GetMovementType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DetectOnMove@TaskForceClass@@UAEHXZ PROC		; TaskForceClass::DetectOnMove
; _this$ = ecx

; 935  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 936  : 	if (!Engaged() && !(GetUnitMoved()%5))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Engaged@UnitClass@@QBEHXZ		; UnitClass::Engaged
	test	eax, eax
	jne	SHORT $LN1@DetectOnMo
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnitMoved@UnitClass@@QBEHXZ		; UnitClass::GetUnitMoved
	cdq
	mov	ecx, 5
	idiv	ecx
	test	edx, edx
	jne	SHORT $LN1@DetectOnMo

; 937  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN2@DetectOnMo
$LN1@DetectOnMo:

; 938  : 	return ChooseTarget();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+524]
	call	edx
$LN2@DetectOnMo:

; 939  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DetectOnMove@TaskForceClass@@UAEHXZ ENDP		; TaskForceClass::DetectOnMove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?GetKias@TaskForceClass@@UBEMXZ
_TEXT	SEGMENT
tv82 = -12						; size = 4
tv80 = -8						; size = 4
_this$ = -4						; size = 4
?GetKias@TaskForceClass@@UBEMXZ PROC			; TaskForceClass::GetKias, COMDAT
; _this$ = ecx

; 75   : 	virtual float GetKias() const { return GetVt() * FTPSEC_TO_KNOTS; }	

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv80[ebp]
	movss	xmm0, DWORD PTR tv80[ebp]
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	DWORD PTR tv82[ebp], xmm0
	fld	DWORD PTR tv82[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetKias@TaskForceClass@@UBEMXZ ENDP			; TaskForceClass::GetKias
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\navunit.h
;	COMDAT ?GetVt@TaskForceClass@@UBEMXZ
_TEXT	SEGMENT
tv79 = -8						; size = 4
_this$ = -4						; size = 4
?GetVt@TaskForceClass@@UBEMXZ PROC			; TaskForceClass::GetVt, COMDAT
; _this$ = ecx

; 74   : 	virtual float GetVt() const { return GetUnitSpeed() * KPH_TO_FPS; }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	call	eax
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3f693e32
	movss	DWORD PTR tv79[ebp], xmm0
	fld	DWORD PTR tv79[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetVt@TaskForceClass@@UBEMXZ ENDP			; TaskForceClass::GetVt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
_tmp_ent$ = -8						; size = 4
_this$ = -4						; size = 4
_event$ = 8						; size = 4
?Handle@TaskForceClass@@UAEHPAVVuFullUpdateEvent@@@Z PROC ; TaskForceClass::Handle
; _this$ = ecx

; 170  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 171  : 	// copy data from temp entity to current entity
; 172  : 	TaskForceClass* tmp_ent = (TaskForceClass*)(event->expandedData_.get());

	mov	ecx, DWORD PTR _event$[ebp]
	add	ecx, 48					; 00000030H
	call	?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ ; VuBin<VuEntity>::get
	mov	DWORD PTR _tmp_ent$[ebp], eax

; 173  : 
; 174  : 	orders = tmp_ent->orders;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _tmp_ent$[ebp]
	mov	dl, BYTE PTR [ecx+268]
	mov	BYTE PTR [eax+268], dl

; 175  : 	supply = tmp_ent->supply;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _tmp_ent$[ebp]
	mov	dl, BYTE PTR [ecx+270]
	mov	BYTE PTR [eax+270], dl

; 176  : 	return (UnitClass::Handle(event));

	mov	eax, DWORD PTR _event$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Handle@UnitClass@@UAEHPAVVuFullUpdateEvent@@@Z ; UnitClass::Handle

; 177  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Handle@TaskForceClass@@UAEHPAVVuFullUpdateEvent@@@Z ENDP ; TaskForceClass::Handle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?Save@TaskForceClass@@UAEHPAPAE@Z PROC			; TaskForceClass::Save
; _this$ = ecx

; 155  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 156  : 	UnitClass::Save(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Save@UnitClass@@UAEHPAPAE@Z		; UnitClass::Save

; 157  : 	if (save_log)

	cmp	DWORD PTR ?save_log@@3PAU_iobuf@@A, 0	; save_log
	je	SHORT $LN1@Save

; 158  : 	{
; 159  : 		fprintf (save_log, "%08x TaskForceClass ", *stream - start_save_stream);

	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR ?start_save_stream@@3HA	; start_save_stream
	push	edx
	push	OFFSET ??_C@_0BF@NFLOHBN@?$CF08x?5TaskForceClass?5?$AA@
	mov	eax, DWORD PTR ?save_log@@3PAU_iobuf@@A	; save_log
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 160  : 		fflush (save_log);

	mov	ecx, DWORD PTR ?save_log@@3PAU_iobuf@@A	; save_log
	push	ecx
	call	_fflush
	add	esp, 4
$LN1@Save:

; 161  : 	}
; 162  : 
; 163  : 	memcpy(*stream, &orders, sizeof(uchar));				*stream += sizeof(uchar); 

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 268				; 0000010cH
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], eax

; 164  : 	memcpy(*stream, &supply, sizeof(Percentage));			*stream += sizeof(Percentage); 

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 270				; 0000010eH
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], eax

; 165  : 	return TaskForceClass::SaveSize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveSize@TaskForceClass@@UAEHXZ	; TaskForceClass::SaveSize

; 166  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Save@TaskForceClass@@UAEHPAPAE@Z ENDP			; TaskForceClass::Save
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SaveSize@TaskForceClass@@UAEHXZ PROC			; TaskForceClass::SaveSize
; _this$ = ecx

; 148  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 149  : 	return UnitClass::SaveSize()
; 150  : 			+ sizeof(uchar) 
; 151  : 			+ sizeof(Percentage);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveSize@UnitClass@@UAEHXZ		; UnitClass::SaveSize
	add	eax, 2

; 152  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SaveSize@TaskForceClass@@UAEHXZ ENDP			; TaskForceClass::SaveSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1TaskForceClass@@UAE@XZ PROC				; TaskForceClass::~TaskForceClass
; _this$ = ecx

; 142  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1TaskForceClass@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TaskForceClass@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 143  : 	if (IsAwake())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAwake@CampBaseClass@@QAEHXZ		; CampBaseClass::IsAwake
	test	eax, eax
	je	SHORT $LN2@TaskForceC

; 144  : 		Sleep();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Sleep@UnitClass@@UAEHXZ		; UnitClass::Sleep
$LN2@TaskForceC:

; 145  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	??1SmallPathClass@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UnitClass@@UAE@XZ			; UnitClass::~UnitClass
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1TaskForceClass@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UnitClass@@UAE@XZ			; UnitClass::~UnitClass
__unwindfunclet$??1TaskForceClass@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	jmp	??1SmallPathClass@@QAE@XZ
__ehhandler$??1TaskForceClass@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1TaskForceClass@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1TaskForceClass@@UAE@XZ ENDP				; TaskForceClass::~TaskForceClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_stream$ = 8						; size = 4
_rem$ = 12						; size = 4
??0TaskForceClass@@QAE@PAPAEPAJ@Z PROC			; TaskForceClass::TaskForceClass
; _this$ = ecx

; 120  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TaskForceClass@@QAE@PAPAEPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UnitClass@@QAE@PAPAEPAJ@Z		; UnitClass::UnitClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7TaskForceClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	??0SmallPathClass@@QAE@XZ		; SmallPathClass::SmallPathClass
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 288				; 00000120H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 121  : 	if (load_log)

	cmp	DWORD PTR ?load_log@@3PAU_iobuf@@A, 0	; load_log
	je	SHORT $LN2@TaskForceC

; 122  : 	{
; 123  : 		fprintf (load_log, "%08x TaskForceClass ", *stream - start_load_stream);

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR ?start_load_stream@@3HA	; start_load_stream
	push	ecx
	push	OFFSET ??_C@_0BF@NFLOHBN@?$CF08x?5TaskForceClass?5?$AA@
	mov	edx, DWORD PTR ?load_log@@3PAU_iobuf@@A	; load_log
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 124  : 		fflush (load_log);

	mov	eax, DWORD PTR ?load_log@@3PAU_iobuf@@A	; load_log
	push	eax
	call	_fflush
	add	esp, 4
$LN2@TaskForceC:

; 125  : 	}
; 126  : 
; 127  : 	memcpychk(&orders, stream, sizeof(uchar), rem);		

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 268				; 0000010cH
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 128  : 	memcpychk(&supply, stream, sizeof(Percentage), rem);	

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 270				; 0000010eH
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 129  : 	air_target = FalconNullId;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [ecx+288], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [ecx+292], eax

; 130  : 	missiles_flying = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+296], 0

; 131  : 	radar_mode = FEC_RADAR_OFF;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+297], 0

; 132  : 	search_mode = FEC_RADAR_OFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+298], 0

; 133  : 	last_combat = last_move = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], 0

; 134  : 	last_direction = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+269], 0

; 135  : 
; 136  : 	if (GetSType() == STYPE_UNIT_CARRIER) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	ecx, al
	cmp	ecx, 3
	jne	SHORT $LN3@TaskForceC

; 137  : 		SetTacan(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTacan@CampBaseClass@@QAEXH@Z	; CampBaseClass::SetTacan
$LN3@TaskForceC:

; 138  : 	}
; 139  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0TaskForceClass@@QAE@PAPAEPAJ@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UnitClass@@UAE@XZ			; UnitClass::~UnitClass
__unwindfunclet$??0TaskForceClass@@QAE@PAPAEPAJ@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	jmp	??1SmallPathClass@@QAE@XZ
__ehhandler$??0TaskForceClass@@QAE@PAPAEPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TaskForceClass@@QAE@PAPAEPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TaskForceClass@@QAE@PAPAEPAJ@Z ENDP			; TaskForceClass::TaskForceClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\navunit.cpp
_TEXT	SEGMENT
_AQUIREtimer$ = -24					; size = 4
_SEARCHtimer$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 2
??0TaskForceClass@@QAE@G@Z PROC				; TaskForceClass::TaskForceClass
; _this$ = ecx

; 105  : TaskForceClass::TaskForceClass(ushort type) : UnitClass(type, GetIdFromNamespace(NonVolatileNS)){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TaskForceClass@@QAE@G@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ?NonVolatileNS@@3VIdNamespace@@A	; NonVolatileNS
	call	?GetIdFromNamespace@@YAKAAVIdNamespace@@@Z ; GetIdFromNamespace
	add	esp, 4
	push	eax
	movzx	eax, WORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UnitClass@@QAE@GK@Z			; UnitClass::UnitClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7TaskForceClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	??0SmallPathClass@@QAE@XZ		; SmallPathClass::SmallPathClass
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 288				; 00000120H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 106  : 	orders = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+268], 0

; 107  : 	supply = 100;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+270], 100			; 00000064H

; 108  : 	air_target = FalconNullId;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [ecx+288], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [ecx+292], eax

; 109  : 	missiles_flying = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+296], 0

; 110  : 	VU_TIME SEARCHtimer = 0;

	mov	DWORD PTR _SEARCHtimer$[ebp], 0

; 111  : 	VU_TIME AQUIREtimer = 0;

	mov	DWORD PTR _AQUIREtimer$[ebp], 0

; 112  : 	radar_mode = FEC_RADAR_OFF;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+297], 0

; 113  : 	search_mode = FEC_RADAR_OFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+298], 0

; 114  : 	last_combat = last_move = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], 0

; 115  : 	last_direction = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+269], 0

; 116  : 	SetParent(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetParent@UnitClass@@QAEXH@Z		; UnitClass::SetParent

; 117  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0TaskForceClass@@QAE@G@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UnitClass@@UAE@XZ			; UnitClass::~UnitClass
__unwindfunclet$??0TaskForceClass@@QAE@G@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	jmp	??1SmallPathClass@@QAE@XZ
__ehhandler$??0TaskForceClass@@QAE@G@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TaskForceClass@@QAE@G@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TaskForceClass@@QAE@G@Z ENDP				; TaskForceClass::TaskForceClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?UpdateParentStatistics@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?UpdateParentStatistics@UnitClass@@UAEHXZ PROC		; UnitClass::UpdateParentStatistics, COMDAT
; _this$ = ecx

; 559  : 	virtual int UpdateParentStatistics (void)					{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateParentStatistics@UnitClass@@UAEHXZ ENDP		; UnitClass::UpdateParentStatistics
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?ReorganizeUnit@UnitClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReorganizeUnit@UnitClass@@UAEXXZ PROC			; UnitClass::ReorganizeUnit, COMDAT
; _this$ = ecx

; 558  : 	virtual void ReorganizeUnit (void)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ReorganizeUnit@UnitClass@@UAEXXZ ENDP			; UnitClass::ReorganizeUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?RemoveChild@UnitClass@@UAEXVVU_ID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 8
?RemoveChild@UnitClass@@UAEXVVU_ID@@@Z PROC		; UnitClass::RemoveChild, COMDAT
; _this$ = ecx

; 557  : 	virtual void RemoveChild (VU_ID)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?RemoveChild@UnitClass@@UAEXVVU_ID@@@Z ENDP		; UnitClass::RemoveChild
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?DisposeChildren@UnitClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DisposeChildren@UnitClass@@UAEXXZ PROC			; UnitClass::DisposeChildren, COMDAT
; _this$ = ecx

; 556  : 	virtual void DisposeChildren (void)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?DisposeChildren@UnitClass@@UAEXXZ ENDP			; UnitClass::DisposeChildren
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?AddUnitChild@UnitClass@@UAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?AddUnitChild@UnitClass@@UAEXPAV1@@Z PROC		; UnitClass::AddUnitChild, COMDAT
; _this$ = ecx

; 555  : 	virtual void AddUnitChild (Unit)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?AddUnitChild@UnitClass@@UAEXPAV1@@Z ENDP		; UnitClass::AddUnitChild
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetPrevUnitElement@UnitClass@@UAEPAV1@PAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?GetPrevUnitElement@UnitClass@@UAEPAV1@PAV1@@Z PROC	; UnitClass::GetPrevUnitElement, COMDAT
; _this$ = ecx

; 554  : 	virtual Unit GetPrevUnitElement (Unit)						{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPrevUnitElement@UnitClass@@UAEPAV1@PAV1@@Z ENDP	; UnitClass::GetPrevUnitElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitElementByID@UnitClass@@UAEPAV1@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?GetUnitElementByID@UnitClass@@UAEPAV1@H@Z PROC		; UnitClass::GetUnitElementByID, COMDAT
; _this$ = ecx

; 553  : 	virtual Unit GetUnitElementByID (int)						{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitElementByID@UnitClass@@UAEPAV1@H@Z ENDP		; UnitClass::GetUnitElementByID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitElement@UnitClass@@UAEPAV1@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?GetUnitElement@UnitClass@@UAEPAV1@H@Z PROC		; UnitClass::GetUnitElement, COMDAT
; _this$ = ecx

; 552  : 	virtual Unit GetUnitElement (int)							{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitElement@UnitClass@@UAEPAV1@H@Z ENDP		; UnitClass::GetUnitElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetNextUnitElement@UnitClass@@UBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNextUnitElement@UnitClass@@UBEPAV1@XZ PROC		; UnitClass::GetNextUnitElement, COMDAT
; _this$ = ecx

; 551  : 	virtual Unit GetNextUnitElement() const						{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextUnitElement@UnitClass@@UBEPAV1@XZ ENDP		; UnitClass::GetNextUnitElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetFirstUnitElement@UnitClass@@UBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFirstUnitElement@UnitClass@@UBEPAV1@XZ PROC		; UnitClass::GetFirstUnitElement, COMDAT
; _this$ = ecx

; 550  : 	virtual Unit GetFirstUnitElement() const					{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstUnitElement@UnitClass@@UBEPAV1@XZ ENDP		; UnitClass::GetFirstUnitElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitParent@UnitClass@@UAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitParent@UnitClass@@UAEXPAV1@@Z PROC		; UnitClass::SetUnitParent, COMDAT
; _this$ = ecx

; 543  : 	virtual void SetUnitParent (Unit)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitParent@UnitClass@@UAEXPAV1@@Z ENDP		; UnitClass::SetUnitParent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitParentID@UnitClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetUnitParentID@UnitClass@@UAE?AVVU_ID@@XZ PROC	; UnitClass::GetUnitParentID, COMDAT
; _this$ = ecx

; 542  : 	virtual VU_ID GetUnitParentID (void)						{ return FalconNullId; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitParentID@UnitClass@@UAE?AVVU_ID@@XZ ENDP	; UnitClass::GetUnitParentID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitParent@UnitClass@@UBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitParent@UnitClass@@UBEPAV1@XZ PROC		; UnitClass::GetUnitParent, COMDAT
; _this$ = ecx

; 541  : 	virtual Unit GetUnitParent() const							{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitParent@UnitClass@@UBEPAV1@XZ ENDP		; UnitClass::GetUnitParent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?RallyUnit@UnitClass@@UAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?RallyUnit@UnitClass@@UAEHH@Z PROC			; UnitClass::RallyUnit, COMDAT
; _this$ = ecx

; 538  : 	virtual int RallyUnit (int)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?RallyUnit@UnitClass@@UAEHH@Z ENDP			; UnitClass::RallyUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?BuildMission@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BuildMission@UnitClass@@UAEHXZ PROC			; UnitClass::BuildMission, COMDAT
; _this$ = ecx

; 537  : 	virtual int BuildMission (void)								{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?BuildMission@UnitClass@@UAEHXZ ENDP			; UnitClass::BuildMission
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?CheckForSurrender@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CheckForSurrender@UnitClass@@UAEHXZ PROC		; UnitClass::CheckForSurrender, COMDAT
; _this$ = ecx

; 536  : 	virtual int CheckForSurrender (void)						{ return 1; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckForSurrender@UnitClass@@UAEHXZ ENDP		; UnitClass::CheckForSurrender
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetObjMovementType@UnitClass@@UAE?AW4MoveType@@PAVObjectiveClass@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?GetObjMovementType@UnitClass@@UAE?AW4MoveType@@PAVObjectiveClass@@H@Z PROC ; UnitClass::GetObjMovementType, COMDAT
; _this$ = ecx

; 535  : 	virtual MoveType GetObjMovementType (Objective, int)	{ return CampBaseClass::GetMovementType(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMovementType@FalconEntity@@UAE?AW4MoveType@@XZ ; FalconEntity::GetMovementType
	mov	esp, ebp
	pop	ebp
	ret	8
?GetObjMovementType@UnitClass@@UAE?AW4MoveType@@PAVObjectiveClass@@H@Z ENDP ; UnitClass::GetObjMovementType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitCurrentDestination@UnitClass@@UAEXPAF0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?GetUnitCurrentDestination@UnitClass@@UAEXPAF0@Z PROC	; UnitClass::GetUnitCurrentDestination, COMDAT
; _this$ = ecx

; 534  : 	virtual void GetUnitCurrentDestination(GridIndex*, GridIndex*)	{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?GetUnitCurrentDestination@UnitClass@@UAEXPAF0@Z ENDP	; UnitClass::GetUnitCurrentDestination
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitCurrentDestination@UnitClass@@UAEXFF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 2
___formal$ = 12						; size = 2
?SetUnitCurrentDestination@UnitClass@@UAEXFF@Z PROC	; UnitClass::SetUnitCurrentDestination, COMDAT
; _this$ = ecx

; 533  : 	virtual void SetUnitCurrentDestination(GridIndex, GridIndex)	{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitCurrentDestination@UnitClass@@UAEXFF@Z ENDP	; UnitClass::SetUnitCurrentDestination
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitHeading@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitHeading@UnitClass@@UAEHXZ PROC			; UnitClass::GetUnitHeading, COMDAT
; _this$ = ecx

; 529  : 	virtual int GetUnitHeading (void)							{ return Here; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitHeading@UnitClass@@UAEHXZ ENDP			; UnitClass::GetUnitHeading
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitDivision@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitDivision@UnitClass@@UAEHXZ PROC			; UnitClass::GetUnitDivision, COMDAT
; _this$ = ecx

; 528  : 	virtual int GetUnitDivision (void)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitDivision@UnitClass@@UAEHXZ ENDP			; UnitClass::GetUnitDivision
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitPosition@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitPosition@UnitClass@@UAEHXZ PROC			; UnitClass::GetUnitPosition, COMDAT
; _this$ = ecx

; 527  : 	virtual int GetUnitPosition (void)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitPosition@UnitClass@@UAEHXZ ENDP			; UnitClass::GetUnitPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitMode@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitMode@UnitClass@@UAEHXZ PROC			; UnitClass::GetUnitMode, COMDAT
; _this$ = ecx

; 526  : 	virtual int GetUnitMode (void)								{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitMode@UnitClass@@UAEHXZ ENDP			; UnitClass::GetUnitMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitElement@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitElement@UnitClass@@UAEHXZ PROC			; UnitClass::GetUnitElement, COMDAT
; _this$ = ecx

; 525  : 	virtual int GetUnitElement (void) 							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitElement@UnitClass@@UAEHXZ ENDP			; UnitClass::GetUnitElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitFatigue@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitFatigue@UnitClass@@UAEHXZ PROC			; UnitClass::GetUnitFatigue, COMDAT
; _this$ = ecx

; 524  : 	virtual int GetUnitFatigue (void)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitFatigue@UnitClass@@UAEHXZ ENDP			; UnitClass::GetUnitFatigue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitObjectiveID@UnitClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetUnitObjectiveID@UnitClass@@UAE?AVVU_ID@@XZ PROC	; UnitClass::GetUnitObjectiveID, COMDAT
; _this$ = ecx

; 522  : 	virtual VU_ID GetUnitObjectiveID (void)						{ return FalconNullId; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitObjectiveID@UnitClass@@UAE?AVVU_ID@@XZ ENDP	; UnitClass::GetUnitObjectiveID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitSecondaryObjID@UnitClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetUnitSecondaryObjID@UnitClass@@UAE?AVVU_ID@@XZ PROC	; UnitClass::GetUnitSecondaryObjID, COMDAT
; _this$ = ecx

; 521  : 	virtual VU_ID GetUnitSecondaryObjID (void)					{ return FalconNullId; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitSecondaryObjID@UnitClass@@UAE?AVVU_ID@@XZ ENDP	; UnitClass::GetUnitSecondaryObjID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitPrimaryObjID@UnitClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetUnitPrimaryObjID@UnitClass@@UAE?AVVU_ID@@XZ PROC	; UnitClass::GetUnitPrimaryObjID, COMDAT
; _this$ = ecx

; 520  : 	virtual VU_ID GetUnitPrimaryObjID (void)					{ return FalconNullId; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitPrimaryObjID@UnitClass@@UAE?AVVU_ID@@XZ ENDP	; UnitClass::GetUnitPrimaryObjID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitObjective@UnitClass@@UAEPAVObjectiveClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitObjective@UnitClass@@UAEPAVObjectiveClass@@XZ PROC ; UnitClass::GetUnitObjective, COMDAT
; _this$ = ecx

; 519  : 	virtual Objective GetUnitObjective (void)					{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitObjective@UnitClass@@UAEPAVObjectiveClass@@XZ ENDP ; UnitClass::GetUnitObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitSecondaryObj@UnitClass@@UAEPAVObjectiveClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitSecondaryObj@UnitClass@@UAEPAVObjectiveClass@@XZ PROC ; UnitClass::GetUnitSecondaryObj, COMDAT
; _this$ = ecx

; 518  : 	virtual Objective GetUnitSecondaryObj (void)				{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitSecondaryObj@UnitClass@@UAEPAVObjectiveClass@@XZ ENDP ; UnitClass::GetUnitSecondaryObj
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitPrimaryObj@UnitClass@@UAEPAVObjectiveClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitPrimaryObj@UnitClass@@UAEPAVObjectiveClass@@XZ PROC ; UnitClass::GetUnitPrimaryObj, COMDAT
; _this$ = ecx

; 517  : 	virtual Objective GetUnitPrimaryObj (void)					{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitPrimaryObj@UnitClass@@UAEPAVObjectiveClass@@XZ ENDP ; UnitClass::GetUnitPrimaryObj
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitHeading@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitHeading@UnitClass@@UAEXH@Z PROC			; UnitClass::SetUnitHeading, COMDAT
; _this$ = ecx

; 516  : 	virtual void SetUnitHeading (int)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitHeading@UnitClass@@UAEXH@Z ENDP			; UnitClass::SetUnitHeading
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitDivision@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitDivision@UnitClass@@UAEXH@Z PROC		; UnitClass::SetUnitDivision, COMDAT
; _this$ = ecx

; 515  : 	virtual void SetUnitDivision (int)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitDivision@UnitClass@@UAEXH@Z ENDP		; UnitClass::SetUnitDivision
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitPosition@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitPosition@UnitClass@@UAEXH@Z PROC		; UnitClass::SetUnitPosition, COMDAT
; _this$ = ecx

; 514  : 	virtual void SetUnitPosition (int)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitPosition@UnitClass@@UAEXH@Z ENDP		; UnitClass::SetUnitPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitMode@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitMode@UnitClass@@UAEXH@Z PROC			; UnitClass::SetUnitMode, COMDAT
; _this$ = ecx

; 513  : 	virtual void SetUnitMode (int)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitMode@UnitClass@@UAEXH@Z ENDP			; UnitClass::SetUnitMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitFatigue@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitFatigue@UnitClass@@UAEXH@Z PROC			; UnitClass::SetUnitFatigue, COMDAT
; _this$ = ecx

; 511  : 	virtual void SetUnitFatigue (int) 						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitFatigue@UnitClass@@UAEXH@Z ENDP			; UnitClass::SetUnitFatigue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitOrders@UnitClass@@UAEXHVVU_ID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 8
?SetUnitOrders@UnitClass@@UAEXHVVU_ID@@@Z PROC		; UnitClass::SetUnitOrders, COMDAT
; _this$ = ecx

; 510  : 	virtual void SetUnitOrders (int, VU_ID)				{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetUnitOrders@UnitClass@@UAEXHVVU_ID@@@Z ENDP		; UnitClass::SetUnitOrders
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitOrders@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitOrders@UnitClass@@UAEXH@Z PROC			; UnitClass::SetUnitOrders, COMDAT
; _this$ = ecx

; 509  : 	virtual void SetUnitOrders (int)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitOrders@UnitClass@@UAEXH@Z ENDP			; UnitClass::SetUnitOrders
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitObjective@UnitClass@@UAEXVVU_ID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 8
?SetUnitObjective@UnitClass@@UAEXVVU_ID@@@Z PROC	; UnitClass::SetUnitObjective, COMDAT
; _this$ = ecx

; 508  : 	virtual void SetUnitObjective (VU_ID)					{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitObjective@UnitClass@@UAEXVVU_ID@@@Z ENDP	; UnitClass::SetUnitObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitSecondaryObj@UnitClass@@UAEXVVU_ID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 8
?SetUnitSecondaryObj@UnitClass@@UAEXVVU_ID@@@Z PROC	; UnitClass::SetUnitSecondaryObj, COMDAT
; _this$ = ecx

; 507  : 	virtual void SetUnitSecondaryObj (VU_ID)					{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitSecondaryObj@UnitClass@@UAEXVVU_ID@@@Z ENDP	; UnitClass::SetUnitSecondaryObj
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitPrimaryObj@UnitClass@@UAEXVVU_ID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 8
?SetUnitPrimaryObj@UnitClass@@UAEXVVU_ID@@@Z PROC	; UnitClass::SetUnitPrimaryObj, COMDAT
; _this$ = ecx

; 506  : 	virtual void SetUnitPrimaryObj (VU_ID)					{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitPrimaryObj@UnitClass@@UAEXVVU_ID@@@Z ENDP	; UnitClass::SetUnitPrimaryObj
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitAssemblyPoint@UnitClass@@UAEXHPAF0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?GetUnitAssemblyPoint@UnitClass@@UAEXHPAF0@Z PROC	; UnitClass::GetUnitAssemblyPoint, COMDAT
; _this$ = ecx

; 503  : 	virtual void GetUnitAssemblyPoint (int, GridIndex*, GridIndex*)	{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetUnitAssemblyPoint@UnitClass@@UAEXHPAF0@Z ENDP	; UnitClass::GetUnitAssemblyPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitAssemblyPoint@UnitClass@@UAEXHFF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 2
___formal$ = 16						; size = 2
?SetUnitAssemblyPoint@UnitClass@@UAEXHFF@Z PROC		; UnitClass::SetUnitAssemblyPoint, COMDAT
; _this$ = ecx

; 502  : 	virtual void SetUnitAssemblyPoint (int, GridIndex, GridIndex)		{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetUnitAssemblyPoint@UnitClass@@UAEXHFF@Z ENDP		; UnitClass::SetUnitAssemblyPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?HandleRequestReceipt@UnitClass@@UAEXHHVVU_ID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 8
?HandleRequestReceipt@UnitClass@@UAEXHHVVU_ID@@@Z PROC	; UnitClass::HandleRequestReceipt, COMDAT
; _this$ = ecx

; 501  : 	virtual void HandleRequestReceipt(int, int, VU_ID)			{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?HandleRequestReceipt@UnitClass@@UAEXHHVVU_ID@@@Z ENDP	; UnitClass::HandleRequestReceipt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?BuildPackage@UnitClass@@UAEHPAVMissionRequestClass@@PAVFalconPrivateList@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?BuildPackage@UnitClass@@UAEHPAVMissionRequestClass@@PAVFalconPrivateList@@@Z PROC ; UnitClass::BuildPackage, COMDAT
; _this$ = ecx

; 500  : 	virtual int BuildPackage(MissionRequest, F4PFList)	{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	8
?BuildPackage@UnitClass@@UAEHPAVMissionRequestClass@@PAVFalconPrivateList@@@Z ENDP ; UnitClass::BuildPackage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetLastResupply@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetLastResupply@UnitClass@@UAEHXZ PROC			; UnitClass::GetLastResupply, COMDAT
; _this$ = ecx

; 497  : 	virtual int GetLastResupply (void)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLastResupply@UnitClass@@UAEHXZ ENDP			; UnitClass::GetLastResupply
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetLastResupplyTime@UnitClass@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetLastResupplyTime@UnitClass@@UAEKXZ PROC		; UnitClass::GetLastResupplyTime, COMDAT
; _this$ = ecx

; 496  : 	virtual CampaignTime GetLastResupplyTime (void)				{ return TheCampaign.CurrentTime; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ?TheCampaign@@3VCampaignClass@@A
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLastResupplyTime@UnitClass@@UAEKXZ ENDP		; UnitClass::GetLastResupplyTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitStores@UnitClass@@UAEEH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?GetUnitStores@UnitClass@@UAEEH@Z PROC			; UnitClass::GetUnitStores, COMDAT
; _this$ = ecx

; 495  : 	virtual uchar GetUnitStores (int)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	al, al
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitStores@UnitClass@@UAEEH@Z ENDP			; UnitClass::GetUnitStores
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetSquadronFuel@UnitClass@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSquadronFuel@UnitClass@@UAEJXZ PROC			; UnitClass::GetSquadronFuel, COMDAT
; _this$ = ecx

; 494  : 	virtual long GetSquadronFuel (void)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSquadronFuel@UnitClass@@UAEJXZ ENDP			; UnitClass::GetSquadronFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitMorale@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitMorale@UnitClass@@UAEHXZ PROC			; UnitClass::GetUnitMorale, COMDAT
; _this$ = ecx

; 493  : 	virtual int GetUnitMorale (void) 							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitMorale@UnitClass@@UAEHXZ ENDP			; UnitClass::GetUnitMorale
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitSpecialty@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitSpecialty@UnitClass@@UAEHXZ PROC		; UnitClass::GetUnitSpecialty, COMDAT
; _this$ = ecx

; 491  : 	virtual int GetUnitSpecialty (void)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitSpecialty@UnitClass@@UAEHXZ ENDP		; UnitClass::GetUnitSpecialty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetLastResupplyTime@UnitClass@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetLastResupplyTime@UnitClass@@UAEXK@Z PROC		; UnitClass::SetLastResupplyTime, COMDAT
; _this$ = ecx

; 490  : 	virtual void SetLastResupplyTime (CampaignTime)			{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLastResupplyTime@UnitClass@@UAEXK@Z ENDP		; UnitClass::SetLastResupplyTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetLastResupply@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetLastResupply@UnitClass@@UAEXH@Z PROC		; UnitClass::SetLastResupply, COMDAT
; _this$ = ecx

; 489  : 	virtual void SetLastResupply (int)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLastResupply@UnitClass@@UAEXH@Z ENDP		; UnitClass::SetLastResupply
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitStores@UnitClass@@UAEXHE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 1
?SetUnitStores@UnitClass@@UAEXHE@Z PROC			; UnitClass::SetUnitStores, COMDAT
; _this$ = ecx

; 488  : 	virtual void SetUnitStores (int, uchar)					{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitStores@UnitClass@@UAEXHE@Z ENDP			; UnitClass::SetUnitStores
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetSquadronFuel@UnitClass@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetSquadronFuel@UnitClass@@UAEXJ@Z PROC		; UnitClass::SetSquadronFuel, COMDAT
; _this$ = ecx

; 487  : 	virtual void SetSquadronFuel (long)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSquadronFuel@UnitClass@@UAEXJ@Z ENDP		; UnitClass::SetSquadronFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitMorale@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitMorale@UnitClass@@UAEXH@Z PROC			; UnitClass::SetUnitMorale, COMDAT
; _this$ = ecx

; 486  : 	virtual void SetUnitMorale (int)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitMorale@UnitClass@@UAEXH@Z ENDP			; UnitClass::SetUnitMorale
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitSupply@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitSupply@UnitClass@@UAEXH@Z PROC			; UnitClass::SetUnitSupply, COMDAT
; _this$ = ecx

; 485  : 	virtual void SetUnitSupply (int)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitSupply@UnitClass@@UAEXH@Z ENDP			; UnitClass::SetUnitSupply
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitSpecialty@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitSpecialty@UnitClass@@UAEXH@Z PROC		; UnitClass::SetUnitSpecialty, COMDAT
; _this$ = ecx

; 484  : 	virtual void SetUnitSpecialty (int)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitSpecialty@UnitClass@@UAEXH@Z ENDP		; UnitClass::SetUnitSpecialty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?UseFuel@UnitClass@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?UseFuel@UnitClass@@UAEXJ@Z PROC			; UnitClass::UseFuel, COMDAT
; _this$ = ecx

; 481  : 	virtual void UseFuel (long)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?UseFuel@UnitClass@@UAEXJ@Z ENDP			; UnitClass::UseFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?BuildMission@UnitClass@@UAEHPAVMissionRequestClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?BuildMission@UnitClass@@UAEHPAVMissionRequestClass@@@Z PROC ; UnitClass::BuildMission, COMDAT
; _this$ = ecx

; 479  : 	virtual int BuildMission(MissionRequestClass*)			{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?BuildMission@UnitClass@@UAEHPAVMissionRequestClass@@@Z ENDP ; UnitClass::BuildMission
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetKnownEmitters@UnitClass@@UAEPAVFalconPrivateList@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetKnownEmitters@UnitClass@@UAEPAVFalconPrivateList@@XZ PROC ; UnitClass::GetKnownEmitters, COMDAT
; _this$ = ecx

; 478  : 	virtual F4PFList GetKnownEmitters (void)					{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetKnownEmitters@UnitClass@@UAEPAVFalconPrivateList@@XZ ENDP ; UnitClass::GetKnownEmitters
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?ETA@UnitClass@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ETA@UnitClass@@UAEKXZ PROC				; UnitClass::ETA, COMDAT
; _this$ = ecx

; 477  : 	virtual CampaignTime ETA (void)								{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?ETA@UnitClass@@UAEKXZ ENDP				; UnitClass::ETA
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?DumpWeapons@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DumpWeapons@UnitClass@@UAEHXZ PROC			; UnitClass::DumpWeapons, COMDAT
; _this$ = ecx

; 476  : 	virtual int DumpWeapons (void)								{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?DumpWeapons@UnitClass@@UAEHXZ ENDP			; UnitClass::DumpWeapons
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?LoadWeapons@UnitClass@@UAEHPAXPAEW4MoveType@@HHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 4
?LoadWeapons@UnitClass@@UAEHPAXPAEW4MoveType@@HHH@Z PROC ; UnitClass::LoadWeapons, COMDAT
; _this$ = ecx

; 475  : 	virtual int LoadWeapons (void*, uchar*, MoveType, int, int, int)	{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?LoadWeapons@UnitClass@@UAEHPAXPAEW4MoveType@@HHH@Z ENDP ; UnitClass::LoadWeapons
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitAirbaseID@UnitClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetUnitAirbaseID@UnitClass@@UAE?AVVU_ID@@XZ PROC	; UnitClass::GetUnitAirbaseID, COMDAT
; _this$ = ecx

; 474  : 	virtual VU_ID GetUnitAirbaseID (void)						{ return FalconNullId; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitAirbaseID@UnitClass@@UAE?AVVU_ID@@XZ ENDP	; UnitClass::GetUnitAirbaseID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitAirbase@UnitClass@@UAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitAirbase@UnitClass@@UAEPAVCampBaseClass@@XZ PROC	; UnitClass::GetUnitAirbase, COMDAT
; _this$ = ecx

; 473  : 	virtual CampEntity GetUnitAirbase (void)					{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitAirbase@UnitClass@@UAEPAVCampBaseClass@@XZ ENDP	; UnitClass::GetUnitAirbase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitSquadronID@UnitClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetUnitSquadronID@UnitClass@@UAE?AVVU_ID@@XZ PROC	; UnitClass::GetUnitSquadronID, COMDAT
; _this$ = ecx

; 472  : 	virtual VU_ID GetUnitSquadronID (void)						{ return FalconNullId; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitSquadronID@UnitClass@@UAE?AVVU_ID@@XZ ENDP	; UnitClass::GetUnitSquadronID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitSquadron@UnitClass@@UAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitSquadron@UnitClass@@UAEPAV1@XZ PROC		; UnitClass::GetUnitSquadron, COMDAT
; _this$ = ecx

; 471  : 	virtual Unit GetUnitSquadron (void)							{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitSquadron@UnitClass@@UAEPAV1@XZ ENDP		; UnitClass::GetUnitSquadron
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitTOT@UnitClass@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitTOT@UnitClass@@UAEKXZ PROC			; UnitClass::GetUnitTOT, COMDAT
; _this$ = ecx

; 470  : 	virtual CampaignTime GetUnitTOT (void)						{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitTOT@UnitClass@@UAEKXZ ENDP			; UnitClass::GetUnitTOT
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitMissionID@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitMissionID@UnitClass@@UAEHXZ PROC		; UnitClass::GetUnitMissionID, COMDAT
; _this$ = ecx

; 469  : 	virtual int GetUnitMissionID (void)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitMissionID@UnitClass@@UAEHXZ ENDP		; UnitClass::GetUnitMissionID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitMissionTargetID@UnitClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetUnitMissionTargetID@UnitClass@@UAE?AVVU_ID@@XZ PROC	; UnitClass::GetUnitMissionTargetID, COMDAT
; _this$ = ecx

; 468  : 	virtual VU_ID GetUnitMissionTargetID (void)					{ return FalconNullId; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitMissionTargetID@UnitClass@@UAE?AVVU_ID@@XZ ENDP	; UnitClass::GetUnitMissionTargetID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitMissionTarget@UnitClass@@UAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitMissionTarget@UnitClass@@UAEPAVCampBaseClass@@XZ PROC ; UnitClass::GetUnitMissionTarget, COMDAT
; _this$ = ecx

; 467  : 	virtual CampEntity GetUnitMissionTarget (void)				{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitMissionTarget@UnitClass@@UAEPAVCampBaseClass@@XZ ENDP ; UnitClass::GetUnitMissionTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitPriority@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitPriority@UnitClass@@UAEHXZ PROC			; UnitClass::GetUnitPriority, COMDAT
; _this$ = ecx

; 466  : 	virtual int GetUnitPriority (void)							{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitPriority@UnitClass@@UAEHXZ ENDP			; UnitClass::GetUnitPriority
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitCurrentRole@UnitClass@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitCurrentRole@UnitClass@@UBEHXZ PROC		; UnitClass::GetUnitCurrentRole, COMDAT
; _this$ = ecx

; 465  : 	virtual int GetUnitCurrentRole() const						{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitCurrentRole@UnitClass@@UBEHXZ ENDP		; UnitClass::GetUnitCurrentRole
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitNormalRole@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitNormalRole@UnitClass@@UAEHXZ PROC		; UnitClass::GetUnitNormalRole, COMDAT
; _this$ = ecx

; 464  : 	virtual int GetUnitNormalRole (void)						{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitNormalRole@UnitClass@@UAEHXZ ENDP		; UnitClass::GetUnitNormalRole
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitMission@UnitClass@@UAE?AW4MissionTypeEnum@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitMission@UnitClass@@UAE?AW4MissionTypeEnum@@XZ PROC ; UnitClass::GetUnitMission, COMDAT
; _this$ = ecx

; 463  : 	virtual MissionTypeEnum GetUnitMission (void)							{ return (MissionTypeEnum)0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitMission@UnitClass@@UAE?AW4MissionTypeEnum@@XZ ENDP ; UnitClass::GetUnitMission
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetBurntFuel@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetBurntFuel@UnitClass@@UAEHXZ PROC			; UnitClass::GetBurntFuel, COMDAT
; _this$ = ecx

; 462  : 	virtual int GetBurntFuel (void)								{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetBurntFuel@UnitClass@@UAEHXZ ENDP			; UnitClass::GetBurntFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetNumberOfLoadouts@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumberOfLoadouts@UnitClass@@UAEHXZ PROC		; UnitClass::GetNumberOfLoadouts, COMDAT
; _this$ = ecx

; 457  : 	virtual int GetNumberOfLoadouts (void)						{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumberOfLoadouts@UnitClass@@UAEHXZ ENDP		; UnitClass::GetNumberOfLoadouts
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetLoadout@UnitClass@@UAEXPAULoadoutStruct@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?SetLoadout@UnitClass@@UAEXPAULoadoutStruct@@H@Z PROC	; UnitClass::SetLoadout, COMDAT
; _this$ = ecx

; 456  : 	virtual void SetLoadout (LoadoutStruct*, int)	{ ShiWarning("Shouldn't be here"); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetLoadout@UnitClass@@UAEXPAULoadoutStruct@@H@Z ENDP	; UnitClass::SetLoadout
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitAirbase@UnitClass@@UAEXVVU_ID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 8
?SetUnitAirbase@UnitClass@@UAEXVVU_ID@@@Z PROC		; UnitClass::SetUnitAirbase, COMDAT
; _this$ = ecx

; 455  : 	virtual void SetUnitAirbase (VU_ID)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitAirbase@UnitClass@@UAEXVVU_ID@@@Z ENDP		; UnitClass::SetUnitAirbase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitSquadron@UnitClass@@UAEXVVU_ID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 8
?SetUnitSquadron@UnitClass@@UAEXVVU_ID@@@Z PROC		; UnitClass::SetUnitSquadron, COMDAT
; _this$ = ecx

; 454  : 	virtual void SetUnitSquadron (VU_ID)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUnitSquadron@UnitClass@@UAEXVVU_ID@@@Z ENDP		; UnitClass::SetUnitSquadron
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitTOT@UnitClass@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitTOT@UnitClass@@UAEXK@Z PROC			; UnitClass::SetUnitTOT, COMDAT
; _this$ = ecx

; 453  : 	virtual void SetUnitTOT (CampaignTime)					{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitTOT@UnitClass@@UAEXK@Z ENDP			; UnitClass::SetUnitTOT
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitMissionTarget@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitMissionTarget@UnitClass@@UAEXH@Z PROC		; UnitClass::SetUnitMissionTarget, COMDAT
; _this$ = ecx

; 452  : 	virtual void SetUnitMissionTarget (int)					{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitMissionTarget@UnitClass@@UAEXH@Z ENDP		; UnitClass::SetUnitMissionTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitMissionID@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitMissionID@UnitClass@@UAEXH@Z PROC		; UnitClass::SetUnitMissionID, COMDAT
; _this$ = ecx

; 451  : 	virtual void SetUnitMissionID (int)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitMissionID@UnitClass@@UAEXH@Z ENDP		; UnitClass::SetUnitMissionID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitPriority@UnitClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetUnitPriority@UnitClass@@UAEXH@Z PROC		; UnitClass::SetUnitPriority, COMDAT
; _this$ = ecx

; 450  : 	virtual void SetUnitPriority (int)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitPriority@UnitClass@@UAEXH@Z ENDP		; UnitClass::SetUnitPriority
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitRole@UnitClass@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetUnitRole@UnitClass@@UAEXE@Z PROC			; UnitClass::SetUnitRole, COMDAT
; _this$ = ecx

; 449  : 	virtual void SetUnitRole (uchar)							{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitRole@UnitClass@@UAEXE@Z ENDP			; UnitClass::SetUnitRole
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetUnitMission@UnitClass@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetUnitMission@UnitClass@@UAEXE@Z PROC			; UnitClass::SetUnitMission, COMDAT
; _this$ = ecx

; 448  : 	virtual void SetUnitMission (uchar)						{}			

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetUnitMission@UnitClass@@UAEXE@Z ENDP			; UnitClass::SetUnitMission
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetBurntFuel@UnitClass@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetBurntFuel@UnitClass@@UAEXJ@Z PROC			; UnitClass::SetBurntFuel, COMDAT
; _this$ = ecx

; 447  : 	virtual void SetBurntFuel (long)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetBurntFuel@UnitClass@@UAEXJ@Z ENDP			; UnitClass::SetBurntFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ PROC	; UnitClass::GetFirstUnitWP, COMDAT
; _this$ = ecx

; 431  : 	WayPoint GetFirstUnitWP()				{ return wp_list; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+244]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstUnitWP@UnitClass@@QAEPAVWayPointClass@@XZ ENDP	; UnitClass::GetFirstUnitWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitMoved@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitMoved@UnitClass@@QBEHXZ PROC			; UnitClass::GetUnitMoved, COMDAT
; _this$ = ecx

; 374  : 	int GetUnitMoved() const						{ return moved; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+220]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitMoved@UnitClass@@QBEHXZ ENDP			; UnitClass::GetUnitMoved
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ PROC	; UnitClass::GetTarget, COMDAT
; _this$ = ecx

; 366  : 	FalconEntity* GetTarget (void)					{ return (FalconEntity*) vuDatabase->Find(target_id); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+216]
	push	ecx
	mov	edx, DWORD PTR [eax+212]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTarget@UnitClass@@QAEPAVFalconEntity@@XZ ENDP	; UnitClass::GetTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetNumVehicles@UnitClass@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vg$ = 8						; size = 4
?GetNumVehicles@UnitClass@@QAEHH@Z PROC			; UnitClass::GetNumVehicles, COMDAT
; _this$ = ecx

; 365  : 	int GetNumVehicles (int vg)						{ return (int)((roster >> (vg*2)) & 0x03); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _vg$[ebp]
	shl	ecx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+192]
	sar	eax, cl
	and	eax, 3
	mov	esp, ebp
	pop	ebp
	ret	4
?GetNumVehicles@UnitClass@@QAEHH@Z ENDP			; UnitClass::GetNumVehicles
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SetTarget@UnitClass@@QAEXPAVFalconEntity@@@Z
_TEXT	SEGMENT
$T1 = -28						; size = 8
$T2 = -20						; size = 8
_this$ = -12						; size = 4
$T3 = -8						; size = 4
tv73 = -4						; size = 4
_e$ = 8							; size = 4
?SetTarget@UnitClass@@QAEXPAVFalconEntity@@@Z PROC	; UnitClass::SetTarget, COMDAT
; _this$ = ecx

; 359  : 	void SetTarget (FalconEntity *e)				{ target_id = (e)? e->Id() : FalconNullId; }

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _e$[ebp], 0
	je	SHORT $LN3@SetTarget
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN4@SetTarget
$LN3@SetTarget:
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR $T2[ebp+4], edx
	lea	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv73[ebp], eax
$LN4@SetTarget:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+212], eax
	mov	DWORD PTR [edx+216], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetTarget@UnitClass@@QAEXPAVFalconEntity@@@Z ENDP	; UnitClass::SetTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SimSetOrientation@UnitClass@@UAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?SimSetOrientation@UnitClass@@UAEXMMM@Z PROC		; UnitClass::SimSetOrientation, COMDAT
; _this$ = ecx

; 346  : 	virtual void SimSetOrientation (float, float, float) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SimSetOrientation@UnitClass@@UAEXMMM@Z ENDP		; UnitClass::SimSetOrientation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SimSetLocation@UnitClass@@UAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?SimSetLocation@UnitClass@@UAEXMMM@Z PROC		; UnitClass::SimSetLocation, COMDAT
; _this$ = ecx

; 344  : 	virtual void SimSetLocation (float x, float y, float z)	{ SetPosition(x,y,z); MakeCampBaseDirty (DIRTY_POSITION, DDP[182].priority); MakeCampBaseDirty (DIRTY_ALTITUDE, DDP[183].priority); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPosition@VuEntity@@QAEXMMM@Z	; VuEntity::SetPosition
	mov	eax, 4
	imul	eax, 182				; 000000b6H
	mov	ecx, DWORD PTR ?DDP@@3PAUDirtyDataClassType@@A ; DDP
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeCampBaseDirty@CampBaseClass@@QAEXW4Dirty_Campaign_Base@@W4Dirtyness@@@Z ; CampBaseClass::MakeCampBaseDirty
	mov	eax, 4
	imul	eax, 183				; 000000b7H
	mov	ecx, DWORD PTR ?DDP@@3PAUDirtyDataClassType@@A ; DDP
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeCampBaseDirty@CampBaseClass@@QAEXW4Dirty_Campaign_Base@@W4Dirtyness@@@Z ; CampBaseClass::MakeCampBaseDirty
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SimSetLocation@UnitClass@@UAEXMMM@Z ENDP		; UnitClass::SimSetLocation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Targeted@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Targeted@UnitClass@@QBEHXZ PROC			; UnitClass::Targeted, COMDAT
; _this$ = ecx

; 325  : 	int Targeted () const								{ return (int)unit_flags & U_TARGETED; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 1048576				; 00100000H
	mov	esp, ebp
	pop	ebp
	ret	0
?Targeted@UnitClass@@QBEHXZ ENDP			; UnitClass::Targeted
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Combat@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Combat@UnitClass@@QBEHXZ PROC				; UnitClass::Combat, COMDAT
; _this$ = ecx

; 319  : 	int Combat () const								{ return (int)unit_flags & U_COMBAT; }		

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 16384				; 00004000H
	mov	esp, ebp
	pop	ebp
	ret	0
?Combat@UnitClass@@QBEHXZ ENDP				; UnitClass::Combat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Moving@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Moving@UnitClass@@QBEHXZ PROC				; UnitClass::Moving, COMDAT
; _this$ = ecx

; 316  : 	int Moving() const								{ return (int)unit_flags & U_MOVING; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 1024				; 00000400H
	mov	esp, ebp
	pop	ebp
	ret	0
?Moving@UnitClass@@QBEHXZ ENDP				; UnitClass::Moving
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Engaged@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Engaged@UnitClass@@QBEHXZ PROC				; UnitClass::Engaged, COMDAT
; _this$ = ecx

; 313  : 	int Engaged() const								{ return (int)unit_flags & U_ENGAGED; }	

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 64					; 00000040H
	mov	esp, ebp
	pop	ebp
	ret	0
?Engaged@UnitClass@@QBEHXZ ENDP				; UnitClass::Engaged
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Parent@UnitClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Parent@UnitClass@@QBEHXZ PROC				; UnitClass::Parent, COMDAT
; _this$ = ecx

; 312  : 	int Parent() const								{ return (int)unit_flags & U_PARENT; }		

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 32					; 00000020H
	mov	esp, ebp
	pop	ebp
	ret	0
?Parent@UnitClass@@QBEHXZ ENDP				; UnitClass::Parent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?IsDead@UnitClass@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDead@UnitClass@@UBEHXZ PROC				; UnitClass::IsDead, COMDAT
; _this$ = ecx

; 307  : 	virtual int IsDead() const						{ return (int)unit_flags & U_DEAD; }		

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	and	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDead@UnitClass@@UBEHXZ ENDP				; UnitClass::IsDead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?IsUnit@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsUnit@UnitClass@@UAEHXZ PROC				; UnitClass::IsUnit, COMDAT
; _this$ = ecx

; 274  : 	virtual int IsUnit (void)										{ return TRUE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsUnit@UnitClass@@UAEHXZ ENDP				; UnitClass::IsUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?SupplyUnit@UnitClass@@UAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?SupplyUnit@UnitClass@@UAEXHH@Z PROC			; UnitClass::SupplyUnit, COMDAT
; _this$ = ecx

; 265  : 	virtual void SupplyUnit (int, int)								{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SupplyUnit@UnitClass@@UAEXHH@Z ENDP			; UnitClass::SupplyUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitFuelNeed@UnitClass@@UAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?GetUnitFuelNeed@UnitClass@@UAEHH@Z PROC		; UnitClass::GetUnitFuelNeed, COMDAT
; _this$ = ecx

; 264  : 	virtual int GetUnitFuelNeed (int)								{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitFuelNeed@UnitClass@@UAEHH@Z ENDP		; UnitClass::GetUnitFuelNeed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitSupplyNeed@UnitClass@@UAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?GetUnitSupplyNeed@UnitClass@@UAEHH@Z PROC		; UnitClass::GetUnitSupplyNeed, COMDAT
; _this$ = ecx

; 263  : 	virtual int GetUnitSupplyNeed (int)								{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitSupplyNeed@UnitClass@@UAEHH@Z ENDP		; UnitClass::GetUnitSupplyNeed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?AdjustForSupply@UnitClass@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AdjustForSupply@UnitClass@@UAEMXZ PROC			; UnitClass::AdjustForSupply, COMDAT
; _this$ = ecx

; 250  : 	virtual float AdjustForSupply(void)								{ return 1.0F; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fld1
	mov	esp, ebp
	pop	ebp
	ret	0
?AdjustForSupply@UnitClass@@UAEMXZ ENDP			; UnitClass::AdjustForSupply
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?Father@UnitClass@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Father@UnitClass@@UBEHXZ PROC				; UnitClass::Father, COMDAT
; _this$ = ecx

; 248  : 	virtual int Father() const										{ return 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?Father@UnitClass@@UBEHXZ ENDP				; UnitClass::Father
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?ClearDeaggregationData@UnitClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearDeaggregationData@UnitClass@@UAEXXZ PROC		; UnitClass::ClearDeaggregationData, COMDAT
; _this$ = ecx

; 242  : 	virtual void ClearDeaggregationData (void)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearDeaggregationData@UnitClass@@UAEXXZ ENDP		; UnitClass::ClearDeaggregationData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?ShouldDeaggregate@UnitClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ShouldDeaggregate@UnitClass@@UAEHXZ PROC		; UnitClass::ShouldDeaggregate, COMDAT
; _this$ = ecx

; 241  : 	virtual int	ShouldDeaggregate(void)								{return TRUE;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?ShouldDeaggregate@UnitClass@@UAEHXZ ENDP		; UnitClass::ShouldDeaggregate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\unit.h
;	COMDAT ?GetUnitDeaggregationData@UnitClass@@UAEPAVUnitDeaggregationData@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitDeaggregationData@UnitClass@@UAEPAVUnitDeaggregationData@@XZ PROC ; UnitClass::GetUnitDeaggregationData, COMDAT
; _this$ = ecx

; 240  : 	virtual UnitDeaggregationData* GetUnitDeaggregationData (void)	{ return NULL; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitDeaggregationData@UnitClass@@UAEPAVUnitDeaggregationData@@XZ ENDP ; UnitClass::GetUnitDeaggregationData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campaign.h
;	COMDAT ?CampLeaveCriticalSection@@YAXXZ
_TEXT	SEGMENT
?CampLeaveCriticalSection@@YAXXZ PROC			; CampLeaveCriticalSection, COMDAT

; 51   : inline void CampLeaveCriticalSection(){ F4LeaveCriticalSection(campCritical); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?campCritical@@3PAUF4CSECTIONHANDLE@@A ; campCritical
	push	eax
	call	_F4LeaveCriticalSection
	add	esp, 4
	pop	ebp
	ret	0
?CampLeaveCriticalSection@@YAXXZ ENDP			; CampLeaveCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campaign.h
;	COMDAT ?CampEnterCriticalSection@@YAXXZ
_TEXT	SEGMENT
?CampEnterCriticalSection@@YAXXZ PROC			; CampEnterCriticalSection, COMDAT

; 50   : inline void CampEnterCriticalSection(){ F4EnterCriticalSection(campCritical); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?campCritical@@3PAUF4CSECTIONHANDLE@@A ; campCritical
	push	eax
	call	_F4EnterCriticalSection
	add	esp, 4
	pop	ebp
	ret	0
?CampEnterCriticalSection@@YAXXZ ENDP			; CampEnterCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ PROC ; VuBin<CampBaseClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ENDP ; VuBin<CampBaseClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?SetChecked@CampBaseClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetChecked@CampBaseClass@@QAEXXZ PROC			; CampBaseClass::SetChecked, COMDAT
; _this$ = ecx

; 306  : 	void SetChecked (void)						{	local_flags |= CBC_CHECKED; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+156]
	or	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+156], cx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetChecked@CampBaseClass@@QAEXXZ ENDP			; CampBaseClass::SetChecked
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetSType@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSType@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetSType, COMDAT
; _this$ = ecx

; 290  : 	uchar GetSType (void)	const						{	return (EntityType())->classInfo_[VU_STYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSType@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetSType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetType@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetType@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetType, COMDAT
; _this$ = ecx

; 289  : 	uchar GetType()	const						{	return (EntityType())->classInfo_[VU_TYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	shl	ecx, 1
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetType@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?HasEntity@CampBaseClass@@UBEHPAVVuEntity@@@Z
_TEXT	SEGMENT
tv81 = -8						; size = 4
_this$ = -4						; size = 4
_e$ = 8							; size = 4
?HasEntity@CampBaseClass@@UBEHPAVVuEntity@@@Z PROC	; CampBaseClass::HasEntity, COMDAT
; _this$ = ecx

; 281  : 	virtual int HasEntity(VuEntity *e) const    {   

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 282  : 		return ((components && (components->Find(e) != NULL)) || (this == e)); 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+160], 0
	je	SHORT $LN3@HasEntity
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+160]
	call	?Find@VuCollection@@QBE_NPAVVuEntity@@@Z ; VuCollection::Find
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@HasEntity
$LN3@HasEntity:
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR _e$[ebp]
	je	SHORT $LN4@HasEntity
	mov	DWORD PTR tv81[ebp], 0
	jmp	SHORT $LN5@HasEntity
$LN4@HasEntity:
	mov	DWORD PTR tv81[ebp], 1
$LN5@HasEntity:
	mov	eax, DWORD PTR tv81[ebp]

; 283  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?HasEntity@CampBaseClass@@UBEHPAVVuEntity@@@Z ENDP	; CampBaseClass::HasEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?IsAggregate@CampBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAggregate@CampBaseClass@@QAEHXZ PROC			; CampBaseClass::IsAggregate, COMDAT
; _this$ = ecx

; 278  : 	int IsAggregate (void)						{	return local_flags & CBC_AGGREGATE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+156]
	and	eax, 128				; 00000080H
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAggregate@CampBaseClass@@QAEHXZ ENDP			; CampBaseClass::IsAggregate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?IsAwake@CampBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAwake@CampBaseClass@@QAEHXZ PROC			; CampBaseClass::IsAwake, COMDAT
; _this$ = ecx

; 273  : 	int IsAwake (void)							{	return local_flags & CBC_AWAKE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+156]
	and	eax, 2
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAwake@CampBaseClass@@QAEHXZ ENDP			; CampBaseClass::IsAwake
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?IsChecked@CampBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsChecked@CampBaseClass@@QAEHXZ PROC			; CampBaseClass::IsChecked, COMDAT
; _this$ = ecx

; 272  : 	int IsChecked (void)						{	return local_flags & CBC_CHECKED; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+156]
	and	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsChecked@CampBaseClass@@QAEHXZ ENDP			; CampBaseClass::IsChecked
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?IsEmitting@CampBaseClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmitting@CampBaseClass@@UAEHXZ PROC			; CampBaseClass::IsEmitting, COMDAT
; _this$ = ecx

; 269  : 	virtual int IsEmitting (void)				{	return base_flags & CBC_EMITTING; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+150]
	and	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmitting@CampBaseClass@@UAEHXZ ENDP			; CampBaseClass::IsEmitting
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?IsCampBase@CampBaseClass@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsCampBase@CampBaseClass@@UAE_NXZ PROC			; CampBaseClass::IsCampBase, COMDAT
; _this$ = ecx

; 268  : 	virtual bool IsCampBase() { return true; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsCampBase@CampBaseClass@@UAE_NXZ ENDP			; CampBaseClass::IsCampBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetOwner@CampBaseClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOwner@CampBaseClass@@QAEEXZ PROC			; CampBaseClass::GetOwner, COMDAT
; _this$ = ecx

; 241  : 	Control GetOwner (void)										{	return owner; }			// Old form

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+154]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOwner@CampBaseClass@@QAEEXZ ENDP			; CampBaseClass::GetOwner
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetCountry@CampBaseClass@@UAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCountry@CampBaseClass@@UAEEXZ PROC			; CampBaseClass::GetCountry, COMDAT
; _this$ = ecx

; 239  : 	virtual uchar GetCountry (void)								{	return owner; }		// New FalcEnt friendly form

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+154]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCountry@CampBaseClass@@UAEEXZ ENDP			; CampBaseClass::GetCountry
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetTeam@CampBaseClass@@UAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTeam@CampBaseClass@@UAEEXZ PROC			; CampBaseClass::GetTeam, COMDAT
; _this$ = ecx

; 238  : 	virtual uchar GetTeam (void)								{	return ::GetTeam(owner); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+154]
	push	ecx
	call	?GetTeam@@YAEE@Z			; GetTeam
	add	esp, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTeam@CampBaseClass@@UAEEXZ ENDP			; CampBaseClass::GetTeam
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetCampID@CampBaseClass@@UAEFXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampID@CampBaseClass@@UAEFXZ PROC			; CampBaseClass::GetCampID, COMDAT
; _this$ = ecx

; 237  : 	virtual short GetCampID (void)								{	return camp_id; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+152]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampID@CampBaseClass@@UAEFXZ ENDP			; CampBaseClass::GetCampID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ PROC ; CampBaseClass::GetComponents, COMDAT
; _this$ = ecx

; 141  : 	TailInsertList *GetComponents() const		{	return components; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+160]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ENDP ; CampBaseClass::GetComponents
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ?memcpychk@@YAXPAXPAPAEIPAJ@Z
_TEXT	SEGMENT
$T2 = -152						; size = 12
_s$3 = -140						; size = 24
_err$4 = -116						; size = 100
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_size$ = 16						; size = 4
_rem$ = 20						; size = 4
?memcpychk@@YAXPAXPAPAEIPAJ@Z PROC			; memcpychk, COMDAT

; 25   : inline void memcpychk(void *dst, VU_BYTE **src, size_t size, long *rem){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 26   : 	if ((size_t)*rem < size){

	mov	eax, DWORD PTR _rem$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@memcpychk

; 27   : 		char err[100];
; 28   : 		sprintf(err, "Trying to write %lu bytes to %ld buffer", static_cast<unsigned long>(size), *rem);

	mov	edx, DWORD PTR _rem$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
	lea	edx, DWORD PTR _err$4[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 29   : 		std::string s(err);

	lea	eax, DWORD PTR _err$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 30   : 		throw InvalidBufferException(s);

	lea	ecx, DWORD PTR _s$3[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
	push	OFFSET __TI4?AVInvalidBufferException@@
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	__CxxThrowException@8

; 31   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@memcpychk:

; 32   : 	memcpy(dst, *src, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 33   : 	*rem -= size;

	mov	ecx, DWORD PTR _rem$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _rem$[ebp]
	mov	DWORD PTR [eax], edx

; 34   : 	*src += size;

	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR [eax], edx
$LN3@memcpychk:

; 35   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0:
	lea	ecx, DWORD PTR _s$3[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?memcpychk@@YAXPAXPAPAEIPAJ@Z ENDP			; memcpychk
; Function compile flags: /Odtp
;	COMDAT ??_GInvalidBufferException@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInvalidBufferException@@UAEPAXI@Z PROC		; InvalidBufferException::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1InvalidBufferException@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GInvalidBufferException@@UAEPAXI@Z ENDP		; InvalidBufferException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0InvalidBufferException@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV0@@Z PROC		; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV0@@Z ENDP		; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1InvalidBufferException@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1InvalidBufferException@@UAE@XZ PROC			; InvalidBufferException::~InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1InvalidBufferException@@UAE@XZ ENDP			; InvalidBufferException::~InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_msg$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx

; 19   : 	InvalidBufferException(const std::string &msg) : out_of_range(msg){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPLocation@WayPointClass@@QBEXPAF0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?GetWPLocation@WayPointClass@@QBEXPAF0@Z PROC		; WayPointClass::GetWPLocation, COMDAT
; _this$ = ecx

; 205  : 	void GetWPLocation (GridIndex* x, GridIndex* y) const { *x = GridX; *y = GridY; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+2]
	mov	WORD PTR [eax], dx
	mov	esp, ebp
	pop	ebp
	ret	8
?GetWPLocation@WayPointClass@@QBEXPAF0@Z ENDP		; WayPointClass::GetWPLocation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPDepartureTime@WayPointClass@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPDepartureTime@WayPointClass@@QAEKXZ PROC		; WayPointClass::GetWPDepartureTime, COMDAT
; _this$ = ecx

; 203  : 	CampaignTime GetWPDepartureTime()				{ return Depart; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPDepartureTime@WayPointClass@@QAEKXZ ENDP		; WayPointClass::GetWPDepartureTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetPrevWP@WayPointClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPrevWP@WayPointClass@@QAEPAV1@XZ PROC		; WayPointClass::GetPrevWP, COMDAT
; _this$ = ecx

; 176  : 	WayPoint GetPrevWP (void)						{ return PrevWP; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPrevWP@WayPointClass@@QAEPAV1@XZ ENDP		; WayPointClass::GetPrevWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetNextWP@WayPointClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNextWP@WayPointClass@@QAEPAV1@XZ PROC		; WayPointClass::GetNextWP, COMDAT
; _this$ = ecx

; 175  : 	WayPoint GetNextWP (void)						{ return NextWP; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextWP@WayPointClass@@QAEPAV1@XZ ENDP		; WayPointClass::GetNextWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetWPFlags@WayPointClass@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWPFlags@WayPointClass@@QAEKXZ PROC			; WayPointClass::GetWPFlags, COMDAT
; _this$ = ecx

; 173  : 	ulong GetWPFlags (void)							{ return (ulong)Flags; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWPFlags@WayPointClass@@QAEKXZ ENDP			; WayPointClass::GetWPFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?SetWPFlags@WayPointClass@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 4
?SetWPFlags@WayPointClass@@QAEXK@Z PROC			; WayPointClass::SetWPFlags, COMDAT
; _this$ = ecx

; 163  : 	void SetWPFlags (ulong f)						{ Flags = (ulong) f; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWPFlags@WayPointClass@@QAEXK@Z ENDP			; WayPointClass::SetWPFlags
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1SmallPathClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1SmallPathClass@@QAE@XZ PROC				; SmallPathClass::~SmallPathClass, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BasePathClass@@QAE@XZ		; BasePathClass::~BasePathClass
	mov	esp, ebp
	pop	ebp
	ret	0
??1SmallPathClass@@QAE@XZ ENDP				; SmallPathClass::~SmallPathClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?checked_atan2@@YANNN@Z
_TEXT	SEGMENT
_z$ = -8						; size = 8
_y$ = 8							; size = 8
_x$ = 16						; size = 8
?checked_atan2@@YANNN@Z PROC				; checked_atan2, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 47   : 	double z;
; 48   : 	
; 49   : 	if (x == -0.0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@8000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@checked_at

; 50   : 		x = 0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _x$[ebp], xmm0
$LN8@checked_at:

; 51   : 	
; 52   : 	if (x != 0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@checked_at

; 53   : 		z = atan(y / x);

	movsd	xmm0, QWORD PTR _y$[ebp]
	divsd	xmm0, QWORD PTR _x$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR _z$[ebp]
	jmp	SHORT $LN4@checked_at
$LN7@checked_at:

; 54   : 	else if (y > 0)

	movsd	xmm0, QWORD PTR _y$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@checked_at

; 55   : 		z = HALF_DPI;

	movsd	xmm0, QWORD PTR __real@3ff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 56   : 	else

	jmp	SHORT $LN4@checked_at
$LN5@checked_at:

; 57   : 		z = -HALF_DPI;

	movsd	xmm0, QWORD PTR __real@bff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN4@checked_at:

; 58   : 
; 59   : 	if (x < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _x$[ebp]
	jbe	SHORT $LN1@checked_at

; 60   : 	{
; 61   : 		if (y < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _y$[ebp]
	jbe	SHORT $LN2@checked_at

; 62   : 			z -= DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	subsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 63   : 		else

	jmp	SHORT $LN1@checked_at
$LN2@checked_at:

; 64   : 			z += DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	addsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN1@checked_at:

; 65   : 	}
; 66   : 
; 67   : 	return z;

	fld	QWORD PTR _z$[ebp]

; 68   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?checked_atan2@@YANNN@Z ENDP				; checked_atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?mlSinCos@@YAXPAUmlTrig@@M@Z
_TEXT	SEGMENT
_trig$ = 8						; size = 4
_angle$ = 12						; size = 4
?mlSinCos@@YAXPAUmlTrig@@M@Z PROC			; mlSinCos, COMDAT

; 12   : {

	push	ebp
	mov	ebp, esp

; 13   : #if defined(_MSC_VER)
; 14   : 	__asm 
; 15   : 	{
; 16   : 		__asm	mov     ecx, trig;

	mov	ecx, DWORD PTR _trig$[ebp]

; 17   : 		__asm	fld     dword ptr [angle];

	fld	DWORD PTR _angle$[ebp]

; 18   : 		__asm	fsincos;

	fsincos

; 19   : 		__asm	fstp    dword ptr [ecx]trig.cos;

	fstp	DWORD PTR [ecx+4]

; 20   : 		__asm	fstp    dword ptr [ecx]trig.sin;

	fstp	DWORD PTR [ecx]

; 21   : 	}
; 22   : #else
; 23   : 	trig->sin = (Float32)sin(angle);
; 24   : 	trig->cos = (Float32)cos(angle);
; 25   : #endif
; 26   : }

	pop	ebp
	ret	0
?mlSinCos@@YAXPAUmlTrig@@M@Z ENDP			; mlSinCos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?HasAreaJamming@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasAreaJamming@FalconEntity@@UAEHXZ PROC		; FalconEntity::HasAreaJamming, COMDAT
; _this$ = ecx

; 162  : 	virtual int HasAreaJamming (void)			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?HasAreaJamming@FalconEntity@@UAEHXZ ENDP		; FalconEntity::HasAreaJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?HasSPJamming@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasSPJamming@FalconEntity@@UAEHXZ PROC			; FalconEntity::HasSPJamming, COMDAT
; _this$ = ecx

; 161  : 	virtual int HasSPJamming (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?HasSPJamming@FalconEntity@@UAEHXZ ENDP			; FalconEntity::HasSPJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsAreaJamming@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAreaJamming@FalconEntity@@UAEHXZ PROC		; FalconEntity::IsAreaJamming, COMDAT
; _this$ = ecx

; 160  : 	virtual int IsAreaJamming (void)            { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAreaJamming@FalconEntity@@UAEHXZ ENDP		; FalconEntity::IsAreaJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSPJamming@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSPJamming@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsSPJamming, COMDAT
; _this$ = ecx

; 159  : 	virtual int IsSPJamming (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSPJamming@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsSPJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsTeam@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTeam@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsTeam, COMDAT
; _this$ = ecx

; 157  : 	virtual int IsTeam (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTeam@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsTeam
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsPackage@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPackage@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsPackage, COMDAT
; _this$ = ecx

; 156  : 	virtual int IsPackage (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPackage@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsPackage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSquadron@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSquadron@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsSquadron, COMDAT
; _this$ = ecx

; 155  : 	virtual int IsSquadron (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSquadron@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsSquadron
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsFlight@FalconEntity@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsFlight@FalconEntity@@UBEHXZ PROC			; FalconEntity::IsFlight, COMDAT
; _this$ = ecx

; 154  : 	virtual int IsFlight() const				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsFlight@FalconEntity@@UBEHXZ ENDP			; FalconEntity::IsFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBrigade@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBrigade@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBrigade, COMDAT
; _this$ = ecx

; 153  : 	virtual int IsBrigade (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBrigade@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBrigade
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBattalion@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBattalion@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBattalion, COMDAT
; _this$ = ecx

; 152  : 	virtual int IsBattalion (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBattalion@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBattalion
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsObjective@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsObjective@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsObjective, COMDAT
; _this$ = ecx

; 151  : 	virtual int IsObjective (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsObjective@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetMovementType@FalconEntity@@UAE?AW4MoveType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMovementType@FalconEntity@@UAE?AW4MoveType@@XZ PROC	; FalconEntity::GetMovementType, COMDAT
; _this$ = ecx

; 149  : 	virtual MoveType GetMovementType (void)		{ return NoMove; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMovementType@FalconEntity@@UAE?AW4MoveType@@XZ ENDP	; FalconEntity::GetMovementType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsDead@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDead@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsDead, COMDAT
; _this$ = ecx

; 144  : 	virtual int IsDead (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDead@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsDead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsExploding@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsExploding@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsExploding, COMDAT
; _this$ = ecx

; 143  : 	virtual int IsExploding (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsExploding@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsExploding
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsWeapon@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsWeapon@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsWeapon, COMDAT
; _this$ = ecx

; 142  : 	virtual int IsWeapon (void)   				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsWeapon@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsWeapon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsShip@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsShip@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsShip, COMDAT
; _this$ = ecx

; 141  : 	virtual int IsShip (void) 			        { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsShip@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsShip
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsGroundVehicle@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGroundVehicle@FalconEntity@@UAEHXZ PROC		; FalconEntity::IsGroundVehicle, COMDAT
; _this$ = ecx

; 140  : 	virtual int IsGroundVehicle (void) 			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGroundVehicle@FalconEntity@@UAEHXZ ENDP		; FalconEntity::IsGroundVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsAirplane@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAirplane@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsAirplane, COMDAT
; _this$ = ecx

; 139  : 	virtual int IsAirplane (void)	   			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAirplane@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsAirplane
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsEject@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEject@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsEject, COMDAT
; _this$ = ecx

; 138  : 	virtual int IsEject (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEject@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsEject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsHelicopter@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsHelicopter@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsHelicopter, COMDAT
; _this$ = ecx

; 137  : 	virtual int IsHelicopter (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsHelicopter@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsHelicopter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsStatic@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsStatic@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsStatic, COMDAT
; _this$ = ecx

; 136  : 	virtual int IsStatic (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsStatic@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsStatic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsVehicle@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsVehicle@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsVehicle, COMDAT
; _this$ = ecx

; 135  : 	virtual int IsVehicle (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsVehicle@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsMover@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMover@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsMover, COMDAT
; _this$ = ecx

; 134  : 	virtual int IsMover (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMover@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsMover
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsGun@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGun@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsGun, COMDAT
; _this$ = ecx

; 133  : 	virtual int IsGun (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGun@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsGun
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBomb@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBomb@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBomb, COMDAT
; _this$ = ecx

; 132  : 	virtual int IsBomb (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBomb@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBomb
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsLauncher@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsLauncher@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsLauncher, COMDAT
; _this$ = ecx

; 131  : 	virtual int IsLauncher (void)               { return FALSE; } // MLR 3/4/2004 - rocket pods

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsLauncher@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsLauncher
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsMissile@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMissile@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsMissile, COMDAT
; _this$ = ecx

; 130  : 	virtual int IsMissile (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMissile@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsMissile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?CombatClass@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CombatClass@FalconEntity@@UAEHXZ PROC			; FalconEntity::CombatClass, COMDAT
; _this$ = ecx

; 127  : 	virtual int CombatClass (void)				{ return 999; } // 2002-02-25 ADDED BY S.G. No combat class for non flight or non aircraft class

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 999				; 000003e7H
	mov	esp, ebp
	pop	ebp
	ret	0
?CombatClass@FalconEntity@@UAEHXZ ENDP			; FalconEntity::CombatClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSimBase@FalconEntity@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSimBase@FalconEntity@@UAE_NXZ PROC			; FalconEntity::IsSimBase, COMDAT
; _this$ = ecx

; 98   : 	virtual bool IsSimBase() { return false; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	al, al
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSimBase@FalconEntity@@UAE_NXZ ENDP			; FalconEntity::IsSimBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ PROC	; VuBin<VuEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuEntity@@@@QBEPAVVuEntity@@XZ ENDP	; VuBin<VuEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gout_of_range@std@@UAEPAXI@Z PROC			; std::out_of_range::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gout_of_range@std@@UAEPAXI@Z ENDP			; std::out_of_range::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV01@@Z PROC			; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7out_of_range@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV01@@Z ENDP			; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1out_of_range@std@@UAE@XZ PROC			; std::out_of_range::~out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1out_of_range@std@@UAE@XZ ENDP			; std::out_of_range::~out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR __Message$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@PBD@Z		; std::logic_error::logic_error
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7out_of_range@std@@6B@

; 146  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1717 : 		{	// return pointer to null-terminated nonmutable array

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1718 : 		return (this->_Myptr());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 1719 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 963  : 		{	// destroy the string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 964  : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 965  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	mov	esp, ebp
	pop	ebp
	ret	0
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0logic_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@PBD@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 38   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@

; 39   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@PBD@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_ID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VU_ID@@QAE@XZ PROC					; VU_ID::VU_ID, COMDAT
; _this$ = ecx

; 100  : 	VU_ID() : num_(0), creator_(0){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0VU_SESSION_ID@@QAE@K@Z		; VU_SESSION_ID::VU_SESSION_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0VU_ID@@QAE@XZ ENDP					; VU_ID::VU_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_SESSION_ID@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??0VU_SESSION_ID@@QAE@K@Z PROC				; VU_SESSION_ID::VU_SESSION_ID, COMDAT
; _this$ = ecx

; 53   : 	VU_SESSION_ID(unsigned long value) : value_((unsigned long)value) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0VU_SESSION_ID@@QAE@K@Z ENDP				; VU_SESSION_ID::VU_SESSION_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
END
