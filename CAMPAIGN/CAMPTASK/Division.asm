; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\CAMPAIGN\CAMPTASK\Division.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?DivisionData@@3PAPAVDivisionClass@@A		; DivisionData
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
_BSS	SEGMENT
?DivisionData@@3PAPAVDivisionClass@@A DD 08H DUP (?)	; DivisionData
_BSS	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0VU_SESSION_ID@@QAE@K@Z			; VU_SESSION_ID::VU_SESSION_ID
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??BVU_SESSION_ID@@QBEKXZ			; VU_SESSION_ID::operator unsigned long
PUBLIC	??0VU_ID@@QAE@XZ				; VU_ID::VU_ID
PUBLIC	??8VU_ID@@QBE_NABV0@@Z				; VU_ID::operator==
PUBLIC	??BVU_ID@@QBEKXZ				; VU_ID::operator unsigned long
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	?GetOwner@CampBaseClass@@QAEEXZ			; CampBaseClass::GetOwner
PUBLIC	?GetDomain@CampBaseClass@@QBEEXZ		; CampBaseClass::GetDomain
PUBLIC	?GetSType@CampBaseClass@@QBEEXZ			; CampBaseClass::GetSType
PUBLIC	?CampEnterCriticalSection@@YAXXZ		; CampEnterCriticalSection
PUBLIC	?CampLeaveCriticalSection@@YAXXZ		; CampLeaveCriticalSection
PUBLIC	??0DivisionClass@@QAE@XZ			; DivisionClass::DivisionClass
PUBLIC	??1DivisionClass@@QAE@XZ			; DivisionClass::~DivisionClass
PUBLIC	?GetName@DivisionClass@@QAEPADPADHH@Z		; DivisionClass::GetName
PUBLIC	?GetFirstUnitElement@DivisionClass@@QAEPAVUnitClass@@XZ ; DivisionClass::GetFirstUnitElement
PUBLIC	?GetNextUnitElement@DivisionClass@@QAEPAVUnitClass@@XZ ; DivisionClass::GetNextUnitElement
PUBLIC	?GetUnitElement@DivisionClass@@QAEPAVUnitClass@@H@Z ; DivisionClass::GetUnitElement
PUBLIC	?GetUnitElementByID@DivisionClass@@QAEPAVUnitClass@@H@Z ; DivisionClass::GetUnitElementByID
PUBLIC	?GetPrevUnitElement@DivisionClass@@QAEPAVUnitClass@@PAV2@@Z ; DivisionClass::GetPrevUnitElement
PUBLIC	?UpdateDivisionStats@DivisionClass@@QAEXXZ	; DivisionClass::UpdateDivisionStats
PUBLIC	?RemoveChildren@DivisionClass@@QAEXXZ		; DivisionClass::RemoveChildren
PUBLIC	?RemoveChild@DivisionClass@@QAEXVVU_ID@@@Z	; DivisionClass::RemoveChild
PUBLIC	??_GDivisionClass@@QAEPAXI@Z			; DivisionClass::`scalar deleting destructor'
PUBLIC	?DumpDivisionData@@YAXXZ			; DumpDivisionData
PUBLIC	?BuildDivisionData@@YAXXZ			; BuildDivisionData
PUBLIC	?GetFirstDivision@@YAPAVDivisionClass@@H@Z	; GetFirstDivision
PUBLIC	?GetNextDivision@@YAPAVDivisionClass@@PAV1@@Z	; GetNextDivision
PUBLIC	?GetFirstDivisionByCountry@@YAPAVDivisionClass@@H@Z ; GetFirstDivisionByCountry
PUBLIC	?GetNextDivisionByCountry@@YAPAVDivisionClass@@PAV1@H@Z ; GetNextDivisionByCountry
PUBLIC	?GetDivisionByUnit@@YAPAVDivisionClass@@PAVUnitClass@@@Z ; GetDivisionByUnit
PUBLIC	?FindDivisionByXY@@YAPAVDivisionClass@@FF@Z	; FindDivisionByXY
PUBLIC	?DumpDivisionData@@YAXH@Z			; DumpDivisionData
PUBLIC	?DivisionSanityCheck@@YAHXZ			; DivisionSanityCheck
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?F4IsBadReadPtr@@YA_NPBXI@Z:PROC		; F4IsBadReadPtr
EXTRN	?F4IsBadWritePtr@@YA_NPAXI@Z:PROC		; F4IsBadWritePtr
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetFirst
EXTRN	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetNext
EXTRN	?GetLocation@FalconEntity@@QBEXPAF0@Z:PROC	; FalconEntity::GetLocation
EXTRN	?GetTeam@@YAEE@Z:PROC				; GetTeam
EXTRN	_F4EnterCriticalSection:PROC
EXTRN	_F4LeaveCriticalSection:PROC
EXTRN	?FindUnit@@YAPAVUnitClass@@VVU_ID@@@Z:PROC	; FindUnit
EXTRN	?GetDivisionName@@YAPADHHPADHH@Z:PROC		; GetDivisionName
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	?campCritical@@3PAUF4CSECTIONHANDLE@@A:DWORD	; campCritical
EXTRN	?AllParentList@@3PAVVuLinkedList@@A:DWORD	; AllParentList
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
xdata$x	SEGMENT
__unwindtable$?BuildDivisionData@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildDivisionData@@YAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?BuildDivisionData@@YAXXZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?BuildDivisionData@@YAXXZ$2
__ehfuncinfo$?BuildDivisionData@@YAXXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?BuildDivisionData@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\division.cpp
_TEXT	SEGMENT
_tmp$ = -8						; size = 4
_i$ = -4						; size = 4
?DivisionSanityCheck@@YAHXZ PROC			; DivisionSanityCheck

; 448  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 449  : 	Division	tmp;
; 450  : 	int			i;
; 451  : 
; 452  : 	for (i=0; i<NUM_TEAMS; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@DivisionSa
$LN4@DivisionSa:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@DivisionSa:
	cmp	DWORD PTR _i$[ebp], 8
	jge	SHORT $LN3@DivisionSa

; 453  : 		{
; 454  : 		tmp = DivisionData[i];

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR ?DivisionData@@3PAPAVDivisionClass@@A[ecx*4]
	mov	DWORD PTR _tmp$[ebp], edx
$LN2@DivisionSa:

; 455  : 		while (tmp)

	cmp	DWORD PTR _tmp$[ebp], 0
	je	SHORT $LN1@DivisionSa

; 456  : 			{
; 457  : 			ShiAssert ((int)tmp != 0xdddddddd);
; 458  : 			tmp = tmp->next;

	mov	eax, DWORD PTR _tmp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _tmp$[ebp], ecx

; 459  : 			}

	jmp	SHORT $LN2@DivisionSa
$LN1@DivisionSa:

; 460  : 		}

	jmp	SHORT $LN4@DivisionSa
$LN3@DivisionSa:

; 461  : 	return 0;

	xor	eax, eax

; 462  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?DivisionSanityCheck@@YAHXZ ENDP			; DivisionSanityCheck
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\division.cpp
_TEXT	SEGMENT
tv76 = -16						; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_deadd$ = -4						; size = 4
_team$ = 8						; size = 4
?DumpDivisionData@@YAXH@Z PROC				; DumpDivisionData

; 178  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
$LN2@DumpDivisi:

; 179  : 	DivisionClass	*deadd;
; 180  : 
; 181  : 	while (DivisionData[team])

	mov	eax, DWORD PTR _team$[ebp]
	cmp	DWORD PTR ?DivisionData@@3PAPAVDivisionClass@@A[eax*4], 0
	je	SHORT $LN1@DumpDivisi

; 182  : 		{
; 183  : 		deadd = DivisionData[team];

	mov	ecx, DWORD PTR _team$[ebp]
	mov	edx, DWORD PTR ?DivisionData@@3PAPAVDivisionClass@@A[ecx*4]
	mov	DWORD PTR _deadd$[ebp], edx

; 184  : 		DivisionData[team] = deadd->next;

	mov	eax, DWORD PTR _team$[ebp]
	mov	ecx, DWORD PTR _deadd$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR ?DivisionData@@3PAPAVDivisionClass@@A[eax*4], edx

; 185  : 		delete deadd;

	mov	eax, DWORD PTR _deadd$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN5@DumpDivisi
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_GDivisionClass@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@DumpDivisi
$LN5@DumpDivisi:
	mov	DWORD PTR tv76[ebp], 0
$LN6@DumpDivisi:

; 186  : #ifdef DEBUG
; 187  : 		DivisionSanityCheck();
; 188  : #endif
; 189  : 		}

	jmp	SHORT $LN2@DumpDivisi
$LN1@DumpDivisi:

; 190  : 	DivisionData[team] = NULL;

	mov	edx, DWORD PTR _team$[ebp]
	mov	DWORD PTR ?DivisionData@@3PAPAVDivisionClass@@A[edx*4], 0

; 191  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?DumpDivisionData@@YAXH@Z ENDP				; DumpDivisionData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\division.cpp
_TEXT	SEGMENT
_t$ = -8						; size = 4
_d$ = -4						; size = 4
_x$ = 8							; size = 2
_y$ = 12						; size = 2
?FindDivisionByXY@@YAPAVDivisionClass@@FF@Z PROC	; FindDivisionByXY

; 430  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 431  : 	int			t;
; 432  : 	Division	d=NULL;

	mov	DWORD PTR _d$[ebp], 0

; 433  : 
; 434  : 	for (t=0; t<NUM_TEAMS; t++)

	mov	DWORD PTR _t$[ebp], 0
	jmp	SHORT $LN6@FindDivisi
$LN5@FindDivisi:
	mov	eax, DWORD PTR _t$[ebp]
	add	eax, 1
	mov	DWORD PTR _t$[ebp], eax
$LN6@FindDivisi:
	cmp	DWORD PTR _t$[ebp], 8
	jge	SHORT $LN4@FindDivisi

; 435  : 		{
; 436  : 		d = GetFirstDivision(t);

	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	call	?GetFirstDivision@@YAPAVDivisionClass@@H@Z ; GetFirstDivision
	add	esp, 4
	mov	DWORD PTR _d$[ebp], eax
$LN3@FindDivisi:

; 437  : 		while (d)

	cmp	DWORD PTR _d$[ebp], 0
	je	SHORT $LN2@FindDivisi

; 438  : 			{
; 439  : 			if (d->x == x && d->y == y)

	mov	edx, DWORD PTR _d$[ebp]
	movsx	eax, WORD PTR [edx]
	movsx	ecx, WORD PTR _x$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN1@FindDivisi
	mov	edx, DWORD PTR _d$[ebp]
	movsx	eax, WORD PTR [edx+2]
	movsx	ecx, WORD PTR _y$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN1@FindDivisi

; 440  : 				return d;

	mov	eax, DWORD PTR _d$[ebp]
	jmp	SHORT $LN7@FindDivisi
$LN1@FindDivisi:

; 441  : 			d = d->next;

	mov	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _d$[ebp], eax

; 442  : 			}

	jmp	SHORT $LN3@FindDivisi
$LN2@FindDivisi:

; 443  : 		}

	jmp	SHORT $LN5@FindDivisi
$LN4@FindDivisi:

; 444  : 	return NULL;

	xor	eax, eax
$LN7@FindDivisi:

; 445  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?FindDivisionByXY@@YAPAVDivisionClass@@FF@Z ENDP	; FindDivisionByXY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\division.cpp
_TEXT	SEGMENT
_d$ = -4						; size = 4
_u$ = 8							; size = 4
?GetDivisionByUnit@@YAPAVDivisionClass@@PAVUnitClass@@@Z PROC ; GetDivisionByUnit

; 416  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi

; 417  : 	Division d;
; 418  : 
; 419  : 	d = GetFirstDivision(u->GetTeam());

	mov	eax, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	push	ecx
	call	?GetFirstDivision@@YAPAVDivisionClass@@H@Z ; GetFirstDivision
	add	esp, 4
	mov	DWORD PTR _d$[ebp], eax
$LN3@GetDivisio:

; 420  : 	while (d)

	cmp	DWORD PTR _d$[ebp], 0
	je	SHORT $LN2@GetDivisio

; 421  : 		{
; 422  : 		if (d->nid == u->GetUnitDivision() && d->owner == u->GetOwner())

	mov	edx, DWORD PTR _d$[ebp]
	movsx	esi, WORD PTR [edx+4]
	mov	eax, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+904]
	call	eax
	cmp	esi, eax
	jne	SHORT $LN1@GetDivisio
	mov	ecx, DWORD PTR _d$[ebp]
	movsx	esi, WORD PTR [ecx+6]
	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	movzx	edx, al
	cmp	esi, edx
	jne	SHORT $LN1@GetDivisio

; 423  : 			return d;

	mov	eax, DWORD PTR _d$[ebp]
	jmp	SHORT $LN4@GetDivisio
$LN1@GetDivisio:

; 424  : 		d = d->next;

	mov	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _d$[ebp], ecx

; 425  : 		}

	jmp	SHORT $LN3@GetDivisio
$LN2@GetDivisio:

; 426  : 	return NULL;

	xor	eax, eax
$LN4@GetDivisio:

; 427  : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDivisionByUnit@@YAPAVDivisionClass@@PAVUnitClass@@@Z ENDP ; GetDivisionByUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\division.cpp
_TEXT	SEGMENT
_d$ = 8							; size = 4
_country$ = 12						; size = 4
?GetNextDivisionByCountry@@YAPAVDivisionClass@@PAV1@H@Z PROC ; GetNextDivisionByCountry

; 404  : 	{

	push	ebp
	mov	ebp, esp

; 405  : 	d = d->next;

	mov	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _d$[ebp], ecx
$LN3@GetNextDiv:

; 406  : 	while (d)

	cmp	DWORD PTR _d$[ebp], 0
	je	SHORT $LN2@GetNextDiv

; 407  : 		{
; 408  : 		if (d->owner == country)

	mov	edx, DWORD PTR _d$[ebp]
	movsx	eax, WORD PTR [edx+6]
	cmp	eax, DWORD PTR _country$[ebp]
	jne	SHORT $LN1@GetNextDiv

; 409  : 			return d;

	mov	eax, DWORD PTR _d$[ebp]
	jmp	SHORT $LN4@GetNextDiv
$LN1@GetNextDiv:

; 410  : 		d = d->next;

	mov	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _d$[ebp], edx

; 411  : 		}

	jmp	SHORT $LN3@GetNextDiv
$LN2@GetNextDiv:

; 412  : 	return NULL;

	xor	eax, eax
$LN4@GetNextDiv:

; 413  : 	}

	pop	ebp
	ret	0
?GetNextDivisionByCountry@@YAPAVDivisionClass@@PAV1@H@Z ENDP ; GetNextDivisionByCountry
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\division.cpp
_TEXT	SEGMENT
_d$ = -4						; size = 4
_country$ = 8						; size = 4
?GetFirstDivisionByCountry@@YAPAVDivisionClass@@H@Z PROC ; GetFirstDivisionByCountry

; 391  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 392  : 	Division	d = DivisionData[GetTeam(country)];

	movzx	eax, BYTE PTR _country$[ebp]
	push	eax
	call	?GetTeam@@YAEE@Z			; GetTeam
	add	esp, 4
	movzx	ecx, al
	mov	edx, DWORD PTR ?DivisionData@@3PAPAVDivisionClass@@A[ecx*4]
	mov	DWORD PTR _d$[ebp], edx
$LN3@GetFirstDi:

; 393  : 
; 394  : 	while (d)

	cmp	DWORD PTR _d$[ebp], 0
	je	SHORT $LN2@GetFirstDi

; 395  : 		{
; 396  : 		if (d->owner == country)

	mov	eax, DWORD PTR _d$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	cmp	ecx, DWORD PTR _country$[ebp]
	jne	SHORT $LN1@GetFirstDi

; 397  : 			return d;

	mov	eax, DWORD PTR _d$[ebp]
	jmp	SHORT $LN4@GetFirstDi
$LN1@GetFirstDi:

; 398  : 		d = d->next;

	mov	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _d$[ebp], eax

; 399  : 		}

	jmp	SHORT $LN3@GetFirstDi
$LN2@GetFirstDi:

; 400  : 	return NULL;

	xor	eax, eax
$LN4@GetFirstDi:

; 401  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstDivisionByCountry@@YAPAVDivisionClass@@H@Z ENDP ; GetFirstDivisionByCountry
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\division.cpp
_TEXT	SEGMENT
_d$ = 8							; size = 4
?GetNextDivision@@YAPAVDivisionClass@@PAV1@@Z PROC	; GetNextDivision

; 386  : 	{

	push	ebp
	mov	ebp, esp

; 387  : 	return d->next;

	mov	eax, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 388  : 	}

	pop	ebp
	ret	0
?GetNextDivision@@YAPAVDivisionClass@@PAV1@@Z ENDP	; GetNextDivision
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\division.cpp
_TEXT	SEGMENT
_team$ = 8						; size = 4
?GetFirstDivision@@YAPAVDivisionClass@@H@Z PROC		; GetFirstDivision

; 381  : 	{

	push	ebp
	mov	ebp, esp

; 382  : 	return DivisionData[team];

	mov	eax, DWORD PTR _team$[ebp]
	mov	eax, DWORD PTR ?DivisionData@@3PAPAVDivisionClass@@A[eax*4]

; 383  : 	}

	pop	ebp
	ret	0
?GetFirstDivision@@YAPAVDivisionClass@@H@Z ENDP		; GetFirstDivision
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\division.cpp
_TEXT	SEGMENT
$T2 = -2156						; size = 8
_dd$ = -2148						; size = 32
$T3 = -2116						; size = 4
_myit$4 = -2112						; size = 12
$T5 = -2100						; size = 4
$T6 = -2096						; size = 4
$T7 = -2092						; size = 4
tv244 = -2088						; size = 4
tv211 = -2084						; size = 4
$T8 = -2080						; size = 4
_d$ = -2076						; size = 4
_t$ = -2072						; size = 4
_u$ = -2068						; size = 4
_tempdivision$ = -2062					; size = 1
_tempteam$ = -2061					; size = 1
_dc$ = -2060						; size = 4
_divels$ = -2056					; size = 2040
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?BuildDivisionData@@YAXXZ PROC				; BuildDivisionData

; 200  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?BuildDivisionData@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2144				; 00000860H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 201  : 	Division		dc;
; 202  : 	Division		dd[NUM_TEAMS] = { NULL };

	mov	DWORD PTR _dd$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _dd$[ebp+4], eax
	mov	DWORD PTR _dd$[ebp+8], eax
	mov	DWORD PTR _dd$[ebp+12], eax
	mov	DWORD PTR _dd$[ebp+16], eax
	mov	DWORD PTR _dd$[ebp+20], eax
	mov	DWORD PTR _dd$[ebp+24], eax
	mov	DWORD PTR _dd$[ebp+28], eax

; 203  : 	Unit			u;
; 204  : 	int				d,t;
; 205  : 	uchar			divels[NUM_TEAMS][MAX_DIVISION] = { 0 };

	mov	BYTE PTR _divels$[ebp], 0
	push	2039					; 000007f7H
	push	0
	lea	ecx, DWORD PTR _divels$[ebp+1]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 206  : 	uchar tempteam; // JB 010220 CTD
; 207  : 	uchar tempdivision; // JB 010220 CTD
; 208  : 
; 209  : 	#ifdef USE_SH_POOLS
; 210  : 	if ( gDivVUIDs == NULL )
; 211  : 		gDivVUIDs = MemPoolInit( 0 );
; 212  : 	#endif
; 213  : 
; 214  : 	CampEnterCriticalSection();

	call	?CampEnterCriticalSection@@YAXXZ	; CampEnterCriticalSection

; 215  : 	DumpDivisionData();

	call	?DumpDivisionData@@YAXXZ		; DumpDivisionData

; 216  : 
; 217  : 	// Count # of elements in each division
; 218  : 	{
; 219  : 		VuListIterator	myit(AllParentList);

	mov	edx, DWORD PTR ?AllParentList@@3PAVVuLinkedList@@A ; AllParentList
	push	edx
	lea	ecx, DWORD PTR _myit$4[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 220  : 		u = (Unit) myit.GetFirst();

	lea	ecx, DWORD PTR _myit$4[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _u$[ebp], eax
$LN20@BuildDivis:

; 221  : 		while (u){

	cmp	DWORD PTR _u$[ebp], 0
	je	$LN19@BuildDivis

; 222  : 			//if (u->VuState() != VU_MEM_DELETED)
; 223  : 			//{
; 224  : 			if (u->GetDomain() == DOMAIN_LAND)

	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	eax, al
	cmp	eax, 3
	jne	$LN18@BuildDivis

; 225  : 			{
; 226  : 				tempteam = u->GetTeam(); // JB 010220 CTD

	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	mov	BYTE PTR _tempteam$[ebp], al

; 227  : 				tempdivision = u->GetUnitDivision(); // JB 010220 CTD

	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+904]
	call	eax
	mov	BYTE PTR _tempdivision$[ebp], al

; 228  : 				if (tempteam >= 0 && tempteam < NUM_TEAMS && tempdivision >= 0 && tempdivision < MAX_DIVISION) // JB 010220 CTD

	movzx	ecx, BYTE PTR _tempteam$[ebp]
	test	ecx, ecx
	jl	SHORT $LN18@BuildDivis
	movzx	edx, BYTE PTR _tempteam$[ebp]
	cmp	edx, 8
	jge	SHORT $LN18@BuildDivis
	movzx	eax, BYTE PTR _tempdivision$[ebp]
	test	eax, eax
	jl	SHORT $LN18@BuildDivis
	movzx	ecx, BYTE PTR _tempdivision$[ebp]
	cmp	ecx, 255				; 000000ffH
	jge	SHORT $LN18@BuildDivis

; 229  : 					divels[tempteam][tempdivision]++; // JB 010220 CTD

	movzx	edx, BYTE PTR _tempdivision$[ebp]
	movzx	eax, BYTE PTR _tempteam$[ebp]
	imul	eax, 255				; 000000ffH
	lea	ecx, DWORD PTR _divels$[ebp+eax]
	mov	dl, BYTE PTR [ecx+edx]
	add	dl, 1
	movzx	eax, BYTE PTR _tempdivision$[ebp]
	movzx	ecx, BYTE PTR _tempteam$[ebp]
	imul	ecx, 255				; 000000ffH
	lea	ecx, DWORD PTR _divels$[ebp+ecx]
	mov	BYTE PTR [ecx+eax], dl
$LN18@BuildDivis:

; 230  : 					//divels[u->GetTeam()][u->GetUnitDivision()]++; // JB 010220 CTD
; 231  : 			}
; 232  : 			//}
; 233  : 			u = (Unit) myit.GetNext();

	lea	ecx, DWORD PTR _myit$4[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _u$[ebp], eax

; 234  : 		}

	jmp	$LN20@BuildDivis
$LN19@BuildDivis:

; 235  : 		// Create/add to the divisions
; 236  : 		u = (Unit) myit.GetFirst();

	lea	ecx, DWORD PTR _myit$4[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _u$[ebp], eax
$LN16@BuildDivis:

; 237  : 		while (u)

	cmp	DWORD PTR _u$[ebp], 0
	je	$LN15@BuildDivis

; 238  : 		{
; 239  : 			if (u->GetDomain() == DOMAIN_LAND)

	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	edx, al
	cmp	edx, 3
	jne	$LN14@BuildDivis

; 240  : 			{
; 241  : 				d = u->GetUnitDivision();

	mov	eax, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+904]
	call	eax
	mov	DWORD PTR _d$[ebp], eax

; 242  : 				if (d > 0)

	cmp	DWORD PTR _d$[ebp], 0
	jle	$LN14@BuildDivis

; 243  : 				{
; 244  : 					t = u->GetTeam();

	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	mov	DWORD PTR _t$[ebp], ecx

; 245  : 					dc = dd[t];

	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR _dd$[ebp+edx*4]
	mov	DWORD PTR _dc$[ebp], eax
$LN12@BuildDivis:

; 246  : 					while (dc)

	cmp	DWORD PTR _dc$[ebp], 0
	je	SHORT $LN11@BuildDivis

; 247  : 						{
; 248  : 						// Try to find existing one
; 249  : 						if (dc->nid == d)

	mov	ecx, DWORD PTR _dc$[ebp]
	movsx	edx, WORD PTR [ecx+4]
	cmp	edx, DWORD PTR _d$[ebp]
	jne	SHORT $LN10@BuildDivis

; 250  : 							break;

	jmp	SHORT $LN11@BuildDivis
$LN10@BuildDivis:

; 251  : 						dc = dc->next;

	mov	eax, DWORD PTR _dc$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _dc$[ebp], ecx

; 252  : 					}

	jmp	SHORT $LN12@BuildDivis
$LN11@BuildDivis:

; 253  : 
; 254  : 					if (!dc)

	cmp	DWORD PTR _dc$[ebp], 0
	jne	$LN9@BuildDivis

; 255  : 					{
; 256  : 						// Create a new one
; 257  : 						dc = new DivisionClass();

	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN23@BuildDivis
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0DivisionClass@@QAE@XZ		; DivisionClass::DivisionClass
	mov	DWORD PTR tv211[ebp], eax
	jmp	SHORT $LN24@BuildDivis
$LN23@BuildDivis:
	mov	DWORD PTR tv211[ebp], 0
$LN24@BuildDivis:
	mov	edx, DWORD PTR tv211[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _dc$[ebp], eax

; 258  : 						dc->nid = d;

	mov	ecx, DWORD PTR _dc$[ebp]
	mov	dx, WORD PTR _d$[ebp]
	mov	WORD PTR [ecx+4], dx

; 259  : 						dc->owner = u->GetOwner();

	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	movzx	ax, al
	mov	ecx, DWORD PTR _dc$[ebp]
	mov	WORD PTR [ecx+6], ax

; 260  : 						ShiAssert(divels[t][d]);
; 261  : 						#ifdef USE_SH_POOLS
; 262  : 						dc->element = (VU_ID *)MemAllocPtr( gDivVUIDs, sizeof( VU_ID ) * divels[t][d], FALSE);
; 263  : 						#else
; 264  : 						if (t >= 0 && t < NUM_TEAMS && d >= 0 && d < MAX_DIVISION) // JB 010223 CTD

	cmp	DWORD PTR _t$[ebp], 0
	jl	$LN8@BuildDivis
	cmp	DWORD PTR _t$[ebp], 8
	jge	$LN8@BuildDivis
	cmp	DWORD PTR _d$[ebp], 0
	jl	$LN8@BuildDivis
	cmp	DWORD PTR _d$[ebp], 255			; 000000ffH
	jge	$LN8@BuildDivis

; 265  : 							dc->element = new VU_ID[divels[t][d]];

	mov	edx, DWORD PTR _t$[ebp]
	imul	edx, 255				; 000000ffH
	lea	eax, DWORD PTR _divels$[ebp+edx]
	mov	ecx, DWORD PTR _d$[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	mov	DWORD PTR $T6[ebp], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T6[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN25@BuildDivis
	push	OFFSET ??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR $T8[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T8[ebp]
	mov	DWORD PTR tv244[ebp], edx
	jmp	SHORT $LN26@BuildDivis
$LN25@BuildDivis:
	mov	DWORD PTR tv244[ebp], 0
$LN26@BuildDivis:
	mov	eax, DWORD PTR tv244[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _dc$[ebp]
	mov	edx, DWORD PTR $T5[ebp]
	mov	DWORD PTR [ecx+12], edx
$LN8@BuildDivis:

; 266  : 						#endif
; 267  : 						dc->next = dd[t];

	mov	eax, DWORD PTR _dc$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _dd$[ebp+ecx*4]
	mov	DWORD PTR [eax+16], edx

; 268  : 						dd[t] = dc;

	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _dc$[ebp]
	mov	DWORD PTR _dd$[ebp+eax*4], ecx
$LN9@BuildDivis:

; 269  : 					}
; 270  : 
; 271  : 					if (!F4IsBadWritePtr(dc, sizeof(DivisionClass)) && dc->elements >= 0 && !F4IsBadWritePtr(&(dc->element[dc->elements]), sizeof(VU_ID))) // JB 010223 CTD

	push	20					; 00000014H
	mov	edx, DWORD PTR _dc$[ebp]
	push	edx
	call	?F4IsBadWritePtr@@YA_NPAXI@Z		; F4IsBadWritePtr
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN14@BuildDivis
	mov	ecx, DWORD PTR _dc$[ebp]
	movzx	edx, BYTE PTR [ecx+9]
	test	edx, edx
	jl	SHORT $LN14@BuildDivis
	push	8
	mov	eax, DWORD PTR _dc$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	mov	edx, DWORD PTR _dc$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*8]
	push	ecx
	call	?F4IsBadWritePtr@@YA_NPAXI@Z		; F4IsBadWritePtr
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN14@BuildDivis

; 272  : 					{
; 273  : 						dc->element[dc->elements] = u->Id();

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _dc$[ebp]
	movzx	eax, BYTE PTR [eax+9]
	mov	esi, DWORD PTR _dc$[ebp]
	mov	esi, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+eax*8], ecx
	mov	DWORD PTR [esi+eax*8+4], edx

; 274  : 						dc->elements++;

	mov	ecx, DWORD PTR _dc$[ebp]
	mov	dl, BYTE PTR [ecx+9]
	add	dl, 1
	mov	eax, DWORD PTR _dc$[ebp]
	mov	BYTE PTR [eax+9], dl
$LN14@BuildDivis:

; 275  : 					}
; 276  : 				}
; 277  : 			}
; 278  : 			u = (Unit) myit.GetNext();

	lea	ecx, DWORD PTR _myit$4[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _u$[ebp], eax

; 279  : 		}

	jmp	$LN16@BuildDivis
$LN15@BuildDivis:

; 280  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _myit$4[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator

; 281  : 
; 282  : 	// Set the division type and location
; 283  : 	for (t=0; t<NUM_TEAMS; t++)

	mov	DWORD PTR _t$[ebp], 0
	jmp	SHORT $LN6@BuildDivis
$LN5@BuildDivis:
	mov	ecx, DWORD PTR _t$[ebp]
	add	ecx, 1
	mov	DWORD PTR _t$[ebp], ecx
$LN6@BuildDivis:
	cmp	DWORD PTR _t$[ebp], 8
	jge	SHORT $LN4@BuildDivis

; 284  : 	{
; 285  : 		dc = dd[t];

	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR _dd$[ebp+edx*4]
	mov	DWORD PTR _dc$[ebp], eax
$LN3@BuildDivis:

; 286  : 		while (dc)

	cmp	DWORD PTR _dc$[ebp], 0
	je	SHORT $LN2@BuildDivis

; 287  : 		{
; 288  : 			if (F4IsBadReadPtr(dc, sizeof(Division))) // JB 010223 CTD

	push	4
	mov	ecx, DWORD PTR _dc$[ebp]
	push	ecx
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@BuildDivis

; 289  : 				break;

	jmp	SHORT $LN2@BuildDivis
$LN1@BuildDivis:

; 290  : 
; 291  : 			ShiAssert (dc->elements == divels[t][dc->nid]);
; 292  : 			dc->UpdateDivisionStats();

	mov	ecx, DWORD PTR _dc$[ebp]
	call	?UpdateDivisionStats@DivisionClass@@QAEXXZ ; DivisionClass::UpdateDivisionStats

; 293  : 			dc = dc->next;

	mov	eax, DWORD PTR _dc$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _dc$[ebp], ecx

; 294  : 		}

	jmp	SHORT $LN3@BuildDivis
$LN2@BuildDivis:

; 295  : 		// Assign to lists only after we've finalized it.
; 296  : 		// UI doesn't critical section with us.
; 297  : 		DivisionData[t] = dd[t];

	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _dd$[ebp+eax*4]
	mov	DWORD PTR ?DivisionData@@3PAPAVDivisionClass@@A[edx*4], ecx

; 298  : 	}

	jmp	$LN5@BuildDivis
$LN4@BuildDivis:

; 299  : 	CampLeaveCriticalSection();

	call	?CampLeaveCriticalSection@@YAXXZ	; CampLeaveCriticalSection

; 300  : 
; 301  : #ifdef DEBUG
; 302  : 	DivisionSanityCheck();
; 303  : #endif
; 304  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?BuildDivisionData@@YAXXZ$0:
	lea	ecx, DWORD PTR _myit$4[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?BuildDivisionData@@YAXXZ$1:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?BuildDivisionData@@YAXXZ$2:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?BuildDivisionData@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2152]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?BuildDivisionData@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?BuildDivisionData@@YAXXZ ENDP				; BuildDivisionData
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\division.cpp
_TEXT	SEGMENT
_i$1 = -4						; size = 4
?DumpDivisionData@@YAXXZ PROC				; DumpDivisionData

; 194  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 195  : 	for (int i=0; i<NUM_TEAMS; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@DumpDivisi
$LN2@DumpDivisi:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@DumpDivisi:
	cmp	DWORD PTR _i$1[ebp], 8
	jge	SHORT $LN4@DumpDivisi

; 196  : 		DumpDivisionData(i);

	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	call	?DumpDivisionData@@YAXH@Z		; DumpDivisionData
	add	esp, 4
	jmp	SHORT $LN2@DumpDivisi
$LN4@DumpDivisi:

; 197  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?DumpDivisionData@@YAXXZ ENDP				; DumpDivisionData
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GDivisionClass@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDivisionClass@@QAEPAXI@Z PROC			; DivisionClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DivisionClass@@QAE@XZ		; DivisionClass::~DivisionClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDivisionClass@@QAEPAXI@Z ENDP			; DivisionClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\division.cpp
_TEXT	SEGMENT
_e$ = -16						; size = 4
_i$ = -12						; size = 4
_j$ = -8						; size = 4
_this$ = -4						; size = 4
_eid$ = 8						; size = 8
?RemoveChild@DivisionClass@@QAEXVVU_ID@@@Z PROC		; DivisionClass::RemoveChild
; _this$ = ecx

; 151  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 152  : 	int		i=0,j;

	mov	DWORD PTR _i$[ebp], 0
$LN7@RemoveChil:

; 153  : 	Unit	e;
; 154  : 
; 155  : 	while (i < elements)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	$LN8@RemoveChil

; 156  : 		{
; 157  : 		if (element[i] == eid)

	lea	edx, DWORD PTR _eid$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR [ecx+edx*8]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	$LN5@RemoveChil

; 158  : 			{
; 159  : 			for (j=i; j < elements-1; j++)

	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _j$[ebp], ecx
	jmp	SHORT $LN4@RemoveChil
$LN3@RemoveChil:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN4@RemoveChil:
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	sub	ecx, 1
	cmp	DWORD PTR _j$[ebp], ecx
	jge	SHORT $LN2@RemoveChil

; 160  : 				{
; 161  : 				element[j] = element[j+1];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*8+8]
	mov	eax, DWORD PTR [eax+ecx*8+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	mov	esi, DWORD PTR _j$[ebp]
	mov	DWORD PTR [ecx+esi*8], edx
	mov	DWORD PTR [ecx+esi*8+4], eax

; 162  : 				e = FindUnit(element[j]);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*8+4]
	push	edx
	mov	eax, DWORD PTR [eax+ecx*8]
	push	eax
	call	?FindUnit@@YAPAVUnitClass@@VVU_ID@@@Z	; FindUnit
	add	esp, 8
	mov	DWORD PTR _e$[ebp], eax

; 163  : 				}

	jmp	SHORT $LN3@RemoveChil
$LN2@RemoveChil:

; 164  : 			element[j] = FalconNullId;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [edx+eax*8], ecx
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [edx+eax*8+4], ecx

; 165  : 			elements--;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+9]
	sub	al, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+9], al

; 166  : 			}
; 167  : 		else

	jmp	SHORT $LN1@RemoveChil
$LN5@RemoveChil:

; 168  : 			i++;

	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN1@RemoveChil:

; 169  : 		}

	jmp	$LN7@RemoveChil
$LN8@RemoveChil:

; 170  : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?RemoveChild@DivisionClass@@QAEXVVU_ID@@@Z ENDP		; DivisionClass::RemoveChild
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\division.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?RemoveChildren@DivisionClass@@QAEXXZ PROC		; DivisionClass::RemoveChildren
; _this$ = ecx

; 138  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 139  : 	elements = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+9], 0

; 140  : 	c_element = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+10], 0

; 141  : 	if ( element )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN1@RemoveChil

; 142  : 		#ifdef USE_SH_POOLS
; 143  : 		MemFreePtr( element );
; 144  : 		#else
; 145  : 		delete element;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@RemoveChil:

; 146  : 		#endif
; 147  : 	element = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 148  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveChildren@DivisionClass@@QAEXXZ ENDP		; DivisionClass::RemoveChildren
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\division.cpp
_TEXT	SEGMENT
tv132 = -88						; size = 4
_btype$ = -84						; size = 4
_bcount$ = -80						; size = 4
_ex$ = -76						; size = 2
_ey$ = -72						; size = 2
_u$ = -68						; size = 4
_i$ = -64						; size = 4
_this$ = -60						; size = 4
_count$ = -56						; size = 50
__$ArrayPad$ = -4					; size = 4
?UpdateDivisionStats@DivisionClass@@QAEXXZ PROC		; DivisionClass::UpdateDivisionStats
; _this$ = ecx

; 105  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 	Unit			u;
; 107  : 	GridIndex		ex,ey;
; 108  : 	uchar			count[50] = { 0 };

	mov	BYTE PTR _count$[ebp], 0
	push	49					; 00000031H
	push	0
	lea	eax, DWORD PTR _count$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 109  : 	int				bcount=0,btype=0,i;

	mov	DWORD PTR _bcount$[ebp], 0
	mov	DWORD PTR _btype$[ebp], 0

; 110  : 
; 111  : 	x = y = 0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+2], cx
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx], ax

; 112  : 	u = GetFirstUnitElement();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFirstUnitElement@DivisionClass@@QAEPAVUnitClass@@XZ ; DivisionClass::GetFirstUnitElement
	mov	DWORD PTR _u$[ebp], eax
$LN7@UpdateDivi:

; 113  : 	while (u)

	cmp	DWORD PTR _u$[ebp], 0
	je	SHORT $LN6@UpdateDivi

; 114  : 		{
; 115  : 		u->GetLocation(&ex,&ey);

	lea	edx, DWORD PTR _ey$[ebp]
	push	edx
	lea	eax, DWORD PTR _ex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetLocation@FalconEntity@@QBEXPAF0@Z	; FalconEntity::GetLocation

; 116  : 		x += ex;

	movsx	ecx, WORD PTR _ex$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx], ax

; 117  : 		y += ey;

	movsx	edx, WORD PTR _ey$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	add	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+2], cx

; 118  : 		count[u->GetSType()]++;

	mov	ecx, DWORD PTR _u$[ebp]
	call	?GetSType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSType
	movzx	eax, al
	lea	ecx, DWORD PTR _count$[ebp+eax]
	mov	DWORD PTR tv132[ebp], ecx
	mov	edx, DWORD PTR tv132[ebp]
	mov	al, BYTE PTR [edx]
	add	al, 1
	mov	ecx, DWORD PTR tv132[ebp]
	mov	BYTE PTR [ecx], al

; 119  : 		u = GetNextUnitElement();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNextUnitElement@DivisionClass@@QAEPAVUnitClass@@XZ ; DivisionClass::GetNextUnitElement
	mov	DWORD PTR _u$[ebp], eax

; 120  : 		}

	jmp	SHORT $LN7@UpdateDivi
$LN6@UpdateDivi:

; 121  : 	if (elements)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	test	eax, eax
	je	SHORT $LN5@UpdateDivi

; 122  : 		{
; 123  : 		x /= elements;

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [ecx+9]
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx]
	cdq
	idiv	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx], ax

; 124  : 		y /= elements;

	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+9]
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+2]
	cdq
	idiv	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+2], ax
$LN5@UpdateDivi:

; 125  : 		}
; 126  : 	for (i=0; i<50; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@UpdateDivi
$LN3@UpdateDivi:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@UpdateDivi:
	cmp	DWORD PTR _i$[ebp], 50			; 00000032H
	jge	SHORT $LN2@UpdateDivi

; 127  : 		{
; 128  : 		if (count[i] > bcount)

	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _count$[ebp+eax]
	cmp	ecx, DWORD PTR _bcount$[ebp]
	jle	SHORT $LN1@UpdateDivi

; 129  : 			{
; 130  : 			bcount = count[i];

	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _count$[ebp+edx]
	mov	DWORD PTR _bcount$[ebp], eax

; 131  : 			btype = i;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _btype$[ebp], ecx
$LN1@UpdateDivi:

; 132  : 			}
; 133  : 		}

	jmp	SHORT $LN3@UpdateDivi
$LN2@UpdateDivi:

; 134  : 	type = btype;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _btype$[ebp]
	mov	BYTE PTR [edx+8], al

; 135  : 	}

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateDivisionStats@DivisionClass@@QAEXXZ ENDP		; DivisionClass::UpdateDivisionStats
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\division.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
_i$2 = -4						; size = 4
_e$ = 8							; size = 4
?GetPrevUnitElement@DivisionClass@@QAEPAVUnitClass@@PAV2@@Z PROC ; DivisionClass::GetPrevUnitElement
; _this$ = ecx

; 74   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 	for (int i=1; i<elements; i++)

	mov	DWORD PTR _i$2[ebp], 1
	jmp	SHORT $LN4@GetPrevUni
$LN3@GetPrevUni:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@GetPrevUni:
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+9]
	cmp	DWORD PTR _i$2[ebp], edx
	jge	SHORT $LN2@GetPrevUni

; 76   : 		{
; 77   : 		if (element[i] == e->Id())

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _i$2[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@GetPrevUni

; 78   : 			return GetUnitElement(i-1);

	mov	edx, DWORD PTR _i$2[ebp]
	sub	edx, 1
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnitElement@DivisionClass@@QAEPAVUnitClass@@H@Z ; DivisionClass::GetUnitElement
	jmp	SHORT $LN5@GetPrevUni
$LN1@GetPrevUni:

; 79   : 		}

	jmp	SHORT $LN3@GetPrevUni
$LN2@GetPrevUni:

; 80   : 	return NULL;

	xor	eax, eax
$LN5@GetPrevUni:

; 81   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?GetPrevUnitElement@DivisionClass@@QAEPAVUnitClass@@PAV2@@Z ENDP ; DivisionClass::GetPrevUnitElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\division.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eid$ = 8						; size = 4
?GetUnitElementByID@DivisionClass@@QAEPAVUnitClass@@H@Z PROC ; DivisionClass::GetUnitElementByID
; _this$ = ecx

; 97   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 	if (eid < elements)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	cmp	DWORD PTR _eid$[ebp], ecx
	jge	SHORT $LN1@GetUnitEle

; 99   : 		return GetUnitElement(eid);

	mov	edx, DWORD PTR _eid$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnitElement@DivisionClass@@QAEPAVUnitClass@@H@Z ; DivisionClass::GetUnitElement
	jmp	SHORT $LN2@GetUnitEle
$LN1@GetUnitEle:

; 100  : 
; 101  : 	return NULL;

	xor	eax, eax
$LN2@GetUnitEle:

; 102  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitElementByID@DivisionClass@@QAEPAVUnitClass@@H@Z ENDP ; DivisionClass::GetUnitElementByID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\division.cpp
_TEXT	SEGMENT
_ret$ = -8						; size = 4
_this$ = -4						; size = 4
_en$ = 8						; size = 4
?GetUnitElement@DivisionClass@@QAEPAVUnitClass@@H@Z PROC ; DivisionClass::GetUnitElement
; _this$ = ecx

; 84   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 85   : 	Unit	ret = NULL;

	mov	DWORD PTR _ret$[ebp], 0

; 86   : 
; 87   : 	if (en < elements && element[c_element])

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	cmp	DWORD PTR _en$[ebp], ecx
	jge	SHORT $LN3@GetUnitEle
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+10]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	ecx, DWORD PTR [edx+eax*8]
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	test	eax, eax
	je	SHORT $LN3@GetUnitEle

; 88   : 		{
; 89   : 		ret = (Unit)vuDatabase->Find(element[en]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _en$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+4]
	push	eax
	mov	ecx, DWORD PTR [ecx+edx*8]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _ret$[ebp], eax

; 90   : 		if (!ret || ret->GetDomain() != DOMAIN_LAND)

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN1@GetUnitEle
	mov	ecx, DWORD PTR _ret$[ebp]
	call	?GetDomain@CampBaseClass@@QBEEXZ	; CampBaseClass::GetDomain
	movzx	edx, al
	cmp	edx, 3
	je	SHORT $LN3@GetUnitEle
$LN1@GetUnitEle:

; 91   : 			RemoveChild(element[en]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _en$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+4]
	push	eax
	mov	ecx, DWORD PTR [ecx+edx*8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveChild@DivisionClass@@QAEXVVU_ID@@@Z ; DivisionClass::RemoveChild
$LN3@GetUnitEle:

; 92   : 		}
; 93   : 	return ret;

	mov	eax, DWORD PTR _ret$[ebp]

; 94   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitElement@DivisionClass@@QAEPAVUnitClass@@H@Z ENDP ; DivisionClass::GetUnitElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\division.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNextUnitElement@DivisionClass@@QAEPAVUnitClass@@XZ PROC ; DivisionClass::GetNextUnitElement
; _this$ = ecx

; 68   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 	c_element++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+10]
	add	cl, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+10], cl

; 70   : 	return GetUnitElement(c_element);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+10]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnitElement@DivisionClass@@QAEPAVUnitClass@@H@Z ; DivisionClass::GetUnitElement

; 71   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextUnitElement@DivisionClass@@QAEPAVUnitClass@@XZ ENDP ; DivisionClass::GetNextUnitElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\division.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFirstUnitElement@DivisionClass@@QAEPAVUnitClass@@XZ PROC ; DivisionClass::GetFirstUnitElement
; _this$ = ecx

; 62   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 63   : 	c_element = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+10], 0

; 64   : 	return GetUnitElement(c_element);

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+10]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnitElement@DivisionClass@@QAEPAVUnitClass@@H@Z ; DivisionClass::GetUnitElement

; 65   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstUnitElement@DivisionClass@@QAEPAVUnitClass@@XZ ENDP ; DivisionClass::GetFirstUnitElement
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\division.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
_object$ = 16						; size = 4
?GetName@DivisionClass@@QAEPADPADHH@Z PROC		; DivisionClass::GetName
; _this$ = ecx

; 57   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 58   : 	return GetDivisionName (nid, type, buffer, size, object);

	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+4]
	push	eax
	call	?GetDivisionName@@YAPADHHPADHH@Z	; GetDivisionName
	add	esp, 20					; 00000014H

; 59   : 	}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetName@DivisionClass@@QAEPADPADHH@Z ENDP		; DivisionClass::GetName
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\division.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
??1DivisionClass@@QAE@XZ PROC				; DivisionClass::~DivisionClass
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 	if (element)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@DivisionCl

; 46   : 		#ifdef USE_SH_POOLS
; 47   : 		MemFreePtr( element );
; 48   : 		#else
; 49   : 		delete element;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@DivisionCl:

; 50   : 		#endif
; 51   : 	element = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 52   : 	next = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0

; 53   : 	ShiAssert ( this != DivisionData[owner] );
; 54   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1DivisionClass@@QAE@XZ ENDP				; DivisionClass::~DivisionClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\camptask\division.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DivisionClass@@QAE@XZ PROC				; DivisionClass::DivisionClass
; _this$ = ecx

; 33   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 34   : 	x = y = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+2], ax
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax], dx

; 35   : 	nid = 0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+4], cx

; 36   : 	owner = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+6], ax

; 37   : 	elements = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+9], 0

; 38   : 	c_element = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+10], 0

; 39   : 	element = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 40   : 	next = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0

; 41   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0DivisionClass@@QAE@XZ ENDP				; DivisionClass::DivisionClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campaign.h
;	COMDAT ?CampLeaveCriticalSection@@YAXXZ
_TEXT	SEGMENT
?CampLeaveCriticalSection@@YAXXZ PROC			; CampLeaveCriticalSection, COMDAT

; 51   : inline void CampLeaveCriticalSection(){ F4LeaveCriticalSection(campCritical); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?campCritical@@3PAUF4CSECTIONHANDLE@@A ; campCritical
	push	eax
	call	_F4LeaveCriticalSection
	add	esp, 4
	pop	ebp
	ret	0
?CampLeaveCriticalSection@@YAXXZ ENDP			; CampLeaveCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campaign.h
;	COMDAT ?CampEnterCriticalSection@@YAXXZ
_TEXT	SEGMENT
?CampEnterCriticalSection@@YAXXZ PROC			; CampEnterCriticalSection, COMDAT

; 50   : inline void CampEnterCriticalSection(){ F4EnterCriticalSection(campCritical); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?campCritical@@3PAUF4CSECTIONHANDLE@@A ; campCritical
	push	eax
	call	_F4EnterCriticalSection
	add	esp, 4
	pop	ebp
	ret	0
?CampEnterCriticalSection@@YAXXZ ENDP			; CampEnterCriticalSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetSType@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSType@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetSType, COMDAT
; _this$ = ecx

; 290  : 	uchar GetSType (void)	const						{	return (EntityType())->classInfo_[VU_STYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSType@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetSType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetDomain@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDomain@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetDomain, COMDAT
; _this$ = ecx

; 287  : 	uchar GetDomain (void)	const						{	return (EntityType())->classInfo_[VU_DOMAIN]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 0
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDomain@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetDomain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetOwner@CampBaseClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOwner@CampBaseClass@@QAEEXZ PROC			; CampBaseClass::GetOwner, COMDAT
; _this$ = ecx

; 241  : 	Control GetOwner (void)										{	return owner; }			// Old form

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+154]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOwner@CampBaseClass@@QAEEXZ ENDP			; CampBaseClass::GetOwner
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??BVU_ID@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVU_ID@@QBEKXZ PROC					; VU_ID::operator unsigned long, COMDAT
; _this$ = ecx

; 162  : 	operator VU_KEY() const { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 		return (VU_KEY)(((unsigned short)creator_ << 16) | ((unsigned short)num_)); 

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??BVU_SESSION_ID@@QBEKXZ		; VU_SESSION_ID::operator unsigned long
	movzx	eax, ax
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx]
	or	eax, edx

; 164  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVU_ID@@QBEKXZ ENDP					; VU_ID::operator unsigned long
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??8VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator==, COMDAT
; _this$ = ecx

; 104  : 	bool operator == (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		return (
; 106  : 			num_ == rhs.num_ ? 
; 107  : 			(creator_ == rhs.creator_ ? true : false) : 
; 108  : 			false
; 109  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 0
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 110  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_ID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VU_ID@@QAE@XZ PROC					; VU_ID::VU_ID, COMDAT
; _this$ = ecx

; 100  : 	VU_ID() : num_(0), creator_(0){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0VU_SESSION_ID@@QAE@K@Z		; VU_SESSION_ID::VU_SESSION_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0VU_ID@@QAE@XZ ENDP					; VU_ID::VU_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??BVU_SESSION_ID@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVU_SESSION_ID@@QBEKXZ PROC				; VU_SESSION_ID::operator unsigned long, COMDAT
; _this$ = ecx

; 79   : 	operator unsigned long() const { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 		return (unsigned long) value_; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 81   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVU_SESSION_ID@@QBEKXZ ENDP				; VU_SESSION_ID::operator unsigned long
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_SESSION_ID@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??0VU_SESSION_ID@@QAE@K@Z PROC				; VU_SESSION_ID::VU_SESSION_ID, COMDAT
; _this$ = ecx

; 53   : 	VU_SESSION_ID(unsigned long value) : value_((unsigned long)value) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0VU_SESSION_ID@@QAE@K@Z ENDP				; VU_SESSION_ID::VU_SESSION_ID
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
